
salvacao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800b880  0800b880  0001b880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc38  0800bc38  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc38  0800bc38  0001bc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc40  0800bc40  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc40  0800bc40  0001bc40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc44  0800bc44  0001bc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800bc48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006bf8  20000254  0800be9c  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00010004  20006e4c  0800be9c  00026e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd0a  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a8a  00000000  00000000  0003bf8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  0003fa18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001430  00000000  00000000  00041010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006c48  00000000  00000000  00042440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013b65  00000000  00000000  00049088  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccd62  00000000  00000000  0005cbed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012994f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ab0  00000000  00000000  001299cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000254 	.word	0x20000254
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b864 	.word	0x0800b864

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000258 	.word	0x20000258
 80001cc:	0800b864 	.word	0x0800b864

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <IMU_config>:
//includes
#include "main.h"
#include "IMU_read.h"


void IMU_config(SPI_HandleTypeDef *hspi){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	uint8_t write_words[10];

	//accelerometer config
	write_words[0]=BMX055_RESET_REG;
 8000f50:	2314      	movs	r3, #20
 8000f52:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET; //accelerometer soft reset
 8000f54:	23b6      	movs	r3, #182	; 0xb6
 8000f56:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_ACC_PMU_RANGE_REG;
 8000f58:	230f      	movs	r3, #15
 8000f5a:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_ACC_RANGE_2;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_ACC_PMU_BW_REG;
 8000f60:	2310      	movs	r3, #16
 8000f62:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_ACC_PMU_BW_7_81;
 8000f64:	2308      	movs	r3, #8
 8000f66:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_ACC_PMU_LPW_REG;
 8000f68:	2311      	movs	r3, #17
 8000f6a:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_ACC_PMU_LPW_MODE_NOMAL|BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	4833      	ldr	r0, [pc, #204]	; (8001044 <IMU_config+0xfc>)
 8000f76:	f003 f8e5 	bl	8004144 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 8000f7a:	f107 010c 	add.w	r1, r7, #12
 8000f7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f82:	2208      	movs	r2, #8
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f005 f8c9 	bl	800611c <HAL_SPI_Transmit>
	HAL_Delay(100);
 8000f8a:	2064      	movs	r0, #100	; 0x64
 8000f8c:	f001 fe6e 	bl	8002c6c <HAL_Delay>
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2110      	movs	r1, #16
 8000f94:	482b      	ldr	r0, [pc, #172]	; (8001044 <IMU_config+0xfc>)
 8000f96:	f003 f8d5 	bl	8004144 <HAL_GPIO_WritePin>

	// gyroscope config
	write_words[0]=BMX055_RESET_REG;
 8000f9a:	2314      	movs	r3, #20
 8000f9c:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 8000f9e:	23b6      	movs	r3, #182	; 0xb6
 8000fa0:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_GYRO_RANGE_REG;
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_GYRO_RANGE_262_4; // Select Gyro Range(262.4 LSB/°/s)
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_GYRO_BW_REG;
 8000faa:	2310      	movs	r3, #16
 8000fac:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_GYRO_BW_64; // Select Gyro BW   (32Hz)
 8000fae:	2306      	movs	r3, #6
 8000fb0:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_GYRO_LPM1_REG;
 8000fb2:	2311      	movs	r3, #17
 8000fb4:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_GYRO_LPM1_MODE_NOMAL|BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <IMU_config+0x100>)
 8000fc0:	f003 f8c0 	bl	8004144 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 8000fc4:	f107 010c 	add.w	r1, r7, #12
 8000fc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fcc:	2208      	movs	r2, #8
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f005 f8a4 	bl	800611c <HAL_SPI_Transmit>
	HAL_Delay(100);
 8000fd4:	2064      	movs	r0, #100	; 0x64
 8000fd6:	f001 fe49 	bl	8002c6c <HAL_Delay>
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2104      	movs	r1, #4
 8000fde:	481a      	ldr	r0, [pc, #104]	; (8001048 <IMU_config+0x100>)
 8000fe0:	f003 f8b0 	bl	8004144 <HAL_GPIO_WritePin>

	// magnetometer config
	write_words[0]=BMX055_RESET_REG;
 8000fe4:	2314      	movs	r3, #20
 8000fe6:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 8000fe8:	23b6      	movs	r3, #182	; 0xb6
 8000fea:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_MAG_POW_CTL_REG;
 8000fec:	234b      	movs	r3, #75	; 0x4b
 8000fee:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_MAG_POW_CTL_SLEEP_MODE; // Select Sleep mode
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_MAG_ADV_OP_OUTPUT_REG;
 8000ff4:	234c      	movs	r3, #76	; 0x4c
 8000ff6:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_MAG_DATA_RATE_10; // (NomalMode, ODR 10Hz)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_MAG_REP_XY_REG;
 8000ffc:	2351      	movs	r3, #81	; 0x51
 8000ffe:	74bb      	strb	r3, [r7, #18]
	write_words[7]=0x04; // Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
 8001000:	2304      	movs	r3, #4
 8001002:	74fb      	strb	r3, [r7, #19]
	write_words[8]=BMX055_MAG_REP_Z_REG;
 8001004:	2352      	movs	r3, #82	; 0x52
 8001006:	753b      	strb	r3, [r7, #20]
	write_words[9]= 0x0F; // Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
 8001008:	230f      	movs	r3, #15
 800100a:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <IMU_config+0x100>)
 8001014:	f003 f896 	bl	8004144 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 10, 2000);
 8001018:	f107 010c 	add.w	r1, r7, #12
 800101c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001020:	220a      	movs	r2, #10
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f005 f87a 	bl	800611c <HAL_SPI_Transmit>
	HAL_Delay(100);
 8001028:	2064      	movs	r0, #100	; 0x64
 800102a:	f001 fe1f 	bl	8002c6c <HAL_Delay>
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <IMU_config+0x100>)
 8001036:	f003 f885 	bl	8004144 <HAL_GPIO_WritePin>

}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400

0800104c <IMU_acc_read>:

void IMU_acc_read(SPI_HandleTypeDef *hspi, int *accel_data){
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_ACC_DATA_START_REG;
 8001056:	2382      	movs	r3, #130	; 0x82
 8001058:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET); //read acceloremeter data
 800105a:	2200      	movs	r2, #0
 800105c:	2110      	movs	r1, #16
 800105e:	4835      	ldr	r0, [pc, #212]	; (8001134 <IMU_acc_read+0xe8>)
 8001060:	f003 f870 	bl	8004144 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001064:	f107 0113 	add.w	r1, r7, #19
 8001068:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800106c:	2201      	movs	r2, #1
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f005 f854 	bl	800611c <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	e00c      	b.n	8001094 <IMU_acc_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f107 020c 	add.w	r2, r7, #12
 8001080:	18d1      	adds	r1, r2, r3
 8001082:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001086:	2201      	movs	r2, #1
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f005 f97b 	bl	8006384 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b05      	cmp	r3, #5
 8001098:	ddef      	ble.n	800107a <IMU_acc_read+0x2e>
	}
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2110      	movs	r1, #16
 800109e:	4825      	ldr	r0, [pc, #148]	; (8001134 <IMU_acc_read+0xe8>)
 80010a0:	f003 f850 	bl	8004144 <HAL_GPIO_WritePin>
	accel_data[0]=((store_data[1]<<4)+(store_data[0]>>4));
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	7b3a      	ldrb	r2, [r7, #12]
 80010aa:	0912      	lsrs	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	441a      	add	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	601a      	str	r2, [r3, #0]
	accel_data[1]=((store_data[3]<<4)+(store_data[2]>>4));
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	011a      	lsls	r2, r3, #4
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4619      	mov	r1, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	3304      	adds	r3, #4
 80010c4:	440a      	add	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
	accel_data[2]=((store_data[5]<<4)+(store_data[4]>>4));
 80010c8:	7c7b      	ldrb	r3, [r7, #17]
 80010ca:	011a      	lsls	r2, r3, #4
 80010cc:	7c3b      	ldrb	r3, [r7, #16]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3308      	adds	r3, #8
 80010d8:	440a      	add	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
	//HAL_Delay(100);

	if (accel_data[0] > 2047)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010e4:	db05      	blt.n	80010f2 <IMU_acc_read+0xa6>
	{
		accel_data[0] -= 4096;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (accel_data[1]> 2047)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3304      	adds	r3, #4
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010fc:	db07      	blt.n	800110e <IMU_acc_read+0xc2>
	{
		accel_data[1] -= 4096;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	3304      	adds	r3, #4
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3304      	adds	r3, #4
 8001108:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 800110c:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (accel_data[2] > 2047)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3308      	adds	r3, #8
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001118:	db07      	blt.n	800112a <IMU_acc_read+0xde>
	{
		accel_data[2] -= 4096;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	3308      	adds	r3, #8
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3308      	adds	r3, #8
 8001124:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8001128:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40020000 	.word	0x40020000

08001138 <IMU_gyro_read>:

void IMU_gyro_read(SPI_HandleTypeDef *hspi, int *gyro_data){
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_GYRO_DATA_START_REG;
 8001142:	2382      	movs	r3, #130	; 0x82
 8001144:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET); //read gyroscope data
 8001146:	2200      	movs	r2, #0
 8001148:	2104      	movs	r1, #4
 800114a:	4832      	ldr	r0, [pc, #200]	; (8001214 <IMU_gyro_read+0xdc>)
 800114c:	f002 fffa 	bl	8004144 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001150:	f107 0113 	add.w	r1, r7, #19
 8001154:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001158:	2201      	movs	r2, #1
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f004 ffde 	bl	800611c <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e00c      	b.n	8001180 <IMU_gyro_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f107 020c 	add.w	r2, r7, #12
 800116c:	18d1      	adds	r1, r2, r3
 800116e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001172:	2201      	movs	r2, #1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f005 f905 	bl	8006384 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2b05      	cmp	r3, #5
 8001184:	ddef      	ble.n	8001166 <IMU_gyro_read+0x2e>
	}
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2104      	movs	r1, #4
 800118a:	4822      	ldr	r0, [pc, #136]	; (8001214 <IMU_gyro_read+0xdc>)
 800118c:	f002 ffda 	bl	8004144 <HAL_GPIO_WritePin>
	gyro_data[0]=((store_data[1]<<8)+(store_data[0]));
 8001190:	7b7b      	ldrb	r3, [r7, #13]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	7b3a      	ldrb	r2, [r7, #12]
 8001196:	441a      	add	r2, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	601a      	str	r2, [r3, #0]
	gyro_data[1]=((store_data[3]<<8)+(store_data[2]));
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	021a      	lsls	r2, r3, #8
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	4619      	mov	r1, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3304      	adds	r3, #4
 80011a8:	440a      	add	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
	gyro_data[2]=((store_data[5]<<8)+(store_data[4]));
 80011ac:	7c7b      	ldrb	r3, [r7, #17]
 80011ae:	021a      	lsls	r2, r3, #8
 80011b0:	7c3b      	ldrb	r3, [r7, #16]
 80011b2:	4619      	mov	r1, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	3308      	adds	r3, #8
 80011b8:	440a      	add	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
	//HAL_Delay(100);

	if (gyro_data[0] > 32767)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011c4:	db05      	blt.n	80011d2 <IMU_gyro_read+0x9a>
	{
		gyro_data[0] -= 65536;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (gyro_data[1]> 32767)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3304      	adds	r3, #4
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011dc:	db07      	blt.n	80011ee <IMU_gyro_read+0xb6>
	{
		gyro_data[1] -= 65536;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3304      	adds	r3, #4
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3304      	adds	r3, #4
 80011e8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80011ec:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (gyro_data[2] > 32767)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3308      	adds	r3, #8
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011f8:	db07      	blt.n	800120a <IMU_gyro_read+0xd2>
	{
		gyro_data[2] -= 65536;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	3308      	adds	r3, #8
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	3308      	adds	r3, #8
 8001204:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001208:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40020400 	.word	0x40020400

08001218 <adcInt2Volt>:
#include "adcUnitConversion.h"
#include "stdio.h"
#include "math.h"
#include "main.h"

float adcInt2Volt (unsigned long int ADCReading){
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

	//ADCVREF reference voltage = ?
	return ((float)ADCReading/(1 << 12 ))*ADCVREF;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800122a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001268 <adcInt2Volt+0x50>
 800122e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001232:	ee16 0a90 	vmov	r0, s13
 8001236:	f7ff f987 	bl	8000548 <__aeabi_f2d>
 800123a:	a309      	add	r3, pc, #36	; (adr r3, 8001260 <adcInt2Volt+0x48>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff f9da 	bl	80005f8 <__aeabi_dmul>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	f7ff fcac 	bl	8000ba8 <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	ee07 3a90 	vmov	s15, r3
}
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	66666666 	.word	0x66666666
 8001264:	400a6666 	.word	0x400a6666
 8001268:	45800000 	.word	0x45800000
 800126c:	00000000 	.word	0x00000000

08001270 <motorCurrent>:


float motorCurrent (int adcReading){
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	//0.0066 sensor's scale factor
	return (adcInt2Volt(adcReading) - BIASSENSOR)/0.0066;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ffcc 	bl	8001218 <adcInt2Volt>
 8001280:	ee10 3a10 	vmov	r3, s0
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f95f 	bl	8000548 <__aeabi_f2d>
 800128a:	a30f      	add	r3, pc, #60	; (adr r3, 80012c8 <motorCurrent+0x58>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7fe fffa 	bl	8000288 <__aeabi_dsub>
 8001294:	4603      	mov	r3, r0
 8001296:	460c      	mov	r4, r1
 8001298:	4618      	mov	r0, r3
 800129a:	4621      	mov	r1, r4
 800129c:	a30c      	add	r3, pc, #48	; (adr r3, 80012d0 <motorCurrent+0x60>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff fad3 	bl	800084c <__aeabi_ddiv>
 80012a6:	4603      	mov	r3, r0
 80012a8:	460c      	mov	r4, r1
 80012aa:	4618      	mov	r0, r3
 80012ac:	4621      	mov	r1, r4
 80012ae:	f7ff fc7b 	bl	8000ba8 <__aeabi_d2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	ee07 3a90 	vmov	s15, r3
}
 80012b8:	eeb0 0a67 	vmov.f32	s0, s15
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd90      	pop	{r4, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	f3af 8000 	nop.w
 80012c8:	66666666 	.word	0x66666666
 80012cc:	3ffa6666 	.word	0x3ffa6666
 80012d0:	02752546 	.word	0x02752546
 80012d4:	3f7b089a 	.word	0x3f7b089a

080012d8 <igbtTemp>:

float igbtTemp (int adcReading){
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	//int Rmin = 160, Rmax = 16100;
	//float Vmin = 0.05, Vmax = 3.25;
	//int Tmin = 0, Tmax = 150;

	float m, b, T;
	m = b = T = 0;
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	60fb      	str	r3, [r7, #12]

	m = 53.085;//(Tmin-Tmax)/(Vmax-Vmin);
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <igbtTemp+0x98>)
 80012f0:	60fb      	str	r3, [r7, #12]
	b = 22.025;//Tmin - m*Vmax;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <igbtTemp+0x9c>)
 80012f4:	613b      	str	r3, [r7, #16]

	T = m*(adcInt2Volt(adcReading)/3.3)+b;
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f7ff f926 	bl	8000548 <__aeabi_f2d>
 80012fc:	4604      	mov	r4, r0
 80012fe:	460d      	mov	r5, r1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff88 	bl	8001218 <adcInt2Volt>
 8001308:	ee10 3a10 	vmov	r3, s0
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f91b 	bl	8000548 <__aeabi_f2d>
 8001312:	a315      	add	r3, pc, #84	; (adr r3, 8001368 <igbtTemp+0x90>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff fa98 	bl	800084c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7ff f968 	bl	80005f8 <__aeabi_dmul>
 8001328:	4603      	mov	r3, r0
 800132a:	460c      	mov	r4, r1
 800132c:	4625      	mov	r5, r4
 800132e:	461c      	mov	r4, r3
 8001330:	6938      	ldr	r0, [r7, #16]
 8001332:	f7ff f909 	bl	8000548 <__aeabi_f2d>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4620      	mov	r0, r4
 800133c:	4629      	mov	r1, r5
 800133e:	f7fe ffa5 	bl	800028c <__adddf3>
 8001342:	4603      	mov	r3, r0
 8001344:	460c      	mov	r4, r1
 8001346:	4618      	mov	r0, r3
 8001348:	4621      	mov	r1, r4
 800134a:	f7ff fc2d 	bl	8000ba8 <__aeabi_d2f>
 800134e:	4603      	mov	r3, r0
 8001350:	617b      	str	r3, [r7, #20]

	return T;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	ee07 3a90 	vmov	s15, r3
}
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	66666666 	.word	0x66666666
 800136c:	400a6666 	.word	0x400a6666
 8001370:	4254570a 	.word	0x4254570a
 8001374:	41b03333 	.word	0x41b03333

08001378 <motorTemp>:

float motorTemp (unsigned long int adcReading){
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	//int Rmin = 1600, Rmax = 4000;   //resistance
	//float Vmin = 0.05, Vmax = 3.25; //voltage
	//int Tmin=0, Tmax=150;			//temperature

	float m, b, Rt, T;
	m = b = Rt = T = 0;
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	60bb      	str	r3, [r7, #8]

	/*m = (Tmin-Tmax)/(Vmin-Vmax);
	b = Tmin-Vmin*m; */
	m = -119.81;
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <motorTemp+0x50>)
 8001394:	60bb      	str	r3, [r7, #8]
	b = 365.61;
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <motorTemp+0x54>)
 8001398:	60fb      	str	r3, [r7, #12]

	T = m*(adcInt2Volt(adcReading))+b;
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff3c 	bl	8001218 <adcInt2Volt>
 80013a0:	eeb0 7a40 	vmov.f32	s14, s0
 80013a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80013b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b4:	edc7 7a05 	vstr	s15, [r7, #20]

	return T;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	ee07 3a90 	vmov	s15, r3

}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	c2ef9eb8 	.word	0xc2ef9eb8
 80013cc:	43b6ce14 	.word	0x43b6ce14

080013d0 <voltageAC>:

float voltageAC (int adcReading){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

	/*
	 * R1 = R28 = 75k
	 * R2 = R30 = 10k
	 */
	int R1 = 1800000;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <voltageAC+0x50>)
 80013da:	617b      	str	r3, [r7, #20]
	int R2 = 10000;
 80013dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80013e0:	613b      	str	r3, [r7, #16]

	float Vout = adcInt2Volt(adcReading);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff17 	bl	8001218 <adcInt2Volt>
 80013ea:	ed87 0a03 	vstr	s0, [r7, #12]

	float Vin = ((R1+R2)/R2)*Vout;
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	441a      	add	r2, r3
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001402:	ed97 7a03 	vldr	s14, [r7, #12]
 8001406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140a:	edc7 7a02 	vstr	s15, [r7, #8]

	return Vin;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	ee07 3a90 	vmov	s15, r3

}
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	001b7740 	.word	0x001b7740

08001424 <voltageDC>:

float voltageDC (int adcReading){
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	 * R1 = R9 = 300k
	 * R2 = R12 = 2k
	 * R3 = R10 = 39  <- negligenciar?
	 */

	int R1 = 300000;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <voltageDC+0x50>)
 800142e:	617b      	str	r3, [r7, #20]
	int R2 = 2000;
 8001430:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001434:	613b      	str	r3, [r7, #16]
	//int R3 = 39;

	float Vout = adcInt2Volt(adcReading);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff feed 	bl	8001218 <adcInt2Volt>
 800143e:	ed87 0a03 	vstr	s0, [r7, #12]

	float Vin = ((R1+R2)/R2)*Vout;
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	441a      	add	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	fb92 f3f3 	sdiv	r3, r2, r3
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	ed97 7a03 	vldr	s14, [r7, #12]
 800145a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145e:	edc7 7a02 	vstr	s15, [r7, #8]

	return Vin;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	ee07 3a90 	vmov	s15, r3

}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	000493e0 	.word	0x000493e0

08001478 <pedalPos>:


float pedalPos (int adcReading){
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

	float pos = (adcInt2Volt(adcReading)/ADCVREF)*100;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fec8 	bl	8001218 <adcInt2Volt>
 8001488:	ee10 3a10 	vmov	r3, s0
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f85b 	bl	8000548 <__aeabi_f2d>
 8001492:	a310      	add	r3, pc, #64	; (adr r3, 80014d4 <pedalPos+0x5c>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f9d8 	bl	800084c <__aeabi_ddiv>
 800149c:	4603      	mov	r3, r0
 800149e:	460c      	mov	r4, r1
 80014a0:	4618      	mov	r0, r3
 80014a2:	4621      	mov	r1, r4
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <pedalPos+0x58>)
 80014aa:	f7ff f8a5 	bl	80005f8 <__aeabi_dmul>
 80014ae:	4603      	mov	r3, r0
 80014b0:	460c      	mov	r4, r1
 80014b2:	4618      	mov	r0, r3
 80014b4:	4621      	mov	r1, r4
 80014b6:	f7ff fb77 	bl	8000ba8 <__aeabi_d2f>
 80014ba:	4603      	mov	r3, r0
 80014bc:	60fb      	str	r3, [r7, #12]

	return pos;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	ee07 3a90 	vmov	s15, r3

}
 80014c4:	eeb0 0a67 	vmov.f32	s0, s15
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40590000 	.word	0x40590000
 80014d4:	66666666 	.word	0x66666666
 80014d8:	400a6666 	.word	0x400a6666

080014dc <motorSpeed>:
 */

#include "main.h"
#include "encoderMode.h"

int motorSpeed (uint32_t *cnt1, uint32_t *tick, TIM_HandleTypeDef htim2){
 80014dc:	b082      	sub	sp, #8
 80014de:	b590      	push	{r4, r7, lr}
 80014e0:	b087      	sub	sp, #28
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
 80014e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80014ec:	e881 000c 	stmia.w	r1, {r2, r3}

	int diff = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
	uint32_t cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	613b      	str	r3, [r7, #16]
	//uint32_t time1 = (HAL_GetTick() - *tick)*0.001;
	//printf("time = %lu\n", time1);

	printf("cnt1 = %lu counter2 = %lu\n",*cnt1,cnt2);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4619      	mov	r1, r3
 8001502:	4831      	ldr	r0, [pc, #196]	; (80015c8 <motorSpeed+0xec>)
 8001504:	f008 f8d0 	bl	80096a8 <iprintf>

	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8001508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2b10      	cmp	r3, #16
 8001512:	d113      	bne.n	800153c <motorSpeed+0x60>
		if(cnt2 < *cnt1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	429a      	cmp	r2, r3
 800151c:	d205      	bcs.n	800152a <motorSpeed+0x4e>
			diff = *cnt1 - cnt2;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e01b      	b.n	8001562 <motorSpeed+0x86>
		else
			diff = (65535 - cnt2) + *cnt1;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001536:	33ff      	adds	r3, #255	; 0xff
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e012      	b.n	8001562 <motorSpeed+0x86>
	} else {
		if(cnt2 > *cnt1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	429a      	cmp	r2, r3
 8001544:	d905      	bls.n	8001552 <motorSpeed+0x76>
			diff = cnt2 - *cnt1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e007      	b.n	8001562 <motorSpeed+0x86>
		else
			diff = (65535 - *cnt1) + cnt2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800155e:	33ff      	adds	r3, #255	; 0xff
 8001560:	617b      	str	r3, [r7, #20]
	}



	printf("diff = %d\n", diff);
 8001562:	6979      	ldr	r1, [r7, #20]
 8001564:	4819      	ldr	r0, [pc, #100]	; (80015cc <motorSpeed+0xf0>)
 8001566:	f008 f89f 	bl	80096a8 <iprintf>
	//float speed = (((float)(diff)/8)*60)*2;  //((diff/8)*60)/0.02;  // change when sysTimer configured
	float speed = (((float)(diff)/8)*60);//  /(time1);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001574:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80015d0 <motorSpeed+0xf4>
 8001580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001584:	edc7 7a03 	vstr	s15, [r7, #12]


	*tick = HAL_GetTick();
 8001588:	f001 fb64 	bl	8002c54 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	601a      	str	r2, [r3, #0]
	*cnt1 = cnt2;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	601a      	str	r2, [r3, #0]
	printf("speed = %f\n",speed);
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7fe ffd5 	bl	8000548 <__aeabi_f2d>
 800159e:	4603      	mov	r3, r0
 80015a0:	460c      	mov	r4, r1
 80015a2:	461a      	mov	r2, r3
 80015a4:	4623      	mov	r3, r4
 80015a6:	480b      	ldr	r0, [pc, #44]	; (80015d4 <motorSpeed+0xf8>)
 80015a8:	f008 f87e 	bl	80096a8 <iprintf>
	return speed;
 80015ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b4:	ee17 3a90 	vmov	r3, s15
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	371c      	adds	r7, #28
 80015bc:	46bd      	mov	sp, r7
 80015be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80015c2:	b002      	add	sp, #8
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	0800b880 	.word	0x0800b880
 80015cc:	0800b89c 	.word	0x0800b89c
 80015d0:	42700000 	.word	0x42700000
 80015d4:	0800b8a8 	.word	0x0800b8a8

080015d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80015f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80015f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00b      	beq.n	8001618 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001600:	e000      	b.n	8001604 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001602:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001604:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f9      	beq.n	8001602 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800160e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001618:	687b      	ldr	r3, [r7, #4]
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	//printf("dma timer = %lu\n", HAL_GetTick()-time2);
	if(hadc->Instance == ADC1){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <HAL_ADC_ConvCpltCallback+0x40>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d110      	bne.n	800165c <HAL_ADC_ConvCpltCallback+0x34>
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e00a      	b.n	8001656 <HAL_ADC_ConvCpltCallback+0x2e>
			{
				adc_dma[i]=buffer_dma[i];
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_ADC_ConvCpltCallback+0x44>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001648:	4909      	ldr	r1, [pc, #36]	; (8001670 <HAL_ADC_ConvCpltCallback+0x48>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3301      	adds	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b0b      	cmp	r3, #11
 800165a:	ddf1      	ble.n	8001640 <HAL_ADC_ConvCpltCallback+0x18>
			}
	}
	//time2 = HAL_GetTick();
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40012000 	.word	0x40012000
 800166c:	20001adc 	.word	0x20001adc
 8001670:	200017dc 	.word	0x200017dc

08001674 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	b091      	sub	sp, #68	; 0x44
 8001678:	af0e      	add	r7, sp, #56	; 0x38
 800167a:	6078      	str	r0, [r7, #4]

	//UNUSED(htim); será preciso?

	//counter2 = __HAL_TIM_GET_COUNTER(&htim2);
	//printf("%lu\n", HAL_GetTick());
	if(htim->Instance== TIM6){
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a26      	ldr	r2, [pc, #152]	; (800171c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d11d      	bne.n	80016c2 <HAL_TIM_PeriodElapsedCallback+0x4e>
		printf("kay\n");
 8001686:	4826      	ldr	r0, [pc, #152]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001688:	f008 f882 	bl	8009790 <puts>
		speed = motorSpeed(&counter1, &tick, htim2);
 800168c:	4e25      	ldr	r6, [pc, #148]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800168e:	466d      	mov	r5, sp
 8001690:	f106 0408 	add.w	r4, r6, #8
 8001694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80016ac:	491e      	ldr	r1, [pc, #120]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80016ae:	481f      	ldr	r0, [pc, #124]	; (800172c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80016b0:	f7ff ff14 	bl	80014dc <motorSpeed>
 80016b4:	ee07 0a90 	vmov	s15, r0
 80016b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80016be:	edc3 7a00 	vstr	s15, [r3]
	}
	if(htim->Instance == TIM7) {
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d123      	bne.n	8001714 <HAL_TIM_PeriodElapsedCallback+0xa0>
		//printf("hello7\n");
		micro++;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80016d4:	6013      	str	r3, [r2, #0]
		if(micro >= 1000){
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016de:	d319      	bcc.n	8001714 <HAL_TIM_PeriodElapsedCallback+0xa0>
			micro -= 1000;
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80016e8:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80016ea:	6013      	str	r3, [r2, #0]
			if(mili == 999){
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d108      	bne.n	800170a <HAL_TIM_PeriodElapsedCallback+0x96>
				mili = 0;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
				seg++;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001706:	6013      	str	r3, [r2, #0]

	/*float T = 0.25; //assumindo que periodo é 250ms
	speed = ((pulses/8)*60)/T;
	pulses = 0;*/

}
 8001708:	e004      	b.n	8001714 <HAL_TIM_PeriodElapsedCallback+0xa0>
			} else mili++;
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171c:	40001000 	.word	0x40001000
 8001720:	0800b8b4 	.word	0x0800b8b4
 8001724:	20002c88 	.word	0x20002c88
 8001728:	20000280 	.word	0x20000280
 800172c:	2000027c 	.word	0x2000027c
 8001730:	20000284 	.word	0x20000284
 8001734:	40001400 	.word	0x40001400
 8001738:	2000028c 	.word	0x2000028c
 800173c:	20000290 	.word	0x20000290
 8001740:	20000294 	.word	0x20000294

08001744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b095      	sub	sp, #84	; 0x54
 8001748:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800174a:	f001 fa1d 	bl	8002b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174e:	f000 faa3 	bl	8001c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001752:	f000 fd43 	bl	80021dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001756:	f000 fd11 	bl	800217c <MX_DMA_Init>
  MX_SPI2_Init();
 800175a:	f000 fc1b 	bl	8001f94 <MX_SPI2_Init>
  MX_ADC1_Init();
 800175e:	f000 fb0d 	bl	8001d7c <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8001762:	f000 fbf7 	bl	8001f54 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001766:	f006 facb 	bl	8007d00 <MX_FATFS_Init>
  MX_TIM6_Init();
 800176a:	f000 fc9d 	bl	80020a8 <MX_TIM6_Init>
  MX_TIM2_Init();
 800176e:	f000 fc47 	bl	8002000 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001772:	f000 fccf 	bl	8002114 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 8001776:	2201      	movs	r2, #1
 8001778:	2110      	movs	r1, #16
 800177a:	481b      	ldr	r0, [pc, #108]	; (80017e8 <main+0xa4>)
 800177c:	f002 fce2 	bl	8004144 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 8001780:	2201      	movs	r2, #1
 8001782:	2104      	movs	r1, #4
 8001784:	4819      	ldr	r0, [pc, #100]	; (80017ec <main+0xa8>)
 8001786:	f002 fcdd 	bl	8004144 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 800178a:	2201      	movs	r2, #1
 800178c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001790:	4816      	ldr	r0, [pc, #88]	; (80017ec <main+0xa8>)
 8001792:	f002 fcd7 	bl	8004144 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800179c:	4813      	ldr	r0, [pc, #76]	; (80017ec <main+0xa8>)
 800179e:	f002 fcd1 	bl	8004144 <HAL_GPIO_WritePin>
  fresult = f_printf(&fil, "kay\n");
  if(fresult != FR_OK){
	  Error_Handler();
  }
  f_close(&fil);*/
  fresult=mount_card(&fs);
 80017a2:	4813      	ldr	r0, [pc, #76]	; (80017f0 <main+0xac>)
 80017a4:	f000 fdec 	bl	8002380 <mount_card>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <main+0xb0>)
 80017ae:	701a      	strb	r2, [r3, #0]

  char str2[30];

  IMU_config(&hspi2);
 80017b0:	4811      	ldr	r0, [pc, #68]	; (80017f8 <main+0xb4>)
 80017b2:	f7ff fbc9 	bl	8000f48 <IMU_config>

  HAL_TIM_Base_Start_IT(&htim6);
 80017b6:	4811      	ldr	r0, [pc, #68]	; (80017fc <main+0xb8>)
 80017b8:	f005 f9cb 	bl	8006b52 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80017bc:	4810      	ldr	r0, [pc, #64]	; (8001800 <main+0xbc>)
 80017be:	f005 f9c8 	bl	8006b52 <HAL_TIM_Base_Start_IT>

  //Initialize encoder mode
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80017c2:	213c      	movs	r1, #60	; 0x3c
 80017c4:	480f      	ldr	r0, [pc, #60]	; (8001804 <main+0xc0>)
 80017c6:	f005 fa7a 	bl	8006cbe <HAL_TIM_Encoder_Start>
  tick = HAL_GetTick();
 80017ca:	f001 fa43 	bl	8002c54 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <main+0xc4>)
 80017d2:	601a      	str	r2, [r3, #0]
  counter1 = __HAL_TIM_GET_COUNTER(&htim2);
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <main+0xc0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	4a0c      	ldr	r2, [pc, #48]	; (800180c <main+0xc8>)
 80017dc:	6013      	str	r3, [r2, #0]

  uint8_t aux[5], aux2[1], aux3[1], str3[4], str[5];
  //uint8_t ref[5];
    aux[0]=0b10000001;
 80017de:	2381      	movs	r3, #129	; 0x81
 80017e0:	753b      	strb	r3, [r7, #20]
    for(int i=1; i<=4; i++){
 80017e2:	2301      	movs	r3, #1
 80017e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e6:	e01c      	b.n	8001822 <main+0xde>
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	200007a4 	.word	0x200007a4
 80017f4:	20001c54 	.word	0x20001c54
 80017f8:	20000748 	.word	0x20000748
 80017fc:	20001b6c 	.word	0x20001b6c
 8001800:	20003d64 	.word	0x20003d64
 8001804:	20002c88 	.word	0x20002c88
 8001808:	20000280 	.word	0x20000280
 800180c:	2000027c 	.word	0x2000027c
  	  aux[i]=0b00000000;
 8001810:	f107 0214 	add.w	r2, r7, #20
 8001814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001816:	4413      	add	r3, r2
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
    for(int i=1; i<=4; i++){
 800181c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800181e:	3301      	adds	r3, #1
 8001820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001824:	2b04      	cmp	r3, #4
 8001826:	ddf3      	ble.n	8001810 <main+0xcc>
    }
    aux2[0]=0b00000000;
 8001828:	2300      	movs	r3, #0
 800182a:	743b      	strb	r3, [r7, #16]

    time2 = HAL_GetTick();
 800182c:	f001 fa12 	bl	8002c54 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	4bc3      	ldr	r3, [pc, #780]	; (8001b40 <main+0x3fc>)
 8001834:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, buffer_dma, NR_ADC_CHANNELS);
 8001836:	220c      	movs	r2, #12
 8001838:	49c2      	ldr	r1, [pc, #776]	; (8001b44 <main+0x400>)
 800183a:	48c3      	ldr	r0, [pc, #780]	; (8001b48 <main+0x404>)
 800183c:	f001 fa7c 	bl	8002d38 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint32_t time1 = HAL_GetTick();
 8001840:	f001 fa08 	bl	8002c54 <HAL_GetTick>
 8001844:	6438      	str	r0, [r7, #64]	; 0x40

	  printf("Microssegundos = %lu\n", seg);
 8001846:	4bc1      	ldr	r3, [pc, #772]	; (8001b4c <main+0x408>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4619      	mov	r1, r3
 800184c:	48c0      	ldr	r0, [pc, #768]	; (8001b50 <main+0x40c>)
 800184e:	f007 ff2b 	bl	80096a8 <iprintf>
	  uint32_t read=adc_dma[0];
 8001852:	4bc0      	ldr	r3, [pc, #768]	; (8001b54 <main+0x410>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
	  motor_temp = motorTemp(read);
 8001858:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800185a:	f7ff fd8d 	bl	8001378 <motorTemp>
 800185e:	eef0 7a40 	vmov.f32	s15, s0
 8001862:	4bbd      	ldr	r3, [pc, #756]	; (8001b58 <main+0x414>)
 8001864:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[1];
 8001868:	4bba      	ldr	r3, [pc, #744]	; (8001b54 <main+0x410>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  brk_pedal = pedalPos(read);
 800186e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fe01 	bl	8001478 <pedalPos>
 8001876:	eef0 7a40 	vmov.f32	s15, s0
 800187a:	4bb8      	ldr	r3, [pc, #736]	; (8001b5c <main+0x418>)
 800187c:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[2];
 8001880:	4bb4      	ldr	r3, [pc, #720]	; (8001b54 <main+0x410>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	63fb      	str	r3, [r7, #60]	; 0x3c
	  acc_pedal = pedalPos(read);
 8001886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fdf5 	bl	8001478 <pedalPos>
 800188e:	eef0 7a40 	vmov.f32	s15, s0
 8001892:	4bb3      	ldr	r3, [pc, #716]	; (8001b60 <main+0x41c>)
 8001894:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[3];
 8001898:	4bae      	ldr	r3, [pc, #696]	; (8001b54 <main+0x410>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph1 = motorCurrent(read);
 800189e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fce5 	bl	8001270 <motorCurrent>
 80018a6:	eef0 7a40 	vmov.f32	s15, s0
 80018aa:	4bae      	ldr	r3, [pc, #696]	; (8001b64 <main+0x420>)
 80018ac:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph1[f] = current_ph1*current_ph1;
 80018b0:	4bac      	ldr	r3, [pc, #688]	; (8001b64 <main+0x420>)
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	4bab      	ldr	r3, [pc, #684]	; (8001b64 <main+0x420>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	4baa      	ldr	r3, [pc, #680]	; (8001b68 <main+0x424>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c4:	4aa9      	ldr	r2, [pc, #676]	; (8001b6c <main+0x428>)
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[4];
 80018ce:	4ba1      	ldr	r3, [pc, #644]	; (8001b54 <main+0x410>)
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph2 = motorCurrent(read);
 80018d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fcca 	bl	8001270 <motorCurrent>
 80018dc:	eef0 7a40 	vmov.f32	s15, s0
 80018e0:	4ba3      	ldr	r3, [pc, #652]	; (8001b70 <main+0x42c>)
 80018e2:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph2[f] = current_ph2*current_ph2;
 80018e6:	4ba2      	ldr	r3, [pc, #648]	; (8001b70 <main+0x42c>)
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	4ba0      	ldr	r3, [pc, #640]	; (8001b70 <main+0x42c>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	4b9d      	ldr	r3, [pc, #628]	; (8001b68 <main+0x424>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fa:	4a9e      	ldr	r2, [pc, #632]	; (8001b74 <main+0x430>)
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[5];
 8001904:	4b93      	ldr	r3, [pc, #588]	; (8001b54 <main+0x410>)
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph3 = motorCurrent(read);
 800190a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fcaf 	bl	8001270 <motorCurrent>
 8001912:	eef0 7a40 	vmov.f32	s15, s0
 8001916:	4b98      	ldr	r3, [pc, #608]	; (8001b78 <main+0x434>)
 8001918:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph3[f] = current_ph3*current_ph3;
 800191c:	4b96      	ldr	r3, [pc, #600]	; (8001b78 <main+0x434>)
 800191e:	ed93 7a00 	vldr	s14, [r3]
 8001922:	4b95      	ldr	r3, [pc, #596]	; (8001b78 <main+0x434>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	4b8f      	ldr	r3, [pc, #572]	; (8001b68 <main+0x424>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001930:	4a92      	ldr	r2, [pc, #584]	; (8001b7c <main+0x438>)
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[6];
 800193a:	4b86      	ldr	r3, [pc, #536]	; (8001b54 <main+0x410>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  conv_temp = igbtTemp(read);
 8001940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fcc8 	bl	80012d8 <igbtTemp>
 8001948:	eef0 7a40 	vmov.f32	s15, s0
 800194c:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <main+0x43c>)
 800194e:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[7];
 8001952:	4b80      	ldr	r3, [pc, #512]	; (8001b54 <main+0x410>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
	  dc_voltage=voltageDC(read);
 8001958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fd62 	bl	8001424 <voltageDC>
 8001960:	eef0 7a40 	vmov.f32	s15, s0
 8001964:	4b87      	ldr	r3, [pc, #540]	; (8001b84 <main+0x440>)
 8001966:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[8];
 800196a:	4b7a      	ldr	r3, [pc, #488]	; (8001b54 <main+0x410>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  dc_current=motorCurrent(read); //função corrente dc?
 8001970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fc7c 	bl	8001270 <motorCurrent>
 8001978:	eef0 7a40 	vmov.f32	s15, s0
 800197c:	4b82      	ldr	r3, [pc, #520]	; (8001b88 <main+0x444>)
 800197e:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[9];
 8001982:	4b74      	ldr	r3, [pc, #464]	; (8001b54 <main+0x410>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph1=voltageAC(read);
 8001988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fd20 	bl	80013d0 <voltageAC>
 8001990:	eef0 7a40 	vmov.f32	s15, s0
 8001994:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <main+0x448>)
 8001996:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[10];
 800199a:	4b6e      	ldr	r3, [pc, #440]	; (8001b54 <main+0x410>)
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph2=voltageAC(read);
 80019a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fd14 	bl	80013d0 <voltageAC>
 80019a8:	eef0 7a40 	vmov.f32	s15, s0
 80019ac:	4b78      	ldr	r3, [pc, #480]	; (8001b90 <main+0x44c>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[11];
 80019b2:	4b68      	ldr	r3, [pc, #416]	; (8001b54 <main+0x410>)
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph3=voltageAC(read);
 80019b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fd08 	bl	80013d0 <voltageAC>
 80019c0:	eef0 7a40 	vmov.f32	s15, s0
 80019c4:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <main+0x450>)
 80019c6:	edc3 7a00 	vstr	s15, [r3]
		  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
	  }
	  else if(brk>50)*/


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d0:	4871      	ldr	r0, [pc, #452]	; (8001b98 <main+0x454>)
 80019d2:	f002 fbb7 	bl	8004144 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux, 5, 1000);
 80019d6:	f107 0114 	add.w	r1, r7, #20
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	2205      	movs	r2, #5
 80019e0:	486e      	ldr	r0, [pc, #440]	; (8001b9c <main+0x458>)
 80019e2:	f004 fb9b 	bl	800611c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ec:	486a      	ldr	r0, [pc, #424]	; (8001b98 <main+0x454>)
 80019ee:	f002 fba9 	bl	8004144 <HAL_GPIO_WritePin>


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f8:	4867      	ldr	r0, [pc, #412]	; (8001b98 <main+0x454>)
 80019fa:	f002 fba3 	bl	8004144 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux2, 1, 1000);
 80019fe:	f107 0110 	add.w	r1, r7, #16
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	2201      	movs	r2, #1
 8001a08:	4864      	ldr	r0, [pc, #400]	; (8001b9c <main+0x458>)
 8001a0a:	f004 fb87 	bl	800611c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f001 f92c 	bl	8002c6c <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str, 4, 1000);
 8001a14:	4639      	mov	r1, r7
 8001a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	485f      	ldr	r0, [pc, #380]	; (8001b9c <main+0x458>)
 8001a1e:	f004 fcb1 	bl	8006384 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a28:	485b      	ldr	r0, [pc, #364]	; (8001b98 <main+0x454>)
 8001a2a:	f002 fb8b 	bl	8004144 <HAL_GPIO_WritePin>
	  //printf("%d %d %d %d\n", str[0], str[1], str[2], str[3]);


	  //ler velocidades do tmc
	  aux3[0]=0x6A;
 8001a2e:	236a      	movs	r3, #106	; 0x6a
 8001a30:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a38:	4857      	ldr	r0, [pc, #348]	; (8001b98 <main+0x454>)
 8001a3a:	f002 fb83 	bl	8004144 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001a3e:	f107 010c 	add.w	r1, r7, #12
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	2201      	movs	r2, #1
 8001a48:	4854      	ldr	r0, [pc, #336]	; (8001b9c <main+0x458>)
 8001a4a:	f004 fb67 	bl	800611c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f001 f90c 	bl	8002c6c <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001a54:	f107 0108 	add.w	r1, r7, #8
 8001a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	484f      	ldr	r0, [pc, #316]	; (8001b9c <main+0x458>)
 8001a60:	f004 fc90 	bl	8006384 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a6a:	484b      	ldr	r0, [pc, #300]	; (8001b98 <main+0x454>)
 8001a6c:	f002 fb6a 	bl	8004144 <HAL_GPIO_WritePin>
	  //printf("PID VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);

	  aux3[0]=0x22;
 8001a70:	2322      	movs	r3, #34	; 0x22
 8001a72:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7a:	4847      	ldr	r0, [pc, #284]	; (8001b98 <main+0x454>)
 8001a7c:	f002 fb62 	bl	8004144 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001a80:	f107 010c 	add.w	r1, r7, #12
 8001a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4844      	ldr	r0, [pc, #272]	; (8001b9c <main+0x458>)
 8001a8c:	f004 fb46 	bl	800611c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f001 f8eb 	bl	8002c6c <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001a96:	f107 0108 	add.w	r1, r7, #8
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	483e      	ldr	r0, [pc, #248]	; (8001b9c <main+0x458>)
 8001aa2:	f004 fc6f 	bl	8006384 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aac:	483a      	ldr	r0, [pc, #232]	; (8001b98 <main+0x454>)
 8001aae:	f002 fb49 	bl	8004144 <HAL_GPIO_WritePin>
	  //printf("OPENLOOP VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);

	  aux3[0]=0x41;
 8001ab2:	2341      	movs	r3, #65	; 0x41
 8001ab4:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001abc:	4836      	ldr	r0, [pc, #216]	; (8001b98 <main+0x454>)
 8001abe:	f002 fb41 	bl	8004144 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001ac2:	f107 010c 	add.w	r1, r7, #12
 8001ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aca:	2201      	movs	r2, #1
 8001acc:	4833      	ldr	r0, [pc, #204]	; (8001b9c <main+0x458>)
 8001ace:	f004 fb25 	bl	800611c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f001 f8ca 	bl	8002c6c <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001ad8:	f107 0108 	add.w	r1, r7, #8
 8001adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	482e      	ldr	r0, [pc, #184]	; (8001b9c <main+0x458>)
 8001ae4:	f004 fc4e 	bl	8006384 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aee:	482a      	ldr	r0, [pc, #168]	; (8001b98 <main+0x454>)
 8001af0:	f002 fb28 	bl	8004144 <HAL_GPIO_WritePin>
	  //printf("AENC DECODER COUNT: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);

	  sprintf(str2,"%f ", brk_pedal);
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <main+0x418>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd25 	bl	8000548 <__aeabi_f2d>
 8001afe:	4603      	mov	r3, r0
 8001b00:	460c      	mov	r4, r1
 8001b02:	f107 001c 	add.w	r0, r7, #28
 8001b06:	461a      	mov	r2, r3
 8001b08:	4623      	mov	r3, r4
 8001b0a:	4925      	ldr	r1, [pc, #148]	; (8001ba0 <main+0x45c>)
 8001b0c:	f007 fe48 	bl	80097a0 <siprintf>
	  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001b10:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <main+0x460>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <main+0x464>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4924      	ldr	r1, [pc, #144]	; (8001bac <main+0x468>)
 8001b1a:	4825      	ldr	r0, [pc, #148]	; (8001bb0 <main+0x46c>)
 8001b1c:	f007 fe40 	bl	80097a0 <siprintf>
	  //update_file("brake.txt", str2, stamp, "", &fil2, &bw);
	  stamp[0]='\0';
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <main+0x46c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]

	  sprintf(str2,"%f ", acc_pedal);
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <main+0x41c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd0c 	bl	8000548 <__aeabi_f2d>
 8001b30:	4603      	mov	r3, r0
 8001b32:	460c      	mov	r4, r1
 8001b34:	f107 001c 	add.w	r0, r7, #28
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	e03a      	b.n	8001bb4 <main+0x470>
 8001b3e:	bf00      	nop
 8001b40:	20003d60 	.word	0x20003d60
 8001b44:	20001adc 	.word	0x20001adc
 8001b48:	2000182c 	.word	0x2000182c
 8001b4c:	20000294 	.word	0x20000294
 8001b50:	0800b8b8 	.word	0x0800b8b8
 8001b54:	200017dc 	.word	0x200017dc
 8001b58:	200006e0 	.word	0x200006e0
 8001b5c:	20001810 	.word	0x20001810
 8001b60:	20000744 	.word	0x20000744
 8001b64:	2000180c 	.word	0x2000180c
 8001b68:	20000288 	.word	0x20000288
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	2000181c 	.word	0x2000181c
 8001b74:	20000028 	.word	0x20000028
 8001b78:	20001828 	.word	0x20001828
 8001b7c:	20000050 	.word	0x20000050
 8001b80:	20001818 	.word	0x20001818
 8001b84:	20001c50 	.word	0x20001c50
 8001b88:	20001bb8 	.word	0x20001bb8
 8001b8c:	200007a0 	.word	0x200007a0
 8001b90:	20001824 	.word	0x20001824
 8001b94:	20001820 	.word	0x20001820
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	20000748 	.word	0x20000748
 8001ba0:	0800b8d0 	.word	0x0800b8d0
 8001ba4:	20000278 	.word	0x20000278
 8001ba8:	20000274 	.word	0x20000274
 8001bac:	0800b8d4 	.word	0x0800b8d4
 8001bb0:	20002ccc 	.word	0x20002ccc
 8001bb4:	492d      	ldr	r1, [pc, #180]	; (8001c6c <main+0x528>)
 8001bb6:	f007 fdf3 	bl	80097a0 <siprintf>
	  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <main+0x52c>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <main+0x530>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	492d      	ldr	r1, [pc, #180]	; (8001c78 <main+0x534>)
 8001bc4:	482d      	ldr	r0, [pc, #180]	; (8001c7c <main+0x538>)
 8001bc6:	f007 fdeb 	bl	80097a0 <siprintf>
	  //update_file("throttle.txt", str2, stamp, "", &fil2, &bw);
	  stamp[0]='\0';
 8001bca:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <main+0x538>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]

	  IMU_acc_read(&hspi2, accel_data);
 8001bd0:	492b      	ldr	r1, [pc, #172]	; (8001c80 <main+0x53c>)
 8001bd2:	482c      	ldr	r0, [pc, #176]	; (8001c84 <main+0x540>)
 8001bd4:	f7ff fa3a 	bl	800104c <IMU_acc_read>
	  for(int i=0; i<=2; i++){
 8001bd8:	2300      	movs	r3, #0
 8001bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bdc:	e017      	b.n	8001c0e <main+0x4ca>
		  sprintf(str2, "accel[%d] - %d ", i, accel_data[i]);
 8001bde:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <main+0x53c>)
 8001be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	f107 001c 	add.w	r0, r7, #28
 8001bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bec:	4926      	ldr	r1, [pc, #152]	; (8001c88 <main+0x544>)
 8001bee:	f007 fdd7 	bl	80097a0 <siprintf>
		  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <main+0x52c>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <main+0x530>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	491f      	ldr	r1, [pc, #124]	; (8001c78 <main+0x534>)
 8001bfc:	481f      	ldr	r0, [pc, #124]	; (8001c7c <main+0x538>)
 8001bfe:	f007 fdcf 	bl	80097a0 <siprintf>
		  //update_file("acc.txt", str2, stamp, "", &fil2, &bw);
		  stamp[0]='\0';
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <main+0x538>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<=2; i++){
 8001c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	dde4      	ble.n	8001bde <main+0x49a>
	  }

	  IMU_gyro_read(&hspi2, gyro_data);
 8001c14:	491d      	ldr	r1, [pc, #116]	; (8001c8c <main+0x548>)
 8001c16:	481b      	ldr	r0, [pc, #108]	; (8001c84 <main+0x540>)
 8001c18:	f7ff fa8e 	bl	8001138 <IMU_gyro_read>
	  for(int i=0; i<=2; i++){
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c20:	e017      	b.n	8001c52 <main+0x50e>
		  sprintf(str2, "gyro[%d] - %d ", i, gyro_data[i]);
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <main+0x548>)
 8001c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	f107 001c 	add.w	r0, r7, #28
 8001c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c30:	4917      	ldr	r1, [pc, #92]	; (8001c90 <main+0x54c>)
 8001c32:	f007 fdb5 	bl	80097a0 <siprintf>
		  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <main+0x52c>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <main+0x530>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	490e      	ldr	r1, [pc, #56]	; (8001c78 <main+0x534>)
 8001c40:	480e      	ldr	r0, [pc, #56]	; (8001c7c <main+0x538>)
 8001c42:	f007 fdad 	bl	80097a0 <siprintf>
		  //update_file("gyro.txt", str2, stamp, "", &fil2, &bw);
		  stamp[0]='\0';
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <main+0x538>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<=2; i++){
 8001c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4e:	3301      	adds	r3, #1
 8001c50:	647b      	str	r3, [r7, #68]	; 0x44
 8001c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	dde4      	ble.n	8001c22 <main+0x4de>
	  }

	  printf("tempo de ciclo = %lu\n", (HAL_GetTick() - time1));
 8001c58:	f000 fffc 	bl	8002c54 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	4619      	mov	r1, r3
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <main+0x550>)
 8001c66:	f007 fd1f 	bl	80096a8 <iprintf>
  {
 8001c6a:	e5e9      	b.n	8001840 <main+0xfc>
 8001c6c:	0800b8d0 	.word	0x0800b8d0
 8001c70:	20000278 	.word	0x20000278
 8001c74:	20000274 	.word	0x20000274
 8001c78:	0800b8d4 	.word	0x0800b8d4
 8001c7c:	20002ccc 	.word	0x20002ccc
 8001c80:	20001bac 	.word	0x20001bac
 8001c84:	20000748 	.word	0x20000748
 8001c88:	0800b8dc 	.word	0x0800b8dc
 8001c8c:	20001bbc 	.word	0x20001bbc
 8001c90:	0800b8ec 	.word	0x0800b8ec
 8001c94:	0800b8fc 	.word	0x0800b8fc

08001c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b094      	sub	sp, #80	; 0x50
 8001c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	2230      	movs	r2, #48	; 0x30
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f007 f899 	bl	8008dde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <SystemClock_Config+0xdc>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	4a2b      	ldr	r2, [pc, #172]	; (8001d74 <SystemClock_Config+0xdc>)
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cca:	6413      	str	r3, [r2, #64]	; 0x40
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <SystemClock_Config+0xdc>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <SystemClock_Config+0xe0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <SystemClock_Config+0xe0>)
 8001ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <SystemClock_Config+0xe0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d08:	2319      	movs	r3, #25
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d0c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d12:	2302      	movs	r3, #2
 8001d14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d16:	2307      	movs	r3, #7
 8001d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1a:	f107 0320 	add.w	r3, r7, #32
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 fa2a 	bl	8004178 <HAL_RCC_OscConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d2a:	f000 fb22 	bl	8002372 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2e:	230f      	movs	r3, #15
 8001d30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d32:	2302      	movs	r3, #2
 8001d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	2105      	movs	r1, #5
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 fc83 	bl	8004658 <HAL_RCC_ClockConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d58:	f000 fb0b 	bl	8002372 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_2);
 8001d5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001d64:	2000      	movs	r0, #0
 8001d66:	f002 fd5d 	bl	8004824 <HAL_RCC_MCOConfig>
}
 8001d6a:	bf00      	nop
 8001d6c:	3750      	adds	r7, #80	; 0x50
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000

08001d7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d82:	463b      	mov	r3, r7
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001d8e:	4b6e      	ldr	r3, [pc, #440]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001d90:	4a6e      	ldr	r2, [pc, #440]	; (8001f4c <MX_ADC1_Init+0x1d0>)
 8001d92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d94:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001d96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d9c:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001da2:	4b69      	ldr	r3, [pc, #420]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001da8:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dae:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001db6:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dbc:	4b62      	ldr	r3, [pc, #392]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001dbe:	4a64      	ldr	r2, [pc, #400]	; (8001f50 <MX_ADC1_Init+0x1d4>)
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dc2:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001dc8:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001dca:	220c      	movs	r2, #12
 8001dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001dce:	4b5e      	ldr	r3, [pc, #376]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dd6:	4b5c      	ldr	r3, [pc, #368]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ddc:	485a      	ldr	r0, [pc, #360]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001dde:	f000 ff67 	bl	8002cb0 <HAL_ADC_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001de8:	f000 fac3 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001dec:	2308      	movs	r3, #8
 8001dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001df0:	2301      	movs	r3, #1
 8001df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4852      	ldr	r0, [pc, #328]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001dfe:	f001 f8a1 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e08:	f000 fab3 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001e0c:	230c      	movs	r3, #12
 8001e0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e10:	2302      	movs	r3, #2
 8001e12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e14:	463b      	mov	r3, r7
 8001e16:	4619      	mov	r1, r3
 8001e18:	484b      	ldr	r0, [pc, #300]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001e1a:	f001 f893 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001e24:	f000 faa5 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001e28:	230d      	movs	r3, #13
 8001e2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e30:	463b      	mov	r3, r7
 8001e32:	4619      	mov	r1, r3
 8001e34:	4844      	ldr	r0, [pc, #272]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001e36:	f001 f885 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001e40:	f000 fa97 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e44:	2302      	movs	r3, #2
 8001e46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001e48:	2304      	movs	r3, #4
 8001e4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	4619      	mov	r1, r3
 8001e50:	483d      	ldr	r0, [pc, #244]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001e52:	f001 f877 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001e5c:	f000 fa89 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e60:	230a      	movs	r3, #10
 8001e62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001e64:	2305      	movs	r3, #5
 8001e66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4836      	ldr	r0, [pc, #216]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001e6e:	f001 f869 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001e78:	f000 fa7b 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001e7c:	230b      	movs	r3, #11
 8001e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001e80:	2306      	movs	r3, #6
 8001e82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e84:	463b      	mov	r3, r7
 8001e86:	4619      	mov	r1, r3
 8001e88:	482f      	ldr	r0, [pc, #188]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001e8a:	f001 f85b 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001e94:	f000 fa6d 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001e98:	2309      	movs	r3, #9
 8001e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4828      	ldr	r0, [pc, #160]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001ea6:	f001 f84d 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001eb0:	f000 fa5f 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4821      	ldr	r0, [pc, #132]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001ec2:	f001 f83f 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001ecc:	f000 fa51 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ed0:	2306      	movs	r3, #6
 8001ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001ed4:	2309      	movs	r3, #9
 8001ed6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed8:	463b      	mov	r3, r7
 8001eda:	4619      	mov	r1, r3
 8001edc:	481a      	ldr	r0, [pc, #104]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001ede:	f001 f831 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001ee8:	f000 fa43 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001eec:	2307      	movs	r3, #7
 8001eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001ef0:	230a      	movs	r3, #10
 8001ef2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4813      	ldr	r0, [pc, #76]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001efa:	f001 f823 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001f04:	f000 fa35 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001f08:	230e      	movs	r3, #14
 8001f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001f0c:	230b      	movs	r3, #11
 8001f0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	4619      	mov	r1, r3
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001f16:	f001 f815 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001f20:	f000 fa27 	bl	8002372 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001f24:	230f      	movs	r3, #15
 8001f26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001f28:	230c      	movs	r3, #12
 8001f2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_ADC1_Init+0x1cc>)
 8001f32:	f001 f807 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001f3c:	f000 fa19 	bl	8002372 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	2000182c 	.word	0x2000182c
 8001f4c:	40012000 	.word	0x40012000
 8001f50:	0f000001 	.word	0x0f000001

08001f54 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <MX_SDIO_SD_Init+0x3c>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 1;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	20001bcc 	.word	0x20001bcc
 8001f90:	40012c00 	.word	0x40012c00

08001f94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f98:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001f9a:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <MX_SPI2_Init+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fc8:	2228      	movs	r2, #40	; 0x28
 8001fca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fe0:	220a      	movs	r2, #10
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fe6:	f004 f835 	bl	8006054 <HAL_SPI_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ff0:	f000 f9bf 	bl	8002372 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000748 	.word	0x20000748
 8001ffc:	40003800 	.word	0x40003800

08002000 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	2224      	movs	r2, #36	; 0x24
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f006 fee5 	bl	8008dde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800201c:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <MX_TIM2_Init+0xa4>)
 800201e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002022:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <MX_TIM2_Init+0xa4>)
 8002026:	2200      	movs	r2, #0
 8002028:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <MX_TIM2_Init+0xa4>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002030:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <MX_TIM2_Init+0xa4>)
 8002032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002036:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_TIM2_Init+0xa4>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <MX_TIM2_Init+0xa4>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002044:	2303      	movs	r3, #3
 8002046:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800204c:	2301      	movs	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800205c:	2301      	movs	r3, #1
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	4619      	mov	r1, r3
 800206e:	480d      	ldr	r0, [pc, #52]	; (80020a4 <MX_TIM2_Init+0xa4>)
 8002070:	f004 fd93 	bl	8006b9a <HAL_TIM_Encoder_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800207a:	f000 f97a 	bl	8002372 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	4619      	mov	r1, r3
 800208a:	4806      	ldr	r0, [pc, #24]	; (80020a4 <MX_TIM2_Init+0xa4>)
 800208c:	f005 f844 	bl	8007118 <HAL_TIMEx_MasterConfigSynchronization>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002096:	f000 f96c 	bl	8002372 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	3730      	adds	r7, #48	; 0x30
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20002c88 	.word	0x20002c88

080020a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ae:	463b      	mov	r3, r7
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <MX_TIM6_Init+0x64>)
 80020b8:	4a15      	ldr	r2, [pc, #84]	; (8002110 <MX_TIM6_Init+0x68>)
 80020ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000;
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <MX_TIM6_Init+0x64>)
 80020be:	f24a 4210 	movw	r2, #42000	; 0xa410
 80020c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_TIM6_Init+0x64>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <MX_TIM6_Init+0x64>)
 80020cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80020d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_TIM6_Init+0x64>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <MX_TIM6_Init+0x64>)
 80020da:	f004 fd0f 	bl	8006afc <HAL_TIM_Base_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80020e4:	f000 f945 	bl	8002372 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020e8:	2320      	movs	r3, #32
 80020ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020f0:	463b      	mov	r3, r7
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_TIM6_Init+0x64>)
 80020f6:	f005 f80f 	bl	8007118 <HAL_TIMEx_MasterConfigSynchronization>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002100:	f000 f937 	bl	8002372 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20001b6c 	.word	0x20001b6c
 8002110:	40001000 	.word	0x40001000

08002114 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211a:	463b      	mov	r3, r7
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_TIM7_Init+0x60>)
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <MX_TIM7_Init+0x64>)
 8002126:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 42;
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <MX_TIM7_Init+0x60>)
 800212a:	222a      	movs	r2, #42	; 0x2a
 800212c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_TIM7_Init+0x60>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_TIM7_Init+0x60>)
 8002136:	2202      	movs	r2, #2
 8002138:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_TIM7_Init+0x60>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <MX_TIM7_Init+0x60>)
 8002142:	f004 fcdb 	bl	8006afc <HAL_TIM_Base_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800214c:	f000 f911 	bl	8002372 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002150:	2320      	movs	r3, #32
 8002152:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002158:	463b      	mov	r3, r7
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_TIM7_Init+0x60>)
 800215e:	f004 ffdb 	bl	8007118 <HAL_TIMEx_MasterConfigSynchronization>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002168:	f000 f903 	bl	8002372 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20003d64 	.word	0x20003d64
 8002178:	40001400 	.word	0x40001400

0800217c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <MX_DMA_Init+0x5c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <MX_DMA_Init+0x5c>)
 800218c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <MX_DMA_Init+0x5c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	2038      	movs	r0, #56	; 0x38
 80021a4:	f001 fa49 	bl	800363a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021a8:	2038      	movs	r0, #56	; 0x38
 80021aa:	f001 fa62 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	203b      	movs	r0, #59	; 0x3b
 80021b4:	f001 fa41 	bl	800363a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80021b8:	203b      	movs	r0, #59	; 0x3b
 80021ba:	f001 fa5a 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2045      	movs	r0, #69	; 0x45
 80021c4:	f001 fa39 	bl	800363a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80021c8:	2045      	movs	r0, #69	; 0x45
 80021ca:	f001 fa52 	bl	8003672 <HAL_NVIC_EnableIRQ>

}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800

080021dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	4b46      	ldr	r3, [pc, #280]	; (8002310 <MX_GPIO_Init+0x134>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a45      	ldr	r2, [pc, #276]	; (8002310 <MX_GPIO_Init+0x134>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <MX_GPIO_Init+0x134>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <MX_GPIO_Init+0x134>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a3e      	ldr	r2, [pc, #248]	; (8002310 <MX_GPIO_Init+0x134>)
 8002218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <MX_GPIO_Init+0x134>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	4b38      	ldr	r3, [pc, #224]	; (8002310 <MX_GPIO_Init+0x134>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a37      	ldr	r2, [pc, #220]	; (8002310 <MX_GPIO_Init+0x134>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b35      	ldr	r3, [pc, #212]	; (8002310 <MX_GPIO_Init+0x134>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b31      	ldr	r3, [pc, #196]	; (8002310 <MX_GPIO_Init+0x134>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a30      	ldr	r2, [pc, #192]	; (8002310 <MX_GPIO_Init+0x134>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <MX_GPIO_Init+0x134>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <MX_GPIO_Init+0x134>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a29      	ldr	r2, [pc, #164]	; (8002310 <MX_GPIO_Init+0x134>)
 800226c:	f043 0308 	orr.w	r3, r3, #8
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <MX_GPIO_Init+0x134>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	2110      	movs	r1, #16
 8002282:	4824      	ldr	r0, [pc, #144]	; (8002314 <MX_GPIO_Init+0x138>)
 8002284:	f001 ff5e 	bl	8004144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin, GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	f241 4104 	movw	r1, #5124	; 0x1404
 800228e:	4822      	ldr	r0, [pc, #136]	; (8002318 <MX_GPIO_Init+0x13c>)
 8002290:	f001 ff58 	bl	8004144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Accel_CS_Pin */
  GPIO_InitStruct.Pin = Accel_CS_Pin;
 8002294:	2310      	movs	r3, #16
 8002296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Accel_CS_GPIO_Port, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	481a      	ldr	r0, [pc, #104]	; (8002314 <MX_GPIO_Init+0x138>)
 80022ac:	f001 fd98 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gyro_CS_Pin Magnet_CS_Pin SPI_CS_FOC_Pin */
  GPIO_InitStruct.Pin = Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin;
 80022b0:	f241 4304 	movw	r3, #5124	; 0x1404
 80022b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4813      	ldr	r0, [pc, #76]	; (8002318 <MX_GPIO_Init+0x13c>)
 80022ca:	f001 fd89 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Det_Pin */
  GPIO_InitStruct.Pin = SD_Det_Pin;
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Det_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	480e      	ldr	r0, [pc, #56]	; (800231c <MX_GPIO_Init+0x140>)
 80022e2:	f001 fd7d 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4804      	ldr	r0, [pc, #16]	; (8002314 <MX_GPIO_Init+0x138>)
 8002304:	f001 fd6c 	bl	8003de0 <HAL_GPIO_Init>

}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400
 800231c:	40020800 	.word	0x40020800

08002320 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch){
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f954 	bl	80015d8 <ITM_SendChar>
	return ch;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_write>:

int _write(int file, char *ptr, int len){
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e009      	b.n	8002360 <_write+0x26>
		__io_putchar(*ptr++);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ffe3 	bl	8002320 <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	dbf1      	blt.n	800234c <_write+0x12>
	}
	return len;
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <mount_card>:
	}
}

/* Mount SD Card */
FRESULT mount_card (FATFS *fs)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	//printf("mount\n");
	return f_mount(fs, "", 0);
 8002388:	2200      	movs	r2, #0
 800238a:	4904      	ldr	r1, [pc, #16]	; (800239c <mount_card+0x1c>)
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f006 fc4f 	bl	8008c30 <f_mount>
 8002392:	4603      	mov	r3, r0
      //if fresult <>
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	0800b914 	.word	0x0800b914

080023a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_MspInit+0x4c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <HAL_MspInit+0x4c>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_MspInit+0x4c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_MspInit+0x4c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_MspInit+0x4c>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_MspInit+0x4c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08c      	sub	sp, #48	; 0x30
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 031c 	add.w	r3, r7, #28
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a49      	ldr	r2, [pc, #292]	; (8002534 <HAL_ADC_MspInit+0x144>)
 800240e:	4293      	cmp	r3, r2
 8002410:	f040 808c 	bne.w	800252c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
 8002418:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_ADC_MspInit+0x148>)
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	4a46      	ldr	r2, [pc, #280]	; (8002538 <HAL_ADC_MspInit+0x148>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	6453      	str	r3, [r2, #68]	; 0x44
 8002424:	4b44      	ldr	r3, [pc, #272]	; (8002538 <HAL_ADC_MspInit+0x148>)
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	4b40      	ldr	r3, [pc, #256]	; (8002538 <HAL_ADC_MspInit+0x148>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	4a3f      	ldr	r2, [pc, #252]	; (8002538 <HAL_ADC_MspInit+0x148>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	6313      	str	r3, [r2, #48]	; 0x30
 8002440:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_ADC_MspInit+0x148>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	4b39      	ldr	r3, [pc, #228]	; (8002538 <HAL_ADC_MspInit+0x148>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4a38      	ldr	r2, [pc, #224]	; (8002538 <HAL_ADC_MspInit+0x148>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6313      	str	r3, [r2, #48]	; 0x30
 800245c:	4b36      	ldr	r3, [pc, #216]	; (8002538 <HAL_ADC_MspInit+0x148>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4b32      	ldr	r3, [pc, #200]	; (8002538 <HAL_ADC_MspInit+0x148>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a31      	ldr	r2, [pc, #196]	; (8002538 <HAL_ADC_MspInit+0x148>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	4b2f      	ldr	r3, [pc, #188]	; (8002538 <HAL_ADC_MspInit+0x148>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = curr_u_Pin|curr_v_Pin|brk_pedal_Pin|acc_pedal_Pin 
 8002484:	233f      	movs	r3, #63	; 0x3f
 8002486:	61fb      	str	r3, [r7, #28]
                          |motor_voltage_v_Pin|motor_voltage_w_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002488:	2303      	movs	r3, #3
 800248a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	4829      	ldr	r0, [pc, #164]	; (800253c <HAL_ADC_MspInit+0x14c>)
 8002498:	f001 fca2 	bl	8003de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = curr_w_Pin|DC_Bus_Voltage_Pin|DC_Current_Pin|motor_voltage_u_Pin;
 800249c:	23cc      	movs	r3, #204	; 0xcc
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a0:	2303      	movs	r3, #3
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	4619      	mov	r1, r3
 80024ae:	4824      	ldr	r0, [pc, #144]	; (8002540 <HAL_ADC_MspInit+0x150>)
 80024b0:	f001 fc96 	bl	8003de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024b4:	2303      	movs	r3, #3
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024b8:	2303      	movs	r3, #3
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	4619      	mov	r1, r3
 80024c6:	481f      	ldr	r0, [pc, #124]	; (8002544 <HAL_ADC_MspInit+0x154>)
 80024c8:	f001 fc8a 	bl	8003de0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_ADC_MspInit+0x158>)
 80024ce:	4a1f      	ldr	r2, [pc, #124]	; (800254c <HAL_ADC_MspInit+0x15c>)
 80024d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_ADC_MspInit+0x158>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_ADC_MspInit+0x158>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <HAL_ADC_MspInit+0x158>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_ADC_MspInit+0x158>)
 80024e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_ADC_MspInit+0x158>)
 80024ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <HAL_ADC_MspInit+0x158>)
 80024f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_ADC_MspInit+0x158>)
 80024fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002502:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_ADC_MspInit+0x158>)
 8002506:	2200      	movs	r2, #0
 8002508:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_ADC_MspInit+0x158>)
 800250c:	2200      	movs	r2, #0
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002510:	480d      	ldr	r0, [pc, #52]	; (8002548 <HAL_ADC_MspInit+0x158>)
 8002512:	f001 f8c9 	bl	80036a8 <HAL_DMA_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800251c:	f7ff ff29 	bl	8002372 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_ADC_MspInit+0x158>)
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HAL_ADC_MspInit+0x158>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800252c:	bf00      	nop
 800252e:	3730      	adds	r7, #48	; 0x30
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40012000 	.word	0x40012000
 8002538:	40023800 	.word	0x40023800
 800253c:	40020800 	.word	0x40020800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	20001a7c 	.word	0x20001a7c
 800254c:	40026410 	.word	0x40026410

08002550 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a70      	ldr	r2, [pc, #448]	; (8002730 <HAL_SD_MspInit+0x1e0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	f040 80da 	bne.w	8002728 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	4b6e      	ldr	r3, [pc, #440]	; (8002734 <HAL_SD_MspInit+0x1e4>)
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	4a6d      	ldr	r2, [pc, #436]	; (8002734 <HAL_SD_MspInit+0x1e4>)
 800257e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002582:	6453      	str	r3, [r2, #68]	; 0x44
 8002584:	4b6b      	ldr	r3, [pc, #428]	; (8002734 <HAL_SD_MspInit+0x1e4>)
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	4b67      	ldr	r3, [pc, #412]	; (8002734 <HAL_SD_MspInit+0x1e4>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	4a66      	ldr	r2, [pc, #408]	; (8002734 <HAL_SD_MspInit+0x1e4>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6313      	str	r3, [r2, #48]	; 0x30
 80025a0:	4b64      	ldr	r3, [pc, #400]	; (8002734 <HAL_SD_MspInit+0x1e4>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	4b60      	ldr	r3, [pc, #384]	; (8002734 <HAL_SD_MspInit+0x1e4>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	4a5f      	ldr	r2, [pc, #380]	; (8002734 <HAL_SD_MspInit+0x1e4>)
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	6313      	str	r3, [r2, #48]	; 0x30
 80025bc:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_SD_MspInit+0x1e4>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d2:	2301      	movs	r3, #1
 80025d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d6:	2303      	movs	r3, #3
 80025d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80025da:	230c      	movs	r3, #12
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	4854      	ldr	r0, [pc, #336]	; (8002738 <HAL_SD_MspInit+0x1e8>)
 80025e6:	f001 fbfb 	bl	8003de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80025ea:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80025ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80025fc:	230c      	movs	r3, #12
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	484c      	ldr	r0, [pc, #304]	; (8002738 <HAL_SD_MspInit+0x1e8>)
 8002608:	f001 fbea 	bl	8003de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800260c:	2304      	movs	r3, #4
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002614:	2301      	movs	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800261c:	230c      	movs	r3, #12
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4845      	ldr	r0, [pc, #276]	; (800273c <HAL_SD_MspInit+0x1ec>)
 8002628:	f001 fbda 	bl	8003de0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800262c:	4b44      	ldr	r3, [pc, #272]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 800262e:	4a45      	ldr	r2, [pc, #276]	; (8002744 <HAL_SD_MspInit+0x1f4>)
 8002630:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 8002634:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002638:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002640:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002646:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 8002648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800264c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800264e:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 8002650:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002654:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002656:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 8002658:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800265c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 8002660:	2220      	movs	r2, #32
 8002662:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 8002666:	2200      	movs	r2, #0
 8002668:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800266a:	4b35      	ldr	r3, [pc, #212]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 800266c:	2204      	movs	r2, #4
 800266e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002670:	4b33      	ldr	r3, [pc, #204]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 8002672:	2203      	movs	r2, #3
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 8002678:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800267e:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 8002680:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002686:	482e      	ldr	r0, [pc, #184]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 8002688:	f001 f80e 	bl	80036a8 <HAL_DMA_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002692:	f7ff fe6e 	bl	8002372 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a29      	ldr	r2, [pc, #164]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
 800269c:	4a28      	ldr	r2, [pc, #160]	; (8002740 <HAL_SD_MspInit+0x1f0>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026a4:	4a29      	ldr	r2, [pc, #164]	; (800274c <HAL_SD_MspInit+0x1fc>)
 80026a6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026ae:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026b2:	2240      	movs	r2, #64	; 0x40
 80026b4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b6:	4b24      	ldr	r3, [pc, #144]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026bc:	4b22      	ldr	r3, [pc, #136]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026c4:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ca:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026d2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80026d4:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026d6:	2220      	movs	r2, #32
 80026d8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026e2:	2204      	movs	r2, #4
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026e8:	2203      	movs	r2, #3
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80026fc:	4812      	ldr	r0, [pc, #72]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 80026fe:	f000 ffd3 	bl	80036a8 <HAL_DMA_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002708:	f7ff fe33 	bl	8002372 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 8002710:	63da      	str	r2, [r3, #60]	; 0x3c
 8002712:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <HAL_SD_MspInit+0x1f8>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	2100      	movs	r1, #0
 800271c:	2031      	movs	r0, #49	; 0x31
 800271e:	f000 ff8c 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002722:	2031      	movs	r0, #49	; 0x31
 8002724:	f000 ffa5 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002728:	bf00      	nop
 800272a:	3728      	adds	r7, #40	; 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40012c00 	.word	0x40012c00
 8002734:	40023800 	.word	0x40023800
 8002738:	40020800 	.word	0x40020800
 800273c:	40020c00 	.word	0x40020c00
 8002740:	200006e4 	.word	0x200006e4
 8002744:	40026458 	.word	0x40026458
 8002748:	20001b0c 	.word	0x20001b0c
 800274c:	400264a0 	.word	0x400264a0

08002750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <HAL_SPI_MspInit+0x84>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d12c      	bne.n	80027cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_SPI_MspInit+0x88>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HAL_SPI_MspInit+0x88>)
 800277c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_SPI_MspInit+0x88>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_SPI_MspInit+0x88>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a10      	ldr	r2, [pc, #64]	; (80027d8 <HAL_SPI_MspInit+0x88>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_SPI_MspInit+0x88>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80027aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027bc:	2305      	movs	r3, #5
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4619      	mov	r1, r3
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <HAL_SPI_MspInit+0x8c>)
 80027c8:	f001 fb0a 	bl	8003de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027cc:	bf00      	nop
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40003800 	.word	0x40003800
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020400 	.word	0x40020400

080027e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d12b      	bne.n	800285a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <HAL_TIM_Encoder_MspInit+0x84>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a16      	ldr	r2, [pc, #88]	; (8002864 <HAL_TIM_Encoder_MspInit+0x84>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <HAL_TIM_Encoder_MspInit+0x84>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_TIM_Encoder_MspInit+0x84>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a0f      	ldr	r2, [pc, #60]	; (8002864 <HAL_TIM_Encoder_MspInit+0x84>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_TIM_Encoder_MspInit+0x84>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin;
 800283a:	2303      	movs	r3, #3
 800283c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800284a:	2301      	movs	r3, #1
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4619      	mov	r1, r3
 8002854:	4804      	ldr	r0, [pc, #16]	; (8002868 <HAL_TIM_Encoder_MspInit+0x88>)
 8002856:	f001 fac3 	bl	8003de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800285a:	bf00      	nop
 800285c:	3728      	adds	r7, #40	; 0x28
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40020000 	.word	0x40020000

0800286c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <HAL_TIM_Base_MspInit+0x80>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d116      	bne.n	80028ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_TIM_Base_MspInit+0x84>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a1a      	ldr	r2, [pc, #104]	; (80028f0 <HAL_TIM_Base_MspInit+0x84>)
 8002888:	f043 0310 	orr.w	r3, r3, #16
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <HAL_TIM_Base_MspInit+0x84>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	2036      	movs	r0, #54	; 0x36
 80028a0:	f000 fecb 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028a4:	2036      	movs	r0, #54	; 0x36
 80028a6:	f000 fee4 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80028aa:	e01a      	b.n	80028e2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <HAL_TIM_Base_MspInit+0x88>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d115      	bne.n	80028e2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_TIM_Base_MspInit+0x84>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	4a0c      	ldr	r2, [pc, #48]	; (80028f0 <HAL_TIM_Base_MspInit+0x84>)
 80028c0:	f043 0320 	orr.w	r3, r3, #32
 80028c4:	6413      	str	r3, [r2, #64]	; 0x40
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_TIM_Base_MspInit+0x84>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	2037      	movs	r0, #55	; 0x37
 80028d8:	f000 feaf 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80028dc:	2037      	movs	r0, #55	; 0x37
 80028de:	f000 fec8 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40001000 	.word	0x40001000
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40001400 	.word	0x40001400

080028f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <HardFault_Handler+0x4>

0800290c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <MemManage_Handler+0x4>

08002912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <BusFault_Handler+0x4>

08002918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <UsageFault_Handler+0x4>

0800291e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


	SystemTick += TICK_RATE; // 1 ms tick count
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <SysTick_Handler+0x40>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <SysTick_Handler+0x40>)
 8002954:	6013      	str	r3, [r2, #0]

			  __unix_ms += TICK_RATE;
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <SysTick_Handler+0x44>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	4a0b      	ldr	r2, [pc, #44]	; (800298c <SysTick_Handler+0x44>)
 800295e:	6013      	str	r3, [r2, #0]

			  if (__unix_ms >= 1000)
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <SysTick_Handler+0x44>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002968:	d30a      	bcc.n	8002980 <SysTick_Handler+0x38>
			  {
			    __unix_ms -= 1000;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <SysTick_Handler+0x44>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002972:	4a06      	ldr	r2, [pc, #24]	; (800298c <SysTick_Handler+0x44>)
 8002974:	6013      	str	r3, [r2, #0]
			    __unix_sec++;
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <SysTick_Handler+0x48>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	4a04      	ldr	r2, [pc, #16]	; (8002990 <SysTick_Handler+0x48>)
 800297e:	6013      	str	r3, [r2, #0]
			  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002980:	f000 f954 	bl	8002c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000270 	.word	0x20000270
 800298c:	20000274 	.word	0x20000274
 8002990:	20000278 	.word	0x20000278

08002994 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <SDIO_IRQHandler+0x10>)
 800299a:	f002 fac7 	bl	8004f2c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20001bcc 	.word	0x20001bcc

080029a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <TIM6_DAC_IRQHandler+0x10>)
 80029ae:	f004 f9bd 	bl	8006d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20001b6c 	.word	0x20001b6c

080029bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <TIM7_IRQHandler+0x10>)
 80029c2:	f004 f9b3 	bl	8006d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20003d64 	.word	0x20003d64

080029d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <DMA2_Stream0_IRQHandler+0x10>)
 80029d6:	f000 ff8f 	bl	80038f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20001a7c 	.word	0x20001a7c

080029e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <DMA2_Stream3_IRQHandler+0x10>)
 80029ea:	f000 ff85 	bl	80038f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200006e4 	.word	0x200006e4

080029f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <DMA2_Stream6_IRQHandler+0x10>)
 80029fe:	f000 ff7b 	bl	80038f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20001b0c 	.word	0x20001b0c

08002a0c <_read>:
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e00a      	b.n	8002a34 <_read+0x28>
 8002a1e:	f3af 8000 	nop.w
 8002a22:	4601      	mov	r1, r0
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	60ba      	str	r2, [r7, #8]
 8002a2a:	b2ca      	uxtb	r2, r1
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	dbf0      	blt.n	8002a1e <_read+0x12>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_close>:
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <_fstat>:
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	2300      	movs	r3, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <_isatty>:
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	2301      	movs	r3, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <_lseek>:
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <_sbrk>:
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <_sbrk+0x50>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <_sbrk+0x16>
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <_sbrk+0x50>)
 8002ac2:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <_sbrk+0x54>)
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <_sbrk+0x50>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <_sbrk+0x50>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	466a      	mov	r2, sp
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d907      	bls.n	8002aea <_sbrk+0x3a>
 8002ada:	f006 f94b 	bl	8008d74 <__errno>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	230c      	movs	r3, #12
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae8:	e006      	b.n	8002af8 <_sbrk+0x48>
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <_sbrk+0x50>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <_sbrk+0x50>)
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000298 	.word	0x20000298
 8002b04:	20006e50 	.word	0x20006e50

08002b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <SystemInit+0x28>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <SystemInit+0x28>)
 8002b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <SystemInit+0x28>)
 8002b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b22:	609a      	str	r2, [r3, #8]
#endif
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <Reset_Handler>:
 8002b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b6c <LoopFillZerobss+0x14>
 8002b38:	2100      	movs	r1, #0
 8002b3a:	e003      	b.n	8002b44 <LoopCopyDataInit>

08002b3c <CopyDataInit>:
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <LoopFillZerobss+0x18>)
 8002b3e:	585b      	ldr	r3, [r3, r1]
 8002b40:	5043      	str	r3, [r0, r1]
 8002b42:	3104      	adds	r1, #4

08002b44 <LoopCopyDataInit>:
 8002b44:	480b      	ldr	r0, [pc, #44]	; (8002b74 <LoopFillZerobss+0x1c>)
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <LoopFillZerobss+0x20>)
 8002b48:	1842      	adds	r2, r0, r1
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d3f6      	bcc.n	8002b3c <CopyDataInit>
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <LoopFillZerobss+0x24>)
 8002b50:	e002      	b.n	8002b58 <LoopFillZerobss>

08002b52 <FillZerobss>:
 8002b52:	2300      	movs	r3, #0
 8002b54:	f842 3b04 	str.w	r3, [r2], #4

08002b58 <LoopFillZerobss>:
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <LoopFillZerobss+0x28>)
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d3f9      	bcc.n	8002b52 <FillZerobss>
 8002b5e:	f7ff ffd3 	bl	8002b08 <SystemInit>
 8002b62:	f006 f90d 	bl	8008d80 <__libc_init_array>
 8002b66:	f7fe fded 	bl	8001744 <main>
 8002b6a:	4770      	bx	lr
 8002b6c:	20020000 	.word	0x20020000
 8002b70:	0800bc48 	.word	0x0800bc48
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000254 	.word	0x20000254
 8002b7c:	20000254 	.word	0x20000254
 8002b80:	20006e4c 	.word	0x20006e4c

08002b84 <ADC_IRQHandler>:
 8002b84:	e7fe      	b.n	8002b84 <ADC_IRQHandler>
	...

08002b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <HAL_Init+0x40>)
 8002b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_Init+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <HAL_Init+0x40>)
 8002b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_Init+0x40>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <HAL_Init+0x40>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f000 fd37 	bl	8003624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f000 f808 	bl	8002bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bbc:	f7ff fbf0 	bl	80023a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00

08002bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_InitTick+0x54>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_InitTick+0x58>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fd4f 	bl	800368e <HAL_SYSTICK_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00e      	b.n	8002c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b0f      	cmp	r3, #15
 8002bfe:	d80a      	bhi.n	8002c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c00:	2200      	movs	r2, #0
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f000 fd17 	bl	800363a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c0c:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <HAL_InitTick+0x5c>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000078 	.word	0x20000078
 8002c24:	20000080 	.word	0x20000080
 8002c28:	2000007c 	.word	0x2000007c

08002c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_IncTick+0x20>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_IncTick+0x24>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <HAL_IncTick+0x24>)
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000080 	.word	0x20000080
 8002c50:	20004dd4 	.word	0x20004dd4

08002c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return uwTick;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_GetTick+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20004dd4 	.word	0x20004dd4

08002c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff ffee 	bl	8002c54 <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d005      	beq.n	8002c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_Delay+0x40>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c92:	bf00      	nop
 8002c94:	f7ff ffde 	bl	8002c54 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d8f7      	bhi.n	8002c94 <HAL_Delay+0x28>
  {
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000080 	.word	0x20000080

08002cb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e033      	b.n	8002d2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fb8e 	bl	80023f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cf6:	f023 0302 	bic.w	r3, r3, #2
 8002cfa:	f043 0202 	orr.w	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa40 	bl	8003188 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d1e:	e001      	b.n	8002d24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_Start_DMA+0x1e>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e0cc      	b.n	8002ef0 <HAL_ADC_Start_DMA+0x1b8>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d018      	beq.n	8002d9e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d7c:	4b5e      	ldr	r3, [pc, #376]	; (8002ef8 <HAL_ADC_Start_DMA+0x1c0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5e      	ldr	r2, [pc, #376]	; (8002efc <HAL_ADC_Start_DMA+0x1c4>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	0c9a      	lsrs	r2, r3, #18
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d90:	e002      	b.n	8002d98 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f9      	bne.n	8002d92 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	f040 80a0 	bne.w	8002eee <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d007      	beq.n	8002de0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dd8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dec:	d106      	bne.n	8002dfc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f023 0206 	bic.w	r2, r3, #6
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
 8002dfa:	e002      	b.n	8002e02 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <HAL_ADC_Start_DMA+0x1c8>)
 8002e0c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	4a3c      	ldr	r2, [pc, #240]	; (8002f04 <HAL_ADC_Start_DMA+0x1cc>)
 8002e14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	4a3b      	ldr	r2, [pc, #236]	; (8002f08 <HAL_ADC_Start_DMA+0x1d0>)
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	4a3a      	ldr	r2, [pc, #232]	; (8002f0c <HAL_ADC_Start_DMA+0x1d4>)
 8002e24:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e3e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e4e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	334c      	adds	r3, #76	; 0x4c
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f000 fcd0 	bl	8003804 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d12a      	bne.n	8002ec6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <HAL_ADC_Start_DMA+0x1d8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d015      	beq.n	8002ea6 <HAL_ADC_Start_DMA+0x16e>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a25      	ldr	r2, [pc, #148]	; (8002f14 <HAL_ADC_Start_DMA+0x1dc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d105      	bne.n	8002e90 <HAL_ADC_Start_DMA+0x158>
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_ADC_Start_DMA+0x1c8>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a20      	ldr	r2, [pc, #128]	; (8002f18 <HAL_ADC_Start_DMA+0x1e0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d129      	bne.n	8002eee <HAL_ADC_Start_DMA+0x1b6>
 8002e9a:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_ADC_Start_DMA+0x1c8>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2b0f      	cmp	r3, #15
 8002ea4:	d823      	bhi.n	8002eee <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d11c      	bne.n	8002eee <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	e013      	b.n	8002eee <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_ADC_Start_DMA+0x1d8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10e      	bne.n	8002eee <HAL_ADC_Start_DMA+0x1b6>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002eec:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000078 	.word	0x20000078
 8002efc:	431bde83 	.word	0x431bde83
 8002f00:	40012300 	.word	0x40012300
 8002f04:	08003381 	.word	0x08003381
 8002f08:	0800343b 	.word	0x0800343b
 8002f0c:	08003457 	.word	0x08003457
 8002f10:	40012000 	.word	0x40012000
 8002f14:	40012100 	.word	0x40012100
 8002f18:	40012200 	.word	0x40012200

08002f1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x1c>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e105      	b.n	800316c <HAL_ADC_ConfigChannel+0x228>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d925      	bls.n	8002fbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68d9      	ldr	r1, [r3, #12]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	3b1e      	subs	r3, #30
 8002f86:	2207      	movs	r2, #7
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	400a      	ands	r2, r1
 8002f94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68d9      	ldr	r1, [r3, #12]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	4603      	mov	r3, r0
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4403      	add	r3, r0
 8002fae:	3b1e      	subs	r3, #30
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	e022      	b.n	8003002 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6919      	ldr	r1, [r3, #16]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	2207      	movs	r2, #7
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	400a      	ands	r2, r1
 8002fde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4403      	add	r3, r0
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d824      	bhi.n	8003054 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	3b05      	subs	r3, #5
 800301c:	221f      	movs	r2, #31
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	400a      	ands	r2, r1
 800302a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	4618      	mov	r0, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	3b05      	subs	r3, #5
 8003046:	fa00 f203 	lsl.w	r2, r0, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	635a      	str	r2, [r3, #52]	; 0x34
 8003052:	e04c      	b.n	80030ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b0c      	cmp	r3, #12
 800305a:	d824      	bhi.n	80030a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	3b23      	subs	r3, #35	; 0x23
 800306e:	221f      	movs	r2, #31
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43da      	mvns	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	400a      	ands	r2, r1
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	4618      	mov	r0, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	3b23      	subs	r3, #35	; 0x23
 8003098:	fa00 f203 	lsl.w	r2, r0, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
 80030a4:	e023      	b.n	80030ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	3b41      	subs	r3, #65	; 0x41
 80030b8:	221f      	movs	r2, #31
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	400a      	ands	r2, r1
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b41      	subs	r3, #65	; 0x41
 80030e2:	fa00 f203 	lsl.w	r2, r0, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ee:	4b22      	ldr	r3, [pc, #136]	; (8003178 <HAL_ADC_ConfigChannel+0x234>)
 80030f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a21      	ldr	r2, [pc, #132]	; (800317c <HAL_ADC_ConfigChannel+0x238>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d109      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1cc>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b12      	cmp	r3, #18
 8003102:	d105      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_ADC_ConfigChannel+0x238>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d123      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x21e>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b10      	cmp	r3, #16
 8003120:	d003      	beq.n	800312a <HAL_ADC_ConfigChannel+0x1e6>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b11      	cmp	r3, #17
 8003128:	d11b      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b10      	cmp	r3, #16
 800313c:	d111      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_ADC_ConfigChannel+0x23c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <HAL_ADC_ConfigChannel+0x240>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	0c9a      	lsrs	r2, r3, #18
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003154:	e002      	b.n	800315c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3b01      	subs	r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f9      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40012300 	.word	0x40012300
 800317c:	40012000 	.word	0x40012000
 8003180:	20000078 	.word	0x20000078
 8003184:	431bde83 	.word	0x431bde83

08003188 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003190:	4b79      	ldr	r3, [pc, #484]	; (8003378 <ADC_Init+0x1f0>)
 8003192:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	021a      	lsls	r2, r3, #8
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6899      	ldr	r1, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	4a58      	ldr	r2, [pc, #352]	; (800337c <ADC_Init+0x1f4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d022      	beq.n	8003266 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800322e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003250:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6899      	ldr	r1, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	e00f      	b.n	8003286 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003284:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0202 	bic.w	r2, r2, #2
 8003294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7e1b      	ldrb	r3, [r3, #24]
 80032a0:	005a      	lsls	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01b      	beq.n	80032ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	3b01      	subs	r3, #1
 80032e0:	035a      	lsls	r2, r3, #13
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	e007      	b.n	80032fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	3b01      	subs	r3, #1
 8003318:	051a      	lsls	r2, r3, #20
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6899      	ldr	r1, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800333e:	025a      	lsls	r2, r3, #9
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	029a      	lsls	r2, r3, #10
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40012300 	.word	0x40012300
 800337c:	0f000001 	.word	0x0f000001

08003380 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003396:	2b00      	cmp	r3, #0
 8003398:	d13c      	bne.n	8003414 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d12b      	bne.n	800340c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d127      	bne.n	800340c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d119      	bne.n	800340c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0220 	bic.w	r2, r2, #32
 80033e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7fe f90b 	bl	8001628 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003412:	e00e      	b.n	8003432 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7ff fd85 	bl	8002f30 <HAL_ADC_ErrorCallback>
}
 8003426:	e004      	b.n	8003432 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff fd67 	bl	8002f1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2240      	movs	r2, #64	; 0x40
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f043 0204 	orr.w	r2, r3, #4
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7ff fd5a 	bl	8002f30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <__NVIC_SetPriorityGrouping>:
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	; (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <SysTick_Config>:
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f0:	d301      	bcc.n	80035f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00f      	b.n	8003616 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <SysTick_Config+0x40>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fe:	210f      	movs	r1, #15
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	f7ff ff8e 	bl	8003524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <SysTick_Config+0x40>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <SysTick_Config+0x40>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010

08003624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff29 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff ff3e 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff8e 	bl	8003578 <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5d 	bl	8003524 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff31 	bl	80034e8 <__NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ffa2 	bl	80035e0 <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036b4:	f7ff face 	bl	8002c54 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e099      	b.n	80037f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036e4:	e00f      	b.n	8003706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036e6:	f7ff fab5 	bl	8002c54 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d908      	bls.n	8003706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2203      	movs	r2, #3
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e078      	b.n	80037f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e8      	bne.n	80036e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4b38      	ldr	r3, [pc, #224]	; (8003800 <HAL_DMA_Init+0x158>)
 8003720:	4013      	ands	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	2b04      	cmp	r3, #4
 800375e:	d107      	bne.n	8003770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	4313      	orrs	r3, r2
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f023 0307 	bic.w	r3, r3, #7
 8003786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2b04      	cmp	r3, #4
 8003798:	d117      	bne.n	80037ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fa9d 	bl	8003cec <DMA_CheckFifoParam>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2240      	movs	r2, #64	; 0x40
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037c6:	2301      	movs	r3, #1
 80037c8:	e016      	b.n	80037f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa54 	bl	8003c80 <DMA_CalcBaseAndBitshift>
 80037d8:	4603      	mov	r3, r0
 80037da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	223f      	movs	r2, #63	; 0x3f
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	f010803f 	.word	0xf010803f

08003804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_DMA_Start_IT+0x26>
 8003826:	2302      	movs	r3, #2
 8003828:	e040      	b.n	80038ac <HAL_DMA_Start_IT+0xa8>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d12f      	bne.n	800389e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f9e6 	bl	8003c24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	223f      	movs	r2, #63	; 0x3f
 800385e:	409a      	lsls	r2, r3
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0216 	orr.w	r2, r2, #22
 8003872:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0208 	orr.w	r2, r2, #8
 800388a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e005      	b.n	80038aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
 80038a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d004      	beq.n	80038d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00c      	b.n	80038ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2205      	movs	r2, #5
 80038d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003904:	4b92      	ldr	r3, [pc, #584]	; (8003b50 <HAL_DMA_IRQHandler+0x258>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a92      	ldr	r2, [pc, #584]	; (8003b54 <HAL_DMA_IRQHandler+0x25c>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	0a9b      	lsrs	r3, r3, #10
 8003910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	2208      	movs	r2, #8
 8003924:	409a      	lsls	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d01a      	beq.n	8003964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d013      	beq.n	8003964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0204 	bic.w	r2, r2, #4
 800394a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	2208      	movs	r2, #8
 8003952:	409a      	lsls	r2, r3
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	f043 0201 	orr.w	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003968:	2201      	movs	r2, #1
 800396a:	409a      	lsls	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d012      	beq.n	800399a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003986:	2201      	movs	r2, #1
 8003988:	409a      	lsls	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003992:	f043 0202 	orr.w	r2, r3, #2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	2204      	movs	r2, #4
 80039a0:	409a      	lsls	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d012      	beq.n	80039d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	2204      	movs	r2, #4
 80039be:	409a      	lsls	r2, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	2210      	movs	r2, #16
 80039d6:	409a      	lsls	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d043      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d03c      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	2210      	movs	r2, #16
 80039f4:	409a      	lsls	r2, r3
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d018      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d108      	bne.n	8003a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d024      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
 8003a26:	e01f      	b.n	8003a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01b      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
 8003a38:	e016      	b.n	8003a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0208 	bic.w	r2, r2, #8
 8003a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 808e 	beq.w	8003b96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8086 	beq.w	8003b96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	2220      	movs	r2, #32
 8003a90:	409a      	lsls	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d136      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0216 	bic.w	r2, r2, #22
 8003ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <HAL_DMA_IRQHandler+0x1da>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0208 	bic.w	r2, r2, #8
 8003ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	223f      	movs	r2, #63	; 0x3f
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d07d      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
        }
        return;
 8003b0e:	e078      	b.n	8003c02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01c      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d108      	bne.n	8003b3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d030      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4798      	blx	r3
 8003b3c:	e02b      	b.n	8003b96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d027      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4798      	blx	r3
 8003b4e:	e022      	b.n	8003b96 <HAL_DMA_IRQHandler+0x29e>
 8003b50:	20000078 	.word	0x20000078
 8003b54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0210 	bic.w	r2, r2, #16
 8003b74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d032      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2205      	movs	r2, #5
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d307      	bcc.n	8003bde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f2      	bne.n	8003bc2 <HAL_DMA_IRQHandler+0x2ca>
 8003bdc:	e000      	b.n	8003be0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003bde:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
 8003c00:	e000      	b.n	8003c04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c02:	bf00      	nop
    }
  }
}
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop

08003c0c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d108      	bne.n	8003c64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c62:	e007      	b.n	8003c74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	3b10      	subs	r3, #16
 8003c90:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <DMA_CalcBaseAndBitshift+0x64>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c9a:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d909      	bls.n	8003cc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	1d1a      	adds	r2, r3, #4
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8003cc0:	e007      	b.n	8003cd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	aaaaaaab 	.word	0xaaaaaaab
 8003ce8:	0800b958 	.word	0x0800b958

08003cec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11f      	bne.n	8003d46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d855      	bhi.n	8003db8 <DMA_CheckFifoParam+0xcc>
 8003d0c:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <DMA_CheckFifoParam+0x28>)
 8003d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d12:	bf00      	nop
 8003d14:	08003d25 	.word	0x08003d25
 8003d18:	08003d37 	.word	0x08003d37
 8003d1c:	08003d25 	.word	0x08003d25
 8003d20:	08003db9 	.word	0x08003db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d045      	beq.n	8003dbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d34:	e042      	b.n	8003dbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d3e:	d13f      	bne.n	8003dc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d44:	e03c      	b.n	8003dc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4e:	d121      	bne.n	8003d94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d836      	bhi.n	8003dc4 <DMA_CheckFifoParam+0xd8>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <DMA_CheckFifoParam+0x70>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d73 	.word	0x08003d73
 8003d64:	08003d6d 	.word	0x08003d6d
 8003d68:	08003d85 	.word	0x08003d85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d70:	e02f      	b.n	8003dd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d024      	beq.n	8003dc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d82:	e021      	b.n	8003dc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d8c:	d11e      	bne.n	8003dcc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d92:	e01b      	b.n	8003dcc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d902      	bls.n	8003da0 <DMA_CheckFifoParam+0xb4>
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d003      	beq.n	8003da6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d9e:	e018      	b.n	8003dd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      break;
 8003da4:	e015      	b.n	8003dd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00e      	beq.n	8003dd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      break;
 8003db6:	e00b      	b.n	8003dd0 <DMA_CheckFifoParam+0xe4>
      break;
 8003db8:	bf00      	nop
 8003dba:	e00a      	b.n	8003dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8003dbc:	bf00      	nop
 8003dbe:	e008      	b.n	8003dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8003dc0:	bf00      	nop
 8003dc2:	e006      	b.n	8003dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8003dc4:	bf00      	nop
 8003dc6:	e004      	b.n	8003dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8003dc8:	bf00      	nop
 8003dca:	e002      	b.n	8003dd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8003dcc:	bf00      	nop
 8003dce:	e000      	b.n	8003dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8003dd0:	bf00      	nop
    }
  } 
  
  return status; 
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	; 0x24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	e16b      	b.n	80040d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	f040 815a 	bne.w	80040ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d00b      	beq.n	8003e3a <HAL_GPIO_Init+0x5a>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d007      	beq.n	8003e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e2e:	2b11      	cmp	r3, #17
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b12      	cmp	r3, #18
 8003e38:	d130      	bne.n	8003e9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2203      	movs	r2, #3
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e70:	2201      	movs	r2, #1
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 0201 	and.w	r2, r3, #1
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0xfc>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b12      	cmp	r3, #18
 8003eda:	d123      	bne.n	8003f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	08da      	lsrs	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3208      	adds	r2, #8
 8003ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	220f      	movs	r2, #15
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	08da      	lsrs	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3208      	adds	r2, #8
 8003f1e:	69b9      	ldr	r1, [r7, #24]
 8003f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	2203      	movs	r2, #3
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0203 	and.w	r2, r3, #3
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80b4 	beq.w	80040ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	4b5f      	ldr	r3, [pc, #380]	; (80040e8 <HAL_GPIO_Init+0x308>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	4a5e      	ldr	r2, [pc, #376]	; (80040e8 <HAL_GPIO_Init+0x308>)
 8003f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f74:	6453      	str	r3, [r2, #68]	; 0x44
 8003f76:	4b5c      	ldr	r3, [pc, #368]	; (80040e8 <HAL_GPIO_Init+0x308>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f82:	4a5a      	ldr	r2, [pc, #360]	; (80040ec <HAL_GPIO_Init+0x30c>)
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	3302      	adds	r3, #2
 8003f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	220f      	movs	r2, #15
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a51      	ldr	r2, [pc, #324]	; (80040f0 <HAL_GPIO_Init+0x310>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d02b      	beq.n	8004006 <HAL_GPIO_Init+0x226>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a50      	ldr	r2, [pc, #320]	; (80040f4 <HAL_GPIO_Init+0x314>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d025      	beq.n	8004002 <HAL_GPIO_Init+0x222>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a4f      	ldr	r2, [pc, #316]	; (80040f8 <HAL_GPIO_Init+0x318>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01f      	beq.n	8003ffe <HAL_GPIO_Init+0x21e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4e      	ldr	r2, [pc, #312]	; (80040fc <HAL_GPIO_Init+0x31c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d019      	beq.n	8003ffa <HAL_GPIO_Init+0x21a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4d      	ldr	r2, [pc, #308]	; (8004100 <HAL_GPIO_Init+0x320>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_GPIO_Init+0x216>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a4c      	ldr	r2, [pc, #304]	; (8004104 <HAL_GPIO_Init+0x324>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_GPIO_Init+0x212>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4b      	ldr	r2, [pc, #300]	; (8004108 <HAL_GPIO_Init+0x328>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d007      	beq.n	8003fee <HAL_GPIO_Init+0x20e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a4a      	ldr	r2, [pc, #296]	; (800410c <HAL_GPIO_Init+0x32c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d101      	bne.n	8003fea <HAL_GPIO_Init+0x20a>
 8003fe6:	2307      	movs	r3, #7
 8003fe8:	e00e      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003fea:	2308      	movs	r3, #8
 8003fec:	e00c      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003fee:	2306      	movs	r3, #6
 8003ff0:	e00a      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003ff2:	2305      	movs	r3, #5
 8003ff4:	e008      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	e006      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e004      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e002      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8004006:	2300      	movs	r3, #0
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	f002 0203 	and.w	r2, r2, #3
 800400e:	0092      	lsls	r2, r2, #2
 8004010:	4093      	lsls	r3, r2
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004018:	4934      	ldr	r1, [pc, #208]	; (80040ec <HAL_GPIO_Init+0x30c>)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	3302      	adds	r3, #2
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004026:	4b3a      	ldr	r3, [pc, #232]	; (8004110 <HAL_GPIO_Init+0x330>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800404a:	4a31      	ldr	r2, [pc, #196]	; (8004110 <HAL_GPIO_Init+0x330>)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004050:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <HAL_GPIO_Init+0x330>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004074:	4a26      	ldr	r2, [pc, #152]	; (8004110 <HAL_GPIO_Init+0x330>)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800407a:	4b25      	ldr	r3, [pc, #148]	; (8004110 <HAL_GPIO_Init+0x330>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800409e:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <HAL_GPIO_Init+0x330>)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_GPIO_Init+0x330>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040c8:	4a11      	ldr	r2, [pc, #68]	; (8004110 <HAL_GPIO_Init+0x330>)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3301      	adds	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b0f      	cmp	r3, #15
 80040d8:	f67f ae90 	bls.w	8003dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040dc:	bf00      	nop
 80040de:	3724      	adds	r7, #36	; 0x24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40013800 	.word	0x40013800
 80040f0:	40020000 	.word	0x40020000
 80040f4:	40020400 	.word	0x40020400
 80040f8:	40020800 	.word	0x40020800
 80040fc:	40020c00 	.word	0x40020c00
 8004100:	40021000 	.word	0x40021000
 8004104:	40021400 	.word	0x40021400
 8004108:	40021800 	.word	0x40021800
 800410c:	40021c00 	.word	0x40021c00
 8004110:	40013c00 	.word	0x40013c00

08004114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	887b      	ldrh	r3, [r7, #2]
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
 8004130:	e001      	b.n	8004136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004136:	7bfb      	ldrb	r3, [r7, #15]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
 8004150:	4613      	mov	r3, r2
 8004152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004154:	787b      	ldrb	r3, [r7, #1]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004160:	e003      	b.n	800416a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004162:	887b      	ldrh	r3, [r7, #2]
 8004164:	041a      	lsls	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	619a      	str	r2, [r3, #24]
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e25b      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d075      	beq.n	8004282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004196:	4ba3      	ldr	r3, [pc, #652]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d00c      	beq.n	80041bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041a2:	4ba0      	ldr	r3, [pc, #640]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d112      	bne.n	80041d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ae:	4b9d      	ldr	r3, [pc, #628]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ba:	d10b      	bne.n	80041d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041bc:	4b99      	ldr	r3, [pc, #612]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d05b      	beq.n	8004280 <HAL_RCC_OscConfig+0x108>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d157      	bne.n	8004280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e236      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d106      	bne.n	80041ec <HAL_RCC_OscConfig+0x74>
 80041de:	4b91      	ldr	r3, [pc, #580]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a90      	ldr	r2, [pc, #576]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e01d      	b.n	8004228 <HAL_RCC_OscConfig+0xb0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x98>
 80041f6:	4b8b      	ldr	r3, [pc, #556]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a8a      	ldr	r2, [pc, #552]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b88      	ldr	r3, [pc, #544]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a87      	ldr	r2, [pc, #540]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e00b      	b.n	8004228 <HAL_RCC_OscConfig+0xb0>
 8004210:	4b84      	ldr	r3, [pc, #528]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a83      	ldr	r2, [pc, #524]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 8004216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b81      	ldr	r3, [pc, #516]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a80      	ldr	r2, [pc, #512]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 8004222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d013      	beq.n	8004258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004230:	f7fe fd10 	bl	8002c54 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004238:	f7fe fd0c 	bl	8002c54 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e1fb      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0xc0>
 8004256:	e014      	b.n	8004282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fe fcfc 	bl	8002c54 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004260:	f7fe fcf8 	bl	8002c54 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e1e7      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004272:	4b6c      	ldr	r3, [pc, #432]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0xe8>
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d063      	beq.n	8004356 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800428e:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800429a:	4b62      	ldr	r3, [pc, #392]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d11c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a6:	4b5f      	ldr	r3, [pc, #380]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d116      	bne.n	80042e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b2:	4b5c      	ldr	r3, [pc, #368]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_RCC_OscConfig+0x152>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d001      	beq.n	80042ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e1bb      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	4b56      	ldr	r3, [pc, #344]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4952      	ldr	r1, [pc, #328]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042de:	e03a      	b.n	8004356 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d020      	beq.n	800432a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e8:	4b4f      	ldr	r3, [pc, #316]	; (8004428 <HAL_RCC_OscConfig+0x2b0>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fe fcb1 	bl	8002c54 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f6:	f7fe fcad 	bl	8002c54 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e19c      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004308:	4b46      	ldr	r3, [pc, #280]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004314:	4b43      	ldr	r3, [pc, #268]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4940      	ldr	r1, [pc, #256]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	4313      	orrs	r3, r2
 8004326:	600b      	str	r3, [r1, #0]
 8004328:	e015      	b.n	8004356 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RCC_OscConfig+0x2b0>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fe fc90 	bl	8002c54 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004338:	f7fe fc8c 	bl	8002c54 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e17b      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434a:	4b36      	ldr	r3, [pc, #216]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d030      	beq.n	80043c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d016      	beq.n	8004398 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800436a:	4b30      	ldr	r3, [pc, #192]	; (800442c <HAL_RCC_OscConfig+0x2b4>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7fe fc70 	bl	8002c54 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004378:	f7fe fc6c 	bl	8002c54 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e15b      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438a:	4b26      	ldr	r3, [pc, #152]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 800438c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x200>
 8004396:	e015      	b.n	80043c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004398:	4b24      	ldr	r3, [pc, #144]	; (800442c <HAL_RCC_OscConfig+0x2b4>)
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439e:	f7fe fc59 	bl	8002c54 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a6:	f7fe fc55 	bl	8002c54 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e144      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80043ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f0      	bne.n	80043a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a0 	beq.w	8004512 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4b13      	ldr	r3, [pc, #76]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	4a0e      	ldr	r2, [pc, #56]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f0:	6413      	str	r3, [r2, #64]	; 0x40
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCC_OscConfig+0x2b8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d121      	bne.n	8004452 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <HAL_RCC_OscConfig+0x2b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a07      	ldr	r2, [pc, #28]	; (8004430 <HAL_RCC_OscConfig+0x2b8>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441a:	f7fe fc1b 	bl	8002c54 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	e011      	b.n	8004446 <HAL_RCC_OscConfig+0x2ce>
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800
 8004428:	42470000 	.word	0x42470000
 800442c:	42470e80 	.word	0x42470e80
 8004430:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004434:	f7fe fc0e 	bl	8002c54 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0fd      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004446:	4b81      	ldr	r3, [pc, #516]	; (800464c <HAL_RCC_OscConfig+0x4d4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d106      	bne.n	8004468 <HAL_RCC_OscConfig+0x2f0>
 800445a:	4b7d      	ldr	r3, [pc, #500]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a7c      	ldr	r2, [pc, #496]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6713      	str	r3, [r2, #112]	; 0x70
 8004466:	e01c      	b.n	80044a2 <HAL_RCC_OscConfig+0x32a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b05      	cmp	r3, #5
 800446e:	d10c      	bne.n	800448a <HAL_RCC_OscConfig+0x312>
 8004470:	4b77      	ldr	r3, [pc, #476]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	4a76      	ldr	r2, [pc, #472]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 8004476:	f043 0304 	orr.w	r3, r3, #4
 800447a:	6713      	str	r3, [r2, #112]	; 0x70
 800447c:	4b74      	ldr	r3, [pc, #464]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	4a73      	ldr	r2, [pc, #460]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6713      	str	r3, [r2, #112]	; 0x70
 8004488:	e00b      	b.n	80044a2 <HAL_RCC_OscConfig+0x32a>
 800448a:	4b71      	ldr	r3, [pc, #452]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	4a70      	ldr	r2, [pc, #448]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	6713      	str	r3, [r2, #112]	; 0x70
 8004496:	4b6e      	ldr	r3, [pc, #440]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	4a6d      	ldr	r2, [pc, #436]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 800449c:	f023 0304 	bic.w	r3, r3, #4
 80044a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d015      	beq.n	80044d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044aa:	f7fe fbd3 	bl	8002c54 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b0:	e00a      	b.n	80044c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b2:	f7fe fbcf 	bl	8002c54 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e0bc      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c8:	4b61      	ldr	r3, [pc, #388]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ee      	beq.n	80044b2 <HAL_RCC_OscConfig+0x33a>
 80044d4:	e014      	b.n	8004500 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d6:	f7fe fbbd 	bl	8002c54 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044dc:	e00a      	b.n	80044f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044de:	f7fe fbb9 	bl	8002c54 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e0a6      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f4:	4b56      	ldr	r3, [pc, #344]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ee      	bne.n	80044de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004500:	7dfb      	ldrb	r3, [r7, #23]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d105      	bne.n	8004512 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004506:	4b52      	ldr	r3, [pc, #328]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a51      	ldr	r2, [pc, #324]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 800450c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8092 	beq.w	8004640 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800451c:	4b4c      	ldr	r3, [pc, #304]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b08      	cmp	r3, #8
 8004526:	d05c      	beq.n	80045e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d141      	bne.n	80045b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004530:	4b48      	ldr	r3, [pc, #288]	; (8004654 <HAL_RCC_OscConfig+0x4dc>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004536:	f7fe fb8d 	bl	8002c54 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800453e:	f7fe fb89 	bl	8002c54 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e078      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004550:	4b3f      	ldr	r3, [pc, #252]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f0      	bne.n	800453e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	019b      	lsls	r3, r3, #6
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	3b01      	subs	r3, #1
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	061b      	lsls	r3, r3, #24
 8004580:	4933      	ldr	r1, [pc, #204]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 8004582:	4313      	orrs	r3, r2
 8004584:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004586:	4b33      	ldr	r3, [pc, #204]	; (8004654 <HAL_RCC_OscConfig+0x4dc>)
 8004588:	2201      	movs	r2, #1
 800458a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fe fb62 	bl	8002c54 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004594:	f7fe fb5e 	bl	8002c54 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e04d      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x41c>
 80045b2:	e045      	b.n	8004640 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b4:	4b27      	ldr	r3, [pc, #156]	; (8004654 <HAL_RCC_OscConfig+0x4dc>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ba:	f7fe fb4b 	bl	8002c54 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fe fb47 	bl	8002c54 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e036      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d4:	4b1e      	ldr	r3, [pc, #120]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x44a>
 80045e0:	e02e      	b.n	8004640 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e029      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045ee:	4b18      	ldr	r3, [pc, #96]	; (8004650 <HAL_RCC_OscConfig+0x4d8>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d11c      	bne.n	800463c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d115      	bne.n	800463c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004616:	4013      	ands	r3, r2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800461c:	4293      	cmp	r3, r2
 800461e:	d10d      	bne.n	800463c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d106      	bne.n	800463c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40007000 	.word	0x40007000
 8004650:	40023800 	.word	0x40023800
 8004654:	42470060 	.word	0x42470060

08004658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0cc      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800466c:	4b68      	ldr	r3, [pc, #416]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d90c      	bls.n	8004694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b65      	ldr	r3, [pc, #404]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004682:	4b63      	ldr	r3, [pc, #396]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0b8      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ac:	4b59      	ldr	r3, [pc, #356]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4a58      	ldr	r2, [pc, #352]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c4:	4b53      	ldr	r3, [pc, #332]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a52      	ldr	r2, [pc, #328]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d0:	4b50      	ldr	r3, [pc, #320]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	494d      	ldr	r1, [pc, #308]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d044      	beq.n	8004778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f6:	4b47      	ldr	r3, [pc, #284]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d119      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e07f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d003      	beq.n	8004716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004712:	2b03      	cmp	r3, #3
 8004714:	d107      	bne.n	8004726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004716:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e06f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004726:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e067      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004736:	4b37      	ldr	r3, [pc, #220]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f023 0203 	bic.w	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4934      	ldr	r1, [pc, #208]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	4313      	orrs	r3, r2
 8004746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004748:	f7fe fa84 	bl	8002c54 <HAL_GetTick>
 800474c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474e:	e00a      	b.n	8004766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004750:	f7fe fa80 	bl	8002c54 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	; 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e04f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004766:	4b2b      	ldr	r3, [pc, #172]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 020c 	and.w	r2, r3, #12
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	429a      	cmp	r2, r3
 8004776:	d1eb      	bne.n	8004750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004778:	4b25      	ldr	r3, [pc, #148]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d20c      	bcs.n	80047a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478e:	4b20      	ldr	r3, [pc, #128]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e032      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4916      	ldr	r1, [pc, #88]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d009      	beq.n	80047de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ca:	4b12      	ldr	r3, [pc, #72]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	490e      	ldr	r1, [pc, #56]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047de:	f000 f889 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 80047e2:	4601      	mov	r1, r0
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	4a0a      	ldr	r2, [pc, #40]	; (8004818 <HAL_RCC_ClockConfig+0x1c0>)
 80047f0:	5cd3      	ldrb	r3, [r2, r3]
 80047f2:	fa21 f303 	lsr.w	r3, r1, r3
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <HAL_RCC_ClockConfig+0x1c8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe f9e4 	bl	8002bcc <HAL_InitTick>

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40023c00 	.word	0x40023c00
 8004814:	40023800 	.word	0x40023800
 8004818:	0800b948 	.word	0x0800b948
 800481c:	20000078 	.word	0x20000078
 8004820:	2000007c 	.word	0x2000007c

08004824 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08c      	sub	sp, #48	; 0x30
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d129      	bne.n	800488a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	4b2b      	ldr	r3, [pc, #172]	; (80048e8 <HAL_RCC_MCOConfig+0xc4>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	4a2a      	ldr	r2, [pc, #168]	; (80048e8 <HAL_RCC_MCOConfig+0xc4>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	6313      	str	r3, [r2, #48]	; 0x30
 8004846:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <HAL_RCC_MCOConfig+0xc4>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004858:	2302      	movs	r3, #2
 800485a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800485c:	2303      	movs	r3, #3
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004860:	2300      	movs	r3, #0
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004868:	f107 031c 	add.w	r3, r7, #28
 800486c:	4619      	mov	r1, r3
 800486e:	481f      	ldr	r0, [pc, #124]	; (80048ec <HAL_RCC_MCOConfig+0xc8>)
 8004870:	f7ff fab6 	bl	8003de0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004874:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <HAL_RCC_MCOConfig+0xc4>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	430b      	orrs	r3, r1
 8004882:	4919      	ldr	r1, [pc, #100]	; (80048e8 <HAL_RCC_MCOConfig+0xc4>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004888:	e029      	b.n	80048de <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <HAL_RCC_MCOConfig+0xc4>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <HAL_RCC_MCOConfig+0xc4>)
 8004894:	f043 0304 	orr.w	r3, r3, #4
 8004898:	6313      	str	r3, [r2, #48]	; 0x30
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <HAL_RCC_MCOConfig+0xc4>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80048a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ac:	2302      	movs	r3, #2
 80048ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b0:	2303      	movs	r3, #3
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80048b8:	2300      	movs	r3, #0
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80048bc:	f107 031c 	add.w	r3, r7, #28
 80048c0:	4619      	mov	r1, r3
 80048c2:	480b      	ldr	r0, [pc, #44]	; (80048f0 <HAL_RCC_MCOConfig+0xcc>)
 80048c4:	f7ff fa8c 	bl	8003de0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80048c8:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <HAL_RCC_MCOConfig+0xc4>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	00d9      	lsls	r1, r3, #3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	430b      	orrs	r3, r1
 80048d8:	4903      	ldr	r1, [pc, #12]	; (80048e8 <HAL_RCC_MCOConfig+0xc4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
}
 80048de:	bf00      	nop
 80048e0:	3730      	adds	r7, #48	; 0x30
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40020000 	.word	0x40020000
 80048f0:	40020800 	.word	0x40020800

080048f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	2300      	movs	r3, #0
 8004904:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490a:	4b50      	ldr	r3, [pc, #320]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x158>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b04      	cmp	r3, #4
 8004914:	d007      	beq.n	8004926 <HAL_RCC_GetSysClockFreq+0x32>
 8004916:	2b08      	cmp	r3, #8
 8004918:	d008      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0x38>
 800491a:	2b00      	cmp	r3, #0
 800491c:	f040 808d 	bne.w	8004a3a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b4b      	ldr	r3, [pc, #300]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004922:	60bb      	str	r3, [r7, #8]
       break;
 8004924:	e08c      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004926:	4b4b      	ldr	r3, [pc, #300]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x160>)
 8004928:	60bb      	str	r3, [r7, #8]
      break;
 800492a:	e089      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492c:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x158>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004934:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004936:	4b45      	ldr	r3, [pc, #276]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x158>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d023      	beq.n	800498a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004942:	4b42      	ldr	r3, [pc, #264]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x158>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	f04f 0400 	mov.w	r4, #0
 800494c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	ea03 0501 	and.w	r5, r3, r1
 8004958:	ea04 0602 	and.w	r6, r4, r2
 800495c:	4a3d      	ldr	r2, [pc, #244]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x160>)
 800495e:	fb02 f106 	mul.w	r1, r2, r6
 8004962:	2200      	movs	r2, #0
 8004964:	fb02 f205 	mul.w	r2, r2, r5
 8004968:	440a      	add	r2, r1
 800496a:	493a      	ldr	r1, [pc, #232]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x160>)
 800496c:	fba5 0101 	umull	r0, r1, r5, r1
 8004970:	1853      	adds	r3, r2, r1
 8004972:	4619      	mov	r1, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f04f 0400 	mov.w	r4, #0
 800497a:	461a      	mov	r2, r3
 800497c:	4623      	mov	r3, r4
 800497e:	f7fc f963 	bl	8000c48 <__aeabi_uldivmod>
 8004982:	4603      	mov	r3, r0
 8004984:	460c      	mov	r4, r1
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e049      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800498a:	4b30      	ldr	r3, [pc, #192]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x158>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	099b      	lsrs	r3, r3, #6
 8004990:	f04f 0400 	mov.w	r4, #0
 8004994:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	ea03 0501 	and.w	r5, r3, r1
 80049a0:	ea04 0602 	and.w	r6, r4, r2
 80049a4:	4629      	mov	r1, r5
 80049a6:	4632      	mov	r2, r6
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	f04f 0400 	mov.w	r4, #0
 80049b0:	0154      	lsls	r4, r2, #5
 80049b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049b6:	014b      	lsls	r3, r1, #5
 80049b8:	4619      	mov	r1, r3
 80049ba:	4622      	mov	r2, r4
 80049bc:	1b49      	subs	r1, r1, r5
 80049be:	eb62 0206 	sbc.w	r2, r2, r6
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	f04f 0400 	mov.w	r4, #0
 80049ca:	0194      	lsls	r4, r2, #6
 80049cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049d0:	018b      	lsls	r3, r1, #6
 80049d2:	1a5b      	subs	r3, r3, r1
 80049d4:	eb64 0402 	sbc.w	r4, r4, r2
 80049d8:	f04f 0100 	mov.w	r1, #0
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	00e2      	lsls	r2, r4, #3
 80049e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049e6:	00d9      	lsls	r1, r3, #3
 80049e8:	460b      	mov	r3, r1
 80049ea:	4614      	mov	r4, r2
 80049ec:	195b      	adds	r3, r3, r5
 80049ee:	eb44 0406 	adc.w	r4, r4, r6
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	02a2      	lsls	r2, r4, #10
 80049fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a00:	0299      	lsls	r1, r3, #10
 8004a02:	460b      	mov	r3, r1
 8004a04:	4614      	mov	r4, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	4621      	mov	r1, r4
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f04f 0400 	mov.w	r4, #0
 8004a10:	461a      	mov	r2, r3
 8004a12:	4623      	mov	r3, r4
 8004a14:	f7fc f918 	bl	8000c48 <__aeabi_uldivmod>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x158>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	0c1b      	lsrs	r3, r3, #16
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	3301      	adds	r3, #1
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a36:	60bb      	str	r3, [r7, #8]
      break;
 8004a38:	e002      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a3c:	60bb      	str	r3, [r7, #8]
      break;
 8004a3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a40:	68bb      	ldr	r3, [r7, #8]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	00f42400 	.word	0x00f42400
 8004a54:	017d7840 	.word	0x017d7840

08004a58 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e022      	b.n	8004ab0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fd fd67 	bl	8002550 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2203      	movs	r2, #3
 8004a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f814 	bl	8004ab8 <HAL_SD_InitCard>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e00a      	b.n	8004ab0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004ab8:	b5b0      	push	{r4, r5, r7, lr}
 8004aba:	b08e      	sub	sp, #56	; 0x38
 8004abc:	af04      	add	r7, sp, #16
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004ad4:	2376      	movs	r3, #118	; 0x76
 8004ad6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681d      	ldr	r5, [r3, #0]
 8004adc:	466c      	mov	r4, sp
 8004ade:	f107 0314 	add.w	r3, r7, #20
 8004ae2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004aea:	f107 0308 	add.w	r3, r7, #8
 8004aee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af0:	4628      	mov	r0, r5
 8004af2:	f002 fba1 	bl	8007238 <SDIO_Init>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e031      	b.n	8004b6c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004b08:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <HAL_SD_InitCard+0xbc>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f002 fbd9 	bl	80072ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004b18:	4b16      	ldr	r3, [pc, #88]	; (8004b74 <HAL_SD_InitCard+0xbc>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 ffdc 	bl	8005adc <SD_PowerON>
 8004b24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00b      	beq.n	8004b44 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e013      	b.n	8004b6c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fefb 	bl	8005940 <SD_InitCard>
 8004b4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3728      	adds	r7, #40	; 0x28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bdb0      	pop	{r4, r5, r7, pc}
 8004b74:	422580a0 	.word	0x422580a0

08004b78 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08c      	sub	sp, #48	; 0x30
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0c9      	b.n	8004d34 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	f040 80c2 	bne.w	8004d32 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	441a      	add	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d907      	bls.n	8004bd2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e0b0      	b.n	8004d34 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2200      	movs	r2, #0
 8004be0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	4a50      	ldr	r2, [pc, #320]	; (8004d3c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8004bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	4a4f      	ldr	r2, [pc, #316]	; (8004d40 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8004c04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3380      	adds	r3, #128	; 0x80
 8004c18:	4619      	mov	r1, r3
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	025b      	lsls	r3, r3, #9
 8004c20:	089b      	lsrs	r3, r3, #2
 8004c22:	f7fe fdef 	bl	8003804 <HAL_DMA_Start_IT>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d017      	beq.n	8004c5c <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004c3a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a40      	ldr	r2, [pc, #256]	; (8004d44 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e06b      	b.n	8004d34 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004c5c:	4b3a      	ldr	r3, [pc, #232]	; (8004d48 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d002      	beq.n	8004c70 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	025b      	lsls	r3, r3, #9
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f002 fbb9 	bl	80073f0 <SDMMC_CmdBlockLength>
 8004c7e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00f      	beq.n	8004ca6 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2e      	ldr	r2, [pc, #184]	; (8004d44 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e046      	b.n	8004d34 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8004caa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	025b      	lsls	r3, r3, #9
 8004cb0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004cb2:	2390      	movs	r3, #144	; 0x90
 8004cb4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f107 0210 	add.w	r2, r7, #16
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f002 fb63 	bl	8007398 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d90a      	bls.n	8004cee <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2282      	movs	r2, #130	; 0x82
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f002 fbc7 	bl	8007478 <SDMMC_CmdReadMultiBlock>
 8004cea:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004cec:	e009      	b.n	8004d02 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2281      	movs	r2, #129	; 0x81
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f002 fb9a 	bl	8007434 <SDMMC_CmdReadSingleBlock>
 8004d00:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d012      	beq.n	8004d2e <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0d      	ldr	r2, [pc, #52]	; (8004d44 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	431a      	orrs	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e002      	b.n	8004d34 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e000      	b.n	8004d34 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8004d32:	2302      	movs	r3, #2
  }
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3730      	adds	r7, #48	; 0x30
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	0800574f 	.word	0x0800574f
 8004d40:	080057c1 	.word	0x080057c1
 8004d44:	004005ff 	.word	0x004005ff
 8004d48:	4225858c 	.word	0x4225858c

08004d4c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08c      	sub	sp, #48	; 0x30
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0ce      	b.n	8004f12 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	f040 80c7 	bne.w	8004f10 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	441a      	add	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d907      	bls.n	8004da6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e0b5      	b.n	8004f12 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2203      	movs	r2, #3
 8004daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004dc4:	f043 0302 	orr.w	r3, r3, #2
 8004dc8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	4a53      	ldr	r2, [pc, #332]	; (8004f1c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8004dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	4a52      	ldr	r2, [pc, #328]	; (8004f20 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8004dd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	2200      	movs	r2, #0
 8004de0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d002      	beq.n	8004df0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	025b      	lsls	r3, r3, #9
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f002 faf9 	bl	80073f0 <SDMMC_CmdBlockLength>
 8004dfe:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00f      	beq.n	8004e26 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a46      	ldr	r2, [pc, #280]	; (8004f24 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004e0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e075      	b.n	8004f12 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d90a      	bls.n	8004e42 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	22a0      	movs	r2, #160	; 0xa0
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f002 fb61 	bl	8007500 <SDMMC_CmdWriteMultiBlock>
 8004e3e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004e40:	e009      	b.n	8004e56 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2290      	movs	r2, #144	; 0x90
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f002 fb34 	bl	80074bc <SDMMC_CmdWriteSingleBlock>
 8004e54:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d012      	beq.n	8004e82 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a30      	ldr	r2, [pc, #192]	; (8004f24 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e047      	b.n	8004f12 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3380      	adds	r3, #128	; 0x80
 8004e94:	461a      	mov	r2, r3
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	025b      	lsls	r3, r3, #9
 8004e9a:	089b      	lsrs	r3, r3, #2
 8004e9c:	f7fe fcb2 	bl	8003804 <HAL_DMA_Start_IT>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01c      	beq.n	8004ee0 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004eb4:	f023 0302 	bic.w	r3, r3, #2
 8004eb8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e018      	b.n	8004f12 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	025b      	lsls	r3, r3, #9
 8004eea:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004eec:	2390      	movs	r3, #144	; 0x90
 8004eee:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f107 0210 	add.w	r2, r7, #16
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f002 fa46 	bl	8007398 <SDIO_ConfigData>

      return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
  }
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3730      	adds	r7, #48	; 0x30
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	08005725 	.word	0x08005725
 8004f20:	080057c1 	.word	0x080057c1
 8004f24:	004005ff 	.word	0x004005ff
 8004f28:	4225858c 	.word	0x4225858c

08004f2c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_SD_IRQHandler+0x2e>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 ffd8 	bl	8005f08 <SD_Read_IT>
 8004f58:	e165      	b.n	8005226 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 808f 	beq.w	8005088 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f72:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004f82:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004f86:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0201 	bic.w	r2, r2, #1
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d039      	beq.n	8005016 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <HAL_SD_IRQHandler+0x8a>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d011      	beq.n	8004fda <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f002 fac2 	bl	8007544 <SDMMC_CmdStopTransfer>
 8004fc0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f92f 	bl	8005238 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f240 523a 	movw	r2, #1338	; 0x53a
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d104      	bne.n	8005006 <HAL_SD_IRQHandler+0xda>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f002 ff18 	bl	8007e3c <HAL_SD_RxCpltCallback>
 800500c:	e10b      	b.n	8005226 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f002 ff0a 	bl	8007e28 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005014:	e107      	b.n	8005226 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8102 	beq.w	8005226 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d011      	beq.n	8005050 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f002 fa87 	bl	8007544 <SDMMC_CmdStopTransfer>
 8005036:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d008      	beq.n	8005050 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f8f4 	bl	8005238 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 80e5 	bne.w	8005226 <HAL_SD_IRQHandler+0x2fa>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	f040 80df 	bne.w	8005226 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0208 	bic.w	r2, r2, #8
 8005076:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f002 fed1 	bl	8007e28 <HAL_SD_TxCpltCallback>
}
 8005086:	e0ce      	b.n	8005226 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <HAL_SD_IRQHandler+0x17c>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 ff82 	bl	8005faa <SD_Write_IT>
 80050a6:	e0be      	b.n	8005226 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ae:	f240 233a 	movw	r3, #570	; 0x23a
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80b6 	beq.w	8005226 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	f043 0202 	orr.w	r2, r3, #2
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	f043 0208 	orr.w	r2, r3, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	f043 0220 	orr.w	r2, r3, #32
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	f043 0210 	orr.w	r2, r3, #16
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f043 0208 	orr.w	r2, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f240 723a 	movw	r2, #1850	; 0x73a
 8005144:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005154:	f023 0302 	bic.w	r3, r3, #2
 8005158:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f002 f9f0 	bl	8007544 <SDMMC_CmdStopTransfer>
 8005164:	4602      	mov	r2, r0
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f855 	bl	8005238 <HAL_SD_ErrorCallback>
}
 800518e:	e04a      	b.n	8005226 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005196:	2b00      	cmp	r3, #0
 8005198:	d045      	beq.n	8005226 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <HAL_SD_IRQHandler+0x282>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d011      	beq.n	80051d2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	4a1f      	ldr	r2, [pc, #124]	; (8005230 <HAL_SD_IRQHandler+0x304>)
 80051b4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fb7a 	bl	80038b4 <HAL_DMA_Abort_IT>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d02f      	beq.n	8005226 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fb4a 	bl	8005864 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80051d0:	e029      	b.n	8005226 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <HAL_SD_IRQHandler+0x2ba>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d011      	beq.n	800520a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	4a12      	ldr	r2, [pc, #72]	; (8005234 <HAL_SD_IRQHandler+0x308>)
 80051ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fe fb5e 	bl	80038b4 <HAL_DMA_Abort_IT>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d013      	beq.n	8005226 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fb65 	bl	80058d2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005208:	e00d      	b.n	8005226 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f002 fdf8 	bl	8007e14 <HAL_SD_AbortCallback>
}
 8005224:	e7ff      	b.n	8005226 <HAL_SD_IRQHandler+0x2fa>
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	08005865 	.word	0x08005865
 8005234:	080058d3 	.word	0x080058d3

08005238 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800525a:	0f9b      	lsrs	r3, r3, #30
 800525c:	b2da      	uxtb	r2, r3
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005266:	0e9b      	lsrs	r3, r3, #26
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	b2da      	uxtb	r2, r3
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005278:	0e1b      	lsrs	r3, r3, #24
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	b2da      	uxtb	r2, r3
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800528a:	0c1b      	lsrs	r3, r3, #16
 800528c:	b2da      	uxtb	r2, r3
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005296:	0a1b      	lsrs	r3, r3, #8
 8005298:	b2da      	uxtb	r2, r3
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ac:	0d1b      	lsrs	r3, r3, #20
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b8:	0c1b      	lsrs	r3, r3, #16
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ca:	0bdb      	lsrs	r3, r3, #15
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052dc:	0b9b      	lsrs	r3, r3, #14
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ee:	0b5b      	lsrs	r3, r3, #13
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005300:	0b1b      	lsrs	r3, r3, #12
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	b2da      	uxtb	r2, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2200      	movs	r2, #0
 8005312:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005318:	2b00      	cmp	r3, #0
 800531a:	d163      	bne.n	80053e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005320:	009a      	lsls	r2, r3, #2
 8005322:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005326:	4013      	ands	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800532c:	0f92      	lsrs	r2, r2, #30
 800532e:	431a      	orrs	r2, r3
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005338:	0edb      	lsrs	r3, r3, #27
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	b2da      	uxtb	r2, r3
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534a:	0e1b      	lsrs	r3, r3, #24
 800534c:	b2db      	uxtb	r3, r3
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	b2da      	uxtb	r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800535c:	0d5b      	lsrs	r3, r3, #21
 800535e:	b2db      	uxtb	r3, r3
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	b2da      	uxtb	r2, r3
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800536e:	0c9b      	lsrs	r3, r3, #18
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	b2da      	uxtb	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005380:	0bdb      	lsrs	r3, r3, #15
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	b2da      	uxtb	r2, r3
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	7e1b      	ldrb	r3, [r3, #24]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	3302      	adds	r3, #2
 80053a4:	2201      	movs	r2, #1
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80053ae:	fb02 f203 	mul.w	r2, r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	7a1b      	ldrb	r3, [r3, #8]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	2201      	movs	r2, #1
 80053c2:	409a      	lsls	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80053d0:	0a52      	lsrs	r2, r2, #9
 80053d2:	fb02 f203 	mul.w	r2, r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e0:	661a      	str	r2, [r3, #96]	; 0x60
 80053e2:	e031      	b.n	8005448 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d11d      	bne.n	8005428 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f0:	041b      	lsls	r3, r3, #16
 80053f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	431a      	orrs	r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	3301      	adds	r3, #1
 8005408:	029a      	lsls	r2, r3, #10
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	661a      	str	r2, [r3, #96]	; 0x60
 8005426:	e00f      	b.n	8005448 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a58      	ldr	r2, [pc, #352]	; (8005590 <HAL_SD_GetCardCSD+0x344>)
 800542e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e09d      	b.n	8005584 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544c:	0b9b      	lsrs	r3, r3, #14
 800544e:	b2db      	uxtb	r3, r3
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	b2da      	uxtb	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800545e:	09db      	lsrs	r3, r3, #7
 8005460:	b2db      	uxtb	r3, r3
 8005462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005466:	b2da      	uxtb	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005476:	b2da      	uxtb	r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005480:	0fdb      	lsrs	r3, r3, #31
 8005482:	b2da      	uxtb	r2, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548c:	0f5b      	lsrs	r3, r3, #29
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	b2da      	uxtb	r2, r3
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	0e9b      	lsrs	r3, r3, #26
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b0:	0d9b      	lsrs	r3, r3, #22
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	0d5b      	lsrs	r3, r3, #21
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f2:	0bdb      	lsrs	r3, r3, #15
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	0b9b      	lsrs	r3, r3, #14
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	b2da      	uxtb	r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	0b5b      	lsrs	r3, r3, #13
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	b2da      	uxtb	r2, r3
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552e:	0b1b      	lsrs	r3, r3, #12
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	b2da      	uxtb	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	0a9b      	lsrs	r3, r3, #10
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	b2da      	uxtb	r2, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005556:	0a1b      	lsrs	r3, r3, #8
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	b2da      	uxtb	r2, r3
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005572:	b2da      	uxtb	r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	004005ff 	.word	0x004005ff

08005594 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80055ec:	b5b0      	push	{r4, r5, r7, lr}
 80055ee:	b08e      	sub	sp, #56	; 0x38
 80055f0:	af04      	add	r7, sp, #16
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2203      	movs	r2, #3
 80055fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	2b03      	cmp	r3, #3
 8005604:	d02e      	beq.n	8005664 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560c:	d106      	bne.n	800561c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	639a      	str	r2, [r3, #56]	; 0x38
 800561a:	e029      	b.n	8005670 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005622:	d10a      	bne.n	800563a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fb0f 	bl	8005c48 <SD_WideBus_Enable>
 800562a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
 8005638:	e01a      	b.n	8005670 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fb4c 	bl	8005cde <SD_WideBus_Disable>
 8005646:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	639a      	str	r2, [r3, #56]	; 0x38
 8005654:	e00c      	b.n	8005670 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	639a      	str	r2, [r3, #56]	; 0x38
 8005662:	e005      	b.n	8005670 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	2b00      	cmp	r3, #0
 8005676:	d009      	beq.n	800568c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a18      	ldr	r2, [pc, #96]	; (80056e0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800567e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e024      	b.n	80056d6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681d      	ldr	r5, [r3, #0]
 80056b2:	466c      	mov	r4, sp
 80056b4:	f107 0318 	add.w	r3, r7, #24
 80056b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80056c0:	f107 030c 	add.w	r3, r7, #12
 80056c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056c6:	4628      	mov	r0, r5
 80056c8:	f001 fdb6 	bl	8007238 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3728      	adds	r7, #40	; 0x28
 80056da:	46bd      	mov	sp, r7
 80056dc:	bdb0      	pop	{r4, r5, r7, pc}
 80056de:	bf00      	nop
 80056e0:	004005ff 	.word	0x004005ff

080056e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80056f0:	f107 030c 	add.w	r3, r7, #12
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fa7e 	bl	8005bf8 <SD_SendStatus>
 80056fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	0a5b      	lsrs	r3, r3, #9
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800571a:	693b      	ldr	r3, [r7, #16]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005740:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	2b82      	cmp	r3, #130	; 0x82
 8005762:	d111      	bne.n	8005788 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f001 feeb 	bl	8007544 <SDMMC_CmdStopTransfer>
 800576e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	431a      	orrs	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff fd58 	bl	8005238 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0208 	bic.w	r2, r2, #8
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f240 523a 	movw	r2, #1338	; 0x53a
 80057a0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f002 fb43 	bl	8007e3c <HAL_SD_RxCpltCallback>
#endif
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fe fa1c 	bl	8003c0c <HAL_DMA_GetError>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d03e      	beq.n	8005858 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d002      	beq.n	80057f6 <SD_DMAError+0x36>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d12d      	bne.n	8005852 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a19      	ldr	r2, [pc, #100]	; (8005860 <SD_DMAError+0xa0>)
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800580c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800581a:	6978      	ldr	r0, [r7, #20]
 800581c:	f7ff ff62 	bl	80056e4 <HAL_SD_GetCardState>
 8005820:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b06      	cmp	r3, #6
 8005826:	d002      	beq.n	800582e <SD_DMAError+0x6e>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b05      	cmp	r3, #5
 800582c:	d10a      	bne.n	8005844 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f001 fe86 	bl	8007544 <SDMMC_CmdStopTransfer>
 8005838:	4602      	mov	r2, r0
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	431a      	orrs	r2, r3
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2200      	movs	r2, #0
 8005850:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f7ff fcf0 	bl	8005238 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	004005ff 	.word	0x004005ff

08005864 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f240 523a 	movw	r2, #1338	; 0x53a
 800587a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff ff31 	bl	80056e4 <HAL_SD_GetCardState>
 8005882:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b06      	cmp	r3, #6
 8005896:	d002      	beq.n	800589e <SD_DMATxAbort+0x3a>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b05      	cmp	r3, #5
 800589c:	d10a      	bne.n	80058b4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 fe4e 	bl	8007544 <SDMMC_CmdStopTransfer>
 80058a8:	4602      	mov	r2, r0
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	431a      	orrs	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d103      	bne.n	80058c4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f002 faa9 	bl	8007e14 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80058c2:	e002      	b.n	80058ca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff fcb7 	bl	8005238 <HAL_SD_ErrorCallback>
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f240 523a 	movw	r2, #1338	; 0x53a
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff fefa 	bl	80056e4 <HAL_SD_GetCardState>
 80058f0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b06      	cmp	r3, #6
 8005904:	d002      	beq.n	800590c <SD_DMARxAbort+0x3a>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b05      	cmp	r3, #5
 800590a:	d10a      	bne.n	8005922 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f001 fe17 	bl	8007544 <SDMMC_CmdStopTransfer>
 8005916:	4602      	mov	r2, r0
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	431a      	orrs	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f002 fa72 	bl	8007e14 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005930:	e002      	b.n	8005938 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff fc80 	bl	8005238 <HAL_SD_ErrorCallback>
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005940:	b5b0      	push	{r4, r5, r7, lr}
 8005942:	b094      	sub	sp, #80	; 0x50
 8005944:	af04      	add	r7, sp, #16
 8005946:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005948:	2301      	movs	r3, #1
 800594a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	f001 fcc9 	bl	80072e8 <SDIO_GetPowerState>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800595c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005960:	e0b7      	b.n	8005ad2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	2b03      	cmp	r3, #3
 8005968:	d02f      	beq.n	80059ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f001 fef2 	bl	8007758 <SDMMC_CmdSendCID>
 8005974:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <SD_InitCard+0x40>
    {
      return errorstate;
 800597c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597e:	e0a8      	b.n	8005ad2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2100      	movs	r1, #0
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fcf3 	bl	8007372 <SDIO_GetResponse>
 800598c:	4602      	mov	r2, r0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2104      	movs	r1, #4
 8005998:	4618      	mov	r0, r3
 800599a:	f001 fcea 	bl	8007372 <SDIO_GetResponse>
 800599e:	4602      	mov	r2, r0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2108      	movs	r1, #8
 80059aa:	4618      	mov	r0, r3
 80059ac:	f001 fce1 	bl	8007372 <SDIO_GetResponse>
 80059b0:	4602      	mov	r2, r0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	210c      	movs	r1, #12
 80059bc:	4618      	mov	r0, r3
 80059be:	f001 fcd8 	bl	8007372 <SDIO_GetResponse>
 80059c2:	4602      	mov	r2, r0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d00d      	beq.n	80059ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f107 020e 	add.w	r2, r7, #14
 80059da:	4611      	mov	r1, r2
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 fef8 	bl	80077d2 <SDMMC_CmdSetRelAdd>
 80059e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <SD_InitCard+0xae>
    {
      return errorstate;
 80059ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ec:	e071      	b.n	8005ad2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d036      	beq.n	8005a64 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80059f6:	89fb      	ldrh	r3, [r7, #14]
 80059f8:	461a      	mov	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a06:	041b      	lsls	r3, r3, #16
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	f001 fec2 	bl	8007794 <SDMMC_CmdSendCSD>
 8005a10:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1a:	e05a      	b.n	8005ad2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 fca5 	bl	8007372 <SDIO_GetResponse>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2104      	movs	r1, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f001 fc9c 	bl	8007372 <SDIO_GetResponse>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2108      	movs	r1, #8
 8005a46:	4618      	mov	r0, r3
 8005a48:	f001 fc93 	bl	8007372 <SDIO_GetResponse>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	210c      	movs	r1, #12
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 fc8a 	bl	8007372 <SDIO_GetResponse>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2104      	movs	r1, #4
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f001 fc81 	bl	8007372 <SDIO_GetResponse>
 8005a70:	4603      	mov	r3, r0
 8005a72:	0d1a      	lsrs	r2, r3, #20
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005a78:	f107 0310 	add.w	r3, r7, #16
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff fbe4 	bl	800524c <HAL_SD_GetCardCSD>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a8e:	e020      	b.n	8005ad2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a98:	041b      	lsls	r3, r3, #16
 8005a9a:	f04f 0400 	mov.w	r4, #0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	4623      	mov	r3, r4
 8005aa2:	4608      	mov	r0, r1
 8005aa4:	f001 fd70 	bl	8007588 <SDMMC_CmdSelDesel>
 8005aa8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <SD_InitCard+0x174>
  {
    return errorstate;
 8005ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab2:	e00e      	b.n	8005ad2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681d      	ldr	r5, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	466c      	mov	r4, sp
 8005abc:	f103 0210 	add.w	r2, r3, #16
 8005ac0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005aca:	4628      	mov	r0, r5
 8005acc:	f001 fbb4 	bl	8007238 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3740      	adds	r7, #64	; 0x40
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005adc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 fd6a 	bl	80075ce <SDMMC_CmdGoIdleState>
 8005afa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	e072      	b.n	8005bec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f001 fd7d 	bl	800760a <SDMMC_CmdOperCond>
 8005b10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00d      	beq.n	8005b34 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 fd53 	bl	80075ce <SDMMC_CmdGoIdleState>
 8005b28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d004      	beq.n	8005b3a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	e05b      	b.n	8005bec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d137      	bne.n	8005bb2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f001 fd7d 	bl	8007648 <SDMMC_CmdAppCommand>
 8005b4e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d02d      	beq.n	8005bb2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b5a:	e047      	b.n	8005bec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2100      	movs	r1, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fd70 	bl	8007648 <SDMMC_CmdAppCommand>
 8005b68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <SD_PowerON+0x98>
    {
      return errorstate;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	e03b      	b.n	8005bec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	491e      	ldr	r1, [pc, #120]	; (8005bf4 <SD_PowerON+0x118>)
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 fd86 	bl	800768c <SDMMC_CmdAppOperCommand>
 8005b80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b8c:	e02e      	b.n	8005bec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 fbec 	bl	8007372 <SDIO_GetResponse>
 8005b9a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	0fdb      	lsrs	r3, r3, #31
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <SD_PowerON+0xcc>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <SD_PowerON+0xce>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	613b      	str	r3, [r7, #16]

    count++;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d802      	bhi.n	8005bc2 <SD_PowerON+0xe6>
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0cc      	beq.n	8005b5c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d902      	bls.n	8005bd2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bd0:	e00c      	b.n	8005bec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	645a      	str	r2, [r3, #68]	; 0x44
 8005be2:	e002      	b.n	8005bea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	c1100000 	.word	0xc1100000

08005bf8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005c08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c0c:	e018      	b.n	8005c40 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c16:	041b      	lsls	r3, r3, #16
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f001 fdfa 	bl	8007814 <SDMMC_CmdSendStatus>
 8005c20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	e009      	b.n	8005c40 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2100      	movs	r1, #0
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 fb9d 	bl	8007372 <SDIO_GetResponse>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 fb87 	bl	8007372 <SDIO_GetResponse>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c6e:	d102      	bne.n	8005c76 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c74:	e02f      	b.n	8005cd6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c76:	f107 030c 	add.w	r3, r7, #12
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f879 	bl	8005d74 <SD_FindSCR>
 8005c82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	e023      	b.n	8005cd6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01c      	beq.n	8005cd2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca0:	041b      	lsls	r3, r3, #16
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f001 fccf 	bl	8007648 <SDMMC_CmdAppCommand>
 8005caa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	e00f      	b.n	8005cd6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2102      	movs	r1, #2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f001 fd08 	bl	80076d2 <SDMMC_CmdBusWidth>
 8005cc2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	e003      	b.n	8005cd6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e001      	b.n	8005cd6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005cd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b086      	sub	sp, #24
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 fb3c 	bl	8007372 <SDIO_GetResponse>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d04:	d102      	bne.n	8005d0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d0a:	e02f      	b.n	8005d6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005d0c:	f107 030c 	add.w	r3, r7, #12
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f82e 	bl	8005d74 <SD_FindSCR>
 8005d18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	e023      	b.n	8005d6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01c      	beq.n	8005d68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d36:	041b      	lsls	r3, r3, #16
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f001 fc84 	bl	8007648 <SDMMC_CmdAppCommand>
 8005d40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	e00f      	b.n	8005d6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2100      	movs	r1, #0
 8005d52:	4618      	mov	r0, r3
 8005d54:	f001 fcbd 	bl	80076d2 <SDMMC_CmdBusWidth>
 8005d58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	e003      	b.n	8005d6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005d64:	2300      	movs	r3, #0
 8005d66:	e001      	b.n	8005d6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005d74:	b590      	push	{r4, r7, lr}
 8005d76:	b08f      	sub	sp, #60	; 0x3c
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d7e:	f7fc ff69 	bl	8002c54 <HAL_GetTick>
 8005d82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60bb      	str	r3, [r7, #8]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2108      	movs	r1, #8
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fb28 	bl	80073f0 <SDMMC_CmdBlockLength>
 8005da0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <SD_FindSCR+0x38>
  {
    return errorstate;
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	e0a9      	b.n	8005f00 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db4:	041b      	lsls	r3, r3, #16
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f001 fc45 	bl	8007648 <SDMMC_CmdAppCommand>
 8005dbe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <SD_FindSCR+0x56>
  {
    return errorstate;
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	e09a      	b.n	8005f00 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
 8005dce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005dd4:	2330      	movs	r3, #48	; 0x30
 8005dd6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f107 0210 	add.w	r2, r7, #16
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fad2 	bl	8007398 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 fc8c 	bl	8007716 <SDMMC_CmdSendSCR>
 8005dfe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d022      	beq.n	8005e4c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	e07a      	b.n	8005f00 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00e      	beq.n	8005e36 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6819      	ldr	r1, [r3, #0]
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	f107 0208 	add.w	r2, r7, #8
 8005e24:	18d4      	adds	r4, r2, r3
 8005e26:	4608      	mov	r0, r1
 8005e28:	f001 fa31 	bl	800728e <SDIO_ReadFIFO>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	6023      	str	r3, [r4, #0]
      index++;
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	3301      	adds	r3, #1
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e36:	f7fc ff0d 	bl	8002c54 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d102      	bne.n	8005e4c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005e46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e4a:	e059      	b.n	8005f00 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e52:	f240 432a 	movw	r3, #1066	; 0x42a
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0d6      	beq.n	8005e0a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2208      	movs	r2, #8
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e72:	2308      	movs	r3, #8
 8005e74:	e044      	b.n	8005f00 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e037      	b.n	8005f00 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005ea6:	2320      	movs	r3, #32
 8005ea8:	e02a      	b.n	8005f00 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f240 523a 	movw	r2, #1338	; 0x53a
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	061a      	lsls	r2, r3, #24
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ec0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	0a1b      	lsrs	r3, r3, #8
 8005ec6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005eca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	0e1b      	lsrs	r3, r3, #24
 8005ed0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	601a      	str	r2, [r3, #0]
    scr++;
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	3304      	adds	r3, #4
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	061a      	lsls	r2, r3, #24
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ee8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	0a1b      	lsrs	r3, r3, #8
 8005eee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ef2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	0e1b      	lsrs	r3, r3, #24
 8005ef8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	373c      	adds	r7, #60	; 0x3c
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd90      	pop	{r4, r7, pc}

08005f08 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d03f      	beq.n	8005fa2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	e033      	b.n	8005f90 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 f9ae 	bl	800728e <SDIO_ReadFIFO>
 8005f32:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	0a1b      	lsrs	r3, r3, #8
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	0c1b      	lsrs	r3, r3, #16
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	0e1b      	lsrs	r3, r3, #24
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3301      	adds	r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2b07      	cmp	r3, #7
 8005f94:	d9c8      	bls.n	8005f28 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b086      	sub	sp, #24
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d043      	beq.n	800604c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	e037      	b.n	800603a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	021a      	lsls	r2, r3, #8
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	041a      	lsls	r2, r3, #16
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3301      	adds	r3, #1
 8006004:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3b01      	subs	r3, #1
 800600a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	061a      	lsls	r2, r3, #24
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4313      	orrs	r3, r2
 8006016:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	3b01      	subs	r3, #1
 8006022:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f107 0208 	add.w	r2, r7, #8
 800602c:	4611      	mov	r1, r2
 800602e:	4618      	mov	r0, r3
 8006030:	f001 f93a 	bl	80072a8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	3301      	adds	r3, #1
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b07      	cmp	r3, #7
 800603e:	d9c4      	bls.n	8005fca <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800604c:	bf00      	nop
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e056      	b.n	8006114 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fc fb65 	bl	8002750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	ea42 0103 	orr.w	r1, r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	0c1b      	lsrs	r3, r3, #16
 80060e4:	f003 0104 	and.w	r1, r3, #4
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69da      	ldr	r2, [r3, #28]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006102:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	4613      	mov	r3, r2
 800612a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_SPI_Transmit+0x22>
 800613a:	2302      	movs	r3, #2
 800613c:	e11e      	b.n	800637c <HAL_SPI_Transmit+0x260>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006146:	f7fc fd85 	bl	8002c54 <HAL_GetTick>
 800614a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	d002      	beq.n	8006162 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800615c:	2302      	movs	r3, #2
 800615e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006160:	e103      	b.n	800636a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_SPI_Transmit+0x52>
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006172:	e0fa      	b.n	800636a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2203      	movs	r2, #3
 8006178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	88fa      	ldrh	r2, [r7, #6]
 800618c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	88fa      	ldrh	r2, [r7, #6]
 8006192:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ba:	d107      	bne.n	80061cc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b40      	cmp	r3, #64	; 0x40
 80061d8:	d007      	beq.n	80061ea <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f2:	d14b      	bne.n	800628c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <HAL_SPI_Transmit+0xe6>
 80061fc:	8afb      	ldrh	r3, [r7, #22]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d13e      	bne.n	8006280 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006206:	881a      	ldrh	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	1c9a      	adds	r2, r3, #2
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800621c:	b29b      	uxth	r3, r3
 800621e:	3b01      	subs	r3, #1
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006226:	e02b      	b.n	8006280 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b02      	cmp	r3, #2
 8006234:	d112      	bne.n	800625c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	881a      	ldrh	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	86da      	strh	r2, [r3, #54]	; 0x36
 800625a:	e011      	b.n	8006280 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800625c:	f7fc fcfa 	bl	8002c54 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d803      	bhi.n	8006274 <HAL_SPI_Transmit+0x158>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d102      	bne.n	800627a <HAL_SPI_Transmit+0x15e>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800627e:	e074      	b.n	800636a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1ce      	bne.n	8006228 <HAL_SPI_Transmit+0x10c>
 800628a:	e04c      	b.n	8006326 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_SPI_Transmit+0x17e>
 8006294:	8afb      	ldrh	r3, [r7, #22]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d140      	bne.n	800631c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062c0:	e02c      	b.n	800631c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d113      	bne.n	80062f8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	7812      	ldrb	r2, [r2, #0]
 80062dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80062f6:	e011      	b.n	800631c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062f8:	f7fc fcac 	bl	8002c54 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d803      	bhi.n	8006310 <HAL_SPI_Transmit+0x1f4>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d102      	bne.n	8006316 <HAL_SPI_Transmit+0x1fa>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	77fb      	strb	r3, [r7, #31]
          goto error;
 800631a:	e026      	b.n	800636a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1cd      	bne.n	80062c2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 fba4 	bl	8006a78 <SPI_EndRxTxTransaction>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006344:	2300      	movs	r3, #0
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e000      	b.n	800636a <HAL_SPI_Transmit+0x24e>
  }

error:
 8006368:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800637a:	7ffb      	ldrb	r3, [r7, #31]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	4613      	mov	r3, r2
 8006392:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063a0:	d112      	bne.n	80063c8 <HAL_SPI_Receive+0x44>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10e      	bne.n	80063c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2204      	movs	r2, #4
 80063ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f8e9 	bl	8006596 <HAL_SPI_TransmitReceive>
 80063c4:	4603      	mov	r3, r0
 80063c6:	e0e2      	b.n	800658e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_SPI_Receive+0x52>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e0db      	b.n	800658e <HAL_SPI_Receive+0x20a>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063de:	f7fc fc39 	bl	8002c54 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d002      	beq.n	80063f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80063f0:	2302      	movs	r3, #2
 80063f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063f4:	e0c2      	b.n	800657c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HAL_SPI_Receive+0x7e>
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006406:	e0b9      	b.n	800657c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2204      	movs	r2, #4
 800640c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	88fa      	ldrh	r2, [r7, #6]
 8006426:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800644e:	d107      	bne.n	8006460 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800645e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	d007      	beq.n	800647e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800647c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d162      	bne.n	800654c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006486:	e02e      	b.n	80064e6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b01      	cmp	r3, #1
 8006494:	d115      	bne.n	80064c2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f103 020c 	add.w	r2, r3, #12
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	7812      	ldrb	r2, [r2, #0]
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064c0:	e011      	b.n	80064e6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064c2:	f7fc fbc7 	bl	8002c54 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d803      	bhi.n	80064da <HAL_SPI_Receive+0x156>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d102      	bne.n	80064e0 <HAL_SPI_Receive+0x15c>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064e4:	e04a      	b.n	800657c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1cb      	bne.n	8006488 <HAL_SPI_Receive+0x104>
 80064f0:	e031      	b.n	8006556 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d113      	bne.n	8006528 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	b292      	uxth	r2, r2
 800650c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	1c9a      	adds	r2, r3, #2
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006526:	e011      	b.n	800654c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006528:	f7fc fb94 	bl	8002c54 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d803      	bhi.n	8006540 <HAL_SPI_Receive+0x1bc>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653e:	d102      	bne.n	8006546 <HAL_SPI_Receive+0x1c2>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d102      	bne.n	800654c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	75fb      	strb	r3, [r7, #23]
          goto error;
 800654a:	e017      	b.n	800657c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1cd      	bne.n	80064f2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fa27 	bl	80069ae <SPI_EndRxTransaction>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	75fb      	strb	r3, [r7, #23]
 8006578:	e000      	b.n	800657c <HAL_SPI_Receive+0x1f8>
  }

error :
 800657a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800658c:	7dfb      	ldrb	r3, [r7, #23]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b08c      	sub	sp, #48	; 0x30
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	607a      	str	r2, [r7, #4]
 80065a2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065a4:	2301      	movs	r3, #1
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_SPI_TransmitReceive+0x26>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e18a      	b.n	80068d2 <HAL_SPI_TransmitReceive+0x33c>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065c4:	f7fc fb46 	bl	8002c54 <HAL_GetTick>
 80065c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065da:	887b      	ldrh	r3, [r7, #2]
 80065dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d00f      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x70>
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ec:	d107      	bne.n	80065fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d103      	bne.n	80065fe <HAL_SPI_TransmitReceive+0x68>
 80065f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d003      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065fe:	2302      	movs	r3, #2
 8006600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006604:	e15b      	b.n	80068be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <HAL_SPI_TransmitReceive+0x82>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_SPI_TransmitReceive+0x82>
 8006612:	887b      	ldrh	r3, [r7, #2]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d103      	bne.n	8006620 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800661e:	e14e      	b.n	80068be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b04      	cmp	r3, #4
 800662a:	d003      	beq.n	8006634 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2205      	movs	r2, #5
 8006630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	887a      	ldrh	r2, [r7, #2]
 8006644:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	887a      	ldrh	r2, [r7, #2]
 800664a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	887a      	ldrh	r2, [r7, #2]
 8006656:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	887a      	ldrh	r2, [r7, #2]
 800665c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d007      	beq.n	8006688 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006686:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006690:	d178      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_SPI_TransmitReceive+0x10a>
 800669a:	8b7b      	ldrh	r3, [r7, #26]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d166      	bne.n	800676e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	881a      	ldrh	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	1c9a      	adds	r2, r3, #2
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066c4:	e053      	b.n	800676e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d11b      	bne.n	800670c <HAL_SPI_TransmitReceive+0x176>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d016      	beq.n	800670c <HAL_SPI_TransmitReceive+0x176>
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d113      	bne.n	800670c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	881a      	ldrh	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	1c9a      	adds	r2, r3, #2
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b01      	cmp	r3, #1
 8006718:	d119      	bne.n	800674e <HAL_SPI_TransmitReceive+0x1b8>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d014      	beq.n	800674e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	b292      	uxth	r2, r2
 8006730:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	1c9a      	adds	r2, r3, #2
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800674a:	2301      	movs	r3, #1
 800674c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800674e:	f7fc fa81 	bl	8002c54 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800675a:	429a      	cmp	r2, r3
 800675c:	d807      	bhi.n	800676e <HAL_SPI_TransmitReceive+0x1d8>
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d003      	beq.n	800676e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800676c:	e0a7      	b.n	80068be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006772:	b29b      	uxth	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1a6      	bne.n	80066c6 <HAL_SPI_TransmitReceive+0x130>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1a1      	bne.n	80066c6 <HAL_SPI_TransmitReceive+0x130>
 8006782:	e07c      	b.n	800687e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <HAL_SPI_TransmitReceive+0x1fc>
 800678c:	8b7b      	ldrh	r3, [r7, #26]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d16b      	bne.n	800686a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	330c      	adds	r3, #12
 800679c:	7812      	ldrb	r2, [r2, #0]
 800679e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067b8:	e057      	b.n	800686a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d11c      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x26c>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d017      	beq.n	8006802 <HAL_SPI_TransmitReceive+0x26c>
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d114      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	7812      	ldrb	r2, [r2, #0]
 80067e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b01      	cmp	r3, #1
 800680e:	d119      	bne.n	8006844 <HAL_SPI_TransmitReceive+0x2ae>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d014      	beq.n	8006844 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006840:	2301      	movs	r3, #1
 8006842:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006844:	f7fc fa06 	bl	8002c54 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006850:	429a      	cmp	r2, r3
 8006852:	d803      	bhi.n	800685c <HAL_SPI_TransmitReceive+0x2c6>
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d102      	bne.n	8006862 <HAL_SPI_TransmitReceive+0x2cc>
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	2b00      	cmp	r3, #0
 8006860:	d103      	bne.n	800686a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006868:	e029      	b.n	80068be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1a2      	bne.n	80067ba <HAL_SPI_TransmitReceive+0x224>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d19d      	bne.n	80067ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800687e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 f8f8 	bl	8006a78 <SPI_EndRxTxTransaction>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d006      	beq.n	800689c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2220      	movs	r2, #32
 8006898:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800689a:	e010      	b.n	80068be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10b      	bne.n	80068bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	e000      	b.n	80068be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80068bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3730      	adds	r7, #48	; 0x30
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	603b      	str	r3, [r7, #0]
 80068e6:	4613      	mov	r3, r2
 80068e8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ea:	e04c      	b.n	8006986 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f2:	d048      	beq.n	8006986 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80068f4:	f7fc f9ae 	bl	8002c54 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d902      	bls.n	800690a <SPI_WaitFlagStateUntilTimeout+0x30>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d13d      	bne.n	8006986 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006922:	d111      	bne.n	8006948 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692c:	d004      	beq.n	8006938 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006936:	d107      	bne.n	8006948 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006950:	d10f      	bne.n	8006972 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006970:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e00f      	b.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4013      	ands	r3, r2
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	bf0c      	ite	eq
 8006996:	2301      	moveq	r3, #1
 8006998:	2300      	movne	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	461a      	mov	r2, r3
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d1a3      	bne.n	80068ec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b086      	sub	sp, #24
 80069b2:	af02      	add	r7, sp, #8
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c2:	d111      	bne.n	80069e8 <SPI_EndRxTransaction+0x3a>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069cc:	d004      	beq.n	80069d8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d6:	d107      	bne.n	80069e8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f0:	d12a      	bne.n	8006a48 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069fa:	d012      	beq.n	8006a22 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2200      	movs	r2, #0
 8006a04:	2180      	movs	r1, #128	; 0x80
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff ff67 	bl	80068da <SPI_WaitFlagStateUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d02d      	beq.n	8006a6e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a16:	f043 0220 	orr.w	r2, r3, #32
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e026      	b.n	8006a70 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7ff ff54 	bl	80068da <SPI_WaitFlagStateUntilTimeout>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01a      	beq.n	8006a6e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3c:	f043 0220 	orr.w	r2, r3, #32
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e013      	b.n	8006a70 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2101      	movs	r1, #1
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7ff ff41 	bl	80068da <SPI_WaitFlagStateUntilTimeout>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	f043 0220 	orr.w	r2, r3, #32
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e000      	b.n	8006a70 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a84:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <SPI_EndRxTxTransaction+0x7c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <SPI_EndRxTxTransaction+0x80>)
 8006a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8e:	0d5b      	lsrs	r3, r3, #21
 8006a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a94:	fb02 f303 	mul.w	r3, r2, r3
 8006a98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aa2:	d112      	bne.n	8006aca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7ff ff13 	bl	80068da <SPI_WaitFlagStateUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d016      	beq.n	8006ae8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e00f      	b.n	8006aea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae0:	2b80      	cmp	r3, #128	; 0x80
 8006ae2:	d0f2      	beq.n	8006aca <SPI_EndRxTxTransaction+0x52>
 8006ae4:	e000      	b.n	8006ae8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ae6:	bf00      	nop
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000078 	.word	0x20000078
 8006af8:	165e9f81 	.word	0x165e9f81

08006afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e01d      	b.n	8006b4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fb fea2 	bl	800286c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f000 fa26 	bl	8006f8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0201 	orr.w	r2, r2, #1
 8006b68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 0307 	and.w	r3, r3, #7
 8006b74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b06      	cmp	r3, #6
 8006b7a:	d007      	beq.n	8006b8c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0201 	orr.w	r2, r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e083      	b.n	8006cb6 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fb fe0c 	bl	80027e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bde:	f023 0307 	bic.w	r3, r3, #7
 8006be2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f000 f9cc 	bl	8006f8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1c:	f023 0303 	bic.w	r3, r3, #3
 8006c20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006c3a:	f023 030c 	bic.w	r3, r3, #12
 8006c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	4313      	orrs	r3, r2
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	011a      	lsls	r2, r3, #4
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	031b      	lsls	r3, r3, #12
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c78:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c80:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_TIM_Encoder_Start+0x16>
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d008      	beq.n	8006ce4 <HAL_TIM_Encoder_Start+0x26>
 8006cd2:	e00f      	b.n	8006cf4 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	2100      	movs	r1, #0
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 f9f5 	bl	80070cc <TIM_CCxChannelCmd>
      break;
 8006ce2:	e016      	b.n	8006d12 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	2104      	movs	r1, #4
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 f9ed 	bl	80070cc <TIM_CCxChannelCmd>
      break;
 8006cf2:	e00e      	b.n	8006d12 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 f9e5 	bl	80070cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2201      	movs	r2, #1
 8006d08:	2104      	movs	r1, #4
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f9de 	bl	80070cc <TIM_CCxChannelCmd>
      break;
 8006d10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0201 	orr.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d122      	bne.n	8006d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d11b      	bne.n	8006d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f06f 0202 	mvn.w	r2, #2
 8006d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f8ee 	bl	8006f50 <HAL_TIM_IC_CaptureCallback>
 8006d74:	e005      	b.n	8006d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8e0 	bl	8006f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f8f1 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d122      	bne.n	8006ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d11b      	bne.n	8006ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0204 	mvn.w	r2, #4
 8006dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2202      	movs	r2, #2
 8006db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f8c4 	bl	8006f50 <HAL_TIM_IC_CaptureCallback>
 8006dc8:	e005      	b.n	8006dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f8b6 	bl	8006f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8c7 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b08      	cmp	r3, #8
 8006de8:	d122      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f003 0308 	and.w	r3, r3, #8
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d11b      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f06f 0208 	mvn.w	r2, #8
 8006e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2204      	movs	r2, #4
 8006e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f89a 	bl	8006f50 <HAL_TIM_IC_CaptureCallback>
 8006e1c:	e005      	b.n	8006e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f88c 	bl	8006f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f89d 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	d122      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f003 0310 	and.w	r3, r3, #16
 8006e48:	2b10      	cmp	r3, #16
 8006e4a:	d11b      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f06f 0210 	mvn.w	r2, #16
 8006e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2208      	movs	r2, #8
 8006e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f870 	bl	8006f50 <HAL_TIM_IC_CaptureCallback>
 8006e70:	e005      	b.n	8006e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f862 	bl	8006f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f873 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d10e      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d107      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f06f 0201 	mvn.w	r2, #1
 8006ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fa fbe2 	bl	8001674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eba:	2b80      	cmp	r3, #128	; 0x80
 8006ebc:	d10e      	bne.n	8006edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec8:	2b80      	cmp	r3, #128	; 0x80
 8006eca:	d107      	bne.n	8006edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f9a4 	bl	8007224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee6:	2b40      	cmp	r3, #64	; 0x40
 8006ee8:	d10e      	bne.n	8006f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef4:	2b40      	cmp	r3, #64	; 0x40
 8006ef6:	d107      	bne.n	8006f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f838 	bl	8006f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d10e      	bne.n	8006f34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0320 	and.w	r3, r3, #32
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d107      	bne.n	8006f34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0220 	mvn.w	r2, #32
 8006f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f96e 	bl	8007210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a40      	ldr	r2, [pc, #256]	; (80070a0 <TIM_Base_SetConfig+0x114>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d013      	beq.n	8006fcc <TIM_Base_SetConfig+0x40>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006faa:	d00f      	beq.n	8006fcc <TIM_Base_SetConfig+0x40>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a3d      	ldr	r2, [pc, #244]	; (80070a4 <TIM_Base_SetConfig+0x118>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00b      	beq.n	8006fcc <TIM_Base_SetConfig+0x40>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a3c      	ldr	r2, [pc, #240]	; (80070a8 <TIM_Base_SetConfig+0x11c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d007      	beq.n	8006fcc <TIM_Base_SetConfig+0x40>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a3b      	ldr	r2, [pc, #236]	; (80070ac <TIM_Base_SetConfig+0x120>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_Base_SetConfig+0x40>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a3a      	ldr	r2, [pc, #232]	; (80070b0 <TIM_Base_SetConfig+0x124>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d108      	bne.n	8006fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a2f      	ldr	r2, [pc, #188]	; (80070a0 <TIM_Base_SetConfig+0x114>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d02b      	beq.n	800703e <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d027      	beq.n	800703e <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a2c      	ldr	r2, [pc, #176]	; (80070a4 <TIM_Base_SetConfig+0x118>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d023      	beq.n	800703e <TIM_Base_SetConfig+0xb2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a2b      	ldr	r2, [pc, #172]	; (80070a8 <TIM_Base_SetConfig+0x11c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d01f      	beq.n	800703e <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a2a      	ldr	r2, [pc, #168]	; (80070ac <TIM_Base_SetConfig+0x120>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d01b      	beq.n	800703e <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a29      	ldr	r2, [pc, #164]	; (80070b0 <TIM_Base_SetConfig+0x124>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d017      	beq.n	800703e <TIM_Base_SetConfig+0xb2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a28      	ldr	r2, [pc, #160]	; (80070b4 <TIM_Base_SetConfig+0x128>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <TIM_Base_SetConfig+0xb2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a27      	ldr	r2, [pc, #156]	; (80070b8 <TIM_Base_SetConfig+0x12c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d00f      	beq.n	800703e <TIM_Base_SetConfig+0xb2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a26      	ldr	r2, [pc, #152]	; (80070bc <TIM_Base_SetConfig+0x130>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00b      	beq.n	800703e <TIM_Base_SetConfig+0xb2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a25      	ldr	r2, [pc, #148]	; (80070c0 <TIM_Base_SetConfig+0x134>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d007      	beq.n	800703e <TIM_Base_SetConfig+0xb2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a24      	ldr	r2, [pc, #144]	; (80070c4 <TIM_Base_SetConfig+0x138>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d003      	beq.n	800703e <TIM_Base_SetConfig+0xb2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a23      	ldr	r2, [pc, #140]	; (80070c8 <TIM_Base_SetConfig+0x13c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d108      	bne.n	8007050 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a0a      	ldr	r2, [pc, #40]	; (80070a0 <TIM_Base_SetConfig+0x114>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d003      	beq.n	8007084 <TIM_Base_SetConfig+0xf8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a0c      	ldr	r2, [pc, #48]	; (80070b0 <TIM_Base_SetConfig+0x124>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d103      	bne.n	800708c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	691a      	ldr	r2, [r3, #16]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	615a      	str	r2, [r3, #20]
}
 8007092:	bf00      	nop
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40010000 	.word	0x40010000
 80070a4:	40000400 	.word	0x40000400
 80070a8:	40000800 	.word	0x40000800
 80070ac:	40000c00 	.word	0x40000c00
 80070b0:	40010400 	.word	0x40010400
 80070b4:	40014000 	.word	0x40014000
 80070b8:	40014400 	.word	0x40014400
 80070bc:	40014800 	.word	0x40014800
 80070c0:	40001800 	.word	0x40001800
 80070c4:	40001c00 	.word	0x40001c00
 80070c8:	40002000 	.word	0x40002000

080070cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 031f 	and.w	r3, r3, #31
 80070de:	2201      	movs	r2, #1
 80070e0:	fa02 f303 	lsl.w	r3, r2, r3
 80070e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a1a      	ldr	r2, [r3, #32]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	43db      	mvns	r3, r3
 80070ee:	401a      	ands	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a1a      	ldr	r2, [r3, #32]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 031f 	and.w	r3, r3, #31
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	fa01 f303 	lsl.w	r3, r1, r3
 8007104:	431a      	orrs	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	621a      	str	r2, [r3, #32]
}
 800710a:	bf00      	nop
 800710c:	371c      	adds	r7, #28
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
	...

08007118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007128:	2b01      	cmp	r3, #1
 800712a:	d101      	bne.n	8007130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800712c:	2302      	movs	r3, #2
 800712e:	e05a      	b.n	80071e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a21      	ldr	r2, [pc, #132]	; (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d022      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800717c:	d01d      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a1d      	ldr	r2, [pc, #116]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d018      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a1b      	ldr	r2, [pc, #108]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a1a      	ldr	r2, [pc, #104]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00e      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a18      	ldr	r2, [pc, #96]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d009      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a17      	ldr	r2, [pc, #92]	; (8007208 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d004      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a15      	ldr	r2, [pc, #84]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d10c      	bne.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	40010000 	.word	0x40010000
 80071f8:	40000400 	.word	0x40000400
 80071fc:	40000800 	.word	0x40000800
 8007200:	40000c00 	.word	0x40000c00
 8007204:	40010400 	.word	0x40010400
 8007208:	40014000 	.word	0x40014000
 800720c:	40001800 	.word	0x40001800

08007210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007238:	b084      	sub	sp, #16
 800723a:	b480      	push	{r7}
 800723c:	b085      	sub	sp, #20
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	f107 001c 	add.w	r0, r7, #28
 8007246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800724e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007250:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007252:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007256:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800725a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800725e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007262:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007272:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	b004      	add	sp, #16
 800728c:	4770      	bx	lr

0800728e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800729c:	4618      	mov	r0, r3
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2203      	movs	r2, #3
 80072d6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80072d8:	2002      	movs	r0, #2
 80072da:	f7fb fcc7 	bl	8002c6c <HAL_Delay>
  
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0303 	and.w	r3, r3, #3
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007322:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007328:	431a      	orrs	r2, r3
                       Command->CPSM);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800732e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800733e:	f023 030f 	bic.w	r3, r3, #15
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	b2db      	uxtb	r3, r3
}
 8007366:	4618      	mov	r0, r3
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007372:	b480      	push	{r7}
 8007374:	b085      	sub	sp, #20
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3314      	adds	r3, #20
 8007380:	461a      	mov	r2, r3
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	4413      	add	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
}  
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80073c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80073ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0

}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80073fe:	2310      	movs	r3, #16
 8007400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007402:	2340      	movs	r3, #64	; 0x40
 8007404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007406:	2300      	movs	r3, #0
 8007408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800740a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800740e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007410:	f107 0308 	add.w	r3, r7, #8
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff ff74 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800741c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007420:	2110      	movs	r1, #16
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa40 	bl	80078a8 <SDMMC_GetCmdResp1>
 8007428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800742a:	69fb      	ldr	r3, [r7, #28]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3720      	adds	r7, #32
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007442:	2311      	movs	r3, #17
 8007444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007446:	2340      	movs	r3, #64	; 0x40
 8007448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800744e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007452:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff ff52 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007460:	f241 3288 	movw	r2, #5000	; 0x1388
 8007464:	2111      	movs	r1, #17
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa1e 	bl	80078a8 <SDMMC_GetCmdResp1>
 800746c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800746e:	69fb      	ldr	r3, [r7, #28]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3720      	adds	r7, #32
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007486:	2312      	movs	r3, #18
 8007488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800748a:	2340      	movs	r3, #64	; 0x40
 800748c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007496:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007498:	f107 0308 	add.w	r3, r7, #8
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff ff30 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80074a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a8:	2112      	movs	r1, #18
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f9fc 	bl	80078a8 <SDMMC_GetCmdResp1>
 80074b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074b2:	69fb      	ldr	r3, [r7, #28]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80074ca:	2318      	movs	r3, #24
 80074cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074ce:	2340      	movs	r3, #64	; 0x40
 80074d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074d2:	2300      	movs	r3, #0
 80074d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074dc:	f107 0308 	add.w	r3, r7, #8
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff ff0e 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80074e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ec:	2118      	movs	r1, #24
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f9da 	bl	80078a8 <SDMMC_GetCmdResp1>
 80074f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074f6:	69fb      	ldr	r3, [r7, #28]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3720      	adds	r7, #32
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800750e:	2319      	movs	r3, #25
 8007510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007512:	2340      	movs	r3, #64	; 0x40
 8007514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007516:	2300      	movs	r3, #0
 8007518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800751a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800751e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007520:	f107 0308 	add.w	r3, r7, #8
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7ff feec 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800752c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007530:	2119      	movs	r1, #25
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f9b8 	bl	80078a8 <SDMMC_GetCmdResp1>
 8007538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800753a:	69fb      	ldr	r3, [r7, #28]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3720      	adds	r7, #32
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007550:	230c      	movs	r3, #12
 8007552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007554:	2340      	movs	r3, #64	; 0x40
 8007556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007558:	2300      	movs	r3, #0
 800755a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800755c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007560:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007562:	f107 0308 	add.w	r3, r7, #8
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff fecb 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800756e:	4a05      	ldr	r2, [pc, #20]	; (8007584 <SDMMC_CmdStopTransfer+0x40>)
 8007570:	210c      	movs	r1, #12
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f998 	bl	80078a8 <SDMMC_GetCmdResp1>
 8007578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800757a:	69fb      	ldr	r3, [r7, #28]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3720      	adds	r7, #32
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	05f5e100 	.word	0x05f5e100

08007588 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	; 0x28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007598:	2307      	movs	r3, #7
 800759a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075a0:	2300      	movs	r3, #0
 80075a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075aa:	f107 0310 	add.w	r3, r7, #16
 80075ae:	4619      	mov	r1, r3
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f7ff fea7 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80075b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ba:	2107      	movs	r1, #7
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 f973 	bl	80078a8 <SDMMC_GetCmdResp1>
 80075c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3728      	adds	r7, #40	; 0x28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b088      	sub	sp, #32
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80075de:	2300      	movs	r3, #0
 80075e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075ec:	f107 0308 	add.w	r3, r7, #8
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff fe86 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f92d 	bl	8007858 <SDMMC_GetCmdError>
 80075fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007600:	69fb      	ldr	r3, [r7, #28]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3720      	adds	r7, #32
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b088      	sub	sp, #32
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007612:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007618:	2308      	movs	r3, #8
 800761a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800761c:	2340      	movs	r3, #64	; 0x40
 800761e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007628:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800762a:	f107 0308 	add.w	r3, r7, #8
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff fe67 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fb16 	bl	8007c68 <SDMMC_GetCmdResp7>
 800763c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800763e:	69fb      	ldr	r3, [r7, #28]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3720      	adds	r7, #32
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007656:	2337      	movs	r3, #55	; 0x37
 8007658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800765a:	2340      	movs	r3, #64	; 0x40
 800765c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800765e:	2300      	movs	r3, #0
 8007660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007666:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007668:	f107 0308 	add.w	r3, r7, #8
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff fe48 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007674:	f241 3288 	movw	r2, #5000	; 0x1388
 8007678:	2137      	movs	r1, #55	; 0x37
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f914 	bl	80078a8 <SDMMC_GetCmdResp1>
 8007680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007682:	69fb      	ldr	r3, [r7, #28]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800769c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80076a2:	2329      	movs	r3, #41	; 0x29
 80076a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076a6:	2340      	movs	r3, #64	; 0x40
 80076a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076b4:	f107 0308 	add.w	r3, r7, #8
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff fe22 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fa23 	bl	8007b0c <SDMMC_GetCmdResp3>
 80076c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076c8:	69fb      	ldr	r3, [r7, #28]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3720      	adds	r7, #32
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b088      	sub	sp, #32
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80076e0:	2306      	movs	r3, #6
 80076e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076e4:	2340      	movs	r3, #64	; 0x40
 80076e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fe03 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80076fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007702:	2106      	movs	r1, #6
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f8cf 	bl	80078a8 <SDMMC_GetCmdResp1>
 800770a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800770c:	69fb      	ldr	r3, [r7, #28]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3720      	adds	r7, #32
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b088      	sub	sp, #32
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007722:	2333      	movs	r3, #51	; 0x33
 8007724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007726:	2340      	movs	r3, #64	; 0x40
 8007728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800772e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007732:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007734:	f107 0308 	add.w	r3, r7, #8
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fde2 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007740:	f241 3288 	movw	r2, #5000	; 0x1388
 8007744:	2133      	movs	r1, #51	; 0x33
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f8ae 	bl	80078a8 <SDMMC_GetCmdResp1>
 800774c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800774e:	69fb      	ldr	r3, [r7, #28]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007764:	2302      	movs	r3, #2
 8007766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007768:	23c0      	movs	r3, #192	; 0xc0
 800776a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800776c:	2300      	movs	r3, #0
 800776e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007774:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007776:	f107 0308 	add.w	r3, r7, #8
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff fdc1 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f97c 	bl	8007a80 <SDMMC_GetCmdResp2>
 8007788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800778a:	69fb      	ldr	r3, [r7, #28]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80077a2:	2309      	movs	r3, #9
 80077a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80077a6:	23c0      	movs	r3, #192	; 0xc0
 80077a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077b4:	f107 0308 	add.w	r3, r7, #8
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff fda2 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f95d 	bl	8007a80 <SDMMC_GetCmdResp2>
 80077c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077c8:	69fb      	ldr	r3, [r7, #28]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3720      	adds	r7, #32
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b088      	sub	sp, #32
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80077e0:	2303      	movs	r3, #3
 80077e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077e4:	2340      	movs	r3, #64	; 0x40
 80077e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077f2:	f107 0308 	add.w	r3, r7, #8
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff fd83 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	2103      	movs	r1, #3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f9bc 	bl	8007b80 <SDMMC_GetCmdResp6>
 8007808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800780a:	69fb      	ldr	r3, [r7, #28]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3720      	adds	r7, #32
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007822:	230d      	movs	r3, #13
 8007824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007826:	2340      	movs	r3, #64	; 0x40
 8007828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800782a:	2300      	movs	r3, #0
 800782c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800782e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007832:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007834:	f107 0308 	add.w	r3, r7, #8
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff fd62 	bl	8007304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007840:	f241 3288 	movw	r2, #5000	; 0x1388
 8007844:	210d      	movs	r1, #13
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f82e 	bl	80078a8 <SDMMC_GetCmdResp1>
 800784c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800784e:	69fb      	ldr	r3, [r7, #28]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3720      	adds	r7, #32
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007858:	b490      	push	{r4, r7}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <SDMMC_GetCmdError+0x48>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a0f      	ldr	r2, [pc, #60]	; (80078a4 <SDMMC_GetCmdError+0x4c>)
 8007866:	fba2 2303 	umull	r2, r3, r2, r3
 800786a:	0a5b      	lsrs	r3, r3, #9
 800786c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007870:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007874:	4623      	mov	r3, r4
 8007876:	1e5c      	subs	r4, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800787c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007880:	e009      	b.n	8007896 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0f2      	beq.n	8007874 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	22c5      	movs	r2, #197	; 0xc5
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bc90      	pop	{r4, r7}
 800789e:	4770      	bx	lr
 80078a0:	20000078 	.word	0x20000078
 80078a4:	10624dd3 	.word	0x10624dd3

080078a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80078a8:	b590      	push	{r4, r7, lr}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	460b      	mov	r3, r1
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80078b6:	4b6f      	ldr	r3, [pc, #444]	; (8007a74 <SDMMC_GetCmdResp1+0x1cc>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a6f      	ldr	r2, [pc, #444]	; (8007a78 <SDMMC_GetCmdResp1+0x1d0>)
 80078bc:	fba2 2303 	umull	r2, r3, r2, r3
 80078c0:	0a5b      	lsrs	r3, r3, #9
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80078c8:	4623      	mov	r3, r4
 80078ca:	1e5c      	subs	r4, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d102      	bne.n	80078d6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078d4:	e0c9      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078da:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <SDMMC_GetCmdResp1+0x20>
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1eb      	bne.n	80078c8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2204      	movs	r2, #4
 8007900:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007902:	2304      	movs	r3, #4
 8007904:	e0b1      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d004      	beq.n	800791c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007918:	2301      	movs	r3, #1
 800791a:	e0a6      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	22c5      	movs	r2, #197	; 0xc5
 8007920:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff fd18 	bl	8007358 <SDIO_GetCommandResponse>
 8007928:	4603      	mov	r3, r0
 800792a:	461a      	mov	r2, r3
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	4293      	cmp	r3, r2
 8007930:	d001      	beq.n	8007936 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007932:	2301      	movs	r3, #1
 8007934:	e099      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007936:	2100      	movs	r1, #0
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff fd1a 	bl	8007372 <SDIO_GetResponse>
 800793e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4b4e      	ldr	r3, [pc, #312]	; (8007a7c <SDMMC_GetCmdResp1+0x1d4>)
 8007944:	4013      	ands	r3, r2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800794a:	2300      	movs	r3, #0
 800794c:	e08d      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	da02      	bge.n	800795a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007954:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007958:	e087      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007964:	2340      	movs	r3, #64	; 0x40
 8007966:	e080      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007972:	2380      	movs	r3, #128	; 0x80
 8007974:	e079      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007984:	e071      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007994:	e069      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80079a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a4:	e061      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80079b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079b4:	e059      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80079c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079c4:	e051      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80079d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079d4:	e049      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80079e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079e4:	e041      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80079f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079f4:	e039      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a04:	e031      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007a10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007a14:	e029      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007a20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a24:	e021      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007a30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007a34:	e019      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007a40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a44:	e011      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007a50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007a54:	e009      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007a60:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007a64:	e001      	b.n	8007a6a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd90      	pop	{r4, r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20000078 	.word	0x20000078
 8007a78:	10624dd3 	.word	0x10624dd3
 8007a7c:	fdffe008 	.word	0xfdffe008

08007a80 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007a80:	b490      	push	{r4, r7}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a88:	4b1e      	ldr	r3, [pc, #120]	; (8007b04 <SDMMC_GetCmdResp2+0x84>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1e      	ldr	r2, [pc, #120]	; (8007b08 <SDMMC_GetCmdResp2+0x88>)
 8007a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a92:	0a5b      	lsrs	r3, r3, #9
 8007a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007a9c:	4623      	mov	r3, r4
 8007a9e:	1e5c      	subs	r4, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007aa4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007aa8:	e026      	b.n	8007af8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f0      	beq.n	8007a9c <SDMMC_GetCmdResp2+0x1c>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1eb      	bne.n	8007a9c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d004      	beq.n	8007ada <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ad6:	2304      	movs	r3, #4
 8007ad8:	e00e      	b.n	8007af8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e003      	b.n	8007af8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	22c5      	movs	r2, #197	; 0xc5
 8007af4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc90      	pop	{r4, r7}
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000078 	.word	0x20000078
 8007b08:	10624dd3 	.word	0x10624dd3

08007b0c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007b0c:	b490      	push	{r4, r7}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b14:	4b18      	ldr	r3, [pc, #96]	; (8007b78 <SDMMC_GetCmdResp3+0x6c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a18      	ldr	r2, [pc, #96]	; (8007b7c <SDMMC_GetCmdResp3+0x70>)
 8007b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1e:	0a5b      	lsrs	r3, r3, #9
 8007b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007b28:	4623      	mov	r3, r4
 8007b2a:	1e5c      	subs	r4, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b34:	e01b      	b.n	8007b6e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0f0      	beq.n	8007b28 <SDMMC_GetCmdResp3+0x1c>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1eb      	bne.n	8007b28 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2204      	movs	r2, #4
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b62:	2304      	movs	r3, #4
 8007b64:	e003      	b.n	8007b6e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	22c5      	movs	r2, #197	; 0xc5
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bc90      	pop	{r4, r7}
 8007b76:	4770      	bx	lr
 8007b78:	20000078 	.word	0x20000078
 8007b7c:	10624dd3 	.word	0x10624dd3

08007b80 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007b80:	b590      	push	{r4, r7, lr}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b8e:	4b34      	ldr	r3, [pc, #208]	; (8007c60 <SDMMC_GetCmdResp6+0xe0>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a34      	ldr	r2, [pc, #208]	; (8007c64 <SDMMC_GetCmdResp6+0xe4>)
 8007b94:	fba2 2303 	umull	r2, r3, r2, r3
 8007b98:	0a5b      	lsrs	r3, r3, #9
 8007b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007ba2:	4623      	mov	r3, r4
 8007ba4:	1e5c      	subs	r4, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d102      	bne.n	8007bb0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007baa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bae:	e052      	b.n	8007c56 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0f0      	beq.n	8007ba2 <SDMMC_GetCmdResp6+0x22>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1eb      	bne.n	8007ba2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2204      	movs	r2, #4
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bdc:	2304      	movs	r3, #4
 8007bde:	e03a      	b.n	8007c56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e02f      	b.n	8007c56 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff fbae 	bl	8007358 <SDIO_GetCommandResponse>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	461a      	mov	r2, r3
 8007c00:	7afb      	ldrb	r3, [r7, #11]
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d001      	beq.n	8007c0a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e025      	b.n	8007c56 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	22c5      	movs	r2, #197	; 0xc5
 8007c0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007c10:	2100      	movs	r1, #0
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff fbad 	bl	8007372 <SDIO_GetResponse>
 8007c18:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d106      	bne.n	8007c32 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	0c1b      	lsrs	r3, r3, #16
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e011      	b.n	8007c56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c40:	e009      	b.n	8007c56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c50:	e001      	b.n	8007c56 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007c52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd90      	pop	{r4, r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000078 	.word	0x20000078
 8007c64:	10624dd3 	.word	0x10624dd3

08007c68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007c68:	b490      	push	{r4, r7}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c70:	4b21      	ldr	r3, [pc, #132]	; (8007cf8 <SDMMC_GetCmdResp7+0x90>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a21      	ldr	r2, [pc, #132]	; (8007cfc <SDMMC_GetCmdResp7+0x94>)
 8007c76:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7a:	0a5b      	lsrs	r3, r3, #9
 8007c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007c84:	4623      	mov	r3, r4
 8007c86:	1e5c      	subs	r4, r3, #1
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d102      	bne.n	8007c92 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c90:	e02c      	b.n	8007cec <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c96:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0f0      	beq.n	8007c84 <SDMMC_GetCmdResp7+0x1c>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1eb      	bne.n	8007c84 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d004      	beq.n	8007cc2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cbe:	2304      	movs	r3, #4
 8007cc0:	e014      	b.n	8007cec <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e009      	b.n	8007cec <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2240      	movs	r2, #64	; 0x40
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007cea:	2300      	movs	r3, #0
  
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc90      	pop	{r4, r7}
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	20000078 	.word	0x20000078
 8007cfc:	10624dd3 	.word	0x10624dd3

08007d00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007d04:	4904      	ldr	r1, [pc, #16]	; (8007d18 <MX_FATFS_Init+0x18>)
 8007d06:	4805      	ldr	r0, [pc, #20]	; (8007d1c <MX_FATFS_Init+0x1c>)
 8007d08:	f001 f824 	bl	8008d54 <FATFS_LinkDriver>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4b03      	ldr	r3, [pc, #12]	; (8007d20 <MX_FATFS_Init+0x20>)
 8007d12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007d14:	bf00      	nop
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20004ddc 	.word	0x20004ddc
 8007d1c:	0800b960 	.word	0x0800b960
 8007d20:	20004dd8 	.word	0x20004dd8

08007d24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007d2e:	f000 f896 	bl	8007e5e <BSP_SD_IsDetected>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d001      	beq.n	8007d3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e012      	b.n	8007d62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007d3c:	480b      	ldr	r0, [pc, #44]	; (8007d6c <BSP_SD_Init+0x48>)
 8007d3e:	f7fc fe8b 	bl	8004a58 <HAL_SD_Init>
 8007d42:	4603      	mov	r3, r0
 8007d44:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d109      	bne.n	8007d60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d50:	4806      	ldr	r0, [pc, #24]	; (8007d6c <BSP_SD_Init+0x48>)
 8007d52:	f7fd fc4b 	bl	80055ec <HAL_SD_ConfigWideBusOperation>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007d60:	79fb      	ldrb	r3, [r7, #7]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20001bcc 	.word	0x20001bcc

08007d70 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	68f9      	ldr	r1, [r7, #12]
 8007d86:	4806      	ldr	r0, [pc, #24]	; (8007da0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007d88:	f7fc fef6 	bl	8004b78 <HAL_SD_ReadBlocks_DMA>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3718      	adds	r7, #24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20001bcc 	.word	0x20001bcc

08007da4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	68f9      	ldr	r1, [r7, #12]
 8007dba:	4806      	ldr	r0, [pc, #24]	; (8007dd4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007dbc:	f7fc ffc6 	bl	8004d4c <HAL_SD_WriteBlocks_DMA>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20001bcc 	.word	0x20001bcc

08007dd8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007ddc:	4805      	ldr	r0, [pc, #20]	; (8007df4 <BSP_SD_GetCardState+0x1c>)
 8007dde:	f7fd fc81 	bl	80056e4 <HAL_SD_GetCardState>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	bf14      	ite	ne
 8007de8:	2301      	movne	r3, #1
 8007dea:	2300      	moveq	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20001bcc 	.word	0x20001bcc

08007df8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	4803      	ldr	r0, [pc, #12]	; (8007e10 <BSP_SD_GetCardInfo+0x18>)
 8007e04:	f7fd fbc6 	bl	8005594 <HAL_SD_GetCardInfo>
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20001bcc 	.word	0x20001bcc

08007e14 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007e1c:	f000 f818 	bl	8007e50 <BSP_SD_AbortCallback>
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007e30:	f000 fa54 	bl	80082dc <BSP_SD_WriteCpltCallback>
}
 8007e34:	bf00      	nop
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007e44:	f000 fa56 	bl	80082f4 <BSP_SD_ReadCpltCallback>
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0

}
 8007e54:	bf00      	nop
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007e64:	2301      	movs	r3, #1
 8007e66:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007e68:	f000 f80c 	bl	8007e84 <BSP_PlatformIsDetected>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007e72:	2300      	movs	r3, #0
 8007e74:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	b2db      	uxtb	r3, r3
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
	...

08007e84 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007e8e:	2180      	movs	r1, #128	; 0x80
 8007e90:	480a      	ldr	r0, [pc, #40]	; (8007ebc <BSP_PlatformIsDetected+0x38>)
 8007e92:	f7fc f93f 	bl	8004114 <HAL_GPIO_ReadPin>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    //printf("s - %u\n", status);
    if(status == SD_PRESENT) status = SD_NOT_PRESENT;
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d102      	bne.n	8007eac <BSP_PlatformIsDetected+0x28>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	71fb      	strb	r3, [r7, #7]
 8007eaa:	e001      	b.n	8007eb0 <BSP_PlatformIsDetected+0x2c>
    else status = SD_PRESENT;
 8007eac:	2301      	movs	r3, #1
 8007eae:	71fb      	strb	r3, [r7, #7]
    //printf("s - %u\n", status);
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
}  
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	40020800 	.word	0x40020800

08007ec0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007ec8:	f7fa fec4 	bl	8002c54 <HAL_GetTick>
 8007ecc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007ece:	e006      	b.n	8007ede <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ed0:	f7ff ff82 	bl	8007dd8 <BSP_SD_GetCardState>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	e009      	b.n	8007ef2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007ede:	f7fa feb9 	bl	8002c54 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d8f0      	bhi.n	8007ed0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007f06:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <SD_CheckStatus+0x38>)
 8007f08:	2201      	movs	r2, #1
 8007f0a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007f0c:	f7ff ff64 	bl	8007dd8 <BSP_SD_GetCardState>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d107      	bne.n	8007f26 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007f16:	4b07      	ldr	r3, [pc, #28]	; (8007f34 <SD_CheckStatus+0x38>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f023 0301 	bic.w	r3, r3, #1
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <SD_CheckStatus+0x38>)
 8007f24:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007f26:	4b03      	ldr	r3, [pc, #12]	; (8007f34 <SD_CheckStatus+0x38>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b2db      	uxtb	r3, r3
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20000081 	.word	0x20000081

08007f38 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007f42:	f7ff feef 	bl	8007d24 <BSP_SD_Init>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d107      	bne.n	8007f5c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff ffd4 	bl	8007efc <SD_CheckStatus>
 8007f54:	4603      	mov	r3, r0
 8007f56:	461a      	mov	r2, r3
 8007f58:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <SD_initialize+0x34>)
 8007f5a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8007f5c:	4b03      	ldr	r3, [pc, #12]	; (8007f6c <SD_initialize+0x34>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	b2db      	uxtb	r3, r3
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000081 	.word	0x20000081

08007f70 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff ffbd 	bl	8007efc <SD_CheckStatus>
 8007f82:	4603      	mov	r3, r0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	607a      	str	r2, [r7, #4]
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007fa0:	f247 5030 	movw	r0, #30000	; 0x7530
 8007fa4:	f7ff ff8c 	bl	8007ec0 <SD_CheckStatusWithTimeout>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	da01      	bge.n	8007fb2 <SD_read+0x26>
  {
    return res;
 8007fae:	7ffb      	ldrb	r3, [r7, #31]
 8007fb0:	e08b      	b.n	80080ca <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f003 0303 	and.w	r3, r3, #3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f040 8085 	bne.w	80080c8 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	68b8      	ldr	r0, [r7, #8]
 8007fc4:	f7ff fed4 	bl	8007d70 <BSP_SD_ReadBlocks_DMA>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d133      	bne.n	8008036 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007fce:	4b41      	ldr	r3, [pc, #260]	; (80080d4 <SD_read+0x148>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007fd4:	f7fa fe3e 	bl	8002c54 <HAL_GetTick>
 8007fd8:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007fda:	bf00      	nop
 8007fdc:	4b3d      	ldr	r3, [pc, #244]	; (80080d4 <SD_read+0x148>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d108      	bne.n	8007ff6 <SD_read+0x6a>
 8007fe4:	f7fa fe36 	bl	8002c54 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	f247 522f 	movw	r2, #29999	; 0x752f
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d9f2      	bls.n	8007fdc <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8007ff6:	4b37      	ldr	r3, [pc, #220]	; (80080d4 <SD_read+0x148>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d102      	bne.n	8008004 <SD_read+0x78>
      {
        res = RES_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	77fb      	strb	r3, [r7, #31]
 8008002:	e061      	b.n	80080c8 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8008004:	4b33      	ldr	r3, [pc, #204]	; (80080d4 <SD_read+0x148>)
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800800a:	f7fa fe23 	bl	8002c54 <HAL_GetTick>
 800800e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008010:	e007      	b.n	8008022 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008012:	f7ff fee1 	bl	8007dd8 <BSP_SD_GetCardState>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d102      	bne.n	8008022 <SD_read+0x96>
          {
            res = RES_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008020:	e052      	b.n	80080c8 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008022:	f7fa fe17 	bl	8002c54 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008030:	4293      	cmp	r3, r2
 8008032:	d9ee      	bls.n	8008012 <SD_read+0x86>
 8008034:	e048      	b.n	80080c8 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8008036:	2300      	movs	r3, #0
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	e034      	b.n	80080a6 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	607a      	str	r2, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	4619      	mov	r1, r3
 8008046:	4824      	ldr	r0, [pc, #144]	; (80080d8 <SD_read+0x14c>)
 8008048:	f7ff fe92 	bl	8007d70 <BSP_SD_ReadBlocks_DMA>
 800804c:	4603      	mov	r3, r0
 800804e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8008050:	7fbb      	ldrb	r3, [r7, #30]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d12c      	bne.n	80080b0 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8008056:	4b1f      	ldr	r3, [pc, #124]	; (80080d4 <SD_read+0x148>)
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800805c:	f7fa fdfa 	bl	8002c54 <HAL_GetTick>
 8008060:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008062:	bf00      	nop
 8008064:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <SD_read+0x148>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d108      	bne.n	800807e <SD_read+0xf2>
 800806c:	f7fa fdf2 	bl	8002c54 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	f247 522f 	movw	r2, #29999	; 0x752f
 800807a:	4293      	cmp	r3, r2
 800807c:	d9f2      	bls.n	8008064 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800807e:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <SD_read+0x148>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d016      	beq.n	80080b4 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	4a13      	ldr	r2, [pc, #76]	; (80080d8 <SD_read+0x14c>)
 800808a:	4618      	mov	r0, r3
 800808c:	4611      	mov	r1, r2
 800808e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008092:	461a      	mov	r2, r3
 8008094:	f000 fe98 	bl	8008dc8 <memcpy>
          buff += BLOCKSIZE;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800809e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	3301      	adds	r3, #1
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d8c6      	bhi.n	800803c <SD_read+0xb0>
 80080ae:	e002      	b.n	80080b6 <SD_read+0x12a>
        }
        else
        {
          break;
 80080b0:	bf00      	nop
 80080b2:	e000      	b.n	80080b6 <SD_read+0x12a>
            break;
 80080b4:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d104      	bne.n	80080c8 <SD_read+0x13c>
 80080be:	7fbb      	ldrb	r3, [r7, #30]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <SD_read+0x13c>
        res = RES_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 80080c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3720      	adds	r7, #32
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	200004a0 	.word	0x200004a0
 80080d8:	2000029c 	.word	0x2000029c

080080dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	603b      	str	r3, [r7, #0]
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 80080f0:	4b4c      	ldr	r3, [pc, #304]	; (8008224 <SD_write+0x148>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80080f6:	f247 5030 	movw	r0, #30000	; 0x7530
 80080fa:	f7ff fee1 	bl	8007ec0 <SD_CheckStatusWithTimeout>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	da01      	bge.n	8008108 <SD_write+0x2c>
  {
    return res;
 8008104:	7ffb      	ldrb	r3, [r7, #31]
 8008106:	e088      	b.n	800821a <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b00      	cmp	r3, #0
 8008110:	f040 8082 	bne.w	8008218 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	68b8      	ldr	r0, [r7, #8]
 800811a:	f7ff fe43 	bl	8007da4 <BSP_SD_WriteBlocks_DMA>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d130      	bne.n	8008186 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008124:	f7fa fd96 	bl	8002c54 <HAL_GetTick>
 8008128:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800812a:	bf00      	nop
 800812c:	4b3d      	ldr	r3, [pc, #244]	; (8008224 <SD_write+0x148>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d108      	bne.n	8008146 <SD_write+0x6a>
 8008134:	f7fa fd8e 	bl	8002c54 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	f247 522f 	movw	r2, #29999	; 0x752f
 8008142:	4293      	cmp	r3, r2
 8008144:	d9f2      	bls.n	800812c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8008146:	4b37      	ldr	r3, [pc, #220]	; (8008224 <SD_write+0x148>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d102      	bne.n	8008154 <SD_write+0x78>
      {
        res = RES_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	77fb      	strb	r3, [r7, #31]
 8008152:	e061      	b.n	8008218 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8008154:	4b33      	ldr	r3, [pc, #204]	; (8008224 <SD_write+0x148>)
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800815a:	f7fa fd7b 	bl	8002c54 <HAL_GetTick>
 800815e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008160:	e007      	b.n	8008172 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008162:	f7ff fe39 	bl	8007dd8 <BSP_SD_GetCardState>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <SD_write+0x96>
          {
            res = RES_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	77fb      	strb	r3, [r7, #31]
            break;
 8008170:	e052      	b.n	8008218 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008172:	f7fa fd6f 	bl	8002c54 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008180:	4293      	cmp	r3, r2
 8008182:	d9ee      	bls.n	8008162 <SD_write+0x86>
 8008184:	e048      	b.n	8008218 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8008186:	2300      	movs	r3, #0
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	e034      	b.n	80081f6 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800818c:	4b25      	ldr	r3, [pc, #148]	; (8008224 <SD_write+0x148>)
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	4619      	mov	r1, r3
 800819c:	4822      	ldr	r0, [pc, #136]	; (8008228 <SD_write+0x14c>)
 800819e:	f7ff fe01 	bl	8007da4 <BSP_SD_WriteBlocks_DMA>
 80081a2:	4603      	mov	r3, r0
 80081a4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80081a6:	7fbb      	ldrb	r3, [r7, #30]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d129      	bne.n	8008200 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 80081ac:	f7fa fd52 	bl	8002c54 <HAL_GetTick>
 80081b0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80081b2:	bf00      	nop
 80081b4:	4b1b      	ldr	r3, [pc, #108]	; (8008224 <SD_write+0x148>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d108      	bne.n	80081ce <SD_write+0xf2>
 80081bc:	f7fa fd4a 	bl	8002c54 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d9f2      	bls.n	80081b4 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 80081ce:	4b15      	ldr	r3, [pc, #84]	; (8008224 <SD_write+0x148>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d016      	beq.n	8008204 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4a13      	ldr	r2, [pc, #76]	; (8008228 <SD_write+0x14c>)
 80081da:	4618      	mov	r0, r3
 80081dc:	4611      	mov	r1, r2
 80081de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081e2:	461a      	mov	r2, r3
 80081e4:	f000 fdf0 	bl	8008dc8 <memcpy>
          buff += BLOCKSIZE;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80081ee:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	3301      	adds	r3, #1
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d8c6      	bhi.n	800818c <SD_write+0xb0>
 80081fe:	e002      	b.n	8008206 <SD_write+0x12a>
        }
        else
        {
          break;
 8008200:	bf00      	nop
 8008202:	e000      	b.n	8008206 <SD_write+0x12a>
            break;
 8008204:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d104      	bne.n	8008218 <SD_write+0x13c>
 800820e:	7fbb      	ldrb	r3, [r7, #30]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <SD_write+0x13c>
        res = RES_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8008218:	7ffb      	ldrb	r3, [r7, #31]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3720      	adds	r7, #32
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	2000049c 	.word	0x2000049c
 8008228:	2000029c 	.word	0x2000029c

0800822c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08c      	sub	sp, #48	; 0x30
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	603a      	str	r2, [r7, #0]
 8008236:	71fb      	strb	r3, [r7, #7]
 8008238:	460b      	mov	r3, r1
 800823a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008242:	4b25      	ldr	r3, [pc, #148]	; (80082d8 <SD_ioctl+0xac>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <SD_ioctl+0x28>
 8008250:	2303      	movs	r3, #3
 8008252:	e03c      	b.n	80082ce <SD_ioctl+0xa2>

  switch (cmd)
 8008254:	79bb      	ldrb	r3, [r7, #6]
 8008256:	2b03      	cmp	r3, #3
 8008258:	d834      	bhi.n	80082c4 <SD_ioctl+0x98>
 800825a:	a201      	add	r2, pc, #4	; (adr r2, 8008260 <SD_ioctl+0x34>)
 800825c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008260:	08008271 	.word	0x08008271
 8008264:	08008279 	.word	0x08008279
 8008268:	08008291 	.word	0x08008291
 800826c:	080082ab 	.word	0x080082ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008276:	e028      	b.n	80082ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008278:	f107 030c 	add.w	r3, r7, #12
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff fdbb 	bl	8007df8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800828e:	e01c      	b.n	80082ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008290:	f107 030c 	add.w	r3, r7, #12
 8008294:	4618      	mov	r0, r3
 8008296:	f7ff fdaf 	bl	8007df8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	b29a      	uxth	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082a8:	e00f      	b.n	80082ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80082aa:	f107 030c 	add.w	r3, r7, #12
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff fda2 	bl	8007df8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	0a5a      	lsrs	r2, r3, #9
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082c2:	e002      	b.n	80082ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80082c4:	2304      	movs	r3, #4
 80082c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80082ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3730      	adds	r7, #48	; 0x30
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000081 	.word	0x20000081

080082dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80082dc:	b480      	push	{r7}
 80082de:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 80082e0:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <BSP_SD_WriteCpltCallback+0x14>)
 80082e2:	2201      	movs	r2, #1
 80082e4:	601a      	str	r2, [r3, #0]
}
 80082e6:	bf00      	nop
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	2000049c 	.word	0x2000049c

080082f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80082f8:	4b03      	ldr	r3, [pc, #12]	; (8008308 <BSP_SD_ReadCpltCallback+0x14>)
 80082fa:	2201      	movs	r2, #1
 80082fc:	601a      	str	r2, [r3, #0]
}
 80082fe:	bf00      	nop
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	200004a0 	.word	0x200004a0

0800830c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	4a08      	ldr	r2, [pc, #32]	; (800833c <disk_status+0x30>)
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	79fa      	ldrb	r2, [r7, #7]
 8008324:	4905      	ldr	r1, [pc, #20]	; (800833c <disk_status+0x30>)
 8008326:	440a      	add	r2, r1
 8008328:	7a12      	ldrb	r2, [r2, #8]
 800832a:	4610      	mov	r0, r2
 800832c:	4798      	blx	r3
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008332:	7bfb      	ldrb	r3, [r7, #15]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	200006cc 	.word	0x200006cc

08008340 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	4a0d      	ldr	r2, [pc, #52]	; (8008388 <disk_initialize+0x48>)
 8008352:	5cd3      	ldrb	r3, [r2, r3]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d111      	bne.n	800837c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	4a0b      	ldr	r2, [pc, #44]	; (8008388 <disk_initialize+0x48>)
 800835c:	2101      	movs	r1, #1
 800835e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	4a09      	ldr	r2, [pc, #36]	; (8008388 <disk_initialize+0x48>)
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	79fa      	ldrb	r2, [r7, #7]
 800836e:	4906      	ldr	r1, [pc, #24]	; (8008388 <disk_initialize+0x48>)
 8008370:	440a      	add	r2, r1
 8008372:	7a12      	ldrb	r2, [r2, #8]
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800837c:	7bfb      	ldrb	r3, [r7, #15]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	200006cc 	.word	0x200006cc

0800838c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800838c:	b590      	push	{r4, r7, lr}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	607a      	str	r2, [r7, #4]
 8008396:	603b      	str	r3, [r7, #0]
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	4a0a      	ldr	r2, [pc, #40]	; (80083c8 <disk_read+0x3c>)
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	689c      	ldr	r4, [r3, #8]
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	4a07      	ldr	r2, [pc, #28]	; (80083c8 <disk_read+0x3c>)
 80083ac:	4413      	add	r3, r2
 80083ae:	7a18      	ldrb	r0, [r3, #8]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	47a0      	blx	r4
 80083b8:	4603      	mov	r3, r0
 80083ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd90      	pop	{r4, r7, pc}
 80083c6:	bf00      	nop
 80083c8:	200006cc 	.word	0x200006cc

080083cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80083cc:	b590      	push	{r4, r7, lr}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	607a      	str	r2, [r7, #4]
 80083d6:	603b      	str	r3, [r7, #0]
 80083d8:	4603      	mov	r3, r0
 80083da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	4a0a      	ldr	r2, [pc, #40]	; (8008408 <disk_write+0x3c>)
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	68dc      	ldr	r4, [r3, #12]
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	4a07      	ldr	r2, [pc, #28]	; (8008408 <disk_write+0x3c>)
 80083ec:	4413      	add	r3, r2
 80083ee:	7a18      	ldrb	r0, [r3, #8]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	68b9      	ldr	r1, [r7, #8]
 80083f6:	47a0      	blx	r4
 80083f8:	4603      	mov	r3, r0
 80083fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	bd90      	pop	{r4, r7, pc}
 8008406:	bf00      	nop
 8008408:	200006cc 	.word	0x200006cc

0800840c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	603a      	str	r2, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
 8008418:	460b      	mov	r3, r1
 800841a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800841c:	79fb      	ldrb	r3, [r7, #7]
 800841e:	4a09      	ldr	r2, [pc, #36]	; (8008444 <disk_ioctl+0x38>)
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	79fa      	ldrb	r2, [r7, #7]
 800842a:	4906      	ldr	r1, [pc, #24]	; (8008444 <disk_ioctl+0x38>)
 800842c:	440a      	add	r2, r1
 800842e:	7a10      	ldrb	r0, [r2, #8]
 8008430:	79b9      	ldrb	r1, [r7, #6]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	4798      	blx	r3
 8008436:	4603      	mov	r3, r0
 8008438:	73fb      	strb	r3, [r7, #15]
  return res;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	200006cc 	.word	0x200006cc

08008448 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3301      	adds	r3, #1
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008458:	89fb      	ldrh	r3, [r7, #14]
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	b21a      	sxth	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	b21b      	sxth	r3, r3
 8008464:	4313      	orrs	r3, r2
 8008466:	b21b      	sxth	r3, r3
 8008468:	81fb      	strh	r3, [r7, #14]
	return rv;
 800846a:	89fb      	ldrh	r3, [r7, #14]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3303      	adds	r3, #3
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	021b      	lsls	r3, r3, #8
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	3202      	adds	r2, #2
 8008490:	7812      	ldrb	r2, [r2, #0]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	3201      	adds	r2, #1
 800849e:	7812      	ldrb	r2, [r2, #0]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	021b      	lsls	r3, r3, #8
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	7812      	ldrb	r2, [r2, #0]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80084b0:	68fb      	ldr	r3, [r7, #12]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
	...

080084c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e010      	b.n	80084f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80084ce:	4a0d      	ldr	r2, [pc, #52]	; (8008504 <clear_lock+0x44>)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	4413      	add	r3, r2
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d105      	bne.n	80084ea <clear_lock+0x2a>
 80084de:	4a09      	ldr	r2, [pc, #36]	; (8008504 <clear_lock+0x44>)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	4413      	add	r3, r2
 80084e6:	2200      	movs	r2, #0
 80084e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3301      	adds	r3, #1
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d9eb      	bls.n	80084ce <clear_lock+0xe>
	}
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	200004ac 	.word	0x200004ac

08008508 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	78db      	ldrb	r3, [r3, #3]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d034      	beq.n	8008586 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008520:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	7858      	ldrb	r0, [r3, #1]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800852c:	2301      	movs	r3, #1
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	f7ff ff4c 	bl	80083cc <disk_write>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <sync_window+0x38>
			res = FR_DISK_ERR;
 800853a:	2301      	movs	r3, #1
 800853c:	73fb      	strb	r3, [r7, #15]
 800853e:	e022      	b.n	8008586 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	1ad2      	subs	r2, r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	429a      	cmp	r2, r3
 8008554:	d217      	bcs.n	8008586 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	789b      	ldrb	r3, [r3, #2]
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	e010      	b.n	8008580 <sync_window+0x78>
					wsect += fs->fsize;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	4413      	add	r3, r2
 8008566:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	7858      	ldrb	r0, [r3, #1]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008572:	2301      	movs	r3, #1
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	f7ff ff29 	bl	80083cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	3b01      	subs	r3, #1
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d8eb      	bhi.n	800855e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d01b      	beq.n	80085e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff ffad 	bl	8008508 <sync_window>
 80085ae:	4603      	mov	r3, r0
 80085b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d113      	bne.n	80085e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	7858      	ldrb	r0, [r3, #1]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80085c2:	2301      	movs	r3, #1
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	f7ff fee1 	bl	800838c <disk_read>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d004      	beq.n	80085da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80085d0:	f04f 33ff 	mov.w	r3, #4294967295
 80085d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b087      	sub	sp, #28
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80085f2:	f04f 33ff 	mov.w	r3, #4294967295
 80085f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d031      	beq.n	8008664 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	e002      	b.n	800860e <get_ldnumber+0x24>
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	3301      	adds	r3, #1
 800860c:	617b      	str	r3, [r7, #20]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b1f      	cmp	r3, #31
 8008614:	d903      	bls.n	800861e <get_ldnumber+0x34>
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b3a      	cmp	r3, #58	; 0x3a
 800861c:	d1f4      	bne.n	8008608 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b3a      	cmp	r3, #58	; 0x3a
 8008624:	d11c      	bne.n	8008660 <get_ldnumber+0x76>
			tp = *path;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	60fa      	str	r2, [r7, #12]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	3b30      	subs	r3, #48	; 0x30
 8008636:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b09      	cmp	r3, #9
 800863c:	d80e      	bhi.n	800865c <get_ldnumber+0x72>
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	429a      	cmp	r2, r3
 8008644:	d10a      	bne.n	800865c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d107      	bne.n	800865c <get_ldnumber+0x72>
					vol = (int)i;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	3301      	adds	r3, #1
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	e002      	b.n	8008666 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008660:	2300      	movs	r3, #0
 8008662:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008664:	693b      	ldr	r3, [r7, #16]
}
 8008666:	4618      	mov	r0, r3
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
	...

08008674 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	70da      	strb	r2, [r3, #3]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f04f 32ff 	mov.w	r2, #4294967295
 800868a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7ff ff7e 	bl	8008590 <move_window>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <check_fs+0x2a>
 800869a:	2304      	movs	r3, #4
 800869c:	e038      	b.n	8008710 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3338      	adds	r3, #56	; 0x38
 80086a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff fece 	bl	8008448 <ld_word>
 80086ac:	4603      	mov	r3, r0
 80086ae:	461a      	mov	r2, r3
 80086b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d001      	beq.n	80086bc <check_fs+0x48>
 80086b8:	2303      	movs	r3, #3
 80086ba:	e029      	b.n	8008710 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80086c2:	2be9      	cmp	r3, #233	; 0xe9
 80086c4:	d009      	beq.n	80086da <check_fs+0x66>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80086cc:	2beb      	cmp	r3, #235	; 0xeb
 80086ce:	d11e      	bne.n	800870e <check_fs+0x9a>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80086d6:	2b90      	cmp	r3, #144	; 0x90
 80086d8:	d119      	bne.n	800870e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3338      	adds	r3, #56	; 0x38
 80086de:	3336      	adds	r3, #54	; 0x36
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff fec9 	bl	8008478 <ld_dword>
 80086e6:	4603      	mov	r3, r0
 80086e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086ec:	4a0a      	ldr	r2, [pc, #40]	; (8008718 <check_fs+0xa4>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d101      	bne.n	80086f6 <check_fs+0x82>
 80086f2:	2300      	movs	r3, #0
 80086f4:	e00c      	b.n	8008710 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3338      	adds	r3, #56	; 0x38
 80086fa:	3352      	adds	r3, #82	; 0x52
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff febb 	bl	8008478 <ld_dword>
 8008702:	4602      	mov	r2, r0
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <check_fs+0xa8>)
 8008706:	429a      	cmp	r2, r3
 8008708:	d101      	bne.n	800870e <check_fs+0x9a>
 800870a:	2300      	movs	r3, #0
 800870c:	e000      	b.n	8008710 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800870e:	2302      	movs	r3, #2
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	00544146 	.word	0x00544146
 800871c:	33544146 	.word	0x33544146

08008720 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b096      	sub	sp, #88	; 0x58
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f7ff ff58 	bl	80085ea <get_ldnumber>
 800873a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800873c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873e:	2b00      	cmp	r3, #0
 8008740:	da01      	bge.n	8008746 <find_volume+0x26>
 8008742:	230b      	movs	r3, #11
 8008744:	e268      	b.n	8008c18 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008746:	4ab0      	ldr	r2, [pc, #704]	; (8008a08 <find_volume+0x2e8>)
 8008748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800874e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <find_volume+0x3a>
 8008756:	230c      	movs	r3, #12
 8008758:	e25e      	b.n	8008c18 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800875e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	f023 0301 	bic.w	r3, r3, #1
 8008766:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d01a      	beq.n	80087a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	785b      	ldrb	r3, [r3, #1]
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff fdc9 	bl	800830c <disk_status>
 800877a:	4603      	mov	r3, r0
 800877c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10c      	bne.n	80087a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d007      	beq.n	80087a2 <find_volume+0x82>
 8008792:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008796:	f003 0304 	and.w	r3, r3, #4
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800879e:	230a      	movs	r3, #10
 80087a0:	e23a      	b.n	8008c18 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80087a2:	2300      	movs	r3, #0
 80087a4:	e238      	b.n	8008c18 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	2200      	movs	r2, #0
 80087aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80087ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	785b      	ldrb	r3, [r3, #1]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fdc1 	bl	8008340 <disk_initialize>
 80087be:	4603      	mov	r3, r0
 80087c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80087c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80087d0:	2303      	movs	r3, #3
 80087d2:	e221      	b.n	8008c18 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <find_volume+0xca>
 80087da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087de:	f003 0304 	and.w	r3, r3, #4
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80087e6:	230a      	movs	r3, #10
 80087e8:	e216      	b.n	8008c18 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	7858      	ldrb	r0, [r3, #1]
 80087ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f0:	330c      	adds	r3, #12
 80087f2:	461a      	mov	r2, r3
 80087f4:	2102      	movs	r1, #2
 80087f6:	f7ff fe09 	bl	800840c <disk_ioctl>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <find_volume+0xe4>
 8008800:	2301      	movs	r3, #1
 8008802:	e209      	b.n	8008c18 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	899b      	ldrh	r3, [r3, #12]
 8008808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880c:	d80d      	bhi.n	800882a <find_volume+0x10a>
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	899b      	ldrh	r3, [r3, #12]
 8008812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008816:	d308      	bcc.n	800882a <find_volume+0x10a>
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	899b      	ldrh	r3, [r3, #12]
 800881c:	461a      	mov	r2, r3
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	899b      	ldrh	r3, [r3, #12]
 8008822:	3b01      	subs	r3, #1
 8008824:	4013      	ands	r3, r2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <find_volume+0x10e>
 800882a:	2301      	movs	r3, #1
 800882c:	e1f4      	b.n	8008c18 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008832:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008836:	f7ff ff1d 	bl	8008674 <check_fs>
 800883a:	4603      	mov	r3, r0
 800883c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008844:	2b02      	cmp	r3, #2
 8008846:	d14b      	bne.n	80088e0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008848:	2300      	movs	r3, #0
 800884a:	643b      	str	r3, [r7, #64]	; 0x40
 800884c:	e01f      	b.n	800888e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800885c:	4413      	add	r3, r2
 800885e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	3304      	adds	r3, #4
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d006      	beq.n	8008878 <find_volume+0x158>
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	3308      	adds	r3, #8
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff fe02 	bl	8008478 <ld_dword>
 8008874:	4602      	mov	r2, r0
 8008876:	e000      	b.n	800887a <find_volume+0x15a>
 8008878:	2200      	movs	r2, #0
 800887a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008882:	440b      	add	r3, r1
 8008884:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800888a:	3301      	adds	r3, #1
 800888c:	643b      	str	r3, [r7, #64]	; 0x40
 800888e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008890:	2b03      	cmp	r3, #3
 8008892:	d9dc      	bls.n	800884e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008894:	2300      	movs	r3, #0
 8008896:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <find_volume+0x184>
 800889e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a0:	3b01      	subs	r3, #1
 80088a2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80088a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80088ac:	4413      	add	r3, r2
 80088ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80088b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80088b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <find_volume+0x1a6>
 80088ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088be:	f7ff fed9 	bl	8008674 <check_fs>
 80088c2:	4603      	mov	r3, r0
 80088c4:	e000      	b.n	80088c8 <find_volume+0x1a8>
 80088c6:	2303      	movs	r3, #3
 80088c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80088cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d905      	bls.n	80088e0 <find_volume+0x1c0>
 80088d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d6:	3301      	adds	r3, #1
 80088d8:	643b      	str	r3, [r7, #64]	; 0x40
 80088da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d9e1      	bls.n	80088a4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80088e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d101      	bne.n	80088ec <find_volume+0x1cc>
 80088e8:	2301      	movs	r3, #1
 80088ea:	e195      	b.n	8008c18 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80088ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d901      	bls.n	80088f8 <find_volume+0x1d8>
 80088f4:	230d      	movs	r3, #13
 80088f6:	e18f      	b.n	8008c18 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	3338      	adds	r3, #56	; 0x38
 80088fc:	330b      	adds	r3, #11
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff fda2 	bl	8008448 <ld_word>
 8008904:	4603      	mov	r3, r0
 8008906:	461a      	mov	r2, r3
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	899b      	ldrh	r3, [r3, #12]
 800890c:	429a      	cmp	r2, r3
 800890e:	d001      	beq.n	8008914 <find_volume+0x1f4>
 8008910:	230d      	movs	r3, #13
 8008912:	e181      	b.n	8008c18 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	3338      	adds	r3, #56	; 0x38
 8008918:	3316      	adds	r3, #22
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff fd94 	bl	8008448 <ld_word>
 8008920:	4603      	mov	r3, r0
 8008922:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <find_volume+0x218>
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	3338      	adds	r3, #56	; 0x38
 800892e:	3324      	adds	r3, #36	; 0x24
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff fda1 	bl	8008478 <ld_dword>
 8008936:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800893c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800893e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008940:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	789b      	ldrb	r3, [r3, #2]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d005      	beq.n	800895c <find_volume+0x23c>
 8008950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008952:	789b      	ldrb	r3, [r3, #2]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d001      	beq.n	800895c <find_volume+0x23c>
 8008958:	230d      	movs	r3, #13
 800895a:	e15d      	b.n	8008c18 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895e:	789b      	ldrb	r3, [r3, #2]
 8008960:	461a      	mov	r2, r3
 8008962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008964:	fb02 f303 	mul.w	r3, r2, r3
 8008968:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008970:	b29a      	uxth	r2, r3
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	895b      	ldrh	r3, [r3, #10]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <find_volume+0x270>
 800897e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008980:	895b      	ldrh	r3, [r3, #10]
 8008982:	461a      	mov	r2, r3
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	895b      	ldrh	r3, [r3, #10]
 8008988:	3b01      	subs	r3, #1
 800898a:	4013      	ands	r3, r2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <find_volume+0x274>
 8008990:	230d      	movs	r3, #13
 8008992:	e141      	b.n	8008c18 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008996:	3338      	adds	r3, #56	; 0x38
 8008998:	3311      	adds	r3, #17
 800899a:	4618      	mov	r0, r3
 800899c:	f7ff fd54 	bl	8008448 <ld_word>
 80089a0:	4603      	mov	r3, r0
 80089a2:	461a      	mov	r2, r3
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80089a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089aa:	891b      	ldrh	r3, [r3, #8]
 80089ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ae:	8992      	ldrh	r2, [r2, #12]
 80089b0:	0952      	lsrs	r2, r2, #5
 80089b2:	b292      	uxth	r2, r2
 80089b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80089b8:	fb02 f201 	mul.w	r2, r2, r1
 80089bc:	1a9b      	subs	r3, r3, r2
 80089be:	b29b      	uxth	r3, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <find_volume+0x2a8>
 80089c4:	230d      	movs	r3, #13
 80089c6:	e127      	b.n	8008c18 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80089c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ca:	3338      	adds	r3, #56	; 0x38
 80089cc:	3313      	adds	r3, #19
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7ff fd3a 	bl	8008448 <ld_word>
 80089d4:	4603      	mov	r3, r0
 80089d6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80089d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d106      	bne.n	80089ec <find_volume+0x2cc>
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	3338      	adds	r3, #56	; 0x38
 80089e2:	3320      	adds	r3, #32
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff fd47 	bl	8008478 <ld_dword>
 80089ea:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	3338      	adds	r3, #56	; 0x38
 80089f0:	330e      	adds	r3, #14
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff fd28 	bl	8008448 <ld_word>
 80089f8:	4603      	mov	r3, r0
 80089fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80089fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d104      	bne.n	8008a0c <find_volume+0x2ec>
 8008a02:	230d      	movs	r3, #13
 8008a04:	e108      	b.n	8008c18 <find_volume+0x4f8>
 8008a06:	bf00      	nop
 8008a08:	200004a4 	.word	0x200004a4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008a0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a10:	4413      	add	r3, r2
 8008a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a14:	8911      	ldrh	r1, [r2, #8]
 8008a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a18:	8992      	ldrh	r2, [r2, #12]
 8008a1a:	0952      	lsrs	r2, r2, #5
 8008a1c:	b292      	uxth	r2, r2
 8008a1e:	fbb1 f2f2 	udiv	r2, r1, r2
 8008a22:	b292      	uxth	r2, r2
 8008a24:	4413      	add	r3, r2
 8008a26:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d201      	bcs.n	8008a34 <find_volume+0x314>
 8008a30:	230d      	movs	r3, #13
 8008a32:	e0f1      	b.n	8008c18 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a3c:	8952      	ldrh	r2, [r2, #10]
 8008a3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a42:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <find_volume+0x32e>
 8008a4a:	230d      	movs	r3, #13
 8008a4c:	e0e4      	b.n	8008c18 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d802      	bhi.n	8008a64 <find_volume+0x344>
 8008a5e:	2302      	movs	r3, #2
 8008a60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d802      	bhi.n	8008a74 <find_volume+0x354>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	1c9a      	adds	r2, r3, #2
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a80:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008a82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a86:	441a      	add	r2, r3
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008a8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a90:	441a      	add	r2, r3
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008a96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d11e      	bne.n	8008adc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	3338      	adds	r3, #56	; 0x38
 8008aa2:	332a      	adds	r3, #42	; 0x2a
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff fccf 	bl	8008448 <ld_word>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <find_volume+0x394>
 8008ab0:	230d      	movs	r3, #13
 8008ab2:	e0b1      	b.n	8008c18 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab6:	891b      	ldrh	r3, [r3, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <find_volume+0x3a0>
 8008abc:	230d      	movs	r3, #13
 8008abe:	e0ab      	b.n	8008c18 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	3338      	adds	r3, #56	; 0x38
 8008ac4:	332c      	adds	r3, #44	; 0x2c
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7ff fcd6 	bl	8008478 <ld_dword>
 8008acc:	4602      	mov	r2, r0
 8008ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8008ada:	e01f      	b.n	8008b1c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ade:	891b      	ldrh	r3, [r3, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <find_volume+0x3c8>
 8008ae4:	230d      	movs	r3, #13
 8008ae6:	e097      	b.n	8008c18 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aee:	441a      	add	r2, r3
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008af4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d103      	bne.n	8008b04 <find_volume+0x3e4>
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	e00a      	b.n	8008b1a <find_volume+0x3fa>
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	69da      	ldr	r2, [r3, #28]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	4413      	add	r3, r2
 8008b0e:	085a      	lsrs	r2, r3, #1
 8008b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008b1a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	6a1a      	ldr	r2, [r3, #32]
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	899b      	ldrh	r3, [r3, #12]
 8008b24:	4619      	mov	r1, r3
 8008b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b28:	440b      	add	r3, r1
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b2e:	8989      	ldrh	r1, [r1, #12]
 8008b30:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d201      	bcs.n	8008b3c <find_volume+0x41c>
 8008b38:	230d      	movs	r3, #13
 8008b3a:	e06d      	b.n	8008c18 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b42:	619a      	str	r2, [r3, #24]
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	699a      	ldr	r2, [r3, #24]
 8008b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	2280      	movs	r2, #128	; 0x80
 8008b50:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008b52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d149      	bne.n	8008bee <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5c:	3338      	adds	r3, #56	; 0x38
 8008b5e:	3330      	adds	r3, #48	; 0x30
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fc71 	bl	8008448 <ld_word>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d140      	bne.n	8008bee <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b6e:	3301      	adds	r3, #1
 8008b70:	4619      	mov	r1, r3
 8008b72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b74:	f7ff fd0c 	bl	8008590 <move_window>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d137      	bne.n	8008bee <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b80:	2200      	movs	r2, #0
 8008b82:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	3338      	adds	r3, #56	; 0x38
 8008b88:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff fc5b 	bl	8008448 <ld_word>
 8008b92:	4603      	mov	r3, r0
 8008b94:	461a      	mov	r2, r3
 8008b96:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d127      	bne.n	8008bee <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba0:	3338      	adds	r3, #56	; 0x38
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff fc68 	bl	8008478 <ld_dword>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	4b1d      	ldr	r3, [pc, #116]	; (8008c20 <find_volume+0x500>)
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d11e      	bne.n	8008bee <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	3338      	adds	r3, #56	; 0x38
 8008bb4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff fc5d 	bl	8008478 <ld_dword>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	4b18      	ldr	r3, [pc, #96]	; (8008c24 <find_volume+0x504>)
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d113      	bne.n	8008bee <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	3338      	adds	r3, #56	; 0x38
 8008bca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff fc52 	bl	8008478 <ld_dword>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	3338      	adds	r3, #56	; 0x38
 8008bde:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff fc48 	bl	8008478 <ld_dword>
 8008be8:	4602      	mov	r2, r0
 8008bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bec:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008bf4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008bf6:	4b0c      	ldr	r3, [pc, #48]	; (8008c28 <find_volume+0x508>)
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <find_volume+0x508>)
 8008c00:	801a      	strh	r2, [r3, #0]
 8008c02:	4b09      	ldr	r3, [pc, #36]	; (8008c28 <find_volume+0x508>)
 8008c04:	881a      	ldrh	r2, [r3, #0]
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	4a07      	ldr	r2, [pc, #28]	; (8008c2c <find_volume+0x50c>)
 8008c0e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008c10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c12:	f7ff fc55 	bl	80084c0 <clear_lock>
#endif
	return FR_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3758      	adds	r7, #88	; 0x58
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	41615252 	.word	0x41615252
 8008c24:	61417272 	.word	0x61417272
 8008c28:	200004a8 	.word	0x200004a8
 8008c2c:	200004cc 	.word	0x200004cc

08008c30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b088      	sub	sp, #32
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008c42:	f107 0310 	add.w	r3, r7, #16
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff fccf 	bl	80085ea <get_ldnumber>
 8008c4c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	da01      	bge.n	8008c58 <f_mount+0x28>
 8008c54:	230b      	movs	r3, #11
 8008c56:	e02b      	b.n	8008cb0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c58:	4a17      	ldr	r2, [pc, #92]	; (8008cb8 <f_mount+0x88>)
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c60:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008c68:	69b8      	ldr	r0, [r7, #24]
 8008c6a:	f7ff fc29 	bl	80084c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	2200      	movs	r2, #0
 8008c72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	490d      	ldr	r1, [pc, #52]	; (8008cb8 <f_mount+0x88>)
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d002      	beq.n	8008c96 <f_mount+0x66>
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d001      	beq.n	8008c9a <f_mount+0x6a>
 8008c96:	2300      	movs	r3, #0
 8008c98:	e00a      	b.n	8008cb0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008c9a:	f107 010c 	add.w	r1, r7, #12
 8008c9e:	f107 0308 	add.w	r3, r7, #8
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff fd3b 	bl	8008720 <find_volume>
 8008caa:	4603      	mov	r3, r0
 8008cac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3720      	adds	r7, #32
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	200004a4 	.word	0x200004a4

08008cbc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008cd2:	4b1f      	ldr	r3, [pc, #124]	; (8008d50 <FATFS_LinkDriverEx+0x94>)
 8008cd4:	7a5b      	ldrb	r3, [r3, #9]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d131      	bne.n	8008d40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008cdc:	4b1c      	ldr	r3, [pc, #112]	; (8008d50 <FATFS_LinkDriverEx+0x94>)
 8008cde:	7a5b      	ldrb	r3, [r3, #9]
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	4b1a      	ldr	r3, [pc, #104]	; (8008d50 <FATFS_LinkDriverEx+0x94>)
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008cea:	4b19      	ldr	r3, [pc, #100]	; (8008d50 <FATFS_LinkDriverEx+0x94>)
 8008cec:	7a5b      	ldrb	r3, [r3, #9]
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	4a17      	ldr	r2, [pc, #92]	; (8008d50 <FATFS_LinkDriverEx+0x94>)
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008cfa:	4b15      	ldr	r3, [pc, #84]	; (8008d50 <FATFS_LinkDriverEx+0x94>)
 8008cfc:	7a5b      	ldrb	r3, [r3, #9]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	4b13      	ldr	r3, [pc, #76]	; (8008d50 <FATFS_LinkDriverEx+0x94>)
 8008d04:	4413      	add	r3, r2
 8008d06:	79fa      	ldrb	r2, [r7, #7]
 8008d08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d0a:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <FATFS_LinkDriverEx+0x94>)
 8008d0c:	7a5b      	ldrb	r3, [r3, #9]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	b2d1      	uxtb	r1, r2
 8008d14:	4a0e      	ldr	r2, [pc, #56]	; (8008d50 <FATFS_LinkDriverEx+0x94>)
 8008d16:	7251      	strb	r1, [r2, #9]
 8008d18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d1a:	7dbb      	ldrb	r3, [r7, #22]
 8008d1c:	3330      	adds	r3, #48	; 0x30
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	3301      	adds	r3, #1
 8008d28:	223a      	movs	r2, #58	; 0x3a
 8008d2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	3302      	adds	r3, #2
 8008d30:	222f      	movs	r2, #47	; 0x2f
 8008d32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	3303      	adds	r3, #3
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	200006cc 	.word	0x200006cc

08008d54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d5e:	2200      	movs	r2, #0
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff ffaa 	bl	8008cbc <FATFS_LinkDriverEx>
 8008d68:	4603      	mov	r3, r0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <__errno>:
 8008d74:	4b01      	ldr	r3, [pc, #4]	; (8008d7c <__errno+0x8>)
 8008d76:	6818      	ldr	r0, [r3, #0]
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20000084 	.word	0x20000084

08008d80 <__libc_init_array>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	4e0d      	ldr	r6, [pc, #52]	; (8008db8 <__libc_init_array+0x38>)
 8008d84:	4c0d      	ldr	r4, [pc, #52]	; (8008dbc <__libc_init_array+0x3c>)
 8008d86:	1ba4      	subs	r4, r4, r6
 8008d88:	10a4      	asrs	r4, r4, #2
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	42a5      	cmp	r5, r4
 8008d8e:	d109      	bne.n	8008da4 <__libc_init_array+0x24>
 8008d90:	4e0b      	ldr	r6, [pc, #44]	; (8008dc0 <__libc_init_array+0x40>)
 8008d92:	4c0c      	ldr	r4, [pc, #48]	; (8008dc4 <__libc_init_array+0x44>)
 8008d94:	f002 fd66 	bl	800b864 <_init>
 8008d98:	1ba4      	subs	r4, r4, r6
 8008d9a:	10a4      	asrs	r4, r4, #2
 8008d9c:	2500      	movs	r5, #0
 8008d9e:	42a5      	cmp	r5, r4
 8008da0:	d105      	bne.n	8008dae <__libc_init_array+0x2e>
 8008da2:	bd70      	pop	{r4, r5, r6, pc}
 8008da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008da8:	4798      	blx	r3
 8008daa:	3501      	adds	r5, #1
 8008dac:	e7ee      	b.n	8008d8c <__libc_init_array+0xc>
 8008dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008db2:	4798      	blx	r3
 8008db4:	3501      	adds	r5, #1
 8008db6:	e7f2      	b.n	8008d9e <__libc_init_array+0x1e>
 8008db8:	0800bc40 	.word	0x0800bc40
 8008dbc:	0800bc40 	.word	0x0800bc40
 8008dc0:	0800bc40 	.word	0x0800bc40
 8008dc4:	0800bc44 	.word	0x0800bc44

08008dc8 <memcpy>:
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	1e43      	subs	r3, r0, #1
 8008dcc:	440a      	add	r2, r1
 8008dce:	4291      	cmp	r1, r2
 8008dd0:	d100      	bne.n	8008dd4 <memcpy+0xc>
 8008dd2:	bd10      	pop	{r4, pc}
 8008dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ddc:	e7f7      	b.n	8008dce <memcpy+0x6>

08008dde <memset>:
 8008dde:	4402      	add	r2, r0
 8008de0:	4603      	mov	r3, r0
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d100      	bne.n	8008de8 <memset+0xa>
 8008de6:	4770      	bx	lr
 8008de8:	f803 1b01 	strb.w	r1, [r3], #1
 8008dec:	e7f9      	b.n	8008de2 <memset+0x4>

08008dee <__cvt>:
 8008dee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008df2:	ec55 4b10 	vmov	r4, r5, d0
 8008df6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008df8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008dfc:	2d00      	cmp	r5, #0
 8008dfe:	460e      	mov	r6, r1
 8008e00:	4691      	mov	r9, r2
 8008e02:	4619      	mov	r1, r3
 8008e04:	bfb8      	it	lt
 8008e06:	4622      	movlt	r2, r4
 8008e08:	462b      	mov	r3, r5
 8008e0a:	f027 0720 	bic.w	r7, r7, #32
 8008e0e:	bfbb      	ittet	lt
 8008e10:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e14:	461d      	movlt	r5, r3
 8008e16:	2300      	movge	r3, #0
 8008e18:	232d      	movlt	r3, #45	; 0x2d
 8008e1a:	bfb8      	it	lt
 8008e1c:	4614      	movlt	r4, r2
 8008e1e:	2f46      	cmp	r7, #70	; 0x46
 8008e20:	700b      	strb	r3, [r1, #0]
 8008e22:	d004      	beq.n	8008e2e <__cvt+0x40>
 8008e24:	2f45      	cmp	r7, #69	; 0x45
 8008e26:	d100      	bne.n	8008e2a <__cvt+0x3c>
 8008e28:	3601      	adds	r6, #1
 8008e2a:	2102      	movs	r1, #2
 8008e2c:	e000      	b.n	8008e30 <__cvt+0x42>
 8008e2e:	2103      	movs	r1, #3
 8008e30:	ab03      	add	r3, sp, #12
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	ab02      	add	r3, sp, #8
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	4632      	mov	r2, r6
 8008e3a:	4653      	mov	r3, sl
 8008e3c:	ec45 4b10 	vmov	d0, r4, r5
 8008e40:	f000 fe1a 	bl	8009a78 <_dtoa_r>
 8008e44:	2f47      	cmp	r7, #71	; 0x47
 8008e46:	4680      	mov	r8, r0
 8008e48:	d102      	bne.n	8008e50 <__cvt+0x62>
 8008e4a:	f019 0f01 	tst.w	r9, #1
 8008e4e:	d026      	beq.n	8008e9e <__cvt+0xb0>
 8008e50:	2f46      	cmp	r7, #70	; 0x46
 8008e52:	eb08 0906 	add.w	r9, r8, r6
 8008e56:	d111      	bne.n	8008e7c <__cvt+0x8e>
 8008e58:	f898 3000 	ldrb.w	r3, [r8]
 8008e5c:	2b30      	cmp	r3, #48	; 0x30
 8008e5e:	d10a      	bne.n	8008e76 <__cvt+0x88>
 8008e60:	2200      	movs	r2, #0
 8008e62:	2300      	movs	r3, #0
 8008e64:	4620      	mov	r0, r4
 8008e66:	4629      	mov	r1, r5
 8008e68:	f7f7 fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e6c:	b918      	cbnz	r0, 8008e76 <__cvt+0x88>
 8008e6e:	f1c6 0601 	rsb	r6, r6, #1
 8008e72:	f8ca 6000 	str.w	r6, [sl]
 8008e76:	f8da 3000 	ldr.w	r3, [sl]
 8008e7a:	4499      	add	r9, r3
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2300      	movs	r3, #0
 8008e80:	4620      	mov	r0, r4
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7f7 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e88:	b938      	cbnz	r0, 8008e9a <__cvt+0xac>
 8008e8a:	2230      	movs	r2, #48	; 0x30
 8008e8c:	9b03      	ldr	r3, [sp, #12]
 8008e8e:	454b      	cmp	r3, r9
 8008e90:	d205      	bcs.n	8008e9e <__cvt+0xb0>
 8008e92:	1c59      	adds	r1, r3, #1
 8008e94:	9103      	str	r1, [sp, #12]
 8008e96:	701a      	strb	r2, [r3, #0]
 8008e98:	e7f8      	b.n	8008e8c <__cvt+0x9e>
 8008e9a:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e9e:	9b03      	ldr	r3, [sp, #12]
 8008ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ea2:	eba3 0308 	sub.w	r3, r3, r8
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	b004      	add	sp, #16
 8008eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008eb0 <__exponent>:
 8008eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eb2:	2900      	cmp	r1, #0
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	bfba      	itte	lt
 8008eb8:	4249      	neglt	r1, r1
 8008eba:	232d      	movlt	r3, #45	; 0x2d
 8008ebc:	232b      	movge	r3, #43	; 0x2b
 8008ebe:	2909      	cmp	r1, #9
 8008ec0:	f804 2b02 	strb.w	r2, [r4], #2
 8008ec4:	7043      	strb	r3, [r0, #1]
 8008ec6:	dd20      	ble.n	8008f0a <__exponent+0x5a>
 8008ec8:	f10d 0307 	add.w	r3, sp, #7
 8008ecc:	461f      	mov	r7, r3
 8008ece:	260a      	movs	r6, #10
 8008ed0:	fb91 f5f6 	sdiv	r5, r1, r6
 8008ed4:	fb06 1115 	mls	r1, r6, r5, r1
 8008ed8:	3130      	adds	r1, #48	; 0x30
 8008eda:	2d09      	cmp	r5, #9
 8008edc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ee0:	f103 32ff 	add.w	r2, r3, #4294967295
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	dc09      	bgt.n	8008efc <__exponent+0x4c>
 8008ee8:	3130      	adds	r1, #48	; 0x30
 8008eea:	3b02      	subs	r3, #2
 8008eec:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008ef0:	42bb      	cmp	r3, r7
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	d304      	bcc.n	8008f00 <__exponent+0x50>
 8008ef6:	1a10      	subs	r0, r2, r0
 8008ef8:	b003      	add	sp, #12
 8008efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008efc:	4613      	mov	r3, r2
 8008efe:	e7e7      	b.n	8008ed0 <__exponent+0x20>
 8008f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f04:	f804 2b01 	strb.w	r2, [r4], #1
 8008f08:	e7f2      	b.n	8008ef0 <__exponent+0x40>
 8008f0a:	2330      	movs	r3, #48	; 0x30
 8008f0c:	4419      	add	r1, r3
 8008f0e:	7083      	strb	r3, [r0, #2]
 8008f10:	1d02      	adds	r2, r0, #4
 8008f12:	70c1      	strb	r1, [r0, #3]
 8008f14:	e7ef      	b.n	8008ef6 <__exponent+0x46>
	...

08008f18 <_printf_float>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	b08d      	sub	sp, #52	; 0x34
 8008f1e:	460c      	mov	r4, r1
 8008f20:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008f24:	4616      	mov	r6, r2
 8008f26:	461f      	mov	r7, r3
 8008f28:	4605      	mov	r5, r0
 8008f2a:	f001 fcd7 	bl	800a8dc <_localeconv_r>
 8008f2e:	6803      	ldr	r3, [r0, #0]
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7f7 f94c 	bl	80001d0 <strlen>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f40:	9005      	str	r0, [sp, #20]
 8008f42:	3307      	adds	r3, #7
 8008f44:	f023 0307 	bic.w	r3, r3, #7
 8008f48:	f103 0208 	add.w	r2, r3, #8
 8008f4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008f50:	f8d4 b000 	ldr.w	fp, [r4]
 8008f54:	f8c8 2000 	str.w	r2, [r8]
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f60:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f68:	9307      	str	r3, [sp, #28]
 8008f6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f72:	4ba7      	ldr	r3, [pc, #668]	; (8009210 <_printf_float+0x2f8>)
 8008f74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f78:	f7f7 fdd8 	bl	8000b2c <__aeabi_dcmpun>
 8008f7c:	bb70      	cbnz	r0, 8008fdc <_printf_float+0xc4>
 8008f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f82:	4ba3      	ldr	r3, [pc, #652]	; (8009210 <_printf_float+0x2f8>)
 8008f84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f88:	f7f7 fdb2 	bl	8000af0 <__aeabi_dcmple>
 8008f8c:	bb30      	cbnz	r0, 8008fdc <_printf_float+0xc4>
 8008f8e:	2200      	movs	r2, #0
 8008f90:	2300      	movs	r3, #0
 8008f92:	4640      	mov	r0, r8
 8008f94:	4649      	mov	r1, r9
 8008f96:	f7f7 fda1 	bl	8000adc <__aeabi_dcmplt>
 8008f9a:	b110      	cbz	r0, 8008fa2 <_printf_float+0x8a>
 8008f9c:	232d      	movs	r3, #45	; 0x2d
 8008f9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa2:	4a9c      	ldr	r2, [pc, #624]	; (8009214 <_printf_float+0x2fc>)
 8008fa4:	4b9c      	ldr	r3, [pc, #624]	; (8009218 <_printf_float+0x300>)
 8008fa6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008faa:	bf8c      	ite	hi
 8008fac:	4690      	movhi	r8, r2
 8008fae:	4698      	movls	r8, r3
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	f02b 0204 	bic.w	r2, fp, #4
 8008fb6:	6123      	str	r3, [r4, #16]
 8008fb8:	6022      	str	r2, [r4, #0]
 8008fba:	f04f 0900 	mov.w	r9, #0
 8008fbe:	9700      	str	r7, [sp, #0]
 8008fc0:	4633      	mov	r3, r6
 8008fc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 f9e6 	bl	8009398 <_printf_common>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	f040 808d 	bne.w	80090ec <_printf_float+0x1d4>
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd6:	b00d      	add	sp, #52	; 0x34
 8008fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fdc:	4642      	mov	r2, r8
 8008fde:	464b      	mov	r3, r9
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	f7f7 fda2 	bl	8000b2c <__aeabi_dcmpun>
 8008fe8:	b110      	cbz	r0, 8008ff0 <_printf_float+0xd8>
 8008fea:	4a8c      	ldr	r2, [pc, #560]	; (800921c <_printf_float+0x304>)
 8008fec:	4b8c      	ldr	r3, [pc, #560]	; (8009220 <_printf_float+0x308>)
 8008fee:	e7da      	b.n	8008fa6 <_printf_float+0x8e>
 8008ff0:	6861      	ldr	r1, [r4, #4]
 8008ff2:	1c4b      	adds	r3, r1, #1
 8008ff4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008ff8:	a80a      	add	r0, sp, #40	; 0x28
 8008ffa:	d13e      	bne.n	800907a <_printf_float+0x162>
 8008ffc:	2306      	movs	r3, #6
 8008ffe:	6063      	str	r3, [r4, #4]
 8009000:	2300      	movs	r3, #0
 8009002:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009006:	ab09      	add	r3, sp, #36	; 0x24
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	ec49 8b10 	vmov	d0, r8, r9
 800900e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	f8cd a004 	str.w	sl, [sp, #4]
 8009018:	6861      	ldr	r1, [r4, #4]
 800901a:	4628      	mov	r0, r5
 800901c:	f7ff fee7 	bl	8008dee <__cvt>
 8009020:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009024:	2b47      	cmp	r3, #71	; 0x47
 8009026:	4680      	mov	r8, r0
 8009028:	d109      	bne.n	800903e <_printf_float+0x126>
 800902a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902c:	1cd8      	adds	r0, r3, #3
 800902e:	db02      	blt.n	8009036 <_printf_float+0x11e>
 8009030:	6862      	ldr	r2, [r4, #4]
 8009032:	4293      	cmp	r3, r2
 8009034:	dd47      	ble.n	80090c6 <_printf_float+0x1ae>
 8009036:	f1aa 0a02 	sub.w	sl, sl, #2
 800903a:	fa5f fa8a 	uxtb.w	sl, sl
 800903e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009042:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009044:	d824      	bhi.n	8009090 <_printf_float+0x178>
 8009046:	3901      	subs	r1, #1
 8009048:	4652      	mov	r2, sl
 800904a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800904e:	9109      	str	r1, [sp, #36]	; 0x24
 8009050:	f7ff ff2e 	bl	8008eb0 <__exponent>
 8009054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009056:	1813      	adds	r3, r2, r0
 8009058:	2a01      	cmp	r2, #1
 800905a:	4681      	mov	r9, r0
 800905c:	6123      	str	r3, [r4, #16]
 800905e:	dc02      	bgt.n	8009066 <_printf_float+0x14e>
 8009060:	6822      	ldr	r2, [r4, #0]
 8009062:	07d1      	lsls	r1, r2, #31
 8009064:	d501      	bpl.n	800906a <_printf_float+0x152>
 8009066:	3301      	adds	r3, #1
 8009068:	6123      	str	r3, [r4, #16]
 800906a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0a5      	beq.n	8008fbe <_printf_float+0xa6>
 8009072:	232d      	movs	r3, #45	; 0x2d
 8009074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009078:	e7a1      	b.n	8008fbe <_printf_float+0xa6>
 800907a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800907e:	f000 8177 	beq.w	8009370 <_printf_float+0x458>
 8009082:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009086:	d1bb      	bne.n	8009000 <_printf_float+0xe8>
 8009088:	2900      	cmp	r1, #0
 800908a:	d1b9      	bne.n	8009000 <_printf_float+0xe8>
 800908c:	2301      	movs	r3, #1
 800908e:	e7b6      	b.n	8008ffe <_printf_float+0xe6>
 8009090:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009094:	d119      	bne.n	80090ca <_printf_float+0x1b2>
 8009096:	2900      	cmp	r1, #0
 8009098:	6863      	ldr	r3, [r4, #4]
 800909a:	dd0c      	ble.n	80090b6 <_printf_float+0x19e>
 800909c:	6121      	str	r1, [r4, #16]
 800909e:	b913      	cbnz	r3, 80090a6 <_printf_float+0x18e>
 80090a0:	6822      	ldr	r2, [r4, #0]
 80090a2:	07d2      	lsls	r2, r2, #31
 80090a4:	d502      	bpl.n	80090ac <_printf_float+0x194>
 80090a6:	3301      	adds	r3, #1
 80090a8:	440b      	add	r3, r1
 80090aa:	6123      	str	r3, [r4, #16]
 80090ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80090b0:	f04f 0900 	mov.w	r9, #0
 80090b4:	e7d9      	b.n	800906a <_printf_float+0x152>
 80090b6:	b913      	cbnz	r3, 80090be <_printf_float+0x1a6>
 80090b8:	6822      	ldr	r2, [r4, #0]
 80090ba:	07d0      	lsls	r0, r2, #31
 80090bc:	d501      	bpl.n	80090c2 <_printf_float+0x1aa>
 80090be:	3302      	adds	r3, #2
 80090c0:	e7f3      	b.n	80090aa <_printf_float+0x192>
 80090c2:	2301      	movs	r3, #1
 80090c4:	e7f1      	b.n	80090aa <_printf_float+0x192>
 80090c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80090ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80090ce:	4293      	cmp	r3, r2
 80090d0:	db05      	blt.n	80090de <_printf_float+0x1c6>
 80090d2:	6822      	ldr	r2, [r4, #0]
 80090d4:	6123      	str	r3, [r4, #16]
 80090d6:	07d1      	lsls	r1, r2, #31
 80090d8:	d5e8      	bpl.n	80090ac <_printf_float+0x194>
 80090da:	3301      	adds	r3, #1
 80090dc:	e7e5      	b.n	80090aa <_printf_float+0x192>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	bfd4      	ite	le
 80090e2:	f1c3 0302 	rsble	r3, r3, #2
 80090e6:	2301      	movgt	r3, #1
 80090e8:	4413      	add	r3, r2
 80090ea:	e7de      	b.n	80090aa <_printf_float+0x192>
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	055a      	lsls	r2, r3, #21
 80090f0:	d407      	bmi.n	8009102 <_printf_float+0x1ea>
 80090f2:	6923      	ldr	r3, [r4, #16]
 80090f4:	4642      	mov	r2, r8
 80090f6:	4631      	mov	r1, r6
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b8      	blx	r7
 80090fc:	3001      	adds	r0, #1
 80090fe:	d12b      	bne.n	8009158 <_printf_float+0x240>
 8009100:	e767      	b.n	8008fd2 <_printf_float+0xba>
 8009102:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009106:	f240 80dc 	bls.w	80092c2 <_printf_float+0x3aa>
 800910a:	2200      	movs	r2, #0
 800910c:	2300      	movs	r3, #0
 800910e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009112:	f7f7 fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009116:	2800      	cmp	r0, #0
 8009118:	d033      	beq.n	8009182 <_printf_float+0x26a>
 800911a:	2301      	movs	r3, #1
 800911c:	4a41      	ldr	r2, [pc, #260]	; (8009224 <_printf_float+0x30c>)
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	47b8      	blx	r7
 8009124:	3001      	adds	r0, #1
 8009126:	f43f af54 	beq.w	8008fd2 <_printf_float+0xba>
 800912a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800912e:	429a      	cmp	r2, r3
 8009130:	db02      	blt.n	8009138 <_printf_float+0x220>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	07d8      	lsls	r0, r3, #31
 8009136:	d50f      	bpl.n	8009158 <_printf_float+0x240>
 8009138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800913c:	4631      	mov	r1, r6
 800913e:	4628      	mov	r0, r5
 8009140:	47b8      	blx	r7
 8009142:	3001      	adds	r0, #1
 8009144:	f43f af45 	beq.w	8008fd2 <_printf_float+0xba>
 8009148:	f04f 0800 	mov.w	r8, #0
 800914c:	f104 091a 	add.w	r9, r4, #26
 8009150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009152:	3b01      	subs	r3, #1
 8009154:	4543      	cmp	r3, r8
 8009156:	dc09      	bgt.n	800916c <_printf_float+0x254>
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	079b      	lsls	r3, r3, #30
 800915c:	f100 8103 	bmi.w	8009366 <_printf_float+0x44e>
 8009160:	68e0      	ldr	r0, [r4, #12]
 8009162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009164:	4298      	cmp	r0, r3
 8009166:	bfb8      	it	lt
 8009168:	4618      	movlt	r0, r3
 800916a:	e734      	b.n	8008fd6 <_printf_float+0xbe>
 800916c:	2301      	movs	r3, #1
 800916e:	464a      	mov	r2, r9
 8009170:	4631      	mov	r1, r6
 8009172:	4628      	mov	r0, r5
 8009174:	47b8      	blx	r7
 8009176:	3001      	adds	r0, #1
 8009178:	f43f af2b 	beq.w	8008fd2 <_printf_float+0xba>
 800917c:	f108 0801 	add.w	r8, r8, #1
 8009180:	e7e6      	b.n	8009150 <_printf_float+0x238>
 8009182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009184:	2b00      	cmp	r3, #0
 8009186:	dc2b      	bgt.n	80091e0 <_printf_float+0x2c8>
 8009188:	2301      	movs	r3, #1
 800918a:	4a26      	ldr	r2, [pc, #152]	; (8009224 <_printf_float+0x30c>)
 800918c:	4631      	mov	r1, r6
 800918e:	4628      	mov	r0, r5
 8009190:	47b8      	blx	r7
 8009192:	3001      	adds	r0, #1
 8009194:	f43f af1d 	beq.w	8008fd2 <_printf_float+0xba>
 8009198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919a:	b923      	cbnz	r3, 80091a6 <_printf_float+0x28e>
 800919c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800919e:	b913      	cbnz	r3, 80091a6 <_printf_float+0x28e>
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	07d9      	lsls	r1, r3, #31
 80091a4:	d5d8      	bpl.n	8009158 <_printf_float+0x240>
 80091a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	f43f af0e 	beq.w	8008fd2 <_printf_float+0xba>
 80091b6:	f04f 0900 	mov.w	r9, #0
 80091ba:	f104 0a1a 	add.w	sl, r4, #26
 80091be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c0:	425b      	negs	r3, r3
 80091c2:	454b      	cmp	r3, r9
 80091c4:	dc01      	bgt.n	80091ca <_printf_float+0x2b2>
 80091c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c8:	e794      	b.n	80090f4 <_printf_float+0x1dc>
 80091ca:	2301      	movs	r3, #1
 80091cc:	4652      	mov	r2, sl
 80091ce:	4631      	mov	r1, r6
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b8      	blx	r7
 80091d4:	3001      	adds	r0, #1
 80091d6:	f43f aefc 	beq.w	8008fd2 <_printf_float+0xba>
 80091da:	f109 0901 	add.w	r9, r9, #1
 80091de:	e7ee      	b.n	80091be <_printf_float+0x2a6>
 80091e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091e4:	429a      	cmp	r2, r3
 80091e6:	bfa8      	it	ge
 80091e8:	461a      	movge	r2, r3
 80091ea:	2a00      	cmp	r2, #0
 80091ec:	4691      	mov	r9, r2
 80091ee:	dd07      	ble.n	8009200 <_printf_float+0x2e8>
 80091f0:	4613      	mov	r3, r2
 80091f2:	4631      	mov	r1, r6
 80091f4:	4642      	mov	r2, r8
 80091f6:	4628      	mov	r0, r5
 80091f8:	47b8      	blx	r7
 80091fa:	3001      	adds	r0, #1
 80091fc:	f43f aee9 	beq.w	8008fd2 <_printf_float+0xba>
 8009200:	f104 031a 	add.w	r3, r4, #26
 8009204:	f04f 0b00 	mov.w	fp, #0
 8009208:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800920c:	9306      	str	r3, [sp, #24]
 800920e:	e015      	b.n	800923c <_printf_float+0x324>
 8009210:	7fefffff 	.word	0x7fefffff
 8009214:	0800b97c 	.word	0x0800b97c
 8009218:	0800b978 	.word	0x0800b978
 800921c:	0800b984 	.word	0x0800b984
 8009220:	0800b980 	.word	0x0800b980
 8009224:	0800b988 	.word	0x0800b988
 8009228:	2301      	movs	r3, #1
 800922a:	9a06      	ldr	r2, [sp, #24]
 800922c:	4631      	mov	r1, r6
 800922e:	4628      	mov	r0, r5
 8009230:	47b8      	blx	r7
 8009232:	3001      	adds	r0, #1
 8009234:	f43f aecd 	beq.w	8008fd2 <_printf_float+0xba>
 8009238:	f10b 0b01 	add.w	fp, fp, #1
 800923c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009240:	ebaa 0309 	sub.w	r3, sl, r9
 8009244:	455b      	cmp	r3, fp
 8009246:	dcef      	bgt.n	8009228 <_printf_float+0x310>
 8009248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800924c:	429a      	cmp	r2, r3
 800924e:	44d0      	add	r8, sl
 8009250:	db15      	blt.n	800927e <_printf_float+0x366>
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	07da      	lsls	r2, r3, #31
 8009256:	d412      	bmi.n	800927e <_printf_float+0x366>
 8009258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800925c:	eba3 020a 	sub.w	r2, r3, sl
 8009260:	eba3 0a01 	sub.w	sl, r3, r1
 8009264:	4592      	cmp	sl, r2
 8009266:	bfa8      	it	ge
 8009268:	4692      	movge	sl, r2
 800926a:	f1ba 0f00 	cmp.w	sl, #0
 800926e:	dc0e      	bgt.n	800928e <_printf_float+0x376>
 8009270:	f04f 0800 	mov.w	r8, #0
 8009274:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009278:	f104 091a 	add.w	r9, r4, #26
 800927c:	e019      	b.n	80092b2 <_printf_float+0x39a>
 800927e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	47b8      	blx	r7
 8009288:	3001      	adds	r0, #1
 800928a:	d1e5      	bne.n	8009258 <_printf_float+0x340>
 800928c:	e6a1      	b.n	8008fd2 <_printf_float+0xba>
 800928e:	4653      	mov	r3, sl
 8009290:	4642      	mov	r2, r8
 8009292:	4631      	mov	r1, r6
 8009294:	4628      	mov	r0, r5
 8009296:	47b8      	blx	r7
 8009298:	3001      	adds	r0, #1
 800929a:	d1e9      	bne.n	8009270 <_printf_float+0x358>
 800929c:	e699      	b.n	8008fd2 <_printf_float+0xba>
 800929e:	2301      	movs	r3, #1
 80092a0:	464a      	mov	r2, r9
 80092a2:	4631      	mov	r1, r6
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	f43f ae92 	beq.w	8008fd2 <_printf_float+0xba>
 80092ae:	f108 0801 	add.w	r8, r8, #1
 80092b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092b6:	1a9b      	subs	r3, r3, r2
 80092b8:	eba3 030a 	sub.w	r3, r3, sl
 80092bc:	4543      	cmp	r3, r8
 80092be:	dcee      	bgt.n	800929e <_printf_float+0x386>
 80092c0:	e74a      	b.n	8009158 <_printf_float+0x240>
 80092c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092c4:	2a01      	cmp	r2, #1
 80092c6:	dc01      	bgt.n	80092cc <_printf_float+0x3b4>
 80092c8:	07db      	lsls	r3, r3, #31
 80092ca:	d53a      	bpl.n	8009342 <_printf_float+0x42a>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4642      	mov	r2, r8
 80092d0:	4631      	mov	r1, r6
 80092d2:	4628      	mov	r0, r5
 80092d4:	47b8      	blx	r7
 80092d6:	3001      	adds	r0, #1
 80092d8:	f43f ae7b 	beq.w	8008fd2 <_printf_float+0xba>
 80092dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092e0:	4631      	mov	r1, r6
 80092e2:	4628      	mov	r0, r5
 80092e4:	47b8      	blx	r7
 80092e6:	3001      	adds	r0, #1
 80092e8:	f108 0801 	add.w	r8, r8, #1
 80092ec:	f43f ae71 	beq.w	8008fd2 <_printf_float+0xba>
 80092f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f2:	2200      	movs	r2, #0
 80092f4:	f103 3aff 	add.w	sl, r3, #4294967295
 80092f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092fc:	2300      	movs	r3, #0
 80092fe:	f7f7 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009302:	b9c8      	cbnz	r0, 8009338 <_printf_float+0x420>
 8009304:	4653      	mov	r3, sl
 8009306:	4642      	mov	r2, r8
 8009308:	4631      	mov	r1, r6
 800930a:	4628      	mov	r0, r5
 800930c:	47b8      	blx	r7
 800930e:	3001      	adds	r0, #1
 8009310:	d10e      	bne.n	8009330 <_printf_float+0x418>
 8009312:	e65e      	b.n	8008fd2 <_printf_float+0xba>
 8009314:	2301      	movs	r3, #1
 8009316:	4652      	mov	r2, sl
 8009318:	4631      	mov	r1, r6
 800931a:	4628      	mov	r0, r5
 800931c:	47b8      	blx	r7
 800931e:	3001      	adds	r0, #1
 8009320:	f43f ae57 	beq.w	8008fd2 <_printf_float+0xba>
 8009324:	f108 0801 	add.w	r8, r8, #1
 8009328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800932a:	3b01      	subs	r3, #1
 800932c:	4543      	cmp	r3, r8
 800932e:	dcf1      	bgt.n	8009314 <_printf_float+0x3fc>
 8009330:	464b      	mov	r3, r9
 8009332:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009336:	e6de      	b.n	80090f6 <_printf_float+0x1de>
 8009338:	f04f 0800 	mov.w	r8, #0
 800933c:	f104 0a1a 	add.w	sl, r4, #26
 8009340:	e7f2      	b.n	8009328 <_printf_float+0x410>
 8009342:	2301      	movs	r3, #1
 8009344:	e7df      	b.n	8009306 <_printf_float+0x3ee>
 8009346:	2301      	movs	r3, #1
 8009348:	464a      	mov	r2, r9
 800934a:	4631      	mov	r1, r6
 800934c:	4628      	mov	r0, r5
 800934e:	47b8      	blx	r7
 8009350:	3001      	adds	r0, #1
 8009352:	f43f ae3e 	beq.w	8008fd2 <_printf_float+0xba>
 8009356:	f108 0801 	add.w	r8, r8, #1
 800935a:	68e3      	ldr	r3, [r4, #12]
 800935c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800935e:	1a9b      	subs	r3, r3, r2
 8009360:	4543      	cmp	r3, r8
 8009362:	dcf0      	bgt.n	8009346 <_printf_float+0x42e>
 8009364:	e6fc      	b.n	8009160 <_printf_float+0x248>
 8009366:	f04f 0800 	mov.w	r8, #0
 800936a:	f104 0919 	add.w	r9, r4, #25
 800936e:	e7f4      	b.n	800935a <_printf_float+0x442>
 8009370:	2900      	cmp	r1, #0
 8009372:	f43f ae8b 	beq.w	800908c <_printf_float+0x174>
 8009376:	2300      	movs	r3, #0
 8009378:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800937c:	ab09      	add	r3, sp, #36	; 0x24
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	ec49 8b10 	vmov	d0, r8, r9
 8009384:	6022      	str	r2, [r4, #0]
 8009386:	f8cd a004 	str.w	sl, [sp, #4]
 800938a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800938e:	4628      	mov	r0, r5
 8009390:	f7ff fd2d 	bl	8008dee <__cvt>
 8009394:	4680      	mov	r8, r0
 8009396:	e648      	b.n	800902a <_printf_float+0x112>

08009398 <_printf_common>:
 8009398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800939c:	4691      	mov	r9, r2
 800939e:	461f      	mov	r7, r3
 80093a0:	688a      	ldr	r2, [r1, #8]
 80093a2:	690b      	ldr	r3, [r1, #16]
 80093a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093a8:	4293      	cmp	r3, r2
 80093aa:	bfb8      	it	lt
 80093ac:	4613      	movlt	r3, r2
 80093ae:	f8c9 3000 	str.w	r3, [r9]
 80093b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093b6:	4606      	mov	r6, r0
 80093b8:	460c      	mov	r4, r1
 80093ba:	b112      	cbz	r2, 80093c2 <_printf_common+0x2a>
 80093bc:	3301      	adds	r3, #1
 80093be:	f8c9 3000 	str.w	r3, [r9]
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	0699      	lsls	r1, r3, #26
 80093c6:	bf42      	ittt	mi
 80093c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80093cc:	3302      	addmi	r3, #2
 80093ce:	f8c9 3000 	strmi.w	r3, [r9]
 80093d2:	6825      	ldr	r5, [r4, #0]
 80093d4:	f015 0506 	ands.w	r5, r5, #6
 80093d8:	d107      	bne.n	80093ea <_printf_common+0x52>
 80093da:	f104 0a19 	add.w	sl, r4, #25
 80093de:	68e3      	ldr	r3, [r4, #12]
 80093e0:	f8d9 2000 	ldr.w	r2, [r9]
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	42ab      	cmp	r3, r5
 80093e8:	dc28      	bgt.n	800943c <_printf_common+0xa4>
 80093ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80093ee:	6822      	ldr	r2, [r4, #0]
 80093f0:	3300      	adds	r3, #0
 80093f2:	bf18      	it	ne
 80093f4:	2301      	movne	r3, #1
 80093f6:	0692      	lsls	r2, r2, #26
 80093f8:	d42d      	bmi.n	8009456 <_printf_common+0xbe>
 80093fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093fe:	4639      	mov	r1, r7
 8009400:	4630      	mov	r0, r6
 8009402:	47c0      	blx	r8
 8009404:	3001      	adds	r0, #1
 8009406:	d020      	beq.n	800944a <_printf_common+0xb2>
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	68e5      	ldr	r5, [r4, #12]
 800940c:	f8d9 2000 	ldr.w	r2, [r9]
 8009410:	f003 0306 	and.w	r3, r3, #6
 8009414:	2b04      	cmp	r3, #4
 8009416:	bf08      	it	eq
 8009418:	1aad      	subeq	r5, r5, r2
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	6922      	ldr	r2, [r4, #16]
 800941e:	bf0c      	ite	eq
 8009420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009424:	2500      	movne	r5, #0
 8009426:	4293      	cmp	r3, r2
 8009428:	bfc4      	itt	gt
 800942a:	1a9b      	subgt	r3, r3, r2
 800942c:	18ed      	addgt	r5, r5, r3
 800942e:	f04f 0900 	mov.w	r9, #0
 8009432:	341a      	adds	r4, #26
 8009434:	454d      	cmp	r5, r9
 8009436:	d11a      	bne.n	800946e <_printf_common+0xd6>
 8009438:	2000      	movs	r0, #0
 800943a:	e008      	b.n	800944e <_printf_common+0xb6>
 800943c:	2301      	movs	r3, #1
 800943e:	4652      	mov	r2, sl
 8009440:	4639      	mov	r1, r7
 8009442:	4630      	mov	r0, r6
 8009444:	47c0      	blx	r8
 8009446:	3001      	adds	r0, #1
 8009448:	d103      	bne.n	8009452 <_printf_common+0xba>
 800944a:	f04f 30ff 	mov.w	r0, #4294967295
 800944e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009452:	3501      	adds	r5, #1
 8009454:	e7c3      	b.n	80093de <_printf_common+0x46>
 8009456:	18e1      	adds	r1, r4, r3
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	2030      	movs	r0, #48	; 0x30
 800945c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009460:	4422      	add	r2, r4
 8009462:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009466:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800946a:	3302      	adds	r3, #2
 800946c:	e7c5      	b.n	80093fa <_printf_common+0x62>
 800946e:	2301      	movs	r3, #1
 8009470:	4622      	mov	r2, r4
 8009472:	4639      	mov	r1, r7
 8009474:	4630      	mov	r0, r6
 8009476:	47c0      	blx	r8
 8009478:	3001      	adds	r0, #1
 800947a:	d0e6      	beq.n	800944a <_printf_common+0xb2>
 800947c:	f109 0901 	add.w	r9, r9, #1
 8009480:	e7d8      	b.n	8009434 <_printf_common+0x9c>
	...

08009484 <_printf_i>:
 8009484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009488:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800948c:	460c      	mov	r4, r1
 800948e:	7e09      	ldrb	r1, [r1, #24]
 8009490:	b085      	sub	sp, #20
 8009492:	296e      	cmp	r1, #110	; 0x6e
 8009494:	4617      	mov	r7, r2
 8009496:	4606      	mov	r6, r0
 8009498:	4698      	mov	r8, r3
 800949a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800949c:	f000 80b3 	beq.w	8009606 <_printf_i+0x182>
 80094a0:	d822      	bhi.n	80094e8 <_printf_i+0x64>
 80094a2:	2963      	cmp	r1, #99	; 0x63
 80094a4:	d036      	beq.n	8009514 <_printf_i+0x90>
 80094a6:	d80a      	bhi.n	80094be <_printf_i+0x3a>
 80094a8:	2900      	cmp	r1, #0
 80094aa:	f000 80b9 	beq.w	8009620 <_printf_i+0x19c>
 80094ae:	2958      	cmp	r1, #88	; 0x58
 80094b0:	f000 8083 	beq.w	80095ba <_printf_i+0x136>
 80094b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80094bc:	e032      	b.n	8009524 <_printf_i+0xa0>
 80094be:	2964      	cmp	r1, #100	; 0x64
 80094c0:	d001      	beq.n	80094c6 <_printf_i+0x42>
 80094c2:	2969      	cmp	r1, #105	; 0x69
 80094c4:	d1f6      	bne.n	80094b4 <_printf_i+0x30>
 80094c6:	6820      	ldr	r0, [r4, #0]
 80094c8:	6813      	ldr	r3, [r2, #0]
 80094ca:	0605      	lsls	r5, r0, #24
 80094cc:	f103 0104 	add.w	r1, r3, #4
 80094d0:	d52a      	bpl.n	8009528 <_printf_i+0xa4>
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6011      	str	r1, [r2, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	da03      	bge.n	80094e2 <_printf_i+0x5e>
 80094da:	222d      	movs	r2, #45	; 0x2d
 80094dc:	425b      	negs	r3, r3
 80094de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80094e2:	486f      	ldr	r0, [pc, #444]	; (80096a0 <_printf_i+0x21c>)
 80094e4:	220a      	movs	r2, #10
 80094e6:	e039      	b.n	800955c <_printf_i+0xd8>
 80094e8:	2973      	cmp	r1, #115	; 0x73
 80094ea:	f000 809d 	beq.w	8009628 <_printf_i+0x1a4>
 80094ee:	d808      	bhi.n	8009502 <_printf_i+0x7e>
 80094f0:	296f      	cmp	r1, #111	; 0x6f
 80094f2:	d020      	beq.n	8009536 <_printf_i+0xb2>
 80094f4:	2970      	cmp	r1, #112	; 0x70
 80094f6:	d1dd      	bne.n	80094b4 <_printf_i+0x30>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	f043 0320 	orr.w	r3, r3, #32
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	e003      	b.n	800950a <_printf_i+0x86>
 8009502:	2975      	cmp	r1, #117	; 0x75
 8009504:	d017      	beq.n	8009536 <_printf_i+0xb2>
 8009506:	2978      	cmp	r1, #120	; 0x78
 8009508:	d1d4      	bne.n	80094b4 <_printf_i+0x30>
 800950a:	2378      	movs	r3, #120	; 0x78
 800950c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009510:	4864      	ldr	r0, [pc, #400]	; (80096a4 <_printf_i+0x220>)
 8009512:	e055      	b.n	80095c0 <_printf_i+0x13c>
 8009514:	6813      	ldr	r3, [r2, #0]
 8009516:	1d19      	adds	r1, r3, #4
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6011      	str	r1, [r2, #0]
 800951c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009524:	2301      	movs	r3, #1
 8009526:	e08c      	b.n	8009642 <_printf_i+0x1be>
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6011      	str	r1, [r2, #0]
 800952c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009530:	bf18      	it	ne
 8009532:	b21b      	sxthne	r3, r3
 8009534:	e7cf      	b.n	80094d6 <_printf_i+0x52>
 8009536:	6813      	ldr	r3, [r2, #0]
 8009538:	6825      	ldr	r5, [r4, #0]
 800953a:	1d18      	adds	r0, r3, #4
 800953c:	6010      	str	r0, [r2, #0]
 800953e:	0628      	lsls	r0, r5, #24
 8009540:	d501      	bpl.n	8009546 <_printf_i+0xc2>
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	e002      	b.n	800954c <_printf_i+0xc8>
 8009546:	0668      	lsls	r0, r5, #25
 8009548:	d5fb      	bpl.n	8009542 <_printf_i+0xbe>
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	4854      	ldr	r0, [pc, #336]	; (80096a0 <_printf_i+0x21c>)
 800954e:	296f      	cmp	r1, #111	; 0x6f
 8009550:	bf14      	ite	ne
 8009552:	220a      	movne	r2, #10
 8009554:	2208      	moveq	r2, #8
 8009556:	2100      	movs	r1, #0
 8009558:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800955c:	6865      	ldr	r5, [r4, #4]
 800955e:	60a5      	str	r5, [r4, #8]
 8009560:	2d00      	cmp	r5, #0
 8009562:	f2c0 8095 	blt.w	8009690 <_printf_i+0x20c>
 8009566:	6821      	ldr	r1, [r4, #0]
 8009568:	f021 0104 	bic.w	r1, r1, #4
 800956c:	6021      	str	r1, [r4, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d13d      	bne.n	80095ee <_printf_i+0x16a>
 8009572:	2d00      	cmp	r5, #0
 8009574:	f040 808e 	bne.w	8009694 <_printf_i+0x210>
 8009578:	4665      	mov	r5, ip
 800957a:	2a08      	cmp	r2, #8
 800957c:	d10b      	bne.n	8009596 <_printf_i+0x112>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	07db      	lsls	r3, r3, #31
 8009582:	d508      	bpl.n	8009596 <_printf_i+0x112>
 8009584:	6923      	ldr	r3, [r4, #16]
 8009586:	6862      	ldr	r2, [r4, #4]
 8009588:	429a      	cmp	r2, r3
 800958a:	bfde      	ittt	le
 800958c:	2330      	movle	r3, #48	; 0x30
 800958e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009592:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009596:	ebac 0305 	sub.w	r3, ip, r5
 800959a:	6123      	str	r3, [r4, #16]
 800959c:	f8cd 8000 	str.w	r8, [sp]
 80095a0:	463b      	mov	r3, r7
 80095a2:	aa03      	add	r2, sp, #12
 80095a4:	4621      	mov	r1, r4
 80095a6:	4630      	mov	r0, r6
 80095a8:	f7ff fef6 	bl	8009398 <_printf_common>
 80095ac:	3001      	adds	r0, #1
 80095ae:	d14d      	bne.n	800964c <_printf_i+0x1c8>
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295
 80095b4:	b005      	add	sp, #20
 80095b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095ba:	4839      	ldr	r0, [pc, #228]	; (80096a0 <_printf_i+0x21c>)
 80095bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80095c0:	6813      	ldr	r3, [r2, #0]
 80095c2:	6821      	ldr	r1, [r4, #0]
 80095c4:	1d1d      	adds	r5, r3, #4
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6015      	str	r5, [r2, #0]
 80095ca:	060a      	lsls	r2, r1, #24
 80095cc:	d50b      	bpl.n	80095e6 <_printf_i+0x162>
 80095ce:	07ca      	lsls	r2, r1, #31
 80095d0:	bf44      	itt	mi
 80095d2:	f041 0120 	orrmi.w	r1, r1, #32
 80095d6:	6021      	strmi	r1, [r4, #0]
 80095d8:	b91b      	cbnz	r3, 80095e2 <_printf_i+0x15e>
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	f022 0220 	bic.w	r2, r2, #32
 80095e0:	6022      	str	r2, [r4, #0]
 80095e2:	2210      	movs	r2, #16
 80095e4:	e7b7      	b.n	8009556 <_printf_i+0xd2>
 80095e6:	064d      	lsls	r5, r1, #25
 80095e8:	bf48      	it	mi
 80095ea:	b29b      	uxthmi	r3, r3
 80095ec:	e7ef      	b.n	80095ce <_printf_i+0x14a>
 80095ee:	4665      	mov	r5, ip
 80095f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80095f4:	fb02 3311 	mls	r3, r2, r1, r3
 80095f8:	5cc3      	ldrb	r3, [r0, r3]
 80095fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80095fe:	460b      	mov	r3, r1
 8009600:	2900      	cmp	r1, #0
 8009602:	d1f5      	bne.n	80095f0 <_printf_i+0x16c>
 8009604:	e7b9      	b.n	800957a <_printf_i+0xf6>
 8009606:	6813      	ldr	r3, [r2, #0]
 8009608:	6825      	ldr	r5, [r4, #0]
 800960a:	6961      	ldr	r1, [r4, #20]
 800960c:	1d18      	adds	r0, r3, #4
 800960e:	6010      	str	r0, [r2, #0]
 8009610:	0628      	lsls	r0, r5, #24
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	d501      	bpl.n	800961a <_printf_i+0x196>
 8009616:	6019      	str	r1, [r3, #0]
 8009618:	e002      	b.n	8009620 <_printf_i+0x19c>
 800961a:	066a      	lsls	r2, r5, #25
 800961c:	d5fb      	bpl.n	8009616 <_printf_i+0x192>
 800961e:	8019      	strh	r1, [r3, #0]
 8009620:	2300      	movs	r3, #0
 8009622:	6123      	str	r3, [r4, #16]
 8009624:	4665      	mov	r5, ip
 8009626:	e7b9      	b.n	800959c <_printf_i+0x118>
 8009628:	6813      	ldr	r3, [r2, #0]
 800962a:	1d19      	adds	r1, r3, #4
 800962c:	6011      	str	r1, [r2, #0]
 800962e:	681d      	ldr	r5, [r3, #0]
 8009630:	6862      	ldr	r2, [r4, #4]
 8009632:	2100      	movs	r1, #0
 8009634:	4628      	mov	r0, r5
 8009636:	f7f6 fdd3 	bl	80001e0 <memchr>
 800963a:	b108      	cbz	r0, 8009640 <_printf_i+0x1bc>
 800963c:	1b40      	subs	r0, r0, r5
 800963e:	6060      	str	r0, [r4, #4]
 8009640:	6863      	ldr	r3, [r4, #4]
 8009642:	6123      	str	r3, [r4, #16]
 8009644:	2300      	movs	r3, #0
 8009646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800964a:	e7a7      	b.n	800959c <_printf_i+0x118>
 800964c:	6923      	ldr	r3, [r4, #16]
 800964e:	462a      	mov	r2, r5
 8009650:	4639      	mov	r1, r7
 8009652:	4630      	mov	r0, r6
 8009654:	47c0      	blx	r8
 8009656:	3001      	adds	r0, #1
 8009658:	d0aa      	beq.n	80095b0 <_printf_i+0x12c>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	079b      	lsls	r3, r3, #30
 800965e:	d413      	bmi.n	8009688 <_printf_i+0x204>
 8009660:	68e0      	ldr	r0, [r4, #12]
 8009662:	9b03      	ldr	r3, [sp, #12]
 8009664:	4298      	cmp	r0, r3
 8009666:	bfb8      	it	lt
 8009668:	4618      	movlt	r0, r3
 800966a:	e7a3      	b.n	80095b4 <_printf_i+0x130>
 800966c:	2301      	movs	r3, #1
 800966e:	464a      	mov	r2, r9
 8009670:	4639      	mov	r1, r7
 8009672:	4630      	mov	r0, r6
 8009674:	47c0      	blx	r8
 8009676:	3001      	adds	r0, #1
 8009678:	d09a      	beq.n	80095b0 <_printf_i+0x12c>
 800967a:	3501      	adds	r5, #1
 800967c:	68e3      	ldr	r3, [r4, #12]
 800967e:	9a03      	ldr	r2, [sp, #12]
 8009680:	1a9b      	subs	r3, r3, r2
 8009682:	42ab      	cmp	r3, r5
 8009684:	dcf2      	bgt.n	800966c <_printf_i+0x1e8>
 8009686:	e7eb      	b.n	8009660 <_printf_i+0x1dc>
 8009688:	2500      	movs	r5, #0
 800968a:	f104 0919 	add.w	r9, r4, #25
 800968e:	e7f5      	b.n	800967c <_printf_i+0x1f8>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1ac      	bne.n	80095ee <_printf_i+0x16a>
 8009694:	7803      	ldrb	r3, [r0, #0]
 8009696:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800969a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800969e:	e76c      	b.n	800957a <_printf_i+0xf6>
 80096a0:	0800b98a 	.word	0x0800b98a
 80096a4:	0800b99b 	.word	0x0800b99b

080096a8 <iprintf>:
 80096a8:	b40f      	push	{r0, r1, r2, r3}
 80096aa:	4b0a      	ldr	r3, [pc, #40]	; (80096d4 <iprintf+0x2c>)
 80096ac:	b513      	push	{r0, r1, r4, lr}
 80096ae:	681c      	ldr	r4, [r3, #0]
 80096b0:	b124      	cbz	r4, 80096bc <iprintf+0x14>
 80096b2:	69a3      	ldr	r3, [r4, #24]
 80096b4:	b913      	cbnz	r3, 80096bc <iprintf+0x14>
 80096b6:	4620      	mov	r0, r4
 80096b8:	f001 f886 	bl	800a7c8 <__sinit>
 80096bc:	ab05      	add	r3, sp, #20
 80096be:	9a04      	ldr	r2, [sp, #16]
 80096c0:	68a1      	ldr	r1, [r4, #8]
 80096c2:	9301      	str	r3, [sp, #4]
 80096c4:	4620      	mov	r0, r4
 80096c6:	f001 fe91 	bl	800b3ec <_vfiprintf_r>
 80096ca:	b002      	add	sp, #8
 80096cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096d0:	b004      	add	sp, #16
 80096d2:	4770      	bx	lr
 80096d4:	20000084 	.word	0x20000084

080096d8 <_puts_r>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	460e      	mov	r6, r1
 80096dc:	4605      	mov	r5, r0
 80096de:	b118      	cbz	r0, 80096e8 <_puts_r+0x10>
 80096e0:	6983      	ldr	r3, [r0, #24]
 80096e2:	b90b      	cbnz	r3, 80096e8 <_puts_r+0x10>
 80096e4:	f001 f870 	bl	800a7c8 <__sinit>
 80096e8:	69ab      	ldr	r3, [r5, #24]
 80096ea:	68ac      	ldr	r4, [r5, #8]
 80096ec:	b913      	cbnz	r3, 80096f4 <_puts_r+0x1c>
 80096ee:	4628      	mov	r0, r5
 80096f0:	f001 f86a 	bl	800a7c8 <__sinit>
 80096f4:	4b23      	ldr	r3, [pc, #140]	; (8009784 <_puts_r+0xac>)
 80096f6:	429c      	cmp	r4, r3
 80096f8:	d117      	bne.n	800972a <_puts_r+0x52>
 80096fa:	686c      	ldr	r4, [r5, #4]
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	071b      	lsls	r3, r3, #28
 8009700:	d51d      	bpl.n	800973e <_puts_r+0x66>
 8009702:	6923      	ldr	r3, [r4, #16]
 8009704:	b1db      	cbz	r3, 800973e <_puts_r+0x66>
 8009706:	3e01      	subs	r6, #1
 8009708:	68a3      	ldr	r3, [r4, #8]
 800970a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800970e:	3b01      	subs	r3, #1
 8009710:	60a3      	str	r3, [r4, #8]
 8009712:	b9e9      	cbnz	r1, 8009750 <_puts_r+0x78>
 8009714:	2b00      	cmp	r3, #0
 8009716:	da2e      	bge.n	8009776 <_puts_r+0x9e>
 8009718:	4622      	mov	r2, r4
 800971a:	210a      	movs	r1, #10
 800971c:	4628      	mov	r0, r5
 800971e:	f000 f85f 	bl	80097e0 <__swbuf_r>
 8009722:	3001      	adds	r0, #1
 8009724:	d011      	beq.n	800974a <_puts_r+0x72>
 8009726:	200a      	movs	r0, #10
 8009728:	e011      	b.n	800974e <_puts_r+0x76>
 800972a:	4b17      	ldr	r3, [pc, #92]	; (8009788 <_puts_r+0xb0>)
 800972c:	429c      	cmp	r4, r3
 800972e:	d101      	bne.n	8009734 <_puts_r+0x5c>
 8009730:	68ac      	ldr	r4, [r5, #8]
 8009732:	e7e3      	b.n	80096fc <_puts_r+0x24>
 8009734:	4b15      	ldr	r3, [pc, #84]	; (800978c <_puts_r+0xb4>)
 8009736:	429c      	cmp	r4, r3
 8009738:	bf08      	it	eq
 800973a:	68ec      	ldreq	r4, [r5, #12]
 800973c:	e7de      	b.n	80096fc <_puts_r+0x24>
 800973e:	4621      	mov	r1, r4
 8009740:	4628      	mov	r0, r5
 8009742:	f000 f89f 	bl	8009884 <__swsetup_r>
 8009746:	2800      	cmp	r0, #0
 8009748:	d0dd      	beq.n	8009706 <_puts_r+0x2e>
 800974a:	f04f 30ff 	mov.w	r0, #4294967295
 800974e:	bd70      	pop	{r4, r5, r6, pc}
 8009750:	2b00      	cmp	r3, #0
 8009752:	da04      	bge.n	800975e <_puts_r+0x86>
 8009754:	69a2      	ldr	r2, [r4, #24]
 8009756:	429a      	cmp	r2, r3
 8009758:	dc06      	bgt.n	8009768 <_puts_r+0x90>
 800975a:	290a      	cmp	r1, #10
 800975c:	d004      	beq.n	8009768 <_puts_r+0x90>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	1c5a      	adds	r2, r3, #1
 8009762:	6022      	str	r2, [r4, #0]
 8009764:	7019      	strb	r1, [r3, #0]
 8009766:	e7cf      	b.n	8009708 <_puts_r+0x30>
 8009768:	4622      	mov	r2, r4
 800976a:	4628      	mov	r0, r5
 800976c:	f000 f838 	bl	80097e0 <__swbuf_r>
 8009770:	3001      	adds	r0, #1
 8009772:	d1c9      	bne.n	8009708 <_puts_r+0x30>
 8009774:	e7e9      	b.n	800974a <_puts_r+0x72>
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	200a      	movs	r0, #10
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	6022      	str	r2, [r4, #0]
 800977e:	7018      	strb	r0, [r3, #0]
 8009780:	e7e5      	b.n	800974e <_puts_r+0x76>
 8009782:	bf00      	nop
 8009784:	0800b9dc 	.word	0x0800b9dc
 8009788:	0800b9fc 	.word	0x0800b9fc
 800978c:	0800b9bc 	.word	0x0800b9bc

08009790 <puts>:
 8009790:	4b02      	ldr	r3, [pc, #8]	; (800979c <puts+0xc>)
 8009792:	4601      	mov	r1, r0
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	f7ff bf9f 	b.w	80096d8 <_puts_r>
 800979a:	bf00      	nop
 800979c:	20000084 	.word	0x20000084

080097a0 <siprintf>:
 80097a0:	b40e      	push	{r1, r2, r3}
 80097a2:	b500      	push	{lr}
 80097a4:	b09c      	sub	sp, #112	; 0x70
 80097a6:	ab1d      	add	r3, sp, #116	; 0x74
 80097a8:	9002      	str	r0, [sp, #8]
 80097aa:	9006      	str	r0, [sp, #24]
 80097ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097b0:	4809      	ldr	r0, [pc, #36]	; (80097d8 <siprintf+0x38>)
 80097b2:	9107      	str	r1, [sp, #28]
 80097b4:	9104      	str	r1, [sp, #16]
 80097b6:	4909      	ldr	r1, [pc, #36]	; (80097dc <siprintf+0x3c>)
 80097b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097bc:	9105      	str	r1, [sp, #20]
 80097be:	6800      	ldr	r0, [r0, #0]
 80097c0:	9301      	str	r3, [sp, #4]
 80097c2:	a902      	add	r1, sp, #8
 80097c4:	f001 fcf0 	bl	800b1a8 <_svfiprintf_r>
 80097c8:	9b02      	ldr	r3, [sp, #8]
 80097ca:	2200      	movs	r2, #0
 80097cc:	701a      	strb	r2, [r3, #0]
 80097ce:	b01c      	add	sp, #112	; 0x70
 80097d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097d4:	b003      	add	sp, #12
 80097d6:	4770      	bx	lr
 80097d8:	20000084 	.word	0x20000084
 80097dc:	ffff0208 	.word	0xffff0208

080097e0 <__swbuf_r>:
 80097e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e2:	460e      	mov	r6, r1
 80097e4:	4614      	mov	r4, r2
 80097e6:	4605      	mov	r5, r0
 80097e8:	b118      	cbz	r0, 80097f2 <__swbuf_r+0x12>
 80097ea:	6983      	ldr	r3, [r0, #24]
 80097ec:	b90b      	cbnz	r3, 80097f2 <__swbuf_r+0x12>
 80097ee:	f000 ffeb 	bl	800a7c8 <__sinit>
 80097f2:	4b21      	ldr	r3, [pc, #132]	; (8009878 <__swbuf_r+0x98>)
 80097f4:	429c      	cmp	r4, r3
 80097f6:	d12a      	bne.n	800984e <__swbuf_r+0x6e>
 80097f8:	686c      	ldr	r4, [r5, #4]
 80097fa:	69a3      	ldr	r3, [r4, #24]
 80097fc:	60a3      	str	r3, [r4, #8]
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	071a      	lsls	r2, r3, #28
 8009802:	d52e      	bpl.n	8009862 <__swbuf_r+0x82>
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	b363      	cbz	r3, 8009862 <__swbuf_r+0x82>
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	6820      	ldr	r0, [r4, #0]
 800980c:	1ac0      	subs	r0, r0, r3
 800980e:	6963      	ldr	r3, [r4, #20]
 8009810:	b2f6      	uxtb	r6, r6
 8009812:	4283      	cmp	r3, r0
 8009814:	4637      	mov	r7, r6
 8009816:	dc04      	bgt.n	8009822 <__swbuf_r+0x42>
 8009818:	4621      	mov	r1, r4
 800981a:	4628      	mov	r0, r5
 800981c:	f000 ff6a 	bl	800a6f4 <_fflush_r>
 8009820:	bb28      	cbnz	r0, 800986e <__swbuf_r+0x8e>
 8009822:	68a3      	ldr	r3, [r4, #8]
 8009824:	3b01      	subs	r3, #1
 8009826:	60a3      	str	r3, [r4, #8]
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	6022      	str	r2, [r4, #0]
 800982e:	701e      	strb	r6, [r3, #0]
 8009830:	6963      	ldr	r3, [r4, #20]
 8009832:	3001      	adds	r0, #1
 8009834:	4283      	cmp	r3, r0
 8009836:	d004      	beq.n	8009842 <__swbuf_r+0x62>
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	07db      	lsls	r3, r3, #31
 800983c:	d519      	bpl.n	8009872 <__swbuf_r+0x92>
 800983e:	2e0a      	cmp	r6, #10
 8009840:	d117      	bne.n	8009872 <__swbuf_r+0x92>
 8009842:	4621      	mov	r1, r4
 8009844:	4628      	mov	r0, r5
 8009846:	f000 ff55 	bl	800a6f4 <_fflush_r>
 800984a:	b190      	cbz	r0, 8009872 <__swbuf_r+0x92>
 800984c:	e00f      	b.n	800986e <__swbuf_r+0x8e>
 800984e:	4b0b      	ldr	r3, [pc, #44]	; (800987c <__swbuf_r+0x9c>)
 8009850:	429c      	cmp	r4, r3
 8009852:	d101      	bne.n	8009858 <__swbuf_r+0x78>
 8009854:	68ac      	ldr	r4, [r5, #8]
 8009856:	e7d0      	b.n	80097fa <__swbuf_r+0x1a>
 8009858:	4b09      	ldr	r3, [pc, #36]	; (8009880 <__swbuf_r+0xa0>)
 800985a:	429c      	cmp	r4, r3
 800985c:	bf08      	it	eq
 800985e:	68ec      	ldreq	r4, [r5, #12]
 8009860:	e7cb      	b.n	80097fa <__swbuf_r+0x1a>
 8009862:	4621      	mov	r1, r4
 8009864:	4628      	mov	r0, r5
 8009866:	f000 f80d 	bl	8009884 <__swsetup_r>
 800986a:	2800      	cmp	r0, #0
 800986c:	d0cc      	beq.n	8009808 <__swbuf_r+0x28>
 800986e:	f04f 37ff 	mov.w	r7, #4294967295
 8009872:	4638      	mov	r0, r7
 8009874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009876:	bf00      	nop
 8009878:	0800b9dc 	.word	0x0800b9dc
 800987c:	0800b9fc 	.word	0x0800b9fc
 8009880:	0800b9bc 	.word	0x0800b9bc

08009884 <__swsetup_r>:
 8009884:	4b32      	ldr	r3, [pc, #200]	; (8009950 <__swsetup_r+0xcc>)
 8009886:	b570      	push	{r4, r5, r6, lr}
 8009888:	681d      	ldr	r5, [r3, #0]
 800988a:	4606      	mov	r6, r0
 800988c:	460c      	mov	r4, r1
 800988e:	b125      	cbz	r5, 800989a <__swsetup_r+0x16>
 8009890:	69ab      	ldr	r3, [r5, #24]
 8009892:	b913      	cbnz	r3, 800989a <__swsetup_r+0x16>
 8009894:	4628      	mov	r0, r5
 8009896:	f000 ff97 	bl	800a7c8 <__sinit>
 800989a:	4b2e      	ldr	r3, [pc, #184]	; (8009954 <__swsetup_r+0xd0>)
 800989c:	429c      	cmp	r4, r3
 800989e:	d10f      	bne.n	80098c0 <__swsetup_r+0x3c>
 80098a0:	686c      	ldr	r4, [r5, #4]
 80098a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	0715      	lsls	r5, r2, #28
 80098aa:	d42c      	bmi.n	8009906 <__swsetup_r+0x82>
 80098ac:	06d0      	lsls	r0, r2, #27
 80098ae:	d411      	bmi.n	80098d4 <__swsetup_r+0x50>
 80098b0:	2209      	movs	r2, #9
 80098b2:	6032      	str	r2, [r6, #0]
 80098b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b8:	81a3      	strh	r3, [r4, #12]
 80098ba:	f04f 30ff 	mov.w	r0, #4294967295
 80098be:	e03e      	b.n	800993e <__swsetup_r+0xba>
 80098c0:	4b25      	ldr	r3, [pc, #148]	; (8009958 <__swsetup_r+0xd4>)
 80098c2:	429c      	cmp	r4, r3
 80098c4:	d101      	bne.n	80098ca <__swsetup_r+0x46>
 80098c6:	68ac      	ldr	r4, [r5, #8]
 80098c8:	e7eb      	b.n	80098a2 <__swsetup_r+0x1e>
 80098ca:	4b24      	ldr	r3, [pc, #144]	; (800995c <__swsetup_r+0xd8>)
 80098cc:	429c      	cmp	r4, r3
 80098ce:	bf08      	it	eq
 80098d0:	68ec      	ldreq	r4, [r5, #12]
 80098d2:	e7e6      	b.n	80098a2 <__swsetup_r+0x1e>
 80098d4:	0751      	lsls	r1, r2, #29
 80098d6:	d512      	bpl.n	80098fe <__swsetup_r+0x7a>
 80098d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098da:	b141      	cbz	r1, 80098ee <__swsetup_r+0x6a>
 80098dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098e0:	4299      	cmp	r1, r3
 80098e2:	d002      	beq.n	80098ea <__swsetup_r+0x66>
 80098e4:	4630      	mov	r0, r6
 80098e6:	f001 fb5d 	bl	800afa4 <_free_r>
 80098ea:	2300      	movs	r3, #0
 80098ec:	6363      	str	r3, [r4, #52]	; 0x34
 80098ee:	89a3      	ldrh	r3, [r4, #12]
 80098f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	2300      	movs	r3, #0
 80098f8:	6063      	str	r3, [r4, #4]
 80098fa:	6923      	ldr	r3, [r4, #16]
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	f043 0308 	orr.w	r3, r3, #8
 8009904:	81a3      	strh	r3, [r4, #12]
 8009906:	6923      	ldr	r3, [r4, #16]
 8009908:	b94b      	cbnz	r3, 800991e <__swsetup_r+0x9a>
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009914:	d003      	beq.n	800991e <__swsetup_r+0x9a>
 8009916:	4621      	mov	r1, r4
 8009918:	4630      	mov	r0, r6
 800991a:	f001 f811 	bl	800a940 <__smakebuf_r>
 800991e:	89a2      	ldrh	r2, [r4, #12]
 8009920:	f012 0301 	ands.w	r3, r2, #1
 8009924:	d00c      	beq.n	8009940 <__swsetup_r+0xbc>
 8009926:	2300      	movs	r3, #0
 8009928:	60a3      	str	r3, [r4, #8]
 800992a:	6963      	ldr	r3, [r4, #20]
 800992c:	425b      	negs	r3, r3
 800992e:	61a3      	str	r3, [r4, #24]
 8009930:	6923      	ldr	r3, [r4, #16]
 8009932:	b953      	cbnz	r3, 800994a <__swsetup_r+0xc6>
 8009934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009938:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800993c:	d1ba      	bne.n	80098b4 <__swsetup_r+0x30>
 800993e:	bd70      	pop	{r4, r5, r6, pc}
 8009940:	0792      	lsls	r2, r2, #30
 8009942:	bf58      	it	pl
 8009944:	6963      	ldrpl	r3, [r4, #20]
 8009946:	60a3      	str	r3, [r4, #8]
 8009948:	e7f2      	b.n	8009930 <__swsetup_r+0xac>
 800994a:	2000      	movs	r0, #0
 800994c:	e7f7      	b.n	800993e <__swsetup_r+0xba>
 800994e:	bf00      	nop
 8009950:	20000084 	.word	0x20000084
 8009954:	0800b9dc 	.word	0x0800b9dc
 8009958:	0800b9fc 	.word	0x0800b9fc
 800995c:	0800b9bc 	.word	0x0800b9bc

08009960 <quorem>:
 8009960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	6903      	ldr	r3, [r0, #16]
 8009966:	690c      	ldr	r4, [r1, #16]
 8009968:	42a3      	cmp	r3, r4
 800996a:	4680      	mov	r8, r0
 800996c:	f2c0 8082 	blt.w	8009a74 <quorem+0x114>
 8009970:	3c01      	subs	r4, #1
 8009972:	f101 0714 	add.w	r7, r1, #20
 8009976:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800997a:	f100 0614 	add.w	r6, r0, #20
 800997e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009982:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009986:	eb06 030c 	add.w	r3, r6, ip
 800998a:	3501      	adds	r5, #1
 800998c:	eb07 090c 	add.w	r9, r7, ip
 8009990:	9301      	str	r3, [sp, #4]
 8009992:	fbb0 f5f5 	udiv	r5, r0, r5
 8009996:	b395      	cbz	r5, 80099fe <quorem+0x9e>
 8009998:	f04f 0a00 	mov.w	sl, #0
 800999c:	4638      	mov	r0, r7
 800999e:	46b6      	mov	lr, r6
 80099a0:	46d3      	mov	fp, sl
 80099a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80099a6:	b293      	uxth	r3, r2
 80099a8:	fb05 a303 	mla	r3, r5, r3, sl
 80099ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	ebab 0303 	sub.w	r3, fp, r3
 80099b6:	0c12      	lsrs	r2, r2, #16
 80099b8:	f8de b000 	ldr.w	fp, [lr]
 80099bc:	fb05 a202 	mla	r2, r5, r2, sl
 80099c0:	fa13 f38b 	uxtah	r3, r3, fp
 80099c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80099c8:	fa1f fb82 	uxth.w	fp, r2
 80099cc:	f8de 2000 	ldr.w	r2, [lr]
 80099d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80099d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099d8:	b29b      	uxth	r3, r3
 80099da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099de:	4581      	cmp	r9, r0
 80099e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80099e4:	f84e 3b04 	str.w	r3, [lr], #4
 80099e8:	d2db      	bcs.n	80099a2 <quorem+0x42>
 80099ea:	f856 300c 	ldr.w	r3, [r6, ip]
 80099ee:	b933      	cbnz	r3, 80099fe <quorem+0x9e>
 80099f0:	9b01      	ldr	r3, [sp, #4]
 80099f2:	3b04      	subs	r3, #4
 80099f4:	429e      	cmp	r6, r3
 80099f6:	461a      	mov	r2, r3
 80099f8:	d330      	bcc.n	8009a5c <quorem+0xfc>
 80099fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80099fe:	4640      	mov	r0, r8
 8009a00:	f001 f9fc 	bl	800adfc <__mcmp>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	db25      	blt.n	8009a54 <quorem+0xf4>
 8009a08:	3501      	adds	r5, #1
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f04f 0c00 	mov.w	ip, #0
 8009a10:	f857 2b04 	ldr.w	r2, [r7], #4
 8009a14:	f8d0 e000 	ldr.w	lr, [r0]
 8009a18:	b293      	uxth	r3, r2
 8009a1a:	ebac 0303 	sub.w	r3, ip, r3
 8009a1e:	0c12      	lsrs	r2, r2, #16
 8009a20:	fa13 f38e 	uxtah	r3, r3, lr
 8009a24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a32:	45b9      	cmp	r9, r7
 8009a34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a38:	f840 3b04 	str.w	r3, [r0], #4
 8009a3c:	d2e8      	bcs.n	8009a10 <quorem+0xb0>
 8009a3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009a42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009a46:	b92a      	cbnz	r2, 8009a54 <quorem+0xf4>
 8009a48:	3b04      	subs	r3, #4
 8009a4a:	429e      	cmp	r6, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	d30b      	bcc.n	8009a68 <quorem+0x108>
 8009a50:	f8c8 4010 	str.w	r4, [r8, #16]
 8009a54:	4628      	mov	r0, r5
 8009a56:	b003      	add	sp, #12
 8009a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5c:	6812      	ldr	r2, [r2, #0]
 8009a5e:	3b04      	subs	r3, #4
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	d1ca      	bne.n	80099fa <quorem+0x9a>
 8009a64:	3c01      	subs	r4, #1
 8009a66:	e7c5      	b.n	80099f4 <quorem+0x94>
 8009a68:	6812      	ldr	r2, [r2, #0]
 8009a6a:	3b04      	subs	r3, #4
 8009a6c:	2a00      	cmp	r2, #0
 8009a6e:	d1ef      	bne.n	8009a50 <quorem+0xf0>
 8009a70:	3c01      	subs	r4, #1
 8009a72:	e7ea      	b.n	8009a4a <quorem+0xea>
 8009a74:	2000      	movs	r0, #0
 8009a76:	e7ee      	b.n	8009a56 <quorem+0xf6>

08009a78 <_dtoa_r>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	ec57 6b10 	vmov	r6, r7, d0
 8009a80:	b097      	sub	sp, #92	; 0x5c
 8009a82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a84:	9106      	str	r1, [sp, #24]
 8009a86:	4604      	mov	r4, r0
 8009a88:	920b      	str	r2, [sp, #44]	; 0x2c
 8009a8a:	9312      	str	r3, [sp, #72]	; 0x48
 8009a8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a90:	e9cd 6700 	strd	r6, r7, [sp]
 8009a94:	b93d      	cbnz	r5, 8009aa6 <_dtoa_r+0x2e>
 8009a96:	2010      	movs	r0, #16
 8009a98:	f000 ff92 	bl	800a9c0 <malloc>
 8009a9c:	6260      	str	r0, [r4, #36]	; 0x24
 8009a9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009aa2:	6005      	str	r5, [r0, #0]
 8009aa4:	60c5      	str	r5, [r0, #12]
 8009aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aa8:	6819      	ldr	r1, [r3, #0]
 8009aaa:	b151      	cbz	r1, 8009ac2 <_dtoa_r+0x4a>
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	604a      	str	r2, [r1, #4]
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	4093      	lsls	r3, r2
 8009ab4:	608b      	str	r3, [r1, #8]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f000 ffbe 	bl	800aa38 <_Bfree>
 8009abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	1e3b      	subs	r3, r7, #0
 8009ac4:	bfbb      	ittet	lt
 8009ac6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009aca:	9301      	strlt	r3, [sp, #4]
 8009acc:	2300      	movge	r3, #0
 8009ace:	2201      	movlt	r2, #1
 8009ad0:	bfac      	ite	ge
 8009ad2:	f8c8 3000 	strge.w	r3, [r8]
 8009ad6:	f8c8 2000 	strlt.w	r2, [r8]
 8009ada:	4baf      	ldr	r3, [pc, #700]	; (8009d98 <_dtoa_r+0x320>)
 8009adc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ae0:	ea33 0308 	bics.w	r3, r3, r8
 8009ae4:	d114      	bne.n	8009b10 <_dtoa_r+0x98>
 8009ae6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ae8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	9b00      	ldr	r3, [sp, #0]
 8009af0:	b923      	cbnz	r3, 8009afc <_dtoa_r+0x84>
 8009af2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009af6:	2800      	cmp	r0, #0
 8009af8:	f000 8542 	beq.w	800a580 <_dtoa_r+0xb08>
 8009afc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009afe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009dac <_dtoa_r+0x334>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 8544 	beq.w	800a590 <_dtoa_r+0xb18>
 8009b08:	f10b 0303 	add.w	r3, fp, #3
 8009b0c:	f000 bd3e 	b.w	800a58c <_dtoa_r+0xb14>
 8009b10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009b14:	2200      	movs	r2, #0
 8009b16:	2300      	movs	r3, #0
 8009b18:	4630      	mov	r0, r6
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	f7f6 ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b20:	4681      	mov	r9, r0
 8009b22:	b168      	cbz	r0, 8009b40 <_dtoa_r+0xc8>
 8009b24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b26:	2301      	movs	r3, #1
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 8524 	beq.w	800a57a <_dtoa_r+0xb02>
 8009b32:	4b9a      	ldr	r3, [pc, #616]	; (8009d9c <_dtoa_r+0x324>)
 8009b34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b36:	f103 3bff 	add.w	fp, r3, #4294967295
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	f000 bd28 	b.w	800a590 <_dtoa_r+0xb18>
 8009b40:	aa14      	add	r2, sp, #80	; 0x50
 8009b42:	a915      	add	r1, sp, #84	; 0x54
 8009b44:	ec47 6b10 	vmov	d0, r6, r7
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f001 f9ce 	bl	800aeea <__d2b>
 8009b4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009b52:	9004      	str	r0, [sp, #16]
 8009b54:	2d00      	cmp	r5, #0
 8009b56:	d07c      	beq.n	8009c52 <_dtoa_r+0x1da>
 8009b58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009b60:	46b2      	mov	sl, r6
 8009b62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009b66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4b8b      	ldr	r3, [pc, #556]	; (8009da0 <_dtoa_r+0x328>)
 8009b72:	4650      	mov	r0, sl
 8009b74:	4659      	mov	r1, fp
 8009b76:	f7f6 fb87 	bl	8000288 <__aeabi_dsub>
 8009b7a:	a381      	add	r3, pc, #516	; (adr r3, 8009d80 <_dtoa_r+0x308>)
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	f7f6 fd3a 	bl	80005f8 <__aeabi_dmul>
 8009b84:	a380      	add	r3, pc, #512	; (adr r3, 8009d88 <_dtoa_r+0x310>)
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	f7f6 fb7f 	bl	800028c <__adddf3>
 8009b8e:	4606      	mov	r6, r0
 8009b90:	4628      	mov	r0, r5
 8009b92:	460f      	mov	r7, r1
 8009b94:	f7f6 fcc6 	bl	8000524 <__aeabi_i2d>
 8009b98:	a37d      	add	r3, pc, #500	; (adr r3, 8009d90 <_dtoa_r+0x318>)
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f7f6 fd2b 	bl	80005f8 <__aeabi_dmul>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7f6 fb6f 	bl	800028c <__adddf3>
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460f      	mov	r7, r1
 8009bb2:	f7f6 ffd1 	bl	8000b58 <__aeabi_d2iz>
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4682      	mov	sl, r0
 8009bba:	2300      	movs	r3, #0
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	4639      	mov	r1, r7
 8009bc0:	f7f6 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8009bc4:	b148      	cbz	r0, 8009bda <_dtoa_r+0x162>
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	f7f6 fcac 	bl	8000524 <__aeabi_i2d>
 8009bcc:	4632      	mov	r2, r6
 8009bce:	463b      	mov	r3, r7
 8009bd0:	f7f6 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bd4:	b908      	cbnz	r0, 8009bda <_dtoa_r+0x162>
 8009bd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bda:	f1ba 0f16 	cmp.w	sl, #22
 8009bde:	d859      	bhi.n	8009c94 <_dtoa_r+0x21c>
 8009be0:	4970      	ldr	r1, [pc, #448]	; (8009da4 <_dtoa_r+0x32c>)
 8009be2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009be6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bee:	f7f6 ff93 	bl	8000b18 <__aeabi_dcmpgt>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d050      	beq.n	8009c98 <_dtoa_r+0x220>
 8009bf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c00:	1b5d      	subs	r5, r3, r5
 8009c02:	f1b5 0801 	subs.w	r8, r5, #1
 8009c06:	bf49      	itett	mi
 8009c08:	f1c5 0301 	rsbmi	r3, r5, #1
 8009c0c:	2300      	movpl	r3, #0
 8009c0e:	9305      	strmi	r3, [sp, #20]
 8009c10:	f04f 0800 	movmi.w	r8, #0
 8009c14:	bf58      	it	pl
 8009c16:	9305      	strpl	r3, [sp, #20]
 8009c18:	f1ba 0f00 	cmp.w	sl, #0
 8009c1c:	db3e      	blt.n	8009c9c <_dtoa_r+0x224>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	44d0      	add	r8, sl
 8009c22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009c26:	9307      	str	r3, [sp, #28]
 8009c28:	9b06      	ldr	r3, [sp, #24]
 8009c2a:	2b09      	cmp	r3, #9
 8009c2c:	f200 8090 	bhi.w	8009d50 <_dtoa_r+0x2d8>
 8009c30:	2b05      	cmp	r3, #5
 8009c32:	bfc4      	itt	gt
 8009c34:	3b04      	subgt	r3, #4
 8009c36:	9306      	strgt	r3, [sp, #24]
 8009c38:	9b06      	ldr	r3, [sp, #24]
 8009c3a:	f1a3 0302 	sub.w	r3, r3, #2
 8009c3e:	bfcc      	ite	gt
 8009c40:	2500      	movgt	r5, #0
 8009c42:	2501      	movle	r5, #1
 8009c44:	2b03      	cmp	r3, #3
 8009c46:	f200 808f 	bhi.w	8009d68 <_dtoa_r+0x2f0>
 8009c4a:	e8df f003 	tbb	[pc, r3]
 8009c4e:	7f7d      	.short	0x7f7d
 8009c50:	7131      	.short	0x7131
 8009c52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009c56:	441d      	add	r5, r3
 8009c58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009c5c:	2820      	cmp	r0, #32
 8009c5e:	dd13      	ble.n	8009c88 <_dtoa_r+0x210>
 8009c60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009c64:	9b00      	ldr	r3, [sp, #0]
 8009c66:	fa08 f800 	lsl.w	r8, r8, r0
 8009c6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009c6e:	fa23 f000 	lsr.w	r0, r3, r0
 8009c72:	ea48 0000 	orr.w	r0, r8, r0
 8009c76:	f7f6 fc45 	bl	8000504 <__aeabi_ui2d>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	4682      	mov	sl, r0
 8009c7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009c82:	3d01      	subs	r5, #1
 8009c84:	9313      	str	r3, [sp, #76]	; 0x4c
 8009c86:	e772      	b.n	8009b6e <_dtoa_r+0xf6>
 8009c88:	9b00      	ldr	r3, [sp, #0]
 8009c8a:	f1c0 0020 	rsb	r0, r0, #32
 8009c8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009c92:	e7f0      	b.n	8009c76 <_dtoa_r+0x1fe>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e7b1      	b.n	8009bfc <_dtoa_r+0x184>
 8009c98:	900f      	str	r0, [sp, #60]	; 0x3c
 8009c9a:	e7b0      	b.n	8009bfe <_dtoa_r+0x186>
 8009c9c:	9b05      	ldr	r3, [sp, #20]
 8009c9e:	eba3 030a 	sub.w	r3, r3, sl
 8009ca2:	9305      	str	r3, [sp, #20]
 8009ca4:	f1ca 0300 	rsb	r3, sl, #0
 8009ca8:	9307      	str	r3, [sp, #28]
 8009caa:	2300      	movs	r3, #0
 8009cac:	930e      	str	r3, [sp, #56]	; 0x38
 8009cae:	e7bb      	b.n	8009c28 <_dtoa_r+0x1b0>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8009cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	dd59      	ble.n	8009d6e <_dtoa_r+0x2f6>
 8009cba:	9302      	str	r3, [sp, #8]
 8009cbc:	4699      	mov	r9, r3
 8009cbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	6072      	str	r2, [r6, #4]
 8009cc4:	2204      	movs	r2, #4
 8009cc6:	f102 0014 	add.w	r0, r2, #20
 8009cca:	4298      	cmp	r0, r3
 8009ccc:	6871      	ldr	r1, [r6, #4]
 8009cce:	d953      	bls.n	8009d78 <_dtoa_r+0x300>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f000 fe7d 	bl	800a9d0 <_Balloc>
 8009cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cd8:	6030      	str	r0, [r6, #0]
 8009cda:	f1b9 0f0e 	cmp.w	r9, #14
 8009cde:	f8d3 b000 	ldr.w	fp, [r3]
 8009ce2:	f200 80e6 	bhi.w	8009eb2 <_dtoa_r+0x43a>
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	f000 80e3 	beq.w	8009eb2 <_dtoa_r+0x43a>
 8009cec:	ed9d 7b00 	vldr	d7, [sp]
 8009cf0:	f1ba 0f00 	cmp.w	sl, #0
 8009cf4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009cf8:	dd74      	ble.n	8009de4 <_dtoa_r+0x36c>
 8009cfa:	4a2a      	ldr	r2, [pc, #168]	; (8009da4 <_dtoa_r+0x32c>)
 8009cfc:	f00a 030f 	and.w	r3, sl, #15
 8009d00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d04:	ed93 7b00 	vldr	d7, [r3]
 8009d08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009d0c:	06f0      	lsls	r0, r6, #27
 8009d0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009d12:	d565      	bpl.n	8009de0 <_dtoa_r+0x368>
 8009d14:	4b24      	ldr	r3, [pc, #144]	; (8009da8 <_dtoa_r+0x330>)
 8009d16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d1e:	f7f6 fd95 	bl	800084c <__aeabi_ddiv>
 8009d22:	e9cd 0100 	strd	r0, r1, [sp]
 8009d26:	f006 060f 	and.w	r6, r6, #15
 8009d2a:	2503      	movs	r5, #3
 8009d2c:	4f1e      	ldr	r7, [pc, #120]	; (8009da8 <_dtoa_r+0x330>)
 8009d2e:	e04c      	b.n	8009dca <_dtoa_r+0x352>
 8009d30:	2301      	movs	r3, #1
 8009d32:	930a      	str	r3, [sp, #40]	; 0x28
 8009d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d36:	4453      	add	r3, sl
 8009d38:	f103 0901 	add.w	r9, r3, #1
 8009d3c:	9302      	str	r3, [sp, #8]
 8009d3e:	464b      	mov	r3, r9
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	bfb8      	it	lt
 8009d44:	2301      	movlt	r3, #1
 8009d46:	e7ba      	b.n	8009cbe <_dtoa_r+0x246>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	e7b2      	b.n	8009cb2 <_dtoa_r+0x23a>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e7f0      	b.n	8009d32 <_dtoa_r+0x2ba>
 8009d50:	2501      	movs	r5, #1
 8009d52:	2300      	movs	r3, #0
 8009d54:	9306      	str	r3, [sp, #24]
 8009d56:	950a      	str	r5, [sp, #40]	; 0x28
 8009d58:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5c:	9302      	str	r3, [sp, #8]
 8009d5e:	4699      	mov	r9, r3
 8009d60:	2200      	movs	r2, #0
 8009d62:	2312      	movs	r3, #18
 8009d64:	920b      	str	r2, [sp, #44]	; 0x2c
 8009d66:	e7aa      	b.n	8009cbe <_dtoa_r+0x246>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d6c:	e7f4      	b.n	8009d58 <_dtoa_r+0x2e0>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	9302      	str	r3, [sp, #8]
 8009d72:	4699      	mov	r9, r3
 8009d74:	461a      	mov	r2, r3
 8009d76:	e7f5      	b.n	8009d64 <_dtoa_r+0x2ec>
 8009d78:	3101      	adds	r1, #1
 8009d7a:	6071      	str	r1, [r6, #4]
 8009d7c:	0052      	lsls	r2, r2, #1
 8009d7e:	e7a2      	b.n	8009cc6 <_dtoa_r+0x24e>
 8009d80:	636f4361 	.word	0x636f4361
 8009d84:	3fd287a7 	.word	0x3fd287a7
 8009d88:	8b60c8b3 	.word	0x8b60c8b3
 8009d8c:	3fc68a28 	.word	0x3fc68a28
 8009d90:	509f79fb 	.word	0x509f79fb
 8009d94:	3fd34413 	.word	0x3fd34413
 8009d98:	7ff00000 	.word	0x7ff00000
 8009d9c:	0800b989 	.word	0x0800b989
 8009da0:	3ff80000 	.word	0x3ff80000
 8009da4:	0800ba48 	.word	0x0800ba48
 8009da8:	0800ba20 	.word	0x0800ba20
 8009dac:	0800b9b5 	.word	0x0800b9b5
 8009db0:	07f1      	lsls	r1, r6, #31
 8009db2:	d508      	bpl.n	8009dc6 <_dtoa_r+0x34e>
 8009db4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dbc:	f7f6 fc1c 	bl	80005f8 <__aeabi_dmul>
 8009dc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009dc4:	3501      	adds	r5, #1
 8009dc6:	1076      	asrs	r6, r6, #1
 8009dc8:	3708      	adds	r7, #8
 8009dca:	2e00      	cmp	r6, #0
 8009dcc:	d1f0      	bne.n	8009db0 <_dtoa_r+0x338>
 8009dce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dd6:	f7f6 fd39 	bl	800084c <__aeabi_ddiv>
 8009dda:	e9cd 0100 	strd	r0, r1, [sp]
 8009dde:	e01a      	b.n	8009e16 <_dtoa_r+0x39e>
 8009de0:	2502      	movs	r5, #2
 8009de2:	e7a3      	b.n	8009d2c <_dtoa_r+0x2b4>
 8009de4:	f000 80a0 	beq.w	8009f28 <_dtoa_r+0x4b0>
 8009de8:	f1ca 0600 	rsb	r6, sl, #0
 8009dec:	4b9f      	ldr	r3, [pc, #636]	; (800a06c <_dtoa_r+0x5f4>)
 8009dee:	4fa0      	ldr	r7, [pc, #640]	; (800a070 <_dtoa_r+0x5f8>)
 8009df0:	f006 020f 	and.w	r2, r6, #15
 8009df4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e00:	f7f6 fbfa 	bl	80005f8 <__aeabi_dmul>
 8009e04:	e9cd 0100 	strd	r0, r1, [sp]
 8009e08:	1136      	asrs	r6, r6, #4
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	2502      	movs	r5, #2
 8009e0e:	2e00      	cmp	r6, #0
 8009e10:	d17f      	bne.n	8009f12 <_dtoa_r+0x49a>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1e1      	bne.n	8009dda <_dtoa_r+0x362>
 8009e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 8087 	beq.w	8009f2c <_dtoa_r+0x4b4>
 8009e1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e22:	2200      	movs	r2, #0
 8009e24:	4b93      	ldr	r3, [pc, #588]	; (800a074 <_dtoa_r+0x5fc>)
 8009e26:	4630      	mov	r0, r6
 8009e28:	4639      	mov	r1, r7
 8009e2a:	f7f6 fe57 	bl	8000adc <__aeabi_dcmplt>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d07c      	beq.n	8009f2c <_dtoa_r+0x4b4>
 8009e32:	f1b9 0f00 	cmp.w	r9, #0
 8009e36:	d079      	beq.n	8009f2c <_dtoa_r+0x4b4>
 8009e38:	9b02      	ldr	r3, [sp, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	dd35      	ble.n	8009eaa <_dtoa_r+0x432>
 8009e3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009e42:	9308      	str	r3, [sp, #32]
 8009e44:	4639      	mov	r1, r7
 8009e46:	2200      	movs	r2, #0
 8009e48:	4b8b      	ldr	r3, [pc, #556]	; (800a078 <_dtoa_r+0x600>)
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f7f6 fbd4 	bl	80005f8 <__aeabi_dmul>
 8009e50:	e9cd 0100 	strd	r0, r1, [sp]
 8009e54:	9f02      	ldr	r7, [sp, #8]
 8009e56:	3501      	adds	r5, #1
 8009e58:	4628      	mov	r0, r5
 8009e5a:	f7f6 fb63 	bl	8000524 <__aeabi_i2d>
 8009e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e62:	f7f6 fbc9 	bl	80005f8 <__aeabi_dmul>
 8009e66:	2200      	movs	r2, #0
 8009e68:	4b84      	ldr	r3, [pc, #528]	; (800a07c <_dtoa_r+0x604>)
 8009e6a:	f7f6 fa0f 	bl	800028c <__adddf3>
 8009e6e:	4605      	mov	r5, r0
 8009e70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009e74:	2f00      	cmp	r7, #0
 8009e76:	d15d      	bne.n	8009f34 <_dtoa_r+0x4bc>
 8009e78:	2200      	movs	r2, #0
 8009e7a:	4b81      	ldr	r3, [pc, #516]	; (800a080 <_dtoa_r+0x608>)
 8009e7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e80:	f7f6 fa02 	bl	8000288 <__aeabi_dsub>
 8009e84:	462a      	mov	r2, r5
 8009e86:	4633      	mov	r3, r6
 8009e88:	e9cd 0100 	strd	r0, r1, [sp]
 8009e8c:	f7f6 fe44 	bl	8000b18 <__aeabi_dcmpgt>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	f040 8288 	bne.w	800a3a6 <_dtoa_r+0x92e>
 8009e96:	462a      	mov	r2, r5
 8009e98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009e9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ea0:	f7f6 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f040 827c 	bne.w	800a3a2 <_dtoa_r+0x92a>
 8009eaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009eae:	e9cd 2300 	strd	r2, r3, [sp]
 8009eb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f2c0 8150 	blt.w	800a15a <_dtoa_r+0x6e2>
 8009eba:	f1ba 0f0e 	cmp.w	sl, #14
 8009ebe:	f300 814c 	bgt.w	800a15a <_dtoa_r+0x6e2>
 8009ec2:	4b6a      	ldr	r3, [pc, #424]	; (800a06c <_dtoa_r+0x5f4>)
 8009ec4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ec8:	ed93 7b00 	vldr	d7, [r3]
 8009ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ed4:	f280 80d8 	bge.w	800a088 <_dtoa_r+0x610>
 8009ed8:	f1b9 0f00 	cmp.w	r9, #0
 8009edc:	f300 80d4 	bgt.w	800a088 <_dtoa_r+0x610>
 8009ee0:	f040 825e 	bne.w	800a3a0 <_dtoa_r+0x928>
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	4b66      	ldr	r3, [pc, #408]	; (800a080 <_dtoa_r+0x608>)
 8009ee8:	ec51 0b17 	vmov	r0, r1, d7
 8009eec:	f7f6 fb84 	bl	80005f8 <__aeabi_dmul>
 8009ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ef4:	f7f6 fe06 	bl	8000b04 <__aeabi_dcmpge>
 8009ef8:	464f      	mov	r7, r9
 8009efa:	464e      	mov	r6, r9
 8009efc:	2800      	cmp	r0, #0
 8009efe:	f040 8234 	bne.w	800a36a <_dtoa_r+0x8f2>
 8009f02:	2331      	movs	r3, #49	; 0x31
 8009f04:	f10b 0501 	add.w	r5, fp, #1
 8009f08:	f88b 3000 	strb.w	r3, [fp]
 8009f0c:	f10a 0a01 	add.w	sl, sl, #1
 8009f10:	e22f      	b.n	800a372 <_dtoa_r+0x8fa>
 8009f12:	07f2      	lsls	r2, r6, #31
 8009f14:	d505      	bpl.n	8009f22 <_dtoa_r+0x4aa>
 8009f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f1a:	f7f6 fb6d 	bl	80005f8 <__aeabi_dmul>
 8009f1e:	3501      	adds	r5, #1
 8009f20:	2301      	movs	r3, #1
 8009f22:	1076      	asrs	r6, r6, #1
 8009f24:	3708      	adds	r7, #8
 8009f26:	e772      	b.n	8009e0e <_dtoa_r+0x396>
 8009f28:	2502      	movs	r5, #2
 8009f2a:	e774      	b.n	8009e16 <_dtoa_r+0x39e>
 8009f2c:	f8cd a020 	str.w	sl, [sp, #32]
 8009f30:	464f      	mov	r7, r9
 8009f32:	e791      	b.n	8009e58 <_dtoa_r+0x3e0>
 8009f34:	4b4d      	ldr	r3, [pc, #308]	; (800a06c <_dtoa_r+0x5f4>)
 8009f36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d047      	beq.n	8009fd4 <_dtoa_r+0x55c>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	2000      	movs	r0, #0
 8009f4a:	494e      	ldr	r1, [pc, #312]	; (800a084 <_dtoa_r+0x60c>)
 8009f4c:	f7f6 fc7e 	bl	800084c <__aeabi_ddiv>
 8009f50:	462a      	mov	r2, r5
 8009f52:	4633      	mov	r3, r6
 8009f54:	f7f6 f998 	bl	8000288 <__aeabi_dsub>
 8009f58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009f5c:	465d      	mov	r5, fp
 8009f5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f62:	f7f6 fdf9 	bl	8000b58 <__aeabi_d2iz>
 8009f66:	4606      	mov	r6, r0
 8009f68:	f7f6 fadc 	bl	8000524 <__aeabi_i2d>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f74:	f7f6 f988 	bl	8000288 <__aeabi_dsub>
 8009f78:	3630      	adds	r6, #48	; 0x30
 8009f7a:	f805 6b01 	strb.w	r6, [r5], #1
 8009f7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009f82:	e9cd 0100 	strd	r0, r1, [sp]
 8009f86:	f7f6 fda9 	bl	8000adc <__aeabi_dcmplt>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d163      	bne.n	800a056 <_dtoa_r+0x5de>
 8009f8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f92:	2000      	movs	r0, #0
 8009f94:	4937      	ldr	r1, [pc, #220]	; (800a074 <_dtoa_r+0x5fc>)
 8009f96:	f7f6 f977 	bl	8000288 <__aeabi_dsub>
 8009f9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009f9e:	f7f6 fd9d 	bl	8000adc <__aeabi_dcmplt>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	f040 80b7 	bne.w	800a116 <_dtoa_r+0x69e>
 8009fa8:	eba5 030b 	sub.w	r3, r5, fp
 8009fac:	429f      	cmp	r7, r3
 8009fae:	f77f af7c 	ble.w	8009eaa <_dtoa_r+0x432>
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	4b30      	ldr	r3, [pc, #192]	; (800a078 <_dtoa_r+0x600>)
 8009fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009fba:	f7f6 fb1d 	bl	80005f8 <__aeabi_dmul>
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009fc4:	4b2c      	ldr	r3, [pc, #176]	; (800a078 <_dtoa_r+0x600>)
 8009fc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fca:	f7f6 fb15 	bl	80005f8 <__aeabi_dmul>
 8009fce:	e9cd 0100 	strd	r0, r1, [sp]
 8009fd2:	e7c4      	b.n	8009f5e <_dtoa_r+0x4e6>
 8009fd4:	462a      	mov	r2, r5
 8009fd6:	4633      	mov	r3, r6
 8009fd8:	f7f6 fb0e 	bl	80005f8 <__aeabi_dmul>
 8009fdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009fe0:	eb0b 0507 	add.w	r5, fp, r7
 8009fe4:	465e      	mov	r6, fp
 8009fe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fea:	f7f6 fdb5 	bl	8000b58 <__aeabi_d2iz>
 8009fee:	4607      	mov	r7, r0
 8009ff0:	f7f6 fa98 	bl	8000524 <__aeabi_i2d>
 8009ff4:	3730      	adds	r7, #48	; 0x30
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ffe:	f7f6 f943 	bl	8000288 <__aeabi_dsub>
 800a002:	f806 7b01 	strb.w	r7, [r6], #1
 800a006:	42ae      	cmp	r6, r5
 800a008:	e9cd 0100 	strd	r0, r1, [sp]
 800a00c:	f04f 0200 	mov.w	r2, #0
 800a010:	d126      	bne.n	800a060 <_dtoa_r+0x5e8>
 800a012:	4b1c      	ldr	r3, [pc, #112]	; (800a084 <_dtoa_r+0x60c>)
 800a014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a018:	f7f6 f938 	bl	800028c <__adddf3>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a024:	f7f6 fd78 	bl	8000b18 <__aeabi_dcmpgt>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d174      	bne.n	800a116 <_dtoa_r+0x69e>
 800a02c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a030:	2000      	movs	r0, #0
 800a032:	4914      	ldr	r1, [pc, #80]	; (800a084 <_dtoa_r+0x60c>)
 800a034:	f7f6 f928 	bl	8000288 <__aeabi_dsub>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a040:	f7f6 fd4c 	bl	8000adc <__aeabi_dcmplt>
 800a044:	2800      	cmp	r0, #0
 800a046:	f43f af30 	beq.w	8009eaa <_dtoa_r+0x432>
 800a04a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a04e:	2b30      	cmp	r3, #48	; 0x30
 800a050:	f105 32ff 	add.w	r2, r5, #4294967295
 800a054:	d002      	beq.n	800a05c <_dtoa_r+0x5e4>
 800a056:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a05a:	e04a      	b.n	800a0f2 <_dtoa_r+0x67a>
 800a05c:	4615      	mov	r5, r2
 800a05e:	e7f4      	b.n	800a04a <_dtoa_r+0x5d2>
 800a060:	4b05      	ldr	r3, [pc, #20]	; (800a078 <_dtoa_r+0x600>)
 800a062:	f7f6 fac9 	bl	80005f8 <__aeabi_dmul>
 800a066:	e9cd 0100 	strd	r0, r1, [sp]
 800a06a:	e7bc      	b.n	8009fe6 <_dtoa_r+0x56e>
 800a06c:	0800ba48 	.word	0x0800ba48
 800a070:	0800ba20 	.word	0x0800ba20
 800a074:	3ff00000 	.word	0x3ff00000
 800a078:	40240000 	.word	0x40240000
 800a07c:	401c0000 	.word	0x401c0000
 800a080:	40140000 	.word	0x40140000
 800a084:	3fe00000 	.word	0x3fe00000
 800a088:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a08c:	465d      	mov	r5, fp
 800a08e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a092:	4630      	mov	r0, r6
 800a094:	4639      	mov	r1, r7
 800a096:	f7f6 fbd9 	bl	800084c <__aeabi_ddiv>
 800a09a:	f7f6 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800a09e:	4680      	mov	r8, r0
 800a0a0:	f7f6 fa40 	bl	8000524 <__aeabi_i2d>
 800a0a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0a8:	f7f6 faa6 	bl	80005f8 <__aeabi_dmul>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a0b8:	f7f6 f8e6 	bl	8000288 <__aeabi_dsub>
 800a0bc:	f805 6b01 	strb.w	r6, [r5], #1
 800a0c0:	eba5 060b 	sub.w	r6, r5, fp
 800a0c4:	45b1      	cmp	r9, r6
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	d139      	bne.n	800a140 <_dtoa_r+0x6c8>
 800a0cc:	f7f6 f8de 	bl	800028c <__adddf3>
 800a0d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	460f      	mov	r7, r1
 800a0d8:	f7f6 fd1e 	bl	8000b18 <__aeabi_dcmpgt>
 800a0dc:	b9c8      	cbnz	r0, 800a112 <_dtoa_r+0x69a>
 800a0de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	f7f6 fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0ea:	b110      	cbz	r0, 800a0f2 <_dtoa_r+0x67a>
 800a0ec:	f018 0f01 	tst.w	r8, #1
 800a0f0:	d10f      	bne.n	800a112 <_dtoa_r+0x69a>
 800a0f2:	9904      	ldr	r1, [sp, #16]
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f000 fc9f 	bl	800aa38 <_Bfree>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0fe:	702b      	strb	r3, [r5, #0]
 800a100:	f10a 0301 	add.w	r3, sl, #1
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 8241 	beq.w	800a590 <_dtoa_r+0xb18>
 800a10e:	601d      	str	r5, [r3, #0]
 800a110:	e23e      	b.n	800a590 <_dtoa_r+0xb18>
 800a112:	f8cd a020 	str.w	sl, [sp, #32]
 800a116:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a11a:	2a39      	cmp	r2, #57	; 0x39
 800a11c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a120:	d108      	bne.n	800a134 <_dtoa_r+0x6bc>
 800a122:	459b      	cmp	fp, r3
 800a124:	d10a      	bne.n	800a13c <_dtoa_r+0x6c4>
 800a126:	9b08      	ldr	r3, [sp, #32]
 800a128:	3301      	adds	r3, #1
 800a12a:	9308      	str	r3, [sp, #32]
 800a12c:	2330      	movs	r3, #48	; 0x30
 800a12e:	f88b 3000 	strb.w	r3, [fp]
 800a132:	465b      	mov	r3, fp
 800a134:	781a      	ldrb	r2, [r3, #0]
 800a136:	3201      	adds	r2, #1
 800a138:	701a      	strb	r2, [r3, #0]
 800a13a:	e78c      	b.n	800a056 <_dtoa_r+0x5de>
 800a13c:	461d      	mov	r5, r3
 800a13e:	e7ea      	b.n	800a116 <_dtoa_r+0x69e>
 800a140:	2200      	movs	r2, #0
 800a142:	4b9b      	ldr	r3, [pc, #620]	; (800a3b0 <_dtoa_r+0x938>)
 800a144:	f7f6 fa58 	bl	80005f8 <__aeabi_dmul>
 800a148:	2200      	movs	r2, #0
 800a14a:	2300      	movs	r3, #0
 800a14c:	4606      	mov	r6, r0
 800a14e:	460f      	mov	r7, r1
 800a150:	f7f6 fcba 	bl	8000ac8 <__aeabi_dcmpeq>
 800a154:	2800      	cmp	r0, #0
 800a156:	d09a      	beq.n	800a08e <_dtoa_r+0x616>
 800a158:	e7cb      	b.n	800a0f2 <_dtoa_r+0x67a>
 800a15a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	f000 808b 	beq.w	800a278 <_dtoa_r+0x800>
 800a162:	9a06      	ldr	r2, [sp, #24]
 800a164:	2a01      	cmp	r2, #1
 800a166:	dc6e      	bgt.n	800a246 <_dtoa_r+0x7ce>
 800a168:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a16a:	2a00      	cmp	r2, #0
 800a16c:	d067      	beq.n	800a23e <_dtoa_r+0x7c6>
 800a16e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a172:	9f07      	ldr	r7, [sp, #28]
 800a174:	9d05      	ldr	r5, [sp, #20]
 800a176:	9a05      	ldr	r2, [sp, #20]
 800a178:	2101      	movs	r1, #1
 800a17a:	441a      	add	r2, r3
 800a17c:	4620      	mov	r0, r4
 800a17e:	9205      	str	r2, [sp, #20]
 800a180:	4498      	add	r8, r3
 800a182:	f000 fcf9 	bl	800ab78 <__i2b>
 800a186:	4606      	mov	r6, r0
 800a188:	2d00      	cmp	r5, #0
 800a18a:	dd0c      	ble.n	800a1a6 <_dtoa_r+0x72e>
 800a18c:	f1b8 0f00 	cmp.w	r8, #0
 800a190:	dd09      	ble.n	800a1a6 <_dtoa_r+0x72e>
 800a192:	4545      	cmp	r5, r8
 800a194:	9a05      	ldr	r2, [sp, #20]
 800a196:	462b      	mov	r3, r5
 800a198:	bfa8      	it	ge
 800a19a:	4643      	movge	r3, r8
 800a19c:	1ad2      	subs	r2, r2, r3
 800a19e:	9205      	str	r2, [sp, #20]
 800a1a0:	1aed      	subs	r5, r5, r3
 800a1a2:	eba8 0803 	sub.w	r8, r8, r3
 800a1a6:	9b07      	ldr	r3, [sp, #28]
 800a1a8:	b1eb      	cbz	r3, 800a1e6 <_dtoa_r+0x76e>
 800a1aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d067      	beq.n	800a280 <_dtoa_r+0x808>
 800a1b0:	b18f      	cbz	r7, 800a1d6 <_dtoa_r+0x75e>
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	463a      	mov	r2, r7
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f000 fd7e 	bl	800acb8 <__pow5mult>
 800a1bc:	9a04      	ldr	r2, [sp, #16]
 800a1be:	4601      	mov	r1, r0
 800a1c0:	4606      	mov	r6, r0
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 fce1 	bl	800ab8a <__multiply>
 800a1c8:	9904      	ldr	r1, [sp, #16]
 800a1ca:	9008      	str	r0, [sp, #32]
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fc33 	bl	800aa38 <_Bfree>
 800a1d2:	9b08      	ldr	r3, [sp, #32]
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	9b07      	ldr	r3, [sp, #28]
 800a1d8:	1bda      	subs	r2, r3, r7
 800a1da:	d004      	beq.n	800a1e6 <_dtoa_r+0x76e>
 800a1dc:	9904      	ldr	r1, [sp, #16]
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f000 fd6a 	bl	800acb8 <__pow5mult>
 800a1e4:	9004      	str	r0, [sp, #16]
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 fcc5 	bl	800ab78 <__i2b>
 800a1ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 81d0 	beq.w	800a598 <_dtoa_r+0xb20>
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 fd5b 	bl	800acb8 <__pow5mult>
 800a202:	9b06      	ldr	r3, [sp, #24]
 800a204:	2b01      	cmp	r3, #1
 800a206:	4607      	mov	r7, r0
 800a208:	dc40      	bgt.n	800a28c <_dtoa_r+0x814>
 800a20a:	9b00      	ldr	r3, [sp, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d139      	bne.n	800a284 <_dtoa_r+0x80c>
 800a210:	9b01      	ldr	r3, [sp, #4]
 800a212:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a216:	2b00      	cmp	r3, #0
 800a218:	d136      	bne.n	800a288 <_dtoa_r+0x810>
 800a21a:	9b01      	ldr	r3, [sp, #4]
 800a21c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a220:	0d1b      	lsrs	r3, r3, #20
 800a222:	051b      	lsls	r3, r3, #20
 800a224:	b12b      	cbz	r3, 800a232 <_dtoa_r+0x7ba>
 800a226:	9b05      	ldr	r3, [sp, #20]
 800a228:	3301      	adds	r3, #1
 800a22a:	9305      	str	r3, [sp, #20]
 800a22c:	f108 0801 	add.w	r8, r8, #1
 800a230:	2301      	movs	r3, #1
 800a232:	9307      	str	r3, [sp, #28]
 800a234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a236:	2b00      	cmp	r3, #0
 800a238:	d12a      	bne.n	800a290 <_dtoa_r+0x818>
 800a23a:	2001      	movs	r0, #1
 800a23c:	e030      	b.n	800a2a0 <_dtoa_r+0x828>
 800a23e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a240:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a244:	e795      	b.n	800a172 <_dtoa_r+0x6fa>
 800a246:	9b07      	ldr	r3, [sp, #28]
 800a248:	f109 37ff 	add.w	r7, r9, #4294967295
 800a24c:	42bb      	cmp	r3, r7
 800a24e:	bfbf      	itttt	lt
 800a250:	9b07      	ldrlt	r3, [sp, #28]
 800a252:	9707      	strlt	r7, [sp, #28]
 800a254:	1afa      	sublt	r2, r7, r3
 800a256:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a258:	bfbb      	ittet	lt
 800a25a:	189b      	addlt	r3, r3, r2
 800a25c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a25e:	1bdf      	subge	r7, r3, r7
 800a260:	2700      	movlt	r7, #0
 800a262:	f1b9 0f00 	cmp.w	r9, #0
 800a266:	bfb5      	itete	lt
 800a268:	9b05      	ldrlt	r3, [sp, #20]
 800a26a:	9d05      	ldrge	r5, [sp, #20]
 800a26c:	eba3 0509 	sublt.w	r5, r3, r9
 800a270:	464b      	movge	r3, r9
 800a272:	bfb8      	it	lt
 800a274:	2300      	movlt	r3, #0
 800a276:	e77e      	b.n	800a176 <_dtoa_r+0x6fe>
 800a278:	9f07      	ldr	r7, [sp, #28]
 800a27a:	9d05      	ldr	r5, [sp, #20]
 800a27c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a27e:	e783      	b.n	800a188 <_dtoa_r+0x710>
 800a280:	9a07      	ldr	r2, [sp, #28]
 800a282:	e7ab      	b.n	800a1dc <_dtoa_r+0x764>
 800a284:	2300      	movs	r3, #0
 800a286:	e7d4      	b.n	800a232 <_dtoa_r+0x7ba>
 800a288:	9b00      	ldr	r3, [sp, #0]
 800a28a:	e7d2      	b.n	800a232 <_dtoa_r+0x7ba>
 800a28c:	2300      	movs	r3, #0
 800a28e:	9307      	str	r3, [sp, #28]
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a296:	6918      	ldr	r0, [r3, #16]
 800a298:	f000 fc20 	bl	800aadc <__hi0bits>
 800a29c:	f1c0 0020 	rsb	r0, r0, #32
 800a2a0:	4440      	add	r0, r8
 800a2a2:	f010 001f 	ands.w	r0, r0, #31
 800a2a6:	d047      	beq.n	800a338 <_dtoa_r+0x8c0>
 800a2a8:	f1c0 0320 	rsb	r3, r0, #32
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	dd3b      	ble.n	800a328 <_dtoa_r+0x8b0>
 800a2b0:	9b05      	ldr	r3, [sp, #20]
 800a2b2:	f1c0 001c 	rsb	r0, r0, #28
 800a2b6:	4403      	add	r3, r0
 800a2b8:	9305      	str	r3, [sp, #20]
 800a2ba:	4405      	add	r5, r0
 800a2bc:	4480      	add	r8, r0
 800a2be:	9b05      	ldr	r3, [sp, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	dd05      	ble.n	800a2d0 <_dtoa_r+0x858>
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	9904      	ldr	r1, [sp, #16]
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f000 fd43 	bl	800ad54 <__lshift>
 800a2ce:	9004      	str	r0, [sp, #16]
 800a2d0:	f1b8 0f00 	cmp.w	r8, #0
 800a2d4:	dd05      	ble.n	800a2e2 <_dtoa_r+0x86a>
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	4642      	mov	r2, r8
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f000 fd3a 	bl	800ad54 <__lshift>
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2e4:	b353      	cbz	r3, 800a33c <_dtoa_r+0x8c4>
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	9804      	ldr	r0, [sp, #16]
 800a2ea:	f000 fd87 	bl	800adfc <__mcmp>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	da24      	bge.n	800a33c <_dtoa_r+0x8c4>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	220a      	movs	r2, #10
 800a2f6:	9904      	ldr	r1, [sp, #16]
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 fbb4 	bl	800aa66 <__multadd>
 800a2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a300:	9004      	str	r0, [sp, #16]
 800a302:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a306:	2b00      	cmp	r3, #0
 800a308:	f000 814d 	beq.w	800a5a6 <_dtoa_r+0xb2e>
 800a30c:	2300      	movs	r3, #0
 800a30e:	4631      	mov	r1, r6
 800a310:	220a      	movs	r2, #10
 800a312:	4620      	mov	r0, r4
 800a314:	f000 fba7 	bl	800aa66 <__multadd>
 800a318:	9b02      	ldr	r3, [sp, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	4606      	mov	r6, r0
 800a31e:	dc4f      	bgt.n	800a3c0 <_dtoa_r+0x948>
 800a320:	9b06      	ldr	r3, [sp, #24]
 800a322:	2b02      	cmp	r3, #2
 800a324:	dd4c      	ble.n	800a3c0 <_dtoa_r+0x948>
 800a326:	e011      	b.n	800a34c <_dtoa_r+0x8d4>
 800a328:	d0c9      	beq.n	800a2be <_dtoa_r+0x846>
 800a32a:	9a05      	ldr	r2, [sp, #20]
 800a32c:	331c      	adds	r3, #28
 800a32e:	441a      	add	r2, r3
 800a330:	9205      	str	r2, [sp, #20]
 800a332:	441d      	add	r5, r3
 800a334:	4498      	add	r8, r3
 800a336:	e7c2      	b.n	800a2be <_dtoa_r+0x846>
 800a338:	4603      	mov	r3, r0
 800a33a:	e7f6      	b.n	800a32a <_dtoa_r+0x8b2>
 800a33c:	f1b9 0f00 	cmp.w	r9, #0
 800a340:	dc38      	bgt.n	800a3b4 <_dtoa_r+0x93c>
 800a342:	9b06      	ldr	r3, [sp, #24]
 800a344:	2b02      	cmp	r3, #2
 800a346:	dd35      	ble.n	800a3b4 <_dtoa_r+0x93c>
 800a348:	f8cd 9008 	str.w	r9, [sp, #8]
 800a34c:	9b02      	ldr	r3, [sp, #8]
 800a34e:	b963      	cbnz	r3, 800a36a <_dtoa_r+0x8f2>
 800a350:	4639      	mov	r1, r7
 800a352:	2205      	movs	r2, #5
 800a354:	4620      	mov	r0, r4
 800a356:	f000 fb86 	bl	800aa66 <__multadd>
 800a35a:	4601      	mov	r1, r0
 800a35c:	4607      	mov	r7, r0
 800a35e:	9804      	ldr	r0, [sp, #16]
 800a360:	f000 fd4c 	bl	800adfc <__mcmp>
 800a364:	2800      	cmp	r0, #0
 800a366:	f73f adcc 	bgt.w	8009f02 <_dtoa_r+0x48a>
 800a36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a36c:	465d      	mov	r5, fp
 800a36e:	ea6f 0a03 	mvn.w	sl, r3
 800a372:	f04f 0900 	mov.w	r9, #0
 800a376:	4639      	mov	r1, r7
 800a378:	4620      	mov	r0, r4
 800a37a:	f000 fb5d 	bl	800aa38 <_Bfree>
 800a37e:	2e00      	cmp	r6, #0
 800a380:	f43f aeb7 	beq.w	800a0f2 <_dtoa_r+0x67a>
 800a384:	f1b9 0f00 	cmp.w	r9, #0
 800a388:	d005      	beq.n	800a396 <_dtoa_r+0x91e>
 800a38a:	45b1      	cmp	r9, r6
 800a38c:	d003      	beq.n	800a396 <_dtoa_r+0x91e>
 800a38e:	4649      	mov	r1, r9
 800a390:	4620      	mov	r0, r4
 800a392:	f000 fb51 	bl	800aa38 <_Bfree>
 800a396:	4631      	mov	r1, r6
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fb4d 	bl	800aa38 <_Bfree>
 800a39e:	e6a8      	b.n	800a0f2 <_dtoa_r+0x67a>
 800a3a0:	2700      	movs	r7, #0
 800a3a2:	463e      	mov	r6, r7
 800a3a4:	e7e1      	b.n	800a36a <_dtoa_r+0x8f2>
 800a3a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a3aa:	463e      	mov	r6, r7
 800a3ac:	e5a9      	b.n	8009f02 <_dtoa_r+0x48a>
 800a3ae:	bf00      	nop
 800a3b0:	40240000 	.word	0x40240000
 800a3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f000 80fa 	beq.w	800a5b4 <_dtoa_r+0xb3c>
 800a3c0:	2d00      	cmp	r5, #0
 800a3c2:	dd05      	ble.n	800a3d0 <_dtoa_r+0x958>
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	462a      	mov	r2, r5
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f000 fcc3 	bl	800ad54 <__lshift>
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	9b07      	ldr	r3, [sp, #28]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d04c      	beq.n	800a470 <_dtoa_r+0x9f8>
 800a3d6:	6871      	ldr	r1, [r6, #4]
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f000 faf9 	bl	800a9d0 <_Balloc>
 800a3de:	6932      	ldr	r2, [r6, #16]
 800a3e0:	3202      	adds	r2, #2
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	0092      	lsls	r2, r2, #2
 800a3e6:	f106 010c 	add.w	r1, r6, #12
 800a3ea:	300c      	adds	r0, #12
 800a3ec:	f7fe fcec 	bl	8008dc8 <memcpy>
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f000 fcad 	bl	800ad54 <__lshift>
 800a3fa:	9b00      	ldr	r3, [sp, #0]
 800a3fc:	f8cd b014 	str.w	fp, [sp, #20]
 800a400:	f003 0301 	and.w	r3, r3, #1
 800a404:	46b1      	mov	r9, r6
 800a406:	9307      	str	r3, [sp, #28]
 800a408:	4606      	mov	r6, r0
 800a40a:	4639      	mov	r1, r7
 800a40c:	9804      	ldr	r0, [sp, #16]
 800a40e:	f7ff faa7 	bl	8009960 <quorem>
 800a412:	4649      	mov	r1, r9
 800a414:	4605      	mov	r5, r0
 800a416:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a41a:	9804      	ldr	r0, [sp, #16]
 800a41c:	f000 fcee 	bl	800adfc <__mcmp>
 800a420:	4632      	mov	r2, r6
 800a422:	9000      	str	r0, [sp, #0]
 800a424:	4639      	mov	r1, r7
 800a426:	4620      	mov	r0, r4
 800a428:	f000 fd02 	bl	800ae30 <__mdiff>
 800a42c:	68c3      	ldr	r3, [r0, #12]
 800a42e:	4602      	mov	r2, r0
 800a430:	bb03      	cbnz	r3, 800a474 <_dtoa_r+0x9fc>
 800a432:	4601      	mov	r1, r0
 800a434:	9008      	str	r0, [sp, #32]
 800a436:	9804      	ldr	r0, [sp, #16]
 800a438:	f000 fce0 	bl	800adfc <__mcmp>
 800a43c:	9a08      	ldr	r2, [sp, #32]
 800a43e:	4603      	mov	r3, r0
 800a440:	4611      	mov	r1, r2
 800a442:	4620      	mov	r0, r4
 800a444:	9308      	str	r3, [sp, #32]
 800a446:	f000 faf7 	bl	800aa38 <_Bfree>
 800a44a:	9b08      	ldr	r3, [sp, #32]
 800a44c:	b9a3      	cbnz	r3, 800a478 <_dtoa_r+0xa00>
 800a44e:	9a06      	ldr	r2, [sp, #24]
 800a450:	b992      	cbnz	r2, 800a478 <_dtoa_r+0xa00>
 800a452:	9a07      	ldr	r2, [sp, #28]
 800a454:	b982      	cbnz	r2, 800a478 <_dtoa_r+0xa00>
 800a456:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a45a:	d029      	beq.n	800a4b0 <_dtoa_r+0xa38>
 800a45c:	9b00      	ldr	r3, [sp, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	dd01      	ble.n	800a466 <_dtoa_r+0x9ee>
 800a462:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a466:	9b05      	ldr	r3, [sp, #20]
 800a468:	1c5d      	adds	r5, r3, #1
 800a46a:	f883 8000 	strb.w	r8, [r3]
 800a46e:	e782      	b.n	800a376 <_dtoa_r+0x8fe>
 800a470:	4630      	mov	r0, r6
 800a472:	e7c2      	b.n	800a3fa <_dtoa_r+0x982>
 800a474:	2301      	movs	r3, #1
 800a476:	e7e3      	b.n	800a440 <_dtoa_r+0x9c8>
 800a478:	9a00      	ldr	r2, [sp, #0]
 800a47a:	2a00      	cmp	r2, #0
 800a47c:	db04      	blt.n	800a488 <_dtoa_r+0xa10>
 800a47e:	d125      	bne.n	800a4cc <_dtoa_r+0xa54>
 800a480:	9a06      	ldr	r2, [sp, #24]
 800a482:	bb1a      	cbnz	r2, 800a4cc <_dtoa_r+0xa54>
 800a484:	9a07      	ldr	r2, [sp, #28]
 800a486:	bb0a      	cbnz	r2, 800a4cc <_dtoa_r+0xa54>
 800a488:	2b00      	cmp	r3, #0
 800a48a:	ddec      	ble.n	800a466 <_dtoa_r+0x9ee>
 800a48c:	2201      	movs	r2, #1
 800a48e:	9904      	ldr	r1, [sp, #16]
 800a490:	4620      	mov	r0, r4
 800a492:	f000 fc5f 	bl	800ad54 <__lshift>
 800a496:	4639      	mov	r1, r7
 800a498:	9004      	str	r0, [sp, #16]
 800a49a:	f000 fcaf 	bl	800adfc <__mcmp>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	dc03      	bgt.n	800a4aa <_dtoa_r+0xa32>
 800a4a2:	d1e0      	bne.n	800a466 <_dtoa_r+0x9ee>
 800a4a4:	f018 0f01 	tst.w	r8, #1
 800a4a8:	d0dd      	beq.n	800a466 <_dtoa_r+0x9ee>
 800a4aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a4ae:	d1d8      	bne.n	800a462 <_dtoa_r+0x9ea>
 800a4b0:	9b05      	ldr	r3, [sp, #20]
 800a4b2:	9a05      	ldr	r2, [sp, #20]
 800a4b4:	1c5d      	adds	r5, r3, #1
 800a4b6:	2339      	movs	r3, #57	; 0x39
 800a4b8:	7013      	strb	r3, [r2, #0]
 800a4ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4be:	2b39      	cmp	r3, #57	; 0x39
 800a4c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a4c4:	d04f      	beq.n	800a566 <_dtoa_r+0xaee>
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	7013      	strb	r3, [r2, #0]
 800a4ca:	e754      	b.n	800a376 <_dtoa_r+0x8fe>
 800a4cc:	9a05      	ldr	r2, [sp, #20]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f102 0501 	add.w	r5, r2, #1
 800a4d4:	dd06      	ble.n	800a4e4 <_dtoa_r+0xa6c>
 800a4d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a4da:	d0e9      	beq.n	800a4b0 <_dtoa_r+0xa38>
 800a4dc:	f108 0801 	add.w	r8, r8, #1
 800a4e0:	9b05      	ldr	r3, [sp, #20]
 800a4e2:	e7c2      	b.n	800a46a <_dtoa_r+0x9f2>
 800a4e4:	9a02      	ldr	r2, [sp, #8]
 800a4e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a4ea:	eba5 030b 	sub.w	r3, r5, fp
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d021      	beq.n	800a536 <_dtoa_r+0xabe>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	220a      	movs	r2, #10
 800a4f6:	9904      	ldr	r1, [sp, #16]
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f000 fab4 	bl	800aa66 <__multadd>
 800a4fe:	45b1      	cmp	r9, r6
 800a500:	9004      	str	r0, [sp, #16]
 800a502:	f04f 0300 	mov.w	r3, #0
 800a506:	f04f 020a 	mov.w	r2, #10
 800a50a:	4649      	mov	r1, r9
 800a50c:	4620      	mov	r0, r4
 800a50e:	d105      	bne.n	800a51c <_dtoa_r+0xaa4>
 800a510:	f000 faa9 	bl	800aa66 <__multadd>
 800a514:	4681      	mov	r9, r0
 800a516:	4606      	mov	r6, r0
 800a518:	9505      	str	r5, [sp, #20]
 800a51a:	e776      	b.n	800a40a <_dtoa_r+0x992>
 800a51c:	f000 faa3 	bl	800aa66 <__multadd>
 800a520:	4631      	mov	r1, r6
 800a522:	4681      	mov	r9, r0
 800a524:	2300      	movs	r3, #0
 800a526:	220a      	movs	r2, #10
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fa9c 	bl	800aa66 <__multadd>
 800a52e:	4606      	mov	r6, r0
 800a530:	e7f2      	b.n	800a518 <_dtoa_r+0xaa0>
 800a532:	f04f 0900 	mov.w	r9, #0
 800a536:	2201      	movs	r2, #1
 800a538:	9904      	ldr	r1, [sp, #16]
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 fc0a 	bl	800ad54 <__lshift>
 800a540:	4639      	mov	r1, r7
 800a542:	9004      	str	r0, [sp, #16]
 800a544:	f000 fc5a 	bl	800adfc <__mcmp>
 800a548:	2800      	cmp	r0, #0
 800a54a:	dcb6      	bgt.n	800a4ba <_dtoa_r+0xa42>
 800a54c:	d102      	bne.n	800a554 <_dtoa_r+0xadc>
 800a54e:	f018 0f01 	tst.w	r8, #1
 800a552:	d1b2      	bne.n	800a4ba <_dtoa_r+0xa42>
 800a554:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a558:	2b30      	cmp	r3, #48	; 0x30
 800a55a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a55e:	f47f af0a 	bne.w	800a376 <_dtoa_r+0x8fe>
 800a562:	4615      	mov	r5, r2
 800a564:	e7f6      	b.n	800a554 <_dtoa_r+0xadc>
 800a566:	4593      	cmp	fp, r2
 800a568:	d105      	bne.n	800a576 <_dtoa_r+0xafe>
 800a56a:	2331      	movs	r3, #49	; 0x31
 800a56c:	f10a 0a01 	add.w	sl, sl, #1
 800a570:	f88b 3000 	strb.w	r3, [fp]
 800a574:	e6ff      	b.n	800a376 <_dtoa_r+0x8fe>
 800a576:	4615      	mov	r5, r2
 800a578:	e79f      	b.n	800a4ba <_dtoa_r+0xa42>
 800a57a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a5e0 <_dtoa_r+0xb68>
 800a57e:	e007      	b.n	800a590 <_dtoa_r+0xb18>
 800a580:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a582:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a5e4 <_dtoa_r+0xb6c>
 800a586:	b11b      	cbz	r3, 800a590 <_dtoa_r+0xb18>
 800a588:	f10b 0308 	add.w	r3, fp, #8
 800a58c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	4658      	mov	r0, fp
 800a592:	b017      	add	sp, #92	; 0x5c
 800a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a598:	9b06      	ldr	r3, [sp, #24]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	f77f ae35 	ble.w	800a20a <_dtoa_r+0x792>
 800a5a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5a2:	9307      	str	r3, [sp, #28]
 800a5a4:	e649      	b.n	800a23a <_dtoa_r+0x7c2>
 800a5a6:	9b02      	ldr	r3, [sp, #8]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	dc03      	bgt.n	800a5b4 <_dtoa_r+0xb3c>
 800a5ac:	9b06      	ldr	r3, [sp, #24]
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	f73f aecc 	bgt.w	800a34c <_dtoa_r+0x8d4>
 800a5b4:	465d      	mov	r5, fp
 800a5b6:	4639      	mov	r1, r7
 800a5b8:	9804      	ldr	r0, [sp, #16]
 800a5ba:	f7ff f9d1 	bl	8009960 <quorem>
 800a5be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a5c2:	f805 8b01 	strb.w	r8, [r5], #1
 800a5c6:	9a02      	ldr	r2, [sp, #8]
 800a5c8:	eba5 030b 	sub.w	r3, r5, fp
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	ddb0      	ble.n	800a532 <_dtoa_r+0xaba>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	220a      	movs	r2, #10
 800a5d4:	9904      	ldr	r1, [sp, #16]
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f000 fa45 	bl	800aa66 <__multadd>
 800a5dc:	9004      	str	r0, [sp, #16]
 800a5de:	e7ea      	b.n	800a5b6 <_dtoa_r+0xb3e>
 800a5e0:	0800b988 	.word	0x0800b988
 800a5e4:	0800b9ac 	.word	0x0800b9ac

0800a5e8 <__sflush_r>:
 800a5e8:	898a      	ldrh	r2, [r1, #12]
 800a5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	0710      	lsls	r0, r2, #28
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	d458      	bmi.n	800a6a8 <__sflush_r+0xc0>
 800a5f6:	684b      	ldr	r3, [r1, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	dc05      	bgt.n	800a608 <__sflush_r+0x20>
 800a5fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	dc02      	bgt.n	800a608 <__sflush_r+0x20>
 800a602:	2000      	movs	r0, #0
 800a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d0f9      	beq.n	800a602 <__sflush_r+0x1a>
 800a60e:	2300      	movs	r3, #0
 800a610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a614:	682f      	ldr	r7, [r5, #0]
 800a616:	6a21      	ldr	r1, [r4, #32]
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	d032      	beq.n	800a682 <__sflush_r+0x9a>
 800a61c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a61e:	89a3      	ldrh	r3, [r4, #12]
 800a620:	075a      	lsls	r2, r3, #29
 800a622:	d505      	bpl.n	800a630 <__sflush_r+0x48>
 800a624:	6863      	ldr	r3, [r4, #4]
 800a626:	1ac0      	subs	r0, r0, r3
 800a628:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a62a:	b10b      	cbz	r3, 800a630 <__sflush_r+0x48>
 800a62c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a62e:	1ac0      	subs	r0, r0, r3
 800a630:	2300      	movs	r3, #0
 800a632:	4602      	mov	r2, r0
 800a634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a636:	6a21      	ldr	r1, [r4, #32]
 800a638:	4628      	mov	r0, r5
 800a63a:	47b0      	blx	r6
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	89a3      	ldrh	r3, [r4, #12]
 800a640:	d106      	bne.n	800a650 <__sflush_r+0x68>
 800a642:	6829      	ldr	r1, [r5, #0]
 800a644:	291d      	cmp	r1, #29
 800a646:	d848      	bhi.n	800a6da <__sflush_r+0xf2>
 800a648:	4a29      	ldr	r2, [pc, #164]	; (800a6f0 <__sflush_r+0x108>)
 800a64a:	40ca      	lsrs	r2, r1
 800a64c:	07d6      	lsls	r6, r2, #31
 800a64e:	d544      	bpl.n	800a6da <__sflush_r+0xf2>
 800a650:	2200      	movs	r2, #0
 800a652:	6062      	str	r2, [r4, #4]
 800a654:	04d9      	lsls	r1, r3, #19
 800a656:	6922      	ldr	r2, [r4, #16]
 800a658:	6022      	str	r2, [r4, #0]
 800a65a:	d504      	bpl.n	800a666 <__sflush_r+0x7e>
 800a65c:	1c42      	adds	r2, r0, #1
 800a65e:	d101      	bne.n	800a664 <__sflush_r+0x7c>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b903      	cbnz	r3, 800a666 <__sflush_r+0x7e>
 800a664:	6560      	str	r0, [r4, #84]	; 0x54
 800a666:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a668:	602f      	str	r7, [r5, #0]
 800a66a:	2900      	cmp	r1, #0
 800a66c:	d0c9      	beq.n	800a602 <__sflush_r+0x1a>
 800a66e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a672:	4299      	cmp	r1, r3
 800a674:	d002      	beq.n	800a67c <__sflush_r+0x94>
 800a676:	4628      	mov	r0, r5
 800a678:	f000 fc94 	bl	800afa4 <_free_r>
 800a67c:	2000      	movs	r0, #0
 800a67e:	6360      	str	r0, [r4, #52]	; 0x34
 800a680:	e7c0      	b.n	800a604 <__sflush_r+0x1c>
 800a682:	2301      	movs	r3, #1
 800a684:	4628      	mov	r0, r5
 800a686:	47b0      	blx	r6
 800a688:	1c41      	adds	r1, r0, #1
 800a68a:	d1c8      	bne.n	800a61e <__sflush_r+0x36>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0c5      	beq.n	800a61e <__sflush_r+0x36>
 800a692:	2b1d      	cmp	r3, #29
 800a694:	d001      	beq.n	800a69a <__sflush_r+0xb2>
 800a696:	2b16      	cmp	r3, #22
 800a698:	d101      	bne.n	800a69e <__sflush_r+0xb6>
 800a69a:	602f      	str	r7, [r5, #0]
 800a69c:	e7b1      	b.n	800a602 <__sflush_r+0x1a>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	e7ad      	b.n	800a604 <__sflush_r+0x1c>
 800a6a8:	690f      	ldr	r7, [r1, #16]
 800a6aa:	2f00      	cmp	r7, #0
 800a6ac:	d0a9      	beq.n	800a602 <__sflush_r+0x1a>
 800a6ae:	0793      	lsls	r3, r2, #30
 800a6b0:	680e      	ldr	r6, [r1, #0]
 800a6b2:	bf08      	it	eq
 800a6b4:	694b      	ldreq	r3, [r1, #20]
 800a6b6:	600f      	str	r7, [r1, #0]
 800a6b8:	bf18      	it	ne
 800a6ba:	2300      	movne	r3, #0
 800a6bc:	eba6 0807 	sub.w	r8, r6, r7
 800a6c0:	608b      	str	r3, [r1, #8]
 800a6c2:	f1b8 0f00 	cmp.w	r8, #0
 800a6c6:	dd9c      	ble.n	800a602 <__sflush_r+0x1a>
 800a6c8:	4643      	mov	r3, r8
 800a6ca:	463a      	mov	r2, r7
 800a6cc:	6a21      	ldr	r1, [r4, #32]
 800a6ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	47b0      	blx	r6
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	dc06      	bgt.n	800a6e6 <__sflush_r+0xfe>
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6de:	81a3      	strh	r3, [r4, #12]
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	e78e      	b.n	800a604 <__sflush_r+0x1c>
 800a6e6:	4407      	add	r7, r0
 800a6e8:	eba8 0800 	sub.w	r8, r8, r0
 800a6ec:	e7e9      	b.n	800a6c2 <__sflush_r+0xda>
 800a6ee:	bf00      	nop
 800a6f0:	20400001 	.word	0x20400001

0800a6f4 <_fflush_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	690b      	ldr	r3, [r1, #16]
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	b1db      	cbz	r3, 800a736 <_fflush_r+0x42>
 800a6fe:	b118      	cbz	r0, 800a708 <_fflush_r+0x14>
 800a700:	6983      	ldr	r3, [r0, #24]
 800a702:	b90b      	cbnz	r3, 800a708 <_fflush_r+0x14>
 800a704:	f000 f860 	bl	800a7c8 <__sinit>
 800a708:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <_fflush_r+0x48>)
 800a70a:	429c      	cmp	r4, r3
 800a70c:	d109      	bne.n	800a722 <_fflush_r+0x2e>
 800a70e:	686c      	ldr	r4, [r5, #4]
 800a710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a714:	b17b      	cbz	r3, 800a736 <_fflush_r+0x42>
 800a716:	4621      	mov	r1, r4
 800a718:	4628      	mov	r0, r5
 800a71a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a71e:	f7ff bf63 	b.w	800a5e8 <__sflush_r>
 800a722:	4b07      	ldr	r3, [pc, #28]	; (800a740 <_fflush_r+0x4c>)
 800a724:	429c      	cmp	r4, r3
 800a726:	d101      	bne.n	800a72c <_fflush_r+0x38>
 800a728:	68ac      	ldr	r4, [r5, #8]
 800a72a:	e7f1      	b.n	800a710 <_fflush_r+0x1c>
 800a72c:	4b05      	ldr	r3, [pc, #20]	; (800a744 <_fflush_r+0x50>)
 800a72e:	429c      	cmp	r4, r3
 800a730:	bf08      	it	eq
 800a732:	68ec      	ldreq	r4, [r5, #12]
 800a734:	e7ec      	b.n	800a710 <_fflush_r+0x1c>
 800a736:	2000      	movs	r0, #0
 800a738:	bd38      	pop	{r3, r4, r5, pc}
 800a73a:	bf00      	nop
 800a73c:	0800b9dc 	.word	0x0800b9dc
 800a740:	0800b9fc 	.word	0x0800b9fc
 800a744:	0800b9bc 	.word	0x0800b9bc

0800a748 <std>:
 800a748:	2300      	movs	r3, #0
 800a74a:	b510      	push	{r4, lr}
 800a74c:	4604      	mov	r4, r0
 800a74e:	e9c0 3300 	strd	r3, r3, [r0]
 800a752:	6083      	str	r3, [r0, #8]
 800a754:	8181      	strh	r1, [r0, #12]
 800a756:	6643      	str	r3, [r0, #100]	; 0x64
 800a758:	81c2      	strh	r2, [r0, #14]
 800a75a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a75e:	6183      	str	r3, [r0, #24]
 800a760:	4619      	mov	r1, r3
 800a762:	2208      	movs	r2, #8
 800a764:	305c      	adds	r0, #92	; 0x5c
 800a766:	f7fe fb3a 	bl	8008dde <memset>
 800a76a:	4b05      	ldr	r3, [pc, #20]	; (800a780 <std+0x38>)
 800a76c:	6263      	str	r3, [r4, #36]	; 0x24
 800a76e:	4b05      	ldr	r3, [pc, #20]	; (800a784 <std+0x3c>)
 800a770:	62a3      	str	r3, [r4, #40]	; 0x28
 800a772:	4b05      	ldr	r3, [pc, #20]	; (800a788 <std+0x40>)
 800a774:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a776:	4b05      	ldr	r3, [pc, #20]	; (800a78c <std+0x44>)
 800a778:	6224      	str	r4, [r4, #32]
 800a77a:	6323      	str	r3, [r4, #48]	; 0x30
 800a77c:	bd10      	pop	{r4, pc}
 800a77e:	bf00      	nop
 800a780:	0800b639 	.word	0x0800b639
 800a784:	0800b65b 	.word	0x0800b65b
 800a788:	0800b693 	.word	0x0800b693
 800a78c:	0800b6b7 	.word	0x0800b6b7

0800a790 <_cleanup_r>:
 800a790:	4901      	ldr	r1, [pc, #4]	; (800a798 <_cleanup_r+0x8>)
 800a792:	f000 b885 	b.w	800a8a0 <_fwalk_reent>
 800a796:	bf00      	nop
 800a798:	0800a6f5 	.word	0x0800a6f5

0800a79c <__sfmoreglue>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	1e4a      	subs	r2, r1, #1
 800a7a0:	2568      	movs	r5, #104	; 0x68
 800a7a2:	4355      	muls	r5, r2
 800a7a4:	460e      	mov	r6, r1
 800a7a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7aa:	f000 fc49 	bl	800b040 <_malloc_r>
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	b140      	cbz	r0, 800a7c4 <__sfmoreglue+0x28>
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	e9c0 1600 	strd	r1, r6, [r0]
 800a7b8:	300c      	adds	r0, #12
 800a7ba:	60a0      	str	r0, [r4, #8]
 800a7bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a7c0:	f7fe fb0d 	bl	8008dde <memset>
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}

0800a7c8 <__sinit>:
 800a7c8:	6983      	ldr	r3, [r0, #24]
 800a7ca:	b510      	push	{r4, lr}
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	bb33      	cbnz	r3, 800a81e <__sinit+0x56>
 800a7d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a7d4:	6503      	str	r3, [r0, #80]	; 0x50
 800a7d6:	4b12      	ldr	r3, [pc, #72]	; (800a820 <__sinit+0x58>)
 800a7d8:	4a12      	ldr	r2, [pc, #72]	; (800a824 <__sinit+0x5c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6282      	str	r2, [r0, #40]	; 0x28
 800a7de:	4298      	cmp	r0, r3
 800a7e0:	bf04      	itt	eq
 800a7e2:	2301      	moveq	r3, #1
 800a7e4:	6183      	streq	r3, [r0, #24]
 800a7e6:	f000 f81f 	bl	800a828 <__sfp>
 800a7ea:	6060      	str	r0, [r4, #4]
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 f81b 	bl	800a828 <__sfp>
 800a7f2:	60a0      	str	r0, [r4, #8]
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 f817 	bl	800a828 <__sfp>
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	60e0      	str	r0, [r4, #12]
 800a7fe:	2104      	movs	r1, #4
 800a800:	6860      	ldr	r0, [r4, #4]
 800a802:	f7ff ffa1 	bl	800a748 <std>
 800a806:	2201      	movs	r2, #1
 800a808:	2109      	movs	r1, #9
 800a80a:	68a0      	ldr	r0, [r4, #8]
 800a80c:	f7ff ff9c 	bl	800a748 <std>
 800a810:	2202      	movs	r2, #2
 800a812:	2112      	movs	r1, #18
 800a814:	68e0      	ldr	r0, [r4, #12]
 800a816:	f7ff ff97 	bl	800a748 <std>
 800a81a:	2301      	movs	r3, #1
 800a81c:	61a3      	str	r3, [r4, #24]
 800a81e:	bd10      	pop	{r4, pc}
 800a820:	0800b974 	.word	0x0800b974
 800a824:	0800a791 	.word	0x0800a791

0800a828 <__sfp>:
 800a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82a:	4b1b      	ldr	r3, [pc, #108]	; (800a898 <__sfp+0x70>)
 800a82c:	681e      	ldr	r6, [r3, #0]
 800a82e:	69b3      	ldr	r3, [r6, #24]
 800a830:	4607      	mov	r7, r0
 800a832:	b913      	cbnz	r3, 800a83a <__sfp+0x12>
 800a834:	4630      	mov	r0, r6
 800a836:	f7ff ffc7 	bl	800a7c8 <__sinit>
 800a83a:	3648      	adds	r6, #72	; 0x48
 800a83c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a840:	3b01      	subs	r3, #1
 800a842:	d503      	bpl.n	800a84c <__sfp+0x24>
 800a844:	6833      	ldr	r3, [r6, #0]
 800a846:	b133      	cbz	r3, 800a856 <__sfp+0x2e>
 800a848:	6836      	ldr	r6, [r6, #0]
 800a84a:	e7f7      	b.n	800a83c <__sfp+0x14>
 800a84c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a850:	b16d      	cbz	r5, 800a86e <__sfp+0x46>
 800a852:	3468      	adds	r4, #104	; 0x68
 800a854:	e7f4      	b.n	800a840 <__sfp+0x18>
 800a856:	2104      	movs	r1, #4
 800a858:	4638      	mov	r0, r7
 800a85a:	f7ff ff9f 	bl	800a79c <__sfmoreglue>
 800a85e:	6030      	str	r0, [r6, #0]
 800a860:	2800      	cmp	r0, #0
 800a862:	d1f1      	bne.n	800a848 <__sfp+0x20>
 800a864:	230c      	movs	r3, #12
 800a866:	603b      	str	r3, [r7, #0]
 800a868:	4604      	mov	r4, r0
 800a86a:	4620      	mov	r0, r4
 800a86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a86e:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <__sfp+0x74>)
 800a870:	6665      	str	r5, [r4, #100]	; 0x64
 800a872:	e9c4 5500 	strd	r5, r5, [r4]
 800a876:	60a5      	str	r5, [r4, #8]
 800a878:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a87c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a880:	2208      	movs	r2, #8
 800a882:	4629      	mov	r1, r5
 800a884:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a888:	f7fe faa9 	bl	8008dde <memset>
 800a88c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a890:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a894:	e7e9      	b.n	800a86a <__sfp+0x42>
 800a896:	bf00      	nop
 800a898:	0800b974 	.word	0x0800b974
 800a89c:	ffff0001 	.word	0xffff0001

0800a8a0 <_fwalk_reent>:
 800a8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a4:	4680      	mov	r8, r0
 800a8a6:	4689      	mov	r9, r1
 800a8a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8ac:	2600      	movs	r6, #0
 800a8ae:	b914      	cbnz	r4, 800a8b6 <_fwalk_reent+0x16>
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a8ba:	3f01      	subs	r7, #1
 800a8bc:	d501      	bpl.n	800a8c2 <_fwalk_reent+0x22>
 800a8be:	6824      	ldr	r4, [r4, #0]
 800a8c0:	e7f5      	b.n	800a8ae <_fwalk_reent+0xe>
 800a8c2:	89ab      	ldrh	r3, [r5, #12]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d907      	bls.n	800a8d8 <_fwalk_reent+0x38>
 800a8c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	d003      	beq.n	800a8d8 <_fwalk_reent+0x38>
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	47c8      	blx	r9
 800a8d6:	4306      	orrs	r6, r0
 800a8d8:	3568      	adds	r5, #104	; 0x68
 800a8da:	e7ee      	b.n	800a8ba <_fwalk_reent+0x1a>

0800a8dc <_localeconv_r>:
 800a8dc:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <_localeconv_r+0x14>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6a18      	ldr	r0, [r3, #32]
 800a8e2:	4b04      	ldr	r3, [pc, #16]	; (800a8f4 <_localeconv_r+0x18>)
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	bf08      	it	eq
 800a8e8:	4618      	moveq	r0, r3
 800a8ea:	30f0      	adds	r0, #240	; 0xf0
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	20000084 	.word	0x20000084
 800a8f4:	200000e8 	.word	0x200000e8

0800a8f8 <__swhatbuf_r>:
 800a8f8:	b570      	push	{r4, r5, r6, lr}
 800a8fa:	460e      	mov	r6, r1
 800a8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a900:	2900      	cmp	r1, #0
 800a902:	b096      	sub	sp, #88	; 0x58
 800a904:	4614      	mov	r4, r2
 800a906:	461d      	mov	r5, r3
 800a908:	da07      	bge.n	800a91a <__swhatbuf_r+0x22>
 800a90a:	2300      	movs	r3, #0
 800a90c:	602b      	str	r3, [r5, #0]
 800a90e:	89b3      	ldrh	r3, [r6, #12]
 800a910:	061a      	lsls	r2, r3, #24
 800a912:	d410      	bmi.n	800a936 <__swhatbuf_r+0x3e>
 800a914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a918:	e00e      	b.n	800a938 <__swhatbuf_r+0x40>
 800a91a:	466a      	mov	r2, sp
 800a91c:	f000 fef2 	bl	800b704 <_fstat_r>
 800a920:	2800      	cmp	r0, #0
 800a922:	dbf2      	blt.n	800a90a <__swhatbuf_r+0x12>
 800a924:	9a01      	ldr	r2, [sp, #4]
 800a926:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a92a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a92e:	425a      	negs	r2, r3
 800a930:	415a      	adcs	r2, r3
 800a932:	602a      	str	r2, [r5, #0]
 800a934:	e7ee      	b.n	800a914 <__swhatbuf_r+0x1c>
 800a936:	2340      	movs	r3, #64	; 0x40
 800a938:	2000      	movs	r0, #0
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	b016      	add	sp, #88	; 0x58
 800a93e:	bd70      	pop	{r4, r5, r6, pc}

0800a940 <__smakebuf_r>:
 800a940:	898b      	ldrh	r3, [r1, #12]
 800a942:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a944:	079d      	lsls	r5, r3, #30
 800a946:	4606      	mov	r6, r0
 800a948:	460c      	mov	r4, r1
 800a94a:	d507      	bpl.n	800a95c <__smakebuf_r+0x1c>
 800a94c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	6123      	str	r3, [r4, #16]
 800a954:	2301      	movs	r3, #1
 800a956:	6163      	str	r3, [r4, #20]
 800a958:	b002      	add	sp, #8
 800a95a:	bd70      	pop	{r4, r5, r6, pc}
 800a95c:	ab01      	add	r3, sp, #4
 800a95e:	466a      	mov	r2, sp
 800a960:	f7ff ffca 	bl	800a8f8 <__swhatbuf_r>
 800a964:	9900      	ldr	r1, [sp, #0]
 800a966:	4605      	mov	r5, r0
 800a968:	4630      	mov	r0, r6
 800a96a:	f000 fb69 	bl	800b040 <_malloc_r>
 800a96e:	b948      	cbnz	r0, 800a984 <__smakebuf_r+0x44>
 800a970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a974:	059a      	lsls	r2, r3, #22
 800a976:	d4ef      	bmi.n	800a958 <__smakebuf_r+0x18>
 800a978:	f023 0303 	bic.w	r3, r3, #3
 800a97c:	f043 0302 	orr.w	r3, r3, #2
 800a980:	81a3      	strh	r3, [r4, #12]
 800a982:	e7e3      	b.n	800a94c <__smakebuf_r+0xc>
 800a984:	4b0d      	ldr	r3, [pc, #52]	; (800a9bc <__smakebuf_r+0x7c>)
 800a986:	62b3      	str	r3, [r6, #40]	; 0x28
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	6020      	str	r0, [r4, #0]
 800a98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a990:	81a3      	strh	r3, [r4, #12]
 800a992:	9b00      	ldr	r3, [sp, #0]
 800a994:	6163      	str	r3, [r4, #20]
 800a996:	9b01      	ldr	r3, [sp, #4]
 800a998:	6120      	str	r0, [r4, #16]
 800a99a:	b15b      	cbz	r3, 800a9b4 <__smakebuf_r+0x74>
 800a99c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f000 fec1 	bl	800b728 <_isatty_r>
 800a9a6:	b128      	cbz	r0, 800a9b4 <__smakebuf_r+0x74>
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	f023 0303 	bic.w	r3, r3, #3
 800a9ae:	f043 0301 	orr.w	r3, r3, #1
 800a9b2:	81a3      	strh	r3, [r4, #12]
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	431d      	orrs	r5, r3
 800a9b8:	81a5      	strh	r5, [r4, #12]
 800a9ba:	e7cd      	b.n	800a958 <__smakebuf_r+0x18>
 800a9bc:	0800a791 	.word	0x0800a791

0800a9c0 <malloc>:
 800a9c0:	4b02      	ldr	r3, [pc, #8]	; (800a9cc <malloc+0xc>)
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	6818      	ldr	r0, [r3, #0]
 800a9c6:	f000 bb3b 	b.w	800b040 <_malloc_r>
 800a9ca:	bf00      	nop
 800a9cc:	20000084 	.word	0x20000084

0800a9d0 <_Balloc>:
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	460e      	mov	r6, r1
 800a9d8:	b93d      	cbnz	r5, 800a9ea <_Balloc+0x1a>
 800a9da:	2010      	movs	r0, #16
 800a9dc:	f7ff fff0 	bl	800a9c0 <malloc>
 800a9e0:	6260      	str	r0, [r4, #36]	; 0x24
 800a9e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9e6:	6005      	str	r5, [r0, #0]
 800a9e8:	60c5      	str	r5, [r0, #12]
 800a9ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a9ec:	68eb      	ldr	r3, [r5, #12]
 800a9ee:	b183      	cbz	r3, 800aa12 <_Balloc+0x42>
 800a9f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a9f8:	b9b8      	cbnz	r0, 800aa2a <_Balloc+0x5a>
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	fa01 f506 	lsl.w	r5, r1, r6
 800aa00:	1d6a      	adds	r2, r5, #5
 800aa02:	0092      	lsls	r2, r2, #2
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 fabf 	bl	800af88 <_calloc_r>
 800aa0a:	b160      	cbz	r0, 800aa26 <_Balloc+0x56>
 800aa0c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aa10:	e00e      	b.n	800aa30 <_Balloc+0x60>
 800aa12:	2221      	movs	r2, #33	; 0x21
 800aa14:	2104      	movs	r1, #4
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 fab6 	bl	800af88 <_calloc_r>
 800aa1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa1e:	60e8      	str	r0, [r5, #12]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1e4      	bne.n	800a9f0 <_Balloc+0x20>
 800aa26:	2000      	movs	r0, #0
 800aa28:	bd70      	pop	{r4, r5, r6, pc}
 800aa2a:	6802      	ldr	r2, [r0, #0]
 800aa2c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aa30:	2300      	movs	r3, #0
 800aa32:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa36:	e7f7      	b.n	800aa28 <_Balloc+0x58>

0800aa38 <_Bfree>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	460d      	mov	r5, r1
 800aa40:	b93c      	cbnz	r4, 800aa52 <_Bfree+0x1a>
 800aa42:	2010      	movs	r0, #16
 800aa44:	f7ff ffbc 	bl	800a9c0 <malloc>
 800aa48:	6270      	str	r0, [r6, #36]	; 0x24
 800aa4a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa4e:	6004      	str	r4, [r0, #0]
 800aa50:	60c4      	str	r4, [r0, #12]
 800aa52:	b13d      	cbz	r5, 800aa64 <_Bfree+0x2c>
 800aa54:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aa56:	686a      	ldr	r2, [r5, #4]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa5e:	6029      	str	r1, [r5, #0]
 800aa60:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800aa64:	bd70      	pop	{r4, r5, r6, pc}

0800aa66 <__multadd>:
 800aa66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6a:	690d      	ldr	r5, [r1, #16]
 800aa6c:	461f      	mov	r7, r3
 800aa6e:	4606      	mov	r6, r0
 800aa70:	460c      	mov	r4, r1
 800aa72:	f101 0c14 	add.w	ip, r1, #20
 800aa76:	2300      	movs	r3, #0
 800aa78:	f8dc 0000 	ldr.w	r0, [ip]
 800aa7c:	b281      	uxth	r1, r0
 800aa7e:	fb02 7101 	mla	r1, r2, r1, r7
 800aa82:	0c0f      	lsrs	r7, r1, #16
 800aa84:	0c00      	lsrs	r0, r0, #16
 800aa86:	fb02 7000 	mla	r0, r2, r0, r7
 800aa8a:	b289      	uxth	r1, r1
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800aa92:	429d      	cmp	r5, r3
 800aa94:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800aa98:	f84c 1b04 	str.w	r1, [ip], #4
 800aa9c:	dcec      	bgt.n	800aa78 <__multadd+0x12>
 800aa9e:	b1d7      	cbz	r7, 800aad6 <__multadd+0x70>
 800aaa0:	68a3      	ldr	r3, [r4, #8]
 800aaa2:	42ab      	cmp	r3, r5
 800aaa4:	dc12      	bgt.n	800aacc <__multadd+0x66>
 800aaa6:	6861      	ldr	r1, [r4, #4]
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	3101      	adds	r1, #1
 800aaac:	f7ff ff90 	bl	800a9d0 <_Balloc>
 800aab0:	6922      	ldr	r2, [r4, #16]
 800aab2:	3202      	adds	r2, #2
 800aab4:	f104 010c 	add.w	r1, r4, #12
 800aab8:	4680      	mov	r8, r0
 800aaba:	0092      	lsls	r2, r2, #2
 800aabc:	300c      	adds	r0, #12
 800aabe:	f7fe f983 	bl	8008dc8 <memcpy>
 800aac2:	4621      	mov	r1, r4
 800aac4:	4630      	mov	r0, r6
 800aac6:	f7ff ffb7 	bl	800aa38 <_Bfree>
 800aaca:	4644      	mov	r4, r8
 800aacc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aad0:	3501      	adds	r5, #1
 800aad2:	615f      	str	r7, [r3, #20]
 800aad4:	6125      	str	r5, [r4, #16]
 800aad6:	4620      	mov	r0, r4
 800aad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aadc <__hi0bits>:
 800aadc:	0c02      	lsrs	r2, r0, #16
 800aade:	0412      	lsls	r2, r2, #16
 800aae0:	4603      	mov	r3, r0
 800aae2:	b9b2      	cbnz	r2, 800ab12 <__hi0bits+0x36>
 800aae4:	0403      	lsls	r3, r0, #16
 800aae6:	2010      	movs	r0, #16
 800aae8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aaec:	bf04      	itt	eq
 800aaee:	021b      	lsleq	r3, r3, #8
 800aaf0:	3008      	addeq	r0, #8
 800aaf2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aaf6:	bf04      	itt	eq
 800aaf8:	011b      	lsleq	r3, r3, #4
 800aafa:	3004      	addeq	r0, #4
 800aafc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ab00:	bf04      	itt	eq
 800ab02:	009b      	lsleq	r3, r3, #2
 800ab04:	3002      	addeq	r0, #2
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	db06      	blt.n	800ab18 <__hi0bits+0x3c>
 800ab0a:	005b      	lsls	r3, r3, #1
 800ab0c:	d503      	bpl.n	800ab16 <__hi0bits+0x3a>
 800ab0e:	3001      	adds	r0, #1
 800ab10:	4770      	bx	lr
 800ab12:	2000      	movs	r0, #0
 800ab14:	e7e8      	b.n	800aae8 <__hi0bits+0xc>
 800ab16:	2020      	movs	r0, #32
 800ab18:	4770      	bx	lr

0800ab1a <__lo0bits>:
 800ab1a:	6803      	ldr	r3, [r0, #0]
 800ab1c:	f013 0207 	ands.w	r2, r3, #7
 800ab20:	4601      	mov	r1, r0
 800ab22:	d00b      	beq.n	800ab3c <__lo0bits+0x22>
 800ab24:	07da      	lsls	r2, r3, #31
 800ab26:	d423      	bmi.n	800ab70 <__lo0bits+0x56>
 800ab28:	0798      	lsls	r0, r3, #30
 800ab2a:	bf49      	itett	mi
 800ab2c:	085b      	lsrmi	r3, r3, #1
 800ab2e:	089b      	lsrpl	r3, r3, #2
 800ab30:	2001      	movmi	r0, #1
 800ab32:	600b      	strmi	r3, [r1, #0]
 800ab34:	bf5c      	itt	pl
 800ab36:	600b      	strpl	r3, [r1, #0]
 800ab38:	2002      	movpl	r0, #2
 800ab3a:	4770      	bx	lr
 800ab3c:	b298      	uxth	r0, r3
 800ab3e:	b9a8      	cbnz	r0, 800ab6c <__lo0bits+0x52>
 800ab40:	0c1b      	lsrs	r3, r3, #16
 800ab42:	2010      	movs	r0, #16
 800ab44:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ab48:	bf04      	itt	eq
 800ab4a:	0a1b      	lsreq	r3, r3, #8
 800ab4c:	3008      	addeq	r0, #8
 800ab4e:	071a      	lsls	r2, r3, #28
 800ab50:	bf04      	itt	eq
 800ab52:	091b      	lsreq	r3, r3, #4
 800ab54:	3004      	addeq	r0, #4
 800ab56:	079a      	lsls	r2, r3, #30
 800ab58:	bf04      	itt	eq
 800ab5a:	089b      	lsreq	r3, r3, #2
 800ab5c:	3002      	addeq	r0, #2
 800ab5e:	07da      	lsls	r2, r3, #31
 800ab60:	d402      	bmi.n	800ab68 <__lo0bits+0x4e>
 800ab62:	085b      	lsrs	r3, r3, #1
 800ab64:	d006      	beq.n	800ab74 <__lo0bits+0x5a>
 800ab66:	3001      	adds	r0, #1
 800ab68:	600b      	str	r3, [r1, #0]
 800ab6a:	4770      	bx	lr
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	e7e9      	b.n	800ab44 <__lo0bits+0x2a>
 800ab70:	2000      	movs	r0, #0
 800ab72:	4770      	bx	lr
 800ab74:	2020      	movs	r0, #32
 800ab76:	4770      	bx	lr

0800ab78 <__i2b>:
 800ab78:	b510      	push	{r4, lr}
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	f7ff ff27 	bl	800a9d0 <_Balloc>
 800ab82:	2201      	movs	r2, #1
 800ab84:	6144      	str	r4, [r0, #20]
 800ab86:	6102      	str	r2, [r0, #16]
 800ab88:	bd10      	pop	{r4, pc}

0800ab8a <__multiply>:
 800ab8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8e:	4614      	mov	r4, r2
 800ab90:	690a      	ldr	r2, [r1, #16]
 800ab92:	6923      	ldr	r3, [r4, #16]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	bfb8      	it	lt
 800ab98:	460b      	movlt	r3, r1
 800ab9a:	4688      	mov	r8, r1
 800ab9c:	bfbc      	itt	lt
 800ab9e:	46a0      	movlt	r8, r4
 800aba0:	461c      	movlt	r4, r3
 800aba2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aba6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800abaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800abb2:	eb07 0609 	add.w	r6, r7, r9
 800abb6:	42b3      	cmp	r3, r6
 800abb8:	bfb8      	it	lt
 800abba:	3101      	addlt	r1, #1
 800abbc:	f7ff ff08 	bl	800a9d0 <_Balloc>
 800abc0:	f100 0514 	add.w	r5, r0, #20
 800abc4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800abc8:	462b      	mov	r3, r5
 800abca:	2200      	movs	r2, #0
 800abcc:	4573      	cmp	r3, lr
 800abce:	d316      	bcc.n	800abfe <__multiply+0x74>
 800abd0:	f104 0214 	add.w	r2, r4, #20
 800abd4:	f108 0114 	add.w	r1, r8, #20
 800abd8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800abdc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	9b00      	ldr	r3, [sp, #0]
 800abe4:	9201      	str	r2, [sp, #4]
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d80c      	bhi.n	800ac04 <__multiply+0x7a>
 800abea:	2e00      	cmp	r6, #0
 800abec:	dd03      	ble.n	800abf6 <__multiply+0x6c>
 800abee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d05d      	beq.n	800acb2 <__multiply+0x128>
 800abf6:	6106      	str	r6, [r0, #16]
 800abf8:	b003      	add	sp, #12
 800abfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfe:	f843 2b04 	str.w	r2, [r3], #4
 800ac02:	e7e3      	b.n	800abcc <__multiply+0x42>
 800ac04:	f8b2 b000 	ldrh.w	fp, [r2]
 800ac08:	f1bb 0f00 	cmp.w	fp, #0
 800ac0c:	d023      	beq.n	800ac56 <__multiply+0xcc>
 800ac0e:	4689      	mov	r9, r1
 800ac10:	46ac      	mov	ip, r5
 800ac12:	f04f 0800 	mov.w	r8, #0
 800ac16:	f859 4b04 	ldr.w	r4, [r9], #4
 800ac1a:	f8dc a000 	ldr.w	sl, [ip]
 800ac1e:	b2a3      	uxth	r3, r4
 800ac20:	fa1f fa8a 	uxth.w	sl, sl
 800ac24:	fb0b a303 	mla	r3, fp, r3, sl
 800ac28:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ac2c:	f8dc 4000 	ldr.w	r4, [ip]
 800ac30:	4443      	add	r3, r8
 800ac32:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ac36:	fb0b 840a 	mla	r4, fp, sl, r8
 800ac3a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ac3e:	46e2      	mov	sl, ip
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ac46:	454f      	cmp	r7, r9
 800ac48:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ac4c:	f84a 3b04 	str.w	r3, [sl], #4
 800ac50:	d82b      	bhi.n	800acaa <__multiply+0x120>
 800ac52:	f8cc 8004 	str.w	r8, [ip, #4]
 800ac56:	9b01      	ldr	r3, [sp, #4]
 800ac58:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ac5c:	3204      	adds	r2, #4
 800ac5e:	f1ba 0f00 	cmp.w	sl, #0
 800ac62:	d020      	beq.n	800aca6 <__multiply+0x11c>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	4689      	mov	r9, r1
 800ac68:	46a8      	mov	r8, r5
 800ac6a:	f04f 0b00 	mov.w	fp, #0
 800ac6e:	f8b9 c000 	ldrh.w	ip, [r9]
 800ac72:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ac76:	fb0a 440c 	mla	r4, sl, ip, r4
 800ac7a:	445c      	add	r4, fp
 800ac7c:	46c4      	mov	ip, r8
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ac84:	f84c 3b04 	str.w	r3, [ip], #4
 800ac88:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac8c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ac90:	0c1b      	lsrs	r3, r3, #16
 800ac92:	fb0a b303 	mla	r3, sl, r3, fp
 800ac96:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ac9a:	454f      	cmp	r7, r9
 800ac9c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aca0:	d805      	bhi.n	800acae <__multiply+0x124>
 800aca2:	f8c8 3004 	str.w	r3, [r8, #4]
 800aca6:	3504      	adds	r5, #4
 800aca8:	e79b      	b.n	800abe2 <__multiply+0x58>
 800acaa:	46d4      	mov	ip, sl
 800acac:	e7b3      	b.n	800ac16 <__multiply+0x8c>
 800acae:	46e0      	mov	r8, ip
 800acb0:	e7dd      	b.n	800ac6e <__multiply+0xe4>
 800acb2:	3e01      	subs	r6, #1
 800acb4:	e799      	b.n	800abea <__multiply+0x60>
	...

0800acb8 <__pow5mult>:
 800acb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acbc:	4615      	mov	r5, r2
 800acbe:	f012 0203 	ands.w	r2, r2, #3
 800acc2:	4606      	mov	r6, r0
 800acc4:	460f      	mov	r7, r1
 800acc6:	d007      	beq.n	800acd8 <__pow5mult+0x20>
 800acc8:	3a01      	subs	r2, #1
 800acca:	4c21      	ldr	r4, [pc, #132]	; (800ad50 <__pow5mult+0x98>)
 800accc:	2300      	movs	r3, #0
 800acce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acd2:	f7ff fec8 	bl	800aa66 <__multadd>
 800acd6:	4607      	mov	r7, r0
 800acd8:	10ad      	asrs	r5, r5, #2
 800acda:	d035      	beq.n	800ad48 <__pow5mult+0x90>
 800acdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acde:	b93c      	cbnz	r4, 800acf0 <__pow5mult+0x38>
 800ace0:	2010      	movs	r0, #16
 800ace2:	f7ff fe6d 	bl	800a9c0 <malloc>
 800ace6:	6270      	str	r0, [r6, #36]	; 0x24
 800ace8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acec:	6004      	str	r4, [r0, #0]
 800acee:	60c4      	str	r4, [r0, #12]
 800acf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800acf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acf8:	b94c      	cbnz	r4, 800ad0e <__pow5mult+0x56>
 800acfa:	f240 2171 	movw	r1, #625	; 0x271
 800acfe:	4630      	mov	r0, r6
 800ad00:	f7ff ff3a 	bl	800ab78 <__i2b>
 800ad04:	2300      	movs	r3, #0
 800ad06:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	6003      	str	r3, [r0, #0]
 800ad0e:	f04f 0800 	mov.w	r8, #0
 800ad12:	07eb      	lsls	r3, r5, #31
 800ad14:	d50a      	bpl.n	800ad2c <__pow5mult+0x74>
 800ad16:	4639      	mov	r1, r7
 800ad18:	4622      	mov	r2, r4
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7ff ff35 	bl	800ab8a <__multiply>
 800ad20:	4639      	mov	r1, r7
 800ad22:	4681      	mov	r9, r0
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7ff fe87 	bl	800aa38 <_Bfree>
 800ad2a:	464f      	mov	r7, r9
 800ad2c:	106d      	asrs	r5, r5, #1
 800ad2e:	d00b      	beq.n	800ad48 <__pow5mult+0x90>
 800ad30:	6820      	ldr	r0, [r4, #0]
 800ad32:	b938      	cbnz	r0, 800ad44 <__pow5mult+0x8c>
 800ad34:	4622      	mov	r2, r4
 800ad36:	4621      	mov	r1, r4
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f7ff ff26 	bl	800ab8a <__multiply>
 800ad3e:	6020      	str	r0, [r4, #0]
 800ad40:	f8c0 8000 	str.w	r8, [r0]
 800ad44:	4604      	mov	r4, r0
 800ad46:	e7e4      	b.n	800ad12 <__pow5mult+0x5a>
 800ad48:	4638      	mov	r0, r7
 800ad4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad4e:	bf00      	nop
 800ad50:	0800bb10 	.word	0x0800bb10

0800ad54 <__lshift>:
 800ad54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad58:	460c      	mov	r4, r1
 800ad5a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	6849      	ldr	r1, [r1, #4]
 800ad62:	eb0a 0903 	add.w	r9, sl, r3
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	4607      	mov	r7, r0
 800ad6a:	4616      	mov	r6, r2
 800ad6c:	f109 0501 	add.w	r5, r9, #1
 800ad70:	42ab      	cmp	r3, r5
 800ad72:	db32      	blt.n	800adda <__lshift+0x86>
 800ad74:	4638      	mov	r0, r7
 800ad76:	f7ff fe2b 	bl	800a9d0 <_Balloc>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4680      	mov	r8, r0
 800ad7e:	f100 0114 	add.w	r1, r0, #20
 800ad82:	461a      	mov	r2, r3
 800ad84:	4553      	cmp	r3, sl
 800ad86:	db2b      	blt.n	800ade0 <__lshift+0x8c>
 800ad88:	6920      	ldr	r0, [r4, #16]
 800ad8a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad8e:	f104 0314 	add.w	r3, r4, #20
 800ad92:	f016 021f 	ands.w	r2, r6, #31
 800ad96:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad9a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad9e:	d025      	beq.n	800adec <__lshift+0x98>
 800ada0:	f1c2 0e20 	rsb	lr, r2, #32
 800ada4:	2000      	movs	r0, #0
 800ada6:	681e      	ldr	r6, [r3, #0]
 800ada8:	468a      	mov	sl, r1
 800adaa:	4096      	lsls	r6, r2
 800adac:	4330      	orrs	r0, r6
 800adae:	f84a 0b04 	str.w	r0, [sl], #4
 800adb2:	f853 0b04 	ldr.w	r0, [r3], #4
 800adb6:	459c      	cmp	ip, r3
 800adb8:	fa20 f00e 	lsr.w	r0, r0, lr
 800adbc:	d814      	bhi.n	800ade8 <__lshift+0x94>
 800adbe:	6048      	str	r0, [r1, #4]
 800adc0:	b108      	cbz	r0, 800adc6 <__lshift+0x72>
 800adc2:	f109 0502 	add.w	r5, r9, #2
 800adc6:	3d01      	subs	r5, #1
 800adc8:	4638      	mov	r0, r7
 800adca:	f8c8 5010 	str.w	r5, [r8, #16]
 800adce:	4621      	mov	r1, r4
 800add0:	f7ff fe32 	bl	800aa38 <_Bfree>
 800add4:	4640      	mov	r0, r8
 800add6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adda:	3101      	adds	r1, #1
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	e7c7      	b.n	800ad70 <__lshift+0x1c>
 800ade0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ade4:	3301      	adds	r3, #1
 800ade6:	e7cd      	b.n	800ad84 <__lshift+0x30>
 800ade8:	4651      	mov	r1, sl
 800adea:	e7dc      	b.n	800ada6 <__lshift+0x52>
 800adec:	3904      	subs	r1, #4
 800adee:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf2:	f841 2f04 	str.w	r2, [r1, #4]!
 800adf6:	459c      	cmp	ip, r3
 800adf8:	d8f9      	bhi.n	800adee <__lshift+0x9a>
 800adfa:	e7e4      	b.n	800adc6 <__lshift+0x72>

0800adfc <__mcmp>:
 800adfc:	6903      	ldr	r3, [r0, #16]
 800adfe:	690a      	ldr	r2, [r1, #16]
 800ae00:	1a9b      	subs	r3, r3, r2
 800ae02:	b530      	push	{r4, r5, lr}
 800ae04:	d10c      	bne.n	800ae20 <__mcmp+0x24>
 800ae06:	0092      	lsls	r2, r2, #2
 800ae08:	3014      	adds	r0, #20
 800ae0a:	3114      	adds	r1, #20
 800ae0c:	1884      	adds	r4, r0, r2
 800ae0e:	4411      	add	r1, r2
 800ae10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae18:	4295      	cmp	r5, r2
 800ae1a:	d003      	beq.n	800ae24 <__mcmp+0x28>
 800ae1c:	d305      	bcc.n	800ae2a <__mcmp+0x2e>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	4618      	mov	r0, r3
 800ae22:	bd30      	pop	{r4, r5, pc}
 800ae24:	42a0      	cmp	r0, r4
 800ae26:	d3f3      	bcc.n	800ae10 <__mcmp+0x14>
 800ae28:	e7fa      	b.n	800ae20 <__mcmp+0x24>
 800ae2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2e:	e7f7      	b.n	800ae20 <__mcmp+0x24>

0800ae30 <__mdiff>:
 800ae30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae34:	460d      	mov	r5, r1
 800ae36:	4607      	mov	r7, r0
 800ae38:	4611      	mov	r1, r2
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	f7ff ffdd 	bl	800adfc <__mcmp>
 800ae42:	1e06      	subs	r6, r0, #0
 800ae44:	d108      	bne.n	800ae58 <__mdiff+0x28>
 800ae46:	4631      	mov	r1, r6
 800ae48:	4638      	mov	r0, r7
 800ae4a:	f7ff fdc1 	bl	800a9d0 <_Balloc>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ae54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae58:	bfa4      	itt	ge
 800ae5a:	4623      	movge	r3, r4
 800ae5c:	462c      	movge	r4, r5
 800ae5e:	4638      	mov	r0, r7
 800ae60:	6861      	ldr	r1, [r4, #4]
 800ae62:	bfa6      	itte	ge
 800ae64:	461d      	movge	r5, r3
 800ae66:	2600      	movge	r6, #0
 800ae68:	2601      	movlt	r6, #1
 800ae6a:	f7ff fdb1 	bl	800a9d0 <_Balloc>
 800ae6e:	692b      	ldr	r3, [r5, #16]
 800ae70:	60c6      	str	r6, [r0, #12]
 800ae72:	6926      	ldr	r6, [r4, #16]
 800ae74:	f105 0914 	add.w	r9, r5, #20
 800ae78:	f104 0214 	add.w	r2, r4, #20
 800ae7c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ae80:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ae84:	f100 0514 	add.w	r5, r0, #20
 800ae88:	f04f 0e00 	mov.w	lr, #0
 800ae8c:	f852 ab04 	ldr.w	sl, [r2], #4
 800ae90:	f859 4b04 	ldr.w	r4, [r9], #4
 800ae94:	fa1e f18a 	uxtah	r1, lr, sl
 800ae98:	b2a3      	uxth	r3, r4
 800ae9a:	1ac9      	subs	r1, r1, r3
 800ae9c:	0c23      	lsrs	r3, r4, #16
 800ae9e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800aea2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aea6:	b289      	uxth	r1, r1
 800aea8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800aeac:	45c8      	cmp	r8, r9
 800aeae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800aeb2:	4694      	mov	ip, r2
 800aeb4:	f845 3b04 	str.w	r3, [r5], #4
 800aeb8:	d8e8      	bhi.n	800ae8c <__mdiff+0x5c>
 800aeba:	45bc      	cmp	ip, r7
 800aebc:	d304      	bcc.n	800aec8 <__mdiff+0x98>
 800aebe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800aec2:	b183      	cbz	r3, 800aee6 <__mdiff+0xb6>
 800aec4:	6106      	str	r6, [r0, #16]
 800aec6:	e7c5      	b.n	800ae54 <__mdiff+0x24>
 800aec8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aecc:	fa1e f381 	uxtah	r3, lr, r1
 800aed0:	141a      	asrs	r2, r3, #16
 800aed2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aedc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800aee0:	f845 3b04 	str.w	r3, [r5], #4
 800aee4:	e7e9      	b.n	800aeba <__mdiff+0x8a>
 800aee6:	3e01      	subs	r6, #1
 800aee8:	e7e9      	b.n	800aebe <__mdiff+0x8e>

0800aeea <__d2b>:
 800aeea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aeee:	460e      	mov	r6, r1
 800aef0:	2101      	movs	r1, #1
 800aef2:	ec59 8b10 	vmov	r8, r9, d0
 800aef6:	4615      	mov	r5, r2
 800aef8:	f7ff fd6a 	bl	800a9d0 <_Balloc>
 800aefc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800af00:	4607      	mov	r7, r0
 800af02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af06:	bb34      	cbnz	r4, 800af56 <__d2b+0x6c>
 800af08:	9301      	str	r3, [sp, #4]
 800af0a:	f1b8 0300 	subs.w	r3, r8, #0
 800af0e:	d027      	beq.n	800af60 <__d2b+0x76>
 800af10:	a802      	add	r0, sp, #8
 800af12:	f840 3d08 	str.w	r3, [r0, #-8]!
 800af16:	f7ff fe00 	bl	800ab1a <__lo0bits>
 800af1a:	9900      	ldr	r1, [sp, #0]
 800af1c:	b1f0      	cbz	r0, 800af5c <__d2b+0x72>
 800af1e:	9a01      	ldr	r2, [sp, #4]
 800af20:	f1c0 0320 	rsb	r3, r0, #32
 800af24:	fa02 f303 	lsl.w	r3, r2, r3
 800af28:	430b      	orrs	r3, r1
 800af2a:	40c2      	lsrs	r2, r0
 800af2c:	617b      	str	r3, [r7, #20]
 800af2e:	9201      	str	r2, [sp, #4]
 800af30:	9b01      	ldr	r3, [sp, #4]
 800af32:	61bb      	str	r3, [r7, #24]
 800af34:	2b00      	cmp	r3, #0
 800af36:	bf14      	ite	ne
 800af38:	2102      	movne	r1, #2
 800af3a:	2101      	moveq	r1, #1
 800af3c:	6139      	str	r1, [r7, #16]
 800af3e:	b1c4      	cbz	r4, 800af72 <__d2b+0x88>
 800af40:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800af44:	4404      	add	r4, r0
 800af46:	6034      	str	r4, [r6, #0]
 800af48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af4c:	6028      	str	r0, [r5, #0]
 800af4e:	4638      	mov	r0, r7
 800af50:	b003      	add	sp, #12
 800af52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af5a:	e7d5      	b.n	800af08 <__d2b+0x1e>
 800af5c:	6179      	str	r1, [r7, #20]
 800af5e:	e7e7      	b.n	800af30 <__d2b+0x46>
 800af60:	a801      	add	r0, sp, #4
 800af62:	f7ff fdda 	bl	800ab1a <__lo0bits>
 800af66:	9b01      	ldr	r3, [sp, #4]
 800af68:	617b      	str	r3, [r7, #20]
 800af6a:	2101      	movs	r1, #1
 800af6c:	6139      	str	r1, [r7, #16]
 800af6e:	3020      	adds	r0, #32
 800af70:	e7e5      	b.n	800af3e <__d2b+0x54>
 800af72:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800af76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af7a:	6030      	str	r0, [r6, #0]
 800af7c:	6918      	ldr	r0, [r3, #16]
 800af7e:	f7ff fdad 	bl	800aadc <__hi0bits>
 800af82:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800af86:	e7e1      	b.n	800af4c <__d2b+0x62>

0800af88 <_calloc_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	fb02 f401 	mul.w	r4, r2, r1
 800af8e:	4621      	mov	r1, r4
 800af90:	f000 f856 	bl	800b040 <_malloc_r>
 800af94:	4605      	mov	r5, r0
 800af96:	b118      	cbz	r0, 800afa0 <_calloc_r+0x18>
 800af98:	4622      	mov	r2, r4
 800af9a:	2100      	movs	r1, #0
 800af9c:	f7fd ff1f 	bl	8008dde <memset>
 800afa0:	4628      	mov	r0, r5
 800afa2:	bd38      	pop	{r3, r4, r5, pc}

0800afa4 <_free_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	4605      	mov	r5, r0
 800afa8:	2900      	cmp	r1, #0
 800afaa:	d045      	beq.n	800b038 <_free_r+0x94>
 800afac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afb0:	1f0c      	subs	r4, r1, #4
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	bfb8      	it	lt
 800afb6:	18e4      	addlt	r4, r4, r3
 800afb8:	f000 fc03 	bl	800b7c2 <__malloc_lock>
 800afbc:	4a1f      	ldr	r2, [pc, #124]	; (800b03c <_free_r+0x98>)
 800afbe:	6813      	ldr	r3, [r2, #0]
 800afc0:	4610      	mov	r0, r2
 800afc2:	b933      	cbnz	r3, 800afd2 <_free_r+0x2e>
 800afc4:	6063      	str	r3, [r4, #4]
 800afc6:	6014      	str	r4, [r2, #0]
 800afc8:	4628      	mov	r0, r5
 800afca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afce:	f000 bbf9 	b.w	800b7c4 <__malloc_unlock>
 800afd2:	42a3      	cmp	r3, r4
 800afd4:	d90c      	bls.n	800aff0 <_free_r+0x4c>
 800afd6:	6821      	ldr	r1, [r4, #0]
 800afd8:	1862      	adds	r2, r4, r1
 800afda:	4293      	cmp	r3, r2
 800afdc:	bf04      	itt	eq
 800afde:	681a      	ldreq	r2, [r3, #0]
 800afe0:	685b      	ldreq	r3, [r3, #4]
 800afe2:	6063      	str	r3, [r4, #4]
 800afe4:	bf04      	itt	eq
 800afe6:	1852      	addeq	r2, r2, r1
 800afe8:	6022      	streq	r2, [r4, #0]
 800afea:	6004      	str	r4, [r0, #0]
 800afec:	e7ec      	b.n	800afc8 <_free_r+0x24>
 800afee:	4613      	mov	r3, r2
 800aff0:	685a      	ldr	r2, [r3, #4]
 800aff2:	b10a      	cbz	r2, 800aff8 <_free_r+0x54>
 800aff4:	42a2      	cmp	r2, r4
 800aff6:	d9fa      	bls.n	800afee <_free_r+0x4a>
 800aff8:	6819      	ldr	r1, [r3, #0]
 800affa:	1858      	adds	r0, r3, r1
 800affc:	42a0      	cmp	r0, r4
 800affe:	d10b      	bne.n	800b018 <_free_r+0x74>
 800b000:	6820      	ldr	r0, [r4, #0]
 800b002:	4401      	add	r1, r0
 800b004:	1858      	adds	r0, r3, r1
 800b006:	4282      	cmp	r2, r0
 800b008:	6019      	str	r1, [r3, #0]
 800b00a:	d1dd      	bne.n	800afc8 <_free_r+0x24>
 800b00c:	6810      	ldr	r0, [r2, #0]
 800b00e:	6852      	ldr	r2, [r2, #4]
 800b010:	605a      	str	r2, [r3, #4]
 800b012:	4401      	add	r1, r0
 800b014:	6019      	str	r1, [r3, #0]
 800b016:	e7d7      	b.n	800afc8 <_free_r+0x24>
 800b018:	d902      	bls.n	800b020 <_free_r+0x7c>
 800b01a:	230c      	movs	r3, #12
 800b01c:	602b      	str	r3, [r5, #0]
 800b01e:	e7d3      	b.n	800afc8 <_free_r+0x24>
 800b020:	6820      	ldr	r0, [r4, #0]
 800b022:	1821      	adds	r1, r4, r0
 800b024:	428a      	cmp	r2, r1
 800b026:	bf04      	itt	eq
 800b028:	6811      	ldreq	r1, [r2, #0]
 800b02a:	6852      	ldreq	r2, [r2, #4]
 800b02c:	6062      	str	r2, [r4, #4]
 800b02e:	bf04      	itt	eq
 800b030:	1809      	addeq	r1, r1, r0
 800b032:	6021      	streq	r1, [r4, #0]
 800b034:	605c      	str	r4, [r3, #4]
 800b036:	e7c7      	b.n	800afc8 <_free_r+0x24>
 800b038:	bd38      	pop	{r3, r4, r5, pc}
 800b03a:	bf00      	nop
 800b03c:	200006d8 	.word	0x200006d8

0800b040 <_malloc_r>:
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	1ccd      	adds	r5, r1, #3
 800b044:	f025 0503 	bic.w	r5, r5, #3
 800b048:	3508      	adds	r5, #8
 800b04a:	2d0c      	cmp	r5, #12
 800b04c:	bf38      	it	cc
 800b04e:	250c      	movcc	r5, #12
 800b050:	2d00      	cmp	r5, #0
 800b052:	4606      	mov	r6, r0
 800b054:	db01      	blt.n	800b05a <_malloc_r+0x1a>
 800b056:	42a9      	cmp	r1, r5
 800b058:	d903      	bls.n	800b062 <_malloc_r+0x22>
 800b05a:	230c      	movs	r3, #12
 800b05c:	6033      	str	r3, [r6, #0]
 800b05e:	2000      	movs	r0, #0
 800b060:	bd70      	pop	{r4, r5, r6, pc}
 800b062:	f000 fbae 	bl	800b7c2 <__malloc_lock>
 800b066:	4a21      	ldr	r2, [pc, #132]	; (800b0ec <_malloc_r+0xac>)
 800b068:	6814      	ldr	r4, [r2, #0]
 800b06a:	4621      	mov	r1, r4
 800b06c:	b991      	cbnz	r1, 800b094 <_malloc_r+0x54>
 800b06e:	4c20      	ldr	r4, [pc, #128]	; (800b0f0 <_malloc_r+0xb0>)
 800b070:	6823      	ldr	r3, [r4, #0]
 800b072:	b91b      	cbnz	r3, 800b07c <_malloc_r+0x3c>
 800b074:	4630      	mov	r0, r6
 800b076:	f000 facf 	bl	800b618 <_sbrk_r>
 800b07a:	6020      	str	r0, [r4, #0]
 800b07c:	4629      	mov	r1, r5
 800b07e:	4630      	mov	r0, r6
 800b080:	f000 faca 	bl	800b618 <_sbrk_r>
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	d124      	bne.n	800b0d2 <_malloc_r+0x92>
 800b088:	230c      	movs	r3, #12
 800b08a:	6033      	str	r3, [r6, #0]
 800b08c:	4630      	mov	r0, r6
 800b08e:	f000 fb99 	bl	800b7c4 <__malloc_unlock>
 800b092:	e7e4      	b.n	800b05e <_malloc_r+0x1e>
 800b094:	680b      	ldr	r3, [r1, #0]
 800b096:	1b5b      	subs	r3, r3, r5
 800b098:	d418      	bmi.n	800b0cc <_malloc_r+0x8c>
 800b09a:	2b0b      	cmp	r3, #11
 800b09c:	d90f      	bls.n	800b0be <_malloc_r+0x7e>
 800b09e:	600b      	str	r3, [r1, #0]
 800b0a0:	50cd      	str	r5, [r1, r3]
 800b0a2:	18cc      	adds	r4, r1, r3
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	f000 fb8d 	bl	800b7c4 <__malloc_unlock>
 800b0aa:	f104 000b 	add.w	r0, r4, #11
 800b0ae:	1d23      	adds	r3, r4, #4
 800b0b0:	f020 0007 	bic.w	r0, r0, #7
 800b0b4:	1ac3      	subs	r3, r0, r3
 800b0b6:	d0d3      	beq.n	800b060 <_malloc_r+0x20>
 800b0b8:	425a      	negs	r2, r3
 800b0ba:	50e2      	str	r2, [r4, r3]
 800b0bc:	e7d0      	b.n	800b060 <_malloc_r+0x20>
 800b0be:	428c      	cmp	r4, r1
 800b0c0:	684b      	ldr	r3, [r1, #4]
 800b0c2:	bf16      	itet	ne
 800b0c4:	6063      	strne	r3, [r4, #4]
 800b0c6:	6013      	streq	r3, [r2, #0]
 800b0c8:	460c      	movne	r4, r1
 800b0ca:	e7eb      	b.n	800b0a4 <_malloc_r+0x64>
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	6849      	ldr	r1, [r1, #4]
 800b0d0:	e7cc      	b.n	800b06c <_malloc_r+0x2c>
 800b0d2:	1cc4      	adds	r4, r0, #3
 800b0d4:	f024 0403 	bic.w	r4, r4, #3
 800b0d8:	42a0      	cmp	r0, r4
 800b0da:	d005      	beq.n	800b0e8 <_malloc_r+0xa8>
 800b0dc:	1a21      	subs	r1, r4, r0
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f000 fa9a 	bl	800b618 <_sbrk_r>
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	d0cf      	beq.n	800b088 <_malloc_r+0x48>
 800b0e8:	6025      	str	r5, [r4, #0]
 800b0ea:	e7db      	b.n	800b0a4 <_malloc_r+0x64>
 800b0ec:	200006d8 	.word	0x200006d8
 800b0f0:	200006dc 	.word	0x200006dc

0800b0f4 <__ssputs_r>:
 800b0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f8:	688e      	ldr	r6, [r1, #8]
 800b0fa:	429e      	cmp	r6, r3
 800b0fc:	4682      	mov	sl, r0
 800b0fe:	460c      	mov	r4, r1
 800b100:	4690      	mov	r8, r2
 800b102:	4699      	mov	r9, r3
 800b104:	d837      	bhi.n	800b176 <__ssputs_r+0x82>
 800b106:	898a      	ldrh	r2, [r1, #12]
 800b108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b10c:	d031      	beq.n	800b172 <__ssputs_r+0x7e>
 800b10e:	6825      	ldr	r5, [r4, #0]
 800b110:	6909      	ldr	r1, [r1, #16]
 800b112:	1a6f      	subs	r7, r5, r1
 800b114:	6965      	ldr	r5, [r4, #20]
 800b116:	2302      	movs	r3, #2
 800b118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b11c:	fb95 f5f3 	sdiv	r5, r5, r3
 800b120:	f109 0301 	add.w	r3, r9, #1
 800b124:	443b      	add	r3, r7
 800b126:	429d      	cmp	r5, r3
 800b128:	bf38      	it	cc
 800b12a:	461d      	movcc	r5, r3
 800b12c:	0553      	lsls	r3, r2, #21
 800b12e:	d530      	bpl.n	800b192 <__ssputs_r+0x9e>
 800b130:	4629      	mov	r1, r5
 800b132:	f7ff ff85 	bl	800b040 <_malloc_r>
 800b136:	4606      	mov	r6, r0
 800b138:	b950      	cbnz	r0, 800b150 <__ssputs_r+0x5c>
 800b13a:	230c      	movs	r3, #12
 800b13c:	f8ca 3000 	str.w	r3, [sl]
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b146:	81a3      	strh	r3, [r4, #12]
 800b148:	f04f 30ff 	mov.w	r0, #4294967295
 800b14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b150:	463a      	mov	r2, r7
 800b152:	6921      	ldr	r1, [r4, #16]
 800b154:	f7fd fe38 	bl	8008dc8 <memcpy>
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b162:	81a3      	strh	r3, [r4, #12]
 800b164:	6126      	str	r6, [r4, #16]
 800b166:	6165      	str	r5, [r4, #20]
 800b168:	443e      	add	r6, r7
 800b16a:	1bed      	subs	r5, r5, r7
 800b16c:	6026      	str	r6, [r4, #0]
 800b16e:	60a5      	str	r5, [r4, #8]
 800b170:	464e      	mov	r6, r9
 800b172:	454e      	cmp	r6, r9
 800b174:	d900      	bls.n	800b178 <__ssputs_r+0x84>
 800b176:	464e      	mov	r6, r9
 800b178:	4632      	mov	r2, r6
 800b17a:	4641      	mov	r1, r8
 800b17c:	6820      	ldr	r0, [r4, #0]
 800b17e:	f000 fb07 	bl	800b790 <memmove>
 800b182:	68a3      	ldr	r3, [r4, #8]
 800b184:	1b9b      	subs	r3, r3, r6
 800b186:	60a3      	str	r3, [r4, #8]
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	441e      	add	r6, r3
 800b18c:	6026      	str	r6, [r4, #0]
 800b18e:	2000      	movs	r0, #0
 800b190:	e7dc      	b.n	800b14c <__ssputs_r+0x58>
 800b192:	462a      	mov	r2, r5
 800b194:	f000 fb17 	bl	800b7c6 <_realloc_r>
 800b198:	4606      	mov	r6, r0
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d1e2      	bne.n	800b164 <__ssputs_r+0x70>
 800b19e:	6921      	ldr	r1, [r4, #16]
 800b1a0:	4650      	mov	r0, sl
 800b1a2:	f7ff feff 	bl	800afa4 <_free_r>
 800b1a6:	e7c8      	b.n	800b13a <__ssputs_r+0x46>

0800b1a8 <_svfiprintf_r>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	461d      	mov	r5, r3
 800b1ae:	898b      	ldrh	r3, [r1, #12]
 800b1b0:	061f      	lsls	r7, r3, #24
 800b1b2:	b09d      	sub	sp, #116	; 0x74
 800b1b4:	4680      	mov	r8, r0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	4616      	mov	r6, r2
 800b1ba:	d50f      	bpl.n	800b1dc <_svfiprintf_r+0x34>
 800b1bc:	690b      	ldr	r3, [r1, #16]
 800b1be:	b96b      	cbnz	r3, 800b1dc <_svfiprintf_r+0x34>
 800b1c0:	2140      	movs	r1, #64	; 0x40
 800b1c2:	f7ff ff3d 	bl	800b040 <_malloc_r>
 800b1c6:	6020      	str	r0, [r4, #0]
 800b1c8:	6120      	str	r0, [r4, #16]
 800b1ca:	b928      	cbnz	r0, 800b1d8 <_svfiprintf_r+0x30>
 800b1cc:	230c      	movs	r3, #12
 800b1ce:	f8c8 3000 	str.w	r3, [r8]
 800b1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d6:	e0c8      	b.n	800b36a <_svfiprintf_r+0x1c2>
 800b1d8:	2340      	movs	r3, #64	; 0x40
 800b1da:	6163      	str	r3, [r4, #20]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e0:	2320      	movs	r3, #32
 800b1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1e6:	2330      	movs	r3, #48	; 0x30
 800b1e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1ec:	9503      	str	r5, [sp, #12]
 800b1ee:	f04f 0b01 	mov.w	fp, #1
 800b1f2:	4637      	mov	r7, r6
 800b1f4:	463d      	mov	r5, r7
 800b1f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b1fa:	b10b      	cbz	r3, 800b200 <_svfiprintf_r+0x58>
 800b1fc:	2b25      	cmp	r3, #37	; 0x25
 800b1fe:	d13e      	bne.n	800b27e <_svfiprintf_r+0xd6>
 800b200:	ebb7 0a06 	subs.w	sl, r7, r6
 800b204:	d00b      	beq.n	800b21e <_svfiprintf_r+0x76>
 800b206:	4653      	mov	r3, sl
 800b208:	4632      	mov	r2, r6
 800b20a:	4621      	mov	r1, r4
 800b20c:	4640      	mov	r0, r8
 800b20e:	f7ff ff71 	bl	800b0f4 <__ssputs_r>
 800b212:	3001      	adds	r0, #1
 800b214:	f000 80a4 	beq.w	800b360 <_svfiprintf_r+0x1b8>
 800b218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b21a:	4453      	add	r3, sl
 800b21c:	9309      	str	r3, [sp, #36]	; 0x24
 800b21e:	783b      	ldrb	r3, [r7, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 809d 	beq.w	800b360 <_svfiprintf_r+0x1b8>
 800b226:	2300      	movs	r3, #0
 800b228:	f04f 32ff 	mov.w	r2, #4294967295
 800b22c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b230:	9304      	str	r3, [sp, #16]
 800b232:	9307      	str	r3, [sp, #28]
 800b234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b238:	931a      	str	r3, [sp, #104]	; 0x68
 800b23a:	462f      	mov	r7, r5
 800b23c:	2205      	movs	r2, #5
 800b23e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b242:	4850      	ldr	r0, [pc, #320]	; (800b384 <_svfiprintf_r+0x1dc>)
 800b244:	f7f4 ffcc 	bl	80001e0 <memchr>
 800b248:	9b04      	ldr	r3, [sp, #16]
 800b24a:	b9d0      	cbnz	r0, 800b282 <_svfiprintf_r+0xda>
 800b24c:	06d9      	lsls	r1, r3, #27
 800b24e:	bf44      	itt	mi
 800b250:	2220      	movmi	r2, #32
 800b252:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b256:	071a      	lsls	r2, r3, #28
 800b258:	bf44      	itt	mi
 800b25a:	222b      	movmi	r2, #43	; 0x2b
 800b25c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b260:	782a      	ldrb	r2, [r5, #0]
 800b262:	2a2a      	cmp	r2, #42	; 0x2a
 800b264:	d015      	beq.n	800b292 <_svfiprintf_r+0xea>
 800b266:	9a07      	ldr	r2, [sp, #28]
 800b268:	462f      	mov	r7, r5
 800b26a:	2000      	movs	r0, #0
 800b26c:	250a      	movs	r5, #10
 800b26e:	4639      	mov	r1, r7
 800b270:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b274:	3b30      	subs	r3, #48	; 0x30
 800b276:	2b09      	cmp	r3, #9
 800b278:	d94d      	bls.n	800b316 <_svfiprintf_r+0x16e>
 800b27a:	b1b8      	cbz	r0, 800b2ac <_svfiprintf_r+0x104>
 800b27c:	e00f      	b.n	800b29e <_svfiprintf_r+0xf6>
 800b27e:	462f      	mov	r7, r5
 800b280:	e7b8      	b.n	800b1f4 <_svfiprintf_r+0x4c>
 800b282:	4a40      	ldr	r2, [pc, #256]	; (800b384 <_svfiprintf_r+0x1dc>)
 800b284:	1a80      	subs	r0, r0, r2
 800b286:	fa0b f000 	lsl.w	r0, fp, r0
 800b28a:	4318      	orrs	r0, r3
 800b28c:	9004      	str	r0, [sp, #16]
 800b28e:	463d      	mov	r5, r7
 800b290:	e7d3      	b.n	800b23a <_svfiprintf_r+0x92>
 800b292:	9a03      	ldr	r2, [sp, #12]
 800b294:	1d11      	adds	r1, r2, #4
 800b296:	6812      	ldr	r2, [r2, #0]
 800b298:	9103      	str	r1, [sp, #12]
 800b29a:	2a00      	cmp	r2, #0
 800b29c:	db01      	blt.n	800b2a2 <_svfiprintf_r+0xfa>
 800b29e:	9207      	str	r2, [sp, #28]
 800b2a0:	e004      	b.n	800b2ac <_svfiprintf_r+0x104>
 800b2a2:	4252      	negs	r2, r2
 800b2a4:	f043 0302 	orr.w	r3, r3, #2
 800b2a8:	9207      	str	r2, [sp, #28]
 800b2aa:	9304      	str	r3, [sp, #16]
 800b2ac:	783b      	ldrb	r3, [r7, #0]
 800b2ae:	2b2e      	cmp	r3, #46	; 0x2e
 800b2b0:	d10c      	bne.n	800b2cc <_svfiprintf_r+0x124>
 800b2b2:	787b      	ldrb	r3, [r7, #1]
 800b2b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2b6:	d133      	bne.n	800b320 <_svfiprintf_r+0x178>
 800b2b8:	9b03      	ldr	r3, [sp, #12]
 800b2ba:	1d1a      	adds	r2, r3, #4
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	9203      	str	r2, [sp, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	bfb8      	it	lt
 800b2c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2c8:	3702      	adds	r7, #2
 800b2ca:	9305      	str	r3, [sp, #20]
 800b2cc:	4d2e      	ldr	r5, [pc, #184]	; (800b388 <_svfiprintf_r+0x1e0>)
 800b2ce:	7839      	ldrb	r1, [r7, #0]
 800b2d0:	2203      	movs	r2, #3
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f7f4 ff84 	bl	80001e0 <memchr>
 800b2d8:	b138      	cbz	r0, 800b2ea <_svfiprintf_r+0x142>
 800b2da:	2340      	movs	r3, #64	; 0x40
 800b2dc:	1b40      	subs	r0, r0, r5
 800b2de:	fa03 f000 	lsl.w	r0, r3, r0
 800b2e2:	9b04      	ldr	r3, [sp, #16]
 800b2e4:	4303      	orrs	r3, r0
 800b2e6:	3701      	adds	r7, #1
 800b2e8:	9304      	str	r3, [sp, #16]
 800b2ea:	7839      	ldrb	r1, [r7, #0]
 800b2ec:	4827      	ldr	r0, [pc, #156]	; (800b38c <_svfiprintf_r+0x1e4>)
 800b2ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2f2:	2206      	movs	r2, #6
 800b2f4:	1c7e      	adds	r6, r7, #1
 800b2f6:	f7f4 ff73 	bl	80001e0 <memchr>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d038      	beq.n	800b370 <_svfiprintf_r+0x1c8>
 800b2fe:	4b24      	ldr	r3, [pc, #144]	; (800b390 <_svfiprintf_r+0x1e8>)
 800b300:	bb13      	cbnz	r3, 800b348 <_svfiprintf_r+0x1a0>
 800b302:	9b03      	ldr	r3, [sp, #12]
 800b304:	3307      	adds	r3, #7
 800b306:	f023 0307 	bic.w	r3, r3, #7
 800b30a:	3308      	adds	r3, #8
 800b30c:	9303      	str	r3, [sp, #12]
 800b30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b310:	444b      	add	r3, r9
 800b312:	9309      	str	r3, [sp, #36]	; 0x24
 800b314:	e76d      	b.n	800b1f2 <_svfiprintf_r+0x4a>
 800b316:	fb05 3202 	mla	r2, r5, r2, r3
 800b31a:	2001      	movs	r0, #1
 800b31c:	460f      	mov	r7, r1
 800b31e:	e7a6      	b.n	800b26e <_svfiprintf_r+0xc6>
 800b320:	2300      	movs	r3, #0
 800b322:	3701      	adds	r7, #1
 800b324:	9305      	str	r3, [sp, #20]
 800b326:	4619      	mov	r1, r3
 800b328:	250a      	movs	r5, #10
 800b32a:	4638      	mov	r0, r7
 800b32c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b330:	3a30      	subs	r2, #48	; 0x30
 800b332:	2a09      	cmp	r2, #9
 800b334:	d903      	bls.n	800b33e <_svfiprintf_r+0x196>
 800b336:	2b00      	cmp	r3, #0
 800b338:	d0c8      	beq.n	800b2cc <_svfiprintf_r+0x124>
 800b33a:	9105      	str	r1, [sp, #20]
 800b33c:	e7c6      	b.n	800b2cc <_svfiprintf_r+0x124>
 800b33e:	fb05 2101 	mla	r1, r5, r1, r2
 800b342:	2301      	movs	r3, #1
 800b344:	4607      	mov	r7, r0
 800b346:	e7f0      	b.n	800b32a <_svfiprintf_r+0x182>
 800b348:	ab03      	add	r3, sp, #12
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	4622      	mov	r2, r4
 800b34e:	4b11      	ldr	r3, [pc, #68]	; (800b394 <_svfiprintf_r+0x1ec>)
 800b350:	a904      	add	r1, sp, #16
 800b352:	4640      	mov	r0, r8
 800b354:	f7fd fde0 	bl	8008f18 <_printf_float>
 800b358:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b35c:	4681      	mov	r9, r0
 800b35e:	d1d6      	bne.n	800b30e <_svfiprintf_r+0x166>
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	065b      	lsls	r3, r3, #25
 800b364:	f53f af35 	bmi.w	800b1d2 <_svfiprintf_r+0x2a>
 800b368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b36a:	b01d      	add	sp, #116	; 0x74
 800b36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b370:	ab03      	add	r3, sp, #12
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	4622      	mov	r2, r4
 800b376:	4b07      	ldr	r3, [pc, #28]	; (800b394 <_svfiprintf_r+0x1ec>)
 800b378:	a904      	add	r1, sp, #16
 800b37a:	4640      	mov	r0, r8
 800b37c:	f7fe f882 	bl	8009484 <_printf_i>
 800b380:	e7ea      	b.n	800b358 <_svfiprintf_r+0x1b0>
 800b382:	bf00      	nop
 800b384:	0800bb1c 	.word	0x0800bb1c
 800b388:	0800bb22 	.word	0x0800bb22
 800b38c:	0800bb26 	.word	0x0800bb26
 800b390:	08008f19 	.word	0x08008f19
 800b394:	0800b0f5 	.word	0x0800b0f5

0800b398 <__sfputc_r>:
 800b398:	6893      	ldr	r3, [r2, #8]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	b410      	push	{r4}
 800b3a0:	6093      	str	r3, [r2, #8]
 800b3a2:	da08      	bge.n	800b3b6 <__sfputc_r+0x1e>
 800b3a4:	6994      	ldr	r4, [r2, #24]
 800b3a6:	42a3      	cmp	r3, r4
 800b3a8:	db01      	blt.n	800b3ae <__sfputc_r+0x16>
 800b3aa:	290a      	cmp	r1, #10
 800b3ac:	d103      	bne.n	800b3b6 <__sfputc_r+0x1e>
 800b3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b2:	f7fe ba15 	b.w	80097e0 <__swbuf_r>
 800b3b6:	6813      	ldr	r3, [r2, #0]
 800b3b8:	1c58      	adds	r0, r3, #1
 800b3ba:	6010      	str	r0, [r2, #0]
 800b3bc:	7019      	strb	r1, [r3, #0]
 800b3be:	4608      	mov	r0, r1
 800b3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <__sfputs_r>:
 800b3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	460f      	mov	r7, r1
 800b3cc:	4614      	mov	r4, r2
 800b3ce:	18d5      	adds	r5, r2, r3
 800b3d0:	42ac      	cmp	r4, r5
 800b3d2:	d101      	bne.n	800b3d8 <__sfputs_r+0x12>
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	e007      	b.n	800b3e8 <__sfputs_r+0x22>
 800b3d8:	463a      	mov	r2, r7
 800b3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f7ff ffda 	bl	800b398 <__sfputc_r>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d1f3      	bne.n	800b3d0 <__sfputs_r+0xa>
 800b3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3ec <_vfiprintf_r>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	b09d      	sub	sp, #116	; 0x74
 800b3f4:	4617      	mov	r7, r2
 800b3f6:	461d      	mov	r5, r3
 800b3f8:	4606      	mov	r6, r0
 800b3fa:	b118      	cbz	r0, 800b404 <_vfiprintf_r+0x18>
 800b3fc:	6983      	ldr	r3, [r0, #24]
 800b3fe:	b90b      	cbnz	r3, 800b404 <_vfiprintf_r+0x18>
 800b400:	f7ff f9e2 	bl	800a7c8 <__sinit>
 800b404:	4b7c      	ldr	r3, [pc, #496]	; (800b5f8 <_vfiprintf_r+0x20c>)
 800b406:	429c      	cmp	r4, r3
 800b408:	d158      	bne.n	800b4bc <_vfiprintf_r+0xd0>
 800b40a:	6874      	ldr	r4, [r6, #4]
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	0718      	lsls	r0, r3, #28
 800b410:	d55e      	bpl.n	800b4d0 <_vfiprintf_r+0xe4>
 800b412:	6923      	ldr	r3, [r4, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d05b      	beq.n	800b4d0 <_vfiprintf_r+0xe4>
 800b418:	2300      	movs	r3, #0
 800b41a:	9309      	str	r3, [sp, #36]	; 0x24
 800b41c:	2320      	movs	r3, #32
 800b41e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b422:	2330      	movs	r3, #48	; 0x30
 800b424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b428:	9503      	str	r5, [sp, #12]
 800b42a:	f04f 0b01 	mov.w	fp, #1
 800b42e:	46b8      	mov	r8, r7
 800b430:	4645      	mov	r5, r8
 800b432:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b436:	b10b      	cbz	r3, 800b43c <_vfiprintf_r+0x50>
 800b438:	2b25      	cmp	r3, #37	; 0x25
 800b43a:	d154      	bne.n	800b4e6 <_vfiprintf_r+0xfa>
 800b43c:	ebb8 0a07 	subs.w	sl, r8, r7
 800b440:	d00b      	beq.n	800b45a <_vfiprintf_r+0x6e>
 800b442:	4653      	mov	r3, sl
 800b444:	463a      	mov	r2, r7
 800b446:	4621      	mov	r1, r4
 800b448:	4630      	mov	r0, r6
 800b44a:	f7ff ffbc 	bl	800b3c6 <__sfputs_r>
 800b44e:	3001      	adds	r0, #1
 800b450:	f000 80c2 	beq.w	800b5d8 <_vfiprintf_r+0x1ec>
 800b454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b456:	4453      	add	r3, sl
 800b458:	9309      	str	r3, [sp, #36]	; 0x24
 800b45a:	f898 3000 	ldrb.w	r3, [r8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f000 80ba 	beq.w	800b5d8 <_vfiprintf_r+0x1ec>
 800b464:	2300      	movs	r3, #0
 800b466:	f04f 32ff 	mov.w	r2, #4294967295
 800b46a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b46e:	9304      	str	r3, [sp, #16]
 800b470:	9307      	str	r3, [sp, #28]
 800b472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b476:	931a      	str	r3, [sp, #104]	; 0x68
 800b478:	46a8      	mov	r8, r5
 800b47a:	2205      	movs	r2, #5
 800b47c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b480:	485e      	ldr	r0, [pc, #376]	; (800b5fc <_vfiprintf_r+0x210>)
 800b482:	f7f4 fead 	bl	80001e0 <memchr>
 800b486:	9b04      	ldr	r3, [sp, #16]
 800b488:	bb78      	cbnz	r0, 800b4ea <_vfiprintf_r+0xfe>
 800b48a:	06d9      	lsls	r1, r3, #27
 800b48c:	bf44      	itt	mi
 800b48e:	2220      	movmi	r2, #32
 800b490:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b494:	071a      	lsls	r2, r3, #28
 800b496:	bf44      	itt	mi
 800b498:	222b      	movmi	r2, #43	; 0x2b
 800b49a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b49e:	782a      	ldrb	r2, [r5, #0]
 800b4a0:	2a2a      	cmp	r2, #42	; 0x2a
 800b4a2:	d02a      	beq.n	800b4fa <_vfiprintf_r+0x10e>
 800b4a4:	9a07      	ldr	r2, [sp, #28]
 800b4a6:	46a8      	mov	r8, r5
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	250a      	movs	r5, #10
 800b4ac:	4641      	mov	r1, r8
 800b4ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4b2:	3b30      	subs	r3, #48	; 0x30
 800b4b4:	2b09      	cmp	r3, #9
 800b4b6:	d969      	bls.n	800b58c <_vfiprintf_r+0x1a0>
 800b4b8:	b360      	cbz	r0, 800b514 <_vfiprintf_r+0x128>
 800b4ba:	e024      	b.n	800b506 <_vfiprintf_r+0x11a>
 800b4bc:	4b50      	ldr	r3, [pc, #320]	; (800b600 <_vfiprintf_r+0x214>)
 800b4be:	429c      	cmp	r4, r3
 800b4c0:	d101      	bne.n	800b4c6 <_vfiprintf_r+0xda>
 800b4c2:	68b4      	ldr	r4, [r6, #8]
 800b4c4:	e7a2      	b.n	800b40c <_vfiprintf_r+0x20>
 800b4c6:	4b4f      	ldr	r3, [pc, #316]	; (800b604 <_vfiprintf_r+0x218>)
 800b4c8:	429c      	cmp	r4, r3
 800b4ca:	bf08      	it	eq
 800b4cc:	68f4      	ldreq	r4, [r6, #12]
 800b4ce:	e79d      	b.n	800b40c <_vfiprintf_r+0x20>
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f7fe f9d6 	bl	8009884 <__swsetup_r>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d09d      	beq.n	800b418 <_vfiprintf_r+0x2c>
 800b4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e0:	b01d      	add	sp, #116	; 0x74
 800b4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e6:	46a8      	mov	r8, r5
 800b4e8:	e7a2      	b.n	800b430 <_vfiprintf_r+0x44>
 800b4ea:	4a44      	ldr	r2, [pc, #272]	; (800b5fc <_vfiprintf_r+0x210>)
 800b4ec:	1a80      	subs	r0, r0, r2
 800b4ee:	fa0b f000 	lsl.w	r0, fp, r0
 800b4f2:	4318      	orrs	r0, r3
 800b4f4:	9004      	str	r0, [sp, #16]
 800b4f6:	4645      	mov	r5, r8
 800b4f8:	e7be      	b.n	800b478 <_vfiprintf_r+0x8c>
 800b4fa:	9a03      	ldr	r2, [sp, #12]
 800b4fc:	1d11      	adds	r1, r2, #4
 800b4fe:	6812      	ldr	r2, [r2, #0]
 800b500:	9103      	str	r1, [sp, #12]
 800b502:	2a00      	cmp	r2, #0
 800b504:	db01      	blt.n	800b50a <_vfiprintf_r+0x11e>
 800b506:	9207      	str	r2, [sp, #28]
 800b508:	e004      	b.n	800b514 <_vfiprintf_r+0x128>
 800b50a:	4252      	negs	r2, r2
 800b50c:	f043 0302 	orr.w	r3, r3, #2
 800b510:	9207      	str	r2, [sp, #28]
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	f898 3000 	ldrb.w	r3, [r8]
 800b518:	2b2e      	cmp	r3, #46	; 0x2e
 800b51a:	d10e      	bne.n	800b53a <_vfiprintf_r+0x14e>
 800b51c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b520:	2b2a      	cmp	r3, #42	; 0x2a
 800b522:	d138      	bne.n	800b596 <_vfiprintf_r+0x1aa>
 800b524:	9b03      	ldr	r3, [sp, #12]
 800b526:	1d1a      	adds	r2, r3, #4
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	9203      	str	r2, [sp, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	bfb8      	it	lt
 800b530:	f04f 33ff 	movlt.w	r3, #4294967295
 800b534:	f108 0802 	add.w	r8, r8, #2
 800b538:	9305      	str	r3, [sp, #20]
 800b53a:	4d33      	ldr	r5, [pc, #204]	; (800b608 <_vfiprintf_r+0x21c>)
 800b53c:	f898 1000 	ldrb.w	r1, [r8]
 800b540:	2203      	movs	r2, #3
 800b542:	4628      	mov	r0, r5
 800b544:	f7f4 fe4c 	bl	80001e0 <memchr>
 800b548:	b140      	cbz	r0, 800b55c <_vfiprintf_r+0x170>
 800b54a:	2340      	movs	r3, #64	; 0x40
 800b54c:	1b40      	subs	r0, r0, r5
 800b54e:	fa03 f000 	lsl.w	r0, r3, r0
 800b552:	9b04      	ldr	r3, [sp, #16]
 800b554:	4303      	orrs	r3, r0
 800b556:	f108 0801 	add.w	r8, r8, #1
 800b55a:	9304      	str	r3, [sp, #16]
 800b55c:	f898 1000 	ldrb.w	r1, [r8]
 800b560:	482a      	ldr	r0, [pc, #168]	; (800b60c <_vfiprintf_r+0x220>)
 800b562:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b566:	2206      	movs	r2, #6
 800b568:	f108 0701 	add.w	r7, r8, #1
 800b56c:	f7f4 fe38 	bl	80001e0 <memchr>
 800b570:	2800      	cmp	r0, #0
 800b572:	d037      	beq.n	800b5e4 <_vfiprintf_r+0x1f8>
 800b574:	4b26      	ldr	r3, [pc, #152]	; (800b610 <_vfiprintf_r+0x224>)
 800b576:	bb1b      	cbnz	r3, 800b5c0 <_vfiprintf_r+0x1d4>
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	3307      	adds	r3, #7
 800b57c:	f023 0307 	bic.w	r3, r3, #7
 800b580:	3308      	adds	r3, #8
 800b582:	9303      	str	r3, [sp, #12]
 800b584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b586:	444b      	add	r3, r9
 800b588:	9309      	str	r3, [sp, #36]	; 0x24
 800b58a:	e750      	b.n	800b42e <_vfiprintf_r+0x42>
 800b58c:	fb05 3202 	mla	r2, r5, r2, r3
 800b590:	2001      	movs	r0, #1
 800b592:	4688      	mov	r8, r1
 800b594:	e78a      	b.n	800b4ac <_vfiprintf_r+0xc0>
 800b596:	2300      	movs	r3, #0
 800b598:	f108 0801 	add.w	r8, r8, #1
 800b59c:	9305      	str	r3, [sp, #20]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	250a      	movs	r5, #10
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a8:	3a30      	subs	r2, #48	; 0x30
 800b5aa:	2a09      	cmp	r2, #9
 800b5ac:	d903      	bls.n	800b5b6 <_vfiprintf_r+0x1ca>
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0c3      	beq.n	800b53a <_vfiprintf_r+0x14e>
 800b5b2:	9105      	str	r1, [sp, #20]
 800b5b4:	e7c1      	b.n	800b53a <_vfiprintf_r+0x14e>
 800b5b6:	fb05 2101 	mla	r1, r5, r1, r2
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	4680      	mov	r8, r0
 800b5be:	e7f0      	b.n	800b5a2 <_vfiprintf_r+0x1b6>
 800b5c0:	ab03      	add	r3, sp, #12
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	4622      	mov	r2, r4
 800b5c6:	4b13      	ldr	r3, [pc, #76]	; (800b614 <_vfiprintf_r+0x228>)
 800b5c8:	a904      	add	r1, sp, #16
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	f7fd fca4 	bl	8008f18 <_printf_float>
 800b5d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5d4:	4681      	mov	r9, r0
 800b5d6:	d1d5      	bne.n	800b584 <_vfiprintf_r+0x198>
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	065b      	lsls	r3, r3, #25
 800b5dc:	f53f af7e 	bmi.w	800b4dc <_vfiprintf_r+0xf0>
 800b5e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5e2:	e77d      	b.n	800b4e0 <_vfiprintf_r+0xf4>
 800b5e4:	ab03      	add	r3, sp, #12
 800b5e6:	9300      	str	r3, [sp, #0]
 800b5e8:	4622      	mov	r2, r4
 800b5ea:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <_vfiprintf_r+0x228>)
 800b5ec:	a904      	add	r1, sp, #16
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f7fd ff48 	bl	8009484 <_printf_i>
 800b5f4:	e7ec      	b.n	800b5d0 <_vfiprintf_r+0x1e4>
 800b5f6:	bf00      	nop
 800b5f8:	0800b9dc 	.word	0x0800b9dc
 800b5fc:	0800bb1c 	.word	0x0800bb1c
 800b600:	0800b9fc 	.word	0x0800b9fc
 800b604:	0800b9bc 	.word	0x0800b9bc
 800b608:	0800bb22 	.word	0x0800bb22
 800b60c:	0800bb26 	.word	0x0800bb26
 800b610:	08008f19 	.word	0x08008f19
 800b614:	0800b3c7 	.word	0x0800b3c7

0800b618 <_sbrk_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4c06      	ldr	r4, [pc, #24]	; (800b634 <_sbrk_r+0x1c>)
 800b61c:	2300      	movs	r3, #0
 800b61e:	4605      	mov	r5, r0
 800b620:	4608      	mov	r0, r1
 800b622:	6023      	str	r3, [r4, #0]
 800b624:	f7f7 fa44 	bl	8002ab0 <_sbrk>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_sbrk_r+0x1a>
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_sbrk_r+0x1a>
 800b630:	602b      	str	r3, [r5, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	20006e48 	.word	0x20006e48

0800b638 <__sread>:
 800b638:	b510      	push	{r4, lr}
 800b63a:	460c      	mov	r4, r1
 800b63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b640:	f000 f8e8 	bl	800b814 <_read_r>
 800b644:	2800      	cmp	r0, #0
 800b646:	bfab      	itete	ge
 800b648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b64a:	89a3      	ldrhlt	r3, [r4, #12]
 800b64c:	181b      	addge	r3, r3, r0
 800b64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b652:	bfac      	ite	ge
 800b654:	6563      	strge	r3, [r4, #84]	; 0x54
 800b656:	81a3      	strhlt	r3, [r4, #12]
 800b658:	bd10      	pop	{r4, pc}

0800b65a <__swrite>:
 800b65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65e:	461f      	mov	r7, r3
 800b660:	898b      	ldrh	r3, [r1, #12]
 800b662:	05db      	lsls	r3, r3, #23
 800b664:	4605      	mov	r5, r0
 800b666:	460c      	mov	r4, r1
 800b668:	4616      	mov	r6, r2
 800b66a:	d505      	bpl.n	800b678 <__swrite+0x1e>
 800b66c:	2302      	movs	r3, #2
 800b66e:	2200      	movs	r2, #0
 800b670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b674:	f000 f868 	bl	800b748 <_lseek_r>
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b67e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b682:	81a3      	strh	r3, [r4, #12]
 800b684:	4632      	mov	r2, r6
 800b686:	463b      	mov	r3, r7
 800b688:	4628      	mov	r0, r5
 800b68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b68e:	f000 b817 	b.w	800b6c0 <_write_r>

0800b692 <__sseek>:
 800b692:	b510      	push	{r4, lr}
 800b694:	460c      	mov	r4, r1
 800b696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b69a:	f000 f855 	bl	800b748 <_lseek_r>
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	bf15      	itete	ne
 800b6a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6ae:	81a3      	strheq	r3, [r4, #12]
 800b6b0:	bf18      	it	ne
 800b6b2:	81a3      	strhne	r3, [r4, #12]
 800b6b4:	bd10      	pop	{r4, pc}

0800b6b6 <__sclose>:
 800b6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ba:	f000 b813 	b.w	800b6e4 <_close_r>
	...

0800b6c0 <_write_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4c07      	ldr	r4, [pc, #28]	; (800b6e0 <_write_r+0x20>)
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	4608      	mov	r0, r1
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	6022      	str	r2, [r4, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f7f6 fe33 	bl	800233a <_write>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_write_r+0x1e>
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_write_r+0x1e>
 800b6dc:	602b      	str	r3, [r5, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	20006e48 	.word	0x20006e48

0800b6e4 <_close_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4c06      	ldr	r4, [pc, #24]	; (800b700 <_close_r+0x1c>)
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4605      	mov	r5, r0
 800b6ec:	4608      	mov	r0, r1
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	f7f7 f9a9 	bl	8002a46 <_close>
 800b6f4:	1c43      	adds	r3, r0, #1
 800b6f6:	d102      	bne.n	800b6fe <_close_r+0x1a>
 800b6f8:	6823      	ldr	r3, [r4, #0]
 800b6fa:	b103      	cbz	r3, 800b6fe <_close_r+0x1a>
 800b6fc:	602b      	str	r3, [r5, #0]
 800b6fe:	bd38      	pop	{r3, r4, r5, pc}
 800b700:	20006e48 	.word	0x20006e48

0800b704 <_fstat_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4c07      	ldr	r4, [pc, #28]	; (800b724 <_fstat_r+0x20>)
 800b708:	2300      	movs	r3, #0
 800b70a:	4605      	mov	r5, r0
 800b70c:	4608      	mov	r0, r1
 800b70e:	4611      	mov	r1, r2
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	f7f7 f9a4 	bl	8002a5e <_fstat>
 800b716:	1c43      	adds	r3, r0, #1
 800b718:	d102      	bne.n	800b720 <_fstat_r+0x1c>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	b103      	cbz	r3, 800b720 <_fstat_r+0x1c>
 800b71e:	602b      	str	r3, [r5, #0]
 800b720:	bd38      	pop	{r3, r4, r5, pc}
 800b722:	bf00      	nop
 800b724:	20006e48 	.word	0x20006e48

0800b728 <_isatty_r>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	4c06      	ldr	r4, [pc, #24]	; (800b744 <_isatty_r+0x1c>)
 800b72c:	2300      	movs	r3, #0
 800b72e:	4605      	mov	r5, r0
 800b730:	4608      	mov	r0, r1
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	f7f7 f9a3 	bl	8002a7e <_isatty>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	d102      	bne.n	800b742 <_isatty_r+0x1a>
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	b103      	cbz	r3, 800b742 <_isatty_r+0x1a>
 800b740:	602b      	str	r3, [r5, #0]
 800b742:	bd38      	pop	{r3, r4, r5, pc}
 800b744:	20006e48 	.word	0x20006e48

0800b748 <_lseek_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4c07      	ldr	r4, [pc, #28]	; (800b768 <_lseek_r+0x20>)
 800b74c:	4605      	mov	r5, r0
 800b74e:	4608      	mov	r0, r1
 800b750:	4611      	mov	r1, r2
 800b752:	2200      	movs	r2, #0
 800b754:	6022      	str	r2, [r4, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	f7f7 f99c 	bl	8002a94 <_lseek>
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	d102      	bne.n	800b766 <_lseek_r+0x1e>
 800b760:	6823      	ldr	r3, [r4, #0]
 800b762:	b103      	cbz	r3, 800b766 <_lseek_r+0x1e>
 800b764:	602b      	str	r3, [r5, #0]
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	20006e48 	.word	0x20006e48

0800b76c <__ascii_mbtowc>:
 800b76c:	b082      	sub	sp, #8
 800b76e:	b901      	cbnz	r1, 800b772 <__ascii_mbtowc+0x6>
 800b770:	a901      	add	r1, sp, #4
 800b772:	b142      	cbz	r2, 800b786 <__ascii_mbtowc+0x1a>
 800b774:	b14b      	cbz	r3, 800b78a <__ascii_mbtowc+0x1e>
 800b776:	7813      	ldrb	r3, [r2, #0]
 800b778:	600b      	str	r3, [r1, #0]
 800b77a:	7812      	ldrb	r2, [r2, #0]
 800b77c:	1c10      	adds	r0, r2, #0
 800b77e:	bf18      	it	ne
 800b780:	2001      	movne	r0, #1
 800b782:	b002      	add	sp, #8
 800b784:	4770      	bx	lr
 800b786:	4610      	mov	r0, r2
 800b788:	e7fb      	b.n	800b782 <__ascii_mbtowc+0x16>
 800b78a:	f06f 0001 	mvn.w	r0, #1
 800b78e:	e7f8      	b.n	800b782 <__ascii_mbtowc+0x16>

0800b790 <memmove>:
 800b790:	4288      	cmp	r0, r1
 800b792:	b510      	push	{r4, lr}
 800b794:	eb01 0302 	add.w	r3, r1, r2
 800b798:	d807      	bhi.n	800b7aa <memmove+0x1a>
 800b79a:	1e42      	subs	r2, r0, #1
 800b79c:	4299      	cmp	r1, r3
 800b79e:	d00a      	beq.n	800b7b6 <memmove+0x26>
 800b7a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b7a8:	e7f8      	b.n	800b79c <memmove+0xc>
 800b7aa:	4283      	cmp	r3, r0
 800b7ac:	d9f5      	bls.n	800b79a <memmove+0xa>
 800b7ae:	1881      	adds	r1, r0, r2
 800b7b0:	1ad2      	subs	r2, r2, r3
 800b7b2:	42d3      	cmn	r3, r2
 800b7b4:	d100      	bne.n	800b7b8 <memmove+0x28>
 800b7b6:	bd10      	pop	{r4, pc}
 800b7b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b7c0:	e7f7      	b.n	800b7b2 <memmove+0x22>

0800b7c2 <__malloc_lock>:
 800b7c2:	4770      	bx	lr

0800b7c4 <__malloc_unlock>:
 800b7c4:	4770      	bx	lr

0800b7c6 <_realloc_r>:
 800b7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	4614      	mov	r4, r2
 800b7cc:	460e      	mov	r6, r1
 800b7ce:	b921      	cbnz	r1, 800b7da <_realloc_r+0x14>
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7d6:	f7ff bc33 	b.w	800b040 <_malloc_r>
 800b7da:	b922      	cbnz	r2, 800b7e6 <_realloc_r+0x20>
 800b7dc:	f7ff fbe2 	bl	800afa4 <_free_r>
 800b7e0:	4625      	mov	r5, r4
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7e6:	f000 f834 	bl	800b852 <_malloc_usable_size_r>
 800b7ea:	42a0      	cmp	r0, r4
 800b7ec:	d20f      	bcs.n	800b80e <_realloc_r+0x48>
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f7ff fc25 	bl	800b040 <_malloc_r>
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d0f2      	beq.n	800b7e2 <_realloc_r+0x1c>
 800b7fc:	4631      	mov	r1, r6
 800b7fe:	4622      	mov	r2, r4
 800b800:	f7fd fae2 	bl	8008dc8 <memcpy>
 800b804:	4631      	mov	r1, r6
 800b806:	4638      	mov	r0, r7
 800b808:	f7ff fbcc 	bl	800afa4 <_free_r>
 800b80c:	e7e9      	b.n	800b7e2 <_realloc_r+0x1c>
 800b80e:	4635      	mov	r5, r6
 800b810:	e7e7      	b.n	800b7e2 <_realloc_r+0x1c>
	...

0800b814 <_read_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4c07      	ldr	r4, [pc, #28]	; (800b834 <_read_r+0x20>)
 800b818:	4605      	mov	r5, r0
 800b81a:	4608      	mov	r0, r1
 800b81c:	4611      	mov	r1, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	6022      	str	r2, [r4, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	f7f7 f8f2 	bl	8002a0c <_read>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_read_r+0x1e>
 800b82c:	6823      	ldr	r3, [r4, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_read_r+0x1e>
 800b830:	602b      	str	r3, [r5, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	20006e48 	.word	0x20006e48

0800b838 <__ascii_wctomb>:
 800b838:	b149      	cbz	r1, 800b84e <__ascii_wctomb+0x16>
 800b83a:	2aff      	cmp	r2, #255	; 0xff
 800b83c:	bf85      	ittet	hi
 800b83e:	238a      	movhi	r3, #138	; 0x8a
 800b840:	6003      	strhi	r3, [r0, #0]
 800b842:	700a      	strbls	r2, [r1, #0]
 800b844:	f04f 30ff 	movhi.w	r0, #4294967295
 800b848:	bf98      	it	ls
 800b84a:	2001      	movls	r0, #1
 800b84c:	4770      	bx	lr
 800b84e:	4608      	mov	r0, r1
 800b850:	4770      	bx	lr

0800b852 <_malloc_usable_size_r>:
 800b852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b856:	1f18      	subs	r0, r3, #4
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bfbc      	itt	lt
 800b85c:	580b      	ldrlt	r3, [r1, r0]
 800b85e:	18c0      	addlt	r0, r0, r3
 800b860:	4770      	bx	lr
	...

0800b864 <_init>:
 800b864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b866:	bf00      	nop
 800b868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b86a:	bc08      	pop	{r3}
 800b86c:	469e      	mov	lr, r3
 800b86e:	4770      	bx	lr

0800b870 <_fini>:
 800b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b872:	bf00      	nop
 800b874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b876:	bc08      	pop	{r3}
 800b878:	469e      	mov	lr, r3
 800b87a:	4770      	bx	lr
