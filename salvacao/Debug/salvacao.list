
salvacao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e25c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  0800e3f0  0800e3f0  0001e3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eca0  0800eca0  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800eca0  0800eca0  0001eca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eca8  0800eca8  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eca8  0800eca8  0001eca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ecac  0800ecac  0001ecac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800ecb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006bac  20000254  0800ef04  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  20006e00  0800ef04  00026e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7a3  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e78  00000000  00000000  0003da27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001650  00000000  00000000  000418a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001468  00000000  00000000  00042ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000252bb  00000000  00000000  00044358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014e03  00000000  00000000  00069613  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce002  00000000  00000000  0007e416  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc8  00000000  00000000  0014c494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000254 	.word	0x20000254
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e3d4 	.word	0x0800e3d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000258 	.word	0x20000258
 80001cc:	0800e3d4 	.word	0x0800e3d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <TMC_write>:
	data[2]=(uint8_t)(w_data>>1);
	data[3]=(uint8_t)(w_data);

}

void TMC_write(SPI_HandleTypeDef *hspi, uint8_t address, uint32_t data){
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	460b      	mov	r3, r1
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	72fb      	strb	r3, [r7, #11]
	uint8_t send_data[5];


	send_data[0]= (address | 0x80);
 8000f56:	7afb      	ldrb	r3, [r7, #11]
 8000f58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	743b      	strb	r3, [r7, #16]
	send_data[1]=(uint8_t)(data>>24);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0e1b      	lsrs	r3, r3, #24
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	747b      	strb	r3, [r7, #17]
	send_data[2]=(uint8_t)(data>>16);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	0c1b      	lsrs	r3, r3, #16
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	74bb      	strb	r3, [r7, #18]
	send_data[3]=(uint8_t)(data>>8);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	74fb      	strb	r3, [r7, #19]
	send_data[4]=(uint8_t)(data | 0x00);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	753b      	strb	r3, [r7, #20]
	printf("%d - %d - %d - %d - %d" , send_data[0], send_data[1], send_data[2], send_data[3], send_data[4]);
 8000f7e:	7c3b      	ldrb	r3, [r7, #16]
 8000f80:	4619      	mov	r1, r3
 8000f82:	7c7b      	ldrb	r3, [r7, #17]
 8000f84:	4618      	mov	r0, r3
 8000f86:	7cbb      	ldrb	r3, [r7, #18]
 8000f88:	461c      	mov	r4, r3
 8000f8a:	7cfb      	ldrb	r3, [r7, #19]
 8000f8c:	7d3a      	ldrb	r2, [r7, #20]
 8000f8e:	9201      	str	r2, [sp, #4]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	4623      	mov	r3, r4
 8000f94:	4602      	mov	r2, r0
 8000f96:	480d      	ldr	r0, [pc, #52]	; (8000fcc <TMC_write+0x84>)
 8000f98:	f00b f92c 	bl	800c1f4 <iprintf>
	HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa2:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <TMC_write+0x88>)
 8000fa4:	f003 f9c6 	bl	8004334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, send_data, 5, 200);
 8000fa8:	f107 0110 	add.w	r1, r7, #16
 8000fac:	23c8      	movs	r3, #200	; 0xc8
 8000fae:	2205      	movs	r2, #5
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f005 f9ab 	bl	800630c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <TMC_write+0x88>)
 8000fbe:	f003 f9b9 	bl	8004334 <HAL_GPIO_WritePin>

}
 8000fc2:	bf00      	nop
 8000fc4:	371c      	adds	r7, #28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	0800e3f0 	.word	0x0800e3f0
 8000fd0:	40020400 	.word	0x40020400

08000fd4 <foc_ic_config>:


void foc_ic_config(SPI_HandleTypeDef *hspi){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

	//data[0]= ((FOC_IC_MOTOR_TYPE_N_POLE_PAIRS | 0x80)<<8); // colocar 1 no MSB do byte com o endereço
	//data[1] = //o que escrever?

	// Motor type &  PWM configuration
	TMC_write(hspi, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, 0x0003000A);
 8000fdc:	4a3d      	ldr	r2, [pc, #244]	; (80010d4 <foc_ic_config+0x100>)
 8000fde:	211b      	movs	r1, #27
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ffb1 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_PWM_POLARITIES, 0x00000000);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2117      	movs	r1, #23
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffac 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_PWM_MAXCNT, 0x00000F9F);
 8000ff0:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000ff4:	2118      	movs	r1, #24
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa6 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_PWM_BBM_H_BBM_L, 0x00001919);
 8000ffc:	f641 1219 	movw	r2, #6425	; 0x1919
 8001000:	2119      	movs	r1, #25
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa0 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_PWM_SV_CHOP, 0x00000107);
 8001008:	f240 1207 	movw	r2, #263	; 0x107
 800100c:	211a      	movs	r1, #26
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff9a 	bl	8000f48 <TMC_write>

			// ADC configuration
	TMC_write(hspi, TMC4671_ADC_I_SELECT, 0x09000100);
 8001014:	4a30      	ldr	r2, [pc, #192]	; (80010d8 <foc_ic_config+0x104>)
 8001016:	210a      	movs	r1, #10
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff95 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_dsADC_MCFG_B_MCFG_A, 0x00100010);
 800101e:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
 8001022:	2104      	movs	r1, #4
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff8f 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_dsADC_MCLK_A, 0x20000000);
 800102a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800102e:	2105      	movs	r1, #5
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff89 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_dsADC_MCLK_B, 0x20000000);
 8001036:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800103a:	2106      	movs	r1, #6
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff83 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_dsADC_MDEC_B_MDEC_A, 0x014E014E);
 8001042:	4a26      	ldr	r2, [pc, #152]	; (80010dc <foc_ic_config+0x108>)
 8001044:	2107      	movs	r1, #7
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ff7e 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_ADC_I0_SCALE_OFFSET, 0xFF006D20);
 800104c:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <foc_ic_config+0x10c>)
 800104e:	2109      	movs	r1, #9
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff79 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_ADC_I1_SCALE_OFFSET, 0xFF006C62);
 8001056:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <foc_ic_config+0x110>)
 8001058:	2108      	movs	r1, #8
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff74 	bl	8000f48 <TMC_write>

			// Open loop settings
	TMC_write(hspi, TMC4671_OPENLOOP_MODE, 0x00000000);
 8001060:	2200      	movs	r2, #0
 8001062:	211f      	movs	r1, #31
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff6f 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_OPENLOOP_ACCELERATION, 0x00000005);
 800106a:	2205      	movs	r2, #5
 800106c:	2120      	movs	r1, #32
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ff6a 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_OPENLOOP_VELOCITY_TARGET, 0x00000000);//0xFFFFFFFB);
 8001074:	2200      	movs	r2, #0
 8001076:	2121      	movs	r1, #33	; 0x21
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff65 	bl	8000f48 <TMC_write>

			// Feedback selection
	TMC_write(hspi, TMC4671_PHI_E_SELECTION, 0x00000002);
 800107e:	2202      	movs	r2, #2
 8001080:	2152      	movs	r1, #82	; 0x52
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff60 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_UQ_UD_EXT, 0x17700000);
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <foc_ic_config+0x114>)
 800108a:	2124      	movs	r1, #36	; 0x24
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff5b 	bl	8000f48 <TMC_write>

			// ===== Open loop test drive =====

			// Switch to open loop velocity mode
	TMC_write(hspi, TMC4671_MODE_RAMP_MODE_MOTION, 0x00000008);
 8001092:	2208      	movs	r2, #8
 8001094:	2163      	movs	r1, #99	; 0x63
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff56 	bl	8000f48 <TMC_write>

			// Rotate right
	TMC_write(hspi, TMC4671_OPENLOOP_VELOCITY_TARGET, 0x0000003C);
 800109c:	223c      	movs	r2, #60	; 0x3c
 800109e:	2121      	movs	r1, #33	; 0x21
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff51 	bl	8000f48 <TMC_write>
			HAL_Delay(200);
 80010a6:	20c8      	movs	r0, #200	; 0xc8
 80010a8:	f001 fed8 	bl	8002e5c <HAL_Delay>

			// Rotate left
	TMC_write(hspi, TMC4671_OPENLOOP_VELOCITY_TARGET, 0xFFFFFFC4);
 80010ac:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 80010b0:	2121      	movs	r1, #33	; 0x21
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff48 	bl	8000f48 <TMC_write>
			HAL_Delay(400);
 80010b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010bc:	f001 fece 	bl	8002e5c <HAL_Delay>

			// Stop
    TMC_write(hspi, TMC4671_OPENLOOP_VELOCITY_TARGET, 0x00000000);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2121      	movs	r1, #33	; 0x21
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff3f 	bl	8000f48 <TMC_write>


}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	0003000a 	.word	0x0003000a
 80010d8:	09000100 	.word	0x09000100
 80010dc:	014e014e 	.word	0x014e014e
 80010e0:	ff006d20 	.word	0xff006d20
 80010e4:	ff006c62 	.word	0xff006c62
 80010e8:	17700000 	.word	0x17700000

080010ec <foc_ic_send_torque>:


void foc_ic_send_torque(SPI_HandleTypeDef *hspi, uint32_t torque){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]



	//TMC_write(hspi, TMC4671_UQ_UD_EXT, 0x0FA00000);
	if (torque==0){
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d105      	bne.n	8001108 <foc_ic_send_torque+0x1c>
		TMC_write(hspi, TMC4671_OPENLOOP_ACCELERATION, 0x0000000F);
 80010fc:	220f      	movs	r2, #15
 80010fe:	2120      	movs	r1, #32
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff21 	bl	8000f48 <TMC_write>
 8001106:	e004      	b.n	8001112 <foc_ic_send_torque+0x26>
	}
	else TMC_write(hspi, TMC4671_OPENLOOP_ACCELERATION, 0x00000015);
 8001108:	2215      	movs	r2, #21
 800110a:	2120      	movs	r1, #32
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff1b 	bl	8000f48 <TMC_write>
	TMC_write(hspi, TMC4671_OPENLOOP_VELOCITY_TARGET, torque);
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	2121      	movs	r1, #33	; 0x21
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff16 	bl	8000f48 <TMC_write>
	HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
		HAL_SPI_Transmit(hspi, data, 2, 200);
	HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
*/

}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <IMU_config>:
//includes
#include "main.h"
#include "IMU_read.h"


void IMU_config(SPI_HandleTypeDef *hspi){
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

	uint8_t write_words[10];

	//accelerometer config
	write_words[0]=BMX055_RESET_REG;
 800112c:	2314      	movs	r3, #20
 800112e:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET; //accelerometer soft reset
 8001130:	23b6      	movs	r3, #182	; 0xb6
 8001132:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_ACC_PMU_RANGE_REG;
 8001134:	230f      	movs	r3, #15
 8001136:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_ACC_RANGE_2;
 8001138:	2303      	movs	r3, #3
 800113a:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_ACC_PMU_BW_REG;
 800113c:	2310      	movs	r3, #16
 800113e:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_ACC_PMU_BW_7_81;
 8001140:	2308      	movs	r3, #8
 8001142:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_ACC_PMU_LPW_REG;
 8001144:	2311      	movs	r3, #17
 8001146:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_ACC_PMU_LPW_MODE_NOMAL|BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 8001148:	2300      	movs	r3, #0
 800114a:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2110      	movs	r1, #16
 8001150:	4833      	ldr	r0, [pc, #204]	; (8001220 <IMU_config+0xfc>)
 8001152:	f003 f8ef 	bl	8004334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 8001156:	f107 010c 	add.w	r1, r7, #12
 800115a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800115e:	2208      	movs	r2, #8
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f005 f8d3 	bl	800630c <HAL_SPI_Transmit>
	HAL_Delay(100);
 8001166:	2064      	movs	r0, #100	; 0x64
 8001168:	f001 fe78 	bl	8002e5c <HAL_Delay>
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2110      	movs	r1, #16
 8001170:	482b      	ldr	r0, [pc, #172]	; (8001220 <IMU_config+0xfc>)
 8001172:	f003 f8df 	bl	8004334 <HAL_GPIO_WritePin>

	// gyroscope config
	write_words[0]=BMX055_RESET_REG;
 8001176:	2314      	movs	r3, #20
 8001178:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 800117a:	23b6      	movs	r3, #182	; 0xb6
 800117c:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_GYRO_RANGE_REG;
 800117e:	230f      	movs	r3, #15
 8001180:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_GYRO_RANGE_262_4; // Select Gyro Range(262.4 LSB/°/s)
 8001182:	2304      	movs	r3, #4
 8001184:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_GYRO_BW_REG;
 8001186:	2310      	movs	r3, #16
 8001188:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_GYRO_BW_64; // Select Gyro BW   (32Hz)
 800118a:	2306      	movs	r3, #6
 800118c:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_GYRO_LPM1_REG;
 800118e:	2311      	movs	r3, #17
 8001190:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_GYRO_LPM1_MODE_NOMAL|BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 8001192:	2300      	movs	r3, #0
 8001194:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2104      	movs	r1, #4
 800119a:	4822      	ldr	r0, [pc, #136]	; (8001224 <IMU_config+0x100>)
 800119c:	f003 f8ca 	bl	8004334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 80011a0:	f107 010c 	add.w	r1, r7, #12
 80011a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011a8:	2208      	movs	r2, #8
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f005 f8ae 	bl	800630c <HAL_SPI_Transmit>
	HAL_Delay(100);
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f001 fe53 	bl	8002e5c <HAL_Delay>
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2104      	movs	r1, #4
 80011ba:	481a      	ldr	r0, [pc, #104]	; (8001224 <IMU_config+0x100>)
 80011bc:	f003 f8ba 	bl	8004334 <HAL_GPIO_WritePin>

	// magnetometer config
	write_words[0]=BMX055_RESET_REG;
 80011c0:	2314      	movs	r3, #20
 80011c2:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 80011c4:	23b6      	movs	r3, #182	; 0xb6
 80011c6:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_MAG_POW_CTL_REG;
 80011c8:	234b      	movs	r3, #75	; 0x4b
 80011ca:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_MAG_POW_CTL_SLEEP_MODE; // Select Sleep mode
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_MAG_ADV_OP_OUTPUT_REG;
 80011d0:	234c      	movs	r3, #76	; 0x4c
 80011d2:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_MAG_DATA_RATE_10; // (NomalMode, ODR 10Hz)
 80011d4:	2300      	movs	r3, #0
 80011d6:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_MAG_REP_XY_REG;
 80011d8:	2351      	movs	r3, #81	; 0x51
 80011da:	74bb      	strb	r3, [r7, #18]
	write_words[7]=0x04; // Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
 80011dc:	2304      	movs	r3, #4
 80011de:	74fb      	strb	r3, [r7, #19]
	write_words[8]=BMX055_MAG_REP_Z_REG;
 80011e0:	2352      	movs	r3, #82	; 0x52
 80011e2:	753b      	strb	r3, [r7, #20]
	write_words[9]= 0x0F; // Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
 80011e4:	230f      	movs	r3, #15
 80011e6:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <IMU_config+0x100>)
 80011f0:	f003 f8a0 	bl	8004334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 10, 2000);
 80011f4:	f107 010c 	add.w	r1, r7, #12
 80011f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011fc:	220a      	movs	r2, #10
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f005 f884 	bl	800630c <HAL_SPI_Transmit>
	HAL_Delay(100);
 8001204:	2064      	movs	r0, #100	; 0x64
 8001206:	f001 fe29 	bl	8002e5c <HAL_Delay>
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <IMU_config+0x100>)
 8001212:	f003 f88f 	bl	8004334 <HAL_GPIO_WritePin>

}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400

08001228 <IMU_acc_read>:

void IMU_acc_read(SPI_HandleTypeDef *hspi, int *accel_data){
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_ACC_DATA_START_REG;
 8001232:	2382      	movs	r3, #130	; 0x82
 8001234:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET); //read acceloremeter data
 8001236:	2200      	movs	r2, #0
 8001238:	2110      	movs	r1, #16
 800123a:	4835      	ldr	r0, [pc, #212]	; (8001310 <IMU_acc_read+0xe8>)
 800123c:	f003 f87a 	bl	8004334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001240:	f107 0113 	add.w	r1, r7, #19
 8001244:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001248:	2201      	movs	r2, #1
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f005 f85e 	bl	800630c <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e00c      	b.n	8001270 <IMU_acc_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f107 020c 	add.w	r2, r7, #12
 800125c:	18d1      	adds	r1, r2, r3
 800125e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001262:	2201      	movs	r2, #1
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f005 f985 	bl	8006574 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b05      	cmp	r3, #5
 8001274:	ddef      	ble.n	8001256 <IMU_acc_read+0x2e>
	}
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2110      	movs	r1, #16
 800127a:	4825      	ldr	r0, [pc, #148]	; (8001310 <IMU_acc_read+0xe8>)
 800127c:	f003 f85a 	bl	8004334 <HAL_GPIO_WritePin>
	accel_data[0]=((store_data[1]<<4)+(store_data[0]>>4));
 8001280:	7b7b      	ldrb	r3, [r7, #13]
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	7b3a      	ldrb	r2, [r7, #12]
 8001286:	0912      	lsrs	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	441a      	add	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	601a      	str	r2, [r3, #0]
	accel_data[1]=((store_data[3]<<4)+(store_data[2]>>4));
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	011a      	lsls	r2, r3, #4
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4619      	mov	r1, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3304      	adds	r3, #4
 80012a0:	440a      	add	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
	accel_data[2]=((store_data[5]<<4)+(store_data[4]>>4));
 80012a4:	7c7b      	ldrb	r3, [r7, #17]
 80012a6:	011a      	lsls	r2, r3, #4
 80012a8:	7c3b      	ldrb	r3, [r7, #16]
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4619      	mov	r1, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	3308      	adds	r3, #8
 80012b4:	440a      	add	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
	//HAL_Delay(100);

	if (accel_data[0] > 2047)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012c0:	db05      	blt.n	80012ce <IMU_acc_read+0xa6>
	{
		accel_data[0] -= 4096;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (accel_data[1]> 2047)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	3304      	adds	r3, #4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012d8:	db07      	blt.n	80012ea <IMU_acc_read+0xc2>
	{
		accel_data[1] -= 4096;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	3304      	adds	r3, #4
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	3304      	adds	r3, #4
 80012e4:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 80012e8:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (accel_data[2] > 2047)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	3308      	adds	r3, #8
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012f4:	db07      	blt.n	8001306 <IMU_acc_read+0xde>
	{
		accel_data[2] -= 4096;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	3308      	adds	r3, #8
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	3308      	adds	r3, #8
 8001300:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8001304:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40020000 	.word	0x40020000

08001314 <IMU_gyro_read>:

void IMU_gyro_read(SPI_HandleTypeDef *hspi, int *gyro_data){
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_GYRO_DATA_START_REG;
 800131e:	2382      	movs	r3, #130	; 0x82
 8001320:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET); //read gyroscope data
 8001322:	2200      	movs	r2, #0
 8001324:	2104      	movs	r1, #4
 8001326:	4832      	ldr	r0, [pc, #200]	; (80013f0 <IMU_gyro_read+0xdc>)
 8001328:	f003 f804 	bl	8004334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 800132c:	f107 0113 	add.w	r1, r7, #19
 8001330:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001334:	2201      	movs	r2, #1
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f004 ffe8 	bl	800630c <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e00c      	b.n	800135c <IMU_gyro_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f107 020c 	add.w	r2, r7, #12
 8001348:	18d1      	adds	r1, r2, r3
 800134a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800134e:	2201      	movs	r2, #1
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f005 f90f 	bl	8006574 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2b05      	cmp	r3, #5
 8001360:	ddef      	ble.n	8001342 <IMU_gyro_read+0x2e>
	}
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 8001362:	2201      	movs	r2, #1
 8001364:	2104      	movs	r1, #4
 8001366:	4822      	ldr	r0, [pc, #136]	; (80013f0 <IMU_gyro_read+0xdc>)
 8001368:	f002 ffe4 	bl	8004334 <HAL_GPIO_WritePin>
	gyro_data[0]=((store_data[1]<<8)+(store_data[0]));
 800136c:	7b7b      	ldrb	r3, [r7, #13]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	7b3a      	ldrb	r2, [r7, #12]
 8001372:	441a      	add	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	601a      	str	r2, [r3, #0]
	gyro_data[1]=((store_data[3]<<8)+(store_data[2]));
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	021a      	lsls	r2, r3, #8
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	4619      	mov	r1, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	3304      	adds	r3, #4
 8001384:	440a      	add	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
	gyro_data[2]=((store_data[5]<<8)+(store_data[4]));
 8001388:	7c7b      	ldrb	r3, [r7, #17]
 800138a:	021a      	lsls	r2, r3, #8
 800138c:	7c3b      	ldrb	r3, [r7, #16]
 800138e:	4619      	mov	r1, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	3308      	adds	r3, #8
 8001394:	440a      	add	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
	//HAL_Delay(100);

	if (gyro_data[0] > 32767)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013a0:	db05      	blt.n	80013ae <IMU_gyro_read+0x9a>
	{
		gyro_data[0] -= 65536;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (gyro_data[1]> 32767)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	3304      	adds	r3, #4
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013b8:	db07      	blt.n	80013ca <IMU_gyro_read+0xb6>
	{
		gyro_data[1] -= 65536;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	3304      	adds	r3, #4
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	3304      	adds	r3, #4
 80013c4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80013c8:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (gyro_data[2] > 32767)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	3308      	adds	r3, #8
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013d4:	db07      	blt.n	80013e6 <IMU_gyro_read+0xd2>
	{
		gyro_data[2] -= 65536;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3308      	adds	r3, #8
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	3308      	adds	r3, #8
 80013e0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80013e4:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020400 	.word	0x40020400
 80013f4:	00000000 	.word	0x00000000

080013f8 <adcInt2Volt>:
#include "adcUnitConversion.h"
#include "stdio.h"
#include "math.h"
#include "main.h"

float adcInt2Volt (unsigned long int ADCReading){
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

	//ADCVREF reference voltage = ?
	return ((float)ADCReading/(1 << 12 ))*ADCVREF;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800140a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001448 <adcInt2Volt+0x50>
 800140e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001412:	ee16 0a90 	vmov	r0, s13
 8001416:	f7ff f897 	bl	8000548 <__aeabi_f2d>
 800141a:	a309      	add	r3, pc, #36	; (adr r3, 8001440 <adcInt2Volt+0x48>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f8ea 	bl	80005f8 <__aeabi_dmul>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4618      	mov	r0, r3
 800142a:	4621      	mov	r1, r4
 800142c:	f7ff fbbc 	bl	8000ba8 <__aeabi_d2f>
 8001430:	4603      	mov	r3, r0
 8001432:	ee07 3a90 	vmov	s15, r3
}
 8001436:	eeb0 0a67 	vmov.f32	s0, s15
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	66666666 	.word	0x66666666
 8001444:	400a6666 	.word	0x400a6666
 8001448:	45800000 	.word	0x45800000
 800144c:	00000000 	.word	0x00000000

08001450 <motorCurrent>:


float motorCurrent (int adcReading){
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	//0.0066 sensor's scale factor
	return (adcInt2Volt(adcReading) - BIASSENSOR)/0.0066;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ffcc 	bl	80013f8 <adcInt2Volt>
 8001460:	ee10 3a10 	vmov	r3, s0
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f86f 	bl	8000548 <__aeabi_f2d>
 800146a:	a30f      	add	r3, pc, #60	; (adr r3, 80014a8 <motorCurrent+0x58>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7fe ff0a 	bl	8000288 <__aeabi_dsub>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	4618      	mov	r0, r3
 800147a:	4621      	mov	r1, r4
 800147c:	a30c      	add	r3, pc, #48	; (adr r3, 80014b0 <motorCurrent+0x60>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff f9e3 	bl	800084c <__aeabi_ddiv>
 8001486:	4603      	mov	r3, r0
 8001488:	460c      	mov	r4, r1
 800148a:	4618      	mov	r0, r3
 800148c:	4621      	mov	r1, r4
 800148e:	f7ff fb8b 	bl	8000ba8 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	ee07 3a90 	vmov	s15, r3
}
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd90      	pop	{r4, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	66666666 	.word	0x66666666
 80014ac:	3ffa6666 	.word	0x3ffa6666
 80014b0:	02752546 	.word	0x02752546
 80014b4:	3f7b089a 	.word	0x3f7b089a

080014b8 <igbtTemp>:

float igbtTemp (int adcReading){
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	//int Rmin = 160, Rmax = 16100;
	//float Vmin = 0.05, Vmax = 3.25;
	//int Tmin = 0, Tmax = 150;

	float m, b, T;
	m = b = T = 0;
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	60fb      	str	r3, [r7, #12]

	m = 53.085;//(Tmin-Tmax)/(Vmax-Vmin);
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <igbtTemp+0x98>)
 80014d0:	60fb      	str	r3, [r7, #12]
	b = 22.025;//Tmin - m*Vmax;
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <igbtTemp+0x9c>)
 80014d4:	613b      	str	r3, [r7, #16]

	T = m*(adcInt2Volt(adcReading)/3.3)+b;
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f7ff f836 	bl	8000548 <__aeabi_f2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff88 	bl	80013f8 <adcInt2Volt>
 80014e8:	ee10 3a10 	vmov	r3, s0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f82b 	bl	8000548 <__aeabi_f2d>
 80014f2:	a315      	add	r3, pc, #84	; (adr r3, 8001548 <igbtTemp+0x90>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f9a8 	bl	800084c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	f7ff f878 	bl	80005f8 <__aeabi_dmul>
 8001508:	4603      	mov	r3, r0
 800150a:	460c      	mov	r4, r1
 800150c:	4625      	mov	r5, r4
 800150e:	461c      	mov	r4, r3
 8001510:	6938      	ldr	r0, [r7, #16]
 8001512:	f7ff f819 	bl	8000548 <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe feb5 	bl	800028c <__adddf3>
 8001522:	4603      	mov	r3, r0
 8001524:	460c      	mov	r4, r1
 8001526:	4618      	mov	r0, r3
 8001528:	4621      	mov	r1, r4
 800152a:	f7ff fb3d 	bl	8000ba8 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	617b      	str	r3, [r7, #20]

	return T;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	ee07 3a90 	vmov	s15, r3
}
 8001538:	eeb0 0a67 	vmov.f32	s0, s15
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bdb0      	pop	{r4, r5, r7, pc}
 8001542:	bf00      	nop
 8001544:	f3af 8000 	nop.w
 8001548:	66666666 	.word	0x66666666
 800154c:	400a6666 	.word	0x400a6666
 8001550:	4254570a 	.word	0x4254570a
 8001554:	41b03333 	.word	0x41b03333

08001558 <motorTemp>:

float motorTemp (unsigned long int adcReading){
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	//int Rmin = 1600, Rmax = 4000;   //resistance
	//float Vmin = 0.05, Vmax = 3.25; //voltage
	//int Tmin=0, Tmax=150;			//temperature

	float m, b, Rt, T;
	m = b = Rt = T = 0;
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	60bb      	str	r3, [r7, #8]

	/*m = (Tmin-Tmax)/(Vmin-Vmax);
	b = Tmin-Vmin*m; */
	m = -119.81;
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <motorTemp+0x50>)
 8001574:	60bb      	str	r3, [r7, #8]
	b = 365.61;
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <motorTemp+0x54>)
 8001578:	60fb      	str	r3, [r7, #12]

	T = m*(adcInt2Volt(adcReading))+b;
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ff3c 	bl	80013f8 <adcInt2Volt>
 8001580:	eeb0 7a40 	vmov.f32	s14, s0
 8001584:	edd7 7a02 	vldr	s15, [r7, #8]
 8001588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	edc7 7a05 	vstr	s15, [r7, #20]

	return T;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	ee07 3a90 	vmov	s15, r3

}
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	c2ef9eb8 	.word	0xc2ef9eb8
 80015ac:	43b6ce14 	.word	0x43b6ce14

080015b0 <voltageAC>:

float voltageAC (int adcReading){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

	/*
	 * R1 = R28 = 75k
	 * R2 = R30 = 10k
	 */
	int R1 = 1800000;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <voltageAC+0x50>)
 80015ba:	617b      	str	r3, [r7, #20]
	int R2 = 10000;
 80015bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80015c0:	613b      	str	r3, [r7, #16]

	float Vout = adcInt2Volt(adcReading);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff17 	bl	80013f8 <adcInt2Volt>
 80015ca:	ed87 0a03 	vstr	s0, [r7, #12]

	float Vin = ((R1+R2)/R2)*Vout;
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	441a      	add	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80015e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ea:	edc7 7a02 	vstr	s15, [r7, #8]

	return Vin;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	ee07 3a90 	vmov	s15, r3

}
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	001b7740 	.word	0x001b7740

08001604 <voltageDC>:

float voltageDC (int adcReading){
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	 * R1 = R9 = 300k
	 * R2 = R12 = 2k
	 * R3 = R10 = 39  <- negligenciar?
	 */

	int R1 = 300000;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <voltageDC+0x50>)
 800160e:	617b      	str	r3, [r7, #20]
	int R2 = 2000;
 8001610:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001614:	613b      	str	r3, [r7, #16]
	//int R3 = 39;

	float Vout = adcInt2Volt(adcReading);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff feed 	bl	80013f8 <adcInt2Volt>
 800161e:	ed87 0a03 	vstr	s0, [r7, #12]

	float Vin = ((R1+R2)/R2)*Vout;
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	441a      	add	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	fb92 f3f3 	sdiv	r3, r2, r3
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001636:	ed97 7a03 	vldr	s14, [r7, #12]
 800163a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163e:	edc7 7a02 	vstr	s15, [r7, #8]

	return Vin;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	ee07 3a90 	vmov	s15, r3

}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	000493e0 	.word	0x000493e0

08001658 <pedalPos>:


float pedalPos (int adcReading){
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

	float pos = (adcInt2Volt(adcReading)/ADCVREF)*100;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fec8 	bl	80013f8 <adcInt2Volt>
 8001668:	ee10 3a10 	vmov	r3, s0
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff6b 	bl	8000548 <__aeabi_f2d>
 8001672:	a310      	add	r3, pc, #64	; (adr r3, 80016b4 <pedalPos+0x5c>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7ff f8e8 	bl	800084c <__aeabi_ddiv>
 800167c:	4603      	mov	r3, r0
 800167e:	460c      	mov	r4, r1
 8001680:	4618      	mov	r0, r3
 8001682:	4621      	mov	r1, r4
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <pedalPos+0x58>)
 800168a:	f7fe ffb5 	bl	80005f8 <__aeabi_dmul>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4618      	mov	r0, r3
 8001694:	4621      	mov	r1, r4
 8001696:	f7ff fa87 	bl	8000ba8 <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	60fb      	str	r3, [r7, #12]

	return pos;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	ee07 3a90 	vmov	s15, r3

}
 80016a4:	eeb0 0a67 	vmov.f32	s0, s15
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd90      	pop	{r4, r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40590000 	.word	0x40590000
 80016b4:	66666666 	.word	0x66666666
 80016b8:	400a6666 	.word	0x400a6666

080016bc <motorSpeed>:
 */

#include "main.h"
#include "encoderMode.h"

int motorSpeed (uint32_t *cnt1, uint32_t *tick, TIM_HandleTypeDef htim2){
 80016bc:	b082      	sub	sp, #8
 80016be:	b590      	push	{r4, r7, lr}
 80016c0:	b087      	sub	sp, #28
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
 80016c8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80016cc:	e881 000c 	stmia.w	r1, {r2, r3}

	int diff = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
	uint32_t cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	613b      	str	r3, [r7, #16]
	//uint32_t time1 = (HAL_GetTick() - *tick)*0.001;
	//printf("time = %lu\n", time1);

	printf("cnt1 = %lu counter2 = %lu\n",*cnt1,cnt2);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4831      	ldr	r0, [pc, #196]	; (80017a8 <motorSpeed+0xec>)
 80016e4:	f00a fd86 	bl	800c1f4 <iprintf>

	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	d113      	bne.n	800171c <motorSpeed+0x60>
		if(cnt2 < *cnt1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d205      	bcs.n	800170a <motorSpeed+0x4e>
			diff = *cnt1 - cnt2;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e01b      	b.n	8001742 <motorSpeed+0x86>
		else
			diff = (65535 - cnt2) + *cnt1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001716:	33ff      	adds	r3, #255	; 0xff
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	e012      	b.n	8001742 <motorSpeed+0x86>
	} else {
		if(cnt2 > *cnt1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	429a      	cmp	r2, r3
 8001724:	d905      	bls.n	8001732 <motorSpeed+0x76>
			diff = cnt2 - *cnt1;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e007      	b.n	8001742 <motorSpeed+0x86>
		else
			diff = (65535 - *cnt1) + cnt2;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800173e:	33ff      	adds	r3, #255	; 0xff
 8001740:	617b      	str	r3, [r7, #20]
	}



	printf("diff = %d\n", diff);
 8001742:	6979      	ldr	r1, [r7, #20]
 8001744:	4819      	ldr	r0, [pc, #100]	; (80017ac <motorSpeed+0xf0>)
 8001746:	f00a fd55 	bl	800c1f4 <iprintf>
	//float speed = (((float)(diff)/8)*60)*2;  //((diff/8)*60)/0.02;  // change when sysTimer configured
	float speed = (((float)(diff)/8)*60);//  /(time1);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001754:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001758:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800175c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80017b0 <motorSpeed+0xf4>
 8001760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001764:	edc7 7a03 	vstr	s15, [r7, #12]


	*tick = HAL_GetTick();
 8001768:	f001 fb6c 	bl	8002e44 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	601a      	str	r2, [r3, #0]
	*cnt1 = cnt2;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	601a      	str	r2, [r3, #0]
	printf("speed = %f\n",speed);
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7fe fee5 	bl	8000548 <__aeabi_f2d>
 800177e:	4603      	mov	r3, r0
 8001780:	460c      	mov	r4, r1
 8001782:	461a      	mov	r2, r3
 8001784:	4623      	mov	r3, r4
 8001786:	480b      	ldr	r0, [pc, #44]	; (80017b4 <motorSpeed+0xf8>)
 8001788:	f00a fd34 	bl	800c1f4 <iprintf>
	return speed;
 800178c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001794:	ee17 3a90 	vmov	r3, s15
}
 8001798:	4618      	mov	r0, r3
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80017a2:	b002      	add	sp, #8
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	0800e408 	.word	0x0800e408
 80017ac:	0800e424 	.word	0x0800e424
 80017b0:	42700000 	.word	0x42700000
 80017b4:	0800e430 	.word	0x0800e430

080017b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80017d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80017d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00b      	beq.n	80017f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80017e0:	e000      	b.n	80017e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80017e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80017e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f9      	beq.n	80017e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80017ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	//printf("dma timer = %lu\n", HAL_GetTick()-time2);
	if(hadc->Instance == ADC1){
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <HAL_ADC_ConvCpltCallback+0x40>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d110      	bne.n	800183c <HAL_ADC_ConvCpltCallback+0x34>
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e00a      	b.n	8001836 <HAL_ADC_ConvCpltCallback+0x2e>
			{
				adc_dma[i]=buffer_dma[i];
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_ADC_ConvCpltCallback+0x44>)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001828:	4909      	ldr	r1, [pc, #36]	; (8001850 <HAL_ADC_ConvCpltCallback+0x48>)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b0b      	cmp	r3, #11
 800183a:	ddf1      	ble.n	8001820 <HAL_ADC_ConvCpltCallback+0x18>
			}
	}
	//time2 = HAL_GetTick();
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40012000 	.word	0x40012000
 800184c:	20001ad0 	.word	0x20001ad0
 8001850:	200017d0 	.word	0x200017d0

08001854 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001856:	b091      	sub	sp, #68	; 0x44
 8001858:	af0e      	add	r7, sp, #56	; 0x38
 800185a:	6078      	str	r0, [r7, #4]

	//UNUSED(htim); será preciso?

	//counter2 = __HAL_TIM_GET_COUNTER(&htim2);
	//printf("%lu\n", HAL_GetTick());
	if(htim->Instance== TIM6){
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a12      	ldr	r2, [pc, #72]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d11d      	bne.n	80018a2 <HAL_TIM_PeriodElapsedCallback+0x4e>
		printf("kay\n");
 8001866:	4812      	ldr	r0, [pc, #72]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001868:	f00a fd38 	bl	800c2dc <puts>
		speed = motorSpeed(&counter1, &tick, htim2);
 800186c:	4e11      	ldr	r6, [pc, #68]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800186e:	466d      	mov	r5, sp
 8001870:	f106 0408 	add.w	r4, r6, #8
 8001874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800187c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001880:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001884:	e885 0003 	stmia.w	r5, {r0, r1}
 8001888:	e896 000c 	ldmia.w	r6, {r2, r3}
 800188c:	490a      	ldr	r1, [pc, #40]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800188e:	480b      	ldr	r0, [pc, #44]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001890:	f7ff ff14 	bl	80016bc <motorSpeed>
 8001894:	ee07 0a90 	vmov	s15, r0
 8001898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800189e:	edc3 7a00 	vstr	s15, [r3]

	/*float T = 0.25; //assumindo que periodo é 250ms
	speed = ((pulses/8)*60)/T;
	pulses = 0;*/

}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40001000 	.word	0x40001000
 80018b0:	0800e43c 	.word	0x0800e43c
 80018b4:	20002c7c 	.word	0x20002c7c
 80018b8:	20000280 	.word	0x20000280
 80018bc:	2000027c 	.word	0x2000027c
 80018c0:	20000284 	.word	0x20000284

080018c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b097      	sub	sp, #92	; 0x5c
 80018c8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ca:	f001 fa55 	bl	8002d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ce:	f000 fafb 	bl	8001ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d2:	f000 fd67 	bl	80023a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80018d6:	f000 fd35 	bl	8002344 <MX_DMA_Init>
  MX_SPI2_Init();
 80018da:	f000 fc73 	bl	80021c4 <MX_SPI2_Init>
  MX_ADC1_Init();
 80018de:	f000 fb65 	bl	8001fac <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 80018e2:	f000 fc4f 	bl	8002184 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80018e6:	f006 fb03 	bl	8007ef0 <MX_FATFS_Init>
  MX_TIM6_Init();
 80018ea:	f000 fcf5 	bl	80022d8 <MX_TIM6_Init>
  MX_TIM2_Init();
 80018ee:	f000 fc9f 	bl	8002230 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2110      	movs	r1, #16
 80018f6:	481b      	ldr	r0, [pc, #108]	; (8001964 <main+0xa0>)
 80018f8:	f002 fd1c 	bl	8004334 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2104      	movs	r1, #4
 8001900:	4819      	ldr	r0, [pc, #100]	; (8001968 <main+0xa4>)
 8001902:	f002 fd17 	bl	8004334 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800190c:	4816      	ldr	r0, [pc, #88]	; (8001968 <main+0xa4>)
 800190e:	f002 fd11 	bl	8004334 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <main+0xa4>)
 800191a:	f002 fd0b 	bl	8004334 <HAL_GPIO_WritePin>
  if(fresult != FR_OK){
	  Error_Handler();
  }
  f_close(&fil);*/

  foc_ic_config(&hspi2);
 800191e:	4813      	ldr	r0, [pc, #76]	; (800196c <main+0xa8>)
 8001920:	f7ff fb58 	bl	8000fd4 <foc_ic_config>

  fresult=mount_card(&fs);
 8001924:	4812      	ldr	r0, [pc, #72]	; (8001970 <main+0xac>)
 8001926:	f000 fe0f 	bl	8002548 <mount_card>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <main+0xb0>)
 8001930:	701a      	strb	r2, [r3, #0]

  char str2[30];

  IMU_config(&hspi2);
 8001932:	480e      	ldr	r0, [pc, #56]	; (800196c <main+0xa8>)
 8001934:	f7ff fbf6 	bl	8001124 <IMU_config>

  HAL_TIM_Base_Start_IT(&htim6);
 8001938:	480f      	ldr	r0, [pc, #60]	; (8001978 <main+0xb4>)
 800193a:	f005 fa02 	bl	8006d42 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim7);

  //Initialize encoder mode
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800193e:	213c      	movs	r1, #60	; 0x3c
 8001940:	480e      	ldr	r0, [pc, #56]	; (800197c <main+0xb8>)
 8001942:	f005 fab4 	bl	8006eae <HAL_TIM_Encoder_Start>
  tick = HAL_GetTick();
 8001946:	f001 fa7d 	bl	8002e44 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <main+0xbc>)
 800194e:	601a      	str	r2, [r3, #0]
  counter1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <main+0xb8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <main+0xc0>)
 8001958:	6013      	str	r3, [r2, #0]

  uint8_t aux[5], aux2[1], aux3[1], str3[4], str[5];
  //uint8_t ref[5];
    aux[0]=0b10000001;
 800195a:	2381      	movs	r3, #129	; 0x81
 800195c:	753b      	strb	r3, [r7, #20]
    for(int i=1; i<=4; i++){
 800195e:	2301      	movs	r3, #1
 8001960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001962:	e01a      	b.n	800199a <main+0xd6>
 8001964:	40020000 	.word	0x40020000
 8001968:	40020400 	.word	0x40020400
 800196c:	2000073c 	.word	0x2000073c
 8001970:	20000798 	.word	0x20000798
 8001974:	20001c48 	.word	0x20001c48
 8001978:	20001b60 	.word	0x20001b60
 800197c:	20002c7c 	.word	0x20002c7c
 8001980:	20000280 	.word	0x20000280
 8001984:	2000027c 	.word	0x2000027c
  	  aux[i]=0b00000000;
 8001988:	f107 0214 	add.w	r2, r7, #20
 800198c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800198e:	4413      	add	r3, r2
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
    for(int i=1; i<=4; i++){
 8001994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001996:	3301      	adds	r3, #1
 8001998:	64fb      	str	r3, [r7, #76]	; 0x4c
 800199a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800199c:	2b04      	cmp	r3, #4
 800199e:	ddf3      	ble.n	8001988 <main+0xc4>
    }
    aux2[0]=0b00000000;
 80019a0:	2300      	movs	r3, #0
 80019a2:	743b      	strb	r3, [r7, #16]

    time2 = HAL_GetTick();
 80019a4:	f001 fa4e 	bl	8002e44 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4bc3      	ldr	r3, [pc, #780]	; (8001cb8 <main+0x3f4>)
 80019ac:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, buffer_dma, NR_ADC_CHANNELS);
 80019ae:	220c      	movs	r2, #12
 80019b0:	49c2      	ldr	r1, [pc, #776]	; (8001cbc <main+0x3f8>)
 80019b2:	48c3      	ldr	r0, [pc, #780]	; (8001cc0 <main+0x3fc>)
 80019b4:	f001 fab8 	bl	8002f28 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("acc %f\n", acc_pedal);
 80019b8:	4bc2      	ldr	r3, [pc, #776]	; (8001cc4 <main+0x400>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdc3 	bl	8000548 <__aeabi_f2d>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	461a      	mov	r2, r3
 80019c8:	4623      	mov	r3, r4
 80019ca:	48bf      	ldr	r0, [pc, #764]	; (8001cc8 <main+0x404>)
 80019cc:	f00a fc12 	bl	800c1f4 <iprintf>

	  if (acc_pedal>50){
 80019d0:	4bbc      	ldr	r3, [pc, #752]	; (8001cc4 <main+0x400>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8001ccc <main+0x408>
 80019da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	dd06      	ble.n	80019f2 <main+0x12e>
		  printf("ACELERA CARALHO");
 80019e4:	48ba      	ldr	r0, [pc, #744]	; (8001cd0 <main+0x40c>)
 80019e6:	f00a fc05 	bl	800c1f4 <iprintf>
		  foc_ic_send_torque(&hspi2, 0x00000050);
 80019ea:	2150      	movs	r1, #80	; 0x50
 80019ec:	48b9      	ldr	r0, [pc, #740]	; (8001cd4 <main+0x410>)
 80019ee:	f7ff fb7d 	bl	80010ec <foc_ic_send_torque>
	  }
	  if(brk_pedal>50){
 80019f2:	4bb9      	ldr	r3, [pc, #740]	; (8001cd8 <main+0x414>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8001ccc <main+0x408>
 80019fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a04:	dd03      	ble.n	8001a0e <main+0x14a>
		  foc_ic_send_torque(&hspi2, 0);
 8001a06:	2100      	movs	r1, #0
 8001a08:	48b2      	ldr	r0, [pc, #712]	; (8001cd4 <main+0x410>)
 8001a0a:	f7ff fb6f 	bl	80010ec <foc_ic_send_torque>
	  }

	  uint32_t time1 = HAL_GetTick();
 8001a0e:	f001 fa19 	bl	8002e44 <HAL_GetTick>
 8001a12:	6438      	str	r0, [r7, #64]	; 0x40

	  //printf("Microssegundos = %lu\n", seg);
	  uint32_t read=adc_dma[0];
 8001a14:	4bb1      	ldr	r3, [pc, #708]	; (8001cdc <main+0x418>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	63fb      	str	r3, [r7, #60]	; 0x3c
	  motor_temp = motorTemp(read);
 8001a1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a1c:	f7ff fd9c 	bl	8001558 <motorTemp>
 8001a20:	eef0 7a40 	vmov.f32	s15, s0
 8001a24:	4bae      	ldr	r3, [pc, #696]	; (8001ce0 <main+0x41c>)
 8001a26:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[1];
 8001a2a:	4bac      	ldr	r3, [pc, #688]	; (8001cdc <main+0x418>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  brk_pedal = pedalPos(read);
 8001a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fe10 	bl	8001658 <pedalPos>
 8001a38:	eef0 7a40 	vmov.f32	s15, s0
 8001a3c:	4ba6      	ldr	r3, [pc, #664]	; (8001cd8 <main+0x414>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[2];
 8001a42:	4ba6      	ldr	r3, [pc, #664]	; (8001cdc <main+0x418>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
	  acc_pedal = pedalPos(read);
 8001a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fe04 	bl	8001658 <pedalPos>
 8001a50:	eef0 7a40 	vmov.f32	s15, s0
 8001a54:	4b9b      	ldr	r3, [pc, #620]	; (8001cc4 <main+0x400>)
 8001a56:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[3];
 8001a5a:	4ba0      	ldr	r3, [pc, #640]	; (8001cdc <main+0x418>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph1 = motorCurrent(read);
 8001a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fcf4 	bl	8001450 <motorCurrent>
 8001a68:	eef0 7a40 	vmov.f32	s15, s0
 8001a6c:	4b9d      	ldr	r3, [pc, #628]	; (8001ce4 <main+0x420>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph1[f] = current_ph1*current_ph1;
 8001a72:	4b9c      	ldr	r3, [pc, #624]	; (8001ce4 <main+0x420>)
 8001a74:	ed93 7a00 	vldr	s14, [r3]
 8001a78:	4b9a      	ldr	r3, [pc, #616]	; (8001ce4 <main+0x420>)
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	4b9a      	ldr	r3, [pc, #616]	; (8001ce8 <main+0x424>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a86:	4a99      	ldr	r2, [pc, #612]	; (8001cec <main+0x428>)
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[4];
 8001a90:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <main+0x418>)
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph2 = motorCurrent(read);
 8001a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fcd9 	bl	8001450 <motorCurrent>
 8001a9e:	eef0 7a40 	vmov.f32	s15, s0
 8001aa2:	4b93      	ldr	r3, [pc, #588]	; (8001cf0 <main+0x42c>)
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph2[f] = current_ph2*current_ph2;
 8001aa8:	4b91      	ldr	r3, [pc, #580]	; (8001cf0 <main+0x42c>)
 8001aaa:	ed93 7a00 	vldr	s14, [r3]
 8001aae:	4b90      	ldr	r3, [pc, #576]	; (8001cf0 <main+0x42c>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	4b8c      	ldr	r3, [pc, #560]	; (8001ce8 <main+0x424>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abc:	4a8d      	ldr	r2, [pc, #564]	; (8001cf4 <main+0x430>)
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[5];
 8001ac6:	4b85      	ldr	r3, [pc, #532]	; (8001cdc <main+0x418>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph3 = motorCurrent(read);
 8001acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fcbe 	bl	8001450 <motorCurrent>
 8001ad4:	eef0 7a40 	vmov.f32	s15, s0
 8001ad8:	4b87      	ldr	r3, [pc, #540]	; (8001cf8 <main+0x434>)
 8001ada:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph3[f] = current_ph3*current_ph3;
 8001ade:	4b86      	ldr	r3, [pc, #536]	; (8001cf8 <main+0x434>)
 8001ae0:	ed93 7a00 	vldr	s14, [r3]
 8001ae4:	4b84      	ldr	r3, [pc, #528]	; (8001cf8 <main+0x434>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	4b7f      	ldr	r3, [pc, #508]	; (8001ce8 <main+0x424>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af2:	4a82      	ldr	r2, [pc, #520]	; (8001cfc <main+0x438>)
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[6];
 8001afc:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <main+0x418>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	63fb      	str	r3, [r7, #60]	; 0x3c
	  conv_temp = igbtTemp(read);
 8001b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fcd7 	bl	80014b8 <igbtTemp>
 8001b0a:	eef0 7a40 	vmov.f32	s15, s0
 8001b0e:	4b7c      	ldr	r3, [pc, #496]	; (8001d00 <main+0x43c>)
 8001b10:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[7];
 8001b14:	4b71      	ldr	r3, [pc, #452]	; (8001cdc <main+0x418>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	63fb      	str	r3, [r7, #60]	; 0x3c
	  dc_voltage=voltageDC(read);
 8001b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fd71 	bl	8001604 <voltageDC>
 8001b22:	eef0 7a40 	vmov.f32	s15, s0
 8001b26:	4b77      	ldr	r3, [pc, #476]	; (8001d04 <main+0x440>)
 8001b28:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[8];
 8001b2c:	4b6b      	ldr	r3, [pc, #428]	; (8001cdc <main+0x418>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
	  dc_current=motorCurrent(read); //função corrente dc?
 8001b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fc8b 	bl	8001450 <motorCurrent>
 8001b3a:	eef0 7a40 	vmov.f32	s15, s0
 8001b3e:	4b72      	ldr	r3, [pc, #456]	; (8001d08 <main+0x444>)
 8001b40:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[9];
 8001b44:	4b65      	ldr	r3, [pc, #404]	; (8001cdc <main+0x418>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph1=voltageAC(read);
 8001b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fd2f 	bl	80015b0 <voltageAC>
 8001b52:	eef0 7a40 	vmov.f32	s15, s0
 8001b56:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <main+0x448>)
 8001b58:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[10];
 8001b5c:	4b5f      	ldr	r3, [pc, #380]	; (8001cdc <main+0x418>)
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph2=voltageAC(read);
 8001b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fd23 	bl	80015b0 <voltageAC>
 8001b6a:	eef0 7a40 	vmov.f32	s15, s0
 8001b6e:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <main+0x44c>)
 8001b70:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[11];
 8001b74:	4b59      	ldr	r3, [pc, #356]	; (8001cdc <main+0x418>)
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph3=voltageAC(read);
 8001b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fd17 	bl	80015b0 <voltageAC>
 8001b82:	eef0 7a40 	vmov.f32	s15, s0
 8001b86:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <main+0x450>)
 8001b88:	edc3 7a00 	vstr	s15, [r3]
		  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
	  }
	  else if(brk>50)*/


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b92:	4861      	ldr	r0, [pc, #388]	; (8001d18 <main+0x454>)
 8001b94:	f002 fbce 	bl	8004334 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux, 5, 1000);
 8001b98:	f107 0114 	add.w	r1, r7, #20
 8001b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba0:	2205      	movs	r2, #5
 8001ba2:	484c      	ldr	r0, [pc, #304]	; (8001cd4 <main+0x410>)
 8001ba4:	f004 fbb2 	bl	800630c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bae:	485a      	ldr	r0, [pc, #360]	; (8001d18 <main+0x454>)
 8001bb0:	f002 fbc0 	bl	8004334 <HAL_GPIO_WritePin>


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bba:	4857      	ldr	r0, [pc, #348]	; (8001d18 <main+0x454>)
 8001bbc:	f002 fbba 	bl	8004334 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux2, 1, 1000);
 8001bc0:	f107 0110 	add.w	r1, r7, #16
 8001bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4842      	ldr	r0, [pc, #264]	; (8001cd4 <main+0x410>)
 8001bcc:	f004 fb9e 	bl	800630c <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str, 4, 1000);
 8001bd0:	4639      	mov	r1, r7
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	483e      	ldr	r0, [pc, #248]	; (8001cd4 <main+0x410>)
 8001bda:	f004 fccb 	bl	8006574 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be4:	484c      	ldr	r0, [pc, #304]	; (8001d18 <main+0x454>)
 8001be6:	f002 fba5 	bl	8004334 <HAL_GPIO_WritePin>
	  //printf("%d %d %d %d\n", str[0], str[1], str[2], str[3]);


	  //ler velocidades do tmc
	  aux3[0]=0x6A;
 8001bea:	236a      	movs	r3, #106	; 0x6a
 8001bec:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf4:	4848      	ldr	r0, [pc, #288]	; (8001d18 <main+0x454>)
 8001bf6:	f002 fb9d 	bl	8004334 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001bfa:	f107 010c 	add.w	r1, r7, #12
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	2201      	movs	r2, #1
 8001c04:	4833      	ldr	r0, [pc, #204]	; (8001cd4 <main+0x410>)
 8001c06:	f004 fb81 	bl	800630c <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001c0a:	f107 0108 	add.w	r1, r7, #8
 8001c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c12:	2204      	movs	r2, #4
 8001c14:	482f      	ldr	r0, [pc, #188]	; (8001cd4 <main+0x410>)
 8001c16:	f004 fcad 	bl	8006574 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c20:	483d      	ldr	r0, [pc, #244]	; (8001d18 <main+0x454>)
 8001c22:	f002 fb87 	bl	8004334 <HAL_GPIO_WritePin>
	  //printf("PID VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);

	  aux3[0]=0x22;
 8001c26:	2322      	movs	r3, #34	; 0x22
 8001c28:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c30:	4839      	ldr	r0, [pc, #228]	; (8001d18 <main+0x454>)
 8001c32:	f002 fb7f 	bl	8004334 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001c36:	f107 010c 	add.w	r1, r7, #12
 8001c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4824      	ldr	r0, [pc, #144]	; (8001cd4 <main+0x410>)
 8001c42:	f004 fb63 	bl	800630c <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001c46:	f107 0108 	add.w	r1, r7, #8
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <main+0x410>)
 8001c52:	f004 fc8f 	bl	8006574 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5c:	482e      	ldr	r0, [pc, #184]	; (8001d18 <main+0x454>)
 8001c5e:	f002 fb69 	bl	8004334 <HAL_GPIO_WritePin>
	  printf("OPENLOOP VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);
 8001c62:	7a3b      	ldrb	r3, [r7, #8]
 8001c64:	4619      	mov	r1, r3
 8001c66:	7a7b      	ldrb	r3, [r7, #9]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	7abb      	ldrb	r3, [r7, #10]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	7afb      	ldrb	r3, [r7, #11]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4603      	mov	r3, r0
 8001c74:	4829      	ldr	r0, [pc, #164]	; (8001d1c <main+0x458>)
 8001c76:	f00a fabd 	bl	800c1f4 <iprintf>

	  aux3[0]=0x41;
 8001c7a:	2341      	movs	r3, #65	; 0x41
 8001c7c:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c84:	4824      	ldr	r0, [pc, #144]	; (8001d18 <main+0x454>)
 8001c86:	f002 fb55 	bl	8004334 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001c8a:	f107 010c 	add.w	r1, r7, #12
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	2201      	movs	r2, #1
 8001c94:	480f      	ldr	r0, [pc, #60]	; (8001cd4 <main+0x410>)
 8001c96:	f004 fb39 	bl	800630c <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001c9a:	f107 0108 	add.w	r1, r7, #8
 8001c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <main+0x410>)
 8001ca6:	f004 fc65 	bl	8006574 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb0:	4819      	ldr	r0, [pc, #100]	; (8001d18 <main+0x454>)
 8001cb2:	f002 fb3f 	bl	8004334 <HAL_GPIO_WritePin>
 8001cb6:	e033      	b.n	8001d20 <main+0x45c>
 8001cb8:	20003d54 	.word	0x20003d54
 8001cbc:	20001ad0 	.word	0x20001ad0
 8001cc0:	20001820 	.word	0x20001820
 8001cc4:	20000738 	.word	0x20000738
 8001cc8:	0800e440 	.word	0x0800e440
 8001ccc:	42480000 	.word	0x42480000
 8001cd0:	0800e448 	.word	0x0800e448
 8001cd4:	2000073c 	.word	0x2000073c
 8001cd8:	20001804 	.word	0x20001804
 8001cdc:	200017d0 	.word	0x200017d0
 8001ce0:	200006d4 	.word	0x200006d4
 8001ce4:	20001800 	.word	0x20001800
 8001ce8:	20000288 	.word	0x20000288
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20001810 	.word	0x20001810
 8001cf4:	20000028 	.word	0x20000028
 8001cf8:	2000181c 	.word	0x2000181c
 8001cfc:	20000050 	.word	0x20000050
 8001d00:	2000180c 	.word	0x2000180c
 8001d04:	20001c44 	.word	0x20001c44
 8001d08:	20001bac 	.word	0x20001bac
 8001d0c:	20000794 	.word	0x20000794
 8001d10:	20001818 	.word	0x20001818
 8001d14:	20001814 	.word	0x20001814
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	0800e458 	.word	0x0800e458
	  //printf("AENC DECODER COUNT: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);	   */

	  sprintf(str2,"%f ", brk_pedal);
 8001d20:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <main+0x5b4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fc0f 	bl	8000548 <__aeabi_f2d>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	f107 001c 	add.w	r0, r7, #28
 8001d32:	461a      	mov	r2, r3
 8001d34:	4623      	mov	r3, r4
 8001d36:	4951      	ldr	r1, [pc, #324]	; (8001e7c <main+0x5b8>)
 8001d38:	f00a fad8 	bl	800c2ec <siprintf>
	  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001d3c:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <main+0x5bc>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <main+0x5c0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4950      	ldr	r1, [pc, #320]	; (8001e88 <main+0x5c4>)
 8001d46:	4851      	ldr	r0, [pc, #324]	; (8001e8c <main+0x5c8>)
 8001d48:	f00a fad0 	bl	800c2ec <siprintf>
	  update_file("brake.txt", str2, stamp, "", &fil2, &bw);
 8001d4c:	f107 011c 	add.w	r1, r7, #28
 8001d50:	4b4f      	ldr	r3, [pc, #316]	; (8001e90 <main+0x5cc>)
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	4b4f      	ldr	r3, [pc, #316]	; (8001e94 <main+0x5d0>)
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <main+0x5d4>)
 8001d5a:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <main+0x5c8>)
 8001d5c:	484f      	ldr	r0, [pc, #316]	; (8001e9c <main+0x5d8>)
 8001d5e:	f000 fc03 	bl	8002568 <update_file>
	  stamp[0]='\0';
 8001d62:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <main+0x5c8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]

	  sprintf(str2,"%f ", acc_pedal);
 8001d68:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <main+0x5dc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbeb 	bl	8000548 <__aeabi_f2d>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	f107 001c 	add.w	r0, r7, #28
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	493f      	ldr	r1, [pc, #252]	; (8001e7c <main+0x5b8>)
 8001d80:	f00a fab4 	bl	800c2ec <siprintf>
	  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001d84:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <main+0x5bc>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <main+0x5c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	493e      	ldr	r1, [pc, #248]	; (8001e88 <main+0x5c4>)
 8001d8e:	483f      	ldr	r0, [pc, #252]	; (8001e8c <main+0x5c8>)
 8001d90:	f00a faac 	bl	800c2ec <siprintf>
	  update_file("throttle.txt", str2, stamp, "", &fil2, &bw);
 8001d94:	f107 011c 	add.w	r1, r7, #28
 8001d98:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <main+0x5cc>)
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <main+0x5d0>)
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	4b3d      	ldr	r3, [pc, #244]	; (8001e98 <main+0x5d4>)
 8001da2:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <main+0x5c8>)
 8001da4:	483f      	ldr	r0, [pc, #252]	; (8001ea4 <main+0x5e0>)
 8001da6:	f000 fbdf 	bl	8002568 <update_file>
	  stamp[0]='\0';
 8001daa:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <main+0x5c8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]

	  IMU_acc_read(&hspi2, accel_data);
 8001db0:	493d      	ldr	r1, [pc, #244]	; (8001ea8 <main+0x5e4>)
 8001db2:	483e      	ldr	r0, [pc, #248]	; (8001eac <main+0x5e8>)
 8001db4:	f7ff fa38 	bl	8001228 <IMU_acc_read>
	  for(int i=0; i<=2; i++){
 8001db8:	2300      	movs	r3, #0
 8001dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dbc:	e022      	b.n	8001e04 <main+0x540>
		  sprintf(str2, "accel[%d] - %d ", i, accel_data[i]);
 8001dbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <main+0x5e4>)
 8001dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	f107 001c 	add.w	r0, r7, #28
 8001dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dcc:	4938      	ldr	r1, [pc, #224]	; (8001eb0 <main+0x5ec>)
 8001dce:	f00a fa8d 	bl	800c2ec <siprintf>
		  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <main+0x5bc>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <main+0x5c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	492b      	ldr	r1, [pc, #172]	; (8001e88 <main+0x5c4>)
 8001ddc:	482b      	ldr	r0, [pc, #172]	; (8001e8c <main+0x5c8>)
 8001dde:	f00a fa85 	bl	800c2ec <siprintf>
		  update_file("acc.txt", str2, stamp, "", &fil2, &bw);
 8001de2:	f107 011c 	add.w	r1, r7, #28
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <main+0x5cc>)
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <main+0x5d0>)
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <main+0x5d4>)
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <main+0x5c8>)
 8001df2:	4830      	ldr	r0, [pc, #192]	; (8001eb4 <main+0x5f0>)
 8001df4:	f000 fbb8 	bl	8002568 <update_file>
		  stamp[0]='\0';
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <main+0x5c8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<=2; i++){
 8001dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e00:	3301      	adds	r3, #1
 8001e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	ddd9      	ble.n	8001dbe <main+0x4fa>
	  }

	  IMU_gyro_read(&hspi2, gyro_data);
 8001e0a:	492b      	ldr	r1, [pc, #172]	; (8001eb8 <main+0x5f4>)
 8001e0c:	4827      	ldr	r0, [pc, #156]	; (8001eac <main+0x5e8>)
 8001e0e:	f7ff fa81 	bl	8001314 <IMU_gyro_read>
	  for(int i=0; i<=2; i++){
 8001e12:	2300      	movs	r3, #0
 8001e14:	647b      	str	r3, [r7, #68]	; 0x44
 8001e16:	e022      	b.n	8001e5e <main+0x59a>
		  sprintf(str2, "gyro[%d] - %d ", i, gyro_data[i]);
 8001e18:	4a27      	ldr	r2, [pc, #156]	; (8001eb8 <main+0x5f4>)
 8001e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	f107 001c 	add.w	r0, r7, #28
 8001e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e26:	4925      	ldr	r1, [pc, #148]	; (8001ebc <main+0x5f8>)
 8001e28:	f00a fa60 	bl	800c2ec <siprintf>
		  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <main+0x5bc>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <main+0x5c0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4914      	ldr	r1, [pc, #80]	; (8001e88 <main+0x5c4>)
 8001e36:	4815      	ldr	r0, [pc, #84]	; (8001e8c <main+0x5c8>)
 8001e38:	f00a fa58 	bl	800c2ec <siprintf>
		  update_file("gyro.txt", str2, stamp, "", &fil2, &bw);
 8001e3c:	f107 011c 	add.w	r1, r7, #28
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <main+0x5cc>)
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <main+0x5d0>)
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <main+0x5d4>)
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <main+0x5c8>)
 8001e4c:	481c      	ldr	r0, [pc, #112]	; (8001ec0 <main+0x5fc>)
 8001e4e:	f000 fb8b 	bl	8002568 <update_file>
		  stamp[0]='\0';
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <main+0x5c8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<=2; i++){
 8001e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	ddd9      	ble.n	8001e18 <main+0x554>
	  }

	  printf("tempo de ciclo = %lu\n", (HAL_GetTick() - time1));
 8001e64:	f000 ffee 	bl	8002e44 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4814      	ldr	r0, [pc, #80]	; (8001ec4 <main+0x600>)
 8001e72:	f00a f9bf 	bl	800c1f4 <iprintf>
  {
 8001e76:	e59f      	b.n	80019b8 <main+0xf4>
 8001e78:	20001804 	.word	0x20001804
 8001e7c:	0800e480 	.word	0x0800e480
 8001e80:	20000278 	.word	0x20000278
 8001e84:	20000274 	.word	0x20000274
 8001e88:	0800e484 	.word	0x0800e484
 8001e8c:	20002cc0 	.word	0x20002cc0
 8001e90:	20001bbc 	.word	0x20001bbc
 8001e94:	20003d58 	.word	0x20003d58
 8001e98:	0800e48c 	.word	0x0800e48c
 8001e9c:	0800e490 	.word	0x0800e490
 8001ea0:	20000738 	.word	0x20000738
 8001ea4:	0800e49c 	.word	0x0800e49c
 8001ea8:	20001ba0 	.word	0x20001ba0
 8001eac:	2000073c 	.word	0x2000073c
 8001eb0:	0800e4ac 	.word	0x0800e4ac
 8001eb4:	0800e4bc 	.word	0x0800e4bc
 8001eb8:	20001bb0 	.word	0x20001bb0
 8001ebc:	0800e4c4 	.word	0x0800e4c4
 8001ec0:	0800e4d4 	.word	0x0800e4d4
 8001ec4:	0800e4e0 	.word	0x0800e4e0

08001ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b094      	sub	sp, #80	; 0x50
 8001ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ece:	f107 0320 	add.w	r3, r7, #32
 8001ed2:	2230      	movs	r2, #48	; 0x30
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 fd27 	bl	800b92a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <SystemClock_Config+0xdc>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <SystemClock_Config+0xdc>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6413      	str	r3, [r2, #64]	; 0x40
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <SystemClock_Config+0xdc>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <SystemClock_Config+0xe0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <SystemClock_Config+0xe0>)
 8001f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <SystemClock_Config+0xe0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f38:	2319      	movs	r3, #25
 8001f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f42:	2302      	movs	r3, #2
 8001f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f46:	2307      	movs	r3, #7
 8001f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f4a:	f107 0320 	add.w	r3, r7, #32
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fa0a 	bl	8004368 <HAL_RCC_OscConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f5a:	f000 faee 	bl	800253a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f5e:	230f      	movs	r3, #15
 8001f60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f62:	2302      	movs	r3, #2
 8001f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	2105      	movs	r1, #5
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 fc63 	bl	8004848 <HAL_RCC_ClockConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f88:	f000 fad7 	bl	800253a <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_2);
 8001f8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001f94:	2000      	movs	r0, #0
 8001f96:	f002 fd3d 	bl	8004a14 <HAL_RCC_MCOConfig>
}
 8001f9a:	bf00      	nop
 8001f9c:	3750      	adds	r7, #80	; 0x50
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000

08001fac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001fbe:	4b6e      	ldr	r3, [pc, #440]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8001fc0:	4a6e      	ldr	r2, [pc, #440]	; (800217c <MX_ADC1_Init+0x1d0>)
 8001fc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fc4:	4b6c      	ldr	r3, [pc, #432]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8001fc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001fd2:	4b69      	ldr	r3, [pc, #420]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fd8:	4b67      	ldr	r3, [pc, #412]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fde:	4b66      	ldr	r3, [pc, #408]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fe6:	4b64      	ldr	r3, [pc, #400]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fec:	4b62      	ldr	r3, [pc, #392]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8001fee:	4a64      	ldr	r2, [pc, #400]	; (8002180 <MX_ADC1_Init+0x1d4>)
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ff2:	4b61      	ldr	r3, [pc, #388]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001ff8:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ffe:	4b5e      	ldr	r3, [pc, #376]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002006:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8002008:	2201      	movs	r2, #1
 800200a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800200c:	485a      	ldr	r0, [pc, #360]	; (8002178 <MX_ADC1_Init+0x1cc>)
 800200e:	f000 ff47 	bl	8002ea0 <HAL_ADC_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002018:	f000 fa8f 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800201c:	2308      	movs	r3, #8
 800201e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002020:	2301      	movs	r3, #1
 8002022:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	4619      	mov	r1, r3
 800202c:	4852      	ldr	r0, [pc, #328]	; (8002178 <MX_ADC1_Init+0x1cc>)
 800202e:	f001 f881 	bl	8003134 <HAL_ADC_ConfigChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002038:	f000 fa7f 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800203c:	230c      	movs	r3, #12
 800203e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002040:	2302      	movs	r3, #2
 8002042:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002044:	463b      	mov	r3, r7
 8002046:	4619      	mov	r1, r3
 8002048:	484b      	ldr	r0, [pc, #300]	; (8002178 <MX_ADC1_Init+0x1cc>)
 800204a:	f001 f873 	bl	8003134 <HAL_ADC_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002054:	f000 fa71 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002058:	230d      	movs	r3, #13
 800205a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800205c:	2303      	movs	r3, #3
 800205e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002060:	463b      	mov	r3, r7
 8002062:	4619      	mov	r1, r3
 8002064:	4844      	ldr	r0, [pc, #272]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8002066:	f001 f865 	bl	8003134 <HAL_ADC_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002070:	f000 fa63 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002074:	2302      	movs	r3, #2
 8002076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002078:	2304      	movs	r3, #4
 800207a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800207c:	463b      	mov	r3, r7
 800207e:	4619      	mov	r1, r3
 8002080:	483d      	ldr	r0, [pc, #244]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8002082:	f001 f857 	bl	8003134 <HAL_ADC_ConfigChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800208c:	f000 fa55 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002090:	230a      	movs	r3, #10
 8002092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002094:	2305      	movs	r3, #5
 8002096:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002098:	463b      	mov	r3, r7
 800209a:	4619      	mov	r1, r3
 800209c:	4836      	ldr	r0, [pc, #216]	; (8002178 <MX_ADC1_Init+0x1cc>)
 800209e:	f001 f849 	bl	8003134 <HAL_ADC_ConfigChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80020a8:	f000 fa47 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80020ac:	230b      	movs	r3, #11
 80020ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80020b0:	2306      	movs	r3, #6
 80020b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b4:	463b      	mov	r3, r7
 80020b6:	4619      	mov	r1, r3
 80020b8:	482f      	ldr	r0, [pc, #188]	; (8002178 <MX_ADC1_Init+0x1cc>)
 80020ba:	f001 f83b 	bl	8003134 <HAL_ADC_ConfigChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80020c4:	f000 fa39 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80020c8:	2309      	movs	r3, #9
 80020ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80020cc:	2307      	movs	r3, #7
 80020ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d0:	463b      	mov	r3, r7
 80020d2:	4619      	mov	r1, r3
 80020d4:	4828      	ldr	r0, [pc, #160]	; (8002178 <MX_ADC1_Init+0x1cc>)
 80020d6:	f001 f82d 	bl	8003134 <HAL_ADC_ConfigChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80020e0:	f000 fa2b 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80020e4:	2303      	movs	r3, #3
 80020e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80020e8:	2308      	movs	r3, #8
 80020ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ec:	463b      	mov	r3, r7
 80020ee:	4619      	mov	r1, r3
 80020f0:	4821      	ldr	r0, [pc, #132]	; (8002178 <MX_ADC1_Init+0x1cc>)
 80020f2:	f001 f81f 	bl	8003134 <HAL_ADC_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80020fc:	f000 fa1d 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002100:	2306      	movs	r3, #6
 8002102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002104:	2309      	movs	r3, #9
 8002106:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002108:	463b      	mov	r3, r7
 800210a:	4619      	mov	r1, r3
 800210c:	481a      	ldr	r0, [pc, #104]	; (8002178 <MX_ADC1_Init+0x1cc>)
 800210e:	f001 f811 	bl	8003134 <HAL_ADC_ConfigChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002118:	f000 fa0f 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800211c:	2307      	movs	r3, #7
 800211e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002120:	230a      	movs	r3, #10
 8002122:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002124:	463b      	mov	r3, r7
 8002126:	4619      	mov	r1, r3
 8002128:	4813      	ldr	r0, [pc, #76]	; (8002178 <MX_ADC1_Init+0x1cc>)
 800212a:	f001 f803 	bl	8003134 <HAL_ADC_ConfigChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002134:	f000 fa01 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002138:	230e      	movs	r3, #14
 800213a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800213c:	230b      	movs	r3, #11
 800213e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002140:	463b      	mov	r3, r7
 8002142:	4619      	mov	r1, r3
 8002144:	480c      	ldr	r0, [pc, #48]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8002146:	f000 fff5 	bl	8003134 <HAL_ADC_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002150:	f000 f9f3 	bl	800253a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002154:	230f      	movs	r3, #15
 8002156:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002158:	230c      	movs	r3, #12
 800215a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800215c:	463b      	mov	r3, r7
 800215e:	4619      	mov	r1, r3
 8002160:	4805      	ldr	r0, [pc, #20]	; (8002178 <MX_ADC1_Init+0x1cc>)
 8002162:	f000 ffe7 	bl	8003134 <HAL_ADC_ConfigChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 800216c:	f000 f9e5 	bl	800253a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20001820 	.word	0x20001820
 800217c:	40012000 	.word	0x40012000
 8002180:	0f000001 	.word	0x0f000001

08002184 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 800218a:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <MX_SDIO_SD_Init+0x3c>)
 800218c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 8002190:	2200      	movs	r2, #0
 8002192:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 800219c:	2200      	movs	r2, #0
 800219e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 1;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	20001bc0 	.word	0x20001bc0
 80021c0:	40012c00 	.word	0x40012c00

080021c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <MX_SPI2_Init+0x64>)
 80021ca:	4a18      	ldr	r2, [pc, #96]	; (800222c <MX_SPI2_Init+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MX_SPI2_Init+0x64>)
 80021d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <MX_SPI2_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <MX_SPI2_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_SPI2_Init+0x64>)
 80021e4:	2202      	movs	r2, #2
 80021e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <MX_SPI2_Init+0x64>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_SPI2_Init+0x64>)
 80021f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_SPI2_Init+0x64>)
 80021f8:	2228      	movs	r2, #40	; 0x28
 80021fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <MX_SPI2_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_SPI2_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <MX_SPI2_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_SPI2_Init+0x64>)
 8002210:	220a      	movs	r2, #10
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <MX_SPI2_Init+0x64>)
 8002216:	f004 f815 	bl	8006244 <HAL_SPI_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002220:	f000 f98b 	bl	800253a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000073c 	.word	0x2000073c
 800222c:	40003800 	.word	0x40003800

08002230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	; 0x30
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f009 fb73 	bl	800b92a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <MX_TIM2_Init+0xa4>)
 800224e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002252:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <MX_TIM2_Init+0xa4>)
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <MX_TIM2_Init+0xa4>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <MX_TIM2_Init+0xa4>)
 8002262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002266:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <MX_TIM2_Init+0xa4>)
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <MX_TIM2_Init+0xa4>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002274:	2303      	movs	r3, #3
 8002276:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800227c:	2301      	movs	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800228c:	2301      	movs	r3, #1
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002290:	2300      	movs	r3, #0
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	4619      	mov	r1, r3
 800229e:	480d      	ldr	r0, [pc, #52]	; (80022d4 <MX_TIM2_Init+0xa4>)
 80022a0:	f004 fd73 	bl	8006d8a <HAL_TIM_Encoder_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022aa:	f000 f946 	bl	800253a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	4619      	mov	r1, r3
 80022ba:	4806      	ldr	r0, [pc, #24]	; (80022d4 <MX_TIM2_Init+0xa4>)
 80022bc:	f005 f824 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80022c6:	f000 f938 	bl	800253a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	3730      	adds	r7, #48	; 0x30
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20002c7c 	.word	0x20002c7c

080022d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022de:	463b      	mov	r3, r7
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <MX_TIM6_Init+0x64>)
 80022e8:	4a15      	ldr	r2, [pc, #84]	; (8002340 <MX_TIM6_Init+0x68>)
 80022ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000;
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <MX_TIM6_Init+0x64>)
 80022ee:	f24a 4210 	movw	r2, #42000	; 0xa410
 80022f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_TIM6_Init+0x64>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <MX_TIM6_Init+0x64>)
 80022fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002300:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_TIM6_Init+0x64>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002308:	480c      	ldr	r0, [pc, #48]	; (800233c <MX_TIM6_Init+0x64>)
 800230a:	f004 fcef 	bl	8006cec <HAL_TIM_Base_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002314:	f000 f911 	bl	800253a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002318:	2320      	movs	r3, #32
 800231a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002320:	463b      	mov	r3, r7
 8002322:	4619      	mov	r1, r3
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_TIM6_Init+0x64>)
 8002326:	f004 ffef 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002330:	f000 f903 	bl	800253a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20001b60 	.word	0x20001b60
 8002340:	40001000 	.word	0x40001000

08002344 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <MX_DMA_Init+0x5c>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <MX_DMA_Init+0x5c>)
 8002354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <MX_DMA_Init+0x5c>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	2038      	movs	r0, #56	; 0x38
 800236c:	f001 fa5d 	bl	800382a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002370:	2038      	movs	r0, #56	; 0x38
 8002372:	f001 fa76 	bl	8003862 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	203b      	movs	r0, #59	; 0x3b
 800237c:	f001 fa55 	bl	800382a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002380:	203b      	movs	r0, #59	; 0x3b
 8002382:	f001 fa6e 	bl	8003862 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	2045      	movs	r0, #69	; 0x45
 800238c:	f001 fa4d 	bl	800382a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002390:	2045      	movs	r0, #69	; 0x45
 8002392:	f001 fa66 	bl	8003862 <HAL_NVIC_EnableIRQ>

}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800

080023a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <MX_GPIO_Init+0x134>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a45      	ldr	r2, [pc, #276]	; (80024d8 <MX_GPIO_Init+0x134>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <MX_GPIO_Init+0x134>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <MX_GPIO_Init+0x134>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a3e      	ldr	r2, [pc, #248]	; (80024d8 <MX_GPIO_Init+0x134>)
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <MX_GPIO_Init+0x134>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <MX_GPIO_Init+0x134>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <MX_GPIO_Init+0x134>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <MX_GPIO_Init+0x134>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <MX_GPIO_Init+0x134>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a30      	ldr	r2, [pc, #192]	; (80024d8 <MX_GPIO_Init+0x134>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <MX_GPIO_Init+0x134>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <MX_GPIO_Init+0x134>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <MX_GPIO_Init+0x134>)
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <MX_GPIO_Init+0x134>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	2110      	movs	r1, #16
 800244a:	4824      	ldr	r0, [pc, #144]	; (80024dc <MX_GPIO_Init+0x138>)
 800244c:	f001 ff72 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	f241 4104 	movw	r1, #5124	; 0x1404
 8002456:	4822      	ldr	r0, [pc, #136]	; (80024e0 <MX_GPIO_Init+0x13c>)
 8002458:	f001 ff6c 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Accel_CS_Pin */
  GPIO_InitStruct.Pin = Accel_CS_Pin;
 800245c:	2310      	movs	r3, #16
 800245e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	2301      	movs	r3, #1
 8002462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Accel_CS_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	481a      	ldr	r0, [pc, #104]	; (80024dc <MX_GPIO_Init+0x138>)
 8002474:	f001 fdac 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gyro_CS_Pin Magnet_CS_Pin SPI_CS_FOC_Pin */
  GPIO_InitStruct.Pin = Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin;
 8002478:	f241 4304 	movw	r3, #5124	; 0x1404
 800247c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247e:	2301      	movs	r3, #1
 8002480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	4813      	ldr	r0, [pc, #76]	; (80024e0 <MX_GPIO_Init+0x13c>)
 8002492:	f001 fd9d 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Det_Pin */
  GPIO_InitStruct.Pin = SD_Det_Pin;
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Det_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	480e      	ldr	r0, [pc, #56]	; (80024e4 <MX_GPIO_Init+0x140>)
 80024aa:	f001 fd91 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4804      	ldr	r0, [pc, #16]	; (80024dc <MX_GPIO_Init+0x138>)
 80024cc:	f001 fd80 	bl	8003fd0 <HAL_GPIO_Init>

}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020000 	.word	0x40020000
 80024e0:	40020400 	.word	0x40020400
 80024e4:	40020800 	.word	0x40020800

080024e8 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f960 	bl	80017b8 <ITM_SendChar>
	return ch;
 80024f8:	687b      	ldr	r3, [r7, #4]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_write>:

int _write(int file, char *ptr, int len){
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	e009      	b.n	8002528 <_write+0x26>
		__io_putchar(*ptr++);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	60ba      	str	r2, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ffe3 	bl	80024e8 <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3301      	adds	r3, #1
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	dbf1      	blt.n	8002514 <_write+0x12>
	}
	return len;
 8002530:	687b      	ldr	r3, [r7, #4]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <mount_card>:
	}
}

/* Mount SD Card */
FRESULT mount_card (FATFS *fs)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	//printf("mount\n");
	return f_mount(fs, "", 0);
 8002550:	2200      	movs	r2, #0
 8002552:	4904      	ldr	r1, [pc, #16]	; (8002564 <mount_card+0x1c>)
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f008 f9ab 	bl	800a8b0 <f_mount>
 800255a:	4603      	mov	r3, r0
      //if fresult <>
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	0800e4f8 	.word	0x0800e4f8

08002568 <update_file>:
	return fresult;
}

/*********************UPDATING an existing file ***************************/
FRESULT update_file(char *filename, char *data, char *timestamp, char *msec_stamp, FIL *fil, UINT *bw)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
	FRESULT fresult;

	strcat(data,timestamp);
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	68b8      	ldr	r0, [r7, #8]
 800257a:	f009 fed7 	bl	800c32c <strcat>
	strcat(data,msec_stamp);
 800257e:	6839      	ldr	r1, [r7, #0]
 8002580:	68b8      	ldr	r0, [r7, #8]
 8002582:	f009 fed3 	bl	800c32c <strcat>
	strcat(data,"\n");
 8002586:	68b8      	ldr	r0, [r7, #8]
 8002588:	f7fd fe22 	bl	80001d0 <strlen>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4413      	add	r3, r2
 8002594:	4910      	ldr	r1, [pc, #64]	; (80025d8 <update_file+0x70>)
 8002596:	461a      	mov	r2, r3
 8002598:	460b      	mov	r3, r1
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	8013      	strh	r3, [r2, #0]

	//printf("lib\n");
	/* Open the file with write access */
	fresult = f_open(fil, filename, FA_OPEN_APPEND | FA_WRITE);// FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 800259e:	2232      	movs	r2, #50	; 0x32
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	6a38      	ldr	r0, [r7, #32]
 80025a4:	f008 f9ca 	bl	800a93c <f_open>
 80025a8:	4603      	mov	r3, r0
 80025aa:	75fb      	strb	r3, [r7, #23]
	if (fresult!=FR_OK){
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <update_file+0x50>
		printf("update_file - f_open fodeu\n " );
 80025b2:	480a      	ldr	r0, [pc, #40]	; (80025dc <update_file+0x74>)
 80025b4:	f009 fe1e 	bl	800c1f4 <iprintf>

	/* Move to offset to the end of the file */
	//fresult = f_lseek(fil, fil->fptr);

	/* write the string to the file */
	fresult = f_printf(fil, data); //pode precisar de um "\n"
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6a38      	ldr	r0, [r7, #32]
 80025bc:	f008 fe3e 	bl	800b23c <f_printf>
 80025c0:	4603      	mov	r3, r0
 80025c2:	75fb      	strb	r3, [r7, #23]
	/*if (fresult!=FR_OK){
		printf("update_file - f_printf fodeu\n " );
	}*/
	fresult = f_close (fil);
 80025c4:	6a38      	ldr	r0, [r7, #32]
 80025c6:	f008 fd97 	bl	800b0f8 <f_close>
 80025ca:	4603      	mov	r3, r0
 80025cc:	75fb      	strb	r3, [r7, #23]
	/*if(fresult != FR_OK){
		printf("update_file - f_close fodeu\n " );
	}*/
	return fresult;
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	0800e508 	.word	0x0800e508
 80025dc:	0800e50c 	.word	0x0800e50c

080025e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_MspInit+0x4c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	4a0f      	ldr	r2, [pc, #60]	; (800262c <HAL_MspInit+0x4c>)
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_MspInit+0x4c>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_MspInit+0x4c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <HAL_MspInit+0x4c>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_MspInit+0x4c>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800

08002630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08c      	sub	sp, #48	; 0x30
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 031c 	add.w	r3, r7, #28
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a49      	ldr	r2, [pc, #292]	; (8002774 <HAL_ADC_MspInit+0x144>)
 800264e:	4293      	cmp	r3, r2
 8002650:	f040 808c 	bne.w	800276c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002654:	2300      	movs	r3, #0
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_ADC_MspInit+0x148>)
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	4a46      	ldr	r2, [pc, #280]	; (8002778 <HAL_ADC_MspInit+0x148>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	6453      	str	r3, [r2, #68]	; 0x44
 8002664:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_ADC_MspInit+0x148>)
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_ADC_MspInit+0x148>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	4a3f      	ldr	r2, [pc, #252]	; (8002778 <HAL_ADC_MspInit+0x148>)
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	6313      	str	r3, [r2, #48]	; 0x30
 8002680:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_ADC_MspInit+0x148>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_ADC_MspInit+0x148>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	4a38      	ldr	r2, [pc, #224]	; (8002778 <HAL_ADC_MspInit+0x148>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6313      	str	r3, [r2, #48]	; 0x30
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_ADC_MspInit+0x148>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	4b32      	ldr	r3, [pc, #200]	; (8002778 <HAL_ADC_MspInit+0x148>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	4a31      	ldr	r2, [pc, #196]	; (8002778 <HAL_ADC_MspInit+0x148>)
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	6313      	str	r3, [r2, #48]	; 0x30
 80026b8:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_ADC_MspInit+0x148>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = curr_u_Pin|curr_v_Pin|brk_pedal_Pin|acc_pedal_Pin 
 80026c4:	233f      	movs	r3, #63	; 0x3f
 80026c6:	61fb      	str	r3, [r7, #28]
                          |motor_voltage_v_Pin|motor_voltage_w_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c8:	2303      	movs	r3, #3
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d0:	f107 031c 	add.w	r3, r7, #28
 80026d4:	4619      	mov	r1, r3
 80026d6:	4829      	ldr	r0, [pc, #164]	; (800277c <HAL_ADC_MspInit+0x14c>)
 80026d8:	f001 fc7a 	bl	8003fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = curr_w_Pin|DC_Bus_Voltage_Pin|DC_Current_Pin|motor_voltage_u_Pin;
 80026dc:	23cc      	movs	r3, #204	; 0xcc
 80026de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e0:	2303      	movs	r3, #3
 80026e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 031c 	add.w	r3, r7, #28
 80026ec:	4619      	mov	r1, r3
 80026ee:	4824      	ldr	r0, [pc, #144]	; (8002780 <HAL_ADC_MspInit+0x150>)
 80026f0:	f001 fc6e 	bl	8003fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026f4:	2303      	movs	r3, #3
 80026f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026f8:	2303      	movs	r3, #3
 80026fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	4619      	mov	r1, r3
 8002706:	481f      	ldr	r0, [pc, #124]	; (8002784 <HAL_ADC_MspInit+0x154>)
 8002708:	f001 fc62 	bl	8003fd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800270c:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_ADC_MspInit+0x158>)
 800270e:	4a1f      	ldr	r2, [pc, #124]	; (800278c <HAL_ADC_MspInit+0x15c>)
 8002710:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_ADC_MspInit+0x158>)
 8002714:	2200      	movs	r2, #0
 8002716:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_ADC_MspInit+0x158>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800271e:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_ADC_MspInit+0x158>)
 8002720:	2200      	movs	r2, #0
 8002722:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002724:	4b18      	ldr	r3, [pc, #96]	; (8002788 <HAL_ADC_MspInit+0x158>)
 8002726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800272a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <HAL_ADC_MspInit+0x158>)
 800272e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002732:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_ADC_MspInit+0x158>)
 8002736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800273a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_ADC_MspInit+0x158>)
 800273e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002742:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002744:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_ADC_MspInit+0x158>)
 8002746:	2200      	movs	r2, #0
 8002748:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_ADC_MspInit+0x158>)
 800274c:	2200      	movs	r2, #0
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002750:	480d      	ldr	r0, [pc, #52]	; (8002788 <HAL_ADC_MspInit+0x158>)
 8002752:	f001 f8a1 	bl	8003898 <HAL_DMA_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800275c:	f7ff feed 	bl	800253a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <HAL_ADC_MspInit+0x158>)
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
 8002766:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_ADC_MspInit+0x158>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800276c:	bf00      	nop
 800276e:	3730      	adds	r7, #48	; 0x30
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40012000 	.word	0x40012000
 8002778:	40023800 	.word	0x40023800
 800277c:	40020800 	.word	0x40020800
 8002780:	40020000 	.word	0x40020000
 8002784:	40020400 	.word	0x40020400
 8002788:	20001a70 	.word	0x20001a70
 800278c:	40026410 	.word	0x40026410

08002790 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a70      	ldr	r2, [pc, #448]	; (8002970 <HAL_SD_MspInit+0x1e0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	f040 80da 	bne.w	8002968 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	4b6e      	ldr	r3, [pc, #440]	; (8002974 <HAL_SD_MspInit+0x1e4>)
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	4a6d      	ldr	r2, [pc, #436]	; (8002974 <HAL_SD_MspInit+0x1e4>)
 80027be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027c2:	6453      	str	r3, [r2, #68]	; 0x44
 80027c4:	4b6b      	ldr	r3, [pc, #428]	; (8002974 <HAL_SD_MspInit+0x1e4>)
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	4b67      	ldr	r3, [pc, #412]	; (8002974 <HAL_SD_MspInit+0x1e4>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	4a66      	ldr	r2, [pc, #408]	; (8002974 <HAL_SD_MspInit+0x1e4>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6313      	str	r3, [r2, #48]	; 0x30
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <HAL_SD_MspInit+0x1e4>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	4b60      	ldr	r3, [pc, #384]	; (8002974 <HAL_SD_MspInit+0x1e4>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4a5f      	ldr	r2, [pc, #380]	; (8002974 <HAL_SD_MspInit+0x1e4>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	6313      	str	r3, [r2, #48]	; 0x30
 80027fc:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <HAL_SD_MspInit+0x1e4>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002812:	2301      	movs	r3, #1
 8002814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800281a:	230c      	movs	r3, #12
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	4619      	mov	r1, r3
 8002824:	4854      	ldr	r0, [pc, #336]	; (8002978 <HAL_SD_MspInit+0x1e8>)
 8002826:	f001 fbd3 	bl	8003fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800282a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800282e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002838:	2303      	movs	r3, #3
 800283a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800283c:	230c      	movs	r3, #12
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	484c      	ldr	r0, [pc, #304]	; (8002978 <HAL_SD_MspInit+0x1e8>)
 8002848:	f001 fbc2 	bl	8003fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800284c:	2304      	movs	r3, #4
 800284e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002854:	2301      	movs	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800285c:	230c      	movs	r3, #12
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	4619      	mov	r1, r3
 8002866:	4845      	ldr	r0, [pc, #276]	; (800297c <HAL_SD_MspInit+0x1ec>)
 8002868:	f001 fbb2 	bl	8003fd0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800286c:	4b44      	ldr	r3, [pc, #272]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 800286e:	4a45      	ldr	r2, [pc, #276]	; (8002984 <HAL_SD_MspInit+0x1f4>)
 8002870:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 8002874:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002878:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800287a:	4b41      	ldr	r3, [pc, #260]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002886:	4b3e      	ldr	r3, [pc, #248]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 8002888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800288e:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 8002890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002894:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002896:	4b3a      	ldr	r3, [pc, #232]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 8002898:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800289c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800289e:	4b38      	ldr	r3, [pc, #224]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 80028a0:	2220      	movs	r2, #32
 80028a2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028a4:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028aa:	4b35      	ldr	r3, [pc, #212]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 80028ac:	2204      	movs	r2, #4
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028b0:	4b33      	ldr	r3, [pc, #204]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 80028b2:	2203      	movs	r2, #3
 80028b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80028b6:	4b32      	ldr	r3, [pc, #200]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 80028b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 80028c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80028c6:	482e      	ldr	r0, [pc, #184]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 80028c8:	f000 ffe6 	bl	8003898 <HAL_DMA_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80028d2:	f7ff fe32 	bl	800253a <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a29      	ldr	r2, [pc, #164]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
 80028dc:	4a28      	ldr	r2, [pc, #160]	; (8002980 <HAL_SD_MspInit+0x1f0>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 80028e4:	4a29      	ldr	r2, [pc, #164]	; (800298c <HAL_SD_MspInit+0x1fc>)
 80028e6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 80028ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028ee:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 80028f2:	2240      	movs	r2, #64	; 0x40
 80028f4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028fc:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 80028fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002902:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002904:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 8002906:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800290a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 800290e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002912:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 8002916:	2220      	movs	r2, #32
 8002918:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800291a:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 8002922:	2204      	movs	r2, #4
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 8002928:	2203      	movs	r2, #3
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800292c:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 800292e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 8002936:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800293c:	4812      	ldr	r0, [pc, #72]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 800293e:	f000 ffab 	bl	8003898 <HAL_DMA_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002948:	f7ff fdf7 	bl	800253a <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 8002950:	63da      	str	r2, [r3, #60]	; 0x3c
 8002952:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <HAL_SD_MspInit+0x1f8>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	2031      	movs	r0, #49	; 0x31
 800295e:	f000 ff64 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002962:	2031      	movs	r0, #49	; 0x31
 8002964:	f000 ff7d 	bl	8003862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002968:	bf00      	nop
 800296a:	3728      	adds	r7, #40	; 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40023800 	.word	0x40023800
 8002978:	40020800 	.word	0x40020800
 800297c:	40020c00 	.word	0x40020c00
 8002980:	200006d8 	.word	0x200006d8
 8002984:	40026458 	.word	0x40026458
 8002988:	20001b00 	.word	0x20001b00
 800298c:	400264a0 	.word	0x400264a0

08002990 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <HAL_SPI_MspInit+0x84>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d12c      	bne.n	8002a0c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HAL_SPI_MspInit+0x88>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <HAL_SPI_MspInit+0x88>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_SPI_MspInit+0x88>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_SPI_MspInit+0x88>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <HAL_SPI_MspInit+0x88>)
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <HAL_SPI_MspInit+0x88>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80029ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80029ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029fc:	2305      	movs	r3, #5
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	4805      	ldr	r0, [pc, #20]	; (8002a1c <HAL_SPI_MspInit+0x8c>)
 8002a08:	f001 fae2 	bl	8003fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a0c:	bf00      	nop
 8002a0e:	3728      	adds	r7, #40	; 0x28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40003800 	.word	0x40003800
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020400 	.word	0x40020400

08002a20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a40:	d12b      	bne.n	8002a9a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	f107 0314 	add.w	r3, r7, #20
 8002a92:	4619      	mov	r1, r3
 8002a94:	4804      	ldr	r0, [pc, #16]	; (8002aa8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a96:	f001 fa9b 	bl	8003fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a9a:	bf00      	nop
 8002a9c:	3728      	adds	r7, #40	; 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020000 	.word	0x40020000

08002aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <HAL_TIM_Base_MspInit+0x48>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d115      	bne.n	8002aea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_TIM_Base_MspInit+0x4c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <HAL_TIM_Base_MspInit+0x4c>)
 8002ac8:	f043 0310 	orr.w	r3, r3, #16
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_TIM_Base_MspInit+0x4c>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2036      	movs	r0, #54	; 0x36
 8002ae0:	f000 fea3 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ae4:	2036      	movs	r0, #54	; 0x36
 8002ae6:	f000 febc 	bl	8003862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40001000 	.word	0x40001000
 8002af8:	40023800 	.word	0x40023800

08002afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0e:	e7fe      	b.n	8002b0e <HardFault_Handler+0x4>

08002b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <MemManage_Handler+0x4>

08002b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <BusFault_Handler+0x4>

08002b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <UsageFault_Handler+0x4>

08002b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


	SystemTick += TICK_RATE; // 1 ms tick count
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <SysTick_Handler+0x40>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3301      	adds	r3, #1
 8002b56:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <SysTick_Handler+0x40>)
 8002b58:	6013      	str	r3, [r2, #0]

			  __unix_ms += TICK_RATE;
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <SysTick_Handler+0x44>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <SysTick_Handler+0x44>)
 8002b62:	6013      	str	r3, [r2, #0]

			  if (__unix_ms >= 1000)
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <SysTick_Handler+0x44>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b6c:	d30a      	bcc.n	8002b84 <SysTick_Handler+0x38>
			  {
			    __unix_ms -= 1000;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <SysTick_Handler+0x44>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002b76:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <SysTick_Handler+0x44>)
 8002b78:	6013      	str	r3, [r2, #0]
			    __unix_sec++;
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <SysTick_Handler+0x48>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <SysTick_Handler+0x48>)
 8002b82:	6013      	str	r3, [r2, #0]
			  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b84:	f000 f94a 	bl	8002e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000270 	.word	0x20000270
 8002b90:	20000274 	.word	0x20000274
 8002b94:	20000278 	.word	0x20000278

08002b98 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <SDIO_IRQHandler+0x10>)
 8002b9e:	f002 fabd 	bl	800511c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20001bc0 	.word	0x20001bc0

08002bac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <TIM6_DAC_IRQHandler+0x10>)
 8002bb2:	f004 f9b3 	bl	8006f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20001b60 	.word	0x20001b60

08002bc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <DMA2_Stream0_IRQHandler+0x10>)
 8002bc6:	f000 ff8f 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20001a70 	.word	0x20001a70

08002bd4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <DMA2_Stream3_IRQHandler+0x10>)
 8002bda:	f000 ff85 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200006d8 	.word	0x200006d8

08002be8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <DMA2_Stream6_IRQHandler+0x10>)
 8002bee:	f000 ff7b 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20001b00 	.word	0x20001b00

08002bfc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e00a      	b.n	8002c24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c0e:	f3af 8000 	nop.w
 8002c12:	4601      	mov	r1, r0
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	60ba      	str	r2, [r7, #8]
 8002c1a:	b2ca      	uxtb	r2, r1
 8002c1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	3301      	adds	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	dbf0      	blt.n	8002c0e <_read+0x12>
	}

return len;
 8002c2c:	687b      	ldr	r3, [r7, #4]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c5e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <_isatty>:

int _isatty(int file)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
	return 1;
 8002c76:	2301      	movs	r3, #1
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <_sbrk+0x50>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <_sbrk+0x16>
		heap_end = &end;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <_sbrk+0x50>)
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <_sbrk+0x54>)
 8002cb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <_sbrk+0x50>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <_sbrk+0x50>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	466a      	mov	r2, sp
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d907      	bls.n	8002cda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002cca:	f008 fdf9 	bl	800b8c0 <__errno>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	230c      	movs	r3, #12
 8002cd2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd8:	e006      	b.n	8002ce8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <_sbrk+0x50>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4a03      	ldr	r2, [pc, #12]	; (8002cf0 <_sbrk+0x50>)
 8002ce4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2000028c 	.word	0x2000028c
 8002cf4:	20006e00 	.word	0x20006e00

08002cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <SystemInit+0x28>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <SystemInit+0x28>)
 8002d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <SystemInit+0x28>)
 8002d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d12:	609a      	str	r2, [r3, #8]
#endif
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d2a:	e003      	b.n	8002d34 <LoopCopyDataInit>

08002d2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d32:	3104      	adds	r1, #4

08002d34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d34:	480b      	ldr	r0, [pc, #44]	; (8002d64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d3c:	d3f6      	bcc.n	8002d2c <CopyDataInit>
  ldr  r2, =_sbss
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d40:	e002      	b.n	8002d48 <LoopFillZerobss>

08002d42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d44:	f842 3b04 	str.w	r3, [r2], #4

08002d48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d4c:	d3f9      	bcc.n	8002d42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d4e:	f7ff ffd3 	bl	8002cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d52:	f008 fdbb 	bl	800b8cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d56:	f7fe fdb5 	bl	80018c4 <main>
  bx  lr    
 8002d5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d60:	0800ecb0 	.word	0x0800ecb0
  ldr  r0, =_sdata
 8002d64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d68:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 8002d6c:	20000254 	.word	0x20000254
  ldr  r3, = _ebss
 8002d70:	20006e00 	.word	0x20006e00

08002d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d74:	e7fe      	b.n	8002d74 <ADC_IRQHandler>
	...

08002d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_Init+0x40>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <HAL_Init+0x40>)
 8002d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_Init+0x40>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <HAL_Init+0x40>)
 8002d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_Init+0x40>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <HAL_Init+0x40>)
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da0:	2003      	movs	r0, #3
 8002da2:	f000 fd37 	bl	8003814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f000 f808 	bl	8002dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dac:	f7ff fc18 	bl	80025e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023c00 	.word	0x40023c00

08002dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_InitTick+0x54>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_InitTick+0x58>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fd4f 	bl	800387e <HAL_SYSTICK_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00e      	b.n	8002e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b0f      	cmp	r3, #15
 8002dee:	d80a      	bhi.n	8002e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df0:	2200      	movs	r2, #0
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295
 8002df8:	f000 fd17 	bl	800382a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dfc:	4a06      	ldr	r2, [pc, #24]	; (8002e18 <HAL_InitTick+0x5c>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e000      	b.n	8002e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000078 	.word	0x20000078
 8002e14:	20000080 	.word	0x20000080
 8002e18:	2000007c 	.word	0x2000007c

08002e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_IncTick+0x20>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_IncTick+0x24>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <HAL_IncTick+0x24>)
 8002e2e:	6013      	str	r3, [r2, #0]
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000080 	.word	0x20000080
 8002e40:	20004d88 	.word	0x20004d88

08002e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return uwTick;
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <HAL_GetTick+0x14>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20004d88 	.word	0x20004d88

08002e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e64:	f7ff ffee 	bl	8002e44 <HAL_GetTick>
 8002e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d005      	beq.n	8002e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_Delay+0x40>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e82:	bf00      	nop
 8002e84:	f7ff ffde 	bl	8002e44 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d8f7      	bhi.n	8002e84 <HAL_Delay+0x28>
  {
  }
}
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000080 	.word	0x20000080

08002ea0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e033      	b.n	8002f1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fbb6 	bl	8002630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d118      	bne.n	8002f10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ee6:	f023 0302 	bic.w	r3, r3, #2
 8002eea:	f043 0202 	orr.w	r2, r3, #2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa40 	bl	8003378 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f0e:	e001      	b.n	8002f14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_Start_DMA+0x1e>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e0cc      	b.n	80030e0 <HAL_ADC_Start_DMA+0x1b8>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d018      	beq.n	8002f8e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f6c:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <HAL_ADC_Start_DMA+0x1c0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5e      	ldr	r2, [pc, #376]	; (80030ec <HAL_ADC_Start_DMA+0x1c4>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0c9a      	lsrs	r2, r3, #18
 8002f78:	4613      	mov	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4413      	add	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f80:	e002      	b.n	8002f88 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f9      	bne.n	8002f82 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	f040 80a0 	bne.w	80030de <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fc8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fdc:	d106      	bne.n	8002fec <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f023 0206 	bic.w	r2, r3, #6
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
 8002fea:	e002      	b.n	8002ff2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	; (80030f0 <HAL_ADC_Start_DMA+0x1c8>)
 8002ffc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	4a3c      	ldr	r2, [pc, #240]	; (80030f4 <HAL_ADC_Start_DMA+0x1cc>)
 8003004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	4a3b      	ldr	r2, [pc, #236]	; (80030f8 <HAL_ADC_Start_DMA+0x1d0>)
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	4a3a      	ldr	r2, [pc, #232]	; (80030fc <HAL_ADC_Start_DMA+0x1d4>)
 8003014:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800301e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800302e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800303e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	334c      	adds	r3, #76	; 0x4c
 800304a:	4619      	mov	r1, r3
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f000 fcd0 	bl	80039f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2b00      	cmp	r3, #0
 800305e:	d12a      	bne.n	80030b6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a26      	ldr	r2, [pc, #152]	; (8003100 <HAL_ADC_Start_DMA+0x1d8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d015      	beq.n	8003096 <HAL_ADC_Start_DMA+0x16e>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a25      	ldr	r2, [pc, #148]	; (8003104 <HAL_ADC_Start_DMA+0x1dc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d105      	bne.n	8003080 <HAL_ADC_Start_DMA+0x158>
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_ADC_Start_DMA+0x1c8>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a20      	ldr	r2, [pc, #128]	; (8003108 <HAL_ADC_Start_DMA+0x1e0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d129      	bne.n	80030de <HAL_ADC_Start_DMA+0x1b6>
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_ADC_Start_DMA+0x1c8>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	2b0f      	cmp	r3, #15
 8003094:	d823      	bhi.n	80030de <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d11c      	bne.n	80030de <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	e013      	b.n	80030de <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a11      	ldr	r2, [pc, #68]	; (8003100 <HAL_ADC_Start_DMA+0x1d8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d10e      	bne.n	80030de <HAL_ADC_Start_DMA+0x1b6>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d107      	bne.n	80030de <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030dc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000078 	.word	0x20000078
 80030ec:	431bde83 	.word	0x431bde83
 80030f0:	40012300 	.word	0x40012300
 80030f4:	08003571 	.word	0x08003571
 80030f8:	0800362b 	.word	0x0800362b
 80030fc:	08003647 	.word	0x08003647
 8003100:	40012000 	.word	0x40012000
 8003104:	40012100 	.word	0x40012100
 8003108:	40012200 	.word	0x40012200

0800310c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x1c>
 800314c:	2302      	movs	r3, #2
 800314e:	e105      	b.n	800335c <HAL_ADC_ConfigChannel+0x228>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b09      	cmp	r3, #9
 800315e:	d925      	bls.n	80031ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68d9      	ldr	r1, [r3, #12]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	b29b      	uxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	3b1e      	subs	r3, #30
 8003176:	2207      	movs	r2, #7
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43da      	mvns	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	400a      	ands	r2, r1
 8003184:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68d9      	ldr	r1, [r3, #12]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	4618      	mov	r0, r3
 8003198:	4603      	mov	r3, r0
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4403      	add	r3, r0
 800319e:	3b1e      	subs	r3, #30
 80031a0:	409a      	lsls	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	e022      	b.n	80031f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6919      	ldr	r1, [r3, #16]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	2207      	movs	r2, #7
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	400a      	ands	r2, r1
 80031ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6919      	ldr	r1, [r3, #16]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	4618      	mov	r0, r3
 80031e2:	4603      	mov	r3, r0
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4403      	add	r3, r0
 80031e8:	409a      	lsls	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d824      	bhi.n	8003244 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	3b05      	subs	r3, #5
 800320c:	221f      	movs	r2, #31
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	400a      	ands	r2, r1
 800321a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	b29b      	uxth	r3, r3
 8003228:	4618      	mov	r0, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	3b05      	subs	r3, #5
 8003236:	fa00 f203 	lsl.w	r2, r0, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	635a      	str	r2, [r3, #52]	; 0x34
 8003242:	e04c      	b.n	80032de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b0c      	cmp	r3, #12
 800324a:	d824      	bhi.n	8003296 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	3b23      	subs	r3, #35	; 0x23
 800325e:	221f      	movs	r2, #31
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43da      	mvns	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	400a      	ands	r2, r1
 800326c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	4618      	mov	r0, r3
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	3b23      	subs	r3, #35	; 0x23
 8003288:	fa00 f203 	lsl.w	r2, r0, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
 8003294:	e023      	b.n	80032de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	3b41      	subs	r3, #65	; 0x41
 80032a8:	221f      	movs	r2, #31
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43da      	mvns	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	400a      	ands	r2, r1
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	3b41      	subs	r3, #65	; 0x41
 80032d2:	fa00 f203 	lsl.w	r2, r0, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032de:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_ADC_ConfigChannel+0x234>)
 80032e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <HAL_ADC_ConfigChannel+0x238>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d109      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x1cc>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b12      	cmp	r3, #18
 80032f2:	d105      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a19      	ldr	r2, [pc, #100]	; (800336c <HAL_ADC_ConfigChannel+0x238>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d123      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x21e>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b10      	cmp	r3, #16
 8003310:	d003      	beq.n	800331a <HAL_ADC_ConfigChannel+0x1e6>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b11      	cmp	r3, #17
 8003318:	d11b      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b10      	cmp	r3, #16
 800332c:	d111      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <HAL_ADC_ConfigChannel+0x23c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a10      	ldr	r2, [pc, #64]	; (8003374 <HAL_ADC_ConfigChannel+0x240>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	0c9a      	lsrs	r2, r3, #18
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003344:	e002      	b.n	800334c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3b01      	subs	r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f9      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40012300 	.word	0x40012300
 800336c:	40012000 	.word	0x40012000
 8003370:	20000078 	.word	0x20000078
 8003374:	431bde83 	.word	0x431bde83

08003378 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003380:	4b79      	ldr	r3, [pc, #484]	; (8003568 <ADC_Init+0x1f0>)
 8003382:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	021a      	lsls	r2, r3, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6899      	ldr	r1, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	4a58      	ldr	r2, [pc, #352]	; (800356c <ADC_Init+0x1f4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800341e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6899      	ldr	r1, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	e00f      	b.n	8003476 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003474:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0202 	bic.w	r2, r2, #2
 8003484:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6899      	ldr	r1, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7e1b      	ldrb	r3, [r3, #24]
 8003490:	005a      	lsls	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01b      	beq.n	80034dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	3b01      	subs	r3, #1
 80034d0:	035a      	lsls	r2, r3, #13
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	e007      	b.n	80034ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	3b01      	subs	r3, #1
 8003508:	051a      	lsls	r2, r3, #20
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003520:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6899      	ldr	r1, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800352e:	025a      	lsls	r2, r3, #9
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003546:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6899      	ldr	r1, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	029a      	lsls	r2, r3, #10
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40012300 	.word	0x40012300
 800356c:	0f000001 	.word	0x0f000001

08003570 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003586:	2b00      	cmp	r3, #0
 8003588:	d13c      	bne.n	8003604 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d12b      	bne.n	80035fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d127      	bne.n	80035fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d006      	beq.n	80035c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d119      	bne.n	80035fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0220 	bic.w	r2, r2, #32
 80035d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7fe f903 	bl	8001808 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003602:	e00e      	b.n	8003622 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff fd85 	bl	8003120 <HAL_ADC_ErrorCallback>
}
 8003616:	e004      	b.n	8003622 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
}
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff fd67 	bl	800310c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2240      	movs	r2, #64	; 0x40
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f043 0204 	orr.w	r2, r3, #4
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7ff fd5a 	bl	8003120 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <__NVIC_SetPriorityGrouping>:
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003690:	4013      	ands	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800369c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a6:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	60d3      	str	r3, [r2, #12]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_GetPriorityGrouping>:
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <__NVIC_GetPriorityGrouping+0x18>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	f003 0307 	and.w	r3, r3, #7
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <__NVIC_EnableIRQ>:
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db0b      	blt.n	8003702 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	f003 021f 	and.w	r2, r3, #31
 80036f0:	4907      	ldr	r1, [pc, #28]	; (8003710 <__NVIC_EnableIRQ+0x38>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2001      	movs	r0, #1
 80036fa:	fa00 f202 	lsl.w	r2, r0, r2
 80036fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	e000e100 	.word	0xe000e100

08003714 <__NVIC_SetPriority>:
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	6039      	str	r1, [r7, #0]
 800371e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	2b00      	cmp	r3, #0
 8003726:	db0a      	blt.n	800373e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	490c      	ldr	r1, [pc, #48]	; (8003760 <__NVIC_SetPriority+0x4c>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	440b      	add	r3, r1
 8003738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800373c:	e00a      	b.n	8003754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4908      	ldr	r1, [pc, #32]	; (8003764 <__NVIC_SetPriority+0x50>)
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	3b04      	subs	r3, #4
 800374c:	0112      	lsls	r2, r2, #4
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	440b      	add	r3, r1
 8003752:	761a      	strb	r2, [r3, #24]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000e100 	.word	0xe000e100
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <NVIC_EncodePriority>:
{
 8003768:	b480      	push	{r7}
 800376a:	b089      	sub	sp, #36	; 0x24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f1c3 0307 	rsb	r3, r3, #7
 8003782:	2b04      	cmp	r3, #4
 8003784:	bf28      	it	cs
 8003786:	2304      	movcs	r3, #4
 8003788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3304      	adds	r3, #4
 800378e:	2b06      	cmp	r3, #6
 8003790:	d902      	bls.n	8003798 <NVIC_EncodePriority+0x30>
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3b03      	subs	r3, #3
 8003796:	e000      	b.n	800379a <NVIC_EncodePriority+0x32>
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	f04f 32ff 	mov.w	r2, #4294967295
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43da      	mvns	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	401a      	ands	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b0:	f04f 31ff 	mov.w	r1, #4294967295
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	43d9      	mvns	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c0:	4313      	orrs	r3, r2
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3724      	adds	r7, #36	; 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <SysTick_Config>:
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e0:	d301      	bcc.n	80037e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00f      	b.n	8003806 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e6:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <SysTick_Config+0x40>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ee:	210f      	movs	r1, #15
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	f7ff ff8e 	bl	8003714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <SysTick_Config+0x40>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <SysTick_Config+0x40>)
 8003800:	2207      	movs	r2, #7
 8003802:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	e000e010 	.word	0xe000e010

08003814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff29 	bl	8003674 <__NVIC_SetPriorityGrouping>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800383c:	f7ff ff3e 	bl	80036bc <__NVIC_GetPriorityGrouping>
 8003840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	6978      	ldr	r0, [r7, #20]
 8003848:	f7ff ff8e 	bl	8003768 <NVIC_EncodePriority>
 800384c:	4602      	mov	r2, r0
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff5d 	bl	8003714 <__NVIC_SetPriority>
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff31 	bl	80036d8 <__NVIC_EnableIRQ>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffa2 	bl	80037d0 <SysTick_Config>
 800388c:	4603      	mov	r3, r0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7ff face 	bl	8002e44 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e099      	b.n	80039e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d4:	e00f      	b.n	80038f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038d6:	f7ff fab5 	bl	8002e44 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d908      	bls.n	80038f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2203      	movs	r2, #3
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e078      	b.n	80039e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e8      	bne.n	80038d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <HAL_DMA_Init+0x158>)
 8003910:	4013      	ands	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	2b04      	cmp	r3, #4
 800394e:	d107      	bne.n	8003960 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	4313      	orrs	r3, r2
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f023 0307 	bic.w	r3, r3, #7
 8003976:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	2b04      	cmp	r3, #4
 8003988:	d117      	bne.n	80039ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fa9d 	bl	8003edc <DMA_CheckFifoParam>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2240      	movs	r2, #64	; 0x40
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039b6:	2301      	movs	r3, #1
 80039b8:	e016      	b.n	80039e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fa54 	bl	8003e70 <DMA_CalcBaseAndBitshift>
 80039c8:	4603      	mov	r3, r0
 80039ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	223f      	movs	r2, #63	; 0x3f
 80039d2:	409a      	lsls	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	f010803f 	.word	0xf010803f

080039f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_DMA_Start_IT+0x26>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e040      	b.n	8003a9c <HAL_DMA_Start_IT+0xa8>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d12f      	bne.n	8003a8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f9e6 	bl	8003e14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	223f      	movs	r2, #63	; 0x3f
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0216 	orr.w	r2, r2, #22
 8003a62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0208 	orr.w	r2, r2, #8
 8003a7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e005      	b.n	8003a9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
 8003a98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00c      	b.n	8003adc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2205      	movs	r2, #5
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003af4:	4b92      	ldr	r3, [pc, #584]	; (8003d40 <HAL_DMA_IRQHandler+0x258>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a92      	ldr	r2, [pc, #584]	; (8003d44 <HAL_DMA_IRQHandler+0x25c>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	0a9b      	lsrs	r3, r3, #10
 8003b00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	2208      	movs	r2, #8
 8003b14:	409a      	lsls	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01a      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0204 	bic.w	r2, r2, #4
 8003b3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	2208      	movs	r2, #8
 8003b42:	409a      	lsls	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f043 0201 	orr.w	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	2201      	movs	r2, #1
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d012      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	2201      	movs	r2, #1
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	f043 0202 	orr.w	r2, r3, #2
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	2204      	movs	r2, #4
 8003b90:	409a      	lsls	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d012      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	2204      	movs	r2, #4
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	f043 0204 	orr.w	r2, r3, #4
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d043      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d03c      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be2:	2210      	movs	r2, #16
 8003be4:	409a      	lsls	r2, r3
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d018      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d108      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d024      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
 8003c16:	e01f      	b.n	8003c58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01b      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
 8003c28:	e016      	b.n	8003c58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d107      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0208 	bic.w	r2, r2, #8
 8003c46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 808e 	beq.w	8003d86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8086 	beq.w	8003d86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	2220      	movs	r2, #32
 8003c80:	409a      	lsls	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d136      	bne.n	8003d00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0216 	bic.w	r2, r2, #22
 8003ca0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <HAL_DMA_IRQHandler+0x1da>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0208 	bic.w	r2, r2, #8
 8003cd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	223f      	movs	r2, #63	; 0x3f
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d07d      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
        }
        return;
 8003cfe:	e078      	b.n	8003df2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01c      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d108      	bne.n	8003d2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d030      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4798      	blx	r3
 8003d2c:	e02b      	b.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d027      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
 8003d3e:	e022      	b.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
 8003d40:	20000078 	.word	0x20000078
 8003d44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0210 	bic.w	r2, r2, #16
 8003d64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d032      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d022      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d307      	bcc.n	8003dce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f2      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x2ca>
 8003dcc:	e000      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
 8003df0:	e000      	b.n	8003df4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003df2:	bf00      	nop
    }
  }
}
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop

08003dfc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b40      	cmp	r3, #64	; 0x40
 8003e40:	d108      	bne.n	8003e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e52:	e007      	b.n	8003e64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	3b10      	subs	r3, #16
 8003e80:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <DMA_CalcBaseAndBitshift+0x64>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e8a:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <DMA_CalcBaseAndBitshift+0x68>)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d909      	bls.n	8003eb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ea6:	f023 0303 	bic.w	r3, r3, #3
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	659a      	str	r2, [r3, #88]	; 0x58
 8003eb0:	e007      	b.n	8003ec2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	aaaaaaab 	.word	0xaaaaaaab
 8003ed8:	0800e584 	.word	0x0800e584

08003edc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11f      	bne.n	8003f36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d855      	bhi.n	8003fa8 <DMA_CheckFifoParam+0xcc>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <DMA_CheckFifoParam+0x28>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f27 	.word	0x08003f27
 8003f0c:	08003f15 	.word	0x08003f15
 8003f10:	08003fa9 	.word	0x08003fa9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d045      	beq.n	8003fac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f24:	e042      	b.n	8003fac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f2e:	d13f      	bne.n	8003fb0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f34:	e03c      	b.n	8003fb0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3e:	d121      	bne.n	8003f84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d836      	bhi.n	8003fb4 <DMA_CheckFifoParam+0xd8>
 8003f46:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <DMA_CheckFifoParam+0x70>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003f63 	.word	0x08003f63
 8003f54:	08003f5d 	.word	0x08003f5d
 8003f58:	08003f75 	.word	0x08003f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f60:	e02f      	b.n	8003fc2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d024      	beq.n	8003fb8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f72:	e021      	b.n	8003fb8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f7c:	d11e      	bne.n	8003fbc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f82:	e01b      	b.n	8003fbc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d902      	bls.n	8003f90 <DMA_CheckFifoParam+0xb4>
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d003      	beq.n	8003f96 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f8e:	e018      	b.n	8003fc2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
      break;
 8003f94:	e015      	b.n	8003fc2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00e      	beq.n	8003fc0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa6:	e00b      	b.n	8003fc0 <DMA_CheckFifoParam+0xe4>
      break;
 8003fa8:	bf00      	nop
 8003faa:	e00a      	b.n	8003fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fac:	bf00      	nop
 8003fae:	e008      	b.n	8003fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fb0:	bf00      	nop
 8003fb2:	e006      	b.n	8003fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fb4:	bf00      	nop
 8003fb6:	e004      	b.n	8003fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fb8:	bf00      	nop
 8003fba:	e002      	b.n	8003fc2 <DMA_CheckFifoParam+0xe6>
      break;   
 8003fbc:	bf00      	nop
 8003fbe:	e000      	b.n	8003fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fc0:	bf00      	nop
    }
  } 
  
  return status; 
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	; 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	e16b      	b.n	80042c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fec:	2201      	movs	r2, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	f040 815a 	bne.w	80042be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d00b      	beq.n	800402a <HAL_GPIO_Init+0x5a>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d007      	beq.n	800402a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800401e:	2b11      	cmp	r3, #17
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b12      	cmp	r3, #18
 8004028:	d130      	bne.n	800408c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	2203      	movs	r2, #3
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004060:	2201      	movs	r2, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 0201 	and.w	r2, r3, #1
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	2203      	movs	r2, #3
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4013      	ands	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d003      	beq.n	80040cc <HAL_GPIO_Init+0xfc>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b12      	cmp	r3, #18
 80040ca:	d123      	bne.n	8004114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	08da      	lsrs	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3208      	adds	r2, #8
 80040d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	220f      	movs	r2, #15
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	08da      	lsrs	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3208      	adds	r2, #8
 800410e:	69b9      	ldr	r1, [r7, #24]
 8004110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2203      	movs	r2, #3
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0203 	and.w	r2, r3, #3
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80b4 	beq.w	80042be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	4b5f      	ldr	r3, [pc, #380]	; (80042d8 <HAL_GPIO_Init+0x308>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	4a5e      	ldr	r2, [pc, #376]	; (80042d8 <HAL_GPIO_Init+0x308>)
 8004160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004164:	6453      	str	r3, [r2, #68]	; 0x44
 8004166:	4b5c      	ldr	r3, [pc, #368]	; (80042d8 <HAL_GPIO_Init+0x308>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004172:	4a5a      	ldr	r2, [pc, #360]	; (80042dc <HAL_GPIO_Init+0x30c>)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a51      	ldr	r2, [pc, #324]	; (80042e0 <HAL_GPIO_Init+0x310>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02b      	beq.n	80041f6 <HAL_GPIO_Init+0x226>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a50      	ldr	r2, [pc, #320]	; (80042e4 <HAL_GPIO_Init+0x314>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d025      	beq.n	80041f2 <HAL_GPIO_Init+0x222>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4f      	ldr	r2, [pc, #316]	; (80042e8 <HAL_GPIO_Init+0x318>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <HAL_GPIO_Init+0x21e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4e      	ldr	r2, [pc, #312]	; (80042ec <HAL_GPIO_Init+0x31c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d019      	beq.n	80041ea <HAL_GPIO_Init+0x21a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4d      	ldr	r2, [pc, #308]	; (80042f0 <HAL_GPIO_Init+0x320>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0x216>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4c      	ldr	r2, [pc, #304]	; (80042f4 <HAL_GPIO_Init+0x324>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00d      	beq.n	80041e2 <HAL_GPIO_Init+0x212>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4b      	ldr	r2, [pc, #300]	; (80042f8 <HAL_GPIO_Init+0x328>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x20e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4a      	ldr	r2, [pc, #296]	; (80042fc <HAL_GPIO_Init+0x32c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_GPIO_Init+0x20a>
 80041d6:	2307      	movs	r3, #7
 80041d8:	e00e      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041da:	2308      	movs	r3, #8
 80041dc:	e00c      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041de:	2306      	movs	r3, #6
 80041e0:	e00a      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041e2:	2305      	movs	r3, #5
 80041e4:	e008      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041e6:	2304      	movs	r3, #4
 80041e8:	e006      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041ea:	2303      	movs	r3, #3
 80041ec:	e004      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e002      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041f6:	2300      	movs	r3, #0
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	f002 0203 	and.w	r2, r2, #3
 80041fe:	0092      	lsls	r2, r2, #2
 8004200:	4093      	lsls	r3, r2
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004208:	4934      	ldr	r1, [pc, #208]	; (80042dc <HAL_GPIO_Init+0x30c>)
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	3302      	adds	r3, #2
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004216:	4b3a      	ldr	r3, [pc, #232]	; (8004300 <HAL_GPIO_Init+0x330>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800423a:	4a31      	ldr	r2, [pc, #196]	; (8004300 <HAL_GPIO_Init+0x330>)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004240:	4b2f      	ldr	r3, [pc, #188]	; (8004300 <HAL_GPIO_Init+0x330>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004264:	4a26      	ldr	r2, [pc, #152]	; (8004300 <HAL_GPIO_Init+0x330>)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800426a:	4b25      	ldr	r3, [pc, #148]	; (8004300 <HAL_GPIO_Init+0x330>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800428e:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <HAL_GPIO_Init+0x330>)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004294:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <HAL_GPIO_Init+0x330>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042b8:	4a11      	ldr	r2, [pc, #68]	; (8004300 <HAL_GPIO_Init+0x330>)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3301      	adds	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	f67f ae90 	bls.w	8003fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042cc:	bf00      	nop
 80042ce:	3724      	adds	r7, #36	; 0x24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40013800 	.word	0x40013800
 80042e0:	40020000 	.word	0x40020000
 80042e4:	40020400 	.word	0x40020400
 80042e8:	40020800 	.word	0x40020800
 80042ec:	40020c00 	.word	0x40020c00
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40021400 	.word	0x40021400
 80042f8:	40021800 	.word	0x40021800
 80042fc:	40021c00 	.word	0x40021c00
 8004300:	40013c00 	.word	0x40013c00

08004304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	e001      	b.n	8004326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
 8004340:	4613      	mov	r3, r2
 8004342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004344:	787b      	ldrb	r3, [r7, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004350:	e003      	b.n	800435a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004352:	887b      	ldrh	r3, [r7, #2]
 8004354:	041a      	lsls	r2, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	619a      	str	r2, [r3, #24]
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e25b      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d075      	beq.n	8004472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004386:	4ba3      	ldr	r3, [pc, #652]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b04      	cmp	r3, #4
 8004390:	d00c      	beq.n	80043ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004392:	4ba0      	ldr	r3, [pc, #640]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800439a:	2b08      	cmp	r3, #8
 800439c:	d112      	bne.n	80043c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439e:	4b9d      	ldr	r3, [pc, #628]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043aa:	d10b      	bne.n	80043c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	4b99      	ldr	r3, [pc, #612]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d05b      	beq.n	8004470 <HAL_RCC_OscConfig+0x108>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d157      	bne.n	8004470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e236      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d106      	bne.n	80043dc <HAL_RCC_OscConfig+0x74>
 80043ce:	4b91      	ldr	r3, [pc, #580]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a90      	ldr	r2, [pc, #576]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e01d      	b.n	8004418 <HAL_RCC_OscConfig+0xb0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x98>
 80043e6:	4b8b      	ldr	r3, [pc, #556]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a8a      	ldr	r2, [pc, #552]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b88      	ldr	r3, [pc, #544]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a87      	ldr	r2, [pc, #540]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0xb0>
 8004400:	4b84      	ldr	r3, [pc, #528]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a83      	ldr	r2, [pc, #524]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 8004406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b81      	ldr	r3, [pc, #516]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a80      	ldr	r2, [pc, #512]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 8004412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fe fd10 	bl	8002e44 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004428:	f7fe fd0c 	bl	8002e44 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1fb      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443a:	4b76      	ldr	r3, [pc, #472]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0xc0>
 8004446:	e014      	b.n	8004472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7fe fcfc 	bl	8002e44 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004450:	f7fe fcf8 	bl	8002e44 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	; 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e1e7      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004462:	4b6c      	ldr	r3, [pc, #432]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0xe8>
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d063      	beq.n	8004546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800447e:	4b65      	ldr	r3, [pc, #404]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448a:	4b62      	ldr	r3, [pc, #392]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004492:	2b08      	cmp	r3, #8
 8004494:	d11c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004496:	4b5f      	ldr	r3, [pc, #380]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d116      	bne.n	80044d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	4b5c      	ldr	r3, [pc, #368]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_RCC_OscConfig+0x152>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d001      	beq.n	80044ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e1bb      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ba:	4b56      	ldr	r3, [pc, #344]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4952      	ldr	r1, [pc, #328]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ce:	e03a      	b.n	8004546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d020      	beq.n	800451a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d8:	4b4f      	ldr	r3, [pc, #316]	; (8004618 <HAL_RCC_OscConfig+0x2b0>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fe fcb1 	bl	8002e44 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e6:	f7fe fcad 	bl	8002e44 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e19c      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f8:	4b46      	ldr	r3, [pc, #280]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004504:	4b43      	ldr	r3, [pc, #268]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4940      	ldr	r1, [pc, #256]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	4313      	orrs	r3, r2
 8004516:	600b      	str	r3, [r1, #0]
 8004518:	e015      	b.n	8004546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <HAL_RCC_OscConfig+0x2b0>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fe fc90 	bl	8002e44 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004528:	f7fe fc8c 	bl	8002e44 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e17b      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453a:	4b36      	ldr	r3, [pc, #216]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d030      	beq.n	80045b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455a:	4b30      	ldr	r3, [pc, #192]	; (800461c <HAL_RCC_OscConfig+0x2b4>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004560:	f7fe fc70 	bl	8002e44 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004568:	f7fe fc6c 	bl	8002e44 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e15b      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457a:	4b26      	ldr	r3, [pc, #152]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 800457c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x200>
 8004586:	e015      	b.n	80045b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004588:	4b24      	ldr	r3, [pc, #144]	; (800461c <HAL_RCC_OscConfig+0x2b4>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7fe fc59 	bl	8002e44 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004596:	f7fe fc55 	bl	8002e44 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e144      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a8:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80045aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f0      	bne.n	8004596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80a0 	beq.w	8004702 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	4a0e      	ldr	r2, [pc, #56]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6413      	str	r3, [r2, #64]	; 0x40
 80045e2:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ee:	2301      	movs	r3, #1
 80045f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f2:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCC_OscConfig+0x2b8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d121      	bne.n	8004642 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fe:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_RCC_OscConfig+0x2b8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a07      	ldr	r2, [pc, #28]	; (8004620 <HAL_RCC_OscConfig+0x2b8>)
 8004604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460a:	f7fe fc1b 	bl	8002e44 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004610:	e011      	b.n	8004636 <HAL_RCC_OscConfig+0x2ce>
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	42470000 	.word	0x42470000
 800461c:	42470e80 	.word	0x42470e80
 8004620:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004624:	f7fe fc0e 	bl	8002e44 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0fd      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004636:	4b81      	ldr	r3, [pc, #516]	; (800483c <HAL_RCC_OscConfig+0x4d4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d106      	bne.n	8004658 <HAL_RCC_OscConfig+0x2f0>
 800464a:	4b7d      	ldr	r3, [pc, #500]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a7c      	ldr	r2, [pc, #496]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
 8004656:	e01c      	b.n	8004692 <HAL_RCC_OscConfig+0x32a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b05      	cmp	r3, #5
 800465e:	d10c      	bne.n	800467a <HAL_RCC_OscConfig+0x312>
 8004660:	4b77      	ldr	r3, [pc, #476]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	4a76      	ldr	r2, [pc, #472]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 8004666:	f043 0304 	orr.w	r3, r3, #4
 800466a:	6713      	str	r3, [r2, #112]	; 0x70
 800466c:	4b74      	ldr	r3, [pc, #464]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	4a73      	ldr	r2, [pc, #460]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6713      	str	r3, [r2, #112]	; 0x70
 8004678:	e00b      	b.n	8004692 <HAL_RCC_OscConfig+0x32a>
 800467a:	4b71      	ldr	r3, [pc, #452]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	4a70      	ldr	r2, [pc, #448]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	6713      	str	r3, [r2, #112]	; 0x70
 8004686:	4b6e      	ldr	r3, [pc, #440]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a6d      	ldr	r2, [pc, #436]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 800468c:	f023 0304 	bic.w	r3, r3, #4
 8004690:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d015      	beq.n	80046c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469a:	f7fe fbd3 	bl	8002e44 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a0:	e00a      	b.n	80046b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fe fbcf 	bl	8002e44 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e0bc      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b8:	4b61      	ldr	r3, [pc, #388]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0ee      	beq.n	80046a2 <HAL_RCC_OscConfig+0x33a>
 80046c4:	e014      	b.n	80046f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c6:	f7fe fbbd 	bl	8002e44 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fe fbb9 	bl	8002e44 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e0a6      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e4:	4b56      	ldr	r3, [pc, #344]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ee      	bne.n	80046ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d105      	bne.n	8004702 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f6:	4b52      	ldr	r3, [pc, #328]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	4a51      	ldr	r2, [pc, #324]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 80046fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004700:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8092 	beq.w	8004830 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800470c:	4b4c      	ldr	r3, [pc, #304]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 030c 	and.w	r3, r3, #12
 8004714:	2b08      	cmp	r3, #8
 8004716:	d05c      	beq.n	80047d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d141      	bne.n	80047a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004720:	4b48      	ldr	r3, [pc, #288]	; (8004844 <HAL_RCC_OscConfig+0x4dc>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004726:	f7fe fb8d 	bl	8002e44 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472e:	f7fe fb89 	bl	8002e44 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e078      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004740:	4b3f      	ldr	r3, [pc, #252]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	019b      	lsls	r3, r3, #6
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	3b01      	subs	r3, #1
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	061b      	lsls	r3, r3, #24
 8004770:	4933      	ldr	r1, [pc, #204]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004776:	4b33      	ldr	r3, [pc, #204]	; (8004844 <HAL_RCC_OscConfig+0x4dc>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fe fb62 	bl	8002e44 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004784:	f7fe fb5e 	bl	8002e44 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e04d      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004796:	4b2a      	ldr	r3, [pc, #168]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0x41c>
 80047a2:	e045      	b.n	8004830 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a4:	4b27      	ldr	r3, [pc, #156]	; (8004844 <HAL_RCC_OscConfig+0x4dc>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fe fb4b 	bl	8002e44 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fe fb47 	bl	8002e44 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e036      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c4:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f0      	bne.n	80047b2 <HAL_RCC_OscConfig+0x44a>
 80047d0:	e02e      	b.n	8004830 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e029      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <HAL_RCC_OscConfig+0x4d8>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d11c      	bne.n	800482c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d115      	bne.n	800482c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004806:	4013      	ands	r3, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800480c:	4293      	cmp	r3, r2
 800480e:	d10d      	bne.n	800482c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800481a:	429a      	cmp	r2, r3
 800481c:	d106      	bne.n	800482c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d001      	beq.n	8004830 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40007000 	.word	0x40007000
 8004840:	40023800 	.word	0x40023800
 8004844:	42470060 	.word	0x42470060

08004848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0cc      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b68      	ldr	r3, [pc, #416]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d90c      	bls.n	8004884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b65      	ldr	r3, [pc, #404]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b63      	ldr	r3, [pc, #396]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0b8      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d020      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800489c:	4b59      	ldr	r3, [pc, #356]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a58      	ldr	r2, [pc, #352]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b4:	4b53      	ldr	r3, [pc, #332]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a52      	ldr	r2, [pc, #328]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c0:	4b50      	ldr	r3, [pc, #320]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	494d      	ldr	r1, [pc, #308]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d044      	beq.n	8004968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e6:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d119      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e07f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d003      	beq.n	8004906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004902:	2b03      	cmp	r3, #3
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004906:	4b3f      	ldr	r3, [pc, #252]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e06f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004916:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e067      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004926:	4b37      	ldr	r3, [pc, #220]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f023 0203 	bic.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4934      	ldr	r1, [pc, #208]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004938:	f7fe fa84 	bl	8002e44 <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	e00a      	b.n	8004956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004940:	f7fe fa80 	bl	8002e44 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e04f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 020c 	and.w	r2, r3, #12
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	429a      	cmp	r2, r3
 8004966:	d1eb      	bne.n	8004940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d20c      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e032      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4916      	ldr	r1, [pc, #88]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	490e      	ldr	r1, [pc, #56]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ce:	f000 f889 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 80049d2:	4601      	mov	r1, r0
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <HAL_RCC_ClockConfig+0x1c0>)
 80049e0:	5cd3      	ldrb	r3, [r2, r3]
 80049e2:	fa21 f303 	lsr.w	r3, r1, r3
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x1c8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe f9e4 	bl	8002dbc <HAL_InitTick>

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023c00 	.word	0x40023c00
 8004a04:	40023800 	.word	0x40023800
 8004a08:	0800e574 	.word	0x0800e574
 8004a0c:	20000078 	.word	0x20000078
 8004a10:	2000007c 	.word	0x2000007c

08004a14 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08c      	sub	sp, #48	; 0x30
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d129      	bne.n	8004a7a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	4b2b      	ldr	r3, [pc, #172]	; (8004ad8 <HAL_RCC_MCOConfig+0xc4>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	4a2a      	ldr	r2, [pc, #168]	; (8004ad8 <HAL_RCC_MCOConfig+0xc4>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6313      	str	r3, [r2, #48]	; 0x30
 8004a36:	4b28      	ldr	r3, [pc, #160]	; (8004ad8 <HAL_RCC_MCOConfig+0xc4>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004a54:	2300      	movs	r3, #0
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004a58:	f107 031c 	add.w	r3, r7, #28
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	481f      	ldr	r0, [pc, #124]	; (8004adc <HAL_RCC_MCOConfig+0xc8>)
 8004a60:	f7ff fab6 	bl	8003fd0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004a64:	4b1c      	ldr	r3, [pc, #112]	; (8004ad8 <HAL_RCC_MCOConfig+0xc4>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	430b      	orrs	r3, r1
 8004a72:	4919      	ldr	r1, [pc, #100]	; (8004ad8 <HAL_RCC_MCOConfig+0xc4>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004a78:	e029      	b.n	8004ace <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <HAL_RCC_MCOConfig+0xc4>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <HAL_RCC_MCOConfig+0xc4>)
 8004a84:	f043 0304 	orr.w	r3, r3, #4
 8004a88:	6313      	str	r3, [r2, #48]	; 0x30
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <HAL_RCC_MCOConfig+0xc4>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004aac:	f107 031c 	add.w	r3, r7, #28
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	480b      	ldr	r0, [pc, #44]	; (8004ae0 <HAL_RCC_MCOConfig+0xcc>)
 8004ab4:	f7ff fa8c 	bl	8003fd0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <HAL_RCC_MCOConfig+0xc4>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	00d9      	lsls	r1, r3, #3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	4903      	ldr	r1, [pc, #12]	; (8004ad8 <HAL_RCC_MCOConfig+0xc4>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	608b      	str	r3, [r1, #8]
}
 8004ace:	bf00      	nop
 8004ad0:	3730      	adds	r7, #48	; 0x30
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	40020000 	.word	0x40020000
 8004ae0:	40020800 	.word	0x40020800

08004ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	2300      	movs	r3, #0
 8004af4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004afa:	4b50      	ldr	r3, [pc, #320]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d007      	beq.n	8004b16 <HAL_RCC_GetSysClockFreq+0x32>
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d008      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x38>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f040 808d 	bne.w	8004c2a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b10:	4b4b      	ldr	r3, [pc, #300]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004b12:	60bb      	str	r3, [r7, #8]
       break;
 8004b14:	e08c      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b16:	4b4b      	ldr	r3, [pc, #300]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b18:	60bb      	str	r3, [r7, #8]
      break;
 8004b1a:	e089      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b1c:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b26:	4b45      	ldr	r3, [pc, #276]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d023      	beq.n	8004b7a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b32:	4b42      	ldr	r3, [pc, #264]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	099b      	lsrs	r3, r3, #6
 8004b38:	f04f 0400 	mov.w	r4, #0
 8004b3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	ea03 0501 	and.w	r5, r3, r1
 8004b48:	ea04 0602 	and.w	r6, r4, r2
 8004b4c:	4a3d      	ldr	r2, [pc, #244]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b4e:	fb02 f106 	mul.w	r1, r2, r6
 8004b52:	2200      	movs	r2, #0
 8004b54:	fb02 f205 	mul.w	r2, r2, r5
 8004b58:	440a      	add	r2, r1
 8004b5a:	493a      	ldr	r1, [pc, #232]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b5c:	fba5 0101 	umull	r0, r1, r5, r1
 8004b60:	1853      	adds	r3, r2, r1
 8004b62:	4619      	mov	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f04f 0400 	mov.w	r4, #0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4623      	mov	r3, r4
 8004b6e:	f7fc f86b 	bl	8000c48 <__aeabi_uldivmod>
 8004b72:	4603      	mov	r3, r0
 8004b74:	460c      	mov	r4, r1
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e049      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7a:	4b30      	ldr	r3, [pc, #192]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	099b      	lsrs	r3, r3, #6
 8004b80:	f04f 0400 	mov.w	r4, #0
 8004b84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	ea03 0501 	and.w	r5, r3, r1
 8004b90:	ea04 0602 	and.w	r6, r4, r2
 8004b94:	4629      	mov	r1, r5
 8004b96:	4632      	mov	r2, r6
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	f04f 0400 	mov.w	r4, #0
 8004ba0:	0154      	lsls	r4, r2, #5
 8004ba2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ba6:	014b      	lsls	r3, r1, #5
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4622      	mov	r2, r4
 8004bac:	1b49      	subs	r1, r1, r5
 8004bae:	eb62 0206 	sbc.w	r2, r2, r6
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	f04f 0400 	mov.w	r4, #0
 8004bba:	0194      	lsls	r4, r2, #6
 8004bbc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bc0:	018b      	lsls	r3, r1, #6
 8004bc2:	1a5b      	subs	r3, r3, r1
 8004bc4:	eb64 0402 	sbc.w	r4, r4, r2
 8004bc8:	f04f 0100 	mov.w	r1, #0
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	00e2      	lsls	r2, r4, #3
 8004bd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bd6:	00d9      	lsls	r1, r3, #3
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4614      	mov	r4, r2
 8004bdc:	195b      	adds	r3, r3, r5
 8004bde:	eb44 0406 	adc.w	r4, r4, r6
 8004be2:	f04f 0100 	mov.w	r1, #0
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	02a2      	lsls	r2, r4, #10
 8004bec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004bf0:	0299      	lsls	r1, r3, #10
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f04f 0400 	mov.w	r4, #0
 8004c00:	461a      	mov	r2, r3
 8004c02:	4623      	mov	r3, r4
 8004c04:	f7fc f820 	bl	8000c48 <__aeabi_uldivmod>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	0c1b      	lsrs	r3, r3, #16
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	3301      	adds	r3, #1
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	60bb      	str	r3, [r7, #8]
      break;
 8004c28:	e002      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004c2c:	60bb      	str	r3, [r7, #8]
      break;
 8004c2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c30:	68bb      	ldr	r3, [r7, #8]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	017d7840 	.word	0x017d7840

08004c48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e022      	b.n	8004ca0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d105      	bne.n	8004c72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7fd fd8f 	bl	8002790 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2203      	movs	r2, #3
 8004c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f814 	bl	8004ca8 <HAL_SD_InitCard>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00a      	b.n	8004ca0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004ca8:	b5b0      	push	{r4, r5, r7, lr}
 8004caa:	b08e      	sub	sp, #56	; 0x38
 8004cac:	af04      	add	r7, sp, #16
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004cc4:	2376      	movs	r3, #118	; 0x76
 8004cc6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681d      	ldr	r5, [r3, #0]
 8004ccc:	466c      	mov	r4, sp
 8004cce:	f107 0314 	add.w	r3, r7, #20
 8004cd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f002 fba1 	bl	8007428 <SDIO_Init>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e031      	b.n	8004d5c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <HAL_SD_InitCard+0xbc>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f002 fbd9 	bl	80074ba <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004d08:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <HAL_SD_InitCard+0xbc>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 ffdc 	bl	8005ccc <SD_PowerON>
 8004d14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00b      	beq.n	8004d34 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e013      	b.n	8004d5c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fefb 	bl	8005b30 <SD_InitCard>
 8004d3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3728      	adds	r7, #40	; 0x28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bdb0      	pop	{r4, r5, r7, pc}
 8004d64:	422580a0 	.word	0x422580a0

08004d68 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08c      	sub	sp, #48	; 0x30
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d107      	bne.n	8004d90 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0c9      	b.n	8004f24 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	f040 80c2 	bne.w	8004f22 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	441a      	add	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d907      	bls.n	8004dc2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e0b0      	b.n	8004f24 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004de0:	f043 0302 	orr.w	r3, r3, #2
 8004de4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	4a50      	ldr	r2, [pc, #320]	; (8004f2c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8004dec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	4a4f      	ldr	r2, [pc, #316]	; (8004f30 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8004df4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3380      	adds	r3, #128	; 0x80
 8004e08:	4619      	mov	r1, r3
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	025b      	lsls	r3, r3, #9
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	f7fe fdef 	bl	80039f4 <HAL_DMA_Start_IT>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d017      	beq.n	8004e4c <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004e2a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a40      	ldr	r2, [pc, #256]	; (8004f34 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e06b      	b.n	8004f24 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004e4c:	4b3a      	ldr	r3, [pc, #232]	; (8004f38 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d002      	beq.n	8004e60 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	025b      	lsls	r3, r3, #9
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f002 fbb9 	bl	80075e0 <SDMMC_CmdBlockLength>
 8004e6e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00f      	beq.n	8004e96 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2e      	ldr	r2, [pc, #184]	; (8004f34 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	431a      	orrs	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e046      	b.n	8004f24 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	025b      	lsls	r3, r3, #9
 8004ea0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004ea2:	2390      	movs	r3, #144	; 0x90
 8004ea4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f107 0210 	add.w	r2, r7, #16
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f002 fb63 	bl	8007588 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d90a      	bls.n	8004ede <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2282      	movs	r2, #130	; 0x82
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f002 fbc7 	bl	8007668 <SDMMC_CmdReadMultiBlock>
 8004eda:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004edc:	e009      	b.n	8004ef2 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2281      	movs	r2, #129	; 0x81
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eea:	4618      	mov	r0, r3
 8004eec:	f002 fb9a 	bl	8007624 <SDMMC_CmdReadSingleBlock>
 8004ef0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d012      	beq.n	8004f1e <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	431a      	orrs	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e002      	b.n	8004f24 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e000      	b.n	8004f24 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8004f22:	2302      	movs	r3, #2
  }
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3730      	adds	r7, #48	; 0x30
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	0800593f 	.word	0x0800593f
 8004f30:	080059b1 	.word	0x080059b1
 8004f34:	004005ff 	.word	0x004005ff
 8004f38:	4225858c 	.word	0x4225858c

08004f3c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	; 0x30
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d107      	bne.n	8004f64 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0ce      	b.n	8005102 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	f040 80c7 	bne.w	8005100 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	441a      	add	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d907      	bls.n	8004f96 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e0b5      	b.n	8005102 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2203      	movs	r2, #3
 8004f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004fb4:	f043 0302 	orr.w	r3, r3, #2
 8004fb8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	4a53      	ldr	r2, [pc, #332]	; (800510c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8004fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc6:	4a52      	ldr	r2, [pc, #328]	; (8005110 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8004fc8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fce:	2200      	movs	r2, #0
 8004fd0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d002      	beq.n	8004fe0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	025b      	lsls	r3, r3, #9
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f002 faf9 	bl	80075e0 <SDMMC_CmdBlockLength>
 8004fee:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00f      	beq.n	8005016 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a46      	ldr	r2, [pc, #280]	; (8005114 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e075      	b.n	8005102 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d90a      	bls.n	8005032 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	22a0      	movs	r2, #160	; 0xa0
 8005020:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005028:	4618      	mov	r0, r3
 800502a:	f002 fb61 	bl	80076f0 <SDMMC_CmdWriteMultiBlock>
 800502e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005030:	e009      	b.n	8005046 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2290      	movs	r2, #144	; 0x90
 8005036:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800503e:	4618      	mov	r0, r3
 8005040:	f002 fb34 	bl	80076ac <SDMMC_CmdWriteSingleBlock>
 8005044:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d012      	beq.n	8005072 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a30      	ldr	r2, [pc, #192]	; (8005114 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	431a      	orrs	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e047      	b.n	8005102 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005072:	4b29      	ldr	r3, [pc, #164]	; (8005118 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3380      	adds	r3, #128	; 0x80
 8005084:	461a      	mov	r2, r3
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	025b      	lsls	r3, r3, #9
 800508a:	089b      	lsrs	r3, r3, #2
 800508c:	f7fe fcb2 	bl	80039f4 <HAL_DMA_Start_IT>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d01c      	beq.n	80050d0 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80050a4:	f023 0302 	bic.w	r3, r3, #2
 80050a8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a19      	ldr	r2, [pc, #100]	; (8005114 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e018      	b.n	8005102 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050d0:	f04f 33ff 	mov.w	r3, #4294967295
 80050d4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	025b      	lsls	r3, r3, #9
 80050da:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80050dc:	2390      	movs	r3, #144	; 0x90
 80050de:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80050e8:	2301      	movs	r3, #1
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f107 0210 	add.w	r2, r7, #16
 80050f4:	4611      	mov	r1, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f002 fa46 	bl	8007588 <SDIO_ConfigData>

      return HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	e000      	b.n	8005102 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005100:	2302      	movs	r3, #2
  }
}
 8005102:	4618      	mov	r0, r3
 8005104:	3730      	adds	r7, #48	; 0x30
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	08005915 	.word	0x08005915
 8005110:	080059b1 	.word	0x080059b1
 8005114:	004005ff 	.word	0x004005ff
 8005118:	4225858c 	.word	0x4225858c

0800511c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_SD_IRQHandler+0x2e>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 ffd8 	bl	80060f8 <SD_Read_IT>
 8005148:	e165      	b.n	8005416 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 808f 	beq.w	8005278 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005162:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005172:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005176:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d039      	beq.n	8005206 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <HAL_SD_IRQHandler+0x8a>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d011      	beq.n	80051ca <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f002 fac2 	bl	8007734 <SDMMC_CmdStopTransfer>
 80051b0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f92f 	bl	8005428 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d104      	bne.n	80051f6 <HAL_SD_IRQHandler+0xda>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f002 ff20 	bl	800803c <HAL_SD_RxCpltCallback>
 80051fc:	e10b      	b.n	8005416 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f002 ff12 	bl	8008028 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005204:	e107      	b.n	8005416 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8102 	beq.w	8005416 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d011      	beq.n	8005240 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4618      	mov	r0, r3
 8005222:	f002 fa87 	bl	8007734 <SDMMC_CmdStopTransfer>
 8005226:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8f4 	bl	8005428 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	f040 80e5 	bne.w	8005416 <HAL_SD_IRQHandler+0x2fa>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	f040 80df 	bne.w	8005416 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0208 	bic.w	r2, r2, #8
 8005266:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f002 fed9 	bl	8008028 <HAL_SD_TxCpltCallback>
}
 8005276:	e0ce      	b.n	8005416 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <HAL_SD_IRQHandler+0x17c>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 ff82 	bl	800619a <SD_Write_IT>
 8005296:	e0be      	b.n	8005416 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800529e:	f240 233a 	movw	r3, #570	; 0x23a
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80b6 	beq.w	8005416 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	f043 0202 	orr.w	r2, r3, #2
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	f043 0208 	orr.w	r2, r3, #8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	f043 0220 	orr.w	r2, r3, #32
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	f043 0210 	orr.w	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	f043 0208 	orr.w	r2, r3, #8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f240 723a 	movw	r2, #1850	; 0x73a
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005344:	f023 0302 	bic.w	r3, r3, #2
 8005348:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f002 f9f0 	bl	8007734 <SDMMC_CmdStopTransfer>
 8005354:	4602      	mov	r2, r0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f855 	bl	8005428 <HAL_SD_ErrorCallback>
}
 800537e:	e04a      	b.n	8005416 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b00      	cmp	r3, #0
 8005388:	d045      	beq.n	8005416 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	2b00      	cmp	r3, #0
 8005392:	d104      	bne.n	800539e <HAL_SD_IRQHandler+0x282>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d011      	beq.n	80053c2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_SD_IRQHandler+0x304>)
 80053a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe fb7a 	bl	8003aa4 <HAL_DMA_Abort_IT>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d02f      	beq.n	8005416 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fb4a 	bl	8005a54 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80053c0:	e029      	b.n	8005416 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <HAL_SD_IRQHandler+0x2ba>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d011      	beq.n	80053fa <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	4a12      	ldr	r2, [pc, #72]	; (8005424 <HAL_SD_IRQHandler+0x308>)
 80053dc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fb5e 	bl	8003aa4 <HAL_DMA_Abort_IT>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d013      	beq.n	8005416 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fb65 	bl	8005ac2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80053f8:	e00d      	b.n	8005416 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f002 fe00 	bl	8008014 <HAL_SD_AbortCallback>
}
 8005414:	e7ff      	b.n	8005416 <HAL_SD_IRQHandler+0x2fa>
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	08005a55 	.word	0x08005a55
 8005424:	08005ac3 	.word	0x08005ac3

08005428 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800544a:	0f9b      	lsrs	r3, r3, #30
 800544c:	b2da      	uxtb	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005456:	0e9b      	lsrs	r3, r3, #26
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	b2da      	uxtb	r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005468:	0e1b      	lsrs	r3, r3, #24
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	b2da      	uxtb	r2, r3
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800547a:	0c1b      	lsrs	r3, r3, #16
 800547c:	b2da      	uxtb	r2, r3
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	b2da      	uxtb	r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005492:	b2da      	uxtb	r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800549c:	0d1b      	lsrs	r3, r3, #20
 800549e:	b29a      	uxth	r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a8:	0c1b      	lsrs	r3, r3, #16
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054ba:	0bdb      	lsrs	r3, r3, #15
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054cc:	0b9b      	lsrs	r3, r3, #14
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054de:	0b5b      	lsrs	r3, r3, #13
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054f0:	0b1b      	lsrs	r3, r3, #12
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2200      	movs	r2, #0
 8005502:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005508:	2b00      	cmp	r3, #0
 800550a:	d163      	bne.n	80055d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005510:	009a      	lsls	r2, r3, #2
 8005512:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005516:	4013      	ands	r3, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800551c:	0f92      	lsrs	r2, r2, #30
 800551e:	431a      	orrs	r2, r3
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005528:	0edb      	lsrs	r3, r3, #27
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	b2da      	uxtb	r2, r3
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800553a:	0e1b      	lsrs	r3, r3, #24
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	b2da      	uxtb	r2, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554c:	0d5b      	lsrs	r3, r3, #21
 800554e:	b2db      	uxtb	r3, r3
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	b2da      	uxtb	r2, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555e:	0c9b      	lsrs	r3, r3, #18
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	b2da      	uxtb	r2, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005570:	0bdb      	lsrs	r3, r3, #15
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	b2da      	uxtb	r2, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	7e1b      	ldrb	r3, [r3, #24]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	3302      	adds	r3, #2
 8005594:	2201      	movs	r2, #1
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800559e:	fb02 f203 	mul.w	r2, r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	7a1b      	ldrb	r3, [r3, #8]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	2201      	movs	r2, #1
 80055b2:	409a      	lsls	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80055c0:	0a52      	lsrs	r2, r2, #9
 80055c2:	fb02 f203 	mul.w	r2, r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d0:	661a      	str	r2, [r3, #96]	; 0x60
 80055d2:	e031      	b.n	8005638 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d11d      	bne.n	8005618 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ea:	0c1b      	lsrs	r3, r3, #16
 80055ec:	431a      	orrs	r2, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	3301      	adds	r3, #1
 80055f8:	029a      	lsls	r2, r3, #10
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	661a      	str	r2, [r3, #96]	; 0x60
 8005616:	e00f      	b.n	8005638 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a58      	ldr	r2, [pc, #352]	; (8005780 <HAL_SD_GetCardCSD+0x344>)
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e09d      	b.n	8005774 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800563c:	0b9b      	lsrs	r3, r3, #14
 800563e:	b2db      	uxtb	r3, r3
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	b2da      	uxtb	r2, r3
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564e:	09db      	lsrs	r3, r3, #7
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005656:	b2da      	uxtb	r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005660:	b2db      	uxtb	r3, r3
 8005662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005666:	b2da      	uxtb	r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	0fdb      	lsrs	r3, r3, #31
 8005672:	b2da      	uxtb	r2, r3
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	0f5b      	lsrs	r3, r3, #29
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	b2da      	uxtb	r2, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	0e9b      	lsrs	r3, r3, #26
 8005690:	b2db      	uxtb	r3, r3
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	b2da      	uxtb	r2, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a0:	0d9b      	lsrs	r3, r3, #22
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	0d5b      	lsrs	r3, r3, #21
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	0c1b      	lsrs	r3, r3, #16
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	0bdb      	lsrs	r3, r3, #15
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	0b9b      	lsrs	r3, r3, #14
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	0b5b      	lsrs	r3, r3, #13
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	b2da      	uxtb	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571e:	0b1b      	lsrs	r3, r3, #12
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	b2da      	uxtb	r2, r3
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	0a9b      	lsrs	r3, r3, #10
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	b2da      	uxtb	r2, r3
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	0a1b      	lsrs	r3, r3, #8
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	b2da      	uxtb	r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005762:	b2da      	uxtb	r2, r3
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	004005ff 	.word	0x004005ff

08005784 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80057dc:	b5b0      	push	{r4, r5, r7, lr}
 80057de:	b08e      	sub	sp, #56	; 0x38
 80057e0:	af04      	add	r7, sp, #16
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2203      	movs	r2, #3
 80057ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d02e      	beq.n	8005854 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fc:	d106      	bne.n	800580c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	639a      	str	r2, [r3, #56]	; 0x38
 800580a:	e029      	b.n	8005860 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005812:	d10a      	bne.n	800582a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fb0f 	bl	8005e38 <SD_WideBus_Enable>
 800581a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	639a      	str	r2, [r3, #56]	; 0x38
 8005828:	e01a      	b.n	8005860 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fb4c 	bl	8005ece <SD_WideBus_Disable>
 8005836:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
 8005844:	e00c      	b.n	8005860 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	639a      	str	r2, [r3, #56]	; 0x38
 8005852:	e005      	b.n	8005860 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	2b00      	cmp	r3, #0
 8005866:	d009      	beq.n	800587c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e024      	b.n	80058c6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681d      	ldr	r5, [r3, #0]
 80058a2:	466c      	mov	r4, sp
 80058a4:	f107 0318 	add.w	r3, r7, #24
 80058a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058b0:	f107 030c 	add.w	r3, r7, #12
 80058b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058b6:	4628      	mov	r0, r5
 80058b8:	f001 fdb6 	bl	8007428 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3728      	adds	r7, #40	; 0x28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bdb0      	pop	{r4, r5, r7, pc}
 80058ce:	bf00      	nop
 80058d0:	004005ff 	.word	0x004005ff

080058d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80058e0:	f107 030c 	add.w	r3, r7, #12
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fa7e 	bl	8005de8 <SD_SendStatus>
 80058ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	0a5b      	lsrs	r3, r3, #9
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800590a:	693b      	ldr	r3, [r7, #16]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005930:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005932:	bf00      	nop
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	2b82      	cmp	r3, #130	; 0x82
 8005952:	d111      	bne.n	8005978 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f001 feeb 	bl	8007734 <SDMMC_CmdStopTransfer>
 800595e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	431a      	orrs	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff fd58 	bl	8005428 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0208 	bic.w	r2, r2, #8
 8005986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005990:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f002 fb4b 	bl	800803c <HAL_SD_RxCpltCallback>
#endif
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fe fa1c 	bl	8003dfc <HAL_DMA_GetError>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d03e      	beq.n	8005a48 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d002      	beq.n	80059e6 <SD_DMAError+0x36>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d12d      	bne.n	8005a42 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <SD_DMAError+0xa0>)
 80059ec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80059fc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005a0a:	6978      	ldr	r0, [r7, #20]
 8005a0c:	f7ff ff62 	bl	80058d4 <HAL_SD_GetCardState>
 8005a10:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b06      	cmp	r3, #6
 8005a16:	d002      	beq.n	8005a1e <SD_DMAError+0x6e>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	d10a      	bne.n	8005a34 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 fe86 	bl	8007734 <SDMMC_CmdStopTransfer>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005a42:	6978      	ldr	r0, [r7, #20]
 8005a44:	f7ff fcf0 	bl	8005428 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005a48:	bf00      	nop
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	004005ff 	.word	0x004005ff

08005a54 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff ff31 	bl	80058d4 <HAL_SD_GetCardState>
 8005a72:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b06      	cmp	r3, #6
 8005a86:	d002      	beq.n	8005a8e <SD_DMATxAbort+0x3a>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	d10a      	bne.n	8005aa4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 fe4e 	bl	8007734 <SDMMC_CmdStopTransfer>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d103      	bne.n	8005ab4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f002 fab1 	bl	8008014 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005ab2:	e002      	b.n	8005aba <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff fcb7 	bl	8005428 <HAL_SD_ErrorCallback>
}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f7ff fefa 	bl	80058d4 <HAL_SD_GetCardState>
 8005ae0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b06      	cmp	r3, #6
 8005af4:	d002      	beq.n	8005afc <SD_DMARxAbort+0x3a>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b05      	cmp	r3, #5
 8005afa:	d10a      	bne.n	8005b12 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 fe17 	bl	8007734 <SDMMC_CmdStopTransfer>
 8005b06:	4602      	mov	r2, r0
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d103      	bne.n	8005b22 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f002 fa7a 	bl	8008014 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005b20:	e002      	b.n	8005b28 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f7ff fc80 	bl	8005428 <HAL_SD_ErrorCallback>
}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b30:	b5b0      	push	{r4, r5, r7, lr}
 8005b32:	b094      	sub	sp, #80	; 0x50
 8005b34:	af04      	add	r7, sp, #16
 8005b36:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 fcc9 	bl	80074d8 <SDIO_GetPowerState>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005b50:	e0b7      	b.n	8005cc2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d02f      	beq.n	8005bba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 fef2 	bl	8007948 <SDMMC_CmdSendCID>
 8005b64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <SD_InitCard+0x40>
    {
      return errorstate;
 8005b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6e:	e0a8      	b.n	8005cc2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2100      	movs	r1, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fcf3 	bl	8007562 <SDIO_GetResponse>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2104      	movs	r1, #4
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fcea 	bl	8007562 <SDIO_GetResponse>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2108      	movs	r1, #8
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fce1 	bl	8007562 <SDIO_GetResponse>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	210c      	movs	r1, #12
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 fcd8 	bl	8007562 <SDIO_GetResponse>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d00d      	beq.n	8005bde <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f107 020e 	add.w	r2, r7, #14
 8005bca:	4611      	mov	r1, r2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 fef8 	bl	80079c2 <SDMMC_CmdSetRelAdd>
 8005bd2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <SD_InitCard+0xae>
    {
      return errorstate;
 8005bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bdc:	e071      	b.n	8005cc2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d036      	beq.n	8005c54 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005be6:	89fb      	ldrh	r3, [r7, #14]
 8005be8:	461a      	mov	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf6:	041b      	lsls	r3, r3, #16
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f001 fec2 	bl	8007984 <SDMMC_CmdSendCSD>
 8005c00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0a:	e05a      	b.n	8005cc2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2100      	movs	r1, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fca5 	bl	8007562 <SDIO_GetResponse>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2104      	movs	r1, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f001 fc9c 	bl	8007562 <SDIO_GetResponse>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2108      	movs	r1, #8
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 fc93 	bl	8007562 <SDIO_GetResponse>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	210c      	movs	r1, #12
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 fc8a 	bl	8007562 <SDIO_GetResponse>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2104      	movs	r1, #4
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 fc81 	bl	8007562 <SDIO_GetResponse>
 8005c60:	4603      	mov	r3, r0
 8005c62:	0d1a      	lsrs	r2, r3, #20
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005c68:	f107 0310 	add.w	r3, r7, #16
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff fbe4 	bl	800543c <HAL_SD_GetCardCSD>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005c7e:	e020      	b.n	8005cc2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c88:	041b      	lsls	r3, r3, #16
 8005c8a:	f04f 0400 	mov.w	r4, #0
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4623      	mov	r3, r4
 8005c92:	4608      	mov	r0, r1
 8005c94:	f001 fd70 	bl	8007778 <SDMMC_CmdSelDesel>
 8005c98:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <SD_InitCard+0x174>
  {
    return errorstate;
 8005ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca2:	e00e      	b.n	8005cc2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681d      	ldr	r5, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	466c      	mov	r4, sp
 8005cac:	f103 0210 	add.w	r2, r3, #16
 8005cb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f001 fbb4 	bl	8007428 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3740      	adds	r7, #64	; 0x40
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005ccc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 fd6a 	bl	80077be <SDMMC_CmdGoIdleState>
 8005cea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	e072      	b.n	8005ddc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f001 fd7d 	bl	80077fa <SDMMC_CmdOperCond>
 8005d00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00d      	beq.n	8005d24 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 fd53 	bl	80077be <SDMMC_CmdGoIdleState>
 8005d18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	e05b      	b.n	8005ddc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d137      	bne.n	8005da2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2100      	movs	r1, #0
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 fd7d 	bl	8007838 <SDMMC_CmdAppCommand>
 8005d3e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d02d      	beq.n	8005da2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005d4a:	e047      	b.n	8005ddc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2100      	movs	r1, #0
 8005d52:	4618      	mov	r0, r3
 8005d54:	f001 fd70 	bl	8007838 <SDMMC_CmdAppCommand>
 8005d58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <SD_PowerON+0x98>
    {
      return errorstate;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	e03b      	b.n	8005ddc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	491e      	ldr	r1, [pc, #120]	; (8005de4 <SD_PowerON+0x118>)
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 fd86 	bl	800787c <SDMMC_CmdAppOperCommand>
 8005d70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005d7c:	e02e      	b.n	8005ddc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 fbec 	bl	8007562 <SDIO_GetResponse>
 8005d8a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	0fdb      	lsrs	r3, r3, #31
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <SD_PowerON+0xcc>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <SD_PowerON+0xce>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]

    count++;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d802      	bhi.n	8005db2 <SD_PowerON+0xe6>
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0cc      	beq.n	8005d4c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d902      	bls.n	8005dc2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dc0:	e00c      	b.n	8005ddc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	645a      	str	r2, [r3, #68]	; 0x44
 8005dd2:	e002      	b.n	8005dda <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	c1100000 	.word	0xc1100000

08005de8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005df8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dfc:	e018      	b.n	8005e30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e06:	041b      	lsls	r3, r3, #16
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f001 fdfa 	bl	8007a04 <SDMMC_CmdSendStatus>
 8005e10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	e009      	b.n	8005e30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2100      	movs	r1, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	f001 fb9d 	bl	8007562 <SDIO_GetResponse>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 fb87 	bl	8007562 <SDIO_GetResponse>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e5e:	d102      	bne.n	8005e66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e64:	e02f      	b.n	8005ec6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005e66:	f107 030c 	add.w	r3, r7, #12
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f879 	bl	8005f64 <SD_FindSCR>
 8005e72:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	e023      	b.n	8005ec6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01c      	beq.n	8005ec2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e90:	041b      	lsls	r3, r3, #16
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f001 fccf 	bl	8007838 <SDMMC_CmdAppCommand>
 8005e9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	e00f      	b.n	8005ec6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2102      	movs	r1, #2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 fd08 	bl	80078c2 <SDMMC_CmdBusWidth>
 8005eb2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	e003      	b.n	8005ec6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e001      	b.n	8005ec6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ec2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b086      	sub	sp, #24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 fb3c 	bl	8007562 <SDIO_GetResponse>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ef4:	d102      	bne.n	8005efc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005ef6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005efa:	e02f      	b.n	8005f5c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005efc:	f107 030c 	add.w	r3, r7, #12
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f82e 	bl	8005f64 <SD_FindSCR>
 8005f08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	e023      	b.n	8005f5c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01c      	beq.n	8005f58 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	f001 fc84 	bl	8007838 <SDMMC_CmdAppCommand>
 8005f30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	e00f      	b.n	8005f5c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 fcbd 	bl	80078c2 <SDMMC_CmdBusWidth>
 8005f48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	e003      	b.n	8005f5c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e001      	b.n	8005f5c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005f64:	b590      	push	{r4, r7, lr}
 8005f66:	b08f      	sub	sp, #60	; 0x3c
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005f6e:	f7fc ff69 	bl	8002e44 <HAL_GetTick>
 8005f72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60bb      	str	r3, [r7, #8]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2108      	movs	r1, #8
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 fb28 	bl	80075e0 <SDMMC_CmdBlockLength>
 8005f90:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	e0a9      	b.n	80060f0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa4:	041b      	lsls	r3, r3, #16
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	f001 fc45 	bl	8007838 <SDMMC_CmdAppCommand>
 8005fae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <SD_FindSCR+0x56>
  {
    return errorstate;
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	e09a      	b.n	80060f0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fba:	f04f 33ff 	mov.w	r3, #4294967295
 8005fbe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005fc4:	2330      	movs	r3, #48	; 0x30
 8005fc6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f107 0210 	add.w	r2, r7, #16
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 fad2 	bl	8007588 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 fc8c 	bl	8007906 <SDMMC_CmdSendSCR>
 8005fee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d022      	beq.n	800603c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	e07a      	b.n	80060f0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00e      	beq.n	8006026 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6819      	ldr	r1, [r3, #0]
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	f107 0208 	add.w	r2, r7, #8
 8006014:	18d4      	adds	r4, r2, r3
 8006016:	4608      	mov	r0, r1
 8006018:	f001 fa31 	bl	800747e <SDIO_ReadFIFO>
 800601c:	4603      	mov	r3, r0
 800601e:	6023      	str	r3, [r4, #0]
      index++;
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	3301      	adds	r3, #1
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006026:	f7fc ff0d 	bl	8002e44 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d102      	bne.n	800603c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006036:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800603a:	e059      	b.n	80060f0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006042:	f240 432a 	movw	r3, #1066	; 0x42a
 8006046:	4013      	ands	r3, r2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0d6      	beq.n	8005ffa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2208      	movs	r2, #8
 8006060:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006062:	2308      	movs	r3, #8
 8006064:	e044      	b.n	80060f0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2202      	movs	r2, #2
 800607a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800607c:	2302      	movs	r3, #2
 800607e:	e037      	b.n	80060f0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2220      	movs	r2, #32
 8006094:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006096:	2320      	movs	r3, #32
 8006098:	e02a      	b.n	80060f0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f240 523a 	movw	r2, #1338	; 0x53a
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	061a      	lsls	r2, r3, #24
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	0a1b      	lsrs	r3, r3, #8
 80060b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80060ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	0e1b      	lsrs	r3, r3, #24
 80060c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	601a      	str	r2, [r3, #0]
    scr++;
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	3304      	adds	r3, #4
 80060ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	061a      	lsls	r2, r3, #24
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	0a1b      	lsrs	r3, r3, #8
 80060de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80060e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	0e1b      	lsrs	r3, r3, #24
 80060e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	373c      	adds	r7, #60	; 0x3c
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd90      	pop	{r4, r7, pc}

080060f8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d03f      	beq.n	8006192 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e033      	b.n	8006180 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f001 f9ae 	bl	800747e <SDIO_ReadFIFO>
 8006122:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	3b01      	subs	r3, #1
 8006136:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	0a1b      	lsrs	r3, r3, #8
 800613c:	b2da      	uxtb	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	3b01      	subs	r3, #1
 800614c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	b2da      	uxtb	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	3b01      	subs	r3, #1
 8006162:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	0e1b      	lsrs	r3, r3, #24
 8006168:	b2da      	uxtb	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	3b01      	subs	r3, #1
 8006178:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	3301      	adds	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b07      	cmp	r3, #7
 8006184:	d9c8      	bls.n	8006118 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006192:	bf00      	nop
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b086      	sub	sp, #24
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d043      	beq.n	800623c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e037      	b.n	800622a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3301      	adds	r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	021a      	lsls	r2, r3, #8
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	041a      	lsls	r2, r3, #16
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	061a      	lsls	r2, r3, #24
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4313      	orrs	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3301      	adds	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	3b01      	subs	r3, #1
 8006212:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f107 0208 	add.w	r2, r7, #8
 800621c:	4611      	mov	r1, r2
 800621e:	4618      	mov	r0, r3
 8006220:	f001 f93a 	bl	8007498 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3301      	adds	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b07      	cmp	r3, #7
 800622e:	d9c4      	bls.n	80061ba <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800623c:	bf00      	nop
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e056      	b.n	8006304 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fc fb8d 	bl	8002990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800628c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	ea42 0103 	orr.w	r1, r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	0c1b      	lsrs	r3, r3, #16
 80062d4:	f003 0104 	and.w	r1, r3, #4
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4613      	mov	r3, r2
 800631a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_SPI_Transmit+0x22>
 800632a:	2302      	movs	r3, #2
 800632c:	e11e      	b.n	800656c <HAL_SPI_Transmit+0x260>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006336:	f7fc fd85 	bl	8002e44 <HAL_GetTick>
 800633a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d002      	beq.n	8006352 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800634c:	2302      	movs	r3, #2
 800634e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006350:	e103      	b.n	800655a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <HAL_SPI_Transmit+0x52>
 8006358:	88fb      	ldrh	r3, [r7, #6]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006362:	e0fa      	b.n	800655a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2203      	movs	r2, #3
 8006368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	88fa      	ldrh	r2, [r7, #6]
 8006382:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063aa:	d107      	bne.n	80063bc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c6:	2b40      	cmp	r3, #64	; 0x40
 80063c8:	d007      	beq.n	80063da <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063e2:	d14b      	bne.n	800647c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_SPI_Transmit+0xe6>
 80063ec:	8afb      	ldrh	r3, [r7, #22]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d13e      	bne.n	8006470 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	881a      	ldrh	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	1c9a      	adds	r2, r3, #2
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006416:	e02b      	b.n	8006470 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b02      	cmp	r3, #2
 8006424:	d112      	bne.n	800644c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	881a      	ldrh	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	86da      	strh	r2, [r3, #54]	; 0x36
 800644a:	e011      	b.n	8006470 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800644c:	f7fc fcfa 	bl	8002e44 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d803      	bhi.n	8006464 <HAL_SPI_Transmit+0x158>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d102      	bne.n	800646a <HAL_SPI_Transmit+0x15e>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d102      	bne.n	8006470 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800646e:	e074      	b.n	800655a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1ce      	bne.n	8006418 <HAL_SPI_Transmit+0x10c>
 800647a:	e04c      	b.n	8006516 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_SPI_Transmit+0x17e>
 8006484:	8afb      	ldrh	r3, [r7, #22]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d140      	bne.n	800650c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	330c      	adds	r3, #12
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064b0:	e02c      	b.n	800650c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d113      	bne.n	80064e8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	330c      	adds	r3, #12
 80064ca:	7812      	ldrb	r2, [r2, #0]
 80064cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80064e6:	e011      	b.n	800650c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e8:	f7fc fcac 	bl	8002e44 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d803      	bhi.n	8006500 <HAL_SPI_Transmit+0x1f4>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fe:	d102      	bne.n	8006506 <HAL_SPI_Transmit+0x1fa>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	77fb      	strb	r3, [r7, #31]
          goto error;
 800650a:	e026      	b.n	800655a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1cd      	bne.n	80064b2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fba4 	bl	8006c68 <SPI_EndRxTxTransaction>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2220      	movs	r2, #32
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	613b      	str	r3, [r7, #16]
 8006548:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	77fb      	strb	r3, [r7, #31]
 8006556:	e000      	b.n	800655a <HAL_SPI_Transmit+0x24e>
  }

error:
 8006558:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800656a:	7ffb      	ldrb	r3, [r7, #31]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3720      	adds	r7, #32
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006590:	d112      	bne.n	80065b8 <HAL_SPI_Receive+0x44>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10e      	bne.n	80065b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2204      	movs	r2, #4
 800659e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065a2:	88fa      	ldrh	r2, [r7, #6]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	4613      	mov	r3, r2
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f8e9 	bl	8006786 <HAL_SPI_TransmitReceive>
 80065b4:	4603      	mov	r3, r0
 80065b6:	e0e2      	b.n	800677e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_SPI_Receive+0x52>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e0db      	b.n	800677e <HAL_SPI_Receive+0x20a>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ce:	f7fc fc39 	bl	8002e44 <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d002      	beq.n	80065e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80065e0:	2302      	movs	r3, #2
 80065e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065e4:	e0c2      	b.n	800676c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_SPI_Receive+0x7e>
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d102      	bne.n	80065f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065f6:	e0b9      	b.n	800676c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2204      	movs	r2, #4
 80065fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	88fa      	ldrh	r2, [r7, #6]
 8006610:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	88fa      	ldrh	r2, [r7, #6]
 8006616:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663e:	d107      	bne.n	8006650 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800664e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	d007      	beq.n	800666e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800666c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d162      	bne.n	800673c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006676:	e02e      	b.n	80066d6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b01      	cmp	r3, #1
 8006684:	d115      	bne.n	80066b2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f103 020c 	add.w	r2, r3, #12
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	7812      	ldrb	r2, [r2, #0]
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066b0:	e011      	b.n	80066d6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066b2:	f7fc fbc7 	bl	8002e44 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d803      	bhi.n	80066ca <HAL_SPI_Receive+0x156>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d102      	bne.n	80066d0 <HAL_SPI_Receive+0x15c>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d102      	bne.n	80066d6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80066d4:	e04a      	b.n	800676c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066da:	b29b      	uxth	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1cb      	bne.n	8006678 <HAL_SPI_Receive+0x104>
 80066e0:	e031      	b.n	8006746 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d113      	bne.n	8006718 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	b292      	uxth	r2, r2
 80066fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	1c9a      	adds	r2, r3, #2
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006716:	e011      	b.n	800673c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006718:	f7fc fb94 	bl	8002e44 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d803      	bhi.n	8006730 <HAL_SPI_Receive+0x1bc>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672e:	d102      	bne.n	8006736 <HAL_SPI_Receive+0x1c2>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d102      	bne.n	800673c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	75fb      	strb	r3, [r7, #23]
          goto error;
 800673a:	e017      	b.n	800676c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1cd      	bne.n	80066e2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fa27 	bl	8006b9e <SPI_EndRxTransaction>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2220      	movs	r2, #32
 800675a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	75fb      	strb	r3, [r7, #23]
 8006768:	e000      	b.n	800676c <HAL_SPI_Receive+0x1f8>
  }

error :
 800676a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800677c:	7dfb      	ldrb	r3, [r7, #23]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b08c      	sub	sp, #48	; 0x30
 800678a:	af00      	add	r7, sp, #0
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	607a      	str	r2, [r7, #4]
 8006792:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006794:	2301      	movs	r3, #1
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x26>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e18a      	b.n	8006ac2 <HAL_SPI_TransmitReceive+0x33c>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067b4:	f7fc fb46 	bl	8002e44 <HAL_GetTick>
 80067b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80067ca:	887b      	ldrh	r3, [r7, #2]
 80067cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d00f      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x70>
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067dc:	d107      	bne.n	80067ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <HAL_SPI_TransmitReceive+0x68>
 80067e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d003      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80067ee:	2302      	movs	r3, #2
 80067f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067f4:	e15b      	b.n	8006aae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_SPI_TransmitReceive+0x82>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <HAL_SPI_TransmitReceive+0x82>
 8006802:	887b      	ldrh	r3, [r7, #2]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800680e:	e14e      	b.n	8006aae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b04      	cmp	r3, #4
 800681a:	d003      	beq.n	8006824 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2205      	movs	r2, #5
 8006820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	887a      	ldrh	r2, [r7, #2]
 8006834:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	887a      	ldrh	r2, [r7, #2]
 800683a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	887a      	ldrh	r2, [r7, #2]
 8006846:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	887a      	ldrh	r2, [r7, #2]
 800684c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d007      	beq.n	8006878 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006876:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006880:	d178      	bne.n	8006974 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x10a>
 800688a:	8b7b      	ldrh	r3, [r7, #26]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d166      	bne.n	800695e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	881a      	ldrh	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	1c9a      	adds	r2, r3, #2
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068b4:	e053      	b.n	800695e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d11b      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x176>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d016      	beq.n	80068fc <HAL_SPI_TransmitReceive+0x176>
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d113      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	881a      	ldrh	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e4:	1c9a      	adds	r2, r3, #2
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b01      	cmp	r3, #1
 8006908:	d119      	bne.n	800693e <HAL_SPI_TransmitReceive+0x1b8>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d014      	beq.n	800693e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	b292      	uxth	r2, r2
 8006920:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	1c9a      	adds	r2, r3, #2
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800693a:	2301      	movs	r3, #1
 800693c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800693e:	f7fc fa81 	bl	8002e44 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800694a:	429a      	cmp	r2, r3
 800694c:	d807      	bhi.n	800695e <HAL_SPI_TransmitReceive+0x1d8>
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006954:	d003      	beq.n	800695e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800695c:	e0a7      	b.n	8006aae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1a6      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x130>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1a1      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x130>
 8006972:	e07c      	b.n	8006a6e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_SPI_TransmitReceive+0x1fc>
 800697c:	8b7b      	ldrh	r3, [r7, #26]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d16b      	bne.n	8006a5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	330c      	adds	r3, #12
 800698c:	7812      	ldrb	r2, [r2, #0]
 800698e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069a8:	e057      	b.n	8006a5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d11c      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x26c>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d017      	beq.n	80069f2 <HAL_SPI_TransmitReceive+0x26c>
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d114      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d119      	bne.n	8006a34 <HAL_SPI_TransmitReceive+0x2ae>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d014      	beq.n	8006a34 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a30:	2301      	movs	r3, #1
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a34:	f7fc fa06 	bl	8002e44 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d803      	bhi.n	8006a4c <HAL_SPI_TransmitReceive+0x2c6>
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d102      	bne.n	8006a52 <HAL_SPI_TransmitReceive+0x2cc>
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a58:	e029      	b.n	8006aae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1a2      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x224>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d19d      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f8f8 	bl	8006c68 <SPI_EndRxTxTransaction>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d006      	beq.n	8006a8c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a8a:	e010      	b.n	8006aae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10b      	bne.n	8006aac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	e000      	b.n	8006aae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006aac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006abe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3730      	adds	r7, #48	; 0x30
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ada:	e04c      	b.n	8006b76 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d048      	beq.n	8006b76 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006ae4:	f7fc f9ae 	bl	8002e44 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d902      	bls.n	8006afa <SPI_WaitFlagStateUntilTimeout+0x30>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d13d      	bne.n	8006b76 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b12:	d111      	bne.n	8006b38 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b1c:	d004      	beq.n	8006b28 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b26:	d107      	bne.n	8006b38 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b40:	d10f      	bne.n	8006b62 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e00f      	b.n	8006b96 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	bf0c      	ite	eq
 8006b86:	2301      	moveq	r3, #1
 8006b88:	2300      	movne	r3, #0
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d1a3      	bne.n	8006adc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b086      	sub	sp, #24
 8006ba2:	af02      	add	r7, sp, #8
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bb2:	d111      	bne.n	8006bd8 <SPI_EndRxTransaction+0x3a>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bbc:	d004      	beq.n	8006bc8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc6:	d107      	bne.n	8006bd8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006be0:	d12a      	bne.n	8006c38 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bea:	d012      	beq.n	8006c12 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2180      	movs	r1, #128	; 0x80
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff ff67 	bl	8006aca <SPI_WaitFlagStateUntilTimeout>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d02d      	beq.n	8006c5e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c06:	f043 0220 	orr.w	r2, r3, #32
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e026      	b.n	8006c60 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f7ff ff54 	bl	8006aca <SPI_WaitFlagStateUntilTimeout>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01a      	beq.n	8006c5e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2c:	f043 0220 	orr.w	r2, r3, #32
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e013      	b.n	8006c60 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	2101      	movs	r1, #1
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7ff ff41 	bl	8006aca <SPI_WaitFlagStateUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c52:	f043 0220 	orr.w	r2, r3, #32
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e000      	b.n	8006c60 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c74:	4b1b      	ldr	r3, [pc, #108]	; (8006ce4 <SPI_EndRxTxTransaction+0x7c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1b      	ldr	r2, [pc, #108]	; (8006ce8 <SPI_EndRxTxTransaction+0x80>)
 8006c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7e:	0d5b      	lsrs	r3, r3, #21
 8006c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c84:	fb02 f303 	mul.w	r3, r2, r3
 8006c88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c92:	d112      	bne.n	8006cba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2180      	movs	r1, #128	; 0x80
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff ff13 	bl	8006aca <SPI_WaitFlagStateUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d016      	beq.n	8006cd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cae:	f043 0220 	orr.w	r2, r3, #32
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e00f      	b.n	8006cda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd0:	2b80      	cmp	r3, #128	; 0x80
 8006cd2:	d0f2      	beq.n	8006cba <SPI_EndRxTxTransaction+0x52>
 8006cd4:	e000      	b.n	8006cd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006cd6:	bf00      	nop
  }

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000078 	.word	0x20000078
 8006ce8:	165e9f81 	.word	0x165e9f81

08006cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e01d      	b.n	8006d3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fb feca 	bl	8002aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f000 fa26 	bl	800717c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0201 	orr.w	r2, r2, #1
 8006d58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b06      	cmp	r3, #6
 8006d6a:	d007      	beq.n	8006d7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b086      	sub	sp, #24
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e083      	b.n	8006ea6 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fb fe34 	bl	8002a20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6812      	ldr	r2, [r2, #0]
 8006dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dce:	f023 0307 	bic.w	r3, r3, #7
 8006dd2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4610      	mov	r0, r2
 8006de0:	f000 f9cc 	bl	800717c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0c:	f023 0303 	bic.w	r3, r3, #3
 8006e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e2a:	f023 030c 	bic.w	r3, r3, #12
 8006e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	021b      	lsls	r3, r3, #8
 8006e46:	4313      	orrs	r3, r2
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	011a      	lsls	r2, r3, #4
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	031b      	lsls	r3, r3, #12
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e68:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e70:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <HAL_TIM_Encoder_Start+0x16>
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d008      	beq.n	8006ed4 <HAL_TIM_Encoder_Start+0x26>
 8006ec2:	e00f      	b.n	8006ee4 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	2100      	movs	r1, #0
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 f9f5 	bl	80072bc <TIM_CCxChannelCmd>
      break;
 8006ed2:	e016      	b.n	8006f02 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	2104      	movs	r1, #4
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 f9ed 	bl	80072bc <TIM_CCxChannelCmd>
      break;
 8006ee2:	e00e      	b.n	8006f02 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	2100      	movs	r1, #0
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 f9e5 	bl	80072bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	2104      	movs	r1, #4
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 f9de 	bl	80072bc <TIM_CCxChannelCmd>
      break;
 8006f00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d122      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d11b      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0202 	mvn.w	r2, #2
 8006f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f8ee 	bl	8007140 <HAL_TIM_IC_CaptureCallback>
 8006f64:	e005      	b.n	8006f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f8e0 	bl	800712c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f8f1 	bl	8007154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d122      	bne.n	8006fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d11b      	bne.n	8006fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0204 	mvn.w	r2, #4
 8006f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f8c4 	bl	8007140 <HAL_TIM_IC_CaptureCallback>
 8006fb8:	e005      	b.n	8006fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f8b6 	bl	800712c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f8c7 	bl	8007154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b08      	cmp	r3, #8
 8006fd8:	d122      	bne.n	8007020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0308 	and.w	r3, r3, #8
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d11b      	bne.n	8007020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0208 	mvn.w	r2, #8
 8006ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2204      	movs	r2, #4
 8006ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	f003 0303 	and.w	r3, r3, #3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f89a 	bl	8007140 <HAL_TIM_IC_CaptureCallback>
 800700c:	e005      	b.n	800701a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f88c 	bl	800712c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f89d 	bl	8007154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0310 	and.w	r3, r3, #16
 800702a:	2b10      	cmp	r3, #16
 800702c:	d122      	bne.n	8007074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b10      	cmp	r3, #16
 800703a:	d11b      	bne.n	8007074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0210 	mvn.w	r2, #16
 8007044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2208      	movs	r2, #8
 800704a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f870 	bl	8007140 <HAL_TIM_IC_CaptureCallback>
 8007060:	e005      	b.n	800706e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f862 	bl	800712c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f873 	bl	8007154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b01      	cmp	r3, #1
 8007080:	d10e      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b01      	cmp	r3, #1
 800708e:	d107      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0201 	mvn.w	r2, #1
 8007098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7fa fbda 	bl	8001854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070aa:	2b80      	cmp	r3, #128	; 0x80
 80070ac:	d10e      	bne.n	80070cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b8:	2b80      	cmp	r3, #128	; 0x80
 80070ba:	d107      	bne.n	80070cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f9a4 	bl	8007414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d6:	2b40      	cmp	r3, #64	; 0x40
 80070d8:	d10e      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b40      	cmp	r3, #64	; 0x40
 80070e6:	d107      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f838 	bl	8007168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b20      	cmp	r3, #32
 8007104:	d10e      	bne.n	8007124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b20      	cmp	r3, #32
 8007112:	d107      	bne.n	8007124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f06f 0220 	mvn.w	r2, #32
 800711c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f96e 	bl	8007400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a40      	ldr	r2, [pc, #256]	; (8007290 <TIM_Base_SetConfig+0x114>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d013      	beq.n	80071bc <TIM_Base_SetConfig+0x40>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719a:	d00f      	beq.n	80071bc <TIM_Base_SetConfig+0x40>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a3d      	ldr	r2, [pc, #244]	; (8007294 <TIM_Base_SetConfig+0x118>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00b      	beq.n	80071bc <TIM_Base_SetConfig+0x40>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a3c      	ldr	r2, [pc, #240]	; (8007298 <TIM_Base_SetConfig+0x11c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d007      	beq.n	80071bc <TIM_Base_SetConfig+0x40>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a3b      	ldr	r2, [pc, #236]	; (800729c <TIM_Base_SetConfig+0x120>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_Base_SetConfig+0x40>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a3a      	ldr	r2, [pc, #232]	; (80072a0 <TIM_Base_SetConfig+0x124>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d108      	bne.n	80071ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a2f      	ldr	r2, [pc, #188]	; (8007290 <TIM_Base_SetConfig+0x114>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d02b      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071dc:	d027      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a2c      	ldr	r2, [pc, #176]	; (8007294 <TIM_Base_SetConfig+0x118>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d023      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a2b      	ldr	r2, [pc, #172]	; (8007298 <TIM_Base_SetConfig+0x11c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d01f      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a2a      	ldr	r2, [pc, #168]	; (800729c <TIM_Base_SetConfig+0x120>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d01b      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a29      	ldr	r2, [pc, #164]	; (80072a0 <TIM_Base_SetConfig+0x124>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d017      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a28      	ldr	r2, [pc, #160]	; (80072a4 <TIM_Base_SetConfig+0x128>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a27      	ldr	r2, [pc, #156]	; (80072a8 <TIM_Base_SetConfig+0x12c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00f      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a26      	ldr	r2, [pc, #152]	; (80072ac <TIM_Base_SetConfig+0x130>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00b      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a25      	ldr	r2, [pc, #148]	; (80072b0 <TIM_Base_SetConfig+0x134>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d007      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a24      	ldr	r2, [pc, #144]	; (80072b4 <TIM_Base_SetConfig+0x138>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d003      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a23      	ldr	r2, [pc, #140]	; (80072b8 <TIM_Base_SetConfig+0x13c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d108      	bne.n	8007240 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a0a      	ldr	r2, [pc, #40]	; (8007290 <TIM_Base_SetConfig+0x114>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_Base_SetConfig+0xf8>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a0c      	ldr	r2, [pc, #48]	; (80072a0 <TIM_Base_SetConfig+0x124>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d103      	bne.n	800727c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	615a      	str	r2, [r3, #20]
}
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	40010000 	.word	0x40010000
 8007294:	40000400 	.word	0x40000400
 8007298:	40000800 	.word	0x40000800
 800729c:	40000c00 	.word	0x40000c00
 80072a0:	40010400 	.word	0x40010400
 80072a4:	40014000 	.word	0x40014000
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800
 80072b0:	40001800 	.word	0x40001800
 80072b4:	40001c00 	.word	0x40001c00
 80072b8:	40002000 	.word	0x40002000

080072bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2201      	movs	r2, #1
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1a      	ldr	r2, [r3, #32]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	43db      	mvns	r3, r3
 80072de:	401a      	ands	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	fa01 f303 	lsl.w	r3, r1, r3
 80072f4:	431a      	orrs	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e05a      	b.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a21      	ldr	r2, [pc, #132]	; (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d022      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736c:	d01d      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1d      	ldr	r2, [pc, #116]	; (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d018      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1a      	ldr	r2, [pc, #104]	; (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00e      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a18      	ldr	r2, [pc, #96]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d009      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a17      	ldr	r2, [pc, #92]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a15      	ldr	r2, [pc, #84]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d10c      	bne.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	40000c00 	.word	0x40000c00
 80073f4:	40010400 	.word	0x40010400
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40001800 	.word	0x40001800

08007400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007428:	b084      	sub	sp, #16
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	f107 001c 	add.w	r0, r7, #28
 8007436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800743e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007440:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007442:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007446:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800744a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800744e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007452:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007462:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	b004      	add	sp, #16
 800747c:	4770      	bx	lr

0800747e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2203      	movs	r2, #3
 80074c6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80074c8:	2002      	movs	r0, #2
 80074ca:	f7fb fcc7 	bl	8002e5c <HAL_Delay>
  
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0303 	and.w	r3, r3, #3
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007512:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007518:	431a      	orrs	r2, r3
                       Command->CPSM);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800751e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800752e:	f023 030f 	bic.w	r3, r3, #15
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	b2db      	uxtb	r3, r3
}
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3314      	adds	r3, #20
 8007570:	461a      	mov	r2, r3
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	4413      	add	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
}  
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80075ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80075b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80075ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0

}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80075ee:	2310      	movs	r3, #16
 80075f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075f2:	2340      	movs	r3, #64	; 0x40
 80075f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007600:	f107 0308 	add.w	r3, r7, #8
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff ff74 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800760c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007610:	2110      	movs	r1, #16
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa40 	bl	8007a98 <SDMMC_GetCmdResp1>
 8007618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800761a:	69fb      	ldr	r3, [r7, #28]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3720      	adds	r7, #32
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007632:	2311      	movs	r3, #17
 8007634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007636:	2340      	movs	r3, #64	; 0x40
 8007638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800763e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007642:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007644:	f107 0308 	add.w	r3, r7, #8
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7ff ff52 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007650:	f241 3288 	movw	r2, #5000	; 0x1388
 8007654:	2111      	movs	r1, #17
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa1e 	bl	8007a98 <SDMMC_GetCmdResp1>
 800765c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800765e:	69fb      	ldr	r3, [r7, #28]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007676:	2312      	movs	r3, #18
 8007678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800767a:	2340      	movs	r3, #64	; 0x40
 800767c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800767e:	2300      	movs	r3, #0
 8007680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007686:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007688:	f107 0308 	add.w	r3, r7, #8
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff ff30 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007694:	f241 3288 	movw	r2, #5000	; 0x1388
 8007698:	2112      	movs	r1, #18
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f9fc 	bl	8007a98 <SDMMC_GetCmdResp1>
 80076a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076a2:	69fb      	ldr	r3, [r7, #28]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3720      	adds	r7, #32
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80076ba:	2318      	movs	r3, #24
 80076bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076be:	2340      	movs	r3, #64	; 0x40
 80076c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076cc:	f107 0308 	add.w	r3, r7, #8
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7ff ff0e 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80076d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076dc:	2118      	movs	r1, #24
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f9da 	bl	8007a98 <SDMMC_GetCmdResp1>
 80076e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076e6:	69fb      	ldr	r3, [r7, #28]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3720      	adds	r7, #32
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80076fe:	2319      	movs	r3, #25
 8007700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007702:	2340      	movs	r3, #64	; 0x40
 8007704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800770a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800770e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007710:	f107 0308 	add.w	r3, r7, #8
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff feec 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800771c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007720:	2119      	movs	r1, #25
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f9b8 	bl	8007a98 <SDMMC_GetCmdResp1>
 8007728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800772a:	69fb      	ldr	r3, [r7, #28]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3720      	adds	r7, #32
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007740:	230c      	movs	r3, #12
 8007742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007744:	2340      	movs	r3, #64	; 0x40
 8007746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007748:	2300      	movs	r3, #0
 800774a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800774c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007750:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007752:	f107 0308 	add.w	r3, r7, #8
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff fecb 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800775e:	4a05      	ldr	r2, [pc, #20]	; (8007774 <SDMMC_CmdStopTransfer+0x40>)
 8007760:	210c      	movs	r1, #12
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f998 	bl	8007a98 <SDMMC_GetCmdResp1>
 8007768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800776a:	69fb      	ldr	r3, [r7, #28]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	05f5e100 	.word	0x05f5e100

08007778 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	; 0x28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007788:	2307      	movs	r3, #7
 800778a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800778c:	2340      	movs	r3, #64	; 0x40
 800778e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007790:	2300      	movs	r3, #0
 8007792:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007798:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800779a:	f107 0310 	add.w	r3, r7, #16
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff fea7 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80077a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077aa:	2107      	movs	r1, #7
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f973 	bl	8007a98 <SDMMC_GetCmdResp1>
 80077b2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3728      	adds	r7, #40	; 0x28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b088      	sub	sp, #32
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80077ce:	2300      	movs	r3, #0
 80077d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077dc:	f107 0308 	add.w	r3, r7, #8
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fe86 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f92d 	bl	8007a48 <SDMMC_GetCmdError>
 80077ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077f0:	69fb      	ldr	r3, [r7, #28]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b088      	sub	sp, #32
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007802:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007808:	2308      	movs	r3, #8
 800780a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800780c:	2340      	movs	r3, #64	; 0x40
 800780e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007810:	2300      	movs	r3, #0
 8007812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007818:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800781a:	f107 0308 	add.w	r3, r7, #8
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff fe67 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fb16 	bl	8007e58 <SDMMC_GetCmdResp7>
 800782c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800782e:	69fb      	ldr	r3, [r7, #28]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3720      	adds	r7, #32
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007846:	2337      	movs	r3, #55	; 0x37
 8007848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800784a:	2340      	movs	r3, #64	; 0x40
 800784c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007856:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007858:	f107 0308 	add.w	r3, r7, #8
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff fe48 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007864:	f241 3288 	movw	r2, #5000	; 0x1388
 8007868:	2137      	movs	r1, #55	; 0x37
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f914 	bl	8007a98 <SDMMC_GetCmdResp1>
 8007870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007872:	69fb      	ldr	r3, [r7, #28]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3720      	adds	r7, #32
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800788c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007892:	2329      	movs	r3, #41	; 0x29
 8007894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007896:	2340      	movs	r3, #64	; 0x40
 8007898:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800789a:	2300      	movs	r3, #0
 800789c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800789e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078a4:	f107 0308 	add.w	r3, r7, #8
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff fe22 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fa23 	bl	8007cfc <SDMMC_GetCmdResp3>
 80078b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078b8:	69fb      	ldr	r3, [r7, #28]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b088      	sub	sp, #32
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80078d0:	2306      	movs	r3, #6
 80078d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078d4:	2340      	movs	r3, #64	; 0x40
 80078d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078e2:	f107 0308 	add.w	r3, r7, #8
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff fe03 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80078ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f2:	2106      	movs	r1, #6
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f8cf 	bl	8007a98 <SDMMC_GetCmdResp1>
 80078fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078fc:	69fb      	ldr	r3, [r7, #28]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3720      	adds	r7, #32
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b088      	sub	sp, #32
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007912:	2333      	movs	r3, #51	; 0x33
 8007914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007916:	2340      	movs	r3, #64	; 0x40
 8007918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800791a:	2300      	movs	r3, #0
 800791c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800791e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007922:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007924:	f107 0308 	add.w	r3, r7, #8
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fde2 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007930:	f241 3288 	movw	r2, #5000	; 0x1388
 8007934:	2133      	movs	r1, #51	; 0x33
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f8ae 	bl	8007a98 <SDMMC_GetCmdResp1>
 800793c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800793e:	69fb      	ldr	r3, [r7, #28]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3720      	adds	r7, #32
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007954:	2302      	movs	r3, #2
 8007956:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007958:	23c0      	movs	r3, #192	; 0xc0
 800795a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007964:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007966:	f107 0308 	add.w	r3, r7, #8
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7ff fdc1 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f97c 	bl	8007c70 <SDMMC_GetCmdResp2>
 8007978:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800797a:	69fb      	ldr	r3, [r7, #28]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3720      	adds	r7, #32
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007992:	2309      	movs	r3, #9
 8007994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007996:	23c0      	movs	r3, #192	; 0xc0
 8007998:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800799a:	2300      	movs	r3, #0
 800799c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800799e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079a4:	f107 0308 	add.w	r3, r7, #8
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fda2 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f95d 	bl	8007c70 <SDMMC_GetCmdResp2>
 80079b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079b8:	69fb      	ldr	r3, [r7, #28]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3720      	adds	r7, #32
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b088      	sub	sp, #32
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80079d0:	2303      	movs	r3, #3
 80079d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079d4:	2340      	movs	r3, #64	; 0x40
 80079d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079e2:	f107 0308 	add.w	r3, r7, #8
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fd83 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	2103      	movs	r1, #3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f9bc 	bl	8007d70 <SDMMC_GetCmdResp6>
 80079f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079fa:	69fb      	ldr	r3, [r7, #28]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3720      	adds	r7, #32
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007a12:	230d      	movs	r3, #13
 8007a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a16:	2340      	movs	r3, #64	; 0x40
 8007a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a24:	f107 0308 	add.w	r3, r7, #8
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fd62 	bl	80074f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a34:	210d      	movs	r1, #13
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f82e 	bl	8007a98 <SDMMC_GetCmdResp1>
 8007a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3720      	adds	r7, #32
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007a48:	b490      	push	{r4, r7}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a50:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <SDMMC_GetCmdError+0x48>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a0f      	ldr	r2, [pc, #60]	; (8007a94 <SDMMC_GetCmdError+0x4c>)
 8007a56:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5a:	0a5b      	lsrs	r3, r3, #9
 8007a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007a64:	4623      	mov	r3, r4
 8007a66:	1e5c      	subs	r4, r3, #1
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d102      	bne.n	8007a72 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a70:	e009      	b.n	8007a86 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0f2      	beq.n	8007a64 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	22c5      	movs	r2, #197	; 0xc5
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bc90      	pop	{r4, r7}
 8007a8e:	4770      	bx	lr
 8007a90:	20000078 	.word	0x20000078
 8007a94:	10624dd3 	.word	0x10624dd3

08007a98 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007a98:	b590      	push	{r4, r7, lr}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007aa6:	4b6f      	ldr	r3, [pc, #444]	; (8007c64 <SDMMC_GetCmdResp1+0x1cc>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a6f      	ldr	r2, [pc, #444]	; (8007c68 <SDMMC_GetCmdResp1+0x1d0>)
 8007aac:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab0:	0a5b      	lsrs	r3, r3, #9
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007ab8:	4623      	mov	r3, r4
 8007aba:	1e5c      	subs	r4, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ac0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ac4:	e0c9      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aca:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0f0      	beq.n	8007ab8 <SDMMC_GetCmdResp1+0x20>
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1eb      	bne.n	8007ab8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2204      	movs	r2, #4
 8007af0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007af2:	2304      	movs	r3, #4
 8007af4:	e0b1      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d004      	beq.n	8007b0c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e0a6      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	22c5      	movs	r2, #197	; 0xc5
 8007b10:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff fd18 	bl	8007548 <SDIO_GetCommandResponse>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d001      	beq.n	8007b26 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e099      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007b26:	2100      	movs	r1, #0
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7ff fd1a 	bl	8007562 <SDIO_GetResponse>
 8007b2e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	4b4e      	ldr	r3, [pc, #312]	; (8007c6c <SDMMC_GetCmdResp1+0x1d4>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e08d      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	da02      	bge.n	8007b4a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b48:	e087      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007b54:	2340      	movs	r3, #64	; 0x40
 8007b56:	e080      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007b62:	2380      	movs	r3, #128	; 0x80
 8007b64:	e079      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b74:	e071      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b84:	e069      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b94:	e061      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007ba0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ba4:	e059      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bb4:	e051      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bc4:	e049      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007bd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bd4:	e041      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007be0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007be4:	e039      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bf4:	e031      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007c00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c04:	e029      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007c10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c14:	e021      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007c20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c24:	e019      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007c30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c34:	e011      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007c40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c44:	e009      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007c50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007c54:	e001      	b.n	8007c5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd90      	pop	{r4, r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000078 	.word	0x20000078
 8007c68:	10624dd3 	.word	0x10624dd3
 8007c6c:	fdffe008 	.word	0xfdffe008

08007c70 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007c70:	b490      	push	{r4, r7}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c78:	4b1e      	ldr	r3, [pc, #120]	; (8007cf4 <SDMMC_GetCmdResp2+0x84>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a1e      	ldr	r2, [pc, #120]	; (8007cf8 <SDMMC_GetCmdResp2+0x88>)
 8007c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c82:	0a5b      	lsrs	r3, r3, #9
 8007c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007c8c:	4623      	mov	r3, r4
 8007c8e:	1e5c      	subs	r4, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c98:	e026      	b.n	8007ce8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0f0      	beq.n	8007c8c <SDMMC_GetCmdResp2+0x1c>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1eb      	bne.n	8007c8c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d004      	beq.n	8007cca <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2204      	movs	r2, #4
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cc6:	2304      	movs	r3, #4
 8007cc8:	e00e      	b.n	8007ce8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e003      	b.n	8007ce8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	22c5      	movs	r2, #197	; 0xc5
 8007ce4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bc90      	pop	{r4, r7}
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000078 	.word	0x20000078
 8007cf8:	10624dd3 	.word	0x10624dd3

08007cfc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007cfc:	b490      	push	{r4, r7}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d04:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <SDMMC_GetCmdResp3+0x6c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a18      	ldr	r2, [pc, #96]	; (8007d6c <SDMMC_GetCmdResp3+0x70>)
 8007d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0e:	0a5b      	lsrs	r3, r3, #9
 8007d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d18:	4623      	mov	r3, r4
 8007d1a:	1e5c      	subs	r4, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d24:	e01b      	b.n	8007d5e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0f0      	beq.n	8007d18 <SDMMC_GetCmdResp3+0x1c>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1eb      	bne.n	8007d18 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d52:	2304      	movs	r3, #4
 8007d54:	e003      	b.n	8007d5e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	22c5      	movs	r2, #197	; 0xc5
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bc90      	pop	{r4, r7}
 8007d66:	4770      	bx	lr
 8007d68:	20000078 	.word	0x20000078
 8007d6c:	10624dd3 	.word	0x10624dd3

08007d70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007d70:	b590      	push	{r4, r7, lr}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d7e:	4b34      	ldr	r3, [pc, #208]	; (8007e50 <SDMMC_GetCmdResp6+0xe0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a34      	ldr	r2, [pc, #208]	; (8007e54 <SDMMC_GetCmdResp6+0xe4>)
 8007d84:	fba2 2303 	umull	r2, r3, r2, r3
 8007d88:	0a5b      	lsrs	r3, r3, #9
 8007d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d92:	4623      	mov	r3, r4
 8007d94:	1e5c      	subs	r4, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d102      	bne.n	8007da0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d9e:	e052      	b.n	8007e46 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0f0      	beq.n	8007d92 <SDMMC_GetCmdResp6+0x22>
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1eb      	bne.n	8007d92 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d004      	beq.n	8007dd0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007dcc:	2304      	movs	r3, #4
 8007dce:	e03a      	b.n	8007e46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d004      	beq.n	8007de6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2201      	movs	r2, #1
 8007de0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e02f      	b.n	8007e46 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff fbae 	bl	8007548 <SDIO_GetCommandResponse>
 8007dec:	4603      	mov	r3, r0
 8007dee:	461a      	mov	r2, r3
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d001      	beq.n	8007dfa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e025      	b.n	8007e46 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	22c5      	movs	r2, #197	; 0xc5
 8007dfe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007e00:	2100      	movs	r1, #0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7ff fbad 	bl	8007562 <SDIO_GetResponse>
 8007e08:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d106      	bne.n	8007e22 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	0c1b      	lsrs	r3, r3, #16
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e011      	b.n	8007e46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e30:	e009      	b.n	8007e46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e40:	e001      	b.n	8007e46 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd90      	pop	{r4, r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000078 	.word	0x20000078
 8007e54:	10624dd3 	.word	0x10624dd3

08007e58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007e58:	b490      	push	{r4, r7}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e60:	4b21      	ldr	r3, [pc, #132]	; (8007ee8 <SDMMC_GetCmdResp7+0x90>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a21      	ldr	r2, [pc, #132]	; (8007eec <SDMMC_GetCmdResp7+0x94>)
 8007e66:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6a:	0a5b      	lsrs	r3, r3, #9
 8007e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007e74:	4623      	mov	r3, r4
 8007e76:	1e5c      	subs	r4, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d102      	bne.n	8007e82 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e80:	e02c      	b.n	8007edc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e86:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0f0      	beq.n	8007e74 <SDMMC_GetCmdResp7+0x1c>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1eb      	bne.n	8007e74 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d004      	beq.n	8007eb2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2204      	movs	r2, #4
 8007eac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007eae:	2304      	movs	r3, #4
 8007eb0:	e014      	b.n	8007edc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e009      	b.n	8007edc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2240      	movs	r2, #64	; 0x40
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007eda:	2300      	movs	r3, #0
  
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc90      	pop	{r4, r7}
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000078 	.word	0x20000078
 8007eec:	10624dd3 	.word	0x10624dd3

08007ef0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007ef4:	4904      	ldr	r1, [pc, #16]	; (8007f08 <MX_FATFS_Init+0x18>)
 8007ef6:	4805      	ldr	r0, [pc, #20]	; (8007f0c <MX_FATFS_Init+0x1c>)
 8007ef8:	f003 fc0c 	bl	800b714 <FATFS_LinkDriver>
 8007efc:	4603      	mov	r3, r0
 8007efe:	461a      	mov	r2, r3
 8007f00:	4b03      	ldr	r3, [pc, #12]	; (8007f10 <MX_FATFS_Init+0x20>)
 8007f02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007f04:	bf00      	nop
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20004d90 	.word	0x20004d90
 8007f0c:	0800e58c 	.word	0x0800e58c
 8007f10:	20004d8c 	.word	0x20004d8c

08007f14 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007f2e:	f000 f896 	bl	800805e <BSP_SD_IsDetected>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d001      	beq.n	8007f3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e012      	b.n	8007f62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007f3c:	480b      	ldr	r0, [pc, #44]	; (8007f6c <BSP_SD_Init+0x48>)
 8007f3e:	f7fc fe83 	bl	8004c48 <HAL_SD_Init>
 8007f42:	4603      	mov	r3, r0
 8007f44:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f50:	4806      	ldr	r0, [pc, #24]	; (8007f6c <BSP_SD_Init+0x48>)
 8007f52:	f7fd fc43 	bl	80057dc <HAL_SD_ConfigWideBusOperation>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007f60:	79fb      	ldrb	r3, [r7, #7]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20001bc0 	.word	0x20001bc0

08007f70 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	68f9      	ldr	r1, [r7, #12]
 8007f86:	4806      	ldr	r0, [pc, #24]	; (8007fa0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007f88:	f7fc feee 	bl	8004d68 <HAL_SD_ReadBlocks_DMA>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20001bc0 	.word	0x20001bc0

08007fa4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	68f9      	ldr	r1, [r7, #12]
 8007fba:	4806      	ldr	r0, [pc, #24]	; (8007fd4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007fbc:	f7fc ffbe 	bl	8004f3c <HAL_SD_WriteBlocks_DMA>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20001bc0 	.word	0x20001bc0

08007fd8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007fdc:	4805      	ldr	r0, [pc, #20]	; (8007ff4 <BSP_SD_GetCardState+0x1c>)
 8007fde:	f7fd fc79 	bl	80058d4 <HAL_SD_GetCardState>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	bf14      	ite	ne
 8007fe8:	2301      	movne	r3, #1
 8007fea:	2300      	moveq	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20001bc0 	.word	0x20001bc0

08007ff8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4803      	ldr	r0, [pc, #12]	; (8008010 <BSP_SD_GetCardInfo+0x18>)
 8008004:	f7fd fbbe 	bl	8005784 <HAL_SD_GetCardInfo>
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20001bc0 	.word	0x20001bc0

08008014 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800801c:	f000 f818 	bl	8008050 <BSP_SD_AbortCallback>
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008030:	f000 fa54 	bl	80084dc <BSP_SD_WriteCpltCallback>
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008044:	f000 fa56 	bl	80084f4 <BSP_SD_ReadCpltCallback>
}
 8008048:	bf00      	nop
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0

}
 8008054:	bf00      	nop
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008064:	2301      	movs	r3, #1
 8008066:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8008068:	f000 f80c 	bl	8008084 <BSP_PlatformIsDetected>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008072:	2300      	movs	r3, #0
 8008074:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	b2db      	uxtb	r3, r3
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800808a:	2301      	movs	r3, #1
 800808c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800808e:	2180      	movs	r1, #128	; 0x80
 8008090:	480a      	ldr	r0, [pc, #40]	; (80080bc <BSP_PlatformIsDetected+0x38>)
 8008092:	f7fc f937 	bl	8004304 <HAL_GPIO_ReadPin>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800809c:	2300      	movs	r3, #0
 800809e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    //printf("s - %u\n", status);
    if(status == SD_PRESENT) status = SD_NOT_PRESENT;
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d102      	bne.n	80080ac <BSP_PlatformIsDetected+0x28>
 80080a6:	2300      	movs	r3, #0
 80080a8:	71fb      	strb	r3, [r7, #7]
 80080aa:	e001      	b.n	80080b0 <BSP_PlatformIsDetected+0x2c>
    else status = SD_PRESENT;
 80080ac:	2301      	movs	r3, #1
 80080ae:	71fb      	strb	r3, [r7, #7]
    //printf("s - %u\n", status);
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80080b0:	79fb      	ldrb	r3, [r7, #7]
}  
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	40020800 	.word	0x40020800

080080c0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80080c8:	f7fa febc 	bl	8002e44 <HAL_GetTick>
 80080cc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80080ce:	e006      	b.n	80080de <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80080d0:	f7ff ff82 	bl	8007fd8 <BSP_SD_GetCardState>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	e009      	b.n	80080f2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80080de:	f7fa feb1 	bl	8002e44 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d8f0      	bhi.n	80080d0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80080ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008106:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <SD_CheckStatus+0x38>)
 8008108:	2201      	movs	r2, #1
 800810a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800810c:	f7ff ff64 	bl	8007fd8 <BSP_SD_GetCardState>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d107      	bne.n	8008126 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008116:	4b07      	ldr	r3, [pc, #28]	; (8008134 <SD_CheckStatus+0x38>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	f023 0301 	bic.w	r3, r3, #1
 8008120:	b2da      	uxtb	r2, r3
 8008122:	4b04      	ldr	r3, [pc, #16]	; (8008134 <SD_CheckStatus+0x38>)
 8008124:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008126:	4b03      	ldr	r3, [pc, #12]	; (8008134 <SD_CheckStatus+0x38>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b2db      	uxtb	r3, r3
}
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20000081 	.word	0x20000081

08008138 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008142:	f7ff feef 	bl	8007f24 <BSP_SD_Init>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d107      	bne.n	800815c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff ffd4 	bl	80080fc <SD_CheckStatus>
 8008154:	4603      	mov	r3, r0
 8008156:	461a      	mov	r2, r3
 8008158:	4b04      	ldr	r3, [pc, #16]	; (800816c <SD_initialize+0x34>)
 800815a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800815c:	4b03      	ldr	r3, [pc, #12]	; (800816c <SD_initialize+0x34>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	b2db      	uxtb	r3, r3
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000081 	.word	0x20000081

08008170 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800817a:	79fb      	ldrb	r3, [r7, #7]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff ffbd 	bl	80080fc <SD_CheckStatus>
 8008182:	4603      	mov	r3, r0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af00      	add	r7, sp, #0
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80081a0:	f247 5030 	movw	r0, #30000	; 0x7530
 80081a4:	f7ff ff8c 	bl	80080c0 <SD_CheckStatusWithTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	da01      	bge.n	80081b2 <SD_read+0x26>
  {
    return res;
 80081ae:	7ffb      	ldrb	r3, [r7, #31]
 80081b0:	e08b      	b.n	80082ca <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f040 8085 	bne.w	80082c8 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	68b8      	ldr	r0, [r7, #8]
 80081c4:	f7ff fed4 	bl	8007f70 <BSP_SD_ReadBlocks_DMA>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d133      	bne.n	8008236 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80081ce:	4b41      	ldr	r3, [pc, #260]	; (80082d4 <SD_read+0x148>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80081d4:	f7fa fe36 	bl	8002e44 <HAL_GetTick>
 80081d8:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80081da:	bf00      	nop
 80081dc:	4b3d      	ldr	r3, [pc, #244]	; (80082d4 <SD_read+0x148>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d108      	bne.n	80081f6 <SD_read+0x6a>
 80081e4:	f7fa fe2e 	bl	8002e44 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	f247 522f 	movw	r2, #29999	; 0x752f
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d9f2      	bls.n	80081dc <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80081f6:	4b37      	ldr	r3, [pc, #220]	; (80082d4 <SD_read+0x148>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d102      	bne.n	8008204 <SD_read+0x78>
      {
        res = RES_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	77fb      	strb	r3, [r7, #31]
 8008202:	e061      	b.n	80082c8 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8008204:	4b33      	ldr	r3, [pc, #204]	; (80082d4 <SD_read+0x148>)
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800820a:	f7fa fe1b 	bl	8002e44 <HAL_GetTick>
 800820e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008210:	e007      	b.n	8008222 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008212:	f7ff fee1 	bl	8007fd8 <BSP_SD_GetCardState>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <SD_read+0x96>
          {
            res = RES_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008220:	e052      	b.n	80082c8 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008222:	f7fa fe0f 	bl	8002e44 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008230:	4293      	cmp	r3, r2
 8008232:	d9ee      	bls.n	8008212 <SD_read+0x86>
 8008234:	e048      	b.n	80082c8 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8008236:	2300      	movs	r3, #0
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	e034      	b.n	80082a6 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	4619      	mov	r1, r3
 8008246:	4824      	ldr	r0, [pc, #144]	; (80082d8 <SD_read+0x14c>)
 8008248:	f7ff fe92 	bl	8007f70 <BSP_SD_ReadBlocks_DMA>
 800824c:	4603      	mov	r3, r0
 800824e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8008250:	7fbb      	ldrb	r3, [r7, #30]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d12c      	bne.n	80082b0 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8008256:	4b1f      	ldr	r3, [pc, #124]	; (80082d4 <SD_read+0x148>)
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800825c:	f7fa fdf2 	bl	8002e44 <HAL_GetTick>
 8008260:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008262:	bf00      	nop
 8008264:	4b1b      	ldr	r3, [pc, #108]	; (80082d4 <SD_read+0x148>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d108      	bne.n	800827e <SD_read+0xf2>
 800826c:	f7fa fdea 	bl	8002e44 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	f247 522f 	movw	r2, #29999	; 0x752f
 800827a:	4293      	cmp	r3, r2
 800827c:	d9f2      	bls.n	8008264 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800827e:	4b15      	ldr	r3, [pc, #84]	; (80082d4 <SD_read+0x148>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d016      	beq.n	80082b4 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	4a13      	ldr	r2, [pc, #76]	; (80082d8 <SD_read+0x14c>)
 800828a:	4618      	mov	r0, r3
 800828c:	4611      	mov	r1, r2
 800828e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008292:	461a      	mov	r2, r3
 8008294:	f003 fb3e 	bl	800b914 <memcpy>
          buff += BLOCKSIZE;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800829e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	3301      	adds	r3, #1
 80082a4:	61bb      	str	r3, [r7, #24]
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d8c6      	bhi.n	800823c <SD_read+0xb0>
 80082ae:	e002      	b.n	80082b6 <SD_read+0x12a>
        }
        else
        {
          break;
 80082b0:	bf00      	nop
 80082b2:	e000      	b.n	80082b6 <SD_read+0x12a>
            break;
 80082b4:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d104      	bne.n	80082c8 <SD_read+0x13c>
 80082be:	7fbb      	ldrb	r3, [r7, #30]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <SD_read+0x13c>
        res = RES_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 80082c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3720      	adds	r7, #32
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000494 	.word	0x20000494
 80082d8:	20000290 	.word	0x20000290

080082dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	607a      	str	r2, [r7, #4]
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	4603      	mov	r3, r0
 80082ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 80082f0:	4b4c      	ldr	r3, [pc, #304]	; (8008424 <SD_write+0x148>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80082f6:	f247 5030 	movw	r0, #30000	; 0x7530
 80082fa:	f7ff fee1 	bl	80080c0 <SD_CheckStatusWithTimeout>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	da01      	bge.n	8008308 <SD_write+0x2c>
  {
    return res;
 8008304:	7ffb      	ldrb	r3, [r7, #31]
 8008306:	e088      	b.n	800841a <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b00      	cmp	r3, #0
 8008310:	f040 8082 	bne.w	8008418 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	6879      	ldr	r1, [r7, #4]
 8008318:	68b8      	ldr	r0, [r7, #8]
 800831a:	f7ff fe43 	bl	8007fa4 <BSP_SD_WriteBlocks_DMA>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d130      	bne.n	8008386 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008324:	f7fa fd8e 	bl	8002e44 <HAL_GetTick>
 8008328:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800832a:	bf00      	nop
 800832c:	4b3d      	ldr	r3, [pc, #244]	; (8008424 <SD_write+0x148>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d108      	bne.n	8008346 <SD_write+0x6a>
 8008334:	f7fa fd86 	bl	8002e44 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	f247 522f 	movw	r2, #29999	; 0x752f
 8008342:	4293      	cmp	r3, r2
 8008344:	d9f2      	bls.n	800832c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8008346:	4b37      	ldr	r3, [pc, #220]	; (8008424 <SD_write+0x148>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <SD_write+0x78>
      {
        res = RES_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	77fb      	strb	r3, [r7, #31]
 8008352:	e061      	b.n	8008418 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8008354:	4b33      	ldr	r3, [pc, #204]	; (8008424 <SD_write+0x148>)
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800835a:	f7fa fd73 	bl	8002e44 <HAL_GetTick>
 800835e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008360:	e007      	b.n	8008372 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008362:	f7ff fe39 	bl	8007fd8 <BSP_SD_GetCardState>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d102      	bne.n	8008372 <SD_write+0x96>
          {
            res = RES_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	77fb      	strb	r3, [r7, #31]
            break;
 8008370:	e052      	b.n	8008418 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008372:	f7fa fd67 	bl	8002e44 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008380:	4293      	cmp	r3, r2
 8008382:	d9ee      	bls.n	8008362 <SD_write+0x86>
 8008384:	e048      	b.n	8008418 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8008386:	2300      	movs	r3, #0
 8008388:	61bb      	str	r3, [r7, #24]
 800838a:	e034      	b.n	80083f6 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800838c:	4b25      	ldr	r3, [pc, #148]	; (8008424 <SD_write+0x148>)
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	4619      	mov	r1, r3
 800839c:	4822      	ldr	r0, [pc, #136]	; (8008428 <SD_write+0x14c>)
 800839e:	f7ff fe01 	bl	8007fa4 <BSP_SD_WriteBlocks_DMA>
 80083a2:	4603      	mov	r3, r0
 80083a4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80083a6:	7fbb      	ldrb	r3, [r7, #30]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d129      	bne.n	8008400 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 80083ac:	f7fa fd4a 	bl	8002e44 <HAL_GetTick>
 80083b0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80083b2:	bf00      	nop
 80083b4:	4b1b      	ldr	r3, [pc, #108]	; (8008424 <SD_write+0x148>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d108      	bne.n	80083ce <SD_write+0xf2>
 80083bc:	f7fa fd42 	bl	8002e44 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d9f2      	bls.n	80083b4 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 80083ce:	4b15      	ldr	r3, [pc, #84]	; (8008424 <SD_write+0x148>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d016      	beq.n	8008404 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4a13      	ldr	r2, [pc, #76]	; (8008428 <SD_write+0x14c>)
 80083da:	4618      	mov	r0, r3
 80083dc:	4611      	mov	r1, r2
 80083de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083e2:	461a      	mov	r2, r3
 80083e4:	f003 fa96 	bl	800b914 <memcpy>
          buff += BLOCKSIZE;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80083ee:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	3301      	adds	r3, #1
 80083f4:	61bb      	str	r3, [r7, #24]
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d8c6      	bhi.n	800838c <SD_write+0xb0>
 80083fe:	e002      	b.n	8008406 <SD_write+0x12a>
        }
        else
        {
          break;
 8008400:	bf00      	nop
 8008402:	e000      	b.n	8008406 <SD_write+0x12a>
            break;
 8008404:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	429a      	cmp	r2, r3
 800840c:	d104      	bne.n	8008418 <SD_write+0x13c>
 800840e:	7fbb      	ldrb	r3, [r7, #30]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <SD_write+0x13c>
        res = RES_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8008418:	7ffb      	ldrb	r3, [r7, #31]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20000490 	.word	0x20000490
 8008428:	20000290 	.word	0x20000290

0800842c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08c      	sub	sp, #48	; 0x30
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	603a      	str	r2, [r7, #0]
 8008436:	71fb      	strb	r3, [r7, #7]
 8008438:	460b      	mov	r3, r1
 800843a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008442:	4b25      	ldr	r3, [pc, #148]	; (80084d8 <SD_ioctl+0xac>)
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <SD_ioctl+0x28>
 8008450:	2303      	movs	r3, #3
 8008452:	e03c      	b.n	80084ce <SD_ioctl+0xa2>

  switch (cmd)
 8008454:	79bb      	ldrb	r3, [r7, #6]
 8008456:	2b03      	cmp	r3, #3
 8008458:	d834      	bhi.n	80084c4 <SD_ioctl+0x98>
 800845a:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <SD_ioctl+0x34>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	08008471 	.word	0x08008471
 8008464:	08008479 	.word	0x08008479
 8008468:	08008491 	.word	0x08008491
 800846c:	080084ab 	.word	0x080084ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008476:	e028      	b.n	80084ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008478:	f107 030c 	add.w	r3, r7, #12
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff fdbb 	bl	8007ff8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800848e:	e01c      	b.n	80084ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	4618      	mov	r0, r3
 8008496:	f7ff fdaf 	bl	8007ff8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	b29a      	uxth	r2, r3
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80084a8:	e00f      	b.n	80084ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80084aa:	f107 030c 	add.w	r3, r7, #12
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff fda2 	bl	8007ff8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	0a5a      	lsrs	r2, r3, #9
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80084c2:	e002      	b.n	80084ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80084c4:	2304      	movs	r3, #4
 80084c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80084ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3730      	adds	r7, #48	; 0x30
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20000081 	.word	0x20000081

080084dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80084dc:	b480      	push	{r7}
 80084de:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 80084e0:	4b03      	ldr	r3, [pc, #12]	; (80084f0 <BSP_SD_WriteCpltCallback+0x14>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	601a      	str	r2, [r3, #0]
}
 80084e6:	bf00      	nop
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	20000490 	.word	0x20000490

080084f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80084f8:	4b03      	ldr	r3, [pc, #12]	; (8008508 <BSP_SD_ReadCpltCallback+0x14>)
 80084fa:	2201      	movs	r2, #1
 80084fc:	601a      	str	r2, [r3, #0]
}
 80084fe:	bf00      	nop
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	20000494 	.word	0x20000494

0800850c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	4a08      	ldr	r2, [pc, #32]	; (800853c <disk_status+0x30>)
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	79fa      	ldrb	r2, [r7, #7]
 8008524:	4905      	ldr	r1, [pc, #20]	; (800853c <disk_status+0x30>)
 8008526:	440a      	add	r2, r1
 8008528:	7a12      	ldrb	r2, [r2, #8]
 800852a:	4610      	mov	r0, r2
 800852c:	4798      	blx	r3
 800852e:	4603      	mov	r3, r0
 8008530:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	200006c0 	.word	0x200006c0

08008540 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	4a0d      	ldr	r2, [pc, #52]	; (8008588 <disk_initialize+0x48>)
 8008552:	5cd3      	ldrb	r3, [r2, r3]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d111      	bne.n	800857c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	4a0b      	ldr	r2, [pc, #44]	; (8008588 <disk_initialize+0x48>)
 800855c:	2101      	movs	r1, #1
 800855e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	4a09      	ldr	r2, [pc, #36]	; (8008588 <disk_initialize+0x48>)
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	79fa      	ldrb	r2, [r7, #7]
 800856e:	4906      	ldr	r1, [pc, #24]	; (8008588 <disk_initialize+0x48>)
 8008570:	440a      	add	r2, r1
 8008572:	7a12      	ldrb	r2, [r2, #8]
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	200006c0 	.word	0x200006c0

0800858c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800858c:	b590      	push	{r4, r7, lr}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	4a0a      	ldr	r2, [pc, #40]	; (80085c8 <disk_read+0x3c>)
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	689c      	ldr	r4, [r3, #8]
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	4a07      	ldr	r2, [pc, #28]	; (80085c8 <disk_read+0x3c>)
 80085ac:	4413      	add	r3, r2
 80085ae:	7a18      	ldrb	r0, [r3, #8]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	47a0      	blx	r4
 80085b8:	4603      	mov	r3, r0
 80085ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80085bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	371c      	adds	r7, #28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd90      	pop	{r4, r7, pc}
 80085c6:	bf00      	nop
 80085c8:	200006c0 	.word	0x200006c0

080085cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80085cc:	b590      	push	{r4, r7, lr}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	4a0a      	ldr	r2, [pc, #40]	; (8008608 <disk_write+0x3c>)
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	68dc      	ldr	r4, [r3, #12]
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	4a07      	ldr	r2, [pc, #28]	; (8008608 <disk_write+0x3c>)
 80085ec:	4413      	add	r3, r2
 80085ee:	7a18      	ldrb	r0, [r3, #8]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	47a0      	blx	r4
 80085f8:	4603      	mov	r3, r0
 80085fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	bd90      	pop	{r4, r7, pc}
 8008606:	bf00      	nop
 8008608:	200006c0 	.word	0x200006c0

0800860c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	603a      	str	r2, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
 8008618:	460b      	mov	r3, r1
 800861a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	4a09      	ldr	r2, [pc, #36]	; (8008644 <disk_ioctl+0x38>)
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	79fa      	ldrb	r2, [r7, #7]
 800862a:	4906      	ldr	r1, [pc, #24]	; (8008644 <disk_ioctl+0x38>)
 800862c:	440a      	add	r2, r1
 800862e:	7a10      	ldrb	r0, [r2, #8]
 8008630:	79b9      	ldrb	r1, [r7, #6]
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	4798      	blx	r3
 8008636:	4603      	mov	r3, r0
 8008638:	73fb      	strb	r3, [r7, #15]
  return res;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	200006c0 	.word	0x200006c0

08008648 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3301      	adds	r3, #1
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008658:	89fb      	ldrh	r3, [r7, #14]
 800865a:	021b      	lsls	r3, r3, #8
 800865c:	b21a      	sxth	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	b21b      	sxth	r3, r3
 8008664:	4313      	orrs	r3, r2
 8008666:	b21b      	sxth	r3, r3
 8008668:	81fb      	strh	r3, [r7, #14]
	return rv;
 800866a:	89fb      	ldrh	r3, [r7, #14]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3303      	adds	r3, #3
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	021b      	lsls	r3, r3, #8
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	3202      	adds	r2, #2
 8008690:	7812      	ldrb	r2, [r2, #0]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	3201      	adds	r2, #1
 800869e:	7812      	ldrb	r2, [r2, #0]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	021b      	lsls	r3, r3, #8
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	7812      	ldrb	r2, [r2, #0]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80086b0:	68fb      	ldr	r3, [r7, #12]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	887a      	ldrh	r2, [r7, #2]
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	887b      	ldrh	r3, [r7, #2]
 80086d8:	0a1b      	lsrs	r3, r3, #8
 80086da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	607a      	str	r2, [r7, #4]
 80086e2:	887a      	ldrh	r2, [r7, #2]
 80086e4:	b2d2      	uxtb	r2, r2
 80086e6:	701a      	strb	r2, [r3, #0]
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	b2d2      	uxtb	r2, r2
 8008708:	701a      	strb	r2, [r3, #0]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	0a1b      	lsrs	r3, r3, #8
 800870e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	607a      	str	r2, [r7, #4]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	b2d2      	uxtb	r2, r2
 800871a:	701a      	strb	r2, [r3, #0]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	0a1b      	lsrs	r3, r3, #8
 8008720:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	b2d2      	uxtb	r2, r2
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	0a1b      	lsrs	r3, r3, #8
 8008732:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	607a      	str	r2, [r7, #4]
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00d      	beq.n	8008782 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	1c53      	adds	r3, r2, #1
 800876a:	613b      	str	r3, [r7, #16]
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	1c59      	adds	r1, r3, #1
 8008770:	6179      	str	r1, [r7, #20]
 8008772:	7812      	ldrb	r2, [r2, #0]
 8008774:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3b01      	subs	r3, #1
 800877a:	607b      	str	r3, [r7, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1f1      	bne.n	8008766 <mem_cpy+0x1a>
	}
}
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800878e:	b480      	push	{r7}
 8008790:	b087      	sub	sp, #28
 8008792:	af00      	add	r7, sp, #0
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	60b9      	str	r1, [r7, #8]
 8008798:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	617a      	str	r2, [r7, #20]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1f3      	bne.n	800879e <mem_set+0x10>
}
 80087b6:	bf00      	nop
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80087c2:	b480      	push	{r7}
 80087c4:	b089      	sub	sp, #36	; 0x24
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	61fb      	str	r3, [r7, #28]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	61fa      	str	r2, [r7, #28]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	4619      	mov	r1, r3
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	61ba      	str	r2, [r7, #24]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	1acb      	subs	r3, r1, r3
 80087ee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	607b      	str	r3, [r7, #4]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <mem_cmp+0x40>
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0eb      	beq.n	80087da <mem_cmp+0x18>

	return r;
 8008802:	697b      	ldr	r3, [r7, #20]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3724      	adds	r7, #36	; 0x24
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800881a:	e002      	b.n	8008822 <chk_chr+0x12>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3301      	adds	r3, #1
 8008820:	607b      	str	r3, [r7, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <chk_chr+0x26>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	4293      	cmp	r3, r2
 8008834:	d1f2      	bne.n	800881c <chk_chr+0xc>
	return *str;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	781b      	ldrb	r3, [r3, #0]
}
 800883a:	4618      	mov	r0, r3
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
	...

08008848 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008852:	2300      	movs	r3, #0
 8008854:	60bb      	str	r3, [r7, #8]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	e029      	b.n	80088b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800885c:	4a27      	ldr	r2, [pc, #156]	; (80088fc <chk_lock+0xb4>)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	4413      	add	r3, r2
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d01d      	beq.n	80088a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800886a:	4a24      	ldr	r2, [pc, #144]	; (80088fc <chk_lock+0xb4>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	4413      	add	r3, r2
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d116      	bne.n	80088aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800887c:	4a1f      	ldr	r2, [pc, #124]	; (80088fc <chk_lock+0xb4>)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	011b      	lsls	r3, r3, #4
 8008882:	4413      	add	r3, r2
 8008884:	3304      	adds	r3, #4
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800888c:	429a      	cmp	r2, r3
 800888e:	d10c      	bne.n	80088aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008890:	4a1a      	ldr	r2, [pc, #104]	; (80088fc <chk_lock+0xb4>)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	4413      	add	r3, r2
 8008898:	3308      	adds	r3, #8
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d102      	bne.n	80088aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80088a4:	e007      	b.n	80088b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80088a6:	2301      	movs	r3, #1
 80088a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3301      	adds	r3, #1
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d9d2      	bls.n	800885c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d109      	bne.n	80088d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d102      	bne.n	80088c8 <chk_lock+0x80>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d101      	bne.n	80088cc <chk_lock+0x84>
 80088c8:	2300      	movs	r3, #0
 80088ca:	e010      	b.n	80088ee <chk_lock+0xa6>
 80088cc:	2312      	movs	r3, #18
 80088ce:	e00e      	b.n	80088ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d108      	bne.n	80088e8 <chk_lock+0xa0>
 80088d6:	4a09      	ldr	r2, [pc, #36]	; (80088fc <chk_lock+0xb4>)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	011b      	lsls	r3, r3, #4
 80088dc:	4413      	add	r3, r2
 80088de:	330c      	adds	r3, #12
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088e6:	d101      	bne.n	80088ec <chk_lock+0xa4>
 80088e8:	2310      	movs	r3, #16
 80088ea:	e000      	b.n	80088ee <chk_lock+0xa6>
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	200004a0 	.word	0x200004a0

08008900 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008906:	2300      	movs	r3, #0
 8008908:	607b      	str	r3, [r7, #4]
 800890a:	e002      	b.n	8008912 <enq_lock+0x12>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	3301      	adds	r3, #1
 8008910:	607b      	str	r3, [r7, #4]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d806      	bhi.n	8008926 <enq_lock+0x26>
 8008918:	4a09      	ldr	r2, [pc, #36]	; (8008940 <enq_lock+0x40>)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	4413      	add	r3, r2
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1f2      	bne.n	800890c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b02      	cmp	r3, #2
 800892a:	bf14      	ite	ne
 800892c:	2301      	movne	r3, #1
 800892e:	2300      	moveq	r3, #0
 8008930:	b2db      	uxtb	r3, r3
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	200004a0 	.word	0x200004a0

08008944 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	e01f      	b.n	8008994 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008954:	4a41      	ldr	r2, [pc, #260]	; (8008a5c <inc_lock+0x118>)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	4413      	add	r3, r2
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d113      	bne.n	800898e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008966:	4a3d      	ldr	r2, [pc, #244]	; (8008a5c <inc_lock+0x118>)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	4413      	add	r3, r2
 800896e:	3304      	adds	r3, #4
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008976:	429a      	cmp	r2, r3
 8008978:	d109      	bne.n	800898e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800897a:	4a38      	ldr	r2, [pc, #224]	; (8008a5c <inc_lock+0x118>)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	011b      	lsls	r3, r3, #4
 8008980:	4413      	add	r3, r2
 8008982:	3308      	adds	r3, #8
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800898a:	429a      	cmp	r2, r3
 800898c:	d006      	beq.n	800899c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3301      	adds	r3, #1
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d9dc      	bls.n	8008954 <inc_lock+0x10>
 800899a:	e000      	b.n	800899e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800899c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d132      	bne.n	8008a0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80089a4:	2300      	movs	r3, #0
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	e002      	b.n	80089b0 <inc_lock+0x6c>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3301      	adds	r3, #1
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d806      	bhi.n	80089c4 <inc_lock+0x80>
 80089b6:	4a29      	ldr	r2, [pc, #164]	; (8008a5c <inc_lock+0x118>)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	011b      	lsls	r3, r3, #4
 80089bc:	4413      	add	r3, r2
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1f2      	bne.n	80089aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d101      	bne.n	80089ce <inc_lock+0x8a>
 80089ca:	2300      	movs	r3, #0
 80089cc:	e040      	b.n	8008a50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4922      	ldr	r1, [pc, #136]	; (8008a5c <inc_lock+0x118>)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	440b      	add	r3, r1
 80089da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	491e      	ldr	r1, [pc, #120]	; (8008a5c <inc_lock+0x118>)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	440b      	add	r3, r1
 80089e8:	3304      	adds	r3, #4
 80089ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	695a      	ldr	r2, [r3, #20]
 80089f0:	491a      	ldr	r1, [pc, #104]	; (8008a5c <inc_lock+0x118>)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	440b      	add	r3, r1
 80089f8:	3308      	adds	r3, #8
 80089fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80089fc:	4a17      	ldr	r2, [pc, #92]	; (8008a5c <inc_lock+0x118>)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	4413      	add	r3, r2
 8008a04:	330c      	adds	r3, #12
 8008a06:	2200      	movs	r2, #0
 8008a08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d009      	beq.n	8008a24 <inc_lock+0xe0>
 8008a10:	4a12      	ldr	r2, [pc, #72]	; (8008a5c <inc_lock+0x118>)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	011b      	lsls	r3, r3, #4
 8008a16:	4413      	add	r3, r2
 8008a18:	330c      	adds	r3, #12
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <inc_lock+0xe0>
 8008a20:	2300      	movs	r3, #0
 8008a22:	e015      	b.n	8008a50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d108      	bne.n	8008a3c <inc_lock+0xf8>
 8008a2a:	4a0c      	ldr	r2, [pc, #48]	; (8008a5c <inc_lock+0x118>)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	4413      	add	r3, r2
 8008a32:	330c      	adds	r3, #12
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	e001      	b.n	8008a40 <inc_lock+0xfc>
 8008a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a40:	4906      	ldr	r1, [pc, #24]	; (8008a5c <inc_lock+0x118>)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	011b      	lsls	r3, r3, #4
 8008a46:	440b      	add	r3, r1
 8008a48:	330c      	adds	r3, #12
 8008a4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3301      	adds	r3, #1
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	200004a0 	.word	0x200004a0

08008a60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	607b      	str	r3, [r7, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d825      	bhi.n	8008ac0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008a74:	4a17      	ldr	r2, [pc, #92]	; (8008ad4 <dec_lock+0x74>)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	4413      	add	r3, r2
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008a82:	89fb      	ldrh	r3, [r7, #14]
 8008a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a88:	d101      	bne.n	8008a8e <dec_lock+0x2e>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008a8e:	89fb      	ldrh	r3, [r7, #14]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <dec_lock+0x3a>
 8008a94:	89fb      	ldrh	r3, [r7, #14]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008a9a:	4a0e      	ldr	r2, [pc, #56]	; (8008ad4 <dec_lock+0x74>)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	4413      	add	r3, r2
 8008aa2:	330c      	adds	r3, #12
 8008aa4:	89fa      	ldrh	r2, [r7, #14]
 8008aa6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008aa8:	89fb      	ldrh	r3, [r7, #14]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d105      	bne.n	8008aba <dec_lock+0x5a>
 8008aae:	4a09      	ldr	r2, [pc, #36]	; (8008ad4 <dec_lock+0x74>)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	011b      	lsls	r3, r3, #4
 8008ab4:	4413      	add	r3, r2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	737b      	strb	r3, [r7, #13]
 8008abe:	e001      	b.n	8008ac4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008ac4:	7b7b      	ldrb	r3, [r7, #13]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	200004a0 	.word	0x200004a0

08008ad8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e010      	b.n	8008b08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008ae6:	4a0d      	ldr	r2, [pc, #52]	; (8008b1c <clear_lock+0x44>)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	4413      	add	r3, r2
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d105      	bne.n	8008b02 <clear_lock+0x2a>
 8008af6:	4a09      	ldr	r2, [pc, #36]	; (8008b1c <clear_lock+0x44>)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	4413      	add	r3, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	3301      	adds	r3, #1
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d9eb      	bls.n	8008ae6 <clear_lock+0xe>
	}
}
 8008b0e:	bf00      	nop
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	200004a0 	.word	0x200004a0

08008b20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	78db      	ldrb	r3, [r3, #3]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d034      	beq.n	8008b9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	7858      	ldrb	r0, [r3, #1]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b44:	2301      	movs	r3, #1
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	f7ff fd40 	bl	80085cc <disk_write>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	73fb      	strb	r3, [r7, #15]
 8008b56:	e022      	b.n	8008b9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	1ad2      	subs	r2, r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d217      	bcs.n	8008b9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	789b      	ldrb	r3, [r3, #2]
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	e010      	b.n	8008b98 <sync_window+0x78>
					wsect += fs->fsize;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	7858      	ldrb	r0, [r3, #1]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	f7ff fd1d 	bl	80085cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	613b      	str	r3, [r7, #16]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d8eb      	bhi.n	8008b76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d01b      	beq.n	8008bf8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff ffad 	bl	8008b20 <sync_window>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d113      	bne.n	8008bf8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	7858      	ldrb	r0, [r3, #1]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bda:	2301      	movs	r3, #1
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	f7ff fcd5 	bl	800858c <disk_read>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d004      	beq.n	8008bf2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008be8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff ff87 	bl	8008b20 <sync_window>
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d159      	bne.n	8008cd0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d149      	bne.n	8008cb8 <sync_fs+0xb4>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	791b      	ldrb	r3, [r3, #4]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d145      	bne.n	8008cb8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	899b      	ldrh	r3, [r3, #12]
 8008c36:	461a      	mov	r2, r3
 8008c38:	2100      	movs	r1, #0
 8008c3a:	f7ff fda8 	bl	800878e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3338      	adds	r3, #56	; 0x38
 8008c42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c46:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7ff fd37 	bl	80086be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3338      	adds	r3, #56	; 0x38
 8008c54:	4921      	ldr	r1, [pc, #132]	; (8008cdc <sync_fs+0xd8>)
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fd4c 	bl	80086f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3338      	adds	r3, #56	; 0x38
 8008c60:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008c64:	491e      	ldr	r1, [pc, #120]	; (8008ce0 <sync_fs+0xdc>)
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff fd44 	bl	80086f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3338      	adds	r3, #56	; 0x38
 8008c70:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	f7ff fd3a 	bl	80086f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3338      	adds	r3, #56	; 0x38
 8008c84:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4610      	mov	r0, r2
 8008c90:	f7ff fd30 	bl	80086f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	7858      	ldrb	r0, [r3, #1]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cac:	2301      	movs	r3, #1
 8008cae:	f7ff fc8d 	bl	80085cc <disk_write>
			fs->fsi_flag = 0;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7ff fca3 	bl	800860c <disk_ioctl>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <sync_fs+0xcc>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	41615252 	.word	0x41615252
 8008ce0:	61417272 	.word	0x61417272

08008ce4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	3b02      	subs	r3, #2
 8008cf2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	3b02      	subs	r3, #2
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d301      	bcc.n	8008d04 <clust2sect+0x20>
 8008d00:	2300      	movs	r3, #0
 8008d02:	e008      	b.n	8008d16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	895b      	ldrh	r3, [r3, #10]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	fb03 f202 	mul.w	r2, r3, r2
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d14:	4413      	add	r3, r2
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b086      	sub	sp, #24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d904      	bls.n	8008d42 <get_fat+0x20>
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	69db      	ldr	r3, [r3, #28]
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d302      	bcc.n	8008d48 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008d42:	2301      	movs	r3, #1
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	e0b7      	b.n	8008eb8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008d48:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d05a      	beq.n	8008e0c <get_fat+0xea>
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d07d      	beq.n	8008e56 <get_fat+0x134>
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	f040 80a2 	bne.w	8008ea4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	085b      	lsrs	r3, r3, #1
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	899b      	ldrh	r3, [r3, #12]
 8008d76:	4619      	mov	r1, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d7e:	4413      	add	r3, r2
 8008d80:	4619      	mov	r1, r3
 8008d82:	6938      	ldr	r0, [r7, #16]
 8008d84:	f7ff ff10 	bl	8008ba8 <move_window>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f040 808d 	bne.w	8008eaa <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	1c5a      	adds	r2, r3, #1
 8008d94:	60fa      	str	r2, [r7, #12]
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	8992      	ldrh	r2, [r2, #12]
 8008d9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d9e:	fb02 f201 	mul.w	r2, r2, r1
 8008da2:	1a9b      	subs	r3, r3, r2
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4413      	add	r3, r2
 8008da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008dac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	899b      	ldrh	r3, [r3, #12]
 8008db6:	4619      	mov	r1, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dbe:	4413      	add	r3, r2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6938      	ldr	r0, [r7, #16]
 8008dc4:	f7ff fef0 	bl	8008ba8 <move_window>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d16f      	bne.n	8008eae <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	899b      	ldrh	r3, [r3, #12]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dda:	fb02 f201 	mul.w	r2, r2, r1
 8008dde:	1a9b      	subs	r3, r3, r2
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	4413      	add	r3, r2
 8008de4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008de8:	021b      	lsls	r3, r3, #8
 8008dea:	461a      	mov	r2, r3
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <get_fat+0xe0>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	091b      	lsrs	r3, r3, #4
 8008e00:	e002      	b.n	8008e08 <get_fat+0xe6>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e08:	617b      	str	r3, [r7, #20]
			break;
 8008e0a:	e055      	b.n	8008eb8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	899b      	ldrh	r3, [r3, #12]
 8008e14:	085b      	lsrs	r3, r3, #1
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	4619      	mov	r1, r3
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e20:	4413      	add	r3, r2
 8008e22:	4619      	mov	r1, r3
 8008e24:	6938      	ldr	r0, [r7, #16]
 8008e26:	f7ff febf 	bl	8008ba8 <move_window>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d140      	bne.n	8008eb2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	8992      	ldrh	r2, [r2, #12]
 8008e3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e42:	fb02 f200 	mul.w	r2, r2, r0
 8008e46:	1a9b      	subs	r3, r3, r2
 8008e48:	440b      	add	r3, r1
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff fbfc 	bl	8008648 <ld_word>
 8008e50:	4603      	mov	r3, r0
 8008e52:	617b      	str	r3, [r7, #20]
			break;
 8008e54:	e030      	b.n	8008eb8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	899b      	ldrh	r3, [r3, #12]
 8008e5e:	089b      	lsrs	r3, r3, #2
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	4619      	mov	r1, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e6a:	4413      	add	r3, r2
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6938      	ldr	r0, [r7, #16]
 8008e70:	f7ff fe9a 	bl	8008ba8 <move_window>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d11d      	bne.n	8008eb6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	8992      	ldrh	r2, [r2, #12]
 8008e88:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e8c:	fb02 f200 	mul.w	r2, r2, r0
 8008e90:	1a9b      	subs	r3, r3, r2
 8008e92:	440b      	add	r3, r1
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff fbef 	bl	8008678 <ld_dword>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008ea0:	617b      	str	r3, [r7, #20]
			break;
 8008ea2:	e009      	b.n	8008eb8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	e006      	b.n	8008eb8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008eaa:	bf00      	nop
 8008eac:	e004      	b.n	8008eb8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008eae:	bf00      	nop
 8008eb0:	e002      	b.n	8008eb8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008eb2:	bf00      	nop
 8008eb4:	e000      	b.n	8008eb8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008eb6:	bf00      	nop
		}
	}

	return val;
 8008eb8:	697b      	ldr	r3, [r7, #20]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008ec2:	b590      	push	{r4, r7, lr}
 8008ec4:	b089      	sub	sp, #36	; 0x24
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	f240 8106 	bls.w	80090e6 <put_fat+0x224>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	f080 8100 	bcs.w	80090e6 <put_fat+0x224>
		switch (fs->fs_type) {
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	f000 8088 	beq.w	8009000 <put_fat+0x13e>
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	f000 80b0 	beq.w	8009056 <put_fat+0x194>
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	f040 80f5 	bne.w	80090e6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	61bb      	str	r3, [r7, #24]
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	085b      	lsrs	r3, r3, #1
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	4413      	add	r3, r2
 8008f08:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	899b      	ldrh	r3, [r3, #12]
 8008f12:	4619      	mov	r1, r3
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f1a:	4413      	add	r3, r2
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f7ff fe42 	bl	8008ba8 <move_window>
 8008f24:	4603      	mov	r3, r0
 8008f26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f28:	7ffb      	ldrb	r3, [r7, #31]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f040 80d4 	bne.w	80090d8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	1c5a      	adds	r2, r3, #1
 8008f3a:	61ba      	str	r2, [r7, #24]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	8992      	ldrh	r2, [r2, #12]
 8008f40:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f44:	fb02 f200 	mul.w	r2, r2, r0
 8008f48:	1a9b      	subs	r3, r3, r2
 8008f4a:	440b      	add	r3, r1
 8008f4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00d      	beq.n	8008f74 <put_fat+0xb2>
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b25b      	sxtb	r3, r3
 8008f5e:	f003 030f 	and.w	r3, r3, #15
 8008f62:	b25a      	sxtb	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	b25b      	sxtb	r3, r3
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	b25b      	sxtb	r3, r3
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	e001      	b.n	8008f78 <put_fat+0xb6>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	899b      	ldrh	r3, [r3, #12]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f92:	4413      	add	r3, r2
 8008f94:	4619      	mov	r1, r3
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff fe06 	bl	8008ba8 <move_window>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fa0:	7ffb      	ldrb	r3, [r7, #31]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f040 809a 	bne.w	80090dc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	899b      	ldrh	r3, [r3, #12]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fba:	fb02 f200 	mul.w	r2, r2, r0
 8008fbe:	1a9b      	subs	r3, r3, r2
 8008fc0:	440b      	add	r3, r1
 8008fc2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <put_fat+0x114>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	091b      	lsrs	r3, r3, #4
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	e00e      	b.n	8008ff4 <put_fat+0x132>
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b25b      	sxtb	r3, r3
 8008fdc:	f023 030f 	bic.w	r3, r3, #15
 8008fe0:	b25a      	sxtb	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	0a1b      	lsrs	r3, r3, #8
 8008fe6:	b25b      	sxtb	r3, r3
 8008fe8:	f003 030f 	and.w	r3, r3, #15
 8008fec:	b25b      	sxtb	r3, r3
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	b25b      	sxtb	r3, r3
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	70da      	strb	r2, [r3, #3]
			break;
 8008ffe:	e072      	b.n	80090e6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	899b      	ldrh	r3, [r3, #12]
 8009008:	085b      	lsrs	r3, r3, #1
 800900a:	b29b      	uxth	r3, r3
 800900c:	4619      	mov	r1, r3
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	fbb3 f3f1 	udiv	r3, r3, r1
 8009014:	4413      	add	r3, r2
 8009016:	4619      	mov	r1, r3
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f7ff fdc5 	bl	8008ba8 <move_window>
 800901e:	4603      	mov	r3, r0
 8009020:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009022:	7ffb      	ldrb	r3, [r7, #31]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d15b      	bne.n	80090e0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	8992      	ldrh	r2, [r2, #12]
 8009036:	fbb3 f0f2 	udiv	r0, r3, r2
 800903a:	fb02 f200 	mul.w	r2, r2, r0
 800903e:	1a9b      	subs	r3, r3, r2
 8009040:	440b      	add	r3, r1
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	b292      	uxth	r2, r2
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff fb38 	bl	80086be <st_word>
			fs->wflag = 1;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	70da      	strb	r2, [r3, #3]
			break;
 8009054:	e047      	b.n	80090e6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	899b      	ldrh	r3, [r3, #12]
 800905e:	089b      	lsrs	r3, r3, #2
 8009060:	b29b      	uxth	r3, r3
 8009062:	4619      	mov	r1, r3
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	fbb3 f3f1 	udiv	r3, r3, r1
 800906a:	4413      	add	r3, r2
 800906c:	4619      	mov	r1, r3
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7ff fd9a 	bl	8008ba8 <move_window>
 8009074:	4603      	mov	r3, r0
 8009076:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009078:	7ffb      	ldrb	r3, [r7, #31]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d132      	bne.n	80090e4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	8992      	ldrh	r2, [r2, #12]
 8009092:	fbb3 f0f2 	udiv	r0, r3, r2
 8009096:	fb02 f200 	mul.w	r2, r2, r0
 800909a:	1a9b      	subs	r3, r3, r2
 800909c:	440b      	add	r3, r1
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff faea 	bl	8008678 <ld_dword>
 80090a4:	4603      	mov	r3, r0
 80090a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80090aa:	4323      	orrs	r3, r4
 80090ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	8992      	ldrh	r2, [r2, #12]
 80090bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80090c0:	fb02 f200 	mul.w	r2, r2, r0
 80090c4:	1a9b      	subs	r3, r3, r2
 80090c6:	440b      	add	r3, r1
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7ff fb12 	bl	80086f4 <st_dword>
			fs->wflag = 1;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2201      	movs	r2, #1
 80090d4:	70da      	strb	r2, [r3, #3]
			break;
 80090d6:	e006      	b.n	80090e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80090d8:	bf00      	nop
 80090da:	e004      	b.n	80090e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80090dc:	bf00      	nop
 80090de:	e002      	b.n	80090e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80090e0:	bf00      	nop
 80090e2:	e000      	b.n	80090e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80090e4:	bf00      	nop
		}
	}
	return res;
 80090e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3724      	adds	r7, #36	; 0x24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd90      	pop	{r4, r7, pc}

080090f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d904      	bls.n	8009116 <remove_chain+0x26>
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	429a      	cmp	r2, r3
 8009114:	d301      	bcc.n	800911a <remove_chain+0x2a>
 8009116:	2302      	movs	r3, #2
 8009118:	e04b      	b.n	80091b2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00c      	beq.n	800913a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009120:	f04f 32ff 	mov.w	r2, #4294967295
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	69b8      	ldr	r0, [r7, #24]
 8009128:	f7ff fecb 	bl	8008ec2 <put_fat>
 800912c:	4603      	mov	r3, r0
 800912e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009130:	7ffb      	ldrb	r3, [r7, #31]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <remove_chain+0x4a>
 8009136:	7ffb      	ldrb	r3, [r7, #31]
 8009138:	e03b      	b.n	80091b2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800913a:	68b9      	ldr	r1, [r7, #8]
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f7ff fdf0 	bl	8008d22 <get_fat>
 8009142:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d031      	beq.n	80091ae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d101      	bne.n	8009154 <remove_chain+0x64>
 8009150:	2302      	movs	r3, #2
 8009152:	e02e      	b.n	80091b2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915a:	d101      	bne.n	8009160 <remove_chain+0x70>
 800915c:	2301      	movs	r3, #1
 800915e:	e028      	b.n	80091b2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009160:	2200      	movs	r2, #0
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	69b8      	ldr	r0, [r7, #24]
 8009166:	f7ff feac 	bl	8008ec2 <put_fat>
 800916a:	4603      	mov	r3, r0
 800916c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800916e:	7ffb      	ldrb	r3, [r7, #31]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <remove_chain+0x88>
 8009174:	7ffb      	ldrb	r3, [r7, #31]
 8009176:	e01c      	b.n	80091b2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	699a      	ldr	r2, [r3, #24]
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	3b02      	subs	r3, #2
 8009182:	429a      	cmp	r2, r3
 8009184:	d20b      	bcs.n	800919e <remove_chain+0xae>
			fs->free_clst++;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	1c5a      	adds	r2, r3, #1
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	791b      	ldrb	r3, [r3, #4]
 8009194:	f043 0301 	orr.w	r3, r3, #1
 8009198:	b2da      	uxtb	r2, r3
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d3c6      	bcc.n	800913a <remove_chain+0x4a>
 80091ac:	e000      	b.n	80091b0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80091ae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b088      	sub	sp, #32
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10d      	bne.n	80091ec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d004      	beq.n	80091e6 <create_chain+0x2c>
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d31b      	bcc.n	800921e <create_chain+0x64>
 80091e6:	2301      	movs	r3, #1
 80091e8:	61bb      	str	r3, [r7, #24]
 80091ea:	e018      	b.n	800921e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7ff fd97 	bl	8008d22 <get_fat>
 80091f4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d801      	bhi.n	8009200 <create_chain+0x46>
 80091fc:	2301      	movs	r3, #1
 80091fe:	e070      	b.n	80092e2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009206:	d101      	bne.n	800920c <create_chain+0x52>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	e06a      	b.n	80092e2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	69db      	ldr	r3, [r3, #28]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	429a      	cmp	r2, r3
 8009214:	d201      	bcs.n	800921a <create_chain+0x60>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	e063      	b.n	80092e2 <create_chain+0x128>
		scl = clst;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	3301      	adds	r3, #1
 8009226:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	429a      	cmp	r2, r3
 8009230:	d307      	bcc.n	8009242 <create_chain+0x88>
				ncl = 2;
 8009232:	2302      	movs	r3, #2
 8009234:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009236:	69fa      	ldr	r2, [r7, #28]
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	429a      	cmp	r2, r3
 800923c:	d901      	bls.n	8009242 <create_chain+0x88>
 800923e:	2300      	movs	r3, #0
 8009240:	e04f      	b.n	80092e2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009242:	69f9      	ldr	r1, [r7, #28]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff fd6c 	bl	8008d22 <get_fat>
 800924a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00e      	beq.n	8009270 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d003      	beq.n	8009260 <create_chain+0xa6>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925e:	d101      	bne.n	8009264 <create_chain+0xaa>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	e03e      	b.n	80092e2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	429a      	cmp	r2, r3
 800926a:	d1da      	bne.n	8009222 <create_chain+0x68>
 800926c:	2300      	movs	r3, #0
 800926e:	e038      	b.n	80092e2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009270:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009272:	f04f 32ff 	mov.w	r2, #4294967295
 8009276:	69f9      	ldr	r1, [r7, #28]
 8009278:	6938      	ldr	r0, [r7, #16]
 800927a:	f7ff fe22 	bl	8008ec2 <put_fat>
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d109      	bne.n	800929c <create_chain+0xe2>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d006      	beq.n	800929c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800928e:	69fa      	ldr	r2, [r7, #28]
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6938      	ldr	r0, [r7, #16]
 8009294:	f7ff fe15 	bl	8008ec2 <put_fat>
 8009298:	4603      	mov	r3, r0
 800929a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800929c:	7dfb      	ldrb	r3, [r7, #23]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d116      	bne.n	80092d0 <create_chain+0x116>
		fs->last_clst = ncl;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	69fa      	ldr	r2, [r7, #28]
 80092a6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	699a      	ldr	r2, [r3, #24]
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	3b02      	subs	r3, #2
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d804      	bhi.n	80092c0 <create_chain+0x106>
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	1e5a      	subs	r2, r3, #1
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	791b      	ldrb	r3, [r3, #4]
 80092c4:	f043 0301 	orr.w	r3, r3, #1
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	711a      	strb	r2, [r3, #4]
 80092ce:	e007      	b.n	80092e0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d102      	bne.n	80092dc <create_chain+0x122>
 80092d6:	f04f 33ff 	mov.w	r3, #4294967295
 80092da:	e000      	b.n	80092de <create_chain+0x124>
 80092dc:	2301      	movs	r3, #1
 80092de:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80092e0:	69fb      	ldr	r3, [r7, #28]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3720      	adds	r7, #32
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b087      	sub	sp, #28
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	3304      	adds	r3, #4
 8009300:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	899b      	ldrh	r3, [r3, #12]
 8009306:	461a      	mov	r2, r3
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	fbb3 f3f2 	udiv	r3, r3, r2
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	8952      	ldrh	r2, [r2, #10]
 8009312:	fbb3 f3f2 	udiv	r3, r3, r2
 8009316:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	1d1a      	adds	r2, r3, #4
 800931c:	613a      	str	r2, [r7, #16]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <clmt_clust+0x42>
 8009328:	2300      	movs	r3, #0
 800932a:	e010      	b.n	800934e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	429a      	cmp	r2, r3
 8009332:	d307      	bcc.n	8009344 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	3304      	adds	r3, #4
 8009340:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009342:	e7e9      	b.n	8009318 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009344:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	4413      	add	r3, r2
}
 800934e:	4618      	mov	r0, r3
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b086      	sub	sp, #24
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009370:	d204      	bcs.n	800937c <dir_sdi+0x22>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	f003 031f 	and.w	r3, r3, #31
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <dir_sdi+0x26>
		return FR_INT_ERR;
 800937c:	2302      	movs	r3, #2
 800937e:	e071      	b.n	8009464 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <dir_sdi+0x46>
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	2b02      	cmp	r3, #2
 8009398:	d902      	bls.n	80093a0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10c      	bne.n	80093c0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	095b      	lsrs	r3, r3, #5
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	8912      	ldrh	r2, [r2, #8]
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d301      	bcc.n	80093b6 <dir_sdi+0x5c>
 80093b2:	2302      	movs	r3, #2
 80093b4:	e056      	b.n	8009464 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	61da      	str	r2, [r3, #28]
 80093be:	e02d      	b.n	800941c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	895b      	ldrh	r3, [r3, #10]
 80093c4:	461a      	mov	r2, r3
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	899b      	ldrh	r3, [r3, #12]
 80093ca:	fb03 f302 	mul.w	r3, r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80093d0:	e019      	b.n	8009406 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6979      	ldr	r1, [r7, #20]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff fca3 	bl	8008d22 <get_fat>
 80093dc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e4:	d101      	bne.n	80093ea <dir_sdi+0x90>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e03c      	b.n	8009464 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d904      	bls.n	80093fa <dir_sdi+0xa0>
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d301      	bcc.n	80093fe <dir_sdi+0xa4>
 80093fa:	2302      	movs	r3, #2
 80093fc:	e032      	b.n	8009464 <dir_sdi+0x10a>
			ofs -= csz;
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	429a      	cmp	r2, r3
 800940c:	d2e1      	bcs.n	80093d2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800940e:	6979      	ldr	r1, [r7, #20]
 8009410:	6938      	ldr	r0, [r7, #16]
 8009412:	f7ff fc67 	bl	8008ce4 <clust2sect>
 8009416:	4602      	mov	r2, r0
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <dir_sdi+0xd4>
 800942a:	2302      	movs	r3, #2
 800942c:	e01a      	b.n	8009464 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	69da      	ldr	r2, [r3, #28]
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	899b      	ldrh	r3, [r3, #12]
 8009436:	4619      	mov	r1, r3
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	fbb3 f3f1 	udiv	r3, r3, r1
 800943e:	441a      	add	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	899b      	ldrh	r3, [r3, #12]
 800944e:	461a      	mov	r2, r3
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	fbb3 f0f2 	udiv	r0, r3, r2
 8009456:	fb02 f200 	mul.w	r2, r2, r0
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	18ca      	adds	r2, r1, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	3320      	adds	r3, #32
 8009482:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <dir_next+0x28>
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009492:	d301      	bcc.n	8009498 <dir_next+0x2c>
 8009494:	2304      	movs	r3, #4
 8009496:	e0bb      	b.n	8009610 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	899b      	ldrh	r3, [r3, #12]
 800949c:	461a      	mov	r2, r3
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80094a4:	fb02 f201 	mul.w	r2, r2, r1
 80094a8:	1a9b      	subs	r3, r3, r2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f040 809d 	bne.w	80095ea <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10b      	bne.n	80094da <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	095b      	lsrs	r3, r3, #5
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	8912      	ldrh	r2, [r2, #8]
 80094ca:	4293      	cmp	r3, r2
 80094cc:	f0c0 808d 	bcc.w	80095ea <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	61da      	str	r2, [r3, #28]
 80094d6:	2304      	movs	r3, #4
 80094d8:	e09a      	b.n	8009610 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	899b      	ldrh	r3, [r3, #12]
 80094de:	461a      	mov	r2, r3
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	8952      	ldrh	r2, [r2, #10]
 80094ea:	3a01      	subs	r2, #1
 80094ec:	4013      	ands	r3, r2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d17b      	bne.n	80095ea <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	4619      	mov	r1, r3
 80094fa:	4610      	mov	r0, r2
 80094fc:	f7ff fc11 	bl	8008d22 <get_fat>
 8009500:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d801      	bhi.n	800950c <dir_next+0xa0>
 8009508:	2302      	movs	r3, #2
 800950a:	e081      	b.n	8009610 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009512:	d101      	bne.n	8009518 <dir_next+0xac>
 8009514:	2301      	movs	r3, #1
 8009516:	e07b      	b.n	8009610 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	429a      	cmp	r2, r3
 8009520:	d359      	bcc.n	80095d6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d104      	bne.n	8009532 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	61da      	str	r2, [r3, #28]
 800952e:	2304      	movs	r3, #4
 8009530:	e06e      	b.n	8009610 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	4619      	mov	r1, r3
 800953a:	4610      	mov	r0, r2
 800953c:	f7ff fe3d 	bl	80091ba <create_chain>
 8009540:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <dir_next+0xe0>
 8009548:	2307      	movs	r3, #7
 800954a:	e061      	b.n	8009610 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d101      	bne.n	8009556 <dir_next+0xea>
 8009552:	2302      	movs	r3, #2
 8009554:	e05c      	b.n	8009610 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955c:	d101      	bne.n	8009562 <dir_next+0xf6>
 800955e:	2301      	movs	r3, #1
 8009560:	e056      	b.n	8009610 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f7ff fadc 	bl	8008b20 <sync_window>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <dir_next+0x106>
 800956e:	2301      	movs	r3, #1
 8009570:	e04e      	b.n	8009610 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	899b      	ldrh	r3, [r3, #12]
 800957c:	461a      	mov	r2, r3
 800957e:	2100      	movs	r1, #0
 8009580:	f7ff f905 	bl	800878e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009584:	2300      	movs	r3, #0
 8009586:	613b      	str	r3, [r7, #16]
 8009588:	6979      	ldr	r1, [r7, #20]
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f7ff fbaa 	bl	8008ce4 <clust2sect>
 8009590:	4602      	mov	r2, r0
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	635a      	str	r2, [r3, #52]	; 0x34
 8009596:	e012      	b.n	80095be <dir_next+0x152>
						fs->wflag = 1;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2201      	movs	r2, #1
 800959c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7ff fabe 	bl	8008b20 <sync_window>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <dir_next+0x142>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e030      	b.n	8009610 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	3301      	adds	r3, #1
 80095b2:	613b      	str	r3, [r7, #16]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	635a      	str	r2, [r3, #52]	; 0x34
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	895b      	ldrh	r3, [r3, #10]
 80095c2:	461a      	mov	r2, r3
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d3e6      	bcc.n	8009598 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	1ad2      	subs	r2, r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80095dc:	6979      	ldr	r1, [r7, #20]
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f7ff fb80 	bl	8008ce4 <clust2sect>
 80095e4:	4602      	mov	r2, r0
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	899b      	ldrh	r3, [r3, #12]
 80095fa:	461a      	mov	r2, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8009602:	fb02 f200 	mul.w	r2, r2, r0
 8009606:	1a9b      	subs	r3, r3, r2
 8009608:	18ca      	adds	r2, r1, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009628:	2100      	movs	r1, #0
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff fe95 	bl	800935a <dir_sdi>
 8009630:	4603      	mov	r3, r0
 8009632:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d12b      	bne.n	8009692 <dir_alloc+0x7a>
		n = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	4619      	mov	r1, r3
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7ff faaf 	bl	8008ba8 <move_window>
 800964a:	4603      	mov	r3, r0
 800964c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800964e:	7dfb      	ldrb	r3, [r7, #23]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d11d      	bne.n	8009690 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2be5      	cmp	r3, #229	; 0xe5
 800965c:	d004      	beq.n	8009668 <dir_alloc+0x50>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d107      	bne.n	8009678 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	3301      	adds	r3, #1
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d102      	bne.n	800967c <dir_alloc+0x64>
 8009676:	e00c      	b.n	8009692 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009678:	2300      	movs	r3, #0
 800967a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800967c:	2101      	movs	r1, #1
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7ff fef4 	bl	800946c <dir_next>
 8009684:	4603      	mov	r3, r0
 8009686:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009688:	7dfb      	ldrb	r3, [r7, #23]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d0d7      	beq.n	800963e <dir_alloc+0x26>
 800968e:	e000      	b.n	8009692 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009690:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009692:	7dfb      	ldrb	r3, [r7, #23]
 8009694:	2b04      	cmp	r3, #4
 8009696:	d101      	bne.n	800969c <dir_alloc+0x84>
 8009698:	2307      	movs	r3, #7
 800969a:	75fb      	strb	r3, [r7, #23]
	return res;
 800969c:	7dfb      	ldrb	r3, [r7, #23]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	331a      	adds	r3, #26
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fe ffc7 	bl	8008648 <ld_word>
 80096ba:	4603      	mov	r3, r0
 80096bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d109      	bne.n	80096da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	3314      	adds	r3, #20
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe ffbc 	bl	8008648 <ld_word>
 80096d0:	4603      	mov	r3, r0
 80096d2:	041b      	lsls	r3, r3, #16
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80096da:	68fb      	ldr	r3, [r7, #12]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	331a      	adds	r3, #26
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	b292      	uxth	r2, r2
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe ffdf 	bl	80086be <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	2b03      	cmp	r3, #3
 8009706:	d109      	bne.n	800971c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f103 0214 	add.w	r2, r3, #20
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	0c1b      	lsrs	r3, r3, #16
 8009712:	b29b      	uxth	r3, r3
 8009714:	4619      	mov	r1, r3
 8009716:	4610      	mov	r0, r2
 8009718:	f7fe ffd1 	bl	80086be <st_word>
	}
}
 800971c:	bf00      	nop
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009724:	b590      	push	{r4, r7, lr}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	331a      	adds	r3, #26
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe ff88 	bl	8008648 <ld_word>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <cmp_lfn+0x1e>
 800973e:	2300      	movs	r3, #0
 8009740:	e059      	b.n	80097f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800974a:	1e5a      	subs	r2, r3, #1
 800974c:	4613      	mov	r3, r2
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	4413      	add	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009758:	2301      	movs	r3, #1
 800975a:	81fb      	strh	r3, [r7, #14]
 800975c:	2300      	movs	r3, #0
 800975e:	613b      	str	r3, [r7, #16]
 8009760:	e033      	b.n	80097ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009762:	4a27      	ldr	r2, [pc, #156]	; (8009800 <cmp_lfn+0xdc>)
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	4413      	add	r3, r2
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	4413      	add	r3, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f7fe ff69 	bl	8008648 <ld_word>
 8009776:	4603      	mov	r3, r0
 8009778:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800977a:	89fb      	ldrh	r3, [r7, #14]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d01a      	beq.n	80097b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2bfe      	cmp	r3, #254	; 0xfe
 8009784:	d812      	bhi.n	80097ac <cmp_lfn+0x88>
 8009786:	89bb      	ldrh	r3, [r7, #12]
 8009788:	4618      	mov	r0, r3
 800978a:	f002 f80f 	bl	800b7ac <ff_wtoupper>
 800978e:	4603      	mov	r3, r0
 8009790:	461c      	mov	r4, r3
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	617a      	str	r2, [r7, #20]
 8009798:	005b      	lsls	r3, r3, #1
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	4413      	add	r3, r2
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f002 f803 	bl	800b7ac <ff_wtoupper>
 80097a6:	4603      	mov	r3, r0
 80097a8:	429c      	cmp	r4, r3
 80097aa:	d001      	beq.n	80097b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80097ac:	2300      	movs	r3, #0
 80097ae:	e022      	b.n	80097f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 80097b0:	89bb      	ldrh	r3, [r7, #12]
 80097b2:	81fb      	strh	r3, [r7, #14]
 80097b4:	e006      	b.n	80097c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80097b6:	89bb      	ldrh	r3, [r7, #12]
 80097b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097bc:	4293      	cmp	r3, r2
 80097be:	d001      	beq.n	80097c4 <cmp_lfn+0xa0>
 80097c0:	2300      	movs	r3, #0
 80097c2:	e018      	b.n	80097f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	3301      	adds	r3, #1
 80097c8:	613b      	str	r3, [r7, #16]
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2b0c      	cmp	r3, #12
 80097ce:	d9c8      	bls.n	8009762 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00b      	beq.n	80097f4 <cmp_lfn+0xd0>
 80097dc:	89fb      	ldrh	r3, [r7, #14]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d008      	beq.n	80097f4 <cmp_lfn+0xd0>
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	4413      	add	r3, r2
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <cmp_lfn+0xd0>
 80097f0:	2300      	movs	r3, #0
 80097f2:	e000      	b.n	80097f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80097f4:	2301      	movs	r3, #1
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	371c      	adds	r7, #28
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd90      	pop	{r4, r7, pc}
 80097fe:	bf00      	nop
 8009800:	0800e620 	.word	0x0800e620

08009804 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	4611      	mov	r1, r2
 8009810:	461a      	mov	r2, r3
 8009812:	460b      	mov	r3, r1
 8009814:	71fb      	strb	r3, [r7, #7]
 8009816:	4613      	mov	r3, r2
 8009818:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	330d      	adds	r3, #13
 800981e:	79ba      	ldrb	r2, [r7, #6]
 8009820:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	330b      	adds	r3, #11
 8009826:	220f      	movs	r2, #15
 8009828:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	330c      	adds	r3, #12
 800982e:	2200      	movs	r2, #0
 8009830:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	331a      	adds	r3, #26
 8009836:	2100      	movs	r1, #0
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe ff40 	bl	80086be <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	1e5a      	subs	r2, r3, #1
 8009842:	4613      	mov	r3, r2
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	4413      	add	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	82fb      	strh	r3, [r7, #22]
 8009852:	2300      	movs	r3, #0
 8009854:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009856:	8afb      	ldrh	r3, [r7, #22]
 8009858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800985c:	4293      	cmp	r3, r2
 800985e:	d007      	beq.n	8009870 <put_lfn+0x6c>
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	61fa      	str	r2, [r7, #28]
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	4413      	add	r3, r2
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009870:	4a17      	ldr	r2, [pc, #92]	; (80098d0 <put_lfn+0xcc>)
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	4413      	add	r3, r2
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	461a      	mov	r2, r3
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	4413      	add	r3, r2
 800987e:	8afa      	ldrh	r2, [r7, #22]
 8009880:	4611      	mov	r1, r2
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe ff1b 	bl	80086be <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009888:	8afb      	ldrh	r3, [r7, #22]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d102      	bne.n	8009894 <put_lfn+0x90>
 800988e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009892:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	3301      	adds	r3, #1
 8009898:	61bb      	str	r3, [r7, #24]
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b0c      	cmp	r3, #12
 800989e:	d9da      	bls.n	8009856 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80098a0:	8afb      	ldrh	r3, [r7, #22]
 80098a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d006      	beq.n	80098b8 <put_lfn+0xb4>
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	4413      	add	r3, r2
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d103      	bne.n	80098c0 <put_lfn+0xbc>
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	79fa      	ldrb	r2, [r7, #7]
 80098c4:	701a      	strb	r2, [r3, #0]
}
 80098c6:	bf00      	nop
 80098c8:	3720      	adds	r7, #32
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	0800e620 	.word	0x0800e620

080098d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08c      	sub	sp, #48	; 0x30
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80098e2:	220b      	movs	r2, #11
 80098e4:	68b9      	ldr	r1, [r7, #8]
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f7fe ff30 	bl	800874c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	d92b      	bls.n	800994a <gen_numname+0x76>
		sr = seq;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80098f6:	e022      	b.n	800993e <gen_numname+0x6a>
			wc = *lfn++;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	1c9a      	adds	r2, r3, #2
 80098fc:	607a      	str	r2, [r7, #4]
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009902:	2300      	movs	r3, #0
 8009904:	62bb      	str	r3, [r7, #40]	; 0x28
 8009906:	e017      	b.n	8009938 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	005a      	lsls	r2, r3, #1
 800990c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	4413      	add	r3, r2
 8009914:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009918:	085b      	lsrs	r3, r3, #1
 800991a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <gen_numname+0x5e>
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800992c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009930:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	3301      	adds	r3, #1
 8009936:	62bb      	str	r3, [r7, #40]	; 0x28
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	2b0f      	cmp	r3, #15
 800993c:	d9e4      	bls.n	8009908 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1d8      	bne.n	80098f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800994a:	2307      	movs	r3, #7
 800994c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	f003 030f 	and.w	r3, r3, #15
 8009956:	b2db      	uxtb	r3, r3
 8009958:	3330      	adds	r3, #48	; 0x30
 800995a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800995e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009962:	2b39      	cmp	r3, #57	; 0x39
 8009964:	d904      	bls.n	8009970 <gen_numname+0x9c>
 8009966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800996a:	3307      	adds	r3, #7
 800996c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009972:	1e5a      	subs	r2, r3, #1
 8009974:	62ba      	str	r2, [r7, #40]	; 0x28
 8009976:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800997a:	4413      	add	r3, r2
 800997c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009980:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	091b      	lsrs	r3, r3, #4
 8009988:	603b      	str	r3, [r7, #0]
	} while (seq);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1de      	bne.n	800994e <gen_numname+0x7a>
	ns[i] = '~';
 8009990:	f107 0214 	add.w	r2, r7, #20
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	4413      	add	r3, r2
 8009998:	227e      	movs	r2, #126	; 0x7e
 800999a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800999c:	2300      	movs	r3, #0
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
 80099a0:	e002      	b.n	80099a8 <gen_numname+0xd4>
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	3301      	adds	r3, #1
 80099a6:	627b      	str	r3, [r7, #36]	; 0x24
 80099a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d205      	bcs.n	80099bc <gen_numname+0xe8>
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	4413      	add	r3, r2
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d1f2      	bne.n	80099a2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	2b07      	cmp	r3, #7
 80099c0:	d808      	bhi.n	80099d4 <gen_numname+0x100>
 80099c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c4:	1c5a      	adds	r2, r3, #1
 80099c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80099c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80099cc:	4413      	add	r3, r2
 80099ce:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80099d2:	e000      	b.n	80099d6 <gen_numname+0x102>
 80099d4:	2120      	movs	r1, #32
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	1c5a      	adds	r2, r3, #1
 80099da:	627a      	str	r2, [r7, #36]	; 0x24
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4413      	add	r3, r2
 80099e0:	460a      	mov	r2, r1
 80099e2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	2b07      	cmp	r3, #7
 80099e8:	d9e8      	bls.n	80099bc <gen_numname+0xe8>
}
 80099ea:	bf00      	nop
 80099ec:	3730      	adds	r7, #48	; 0x30
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b085      	sub	sp, #20
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80099fe:	230b      	movs	r3, #11
 8009a00:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	0852      	lsrs	r2, r2, #1
 8009a08:	01db      	lsls	r3, r3, #7
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	1c59      	adds	r1, r3, #1
 8009a12:	6079      	str	r1, [r7, #4]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	4413      	add	r3, r2
 8009a18:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	60bb      	str	r3, [r7, #8]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1ed      	bne.n	8009a02 <sum_sfn+0x10>
	return sum;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009a42:	2100      	movs	r1, #0
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff fc88 	bl	800935a <dir_sdi>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <dir_find+0x24>
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
 8009a56:	e0a9      	b.n	8009bac <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009a58:	23ff      	movs	r3, #255	; 0xff
 8009a5a:	753b      	strb	r3, [r7, #20]
 8009a5c:	7d3b      	ldrb	r3, [r7, #20]
 8009a5e:	757b      	strb	r3, [r7, #21]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f04f 32ff 	mov.w	r2, #4294967295
 8009a66:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6938      	ldr	r0, [r7, #16]
 8009a70:	f7ff f89a 	bl	8008ba8 <move_window>
 8009a74:	4603      	mov	r3, r0
 8009a76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f040 8090 	bne.w	8009ba0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009a88:	7dbb      	ldrb	r3, [r7, #22]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d102      	bne.n	8009a94 <dir_find+0x60>
 8009a8e:	2304      	movs	r3, #4
 8009a90:	75fb      	strb	r3, [r7, #23]
 8009a92:	e08a      	b.n	8009baa <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	330b      	adds	r3, #11
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aa0:	73fb      	strb	r3, [r7, #15]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	7bfa      	ldrb	r2, [r7, #15]
 8009aa6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009aa8:	7dbb      	ldrb	r3, [r7, #22]
 8009aaa:	2be5      	cmp	r3, #229	; 0xe5
 8009aac:	d007      	beq.n	8009abe <dir_find+0x8a>
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d009      	beq.n	8009acc <dir_find+0x98>
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	2b0f      	cmp	r3, #15
 8009abc:	d006      	beq.n	8009acc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009abe:	23ff      	movs	r3, #255	; 0xff
 8009ac0:	757b      	strb	r3, [r7, #21]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8009aca:	e05e      	b.n	8009b8a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	2b0f      	cmp	r3, #15
 8009ad0:	d136      	bne.n	8009b40 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d154      	bne.n	8009b8a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009ae0:	7dbb      	ldrb	r3, [r7, #22]
 8009ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00d      	beq.n	8009b06 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	7b5b      	ldrb	r3, [r3, #13]
 8009af0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009af2:	7dbb      	ldrb	r3, [r7, #22]
 8009af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af8:	75bb      	strb	r3, [r7, #22]
 8009afa:	7dbb      	ldrb	r3, [r7, #22]
 8009afc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	695a      	ldr	r2, [r3, #20]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009b06:	7dba      	ldrb	r2, [r7, #22]
 8009b08:	7d7b      	ldrb	r3, [r7, #21]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d115      	bne.n	8009b3a <dir_find+0x106>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	330d      	adds	r3, #13
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	7d3a      	ldrb	r2, [r7, #20]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d10e      	bne.n	8009b3a <dir_find+0x106>
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	691a      	ldr	r2, [r3, #16]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f7ff fdfc 	bl	8009724 <cmp_lfn>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <dir_find+0x106>
 8009b32:	7d7b      	ldrb	r3, [r7, #21]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	e000      	b.n	8009b3c <dir_find+0x108>
 8009b3a:	23ff      	movs	r3, #255	; 0xff
 8009b3c:	757b      	strb	r3, [r7, #21]
 8009b3e:	e024      	b.n	8009b8a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009b40:	7d7b      	ldrb	r3, [r7, #21]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d109      	bne.n	8009b5a <dir_find+0x126>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7ff ff51 	bl	80099f2 <sum_sfn>
 8009b50:	4603      	mov	r3, r0
 8009b52:	461a      	mov	r2, r3
 8009b54:	7d3b      	ldrb	r3, [r7, #20]
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d024      	beq.n	8009ba4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <dir_find+0x14a>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a18      	ldr	r0, [r3, #32]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3324      	adds	r3, #36	; 0x24
 8009b70:	220b      	movs	r2, #11
 8009b72:	4619      	mov	r1, r3
 8009b74:	f7fe fe25 	bl	80087c2 <mem_cmp>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d014      	beq.n	8009ba8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009b7e:	23ff      	movs	r3, #255	; 0xff
 8009b80:	757b      	strb	r3, [r7, #21]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f04f 32ff 	mov.w	r2, #4294967295
 8009b88:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff fc6d 	bl	800946c <dir_next>
 8009b92:	4603      	mov	r3, r0
 8009b94:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f43f af65 	beq.w	8009a68 <dir_find+0x34>
 8009b9e:	e004      	b.n	8009baa <dir_find+0x176>
		if (res != FR_OK) break;
 8009ba0:	bf00      	nop
 8009ba2:	e002      	b.n	8009baa <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009ba4:	bf00      	nop
 8009ba6:	e000      	b.n	8009baa <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009ba8:	bf00      	nop

	return res;
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08c      	sub	sp, #48	; 0x30
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009bc8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <dir_register+0x20>
 8009bd0:	2306      	movs	r3, #6
 8009bd2:	e0e0      	b.n	8009d96 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd8:	e002      	b.n	8009be0 <dir_register+0x2c>
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	3301      	adds	r3, #1
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	691a      	ldr	r2, [r3, #16]
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	4413      	add	r3, r2
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1f4      	bne.n	8009bda <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009bf6:	f107 030c 	add.w	r3, r7, #12
 8009bfa:	220c      	movs	r2, #12
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe fda5 	bl	800874c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d032      	beq.n	8009c72 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2240      	movs	r2, #64	; 0x40
 8009c10:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009c14:	2301      	movs	r3, #1
 8009c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c18:	e016      	b.n	8009c48 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	691a      	ldr	r2, [r3, #16]
 8009c24:	f107 010c 	add.w	r1, r7, #12
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	f7ff fe53 	bl	80098d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff ff00 	bl	8009a34 <dir_find>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d106      	bne.n	8009c50 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	3301      	adds	r3, #1
 8009c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	2b63      	cmp	r3, #99	; 0x63
 8009c4c:	d9e5      	bls.n	8009c1a <dir_register+0x66>
 8009c4e:	e000      	b.n	8009c52 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009c50:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	2b64      	cmp	r3, #100	; 0x64
 8009c56:	d101      	bne.n	8009c5c <dir_register+0xa8>
 8009c58:	2307      	movs	r3, #7
 8009c5a:	e09c      	b.n	8009d96 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c60:	2b04      	cmp	r3, #4
 8009c62:	d002      	beq.n	8009c6a <dir_register+0xb6>
 8009c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c68:	e095      	b.n	8009d96 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009c6a:	7dfa      	ldrb	r2, [r7, #23]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d007      	beq.n	8009c8c <dir_register+0xd8>
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	330c      	adds	r3, #12
 8009c80:	4a47      	ldr	r2, [pc, #284]	; (8009da0 <dir_register+0x1ec>)
 8009c82:	fba2 2303 	umull	r2, r3, r2, r3
 8009c86:	089b      	lsrs	r3, r3, #2
 8009c88:	3301      	adds	r3, #1
 8009c8a:	e000      	b.n	8009c8e <dir_register+0xda>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009c90:	6a39      	ldr	r1, [r7, #32]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff fcc0 	bl	8009618 <dir_alloc>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d148      	bne.n	8009d38 <dir_register+0x184>
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	623b      	str	r3, [r7, #32]
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d042      	beq.n	8009d38 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	695a      	ldr	r2, [r3, #20]
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	015b      	lsls	r3, r3, #5
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7ff fb4b 	bl	800935a <dir_sdi>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d132      	bne.n	8009d38 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	3324      	adds	r3, #36	; 0x24
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7ff fe8b 	bl	80099f2 <sum_sfn>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	69db      	ldr	r3, [r3, #28]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	69f8      	ldr	r0, [r7, #28]
 8009ce8:	f7fe ff5e 	bl	8008ba8 <move_window>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d11d      	bne.n	8009d36 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	6918      	ldr	r0, [r3, #16]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a19      	ldr	r1, [r3, #32]
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	7efb      	ldrb	r3, [r7, #27]
 8009d08:	f7ff fd7c 	bl	8009804 <put_lfn>
				fs->wflag = 1;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009d12:	2100      	movs	r1, #0
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7ff fba9 	bl	800946c <dir_next>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009d20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d107      	bne.n	8009d38 <dir_register+0x184>
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	623b      	str	r3, [r7, #32]
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1d5      	bne.n	8009ce0 <dir_register+0x12c>
 8009d34:	e000      	b.n	8009d38 <dir_register+0x184>
				if (res != FR_OK) break;
 8009d36:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009d38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d128      	bne.n	8009d92 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	69db      	ldr	r3, [r3, #28]
 8009d44:	4619      	mov	r1, r3
 8009d46:	69f8      	ldr	r0, [r7, #28]
 8009d48:	f7fe ff2e 	bl	8008ba8 <move_window>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d11b      	bne.n	8009d92 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	2100      	movs	r1, #0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fd13 	bl	800878e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a18      	ldr	r0, [r3, #32]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3324      	adds	r3, #36	; 0x24
 8009d70:	220b      	movs	r2, #11
 8009d72:	4619      	mov	r1, r3
 8009d74:	f7fe fcea 	bl	800874c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	330c      	adds	r3, #12
 8009d84:	f002 0218 	and.w	r2, r2, #24
 8009d88:	b2d2      	uxtb	r2, r2
 8009d8a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3730      	adds	r7, #48	; 0x30
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	4ec4ec4f 	.word	0x4ec4ec4f

08009da4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08a      	sub	sp, #40	; 0x28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	613b      	str	r3, [r7, #16]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	617b      	str	r3, [r7, #20]
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	1c5a      	adds	r2, r3, #1
 8009dc8:	61ba      	str	r2, [r7, #24]
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	4413      	add	r3, r2
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dd4:	2b1f      	cmp	r3, #31
 8009dd6:	d940      	bls.n	8009e5a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dda:	2b2f      	cmp	r3, #47	; 0x2f
 8009ddc:	d006      	beq.n	8009dec <create_name+0x48>
 8009dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009de0:	2b5c      	cmp	r3, #92	; 0x5c
 8009de2:	d110      	bne.n	8009e06 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009de4:	e002      	b.n	8009dec <create_name+0x48>
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	3301      	adds	r3, #1
 8009dea:	61bb      	str	r3, [r7, #24]
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	4413      	add	r3, r2
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b2f      	cmp	r3, #47	; 0x2f
 8009df6:	d0f6      	beq.n	8009de6 <create_name+0x42>
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2b5c      	cmp	r3, #92	; 0x5c
 8009e02:	d0f0      	beq.n	8009de6 <create_name+0x42>
			break;
 8009e04:	e02a      	b.n	8009e5c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2bfe      	cmp	r3, #254	; 0xfe
 8009e0a:	d901      	bls.n	8009e10 <create_name+0x6c>
 8009e0c:	2306      	movs	r3, #6
 8009e0e:	e177      	b.n	800a100 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e18:	2101      	movs	r1, #1
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f001 fc8a 	bl	800b734 <ff_convert>
 8009e20:	4603      	mov	r3, r0
 8009e22:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <create_name+0x8a>
 8009e2a:	2306      	movs	r3, #6
 8009e2c:	e168      	b.n	800a100 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e30:	2b7f      	cmp	r3, #127	; 0x7f
 8009e32:	d809      	bhi.n	8009e48 <create_name+0xa4>
 8009e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e36:	4619      	mov	r1, r3
 8009e38:	48b3      	ldr	r0, [pc, #716]	; (800a108 <create_name+0x364>)
 8009e3a:	f7fe fce9 	bl	8008810 <chk_chr>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <create_name+0xa4>
 8009e44:	2306      	movs	r3, #6
 8009e46:	e15b      	b.n	800a100 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	617a      	str	r2, [r7, #20]
 8009e4e:	005b      	lsls	r3, r3, #1
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	4413      	add	r3, r2
 8009e54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e56:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009e58:	e7b4      	b.n	8009dc4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009e5a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	441a      	add	r2, r3
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e68:	2b1f      	cmp	r3, #31
 8009e6a:	d801      	bhi.n	8009e70 <create_name+0xcc>
 8009e6c:	2304      	movs	r3, #4
 8009e6e:	e000      	b.n	8009e72 <create_name+0xce>
 8009e70:	2300      	movs	r3, #0
 8009e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009e76:	e011      	b.n	8009e9c <create_name+0xf8>
		w = lfn[di - 1];
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	4413      	add	r3, r2
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e8c:	2b20      	cmp	r3, #32
 8009e8e:	d002      	beq.n	8009e96 <create_name+0xf2>
 8009e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e92:	2b2e      	cmp	r3, #46	; 0x2e
 8009e94:	d106      	bne.n	8009ea4 <create_name+0x100>
		di--;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1ea      	bne.n	8009e78 <create_name+0xd4>
 8009ea2:	e000      	b.n	8009ea6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009ea4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	4413      	add	r3, r2
 8009eae:	2200      	movs	r2, #0
 8009eb0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <create_name+0x118>
 8009eb8:	2306      	movs	r3, #6
 8009eba:	e121      	b.n	800a100 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3324      	adds	r3, #36	; 0x24
 8009ec0:	220b      	movs	r2, #11
 8009ec2:	2120      	movs	r1, #32
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fe fc62 	bl	800878e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009eca:	2300      	movs	r3, #0
 8009ecc:	61bb      	str	r3, [r7, #24]
 8009ece:	e002      	b.n	8009ed6 <create_name+0x132>
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	61bb      	str	r3, [r7, #24]
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	4413      	add	r3, r2
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	2b20      	cmp	r3, #32
 8009ee2:	d0f5      	beq.n	8009ed0 <create_name+0x12c>
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	4413      	add	r3, r2
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef0:	d0ee      	beq.n	8009ed0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d009      	beq.n	8009f0c <create_name+0x168>
 8009ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009efc:	f043 0303 	orr.w	r3, r3, #3
 8009f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009f04:	e002      	b.n	8009f0c <create_name+0x168>
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d009      	beq.n	8009f26 <create_name+0x182>
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	005b      	lsls	r3, r3, #1
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	2b2e      	cmp	r3, #46	; 0x2e
 8009f24:	d1ef      	bne.n	8009f06 <create_name+0x162>

	i = b = 0; ni = 8;
 8009f26:	2300      	movs	r3, #0
 8009f28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	623b      	str	r3, [r7, #32]
 8009f30:	2308      	movs	r3, #8
 8009f32:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	61ba      	str	r2, [r7, #24]
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	4413      	add	r3, r2
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009f44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 8090 	beq.w	800a06c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f4e:	2b20      	cmp	r3, #32
 8009f50:	d006      	beq.n	8009f60 <create_name+0x1bc>
 8009f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f54:	2b2e      	cmp	r3, #46	; 0x2e
 8009f56:	d10a      	bne.n	8009f6e <create_name+0x1ca>
 8009f58:	69ba      	ldr	r2, [r7, #24]
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d006      	beq.n	8009f6e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f64:	f043 0303 	orr.w	r3, r3, #3
 8009f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f6c:	e07d      	b.n	800a06a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009f6e:	6a3a      	ldr	r2, [r7, #32]
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d203      	bcs.n	8009f7e <create_name+0x1da>
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d123      	bne.n	8009fc6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	2b0b      	cmp	r3, #11
 8009f82:	d106      	bne.n	8009f92 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f88:	f043 0303 	orr.w	r3, r3, #3
 8009f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f90:	e06f      	b.n	800a072 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009f92:	69ba      	ldr	r2, [r7, #24]
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d005      	beq.n	8009fa6 <create_name+0x202>
 8009f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f9e:	f043 0303 	orr.w	r3, r3, #3
 8009fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009fa6:	69ba      	ldr	r2, [r7, #24]
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d860      	bhi.n	800a070 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	61bb      	str	r3, [r7, #24]
 8009fb2:	2308      	movs	r3, #8
 8009fb4:	623b      	str	r3, [r7, #32]
 8009fb6:	230b      	movs	r3, #11
 8009fb8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009fba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009fc4:	e051      	b.n	800a06a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8009fca:	d914      	bls.n	8009ff6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fce:	2100      	movs	r1, #0
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f001 fbaf 	bl	800b734 <ff_convert>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d004      	beq.n	8009fea <create_name+0x246>
 8009fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fe2:	3b80      	subs	r3, #128	; 0x80
 8009fe4:	4a49      	ldr	r2, [pc, #292]	; (800a10c <create_name+0x368>)
 8009fe6:	5cd3      	ldrb	r3, [r2, r3]
 8009fe8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fee:	f043 0302 	orr.w	r3, r3, #2
 8009ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d007      	beq.n	800a00c <create_name+0x268>
 8009ffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ffe:	4619      	mov	r1, r3
 800a000:	4843      	ldr	r0, [pc, #268]	; (800a110 <create_name+0x36c>)
 800a002:	f7fe fc05 	bl	8008810 <chk_chr>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d008      	beq.n	800a01e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a00c:	235f      	movs	r3, #95	; 0x5f
 800a00e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a014:	f043 0303 	orr.w	r3, r3, #3
 800a018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a01c:	e01b      	b.n	800a056 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a01e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a020:	2b40      	cmp	r3, #64	; 0x40
 800a022:	d909      	bls.n	800a038 <create_name+0x294>
 800a024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a026:	2b5a      	cmp	r3, #90	; 0x5a
 800a028:	d806      	bhi.n	800a038 <create_name+0x294>
					b |= 2;
 800a02a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a02e:	f043 0302 	orr.w	r3, r3, #2
 800a032:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a036:	e00e      	b.n	800a056 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a03a:	2b60      	cmp	r3, #96	; 0x60
 800a03c:	d90b      	bls.n	800a056 <create_name+0x2b2>
 800a03e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a040:	2b7a      	cmp	r3, #122	; 0x7a
 800a042:	d808      	bhi.n	800a056 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a044:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a048:	f043 0301 	orr.w	r3, r3, #1
 800a04c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a052:	3b20      	subs	r3, #32
 800a054:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	1c5a      	adds	r2, r3, #1
 800a05a:	623a      	str	r2, [r7, #32]
 800a05c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a05e:	b2d1      	uxtb	r1, r2
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	4413      	add	r3, r2
 800a064:	460a      	mov	r2, r1
 800a066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a06a:	e763      	b.n	8009f34 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a06c:	bf00      	nop
 800a06e:	e000      	b.n	800a072 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800a070:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a078:	2be5      	cmp	r3, #229	; 0xe5
 800a07a:	d103      	bne.n	800a084 <create_name+0x2e0>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2205      	movs	r2, #5
 800a080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	2b08      	cmp	r3, #8
 800a088:	d104      	bne.n	800a094 <create_name+0x2f0>
 800a08a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a098:	f003 030c 	and.w	r3, r3, #12
 800a09c:	2b0c      	cmp	r3, #12
 800a09e:	d005      	beq.n	800a0ac <create_name+0x308>
 800a0a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0a4:	f003 0303 	and.w	r3, r3, #3
 800a0a8:	2b03      	cmp	r3, #3
 800a0aa:	d105      	bne.n	800a0b8 <create_name+0x314>
 800a0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0b0:	f043 0302 	orr.w	r3, r3, #2
 800a0b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0bc:	f003 0302 	and.w	r3, r3, #2
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d117      	bne.n	800a0f4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a0c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0c8:	f003 0303 	and.w	r3, r3, #3
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d105      	bne.n	800a0dc <create_name+0x338>
 800a0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0d4:	f043 0310 	orr.w	r3, r3, #16
 800a0d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a0dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0e0:	f003 030c 	and.w	r3, r3, #12
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	d105      	bne.n	800a0f4 <create_name+0x350>
 800a0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0ec:	f043 0308 	orr.w	r3, r3, #8
 800a0f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a0fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a0fe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a100:	4618      	mov	r0, r3
 800a102:	3728      	adds	r7, #40	; 0x28
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	0800e52c 	.word	0x0800e52c
 800a10c:	0800e5a0 	.word	0x0800e5a0
 800a110:	0800e538 	.word	0x0800e538

0800a114 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a128:	e002      	b.n	800a130 <follow_path+0x1c>
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	3301      	adds	r3, #1
 800a12e:	603b      	str	r3, [r7, #0]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	2b2f      	cmp	r3, #47	; 0x2f
 800a136:	d0f8      	beq.n	800a12a <follow_path+0x16>
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b5c      	cmp	r3, #92	; 0x5c
 800a13e:	d0f4      	beq.n	800a12a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	2200      	movs	r2, #0
 800a144:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	2b1f      	cmp	r3, #31
 800a14c:	d80a      	bhi.n	800a164 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2280      	movs	r2, #128	; 0x80
 800a152:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a156:	2100      	movs	r1, #0
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff f8fe 	bl	800935a <dir_sdi>
 800a15e:	4603      	mov	r3, r0
 800a160:	75fb      	strb	r3, [r7, #23]
 800a162:	e048      	b.n	800a1f6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a164:	463b      	mov	r3, r7
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7ff fe1b 	bl	8009da4 <create_name>
 800a16e:	4603      	mov	r3, r0
 800a170:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a172:	7dfb      	ldrb	r3, [r7, #23]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d139      	bne.n	800a1ec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7ff fc5b 	bl	8009a34 <dir_find>
 800a17e:	4603      	mov	r3, r0
 800a180:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a188:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00a      	beq.n	800a1a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	2b04      	cmp	r3, #4
 800a194:	d12c      	bne.n	800a1f0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a196:	7afb      	ldrb	r3, [r7, #11]
 800a198:	f003 0304 	and.w	r3, r3, #4
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d127      	bne.n	800a1f0 <follow_path+0xdc>
 800a1a0:	2305      	movs	r3, #5
 800a1a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a1a4:	e024      	b.n	800a1f0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	f003 0304 	and.w	r3, r3, #4
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d121      	bne.n	800a1f4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	799b      	ldrb	r3, [r3, #6]
 800a1b4:	f003 0310 	and.w	r3, r3, #16
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d102      	bne.n	800a1c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a1bc:	2305      	movs	r3, #5
 800a1be:	75fb      	strb	r3, [r7, #23]
 800a1c0:	e019      	b.n	800a1f6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	8992      	ldrh	r2, [r2, #12]
 800a1d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1d4:	fb02 f200 	mul.w	r2, r2, r0
 800a1d8:	1a9b      	subs	r3, r3, r2
 800a1da:	440b      	add	r3, r1
 800a1dc:	4619      	mov	r1, r3
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f7ff fa61 	bl	80096a6 <ld_clust>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a1ea:	e7bb      	b.n	800a164 <follow_path+0x50>
			if (res != FR_OK) break;
 800a1ec:	bf00      	nop
 800a1ee:	e002      	b.n	800a1f6 <follow_path+0xe2>
				break;
 800a1f0:	bf00      	nop
 800a1f2:	e000      	b.n	800a1f6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a1f4:	bf00      	nop
			}
		}
	}

	return res;
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a208:	f04f 33ff 	mov.w	r3, #4294967295
 800a20c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d031      	beq.n	800a27a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	617b      	str	r3, [r7, #20]
 800a21c:	e002      	b.n	800a224 <get_ldnumber+0x24>
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	3301      	adds	r3, #1
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	2b1f      	cmp	r3, #31
 800a22a:	d903      	bls.n	800a234 <get_ldnumber+0x34>
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	2b3a      	cmp	r3, #58	; 0x3a
 800a232:	d1f4      	bne.n	800a21e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b3a      	cmp	r3, #58	; 0x3a
 800a23a:	d11c      	bne.n	800a276 <get_ldnumber+0x76>
			tp = *path;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	1c5a      	adds	r2, r3, #1
 800a246:	60fa      	str	r2, [r7, #12]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	3b30      	subs	r3, #48	; 0x30
 800a24c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b09      	cmp	r3, #9
 800a252:	d80e      	bhi.n	800a272 <get_ldnumber+0x72>
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d10a      	bne.n	800a272 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d107      	bne.n	800a272 <get_ldnumber+0x72>
					vol = (int)i;
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	3301      	adds	r3, #1
 800a26a:	617b      	str	r3, [r7, #20]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	e002      	b.n	800a27c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a276:	2300      	movs	r3, #0
 800a278:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a27a:	693b      	ldr	r3, [r7, #16]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	371c      	adds	r7, #28
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	70da      	strb	r2, [r3, #3]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f04f 32ff 	mov.w	r2, #4294967295
 800a29e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7fe fc80 	bl	8008ba8 <move_window>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <check_fs+0x2a>
 800a2ae:	2304      	movs	r3, #4
 800a2b0:	e038      	b.n	800a324 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	3338      	adds	r3, #56	; 0x38
 800a2b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fe f9c4 	bl	8008648 <ld_word>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d001      	beq.n	800a2d0 <check_fs+0x48>
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	e029      	b.n	800a324 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2d6:	2be9      	cmp	r3, #233	; 0xe9
 800a2d8:	d009      	beq.n	800a2ee <check_fs+0x66>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2e0:	2beb      	cmp	r3, #235	; 0xeb
 800a2e2:	d11e      	bne.n	800a322 <check_fs+0x9a>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a2ea:	2b90      	cmp	r3, #144	; 0x90
 800a2ec:	d119      	bne.n	800a322 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3338      	adds	r3, #56	; 0x38
 800a2f2:	3336      	adds	r3, #54	; 0x36
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fe f9bf 	bl	8008678 <ld_dword>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a300:	4a0a      	ldr	r2, [pc, #40]	; (800a32c <check_fs+0xa4>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d101      	bne.n	800a30a <check_fs+0x82>
 800a306:	2300      	movs	r3, #0
 800a308:	e00c      	b.n	800a324 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	3338      	adds	r3, #56	; 0x38
 800a30e:	3352      	adds	r3, #82	; 0x52
 800a310:	4618      	mov	r0, r3
 800a312:	f7fe f9b1 	bl	8008678 <ld_dword>
 800a316:	4602      	mov	r2, r0
 800a318:	4b05      	ldr	r3, [pc, #20]	; (800a330 <check_fs+0xa8>)
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d101      	bne.n	800a322 <check_fs+0x9a>
 800a31e:	2300      	movs	r3, #0
 800a320:	e000      	b.n	800a324 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a322:	2302      	movs	r3, #2
}
 800a324:	4618      	mov	r0, r3
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	00544146 	.word	0x00544146
 800a330:	33544146 	.word	0x33544146

0800a334 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b096      	sub	sp, #88	; 0x58
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	4613      	mov	r3, r2
 800a340:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7ff ff59 	bl	800a200 <get_ldnumber>
 800a34e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a352:	2b00      	cmp	r3, #0
 800a354:	da01      	bge.n	800a35a <find_volume+0x26>
 800a356:	230b      	movs	r3, #11
 800a358:	e268      	b.n	800a82c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a35a:	4ab0      	ldr	r2, [pc, #704]	; (800a61c <find_volume+0x2e8>)
 800a35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a35e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a362:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <find_volume+0x3a>
 800a36a:	230c      	movs	r3, #12
 800a36c:	e25e      	b.n	800a82c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a372:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	f023 0301 	bic.w	r3, r3, #1
 800a37a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d01a      	beq.n	800a3ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a386:	785b      	ldrb	r3, [r3, #1]
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe f8bf 	bl	800850c <disk_status>
 800a38e:	4603      	mov	r3, r0
 800a390:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10c      	bne.n	800a3ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d007      	beq.n	800a3b6 <find_volume+0x82>
 800a3a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3aa:	f003 0304 	and.w	r3, r3, #4
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	e23a      	b.n	800a82c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	e238      	b.n	800a82c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	2200      	movs	r2, #0
 800a3be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c2:	b2da      	uxtb	r2, r3
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ca:	785b      	ldrb	r3, [r3, #1]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fe f8b7 	bl	8008540 <disk_initialize>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a3d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e221      	b.n	800a82c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d007      	beq.n	800a3fe <find_volume+0xca>
 800a3ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3f2:	f003 0304 	and.w	r3, r3, #4
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a3fa:	230a      	movs	r3, #10
 800a3fc:	e216      	b.n	800a82c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	7858      	ldrb	r0, [r3, #1]
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	330c      	adds	r3, #12
 800a406:	461a      	mov	r2, r3
 800a408:	2102      	movs	r1, #2
 800a40a:	f7fe f8ff 	bl	800860c <disk_ioctl>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <find_volume+0xe4>
 800a414:	2301      	movs	r3, #1
 800a416:	e209      	b.n	800a82c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41a:	899b      	ldrh	r3, [r3, #12]
 800a41c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a420:	d80d      	bhi.n	800a43e <find_volume+0x10a>
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	899b      	ldrh	r3, [r3, #12]
 800a426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a42a:	d308      	bcc.n	800a43e <find_volume+0x10a>
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	899b      	ldrh	r3, [r3, #12]
 800a430:	461a      	mov	r2, r3
 800a432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a434:	899b      	ldrh	r3, [r3, #12]
 800a436:	3b01      	subs	r3, #1
 800a438:	4013      	ands	r3, r2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <find_volume+0x10e>
 800a43e:	2301      	movs	r3, #1
 800a440:	e1f4      	b.n	800a82c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a446:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a448:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a44a:	f7ff ff1d 	bl	800a288 <check_fs>
 800a44e:	4603      	mov	r3, r0
 800a450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d14b      	bne.n	800a4f4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a45c:	2300      	movs	r3, #0
 800a45e:	643b      	str	r3, [r7, #64]	; 0x40
 800a460:	e01f      	b.n	800a4a2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46a:	011b      	lsls	r3, r3, #4
 800a46c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a470:	4413      	add	r3, r2
 800a472:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	3304      	adds	r3, #4
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d006      	beq.n	800a48c <find_volume+0x158>
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	3308      	adds	r3, #8
 800a482:	4618      	mov	r0, r3
 800a484:	f7fe f8f8 	bl	8008678 <ld_dword>
 800a488:	4602      	mov	r2, r0
 800a48a:	e000      	b.n	800a48e <find_volume+0x15a>
 800a48c:	2200      	movs	r2, #0
 800a48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a496:	440b      	add	r3, r1
 800a498:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a49c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a49e:	3301      	adds	r3, #1
 800a4a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a4a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4a4:	2b03      	cmp	r3, #3
 800a4a6:	d9dc      	bls.n	800a462 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a4ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <find_volume+0x184>
 800a4b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a4b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a4c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a4c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d005      	beq.n	800a4da <find_volume+0x1a6>
 800a4ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4d2:	f7ff fed9 	bl	800a288 <check_fs>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	e000      	b.n	800a4dc <find_volume+0x1a8>
 800a4da:	2303      	movs	r3, #3
 800a4dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a4e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d905      	bls.n	800a4f4 <find_volume+0x1c0>
 800a4e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a4ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4f0:	2b03      	cmp	r3, #3
 800a4f2:	d9e1      	bls.n	800a4b8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a4f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4f8:	2b04      	cmp	r3, #4
 800a4fa:	d101      	bne.n	800a500 <find_volume+0x1cc>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e195      	b.n	800a82c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a504:	2b01      	cmp	r3, #1
 800a506:	d901      	bls.n	800a50c <find_volume+0x1d8>
 800a508:	230d      	movs	r3, #13
 800a50a:	e18f      	b.n	800a82c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	3338      	adds	r3, #56	; 0x38
 800a510:	330b      	adds	r3, #11
 800a512:	4618      	mov	r0, r3
 800a514:	f7fe f898 	bl	8008648 <ld_word>
 800a518:	4603      	mov	r3, r0
 800a51a:	461a      	mov	r2, r3
 800a51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51e:	899b      	ldrh	r3, [r3, #12]
 800a520:	429a      	cmp	r2, r3
 800a522:	d001      	beq.n	800a528 <find_volume+0x1f4>
 800a524:	230d      	movs	r3, #13
 800a526:	e181      	b.n	800a82c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	3338      	adds	r3, #56	; 0x38
 800a52c:	3316      	adds	r3, #22
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe f88a 	bl	8008648 <ld_word>
 800a534:	4603      	mov	r3, r0
 800a536:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d106      	bne.n	800a54c <find_volume+0x218>
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	3338      	adds	r3, #56	; 0x38
 800a542:	3324      	adds	r3, #36	; 0x24
 800a544:	4618      	mov	r0, r3
 800a546:	f7fe f897 	bl	8008678 <ld_dword>
 800a54a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a550:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a554:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	789b      	ldrb	r3, [r3, #2]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d005      	beq.n	800a570 <find_volume+0x23c>
 800a564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a566:	789b      	ldrb	r3, [r3, #2]
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d001      	beq.n	800a570 <find_volume+0x23c>
 800a56c:	230d      	movs	r3, #13
 800a56e:	e15d      	b.n	800a82c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	789b      	ldrb	r3, [r3, #2]
 800a574:	461a      	mov	r2, r3
 800a576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a578:	fb02 f303 	mul.w	r3, r2, r3
 800a57c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a584:	b29a      	uxth	r2, r3
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	895b      	ldrh	r3, [r3, #10]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d008      	beq.n	800a5a4 <find_volume+0x270>
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	895b      	ldrh	r3, [r3, #10]
 800a596:	461a      	mov	r2, r3
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	895b      	ldrh	r3, [r3, #10]
 800a59c:	3b01      	subs	r3, #1
 800a59e:	4013      	ands	r3, r2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <find_volume+0x274>
 800a5a4:	230d      	movs	r3, #13
 800a5a6:	e141      	b.n	800a82c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	3338      	adds	r3, #56	; 0x38
 800a5ac:	3311      	adds	r3, #17
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe f84a 	bl	8008648 <ld_word>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5be:	891b      	ldrh	r3, [r3, #8]
 800a5c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5c2:	8992      	ldrh	r2, [r2, #12]
 800a5c4:	0952      	lsrs	r2, r2, #5
 800a5c6:	b292      	uxth	r2, r2
 800a5c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5cc:	fb02 f201 	mul.w	r2, r2, r1
 800a5d0:	1a9b      	subs	r3, r3, r2
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <find_volume+0x2a8>
 800a5d8:	230d      	movs	r3, #13
 800a5da:	e127      	b.n	800a82c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5de:	3338      	adds	r3, #56	; 0x38
 800a5e0:	3313      	adds	r3, #19
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe f830 	bl	8008648 <ld_word>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a5ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d106      	bne.n	800a600 <find_volume+0x2cc>
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	3338      	adds	r3, #56	; 0x38
 800a5f6:	3320      	adds	r3, #32
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe f83d 	bl	8008678 <ld_dword>
 800a5fe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	3338      	adds	r3, #56	; 0x38
 800a604:	330e      	adds	r3, #14
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe f81e 	bl	8008648 <ld_word>
 800a60c:	4603      	mov	r3, r0
 800a60e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a610:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a612:	2b00      	cmp	r3, #0
 800a614:	d104      	bne.n	800a620 <find_volume+0x2ec>
 800a616:	230d      	movs	r3, #13
 800a618:	e108      	b.n	800a82c <find_volume+0x4f8>
 800a61a:	bf00      	nop
 800a61c:	20000498 	.word	0x20000498

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a620:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a624:	4413      	add	r3, r2
 800a626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a628:	8911      	ldrh	r1, [r2, #8]
 800a62a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a62c:	8992      	ldrh	r2, [r2, #12]
 800a62e:	0952      	lsrs	r2, r2, #5
 800a630:	b292      	uxth	r2, r2
 800a632:	fbb1 f2f2 	udiv	r2, r1, r2
 800a636:	b292      	uxth	r2, r2
 800a638:	4413      	add	r3, r2
 800a63a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a63c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	429a      	cmp	r2, r3
 800a642:	d201      	bcs.n	800a648 <find_volume+0x314>
 800a644:	230d      	movs	r3, #13
 800a646:	e0f1      	b.n	800a82c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a650:	8952      	ldrh	r2, [r2, #10]
 800a652:	fbb3 f3f2 	udiv	r3, r3, r2
 800a656:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <find_volume+0x32e>
 800a65e:	230d      	movs	r3, #13
 800a660:	e0e4      	b.n	800a82c <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a662:	2303      	movs	r3, #3
 800a664:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a66e:	4293      	cmp	r3, r2
 800a670:	d802      	bhi.n	800a678 <find_volume+0x344>
 800a672:	2302      	movs	r3, #2
 800a674:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a67e:	4293      	cmp	r3, r2
 800a680:	d802      	bhi.n	800a688 <find_volume+0x354>
 800a682:	2301      	movs	r3, #1
 800a684:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68a:	1c9a      	adds	r2, r3, #2
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a692:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a694:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a696:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a69a:	441a      	add	r2, r3
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a6a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	441a      	add	r2, r3
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a6aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	d11e      	bne.n	800a6f0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	3338      	adds	r3, #56	; 0x38
 800a6b6:	332a      	adds	r3, #42	; 0x2a
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fd ffc5 	bl	8008648 <ld_word>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <find_volume+0x394>
 800a6c4:	230d      	movs	r3, #13
 800a6c6:	e0b1      	b.n	800a82c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	891b      	ldrh	r3, [r3, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <find_volume+0x3a0>
 800a6d0:	230d      	movs	r3, #13
 800a6d2:	e0ab      	b.n	800a82c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d6:	3338      	adds	r3, #56	; 0x38
 800a6d8:	332c      	adds	r3, #44	; 0x2c
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fd ffcc 	bl	8008678 <ld_dword>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e8:	69db      	ldr	r3, [r3, #28]
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ee:	e01f      	b.n	800a730 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	891b      	ldrh	r3, [r3, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <find_volume+0x3c8>
 800a6f8:	230d      	movs	r3, #13
 800a6fa:	e097      	b.n	800a82c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a702:	441a      	add	r2, r3
 800a704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a706:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d103      	bne.n	800a718 <find_volume+0x3e4>
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	69db      	ldr	r3, [r3, #28]
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	e00a      	b.n	800a72e <find_volume+0x3fa>
 800a718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71a:	69da      	ldr	r2, [r3, #28]
 800a71c:	4613      	mov	r3, r2
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	4413      	add	r3, r2
 800a722:	085a      	lsrs	r2, r3, #1
 800a724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	f003 0301 	and.w	r3, r3, #1
 800a72c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a72e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a732:	6a1a      	ldr	r2, [r3, #32]
 800a734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a736:	899b      	ldrh	r3, [r3, #12]
 800a738:	4619      	mov	r1, r3
 800a73a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a73c:	440b      	add	r3, r1
 800a73e:	3b01      	subs	r3, #1
 800a740:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a742:	8989      	ldrh	r1, [r1, #12]
 800a744:	fbb3 f3f1 	udiv	r3, r3, r1
 800a748:	429a      	cmp	r2, r3
 800a74a:	d201      	bcs.n	800a750 <find_volume+0x41c>
 800a74c:	230d      	movs	r3, #13
 800a74e:	e06d      	b.n	800a82c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	f04f 32ff 	mov.w	r2, #4294967295
 800a756:	619a      	str	r2, [r3, #24]
 800a758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75a:	699a      	ldr	r2, [r3, #24]
 800a75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	2280      	movs	r2, #128	; 0x80
 800a764:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a766:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a76a:	2b03      	cmp	r3, #3
 800a76c:	d149      	bne.n	800a802 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a770:	3338      	adds	r3, #56	; 0x38
 800a772:	3330      	adds	r3, #48	; 0x30
 800a774:	4618      	mov	r0, r3
 800a776:	f7fd ff67 	bl	8008648 <ld_word>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d140      	bne.n	800a802 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a782:	3301      	adds	r3, #1
 800a784:	4619      	mov	r1, r3
 800a786:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a788:	f7fe fa0e 	bl	8008ba8 <move_window>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d137      	bne.n	800a802 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a794:	2200      	movs	r2, #0
 800a796:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	3338      	adds	r3, #56	; 0x38
 800a79c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fd ff51 	bl	8008648 <ld_word>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d127      	bne.n	800a802 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b4:	3338      	adds	r3, #56	; 0x38
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fd ff5e 	bl	8008678 <ld_dword>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	4b1d      	ldr	r3, [pc, #116]	; (800a834 <find_volume+0x500>)
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d11e      	bne.n	800a802 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	3338      	adds	r3, #56	; 0x38
 800a7c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fd ff53 	bl	8008678 <ld_dword>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	4b18      	ldr	r3, [pc, #96]	; (800a838 <find_volume+0x504>)
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d113      	bne.n	800a802 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7dc:	3338      	adds	r3, #56	; 0x38
 800a7de:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fd ff48 	bl	8008678 <ld_dword>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	3338      	adds	r3, #56	; 0x38
 800a7f2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fd ff3e 	bl	8008678 <ld_dword>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a800:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a804:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a808:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a80a:	4b0c      	ldr	r3, [pc, #48]	; (800a83c <find_volume+0x508>)
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	3301      	adds	r3, #1
 800a810:	b29a      	uxth	r2, r3
 800a812:	4b0a      	ldr	r3, [pc, #40]	; (800a83c <find_volume+0x508>)
 800a814:	801a      	strh	r2, [r3, #0]
 800a816:	4b09      	ldr	r3, [pc, #36]	; (800a83c <find_volume+0x508>)
 800a818:	881a      	ldrh	r2, [r3, #0]
 800a81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a820:	4a07      	ldr	r2, [pc, #28]	; (800a840 <find_volume+0x50c>)
 800a822:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a824:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a826:	f7fe f957 	bl	8008ad8 <clear_lock>
#endif
	return FR_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3758      	adds	r7, #88	; 0x58
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	41615252 	.word	0x41615252
 800a838:	61417272 	.word	0x61417272
 800a83c:	2000049c 	.word	0x2000049c
 800a840:	200004c0 	.word	0x200004c0

0800a844 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a84e:	2309      	movs	r3, #9
 800a850:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d01c      	beq.n	800a892 <validate+0x4e>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d018      	beq.n	800a892 <validate+0x4e>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d013      	beq.n	800a892 <validate+0x4e>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	889a      	ldrh	r2, [r3, #4]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	88db      	ldrh	r3, [r3, #6]
 800a874:	429a      	cmp	r2, r3
 800a876:	d10c      	bne.n	800a892 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	785b      	ldrb	r3, [r3, #1]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fd fe44 	bl	800850c <disk_status>
 800a884:	4603      	mov	r3, r0
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <validate+0x4e>
			res = FR_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d102      	bne.n	800a89e <validate+0x5a>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	e000      	b.n	800a8a0 <validate+0x5c>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	6013      	str	r3, [r2, #0]
	return res;
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
	...

0800a8b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b088      	sub	sp, #32
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a8c2:	f107 0310 	add.w	r3, r7, #16
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff fc9a 	bl	800a200 <get_ldnumber>
 800a8cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	da01      	bge.n	800a8d8 <f_mount+0x28>
 800a8d4:	230b      	movs	r3, #11
 800a8d6:	e02b      	b.n	800a930 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a8d8:	4a17      	ldr	r2, [pc, #92]	; (800a938 <f_mount+0x88>)
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d005      	beq.n	800a8f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a8e8:	69b8      	ldr	r0, [r7, #24]
 800a8ea:	f7fe f8f5 	bl	8008ad8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	490d      	ldr	r1, [pc, #52]	; (800a938 <f_mount+0x88>)
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <f_mount+0x66>
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d001      	beq.n	800a91a <f_mount+0x6a>
 800a916:	2300      	movs	r3, #0
 800a918:	e00a      	b.n	800a930 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a91a:	f107 010c 	add.w	r1, r7, #12
 800a91e:	f107 0308 	add.w	r3, r7, #8
 800a922:	2200      	movs	r2, #0
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff fd05 	bl	800a334 <find_volume>
 800a92a:	4603      	mov	r3, r0
 800a92c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3720      	adds	r7, #32
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	20000498 	.word	0x20000498

0800a93c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b09a      	sub	sp, #104	; 0x68
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	4613      	mov	r3, r2
 800a948:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <f_open+0x18>
 800a950:	2309      	movs	r3, #9
 800a952:	e1bb      	b.n	800accc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a95a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a95c:	79fa      	ldrb	r2, [r7, #7]
 800a95e:	f107 0114 	add.w	r1, r7, #20
 800a962:	f107 0308 	add.w	r3, r7, #8
 800a966:	4618      	mov	r0, r3
 800a968:	f7ff fce4 	bl	800a334 <find_volume>
 800a96c:	4603      	mov	r3, r0
 800a96e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a972:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a976:	2b00      	cmp	r3, #0
 800a978:	f040 819f 	bne.w	800acba <f_open+0x37e>
		dj.obj.fs = fs;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	f107 0318 	add.w	r3, r7, #24
 800a986:	4611      	mov	r1, r2
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fbc3 	bl	800a114 <follow_path>
 800a98e:	4603      	mov	r3, r0
 800a990:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a994:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d11a      	bne.n	800a9d2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a99c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a9a0:	b25b      	sxtb	r3, r3
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	da03      	bge.n	800a9ae <f_open+0x72>
				res = FR_INVALID_NAME;
 800a9a6:	2306      	movs	r3, #6
 800a9a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a9ac:	e011      	b.n	800a9d2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9ae:	79fb      	ldrb	r3, [r7, #7]
 800a9b0:	f023 0301 	bic.w	r3, r3, #1
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bf14      	ite	ne
 800a9b8:	2301      	movne	r3, #1
 800a9ba:	2300      	moveq	r3, #0
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f107 0318 	add.w	r3, r7, #24
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fd ff3e 	bl	8008848 <chk_lock>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a9d2:	79fb      	ldrb	r3, [r7, #7]
 800a9d4:	f003 031c 	and.w	r3, r3, #28
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d07f      	beq.n	800aadc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a9dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d017      	beq.n	800aa14 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a9e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9e8:	2b04      	cmp	r3, #4
 800a9ea:	d10e      	bne.n	800aa0a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a9ec:	f7fd ff88 	bl	8008900 <enq_lock>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d006      	beq.n	800aa04 <f_open+0xc8>
 800a9f6:	f107 0318 	add.w	r3, r7, #24
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff f8da 	bl	8009bb4 <dir_register>
 800aa00:	4603      	mov	r3, r0
 800aa02:	e000      	b.n	800aa06 <f_open+0xca>
 800aa04:	2312      	movs	r3, #18
 800aa06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aa0a:	79fb      	ldrb	r3, [r7, #7]
 800aa0c:	f043 0308 	orr.w	r3, r3, #8
 800aa10:	71fb      	strb	r3, [r7, #7]
 800aa12:	e010      	b.n	800aa36 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aa14:	7fbb      	ldrb	r3, [r7, #30]
 800aa16:	f003 0311 	and.w	r3, r3, #17
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <f_open+0xea>
					res = FR_DENIED;
 800aa1e:	2307      	movs	r3, #7
 800aa20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aa24:	e007      	b.n	800aa36 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	f003 0304 	and.w	r3, r3, #4
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <f_open+0xfa>
 800aa30:	2308      	movs	r3, #8
 800aa32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aa36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d168      	bne.n	800ab10 <f_open+0x1d4>
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	f003 0308 	and.w	r3, r3, #8
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d063      	beq.n	800ab10 <f_open+0x1d4>
				dw = GET_FATTIME();
 800aa48:	f7fd fa64 	bl	8007f14 <get_fattime>
 800aa4c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	330e      	adds	r3, #14
 800aa52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fd fe4d 	bl	80086f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5c:	3316      	adds	r3, #22
 800aa5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fd fe47 	bl	80086f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	330b      	adds	r3, #11
 800aa6a:	2220      	movs	r2, #32
 800aa6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa72:	4611      	mov	r1, r2
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fe fe16 	bl	80096a6 <ld_clust>
 800aa7a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa80:	2200      	movs	r2, #0
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fe fe2e 	bl	80096e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	331c      	adds	r3, #28
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fd fe30 	bl	80086f4 <st_dword>
					fs->wflag = 1;
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	2201      	movs	r2, #1
 800aa98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aa9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d037      	beq.n	800ab10 <f_open+0x1d4>
						dw = fs->winsect;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800aaa6:	f107 0318 	add.w	r3, r7, #24
 800aaaa:	2200      	movs	r2, #0
 800aaac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fb1e 	bl	80090f0 <remove_chain>
 800aab4:	4603      	mov	r3, r0
 800aab6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800aaba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d126      	bne.n	800ab10 <f_open+0x1d4>
							res = move_window(fs, dw);
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe f86e 	bl	8008ba8 <move_window>
 800aacc:	4603      	mov	r3, r0
 800aace:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aad6:	3a01      	subs	r2, #1
 800aad8:	615a      	str	r2, [r3, #20]
 800aada:	e019      	b.n	800ab10 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aadc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d115      	bne.n	800ab10 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aae4:	7fbb      	ldrb	r3, [r7, #30]
 800aae6:	f003 0310 	and.w	r3, r3, #16
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800aaee:	2304      	movs	r3, #4
 800aaf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aaf4:	e00c      	b.n	800ab10 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aaf6:	79fb      	ldrb	r3, [r7, #7]
 800aaf8:	f003 0302 	and.w	r3, r3, #2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d007      	beq.n	800ab10 <f_open+0x1d4>
 800ab00:	7fbb      	ldrb	r3, [r7, #30]
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d002      	beq.n	800ab10 <f_open+0x1d4>
						res = FR_DENIED;
 800ab0a:	2307      	movs	r3, #7
 800ab0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ab10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d128      	bne.n	800ab6a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ab18:	79fb      	ldrb	r3, [r7, #7]
 800ab1a:	f003 0308 	and.w	r3, r3, #8
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ab22:	79fb      	ldrb	r3, [r7, #7]
 800ab24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab28:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ab32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab38:	79fb      	ldrb	r3, [r7, #7]
 800ab3a:	f023 0301 	bic.w	r3, r3, #1
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	bf14      	ite	ne
 800ab42:	2301      	movne	r3, #1
 800ab44:	2300      	moveq	r3, #0
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	461a      	mov	r2, r3
 800ab4a:	f107 0318 	add.w	r3, r7, #24
 800ab4e:	4611      	mov	r1, r2
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fd fef7 	bl	8008944 <inc_lock>
 800ab56:	4602      	mov	r2, r0
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d102      	bne.n	800ab6a <f_open+0x22e>
 800ab64:	2302      	movs	r3, #2
 800ab66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ab6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f040 80a3 	bne.w	800acba <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab78:	4611      	mov	r1, r2
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fe fd93 	bl	80096a6 <ld_clust>
 800ab80:	4602      	mov	r2, r0
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ab86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab88:	331c      	adds	r3, #28
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fd fd74 	bl	8008678 <ld_dword>
 800ab90:	4602      	mov	r2, r0
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ab9c:	697a      	ldr	r2, [r7, #20]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	88da      	ldrh	r2, [r3, #6]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	79fa      	ldrb	r2, [r7, #7]
 800abae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3330      	adds	r3, #48	; 0x30
 800abc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800abca:	2100      	movs	r1, #0
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fd fdde 	bl	800878e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	f003 0320 	and.w	r3, r3, #32
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d06e      	beq.n	800acba <f_open+0x37e>
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d06a      	beq.n	800acba <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	895b      	ldrh	r3, [r3, #10]
 800abf0:	461a      	mov	r2, r3
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	899b      	ldrh	r3, [r3, #12]
 800abf6:	fb03 f302 	mul.w	r3, r3, r2
 800abfa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac08:	e016      	b.n	800ac38 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fe f887 	bl	8008d22 <get_fat>
 800ac14:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ac16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d802      	bhi.n	800ac22 <f_open+0x2e6>
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ac22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac28:	d102      	bne.n	800ac30 <f_open+0x2f4>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d103      	bne.n	800ac48 <f_open+0x30c>
 800ac40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d8e0      	bhi.n	800ac0a <f_open+0x2ce>
				}
				fp->clust = clst;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac4c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ac4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d131      	bne.n	800acba <f_open+0x37e>
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	899b      	ldrh	r3, [r3, #12]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac5e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac62:	fb02 f201 	mul.w	r2, r2, r1
 800ac66:	1a9b      	subs	r3, r3, r2
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d026      	beq.n	800acba <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fe f837 	bl	8008ce4 <clust2sect>
 800ac76:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ac78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d103      	bne.n	800ac86 <f_open+0x34a>
						res = FR_INT_ERR;
 800ac7e:	2302      	movs	r3, #2
 800ac80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ac84:	e019      	b.n	800acba <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	899b      	ldrh	r3, [r3, #12]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac8e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac94:	441a      	add	r2, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	7858      	ldrb	r0, [r3, #1]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a1a      	ldr	r2, [r3, #32]
 800aca8:	2301      	movs	r3, #1
 800acaa:	f7fd fc6f 	bl	800858c <disk_read>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <f_open+0x37e>
 800acb4:	2301      	movs	r3, #1
 800acb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800acba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <f_open+0x38c>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800acc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800accc:	4618      	mov	r0, r3
 800acce:	3768      	adds	r7, #104	; 0x68
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08c      	sub	sp, #48	; 0x30
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f107 0210 	add.w	r2, r7, #16
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7ff fda5 	bl	800a844 <validate>
 800acfa:	4603      	mov	r3, r0
 800acfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ad00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d107      	bne.n	800ad18 <f_write+0x44>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	7d5b      	ldrb	r3, [r3, #21]
 800ad0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ad10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d002      	beq.n	800ad1e <f_write+0x4a>
 800ad18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad1c:	e16a      	b.n	800aff4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	7d1b      	ldrb	r3, [r3, #20]
 800ad22:	f003 0302 	and.w	r3, r3, #2
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <f_write+0x5a>
 800ad2a:	2307      	movs	r3, #7
 800ad2c:	e162      	b.n	800aff4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	699a      	ldr	r2, [r3, #24]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	441a      	add	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	699b      	ldr	r3, [r3, #24]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	f080 814c 	bcs.w	800afd8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	43db      	mvns	r3, r3
 800ad46:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ad48:	e146      	b.n	800afd8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	8992      	ldrh	r2, [r2, #12]
 800ad52:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad56:	fb02 f201 	mul.w	r2, r2, r1
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f040 80f1 	bne.w	800af44 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	8992      	ldrh	r2, [r2, #12]
 800ad6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	8952      	ldrh	r2, [r2, #10]
 800ad72:	3a01      	subs	r2, #1
 800ad74:	4013      	ands	r3, r2
 800ad76:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d143      	bne.n	800ae06 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10c      	bne.n	800ada0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d11a      	bne.n	800adc8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2100      	movs	r1, #0
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fe fa0f 	bl	80091ba <create_chain>
 800ad9c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ad9e:	e013      	b.n	800adc8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d007      	beq.n	800adb8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	699b      	ldr	r3, [r3, #24]
 800adac:	4619      	mov	r1, r3
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f7fe fa9b 	bl	80092ea <clmt_clust>
 800adb4:	62b8      	str	r0, [r7, #40]	; 0x28
 800adb6:	e007      	b.n	800adc8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	69db      	ldr	r3, [r3, #28]
 800adbe:	4619      	mov	r1, r3
 800adc0:	4610      	mov	r0, r2
 800adc2:	f7fe f9fa 	bl	80091ba <create_chain>
 800adc6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 8109 	beq.w	800afe2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800add0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add2:	2b01      	cmp	r3, #1
 800add4:	d104      	bne.n	800ade0 <f_write+0x10c>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2202      	movs	r2, #2
 800adda:	755a      	strb	r2, [r3, #21]
 800addc:	2302      	movs	r3, #2
 800adde:	e109      	b.n	800aff4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade6:	d104      	bne.n	800adf2 <f_write+0x11e>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2201      	movs	r2, #1
 800adec:	755a      	strb	r2, [r3, #21]
 800adee:	2301      	movs	r3, #1
 800adf0:	e100      	b.n	800aff4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adf6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <f_write+0x132>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae04:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	7d1b      	ldrb	r3, [r3, #20]
 800ae0a:	b25b      	sxtb	r3, r3
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	da18      	bge.n	800ae42 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	7858      	ldrb	r0, [r3, #1]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a1a      	ldr	r2, [r3, #32]
 800ae1e:	2301      	movs	r3, #1
 800ae20:	f7fd fbd4 	bl	80085cc <disk_write>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d004      	beq.n	800ae34 <f_write+0x160>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	755a      	strb	r2, [r3, #21]
 800ae30:	2301      	movs	r3, #1
 800ae32:	e0df      	b.n	800aff4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	7d1b      	ldrb	r3, [r3, #20]
 800ae38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae3c:	b2da      	uxtb	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ae42:	693a      	ldr	r2, [r7, #16]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	69db      	ldr	r3, [r3, #28]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	f7fd ff4a 	bl	8008ce4 <clust2sect>
 800ae50:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d104      	bne.n	800ae62 <f_write+0x18e>
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2202      	movs	r2, #2
 800ae5c:	755a      	strb	r2, [r3, #21]
 800ae5e:	2302      	movs	r3, #2
 800ae60:	e0c8      	b.n	800aff4 <f_write+0x320>
			sect += csect;
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	4413      	add	r3, r2
 800ae68:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	899b      	ldrh	r3, [r3, #12]
 800ae6e:	461a      	mov	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae76:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ae78:	6a3b      	ldr	r3, [r7, #32]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d043      	beq.n	800af06 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ae7e:	69ba      	ldr	r2, [r7, #24]
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	4413      	add	r3, r2
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	8952      	ldrh	r2, [r2, #10]
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d905      	bls.n	800ae98 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	895b      	ldrh	r3, [r3, #10]
 800ae90:	461a      	mov	r2, r3
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	7858      	ldrb	r0, [r3, #1]
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	69f9      	ldr	r1, [r7, #28]
 800aea2:	f7fd fb93 	bl	80085cc <disk_write>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d004      	beq.n	800aeb6 <f_write+0x1e2>
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	755a      	strb	r2, [r3, #21]
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e09e      	b.n	800aff4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6a1a      	ldr	r2, [r3, #32]
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	6a3a      	ldr	r2, [r7, #32]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d918      	bls.n	800aef6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6a1a      	ldr	r2, [r3, #32]
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	8992      	ldrh	r2, [r2, #12]
 800aed6:	fb02 f303 	mul.w	r3, r2, r3
 800aeda:	69fa      	ldr	r2, [r7, #28]
 800aedc:	18d1      	adds	r1, r2, r3
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	899b      	ldrh	r3, [r3, #12]
 800aee2:	461a      	mov	r2, r3
 800aee4:	f7fd fc32 	bl	800874c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	7d1b      	ldrb	r3, [r3, #20]
 800aeec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	899b      	ldrh	r3, [r3, #12]
 800aefa:	461a      	mov	r2, r3
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	fb02 f303 	mul.w	r3, r2, r3
 800af02:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800af04:	e04b      	b.n	800af9e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d016      	beq.n	800af3e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	699a      	ldr	r2, [r3, #24]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800af18:	429a      	cmp	r2, r3
 800af1a:	d210      	bcs.n	800af3e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	7858      	ldrb	r0, [r3, #1]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af26:	2301      	movs	r3, #1
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	f7fd fb2f 	bl	800858c <disk_read>
 800af2e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800af30:	2b00      	cmp	r3, #0
 800af32:	d004      	beq.n	800af3e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2201      	movs	r2, #1
 800af38:	755a      	strb	r2, [r3, #21]
 800af3a:	2301      	movs	r3, #1
 800af3c:	e05a      	b.n	800aff4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	899b      	ldrh	r3, [r3, #12]
 800af48:	4618      	mov	r0, r3
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	8992      	ldrh	r2, [r2, #12]
 800af52:	fbb3 f1f2 	udiv	r1, r3, r2
 800af56:	fb02 f201 	mul.w	r2, r2, r1
 800af5a:	1a9b      	subs	r3, r3, r2
 800af5c:	1ac3      	subs	r3, r0, r3
 800af5e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800af60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	429a      	cmp	r2, r3
 800af66:	d901      	bls.n	800af6c <f_write+0x298>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	8992      	ldrh	r2, [r2, #12]
 800af7a:	fbb3 f0f2 	udiv	r0, r3, r2
 800af7e:	fb02 f200 	mul.w	r2, r2, r0
 800af82:	1a9b      	subs	r3, r3, r2
 800af84:	440b      	add	r3, r1
 800af86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af88:	69f9      	ldr	r1, [r7, #28]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fd fbde 	bl	800874c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	7d1b      	ldrb	r3, [r3, #20]
 800af94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800af9e:	69fa      	ldr	r2, [r7, #28]
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	4413      	add	r3, r2
 800afa4:	61fb      	str	r3, [r7, #28]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	699a      	ldr	r2, [r3, #24]
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	441a      	add	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	619a      	str	r2, [r3, #24]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	68da      	ldr	r2, [r3, #12]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	429a      	cmp	r2, r3
 800afbc:	bf38      	it	cc
 800afbe:	461a      	movcc	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	60da      	str	r2, [r3, #12]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	441a      	add	r2, r3
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	601a      	str	r2, [r3, #0]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f47f aeb5 	bne.w	800ad4a <f_write+0x76>
 800afe0:	e000      	b.n	800afe4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800afe2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	7d1b      	ldrb	r3, [r3, #20]
 800afe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afec:	b2da      	uxtb	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3730      	adds	r7, #48	; 0x30
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f107 0208 	add.w	r2, r7, #8
 800b00a:	4611      	mov	r1, r2
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7ff fc19 	bl	800a844 <validate>
 800b012:	4603      	mov	r3, r0
 800b014:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d168      	bne.n	800b0ee <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	7d1b      	ldrb	r3, [r3, #20]
 800b020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b024:	2b00      	cmp	r3, #0
 800b026:	d062      	beq.n	800b0ee <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	7d1b      	ldrb	r3, [r3, #20]
 800b02c:	b25b      	sxtb	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	da15      	bge.n	800b05e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	7858      	ldrb	r0, [r3, #1]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a1a      	ldr	r2, [r3, #32]
 800b040:	2301      	movs	r3, #1
 800b042:	f7fd fac3 	bl	80085cc <disk_write>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <f_sync+0x54>
 800b04c:	2301      	movs	r3, #1
 800b04e:	e04f      	b.n	800b0f0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	7d1b      	ldrb	r3, [r3, #20]
 800b054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b05e:	f7fc ff59 	bl	8007f14 <get_fattime>
 800b062:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06a:	4619      	mov	r1, r3
 800b06c:	4610      	mov	r0, r2
 800b06e:	f7fd fd9b 	bl	8008ba8 <move_window>
 800b072:	4603      	mov	r3, r0
 800b074:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d138      	bne.n	800b0ee <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	330b      	adds	r3, #11
 800b086:	781a      	ldrb	r2, [r3, #0]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	330b      	adds	r3, #11
 800b08c:	f042 0220 	orr.w	r2, r2, #32
 800b090:	b2d2      	uxtb	r2, r2
 800b092:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6818      	ldr	r0, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	461a      	mov	r2, r3
 800b09e:	68f9      	ldr	r1, [r7, #12]
 800b0a0:	f7fe fb20 	bl	80096e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f103 021c 	add.w	r2, r3, #28
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	f7fd fb1f 	bl	80086f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	3316      	adds	r3, #22
 800b0ba:	6939      	ldr	r1, [r7, #16]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7fd fb19 	bl	80086f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3312      	adds	r3, #18
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fd faf8 	bl	80086be <st_word>
					fs->wflag = 1;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fd fd94 	bl	8008c04 <sync_fs>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	7d1b      	ldrb	r3, [r3, #20]
 800b0e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3718      	adds	r7, #24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7ff ff7b 	bl	800affc <f_sync>
 800b106:	4603      	mov	r3, r0
 800b108:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d118      	bne.n	800b142 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f107 0208 	add.w	r2, r7, #8
 800b116:	4611      	mov	r1, r2
 800b118:	4618      	mov	r0, r3
 800b11a:	f7ff fb93 	bl	800a844 <validate>
 800b11e:	4603      	mov	r3, r0
 800b120:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b122:	7bfb      	ldrb	r3, [r7, #15]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10c      	bne.n	800b142 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fd fc97 	bl	8008a60 <dec_lock>
 800b132:	4603      	mov	r3, r0
 800b134:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b136:	7bfb      	ldrb	r3, [r7, #15]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d102      	bne.n	800b142 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b142:	7bfb      	ldrb	r3, [r7, #15]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b158:	78fb      	ldrb	r3, [r7, #3]
 800b15a:	2b0a      	cmp	r3, #10
 800b15c:	d103      	bne.n	800b166 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b15e:	210d      	movs	r1, #13
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff fff3 	bl	800b14c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	db25      	blt.n	800b1be <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	60fa      	str	r2, [r7, #12]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	4413      	add	r3, r2
 800b17c:	78fa      	ldrb	r2, [r7, #3]
 800b17e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b3c      	cmp	r3, #60	; 0x3c
 800b184:	dd12      	ble.n	800b1ac <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6818      	ldr	r0, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f103 010c 	add.w	r1, r3, #12
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	f107 0308 	add.w	r3, r7, #8
 800b196:	f7ff fd9d 	bl	800acd4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d101      	bne.n	800b1a6 <putc_bfd+0x5a>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e001      	b.n	800b1aa <putc_bfd+0x5e>
 800b1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1aa:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	609a      	str	r2, [r3, #8]
 800b1bc:	e000      	b.n	800b1c0 <putc_bfd+0x74>
	if (i < 0) return;
 800b1be:	bf00      	nop
}
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	db17      	blt.n	800b206 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6818      	ldr	r0, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f103 010c 	add.w	r1, r3, #12
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	f107 030c 	add.w	r3, r7, #12
 800b1ea:	f7ff fd73 	bl	800acd4 <f_write>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d108      	bne.n	800b206 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d102      	bne.n	800b206 <putc_flush+0x40>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	e001      	b.n	800b20a <putc_flush+0x44>
	return EOF;
 800b206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b212:	b480      	push	{r7}
 800b214:	b083      	sub	sp, #12
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	605a      	str	r2, [r3, #4]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	609a      	str	r2, [r3, #8]
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b23c:	b40e      	push	{r1, r2, r3}
 800b23e:	b580      	push	{r7, lr}
 800b240:	b0a7      	sub	sp, #156	; 0x9c
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b24a:	6879      	ldr	r1, [r7, #4]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7ff ffe0 	bl	800b212 <putc_init>

	va_start(arp, fmt);
 800b252:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b256:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b258:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b25c:	1c5a      	adds	r2, r3, #1
 800b25e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b268:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 81f4 	beq.w	800b65a <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800b272:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b276:	2b25      	cmp	r3, #37	; 0x25
 800b278:	d008      	beq.n	800b28c <f_printf+0x50>
			putc_bfd(&pb, c);
 800b27a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b27e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b282:	4611      	mov	r1, r2
 800b284:	4618      	mov	r0, r3
 800b286:	f7ff ff61 	bl	800b14c <putc_bfd>
			continue;
 800b28a:	e1e5      	b.n	800b658 <f_printf+0x41c>
		}
		w = f = 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b292:	2300      	movs	r3, #0
 800b294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b298:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b29c:	1c5a      	adds	r2, r3, #1
 800b29e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b2a8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b2ac:	2b30      	cmp	r3, #48	; 0x30
 800b2ae:	d10b      	bne.n	800b2c8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b2b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2ba:	1c5a      	adds	r2, r3, #1
 800b2bc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b2c6:	e024      	b.n	800b312 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b2c8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b2cc:	2b2d      	cmp	r3, #45	; 0x2d
 800b2ce:	d120      	bne.n	800b312 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b2d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2da:	1c5a      	adds	r2, r3, #1
 800b2dc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b2e6:	e014      	b.n	800b312 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b2e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4413      	add	r3, r2
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b2fa:	4413      	add	r3, r2
 800b2fc:	3b30      	subs	r3, #48	; 0x30
 800b2fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b302:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b306:	1c5a      	adds	r2, r3, #1
 800b308:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b312:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b316:	2b2f      	cmp	r3, #47	; 0x2f
 800b318:	d903      	bls.n	800b322 <f_printf+0xe6>
 800b31a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b31e:	2b39      	cmp	r3, #57	; 0x39
 800b320:	d9e2      	bls.n	800b2e8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b322:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b326:	2b6c      	cmp	r3, #108	; 0x6c
 800b328:	d003      	beq.n	800b332 <f_printf+0xf6>
 800b32a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b32e:	2b4c      	cmp	r3, #76	; 0x4c
 800b330:	d10d      	bne.n	800b34e <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b332:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b336:	f043 0304 	orr.w	r3, r3, #4
 800b33a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b33e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b34e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b352:	2b00      	cmp	r3, #0
 800b354:	f000 8183 	beq.w	800b65e <f_printf+0x422>
		d = c;
 800b358:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b35c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b360:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b364:	2b60      	cmp	r3, #96	; 0x60
 800b366:	d908      	bls.n	800b37a <f_printf+0x13e>
 800b368:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b36c:	2b7a      	cmp	r3, #122	; 0x7a
 800b36e:	d804      	bhi.n	800b37a <f_printf+0x13e>
 800b370:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b374:	3b20      	subs	r3, #32
 800b376:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b37a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b37e:	3b42      	subs	r3, #66	; 0x42
 800b380:	2b16      	cmp	r3, #22
 800b382:	f200 8098 	bhi.w	800b4b6 <f_printf+0x27a>
 800b386:	a201      	add	r2, pc, #4	; (adr r2, 800b38c <f_printf+0x150>)
 800b388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38c:	0800b497 	.word	0x0800b497
 800b390:	0800b47f 	.word	0x0800b47f
 800b394:	0800b4a7 	.word	0x0800b4a7
 800b398:	0800b4b7 	.word	0x0800b4b7
 800b39c:	0800b4b7 	.word	0x0800b4b7
 800b3a0:	0800b4b7 	.word	0x0800b4b7
 800b3a4:	0800b4b7 	.word	0x0800b4b7
 800b3a8:	0800b4b7 	.word	0x0800b4b7
 800b3ac:	0800b4b7 	.word	0x0800b4b7
 800b3b0:	0800b4b7 	.word	0x0800b4b7
 800b3b4:	0800b4b7 	.word	0x0800b4b7
 800b3b8:	0800b4b7 	.word	0x0800b4b7
 800b3bc:	0800b4b7 	.word	0x0800b4b7
 800b3c0:	0800b49f 	.word	0x0800b49f
 800b3c4:	0800b4b7 	.word	0x0800b4b7
 800b3c8:	0800b4b7 	.word	0x0800b4b7
 800b3cc:	0800b4b7 	.word	0x0800b4b7
 800b3d0:	0800b3e9 	.word	0x0800b3e9
 800b3d4:	0800b4b7 	.word	0x0800b4b7
 800b3d8:	0800b4a7 	.word	0x0800b4a7
 800b3dc:	0800b4b7 	.word	0x0800b4b7
 800b3e0:	0800b4b7 	.word	0x0800b4b7
 800b3e4:	0800b4af 	.word	0x0800b4af
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b3e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3ea:	1d1a      	adds	r2, r3, #4
 800b3ec:	67ba      	str	r2, [r7, #120]	; 0x78
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b3f8:	e004      	b.n	800b404 <f_printf+0x1c8>
 800b3fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3fe:	3301      	adds	r3, #1
 800b400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b404:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b40a:	4413      	add	r3, r2
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1f3      	bne.n	800b3fa <f_printf+0x1be>
			if (!(f & 2)) {
 800b412:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b416:	f003 0302 	and.w	r3, r3, #2
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d11a      	bne.n	800b454 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b41e:	e005      	b.n	800b42c <f_printf+0x1f0>
 800b420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b424:	2120      	movs	r1, #32
 800b426:	4618      	mov	r0, r3
 800b428:	f7ff fe90 	bl	800b14c <putc_bfd>
 800b42c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b430:	1c5a      	adds	r2, r3, #1
 800b432:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b436:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d8f0      	bhi.n	800b420 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b43e:	e009      	b.n	800b454 <f_printf+0x218>
 800b440:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b446:	781a      	ldrb	r2, [r3, #0]
 800b448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b44c:	4611      	mov	r1, r2
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff fe7c 	bl	800b14c <putc_bfd>
 800b454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1f1      	bne.n	800b440 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b45c:	e005      	b.n	800b46a <f_printf+0x22e>
 800b45e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b462:	2120      	movs	r1, #32
 800b464:	4618      	mov	r0, r3
 800b466:	f7ff fe71 	bl	800b14c <putc_bfd>
 800b46a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b46e:	1c5a      	adds	r2, r3, #1
 800b470:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b474:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b478:	429a      	cmp	r2, r3
 800b47a:	d8f0      	bhi.n	800b45e <f_printf+0x222>
			continue;
 800b47c:	e0ec      	b.n	800b658 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b47e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b480:	1d1a      	adds	r2, r3, #4
 800b482:	67ba      	str	r2, [r7, #120]	; 0x78
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	b2da      	uxtb	r2, r3
 800b488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b48c:	4611      	mov	r1, r2
 800b48e:	4618      	mov	r0, r3
 800b490:	f7ff fe5c 	bl	800b14c <putc_bfd>
 800b494:	e0e0      	b.n	800b658 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800b496:	2302      	movs	r3, #2
 800b498:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b49c:	e014      	b.n	800b4c8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b49e:	2308      	movs	r3, #8
 800b4a0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b4a4:	e010      	b.n	800b4c8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b4a6:	230a      	movs	r3, #10
 800b4a8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b4ac:	e00c      	b.n	800b4c8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b4ae:	2310      	movs	r3, #16
 800b4b0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b4b4:	e008      	b.n	800b4c8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b4b6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b4ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b4be:	4611      	mov	r1, r2
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7ff fe43 	bl	800b14c <putc_bfd>
 800b4c6:	e0c7      	b.n	800b658 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b4c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b4cc:	f003 0304 	and.w	r3, r3, #4
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d004      	beq.n	800b4de <f_printf+0x2a2>
 800b4d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4d6:	1d1a      	adds	r2, r3, #4
 800b4d8:	67ba      	str	r2, [r7, #120]	; 0x78
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	e00c      	b.n	800b4f8 <f_printf+0x2bc>
 800b4de:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b4e2:	2b44      	cmp	r3, #68	; 0x44
 800b4e4:	d104      	bne.n	800b4f0 <f_printf+0x2b4>
 800b4e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4e8:	1d1a      	adds	r2, r3, #4
 800b4ea:	67ba      	str	r2, [r7, #120]	; 0x78
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	e003      	b.n	800b4f8 <f_printf+0x2bc>
 800b4f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4f2:	1d1a      	adds	r2, r3, #4
 800b4f4:	67ba      	str	r2, [r7, #120]	; 0x78
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b4fc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b500:	2b44      	cmp	r3, #68	; 0x44
 800b502:	d10e      	bne.n	800b522 <f_printf+0x2e6>
 800b504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b508:	2b00      	cmp	r3, #0
 800b50a:	da0a      	bge.n	800b522 <f_printf+0x2e6>
			v = 0 - v;
 800b50c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b510:	425b      	negs	r3, r3
 800b512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b516:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b51a:	f043 0308 	orr.w	r3, r3, #8
 800b51e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b528:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b52c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b530:	fbb3 f1f2 	udiv	r1, r3, r2
 800b534:	fb02 f201 	mul.w	r2, r2, r1
 800b538:	1a9b      	subs	r3, r3, r2
 800b53a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b53e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b542:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b546:	fbb2 f3f3 	udiv	r3, r2, r3
 800b54a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b54e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b552:	2b09      	cmp	r3, #9
 800b554:	d90b      	bls.n	800b56e <f_printf+0x332>
 800b556:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b55a:	2b78      	cmp	r3, #120	; 0x78
 800b55c:	d101      	bne.n	800b562 <f_printf+0x326>
 800b55e:	2227      	movs	r2, #39	; 0x27
 800b560:	e000      	b.n	800b564 <f_printf+0x328>
 800b562:	2207      	movs	r2, #7
 800b564:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b568:	4413      	add	r3, r2
 800b56a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b56e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b578:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b57c:	3230      	adds	r2, #48	; 0x30
 800b57e:	b2d2      	uxtb	r2, r2
 800b580:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800b584:	440b      	add	r3, r1
 800b586:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b58a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d003      	beq.n	800b59a <f_printf+0x35e>
 800b592:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b596:	2b1f      	cmp	r3, #31
 800b598:	d9c6      	bls.n	800b528 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b59a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b59e:	f003 0308 	and.w	r3, r3, #8
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00a      	beq.n	800b5bc <f_printf+0x380>
 800b5a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5aa:	1c5a      	adds	r2, r3, #1
 800b5ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b5b0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b5b4:	4413      	add	r3, r2
 800b5b6:	222d      	movs	r2, #45	; 0x2d
 800b5b8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b5bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b5c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <f_printf+0x398>
 800b5d0:	2330      	movs	r3, #48	; 0x30
 800b5d2:	e000      	b.n	800b5d6 <f_printf+0x39a>
 800b5d4:	2320      	movs	r3, #32
 800b5d6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b5da:	e007      	b.n	800b5ec <f_printf+0x3b0>
 800b5dc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b5e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7ff fdb0 	bl	800b14c <putc_bfd>
 800b5ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b5f0:	f003 0302 	and.w	r3, r3, #2
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d108      	bne.n	800b60a <f_printf+0x3ce>
 800b5f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5fc:	1c5a      	adds	r2, r3, #1
 800b5fe:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b602:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b606:	429a      	cmp	r2, r3
 800b608:	d8e8      	bhi.n	800b5dc <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800b60a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b60e:	3b01      	subs	r3, #1
 800b610:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b614:	f107 020c 	add.w	r2, r7, #12
 800b618:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b61c:	4413      	add	r3, r2
 800b61e:	781a      	ldrb	r2, [r3, #0]
 800b620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f7ff fd90 	bl	800b14c <putc_bfd>
		} while (i);
 800b62c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1ea      	bne.n	800b60a <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800b634:	e007      	b.n	800b646 <f_printf+0x40a>
 800b636:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b63a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b63e:	4611      	mov	r1, r2
 800b640:	4618      	mov	r0, r3
 800b642:	f7ff fd83 	bl	800b14c <putc_bfd>
 800b646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b650:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b654:	429a      	cmp	r2, r3
 800b656:	d8ee      	bhi.n	800b636 <f_printf+0x3fa>
		c = *fmt++;
 800b658:	e5fe      	b.n	800b258 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b65a:	bf00      	nop
 800b65c:	e000      	b.n	800b660 <f_printf+0x424>
		if (!c) break;
 800b65e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b664:	4618      	mov	r0, r3
 800b666:	f7ff fdae 	bl	800b1c6 <putc_flush>
 800b66a:	4603      	mov	r3, r0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	379c      	adds	r7, #156	; 0x9c
 800b670:	46bd      	mov	sp, r7
 800b672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b676:	b003      	add	sp, #12
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop

0800b67c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4613      	mov	r3, r2
 800b688:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b68a:	2301      	movs	r3, #1
 800b68c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b68e:	2300      	movs	r3, #0
 800b690:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b692:	4b1f      	ldr	r3, [pc, #124]	; (800b710 <FATFS_LinkDriverEx+0x94>)
 800b694:	7a5b      	ldrb	r3, [r3, #9]
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d131      	bne.n	800b700 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b69c:	4b1c      	ldr	r3, [pc, #112]	; (800b710 <FATFS_LinkDriverEx+0x94>)
 800b69e:	7a5b      	ldrb	r3, [r3, #9]
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	4b1a      	ldr	r3, [pc, #104]	; (800b710 <FATFS_LinkDriverEx+0x94>)
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b6aa:	4b19      	ldr	r3, [pc, #100]	; (800b710 <FATFS_LinkDriverEx+0x94>)
 800b6ac:	7a5b      	ldrb	r3, [r3, #9]
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	4a17      	ldr	r2, [pc, #92]	; (800b710 <FATFS_LinkDriverEx+0x94>)
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	4413      	add	r3, r2
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b6ba:	4b15      	ldr	r3, [pc, #84]	; (800b710 <FATFS_LinkDriverEx+0x94>)
 800b6bc:	7a5b      	ldrb	r3, [r3, #9]
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4b13      	ldr	r3, [pc, #76]	; (800b710 <FATFS_LinkDriverEx+0x94>)
 800b6c4:	4413      	add	r3, r2
 800b6c6:	79fa      	ldrb	r2, [r7, #7]
 800b6c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b6ca:	4b11      	ldr	r3, [pc, #68]	; (800b710 <FATFS_LinkDriverEx+0x94>)
 800b6cc:	7a5b      	ldrb	r3, [r3, #9]
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	1c5a      	adds	r2, r3, #1
 800b6d2:	b2d1      	uxtb	r1, r2
 800b6d4:	4a0e      	ldr	r2, [pc, #56]	; (800b710 <FATFS_LinkDriverEx+0x94>)
 800b6d6:	7251      	strb	r1, [r2, #9]
 800b6d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b6da:	7dbb      	ldrb	r3, [r7, #22]
 800b6dc:	3330      	adds	r3, #48	; 0x30
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	223a      	movs	r2, #58	; 0x3a
 800b6ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	3302      	adds	r3, #2
 800b6f0:	222f      	movs	r2, #47	; 0x2f
 800b6f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	3303      	adds	r3, #3
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b700:	7dfb      	ldrb	r3, [r7, #23]
}
 800b702:	4618      	mov	r0, r3
 800b704:	371c      	adds	r7, #28
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	200006c0 	.word	0x200006c0

0800b714 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b71e:	2200      	movs	r2, #0
 800b720:	6839      	ldr	r1, [r7, #0]
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff ffaa 	bl	800b67c <FATFS_LinkDriverEx>
 800b728:	4603      	mov	r3, r0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
	...

0800b734 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	4603      	mov	r3, r0
 800b73c:	6039      	str	r1, [r7, #0]
 800b73e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b740:	88fb      	ldrh	r3, [r7, #6]
 800b742:	2b7f      	cmp	r3, #127	; 0x7f
 800b744:	d802      	bhi.n	800b74c <ff_convert+0x18>
		c = chr;
 800b746:	88fb      	ldrh	r3, [r7, #6]
 800b748:	81fb      	strh	r3, [r7, #14]
 800b74a:	e025      	b.n	800b798 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00b      	beq.n	800b76a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b752:	88fb      	ldrh	r3, [r7, #6]
 800b754:	2bff      	cmp	r3, #255	; 0xff
 800b756:	d805      	bhi.n	800b764 <ff_convert+0x30>
 800b758:	88fb      	ldrh	r3, [r7, #6]
 800b75a:	3b80      	subs	r3, #128	; 0x80
 800b75c:	4a12      	ldr	r2, [pc, #72]	; (800b7a8 <ff_convert+0x74>)
 800b75e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b762:	e000      	b.n	800b766 <ff_convert+0x32>
 800b764:	2300      	movs	r3, #0
 800b766:	81fb      	strh	r3, [r7, #14]
 800b768:	e016      	b.n	800b798 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b76a:	2300      	movs	r3, #0
 800b76c:	81fb      	strh	r3, [r7, #14]
 800b76e:	e009      	b.n	800b784 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b770:	89fb      	ldrh	r3, [r7, #14]
 800b772:	4a0d      	ldr	r2, [pc, #52]	; (800b7a8 <ff_convert+0x74>)
 800b774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b778:	88fa      	ldrh	r2, [r7, #6]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d006      	beq.n	800b78c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b77e:	89fb      	ldrh	r3, [r7, #14]
 800b780:	3301      	adds	r3, #1
 800b782:	81fb      	strh	r3, [r7, #14]
 800b784:	89fb      	ldrh	r3, [r7, #14]
 800b786:	2b7f      	cmp	r3, #127	; 0x7f
 800b788:	d9f2      	bls.n	800b770 <ff_convert+0x3c>
 800b78a:	e000      	b.n	800b78e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b78c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b78e:	89fb      	ldrh	r3, [r7, #14]
 800b790:	3380      	adds	r3, #128	; 0x80
 800b792:	b29b      	uxth	r3, r3
 800b794:	b2db      	uxtb	r3, r3
 800b796:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b798:	89fb      	ldrh	r3, [r7, #14]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	0800e630 	.word	0x0800e630

0800b7ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b7b6:	88fb      	ldrh	r3, [r7, #6]
 800b7b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7bc:	d201      	bcs.n	800b7c2 <ff_wtoupper+0x16>
 800b7be:	4b3e      	ldr	r3, [pc, #248]	; (800b8b8 <ff_wtoupper+0x10c>)
 800b7c0:	e000      	b.n	800b7c4 <ff_wtoupper+0x18>
 800b7c2:	4b3e      	ldr	r3, [pc, #248]	; (800b8bc <ff_wtoupper+0x110>)
 800b7c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	1c9a      	adds	r2, r3, #2
 800b7ca:	617a      	str	r2, [r7, #20]
 800b7cc:	881b      	ldrh	r3, [r3, #0]
 800b7ce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b7d0:	8a7b      	ldrh	r3, [r7, #18]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d068      	beq.n	800b8a8 <ff_wtoupper+0xfc>
 800b7d6:	88fa      	ldrh	r2, [r7, #6]
 800b7d8:	8a7b      	ldrh	r3, [r7, #18]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d364      	bcc.n	800b8a8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	1c9a      	adds	r2, r3, #2
 800b7e2:	617a      	str	r2, [r7, #20]
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	823b      	strh	r3, [r7, #16]
 800b7e8:	8a3b      	ldrh	r3, [r7, #16]
 800b7ea:	0a1b      	lsrs	r3, r3, #8
 800b7ec:	81fb      	strh	r3, [r7, #14]
 800b7ee:	8a3b      	ldrh	r3, [r7, #16]
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b7f4:	88fa      	ldrh	r2, [r7, #6]
 800b7f6:	8a79      	ldrh	r1, [r7, #18]
 800b7f8:	8a3b      	ldrh	r3, [r7, #16]
 800b7fa:	440b      	add	r3, r1
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	da49      	bge.n	800b894 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b800:	89fb      	ldrh	r3, [r7, #14]
 800b802:	2b08      	cmp	r3, #8
 800b804:	d84f      	bhi.n	800b8a6 <ff_wtoupper+0xfa>
 800b806:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <ff_wtoupper+0x60>)
 800b808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80c:	0800b831 	.word	0x0800b831
 800b810:	0800b843 	.word	0x0800b843
 800b814:	0800b859 	.word	0x0800b859
 800b818:	0800b861 	.word	0x0800b861
 800b81c:	0800b869 	.word	0x0800b869
 800b820:	0800b871 	.word	0x0800b871
 800b824:	0800b879 	.word	0x0800b879
 800b828:	0800b881 	.word	0x0800b881
 800b82c:	0800b889 	.word	0x0800b889
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b830:	88fa      	ldrh	r2, [r7, #6]
 800b832:	8a7b      	ldrh	r3, [r7, #18]
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	005b      	lsls	r3, r3, #1
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	4413      	add	r3, r2
 800b83c:	881b      	ldrh	r3, [r3, #0]
 800b83e:	80fb      	strh	r3, [r7, #6]
 800b840:	e027      	b.n	800b892 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b842:	88fa      	ldrh	r2, [r7, #6]
 800b844:	8a7b      	ldrh	r3, [r7, #18]
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	b29b      	uxth	r3, r3
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	b29b      	uxth	r3, r3
 800b850:	88fa      	ldrh	r2, [r7, #6]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	80fb      	strh	r3, [r7, #6]
 800b856:	e01c      	b.n	800b892 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b858:	88fb      	ldrh	r3, [r7, #6]
 800b85a:	3b10      	subs	r3, #16
 800b85c:	80fb      	strh	r3, [r7, #6]
 800b85e:	e018      	b.n	800b892 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b860:	88fb      	ldrh	r3, [r7, #6]
 800b862:	3b20      	subs	r3, #32
 800b864:	80fb      	strh	r3, [r7, #6]
 800b866:	e014      	b.n	800b892 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b868:	88fb      	ldrh	r3, [r7, #6]
 800b86a:	3b30      	subs	r3, #48	; 0x30
 800b86c:	80fb      	strh	r3, [r7, #6]
 800b86e:	e010      	b.n	800b892 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b870:	88fb      	ldrh	r3, [r7, #6]
 800b872:	3b1a      	subs	r3, #26
 800b874:	80fb      	strh	r3, [r7, #6]
 800b876:	e00c      	b.n	800b892 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b878:	88fb      	ldrh	r3, [r7, #6]
 800b87a:	3308      	adds	r3, #8
 800b87c:	80fb      	strh	r3, [r7, #6]
 800b87e:	e008      	b.n	800b892 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b880:	88fb      	ldrh	r3, [r7, #6]
 800b882:	3b50      	subs	r3, #80	; 0x50
 800b884:	80fb      	strh	r3, [r7, #6]
 800b886:	e004      	b.n	800b892 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b888:	88fb      	ldrh	r3, [r7, #6]
 800b88a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b88e:	80fb      	strh	r3, [r7, #6]
 800b890:	bf00      	nop
			}
			break;
 800b892:	e008      	b.n	800b8a6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b894:	89fb      	ldrh	r3, [r7, #14]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d195      	bne.n	800b7c6 <ff_wtoupper+0x1a>
 800b89a:	8a3b      	ldrh	r3, [r7, #16]
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b8a4:	e78f      	b.n	800b7c6 <ff_wtoupper+0x1a>
			break;
 800b8a6:	bf00      	nop
	}

	return chr;
 800b8a8:	88fb      	ldrh	r3, [r7, #6]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	0800e730 	.word	0x0800e730
 800b8bc:	0800e924 	.word	0x0800e924

0800b8c0 <__errno>:
 800b8c0:	4b01      	ldr	r3, [pc, #4]	; (800b8c8 <__errno+0x8>)
 800b8c2:	6818      	ldr	r0, [r3, #0]
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	20000084 	.word	0x20000084

0800b8cc <__libc_init_array>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	4e0d      	ldr	r6, [pc, #52]	; (800b904 <__libc_init_array+0x38>)
 800b8d0:	4c0d      	ldr	r4, [pc, #52]	; (800b908 <__libc_init_array+0x3c>)
 800b8d2:	1ba4      	subs	r4, r4, r6
 800b8d4:	10a4      	asrs	r4, r4, #2
 800b8d6:	2500      	movs	r5, #0
 800b8d8:	42a5      	cmp	r5, r4
 800b8da:	d109      	bne.n	800b8f0 <__libc_init_array+0x24>
 800b8dc:	4e0b      	ldr	r6, [pc, #44]	; (800b90c <__libc_init_array+0x40>)
 800b8de:	4c0c      	ldr	r4, [pc, #48]	; (800b910 <__libc_init_array+0x44>)
 800b8e0:	f002 fd78 	bl	800e3d4 <_init>
 800b8e4:	1ba4      	subs	r4, r4, r6
 800b8e6:	10a4      	asrs	r4, r4, #2
 800b8e8:	2500      	movs	r5, #0
 800b8ea:	42a5      	cmp	r5, r4
 800b8ec:	d105      	bne.n	800b8fa <__libc_init_array+0x2e>
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b8f4:	4798      	blx	r3
 800b8f6:	3501      	adds	r5, #1
 800b8f8:	e7ee      	b.n	800b8d8 <__libc_init_array+0xc>
 800b8fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b8fe:	4798      	blx	r3
 800b900:	3501      	adds	r5, #1
 800b902:	e7f2      	b.n	800b8ea <__libc_init_array+0x1e>
 800b904:	0800eca8 	.word	0x0800eca8
 800b908:	0800eca8 	.word	0x0800eca8
 800b90c:	0800eca8 	.word	0x0800eca8
 800b910:	0800ecac 	.word	0x0800ecac

0800b914 <memcpy>:
 800b914:	b510      	push	{r4, lr}
 800b916:	1e43      	subs	r3, r0, #1
 800b918:	440a      	add	r2, r1
 800b91a:	4291      	cmp	r1, r2
 800b91c:	d100      	bne.n	800b920 <memcpy+0xc>
 800b91e:	bd10      	pop	{r4, pc}
 800b920:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b924:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b928:	e7f7      	b.n	800b91a <memcpy+0x6>

0800b92a <memset>:
 800b92a:	4402      	add	r2, r0
 800b92c:	4603      	mov	r3, r0
 800b92e:	4293      	cmp	r3, r2
 800b930:	d100      	bne.n	800b934 <memset+0xa>
 800b932:	4770      	bx	lr
 800b934:	f803 1b01 	strb.w	r1, [r3], #1
 800b938:	e7f9      	b.n	800b92e <memset+0x4>

0800b93a <__cvt>:
 800b93a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b93e:	ec55 4b10 	vmov	r4, r5, d0
 800b942:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b944:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b948:	2d00      	cmp	r5, #0
 800b94a:	460e      	mov	r6, r1
 800b94c:	4691      	mov	r9, r2
 800b94e:	4619      	mov	r1, r3
 800b950:	bfb8      	it	lt
 800b952:	4622      	movlt	r2, r4
 800b954:	462b      	mov	r3, r5
 800b956:	f027 0720 	bic.w	r7, r7, #32
 800b95a:	bfbb      	ittet	lt
 800b95c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b960:	461d      	movlt	r5, r3
 800b962:	2300      	movge	r3, #0
 800b964:	232d      	movlt	r3, #45	; 0x2d
 800b966:	bfb8      	it	lt
 800b968:	4614      	movlt	r4, r2
 800b96a:	2f46      	cmp	r7, #70	; 0x46
 800b96c:	700b      	strb	r3, [r1, #0]
 800b96e:	d004      	beq.n	800b97a <__cvt+0x40>
 800b970:	2f45      	cmp	r7, #69	; 0x45
 800b972:	d100      	bne.n	800b976 <__cvt+0x3c>
 800b974:	3601      	adds	r6, #1
 800b976:	2102      	movs	r1, #2
 800b978:	e000      	b.n	800b97c <__cvt+0x42>
 800b97a:	2103      	movs	r1, #3
 800b97c:	ab03      	add	r3, sp, #12
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	ab02      	add	r3, sp, #8
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	4632      	mov	r2, r6
 800b986:	4653      	mov	r3, sl
 800b988:	ec45 4b10 	vmov	d0, r4, r5
 800b98c:	f000 fe2c 	bl	800c5e8 <_dtoa_r>
 800b990:	2f47      	cmp	r7, #71	; 0x47
 800b992:	4680      	mov	r8, r0
 800b994:	d102      	bne.n	800b99c <__cvt+0x62>
 800b996:	f019 0f01 	tst.w	r9, #1
 800b99a:	d026      	beq.n	800b9ea <__cvt+0xb0>
 800b99c:	2f46      	cmp	r7, #70	; 0x46
 800b99e:	eb08 0906 	add.w	r9, r8, r6
 800b9a2:	d111      	bne.n	800b9c8 <__cvt+0x8e>
 800b9a4:	f898 3000 	ldrb.w	r3, [r8]
 800b9a8:	2b30      	cmp	r3, #48	; 0x30
 800b9aa:	d10a      	bne.n	800b9c2 <__cvt+0x88>
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	f7f5 f888 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9b8:	b918      	cbnz	r0, 800b9c2 <__cvt+0x88>
 800b9ba:	f1c6 0601 	rsb	r6, r6, #1
 800b9be:	f8ca 6000 	str.w	r6, [sl]
 800b9c2:	f8da 3000 	ldr.w	r3, [sl]
 800b9c6:	4499      	add	r9, r3
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	f7f5 f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9d4:	b938      	cbnz	r0, 800b9e6 <__cvt+0xac>
 800b9d6:	2230      	movs	r2, #48	; 0x30
 800b9d8:	9b03      	ldr	r3, [sp, #12]
 800b9da:	454b      	cmp	r3, r9
 800b9dc:	d205      	bcs.n	800b9ea <__cvt+0xb0>
 800b9de:	1c59      	adds	r1, r3, #1
 800b9e0:	9103      	str	r1, [sp, #12]
 800b9e2:	701a      	strb	r2, [r3, #0]
 800b9e4:	e7f8      	b.n	800b9d8 <__cvt+0x9e>
 800b9e6:	f8cd 900c 	str.w	r9, [sp, #12]
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9ee:	eba3 0308 	sub.w	r3, r3, r8
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	6013      	str	r3, [r2, #0]
 800b9f6:	b004      	add	sp, #16
 800b9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b9fc <__exponent>:
 800b9fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9fe:	2900      	cmp	r1, #0
 800ba00:	4604      	mov	r4, r0
 800ba02:	bfba      	itte	lt
 800ba04:	4249      	neglt	r1, r1
 800ba06:	232d      	movlt	r3, #45	; 0x2d
 800ba08:	232b      	movge	r3, #43	; 0x2b
 800ba0a:	2909      	cmp	r1, #9
 800ba0c:	f804 2b02 	strb.w	r2, [r4], #2
 800ba10:	7043      	strb	r3, [r0, #1]
 800ba12:	dd20      	ble.n	800ba56 <__exponent+0x5a>
 800ba14:	f10d 0307 	add.w	r3, sp, #7
 800ba18:	461f      	mov	r7, r3
 800ba1a:	260a      	movs	r6, #10
 800ba1c:	fb91 f5f6 	sdiv	r5, r1, r6
 800ba20:	fb06 1115 	mls	r1, r6, r5, r1
 800ba24:	3130      	adds	r1, #48	; 0x30
 800ba26:	2d09      	cmp	r5, #9
 800ba28:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba2c:	f103 32ff 	add.w	r2, r3, #4294967295
 800ba30:	4629      	mov	r1, r5
 800ba32:	dc09      	bgt.n	800ba48 <__exponent+0x4c>
 800ba34:	3130      	adds	r1, #48	; 0x30
 800ba36:	3b02      	subs	r3, #2
 800ba38:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ba3c:	42bb      	cmp	r3, r7
 800ba3e:	4622      	mov	r2, r4
 800ba40:	d304      	bcc.n	800ba4c <__exponent+0x50>
 800ba42:	1a10      	subs	r0, r2, r0
 800ba44:	b003      	add	sp, #12
 800ba46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba48:	4613      	mov	r3, r2
 800ba4a:	e7e7      	b.n	800ba1c <__exponent+0x20>
 800ba4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba50:	f804 2b01 	strb.w	r2, [r4], #1
 800ba54:	e7f2      	b.n	800ba3c <__exponent+0x40>
 800ba56:	2330      	movs	r3, #48	; 0x30
 800ba58:	4419      	add	r1, r3
 800ba5a:	7083      	strb	r3, [r0, #2]
 800ba5c:	1d02      	adds	r2, r0, #4
 800ba5e:	70c1      	strb	r1, [r0, #3]
 800ba60:	e7ef      	b.n	800ba42 <__exponent+0x46>
	...

0800ba64 <_printf_float>:
 800ba64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba68:	b08d      	sub	sp, #52	; 0x34
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ba70:	4616      	mov	r6, r2
 800ba72:	461f      	mov	r7, r3
 800ba74:	4605      	mov	r5, r0
 800ba76:	f001 fce9 	bl	800d44c <_localeconv_r>
 800ba7a:	6803      	ldr	r3, [r0, #0]
 800ba7c:	9304      	str	r3, [sp, #16]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7f4 fba6 	bl	80001d0 <strlen>
 800ba84:	2300      	movs	r3, #0
 800ba86:	930a      	str	r3, [sp, #40]	; 0x28
 800ba88:	f8d8 3000 	ldr.w	r3, [r8]
 800ba8c:	9005      	str	r0, [sp, #20]
 800ba8e:	3307      	adds	r3, #7
 800ba90:	f023 0307 	bic.w	r3, r3, #7
 800ba94:	f103 0208 	add.w	r2, r3, #8
 800ba98:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba9c:	f8d4 b000 	ldr.w	fp, [r4]
 800baa0:	f8c8 2000 	str.w	r2, [r8]
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800baac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bab0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bab4:	9307      	str	r3, [sp, #28]
 800bab6:	f8cd 8018 	str.w	r8, [sp, #24]
 800baba:	f04f 32ff 	mov.w	r2, #4294967295
 800babe:	4ba7      	ldr	r3, [pc, #668]	; (800bd5c <_printf_float+0x2f8>)
 800bac0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bac4:	f7f5 f832 	bl	8000b2c <__aeabi_dcmpun>
 800bac8:	bb70      	cbnz	r0, 800bb28 <_printf_float+0xc4>
 800baca:	f04f 32ff 	mov.w	r2, #4294967295
 800bace:	4ba3      	ldr	r3, [pc, #652]	; (800bd5c <_printf_float+0x2f8>)
 800bad0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bad4:	f7f5 f80c 	bl	8000af0 <__aeabi_dcmple>
 800bad8:	bb30      	cbnz	r0, 800bb28 <_printf_float+0xc4>
 800bada:	2200      	movs	r2, #0
 800badc:	2300      	movs	r3, #0
 800bade:	4640      	mov	r0, r8
 800bae0:	4649      	mov	r1, r9
 800bae2:	f7f4 fffb 	bl	8000adc <__aeabi_dcmplt>
 800bae6:	b110      	cbz	r0, 800baee <_printf_float+0x8a>
 800bae8:	232d      	movs	r3, #45	; 0x2d
 800baea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baee:	4a9c      	ldr	r2, [pc, #624]	; (800bd60 <_printf_float+0x2fc>)
 800baf0:	4b9c      	ldr	r3, [pc, #624]	; (800bd64 <_printf_float+0x300>)
 800baf2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800baf6:	bf8c      	ite	hi
 800baf8:	4690      	movhi	r8, r2
 800bafa:	4698      	movls	r8, r3
 800bafc:	2303      	movs	r3, #3
 800bafe:	f02b 0204 	bic.w	r2, fp, #4
 800bb02:	6123      	str	r3, [r4, #16]
 800bb04:	6022      	str	r2, [r4, #0]
 800bb06:	f04f 0900 	mov.w	r9, #0
 800bb0a:	9700      	str	r7, [sp, #0]
 800bb0c:	4633      	mov	r3, r6
 800bb0e:	aa0b      	add	r2, sp, #44	; 0x2c
 800bb10:	4621      	mov	r1, r4
 800bb12:	4628      	mov	r0, r5
 800bb14:	f000 f9e6 	bl	800bee4 <_printf_common>
 800bb18:	3001      	adds	r0, #1
 800bb1a:	f040 808d 	bne.w	800bc38 <_printf_float+0x1d4>
 800bb1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb22:	b00d      	add	sp, #52	; 0x34
 800bb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb28:	4642      	mov	r2, r8
 800bb2a:	464b      	mov	r3, r9
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	4649      	mov	r1, r9
 800bb30:	f7f4 fffc 	bl	8000b2c <__aeabi_dcmpun>
 800bb34:	b110      	cbz	r0, 800bb3c <_printf_float+0xd8>
 800bb36:	4a8c      	ldr	r2, [pc, #560]	; (800bd68 <_printf_float+0x304>)
 800bb38:	4b8c      	ldr	r3, [pc, #560]	; (800bd6c <_printf_float+0x308>)
 800bb3a:	e7da      	b.n	800baf2 <_printf_float+0x8e>
 800bb3c:	6861      	ldr	r1, [r4, #4]
 800bb3e:	1c4b      	adds	r3, r1, #1
 800bb40:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bb44:	a80a      	add	r0, sp, #40	; 0x28
 800bb46:	d13e      	bne.n	800bbc6 <_printf_float+0x162>
 800bb48:	2306      	movs	r3, #6
 800bb4a:	6063      	str	r3, [r4, #4]
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bb52:	ab09      	add	r3, sp, #36	; 0x24
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	ec49 8b10 	vmov	d0, r8, r9
 800bb5a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb5e:	6022      	str	r2, [r4, #0]
 800bb60:	f8cd a004 	str.w	sl, [sp, #4]
 800bb64:	6861      	ldr	r1, [r4, #4]
 800bb66:	4628      	mov	r0, r5
 800bb68:	f7ff fee7 	bl	800b93a <__cvt>
 800bb6c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bb70:	2b47      	cmp	r3, #71	; 0x47
 800bb72:	4680      	mov	r8, r0
 800bb74:	d109      	bne.n	800bb8a <_printf_float+0x126>
 800bb76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb78:	1cd8      	adds	r0, r3, #3
 800bb7a:	db02      	blt.n	800bb82 <_printf_float+0x11e>
 800bb7c:	6862      	ldr	r2, [r4, #4]
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	dd47      	ble.n	800bc12 <_printf_float+0x1ae>
 800bb82:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb86:	fa5f fa8a 	uxtb.w	sl, sl
 800bb8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bb8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb90:	d824      	bhi.n	800bbdc <_printf_float+0x178>
 800bb92:	3901      	subs	r1, #1
 800bb94:	4652      	mov	r2, sl
 800bb96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb9a:	9109      	str	r1, [sp, #36]	; 0x24
 800bb9c:	f7ff ff2e 	bl	800b9fc <__exponent>
 800bba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bba2:	1813      	adds	r3, r2, r0
 800bba4:	2a01      	cmp	r2, #1
 800bba6:	4681      	mov	r9, r0
 800bba8:	6123      	str	r3, [r4, #16]
 800bbaa:	dc02      	bgt.n	800bbb2 <_printf_float+0x14e>
 800bbac:	6822      	ldr	r2, [r4, #0]
 800bbae:	07d1      	lsls	r1, r2, #31
 800bbb0:	d501      	bpl.n	800bbb6 <_printf_float+0x152>
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	6123      	str	r3, [r4, #16]
 800bbb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d0a5      	beq.n	800bb0a <_printf_float+0xa6>
 800bbbe:	232d      	movs	r3, #45	; 0x2d
 800bbc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbc4:	e7a1      	b.n	800bb0a <_printf_float+0xa6>
 800bbc6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bbca:	f000 8177 	beq.w	800bebc <_printf_float+0x458>
 800bbce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bbd2:	d1bb      	bne.n	800bb4c <_printf_float+0xe8>
 800bbd4:	2900      	cmp	r1, #0
 800bbd6:	d1b9      	bne.n	800bb4c <_printf_float+0xe8>
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e7b6      	b.n	800bb4a <_printf_float+0xe6>
 800bbdc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bbe0:	d119      	bne.n	800bc16 <_printf_float+0x1b2>
 800bbe2:	2900      	cmp	r1, #0
 800bbe4:	6863      	ldr	r3, [r4, #4]
 800bbe6:	dd0c      	ble.n	800bc02 <_printf_float+0x19e>
 800bbe8:	6121      	str	r1, [r4, #16]
 800bbea:	b913      	cbnz	r3, 800bbf2 <_printf_float+0x18e>
 800bbec:	6822      	ldr	r2, [r4, #0]
 800bbee:	07d2      	lsls	r2, r2, #31
 800bbf0:	d502      	bpl.n	800bbf8 <_printf_float+0x194>
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	440b      	add	r3, r1
 800bbf6:	6123      	str	r3, [r4, #16]
 800bbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbfa:	65a3      	str	r3, [r4, #88]	; 0x58
 800bbfc:	f04f 0900 	mov.w	r9, #0
 800bc00:	e7d9      	b.n	800bbb6 <_printf_float+0x152>
 800bc02:	b913      	cbnz	r3, 800bc0a <_printf_float+0x1a6>
 800bc04:	6822      	ldr	r2, [r4, #0]
 800bc06:	07d0      	lsls	r0, r2, #31
 800bc08:	d501      	bpl.n	800bc0e <_printf_float+0x1aa>
 800bc0a:	3302      	adds	r3, #2
 800bc0c:	e7f3      	b.n	800bbf6 <_printf_float+0x192>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e7f1      	b.n	800bbf6 <_printf_float+0x192>
 800bc12:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bc16:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	db05      	blt.n	800bc2a <_printf_float+0x1c6>
 800bc1e:	6822      	ldr	r2, [r4, #0]
 800bc20:	6123      	str	r3, [r4, #16]
 800bc22:	07d1      	lsls	r1, r2, #31
 800bc24:	d5e8      	bpl.n	800bbf8 <_printf_float+0x194>
 800bc26:	3301      	adds	r3, #1
 800bc28:	e7e5      	b.n	800bbf6 <_printf_float+0x192>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	bfd4      	ite	le
 800bc2e:	f1c3 0302 	rsble	r3, r3, #2
 800bc32:	2301      	movgt	r3, #1
 800bc34:	4413      	add	r3, r2
 800bc36:	e7de      	b.n	800bbf6 <_printf_float+0x192>
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	055a      	lsls	r2, r3, #21
 800bc3c:	d407      	bmi.n	800bc4e <_printf_float+0x1ea>
 800bc3e:	6923      	ldr	r3, [r4, #16]
 800bc40:	4642      	mov	r2, r8
 800bc42:	4631      	mov	r1, r6
 800bc44:	4628      	mov	r0, r5
 800bc46:	47b8      	blx	r7
 800bc48:	3001      	adds	r0, #1
 800bc4a:	d12b      	bne.n	800bca4 <_printf_float+0x240>
 800bc4c:	e767      	b.n	800bb1e <_printf_float+0xba>
 800bc4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bc52:	f240 80dc 	bls.w	800be0e <_printf_float+0x3aa>
 800bc56:	2200      	movs	r2, #0
 800bc58:	2300      	movs	r3, #0
 800bc5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc5e:	f7f4 ff33 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	d033      	beq.n	800bcce <_printf_float+0x26a>
 800bc66:	2301      	movs	r3, #1
 800bc68:	4a41      	ldr	r2, [pc, #260]	; (800bd70 <_printf_float+0x30c>)
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	47b8      	blx	r7
 800bc70:	3001      	adds	r0, #1
 800bc72:	f43f af54 	beq.w	800bb1e <_printf_float+0xba>
 800bc76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	db02      	blt.n	800bc84 <_printf_float+0x220>
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	07d8      	lsls	r0, r3, #31
 800bc82:	d50f      	bpl.n	800bca4 <_printf_float+0x240>
 800bc84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc88:	4631      	mov	r1, r6
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	47b8      	blx	r7
 800bc8e:	3001      	adds	r0, #1
 800bc90:	f43f af45 	beq.w	800bb1e <_printf_float+0xba>
 800bc94:	f04f 0800 	mov.w	r8, #0
 800bc98:	f104 091a 	add.w	r9, r4, #26
 800bc9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	4543      	cmp	r3, r8
 800bca2:	dc09      	bgt.n	800bcb8 <_printf_float+0x254>
 800bca4:	6823      	ldr	r3, [r4, #0]
 800bca6:	079b      	lsls	r3, r3, #30
 800bca8:	f100 8103 	bmi.w	800beb2 <_printf_float+0x44e>
 800bcac:	68e0      	ldr	r0, [r4, #12]
 800bcae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcb0:	4298      	cmp	r0, r3
 800bcb2:	bfb8      	it	lt
 800bcb4:	4618      	movlt	r0, r3
 800bcb6:	e734      	b.n	800bb22 <_printf_float+0xbe>
 800bcb8:	2301      	movs	r3, #1
 800bcba:	464a      	mov	r2, r9
 800bcbc:	4631      	mov	r1, r6
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	47b8      	blx	r7
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	f43f af2b 	beq.w	800bb1e <_printf_float+0xba>
 800bcc8:	f108 0801 	add.w	r8, r8, #1
 800bccc:	e7e6      	b.n	800bc9c <_printf_float+0x238>
 800bcce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	dc2b      	bgt.n	800bd2c <_printf_float+0x2c8>
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	4a26      	ldr	r2, [pc, #152]	; (800bd70 <_printf_float+0x30c>)
 800bcd8:	4631      	mov	r1, r6
 800bcda:	4628      	mov	r0, r5
 800bcdc:	47b8      	blx	r7
 800bcde:	3001      	adds	r0, #1
 800bce0:	f43f af1d 	beq.w	800bb1e <_printf_float+0xba>
 800bce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bce6:	b923      	cbnz	r3, 800bcf2 <_printf_float+0x28e>
 800bce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcea:	b913      	cbnz	r3, 800bcf2 <_printf_float+0x28e>
 800bcec:	6823      	ldr	r3, [r4, #0]
 800bcee:	07d9      	lsls	r1, r3, #31
 800bcf0:	d5d8      	bpl.n	800bca4 <_printf_float+0x240>
 800bcf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcf6:	4631      	mov	r1, r6
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	47b8      	blx	r7
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	f43f af0e 	beq.w	800bb1e <_printf_float+0xba>
 800bd02:	f04f 0900 	mov.w	r9, #0
 800bd06:	f104 0a1a 	add.w	sl, r4, #26
 800bd0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd0c:	425b      	negs	r3, r3
 800bd0e:	454b      	cmp	r3, r9
 800bd10:	dc01      	bgt.n	800bd16 <_printf_float+0x2b2>
 800bd12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd14:	e794      	b.n	800bc40 <_printf_float+0x1dc>
 800bd16:	2301      	movs	r3, #1
 800bd18:	4652      	mov	r2, sl
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b8      	blx	r7
 800bd20:	3001      	adds	r0, #1
 800bd22:	f43f aefc 	beq.w	800bb1e <_printf_float+0xba>
 800bd26:	f109 0901 	add.w	r9, r9, #1
 800bd2a:	e7ee      	b.n	800bd0a <_printf_float+0x2a6>
 800bd2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd30:	429a      	cmp	r2, r3
 800bd32:	bfa8      	it	ge
 800bd34:	461a      	movge	r2, r3
 800bd36:	2a00      	cmp	r2, #0
 800bd38:	4691      	mov	r9, r2
 800bd3a:	dd07      	ble.n	800bd4c <_printf_float+0x2e8>
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4642      	mov	r2, r8
 800bd42:	4628      	mov	r0, r5
 800bd44:	47b8      	blx	r7
 800bd46:	3001      	adds	r0, #1
 800bd48:	f43f aee9 	beq.w	800bb1e <_printf_float+0xba>
 800bd4c:	f104 031a 	add.w	r3, r4, #26
 800bd50:	f04f 0b00 	mov.w	fp, #0
 800bd54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd58:	9306      	str	r3, [sp, #24]
 800bd5a:	e015      	b.n	800bd88 <_printf_float+0x324>
 800bd5c:	7fefffff 	.word	0x7fefffff
 800bd60:	0800e9e8 	.word	0x0800e9e8
 800bd64:	0800e9e4 	.word	0x0800e9e4
 800bd68:	0800e9f0 	.word	0x0800e9f0
 800bd6c:	0800e9ec 	.word	0x0800e9ec
 800bd70:	0800e9f4 	.word	0x0800e9f4
 800bd74:	2301      	movs	r3, #1
 800bd76:	9a06      	ldr	r2, [sp, #24]
 800bd78:	4631      	mov	r1, r6
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	47b8      	blx	r7
 800bd7e:	3001      	adds	r0, #1
 800bd80:	f43f aecd 	beq.w	800bb1e <_printf_float+0xba>
 800bd84:	f10b 0b01 	add.w	fp, fp, #1
 800bd88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bd8c:	ebaa 0309 	sub.w	r3, sl, r9
 800bd90:	455b      	cmp	r3, fp
 800bd92:	dcef      	bgt.n	800bd74 <_printf_float+0x310>
 800bd94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	44d0      	add	r8, sl
 800bd9c:	db15      	blt.n	800bdca <_printf_float+0x366>
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	07da      	lsls	r2, r3, #31
 800bda2:	d412      	bmi.n	800bdca <_printf_float+0x366>
 800bda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bda6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bda8:	eba3 020a 	sub.w	r2, r3, sl
 800bdac:	eba3 0a01 	sub.w	sl, r3, r1
 800bdb0:	4592      	cmp	sl, r2
 800bdb2:	bfa8      	it	ge
 800bdb4:	4692      	movge	sl, r2
 800bdb6:	f1ba 0f00 	cmp.w	sl, #0
 800bdba:	dc0e      	bgt.n	800bdda <_printf_float+0x376>
 800bdbc:	f04f 0800 	mov.w	r8, #0
 800bdc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdc4:	f104 091a 	add.w	r9, r4, #26
 800bdc8:	e019      	b.n	800bdfe <_printf_float+0x39a>
 800bdca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdce:	4631      	mov	r1, r6
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	47b8      	blx	r7
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	d1e5      	bne.n	800bda4 <_printf_float+0x340>
 800bdd8:	e6a1      	b.n	800bb1e <_printf_float+0xba>
 800bdda:	4653      	mov	r3, sl
 800bddc:	4642      	mov	r2, r8
 800bdde:	4631      	mov	r1, r6
 800bde0:	4628      	mov	r0, r5
 800bde2:	47b8      	blx	r7
 800bde4:	3001      	adds	r0, #1
 800bde6:	d1e9      	bne.n	800bdbc <_printf_float+0x358>
 800bde8:	e699      	b.n	800bb1e <_printf_float+0xba>
 800bdea:	2301      	movs	r3, #1
 800bdec:	464a      	mov	r2, r9
 800bdee:	4631      	mov	r1, r6
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	47b8      	blx	r7
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	f43f ae92 	beq.w	800bb1e <_printf_float+0xba>
 800bdfa:	f108 0801 	add.w	r8, r8, #1
 800bdfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be02:	1a9b      	subs	r3, r3, r2
 800be04:	eba3 030a 	sub.w	r3, r3, sl
 800be08:	4543      	cmp	r3, r8
 800be0a:	dcee      	bgt.n	800bdea <_printf_float+0x386>
 800be0c:	e74a      	b.n	800bca4 <_printf_float+0x240>
 800be0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be10:	2a01      	cmp	r2, #1
 800be12:	dc01      	bgt.n	800be18 <_printf_float+0x3b4>
 800be14:	07db      	lsls	r3, r3, #31
 800be16:	d53a      	bpl.n	800be8e <_printf_float+0x42a>
 800be18:	2301      	movs	r3, #1
 800be1a:	4642      	mov	r2, r8
 800be1c:	4631      	mov	r1, r6
 800be1e:	4628      	mov	r0, r5
 800be20:	47b8      	blx	r7
 800be22:	3001      	adds	r0, #1
 800be24:	f43f ae7b 	beq.w	800bb1e <_printf_float+0xba>
 800be28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be2c:	4631      	mov	r1, r6
 800be2e:	4628      	mov	r0, r5
 800be30:	47b8      	blx	r7
 800be32:	3001      	adds	r0, #1
 800be34:	f108 0801 	add.w	r8, r8, #1
 800be38:	f43f ae71 	beq.w	800bb1e <_printf_float+0xba>
 800be3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be3e:	2200      	movs	r2, #0
 800be40:	f103 3aff 	add.w	sl, r3, #4294967295
 800be44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be48:	2300      	movs	r3, #0
 800be4a:	f7f4 fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800be4e:	b9c8      	cbnz	r0, 800be84 <_printf_float+0x420>
 800be50:	4653      	mov	r3, sl
 800be52:	4642      	mov	r2, r8
 800be54:	4631      	mov	r1, r6
 800be56:	4628      	mov	r0, r5
 800be58:	47b8      	blx	r7
 800be5a:	3001      	adds	r0, #1
 800be5c:	d10e      	bne.n	800be7c <_printf_float+0x418>
 800be5e:	e65e      	b.n	800bb1e <_printf_float+0xba>
 800be60:	2301      	movs	r3, #1
 800be62:	4652      	mov	r2, sl
 800be64:	4631      	mov	r1, r6
 800be66:	4628      	mov	r0, r5
 800be68:	47b8      	blx	r7
 800be6a:	3001      	adds	r0, #1
 800be6c:	f43f ae57 	beq.w	800bb1e <_printf_float+0xba>
 800be70:	f108 0801 	add.w	r8, r8, #1
 800be74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be76:	3b01      	subs	r3, #1
 800be78:	4543      	cmp	r3, r8
 800be7a:	dcf1      	bgt.n	800be60 <_printf_float+0x3fc>
 800be7c:	464b      	mov	r3, r9
 800be7e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be82:	e6de      	b.n	800bc42 <_printf_float+0x1de>
 800be84:	f04f 0800 	mov.w	r8, #0
 800be88:	f104 0a1a 	add.w	sl, r4, #26
 800be8c:	e7f2      	b.n	800be74 <_printf_float+0x410>
 800be8e:	2301      	movs	r3, #1
 800be90:	e7df      	b.n	800be52 <_printf_float+0x3ee>
 800be92:	2301      	movs	r3, #1
 800be94:	464a      	mov	r2, r9
 800be96:	4631      	mov	r1, r6
 800be98:	4628      	mov	r0, r5
 800be9a:	47b8      	blx	r7
 800be9c:	3001      	adds	r0, #1
 800be9e:	f43f ae3e 	beq.w	800bb1e <_printf_float+0xba>
 800bea2:	f108 0801 	add.w	r8, r8, #1
 800bea6:	68e3      	ldr	r3, [r4, #12]
 800bea8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800beaa:	1a9b      	subs	r3, r3, r2
 800beac:	4543      	cmp	r3, r8
 800beae:	dcf0      	bgt.n	800be92 <_printf_float+0x42e>
 800beb0:	e6fc      	b.n	800bcac <_printf_float+0x248>
 800beb2:	f04f 0800 	mov.w	r8, #0
 800beb6:	f104 0919 	add.w	r9, r4, #25
 800beba:	e7f4      	b.n	800bea6 <_printf_float+0x442>
 800bebc:	2900      	cmp	r1, #0
 800bebe:	f43f ae8b 	beq.w	800bbd8 <_printf_float+0x174>
 800bec2:	2300      	movs	r3, #0
 800bec4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bec8:	ab09      	add	r3, sp, #36	; 0x24
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	ec49 8b10 	vmov	d0, r8, r9
 800bed0:	6022      	str	r2, [r4, #0]
 800bed2:	f8cd a004 	str.w	sl, [sp, #4]
 800bed6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800beda:	4628      	mov	r0, r5
 800bedc:	f7ff fd2d 	bl	800b93a <__cvt>
 800bee0:	4680      	mov	r8, r0
 800bee2:	e648      	b.n	800bb76 <_printf_float+0x112>

0800bee4 <_printf_common>:
 800bee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee8:	4691      	mov	r9, r2
 800beea:	461f      	mov	r7, r3
 800beec:	688a      	ldr	r2, [r1, #8]
 800beee:	690b      	ldr	r3, [r1, #16]
 800bef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bef4:	4293      	cmp	r3, r2
 800bef6:	bfb8      	it	lt
 800bef8:	4613      	movlt	r3, r2
 800befa:	f8c9 3000 	str.w	r3, [r9]
 800befe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf02:	4606      	mov	r6, r0
 800bf04:	460c      	mov	r4, r1
 800bf06:	b112      	cbz	r2, 800bf0e <_printf_common+0x2a>
 800bf08:	3301      	adds	r3, #1
 800bf0a:	f8c9 3000 	str.w	r3, [r9]
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	0699      	lsls	r1, r3, #26
 800bf12:	bf42      	ittt	mi
 800bf14:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bf18:	3302      	addmi	r3, #2
 800bf1a:	f8c9 3000 	strmi.w	r3, [r9]
 800bf1e:	6825      	ldr	r5, [r4, #0]
 800bf20:	f015 0506 	ands.w	r5, r5, #6
 800bf24:	d107      	bne.n	800bf36 <_printf_common+0x52>
 800bf26:	f104 0a19 	add.w	sl, r4, #25
 800bf2a:	68e3      	ldr	r3, [r4, #12]
 800bf2c:	f8d9 2000 	ldr.w	r2, [r9]
 800bf30:	1a9b      	subs	r3, r3, r2
 800bf32:	42ab      	cmp	r3, r5
 800bf34:	dc28      	bgt.n	800bf88 <_printf_common+0xa4>
 800bf36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bf3a:	6822      	ldr	r2, [r4, #0]
 800bf3c:	3300      	adds	r3, #0
 800bf3e:	bf18      	it	ne
 800bf40:	2301      	movne	r3, #1
 800bf42:	0692      	lsls	r2, r2, #26
 800bf44:	d42d      	bmi.n	800bfa2 <_printf_common+0xbe>
 800bf46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	47c0      	blx	r8
 800bf50:	3001      	adds	r0, #1
 800bf52:	d020      	beq.n	800bf96 <_printf_common+0xb2>
 800bf54:	6823      	ldr	r3, [r4, #0]
 800bf56:	68e5      	ldr	r5, [r4, #12]
 800bf58:	f8d9 2000 	ldr.w	r2, [r9]
 800bf5c:	f003 0306 	and.w	r3, r3, #6
 800bf60:	2b04      	cmp	r3, #4
 800bf62:	bf08      	it	eq
 800bf64:	1aad      	subeq	r5, r5, r2
 800bf66:	68a3      	ldr	r3, [r4, #8]
 800bf68:	6922      	ldr	r2, [r4, #16]
 800bf6a:	bf0c      	ite	eq
 800bf6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf70:	2500      	movne	r5, #0
 800bf72:	4293      	cmp	r3, r2
 800bf74:	bfc4      	itt	gt
 800bf76:	1a9b      	subgt	r3, r3, r2
 800bf78:	18ed      	addgt	r5, r5, r3
 800bf7a:	f04f 0900 	mov.w	r9, #0
 800bf7e:	341a      	adds	r4, #26
 800bf80:	454d      	cmp	r5, r9
 800bf82:	d11a      	bne.n	800bfba <_printf_common+0xd6>
 800bf84:	2000      	movs	r0, #0
 800bf86:	e008      	b.n	800bf9a <_printf_common+0xb6>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	4652      	mov	r2, sl
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	4630      	mov	r0, r6
 800bf90:	47c0      	blx	r8
 800bf92:	3001      	adds	r0, #1
 800bf94:	d103      	bne.n	800bf9e <_printf_common+0xba>
 800bf96:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9e:	3501      	adds	r5, #1
 800bfa0:	e7c3      	b.n	800bf2a <_printf_common+0x46>
 800bfa2:	18e1      	adds	r1, r4, r3
 800bfa4:	1c5a      	adds	r2, r3, #1
 800bfa6:	2030      	movs	r0, #48	; 0x30
 800bfa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bfac:	4422      	add	r2, r4
 800bfae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfb6:	3302      	adds	r3, #2
 800bfb8:	e7c5      	b.n	800bf46 <_printf_common+0x62>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	4639      	mov	r1, r7
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	47c0      	blx	r8
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	d0e6      	beq.n	800bf96 <_printf_common+0xb2>
 800bfc8:	f109 0901 	add.w	r9, r9, #1
 800bfcc:	e7d8      	b.n	800bf80 <_printf_common+0x9c>
	...

0800bfd0 <_printf_i>:
 800bfd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bfd8:	460c      	mov	r4, r1
 800bfda:	7e09      	ldrb	r1, [r1, #24]
 800bfdc:	b085      	sub	sp, #20
 800bfde:	296e      	cmp	r1, #110	; 0x6e
 800bfe0:	4617      	mov	r7, r2
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	4698      	mov	r8, r3
 800bfe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfe8:	f000 80b3 	beq.w	800c152 <_printf_i+0x182>
 800bfec:	d822      	bhi.n	800c034 <_printf_i+0x64>
 800bfee:	2963      	cmp	r1, #99	; 0x63
 800bff0:	d036      	beq.n	800c060 <_printf_i+0x90>
 800bff2:	d80a      	bhi.n	800c00a <_printf_i+0x3a>
 800bff4:	2900      	cmp	r1, #0
 800bff6:	f000 80b9 	beq.w	800c16c <_printf_i+0x19c>
 800bffa:	2958      	cmp	r1, #88	; 0x58
 800bffc:	f000 8083 	beq.w	800c106 <_printf_i+0x136>
 800c000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c004:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c008:	e032      	b.n	800c070 <_printf_i+0xa0>
 800c00a:	2964      	cmp	r1, #100	; 0x64
 800c00c:	d001      	beq.n	800c012 <_printf_i+0x42>
 800c00e:	2969      	cmp	r1, #105	; 0x69
 800c010:	d1f6      	bne.n	800c000 <_printf_i+0x30>
 800c012:	6820      	ldr	r0, [r4, #0]
 800c014:	6813      	ldr	r3, [r2, #0]
 800c016:	0605      	lsls	r5, r0, #24
 800c018:	f103 0104 	add.w	r1, r3, #4
 800c01c:	d52a      	bpl.n	800c074 <_printf_i+0xa4>
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6011      	str	r1, [r2, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	da03      	bge.n	800c02e <_printf_i+0x5e>
 800c026:	222d      	movs	r2, #45	; 0x2d
 800c028:	425b      	negs	r3, r3
 800c02a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c02e:	486f      	ldr	r0, [pc, #444]	; (800c1ec <_printf_i+0x21c>)
 800c030:	220a      	movs	r2, #10
 800c032:	e039      	b.n	800c0a8 <_printf_i+0xd8>
 800c034:	2973      	cmp	r1, #115	; 0x73
 800c036:	f000 809d 	beq.w	800c174 <_printf_i+0x1a4>
 800c03a:	d808      	bhi.n	800c04e <_printf_i+0x7e>
 800c03c:	296f      	cmp	r1, #111	; 0x6f
 800c03e:	d020      	beq.n	800c082 <_printf_i+0xb2>
 800c040:	2970      	cmp	r1, #112	; 0x70
 800c042:	d1dd      	bne.n	800c000 <_printf_i+0x30>
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	f043 0320 	orr.w	r3, r3, #32
 800c04a:	6023      	str	r3, [r4, #0]
 800c04c:	e003      	b.n	800c056 <_printf_i+0x86>
 800c04e:	2975      	cmp	r1, #117	; 0x75
 800c050:	d017      	beq.n	800c082 <_printf_i+0xb2>
 800c052:	2978      	cmp	r1, #120	; 0x78
 800c054:	d1d4      	bne.n	800c000 <_printf_i+0x30>
 800c056:	2378      	movs	r3, #120	; 0x78
 800c058:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c05c:	4864      	ldr	r0, [pc, #400]	; (800c1f0 <_printf_i+0x220>)
 800c05e:	e055      	b.n	800c10c <_printf_i+0x13c>
 800c060:	6813      	ldr	r3, [r2, #0]
 800c062:	1d19      	adds	r1, r3, #4
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	6011      	str	r1, [r2, #0]
 800c068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c06c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c070:	2301      	movs	r3, #1
 800c072:	e08c      	b.n	800c18e <_printf_i+0x1be>
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	6011      	str	r1, [r2, #0]
 800c078:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c07c:	bf18      	it	ne
 800c07e:	b21b      	sxthne	r3, r3
 800c080:	e7cf      	b.n	800c022 <_printf_i+0x52>
 800c082:	6813      	ldr	r3, [r2, #0]
 800c084:	6825      	ldr	r5, [r4, #0]
 800c086:	1d18      	adds	r0, r3, #4
 800c088:	6010      	str	r0, [r2, #0]
 800c08a:	0628      	lsls	r0, r5, #24
 800c08c:	d501      	bpl.n	800c092 <_printf_i+0xc2>
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	e002      	b.n	800c098 <_printf_i+0xc8>
 800c092:	0668      	lsls	r0, r5, #25
 800c094:	d5fb      	bpl.n	800c08e <_printf_i+0xbe>
 800c096:	881b      	ldrh	r3, [r3, #0]
 800c098:	4854      	ldr	r0, [pc, #336]	; (800c1ec <_printf_i+0x21c>)
 800c09a:	296f      	cmp	r1, #111	; 0x6f
 800c09c:	bf14      	ite	ne
 800c09e:	220a      	movne	r2, #10
 800c0a0:	2208      	moveq	r2, #8
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0a8:	6865      	ldr	r5, [r4, #4]
 800c0aa:	60a5      	str	r5, [r4, #8]
 800c0ac:	2d00      	cmp	r5, #0
 800c0ae:	f2c0 8095 	blt.w	800c1dc <_printf_i+0x20c>
 800c0b2:	6821      	ldr	r1, [r4, #0]
 800c0b4:	f021 0104 	bic.w	r1, r1, #4
 800c0b8:	6021      	str	r1, [r4, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d13d      	bne.n	800c13a <_printf_i+0x16a>
 800c0be:	2d00      	cmp	r5, #0
 800c0c0:	f040 808e 	bne.w	800c1e0 <_printf_i+0x210>
 800c0c4:	4665      	mov	r5, ip
 800c0c6:	2a08      	cmp	r2, #8
 800c0c8:	d10b      	bne.n	800c0e2 <_printf_i+0x112>
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	07db      	lsls	r3, r3, #31
 800c0ce:	d508      	bpl.n	800c0e2 <_printf_i+0x112>
 800c0d0:	6923      	ldr	r3, [r4, #16]
 800c0d2:	6862      	ldr	r2, [r4, #4]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	bfde      	ittt	le
 800c0d8:	2330      	movle	r3, #48	; 0x30
 800c0da:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0de:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0e2:	ebac 0305 	sub.w	r3, ip, r5
 800c0e6:	6123      	str	r3, [r4, #16]
 800c0e8:	f8cd 8000 	str.w	r8, [sp]
 800c0ec:	463b      	mov	r3, r7
 800c0ee:	aa03      	add	r2, sp, #12
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	f7ff fef6 	bl	800bee4 <_printf_common>
 800c0f8:	3001      	adds	r0, #1
 800c0fa:	d14d      	bne.n	800c198 <_printf_i+0x1c8>
 800c0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c100:	b005      	add	sp, #20
 800c102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c106:	4839      	ldr	r0, [pc, #228]	; (800c1ec <_printf_i+0x21c>)
 800c108:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c10c:	6813      	ldr	r3, [r2, #0]
 800c10e:	6821      	ldr	r1, [r4, #0]
 800c110:	1d1d      	adds	r5, r3, #4
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6015      	str	r5, [r2, #0]
 800c116:	060a      	lsls	r2, r1, #24
 800c118:	d50b      	bpl.n	800c132 <_printf_i+0x162>
 800c11a:	07ca      	lsls	r2, r1, #31
 800c11c:	bf44      	itt	mi
 800c11e:	f041 0120 	orrmi.w	r1, r1, #32
 800c122:	6021      	strmi	r1, [r4, #0]
 800c124:	b91b      	cbnz	r3, 800c12e <_printf_i+0x15e>
 800c126:	6822      	ldr	r2, [r4, #0]
 800c128:	f022 0220 	bic.w	r2, r2, #32
 800c12c:	6022      	str	r2, [r4, #0]
 800c12e:	2210      	movs	r2, #16
 800c130:	e7b7      	b.n	800c0a2 <_printf_i+0xd2>
 800c132:	064d      	lsls	r5, r1, #25
 800c134:	bf48      	it	mi
 800c136:	b29b      	uxthmi	r3, r3
 800c138:	e7ef      	b.n	800c11a <_printf_i+0x14a>
 800c13a:	4665      	mov	r5, ip
 800c13c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c140:	fb02 3311 	mls	r3, r2, r1, r3
 800c144:	5cc3      	ldrb	r3, [r0, r3]
 800c146:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c14a:	460b      	mov	r3, r1
 800c14c:	2900      	cmp	r1, #0
 800c14e:	d1f5      	bne.n	800c13c <_printf_i+0x16c>
 800c150:	e7b9      	b.n	800c0c6 <_printf_i+0xf6>
 800c152:	6813      	ldr	r3, [r2, #0]
 800c154:	6825      	ldr	r5, [r4, #0]
 800c156:	6961      	ldr	r1, [r4, #20]
 800c158:	1d18      	adds	r0, r3, #4
 800c15a:	6010      	str	r0, [r2, #0]
 800c15c:	0628      	lsls	r0, r5, #24
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	d501      	bpl.n	800c166 <_printf_i+0x196>
 800c162:	6019      	str	r1, [r3, #0]
 800c164:	e002      	b.n	800c16c <_printf_i+0x19c>
 800c166:	066a      	lsls	r2, r5, #25
 800c168:	d5fb      	bpl.n	800c162 <_printf_i+0x192>
 800c16a:	8019      	strh	r1, [r3, #0]
 800c16c:	2300      	movs	r3, #0
 800c16e:	6123      	str	r3, [r4, #16]
 800c170:	4665      	mov	r5, ip
 800c172:	e7b9      	b.n	800c0e8 <_printf_i+0x118>
 800c174:	6813      	ldr	r3, [r2, #0]
 800c176:	1d19      	adds	r1, r3, #4
 800c178:	6011      	str	r1, [r2, #0]
 800c17a:	681d      	ldr	r5, [r3, #0]
 800c17c:	6862      	ldr	r2, [r4, #4]
 800c17e:	2100      	movs	r1, #0
 800c180:	4628      	mov	r0, r5
 800c182:	f7f4 f82d 	bl	80001e0 <memchr>
 800c186:	b108      	cbz	r0, 800c18c <_printf_i+0x1bc>
 800c188:	1b40      	subs	r0, r0, r5
 800c18a:	6060      	str	r0, [r4, #4]
 800c18c:	6863      	ldr	r3, [r4, #4]
 800c18e:	6123      	str	r3, [r4, #16]
 800c190:	2300      	movs	r3, #0
 800c192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c196:	e7a7      	b.n	800c0e8 <_printf_i+0x118>
 800c198:	6923      	ldr	r3, [r4, #16]
 800c19a:	462a      	mov	r2, r5
 800c19c:	4639      	mov	r1, r7
 800c19e:	4630      	mov	r0, r6
 800c1a0:	47c0      	blx	r8
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	d0aa      	beq.n	800c0fc <_printf_i+0x12c>
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	079b      	lsls	r3, r3, #30
 800c1aa:	d413      	bmi.n	800c1d4 <_printf_i+0x204>
 800c1ac:	68e0      	ldr	r0, [r4, #12]
 800c1ae:	9b03      	ldr	r3, [sp, #12]
 800c1b0:	4298      	cmp	r0, r3
 800c1b2:	bfb8      	it	lt
 800c1b4:	4618      	movlt	r0, r3
 800c1b6:	e7a3      	b.n	800c100 <_printf_i+0x130>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	464a      	mov	r2, r9
 800c1bc:	4639      	mov	r1, r7
 800c1be:	4630      	mov	r0, r6
 800c1c0:	47c0      	blx	r8
 800c1c2:	3001      	adds	r0, #1
 800c1c4:	d09a      	beq.n	800c0fc <_printf_i+0x12c>
 800c1c6:	3501      	adds	r5, #1
 800c1c8:	68e3      	ldr	r3, [r4, #12]
 800c1ca:	9a03      	ldr	r2, [sp, #12]
 800c1cc:	1a9b      	subs	r3, r3, r2
 800c1ce:	42ab      	cmp	r3, r5
 800c1d0:	dcf2      	bgt.n	800c1b8 <_printf_i+0x1e8>
 800c1d2:	e7eb      	b.n	800c1ac <_printf_i+0x1dc>
 800c1d4:	2500      	movs	r5, #0
 800c1d6:	f104 0919 	add.w	r9, r4, #25
 800c1da:	e7f5      	b.n	800c1c8 <_printf_i+0x1f8>
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1ac      	bne.n	800c13a <_printf_i+0x16a>
 800c1e0:	7803      	ldrb	r3, [r0, #0]
 800c1e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1ea:	e76c      	b.n	800c0c6 <_printf_i+0xf6>
 800c1ec:	0800e9f6 	.word	0x0800e9f6
 800c1f0:	0800ea07 	.word	0x0800ea07

0800c1f4 <iprintf>:
 800c1f4:	b40f      	push	{r0, r1, r2, r3}
 800c1f6:	4b0a      	ldr	r3, [pc, #40]	; (800c220 <iprintf+0x2c>)
 800c1f8:	b513      	push	{r0, r1, r4, lr}
 800c1fa:	681c      	ldr	r4, [r3, #0]
 800c1fc:	b124      	cbz	r4, 800c208 <iprintf+0x14>
 800c1fe:	69a3      	ldr	r3, [r4, #24]
 800c200:	b913      	cbnz	r3, 800c208 <iprintf+0x14>
 800c202:	4620      	mov	r0, r4
 800c204:	f001 f898 	bl	800d338 <__sinit>
 800c208:	ab05      	add	r3, sp, #20
 800c20a:	9a04      	ldr	r2, [sp, #16]
 800c20c:	68a1      	ldr	r1, [r4, #8]
 800c20e:	9301      	str	r3, [sp, #4]
 800c210:	4620      	mov	r0, r4
 800c212:	f001 fea3 	bl	800df5c <_vfiprintf_r>
 800c216:	b002      	add	sp, #8
 800c218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c21c:	b004      	add	sp, #16
 800c21e:	4770      	bx	lr
 800c220:	20000084 	.word	0x20000084

0800c224 <_puts_r>:
 800c224:	b570      	push	{r4, r5, r6, lr}
 800c226:	460e      	mov	r6, r1
 800c228:	4605      	mov	r5, r0
 800c22a:	b118      	cbz	r0, 800c234 <_puts_r+0x10>
 800c22c:	6983      	ldr	r3, [r0, #24]
 800c22e:	b90b      	cbnz	r3, 800c234 <_puts_r+0x10>
 800c230:	f001 f882 	bl	800d338 <__sinit>
 800c234:	69ab      	ldr	r3, [r5, #24]
 800c236:	68ac      	ldr	r4, [r5, #8]
 800c238:	b913      	cbnz	r3, 800c240 <_puts_r+0x1c>
 800c23a:	4628      	mov	r0, r5
 800c23c:	f001 f87c 	bl	800d338 <__sinit>
 800c240:	4b23      	ldr	r3, [pc, #140]	; (800c2d0 <_puts_r+0xac>)
 800c242:	429c      	cmp	r4, r3
 800c244:	d117      	bne.n	800c276 <_puts_r+0x52>
 800c246:	686c      	ldr	r4, [r5, #4]
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	071b      	lsls	r3, r3, #28
 800c24c:	d51d      	bpl.n	800c28a <_puts_r+0x66>
 800c24e:	6923      	ldr	r3, [r4, #16]
 800c250:	b1db      	cbz	r3, 800c28a <_puts_r+0x66>
 800c252:	3e01      	subs	r6, #1
 800c254:	68a3      	ldr	r3, [r4, #8]
 800c256:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c25a:	3b01      	subs	r3, #1
 800c25c:	60a3      	str	r3, [r4, #8]
 800c25e:	b9e9      	cbnz	r1, 800c29c <_puts_r+0x78>
 800c260:	2b00      	cmp	r3, #0
 800c262:	da2e      	bge.n	800c2c2 <_puts_r+0x9e>
 800c264:	4622      	mov	r2, r4
 800c266:	210a      	movs	r1, #10
 800c268:	4628      	mov	r0, r5
 800c26a:	f000 f86f 	bl	800c34c <__swbuf_r>
 800c26e:	3001      	adds	r0, #1
 800c270:	d011      	beq.n	800c296 <_puts_r+0x72>
 800c272:	200a      	movs	r0, #10
 800c274:	e011      	b.n	800c29a <_puts_r+0x76>
 800c276:	4b17      	ldr	r3, [pc, #92]	; (800c2d4 <_puts_r+0xb0>)
 800c278:	429c      	cmp	r4, r3
 800c27a:	d101      	bne.n	800c280 <_puts_r+0x5c>
 800c27c:	68ac      	ldr	r4, [r5, #8]
 800c27e:	e7e3      	b.n	800c248 <_puts_r+0x24>
 800c280:	4b15      	ldr	r3, [pc, #84]	; (800c2d8 <_puts_r+0xb4>)
 800c282:	429c      	cmp	r4, r3
 800c284:	bf08      	it	eq
 800c286:	68ec      	ldreq	r4, [r5, #12]
 800c288:	e7de      	b.n	800c248 <_puts_r+0x24>
 800c28a:	4621      	mov	r1, r4
 800c28c:	4628      	mov	r0, r5
 800c28e:	f000 f8af 	bl	800c3f0 <__swsetup_r>
 800c292:	2800      	cmp	r0, #0
 800c294:	d0dd      	beq.n	800c252 <_puts_r+0x2e>
 800c296:	f04f 30ff 	mov.w	r0, #4294967295
 800c29a:	bd70      	pop	{r4, r5, r6, pc}
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	da04      	bge.n	800c2aa <_puts_r+0x86>
 800c2a0:	69a2      	ldr	r2, [r4, #24]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	dc06      	bgt.n	800c2b4 <_puts_r+0x90>
 800c2a6:	290a      	cmp	r1, #10
 800c2a8:	d004      	beq.n	800c2b4 <_puts_r+0x90>
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	6022      	str	r2, [r4, #0]
 800c2b0:	7019      	strb	r1, [r3, #0]
 800c2b2:	e7cf      	b.n	800c254 <_puts_r+0x30>
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	f000 f848 	bl	800c34c <__swbuf_r>
 800c2bc:	3001      	adds	r0, #1
 800c2be:	d1c9      	bne.n	800c254 <_puts_r+0x30>
 800c2c0:	e7e9      	b.n	800c296 <_puts_r+0x72>
 800c2c2:	6823      	ldr	r3, [r4, #0]
 800c2c4:	200a      	movs	r0, #10
 800c2c6:	1c5a      	adds	r2, r3, #1
 800c2c8:	6022      	str	r2, [r4, #0]
 800c2ca:	7018      	strb	r0, [r3, #0]
 800c2cc:	e7e5      	b.n	800c29a <_puts_r+0x76>
 800c2ce:	bf00      	nop
 800c2d0:	0800ea48 	.word	0x0800ea48
 800c2d4:	0800ea68 	.word	0x0800ea68
 800c2d8:	0800ea28 	.word	0x0800ea28

0800c2dc <puts>:
 800c2dc:	4b02      	ldr	r3, [pc, #8]	; (800c2e8 <puts+0xc>)
 800c2de:	4601      	mov	r1, r0
 800c2e0:	6818      	ldr	r0, [r3, #0]
 800c2e2:	f7ff bf9f 	b.w	800c224 <_puts_r>
 800c2e6:	bf00      	nop
 800c2e8:	20000084 	.word	0x20000084

0800c2ec <siprintf>:
 800c2ec:	b40e      	push	{r1, r2, r3}
 800c2ee:	b500      	push	{lr}
 800c2f0:	b09c      	sub	sp, #112	; 0x70
 800c2f2:	ab1d      	add	r3, sp, #116	; 0x74
 800c2f4:	9002      	str	r0, [sp, #8]
 800c2f6:	9006      	str	r0, [sp, #24]
 800c2f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2fc:	4809      	ldr	r0, [pc, #36]	; (800c324 <siprintf+0x38>)
 800c2fe:	9107      	str	r1, [sp, #28]
 800c300:	9104      	str	r1, [sp, #16]
 800c302:	4909      	ldr	r1, [pc, #36]	; (800c328 <siprintf+0x3c>)
 800c304:	f853 2b04 	ldr.w	r2, [r3], #4
 800c308:	9105      	str	r1, [sp, #20]
 800c30a:	6800      	ldr	r0, [r0, #0]
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	a902      	add	r1, sp, #8
 800c310:	f001 fd02 	bl	800dd18 <_svfiprintf_r>
 800c314:	9b02      	ldr	r3, [sp, #8]
 800c316:	2200      	movs	r2, #0
 800c318:	701a      	strb	r2, [r3, #0]
 800c31a:	b01c      	add	sp, #112	; 0x70
 800c31c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c320:	b003      	add	sp, #12
 800c322:	4770      	bx	lr
 800c324:	20000084 	.word	0x20000084
 800c328:	ffff0208 	.word	0xffff0208

0800c32c <strcat>:
 800c32c:	b510      	push	{r4, lr}
 800c32e:	4603      	mov	r3, r0
 800c330:	781a      	ldrb	r2, [r3, #0]
 800c332:	1c5c      	adds	r4, r3, #1
 800c334:	b93a      	cbnz	r2, 800c346 <strcat+0x1a>
 800c336:	3b01      	subs	r3, #1
 800c338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c33c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c340:	2a00      	cmp	r2, #0
 800c342:	d1f9      	bne.n	800c338 <strcat+0xc>
 800c344:	bd10      	pop	{r4, pc}
 800c346:	4623      	mov	r3, r4
 800c348:	e7f2      	b.n	800c330 <strcat+0x4>
	...

0800c34c <__swbuf_r>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	460e      	mov	r6, r1
 800c350:	4614      	mov	r4, r2
 800c352:	4605      	mov	r5, r0
 800c354:	b118      	cbz	r0, 800c35e <__swbuf_r+0x12>
 800c356:	6983      	ldr	r3, [r0, #24]
 800c358:	b90b      	cbnz	r3, 800c35e <__swbuf_r+0x12>
 800c35a:	f000 ffed 	bl	800d338 <__sinit>
 800c35e:	4b21      	ldr	r3, [pc, #132]	; (800c3e4 <__swbuf_r+0x98>)
 800c360:	429c      	cmp	r4, r3
 800c362:	d12a      	bne.n	800c3ba <__swbuf_r+0x6e>
 800c364:	686c      	ldr	r4, [r5, #4]
 800c366:	69a3      	ldr	r3, [r4, #24]
 800c368:	60a3      	str	r3, [r4, #8]
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	071a      	lsls	r2, r3, #28
 800c36e:	d52e      	bpl.n	800c3ce <__swbuf_r+0x82>
 800c370:	6923      	ldr	r3, [r4, #16]
 800c372:	b363      	cbz	r3, 800c3ce <__swbuf_r+0x82>
 800c374:	6923      	ldr	r3, [r4, #16]
 800c376:	6820      	ldr	r0, [r4, #0]
 800c378:	1ac0      	subs	r0, r0, r3
 800c37a:	6963      	ldr	r3, [r4, #20]
 800c37c:	b2f6      	uxtb	r6, r6
 800c37e:	4283      	cmp	r3, r0
 800c380:	4637      	mov	r7, r6
 800c382:	dc04      	bgt.n	800c38e <__swbuf_r+0x42>
 800c384:	4621      	mov	r1, r4
 800c386:	4628      	mov	r0, r5
 800c388:	f000 ff6c 	bl	800d264 <_fflush_r>
 800c38c:	bb28      	cbnz	r0, 800c3da <__swbuf_r+0x8e>
 800c38e:	68a3      	ldr	r3, [r4, #8]
 800c390:	3b01      	subs	r3, #1
 800c392:	60a3      	str	r3, [r4, #8]
 800c394:	6823      	ldr	r3, [r4, #0]
 800c396:	1c5a      	adds	r2, r3, #1
 800c398:	6022      	str	r2, [r4, #0]
 800c39a:	701e      	strb	r6, [r3, #0]
 800c39c:	6963      	ldr	r3, [r4, #20]
 800c39e:	3001      	adds	r0, #1
 800c3a0:	4283      	cmp	r3, r0
 800c3a2:	d004      	beq.n	800c3ae <__swbuf_r+0x62>
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	07db      	lsls	r3, r3, #31
 800c3a8:	d519      	bpl.n	800c3de <__swbuf_r+0x92>
 800c3aa:	2e0a      	cmp	r6, #10
 800c3ac:	d117      	bne.n	800c3de <__swbuf_r+0x92>
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	f000 ff57 	bl	800d264 <_fflush_r>
 800c3b6:	b190      	cbz	r0, 800c3de <__swbuf_r+0x92>
 800c3b8:	e00f      	b.n	800c3da <__swbuf_r+0x8e>
 800c3ba:	4b0b      	ldr	r3, [pc, #44]	; (800c3e8 <__swbuf_r+0x9c>)
 800c3bc:	429c      	cmp	r4, r3
 800c3be:	d101      	bne.n	800c3c4 <__swbuf_r+0x78>
 800c3c0:	68ac      	ldr	r4, [r5, #8]
 800c3c2:	e7d0      	b.n	800c366 <__swbuf_r+0x1a>
 800c3c4:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <__swbuf_r+0xa0>)
 800c3c6:	429c      	cmp	r4, r3
 800c3c8:	bf08      	it	eq
 800c3ca:	68ec      	ldreq	r4, [r5, #12]
 800c3cc:	e7cb      	b.n	800c366 <__swbuf_r+0x1a>
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	f000 f80d 	bl	800c3f0 <__swsetup_r>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d0cc      	beq.n	800c374 <__swbuf_r+0x28>
 800c3da:	f04f 37ff 	mov.w	r7, #4294967295
 800c3de:	4638      	mov	r0, r7
 800c3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	0800ea48 	.word	0x0800ea48
 800c3e8:	0800ea68 	.word	0x0800ea68
 800c3ec:	0800ea28 	.word	0x0800ea28

0800c3f0 <__swsetup_r>:
 800c3f0:	4b32      	ldr	r3, [pc, #200]	; (800c4bc <__swsetup_r+0xcc>)
 800c3f2:	b570      	push	{r4, r5, r6, lr}
 800c3f4:	681d      	ldr	r5, [r3, #0]
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	b125      	cbz	r5, 800c406 <__swsetup_r+0x16>
 800c3fc:	69ab      	ldr	r3, [r5, #24]
 800c3fe:	b913      	cbnz	r3, 800c406 <__swsetup_r+0x16>
 800c400:	4628      	mov	r0, r5
 800c402:	f000 ff99 	bl	800d338 <__sinit>
 800c406:	4b2e      	ldr	r3, [pc, #184]	; (800c4c0 <__swsetup_r+0xd0>)
 800c408:	429c      	cmp	r4, r3
 800c40a:	d10f      	bne.n	800c42c <__swsetup_r+0x3c>
 800c40c:	686c      	ldr	r4, [r5, #4]
 800c40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c412:	b29a      	uxth	r2, r3
 800c414:	0715      	lsls	r5, r2, #28
 800c416:	d42c      	bmi.n	800c472 <__swsetup_r+0x82>
 800c418:	06d0      	lsls	r0, r2, #27
 800c41a:	d411      	bmi.n	800c440 <__swsetup_r+0x50>
 800c41c:	2209      	movs	r2, #9
 800c41e:	6032      	str	r2, [r6, #0]
 800c420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c424:	81a3      	strh	r3, [r4, #12]
 800c426:	f04f 30ff 	mov.w	r0, #4294967295
 800c42a:	e03e      	b.n	800c4aa <__swsetup_r+0xba>
 800c42c:	4b25      	ldr	r3, [pc, #148]	; (800c4c4 <__swsetup_r+0xd4>)
 800c42e:	429c      	cmp	r4, r3
 800c430:	d101      	bne.n	800c436 <__swsetup_r+0x46>
 800c432:	68ac      	ldr	r4, [r5, #8]
 800c434:	e7eb      	b.n	800c40e <__swsetup_r+0x1e>
 800c436:	4b24      	ldr	r3, [pc, #144]	; (800c4c8 <__swsetup_r+0xd8>)
 800c438:	429c      	cmp	r4, r3
 800c43a:	bf08      	it	eq
 800c43c:	68ec      	ldreq	r4, [r5, #12]
 800c43e:	e7e6      	b.n	800c40e <__swsetup_r+0x1e>
 800c440:	0751      	lsls	r1, r2, #29
 800c442:	d512      	bpl.n	800c46a <__swsetup_r+0x7a>
 800c444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c446:	b141      	cbz	r1, 800c45a <__swsetup_r+0x6a>
 800c448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c44c:	4299      	cmp	r1, r3
 800c44e:	d002      	beq.n	800c456 <__swsetup_r+0x66>
 800c450:	4630      	mov	r0, r6
 800c452:	f001 fb5f 	bl	800db14 <_free_r>
 800c456:	2300      	movs	r3, #0
 800c458:	6363      	str	r3, [r4, #52]	; 0x34
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c460:	81a3      	strh	r3, [r4, #12]
 800c462:	2300      	movs	r3, #0
 800c464:	6063      	str	r3, [r4, #4]
 800c466:	6923      	ldr	r3, [r4, #16]
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	89a3      	ldrh	r3, [r4, #12]
 800c46c:	f043 0308 	orr.w	r3, r3, #8
 800c470:	81a3      	strh	r3, [r4, #12]
 800c472:	6923      	ldr	r3, [r4, #16]
 800c474:	b94b      	cbnz	r3, 800c48a <__swsetup_r+0x9a>
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c47c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c480:	d003      	beq.n	800c48a <__swsetup_r+0x9a>
 800c482:	4621      	mov	r1, r4
 800c484:	4630      	mov	r0, r6
 800c486:	f001 f813 	bl	800d4b0 <__smakebuf_r>
 800c48a:	89a2      	ldrh	r2, [r4, #12]
 800c48c:	f012 0301 	ands.w	r3, r2, #1
 800c490:	d00c      	beq.n	800c4ac <__swsetup_r+0xbc>
 800c492:	2300      	movs	r3, #0
 800c494:	60a3      	str	r3, [r4, #8]
 800c496:	6963      	ldr	r3, [r4, #20]
 800c498:	425b      	negs	r3, r3
 800c49a:	61a3      	str	r3, [r4, #24]
 800c49c:	6923      	ldr	r3, [r4, #16]
 800c49e:	b953      	cbnz	r3, 800c4b6 <__swsetup_r+0xc6>
 800c4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c4a8:	d1ba      	bne.n	800c420 <__swsetup_r+0x30>
 800c4aa:	bd70      	pop	{r4, r5, r6, pc}
 800c4ac:	0792      	lsls	r2, r2, #30
 800c4ae:	bf58      	it	pl
 800c4b0:	6963      	ldrpl	r3, [r4, #20]
 800c4b2:	60a3      	str	r3, [r4, #8]
 800c4b4:	e7f2      	b.n	800c49c <__swsetup_r+0xac>
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	e7f7      	b.n	800c4aa <__swsetup_r+0xba>
 800c4ba:	bf00      	nop
 800c4bc:	20000084 	.word	0x20000084
 800c4c0:	0800ea48 	.word	0x0800ea48
 800c4c4:	0800ea68 	.word	0x0800ea68
 800c4c8:	0800ea28 	.word	0x0800ea28

0800c4cc <quorem>:
 800c4cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d0:	6903      	ldr	r3, [r0, #16]
 800c4d2:	690c      	ldr	r4, [r1, #16]
 800c4d4:	42a3      	cmp	r3, r4
 800c4d6:	4680      	mov	r8, r0
 800c4d8:	f2c0 8082 	blt.w	800c5e0 <quorem+0x114>
 800c4dc:	3c01      	subs	r4, #1
 800c4de:	f101 0714 	add.w	r7, r1, #20
 800c4e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c4e6:	f100 0614 	add.w	r6, r0, #20
 800c4ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c4ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c4f2:	eb06 030c 	add.w	r3, r6, ip
 800c4f6:	3501      	adds	r5, #1
 800c4f8:	eb07 090c 	add.w	r9, r7, ip
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	fbb0 f5f5 	udiv	r5, r0, r5
 800c502:	b395      	cbz	r5, 800c56a <quorem+0x9e>
 800c504:	f04f 0a00 	mov.w	sl, #0
 800c508:	4638      	mov	r0, r7
 800c50a:	46b6      	mov	lr, r6
 800c50c:	46d3      	mov	fp, sl
 800c50e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c512:	b293      	uxth	r3, r2
 800c514:	fb05 a303 	mla	r3, r5, r3, sl
 800c518:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	ebab 0303 	sub.w	r3, fp, r3
 800c522:	0c12      	lsrs	r2, r2, #16
 800c524:	f8de b000 	ldr.w	fp, [lr]
 800c528:	fb05 a202 	mla	r2, r5, r2, sl
 800c52c:	fa13 f38b 	uxtah	r3, r3, fp
 800c530:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c534:	fa1f fb82 	uxth.w	fp, r2
 800c538:	f8de 2000 	ldr.w	r2, [lr]
 800c53c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c544:	b29b      	uxth	r3, r3
 800c546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c54a:	4581      	cmp	r9, r0
 800c54c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c550:	f84e 3b04 	str.w	r3, [lr], #4
 800c554:	d2db      	bcs.n	800c50e <quorem+0x42>
 800c556:	f856 300c 	ldr.w	r3, [r6, ip]
 800c55a:	b933      	cbnz	r3, 800c56a <quorem+0x9e>
 800c55c:	9b01      	ldr	r3, [sp, #4]
 800c55e:	3b04      	subs	r3, #4
 800c560:	429e      	cmp	r6, r3
 800c562:	461a      	mov	r2, r3
 800c564:	d330      	bcc.n	800c5c8 <quorem+0xfc>
 800c566:	f8c8 4010 	str.w	r4, [r8, #16]
 800c56a:	4640      	mov	r0, r8
 800c56c:	f001 f9fe 	bl	800d96c <__mcmp>
 800c570:	2800      	cmp	r0, #0
 800c572:	db25      	blt.n	800c5c0 <quorem+0xf4>
 800c574:	3501      	adds	r5, #1
 800c576:	4630      	mov	r0, r6
 800c578:	f04f 0c00 	mov.w	ip, #0
 800c57c:	f857 2b04 	ldr.w	r2, [r7], #4
 800c580:	f8d0 e000 	ldr.w	lr, [r0]
 800c584:	b293      	uxth	r3, r2
 800c586:	ebac 0303 	sub.w	r3, ip, r3
 800c58a:	0c12      	lsrs	r2, r2, #16
 800c58c:	fa13 f38e 	uxtah	r3, r3, lr
 800c590:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c594:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c598:	b29b      	uxth	r3, r3
 800c59a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c59e:	45b9      	cmp	r9, r7
 800c5a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c5a4:	f840 3b04 	str.w	r3, [r0], #4
 800c5a8:	d2e8      	bcs.n	800c57c <quorem+0xb0>
 800c5aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c5ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c5b2:	b92a      	cbnz	r2, 800c5c0 <quorem+0xf4>
 800c5b4:	3b04      	subs	r3, #4
 800c5b6:	429e      	cmp	r6, r3
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	d30b      	bcc.n	800c5d4 <quorem+0x108>
 800c5bc:	f8c8 4010 	str.w	r4, [r8, #16]
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	b003      	add	sp, #12
 800c5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c8:	6812      	ldr	r2, [r2, #0]
 800c5ca:	3b04      	subs	r3, #4
 800c5cc:	2a00      	cmp	r2, #0
 800c5ce:	d1ca      	bne.n	800c566 <quorem+0x9a>
 800c5d0:	3c01      	subs	r4, #1
 800c5d2:	e7c5      	b.n	800c560 <quorem+0x94>
 800c5d4:	6812      	ldr	r2, [r2, #0]
 800c5d6:	3b04      	subs	r3, #4
 800c5d8:	2a00      	cmp	r2, #0
 800c5da:	d1ef      	bne.n	800c5bc <quorem+0xf0>
 800c5dc:	3c01      	subs	r4, #1
 800c5de:	e7ea      	b.n	800c5b6 <quorem+0xea>
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	e7ee      	b.n	800c5c2 <quorem+0xf6>
 800c5e4:	0000      	movs	r0, r0
	...

0800c5e8 <_dtoa_r>:
 800c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ec:	ec57 6b10 	vmov	r6, r7, d0
 800c5f0:	b097      	sub	sp, #92	; 0x5c
 800c5f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c5f4:	9106      	str	r1, [sp, #24]
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	920b      	str	r2, [sp, #44]	; 0x2c
 800c5fa:	9312      	str	r3, [sp, #72]	; 0x48
 800c5fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c600:	e9cd 6700 	strd	r6, r7, [sp]
 800c604:	b93d      	cbnz	r5, 800c616 <_dtoa_r+0x2e>
 800c606:	2010      	movs	r0, #16
 800c608:	f000 ff92 	bl	800d530 <malloc>
 800c60c:	6260      	str	r0, [r4, #36]	; 0x24
 800c60e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c612:	6005      	str	r5, [r0, #0]
 800c614:	60c5      	str	r5, [r0, #12]
 800c616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c618:	6819      	ldr	r1, [r3, #0]
 800c61a:	b151      	cbz	r1, 800c632 <_dtoa_r+0x4a>
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	604a      	str	r2, [r1, #4]
 800c620:	2301      	movs	r3, #1
 800c622:	4093      	lsls	r3, r2
 800c624:	608b      	str	r3, [r1, #8]
 800c626:	4620      	mov	r0, r4
 800c628:	f000 ffbe 	bl	800d5a8 <_Bfree>
 800c62c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c62e:	2200      	movs	r2, #0
 800c630:	601a      	str	r2, [r3, #0]
 800c632:	1e3b      	subs	r3, r7, #0
 800c634:	bfbb      	ittet	lt
 800c636:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c63a:	9301      	strlt	r3, [sp, #4]
 800c63c:	2300      	movge	r3, #0
 800c63e:	2201      	movlt	r2, #1
 800c640:	bfac      	ite	ge
 800c642:	f8c8 3000 	strge.w	r3, [r8]
 800c646:	f8c8 2000 	strlt.w	r2, [r8]
 800c64a:	4baf      	ldr	r3, [pc, #700]	; (800c908 <_dtoa_r+0x320>)
 800c64c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c650:	ea33 0308 	bics.w	r3, r3, r8
 800c654:	d114      	bne.n	800c680 <_dtoa_r+0x98>
 800c656:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c658:	f242 730f 	movw	r3, #9999	; 0x270f
 800c65c:	6013      	str	r3, [r2, #0]
 800c65e:	9b00      	ldr	r3, [sp, #0]
 800c660:	b923      	cbnz	r3, 800c66c <_dtoa_r+0x84>
 800c662:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c666:	2800      	cmp	r0, #0
 800c668:	f000 8542 	beq.w	800d0f0 <_dtoa_r+0xb08>
 800c66c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c66e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c91c <_dtoa_r+0x334>
 800c672:	2b00      	cmp	r3, #0
 800c674:	f000 8544 	beq.w	800d100 <_dtoa_r+0xb18>
 800c678:	f10b 0303 	add.w	r3, fp, #3
 800c67c:	f000 bd3e 	b.w	800d0fc <_dtoa_r+0xb14>
 800c680:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c684:	2200      	movs	r2, #0
 800c686:	2300      	movs	r3, #0
 800c688:	4630      	mov	r0, r6
 800c68a:	4639      	mov	r1, r7
 800c68c:	f7f4 fa1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c690:	4681      	mov	r9, r0
 800c692:	b168      	cbz	r0, 800c6b0 <_dtoa_r+0xc8>
 800c694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c696:	2301      	movs	r3, #1
 800c698:	6013      	str	r3, [r2, #0]
 800c69a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f000 8524 	beq.w	800d0ea <_dtoa_r+0xb02>
 800c6a2:	4b9a      	ldr	r3, [pc, #616]	; (800c90c <_dtoa_r+0x324>)
 800c6a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6a6:	f103 3bff 	add.w	fp, r3, #4294967295
 800c6aa:	6013      	str	r3, [r2, #0]
 800c6ac:	f000 bd28 	b.w	800d100 <_dtoa_r+0xb18>
 800c6b0:	aa14      	add	r2, sp, #80	; 0x50
 800c6b2:	a915      	add	r1, sp, #84	; 0x54
 800c6b4:	ec47 6b10 	vmov	d0, r6, r7
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f001 f9ce 	bl	800da5a <__d2b>
 800c6be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c6c2:	9004      	str	r0, [sp, #16]
 800c6c4:	2d00      	cmp	r5, #0
 800c6c6:	d07c      	beq.n	800c7c2 <_dtoa_r+0x1da>
 800c6c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c6d0:	46b2      	mov	sl, r6
 800c6d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c6d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c6da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c6de:	2200      	movs	r2, #0
 800c6e0:	4b8b      	ldr	r3, [pc, #556]	; (800c910 <_dtoa_r+0x328>)
 800c6e2:	4650      	mov	r0, sl
 800c6e4:	4659      	mov	r1, fp
 800c6e6:	f7f3 fdcf 	bl	8000288 <__aeabi_dsub>
 800c6ea:	a381      	add	r3, pc, #516	; (adr r3, 800c8f0 <_dtoa_r+0x308>)
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	f7f3 ff82 	bl	80005f8 <__aeabi_dmul>
 800c6f4:	a380      	add	r3, pc, #512	; (adr r3, 800c8f8 <_dtoa_r+0x310>)
 800c6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fa:	f7f3 fdc7 	bl	800028c <__adddf3>
 800c6fe:	4606      	mov	r6, r0
 800c700:	4628      	mov	r0, r5
 800c702:	460f      	mov	r7, r1
 800c704:	f7f3 ff0e 	bl	8000524 <__aeabi_i2d>
 800c708:	a37d      	add	r3, pc, #500	; (adr r3, 800c900 <_dtoa_r+0x318>)
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	f7f3 ff73 	bl	80005f8 <__aeabi_dmul>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	4630      	mov	r0, r6
 800c718:	4639      	mov	r1, r7
 800c71a:	f7f3 fdb7 	bl	800028c <__adddf3>
 800c71e:	4606      	mov	r6, r0
 800c720:	460f      	mov	r7, r1
 800c722:	f7f4 fa19 	bl	8000b58 <__aeabi_d2iz>
 800c726:	2200      	movs	r2, #0
 800c728:	4682      	mov	sl, r0
 800c72a:	2300      	movs	r3, #0
 800c72c:	4630      	mov	r0, r6
 800c72e:	4639      	mov	r1, r7
 800c730:	f7f4 f9d4 	bl	8000adc <__aeabi_dcmplt>
 800c734:	b148      	cbz	r0, 800c74a <_dtoa_r+0x162>
 800c736:	4650      	mov	r0, sl
 800c738:	f7f3 fef4 	bl	8000524 <__aeabi_i2d>
 800c73c:	4632      	mov	r2, r6
 800c73e:	463b      	mov	r3, r7
 800c740:	f7f4 f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c744:	b908      	cbnz	r0, 800c74a <_dtoa_r+0x162>
 800c746:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c74a:	f1ba 0f16 	cmp.w	sl, #22
 800c74e:	d859      	bhi.n	800c804 <_dtoa_r+0x21c>
 800c750:	4970      	ldr	r1, [pc, #448]	; (800c914 <_dtoa_r+0x32c>)
 800c752:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c756:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c75a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c75e:	f7f4 f9db 	bl	8000b18 <__aeabi_dcmpgt>
 800c762:	2800      	cmp	r0, #0
 800c764:	d050      	beq.n	800c808 <_dtoa_r+0x220>
 800c766:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c76a:	2300      	movs	r3, #0
 800c76c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c76e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c770:	1b5d      	subs	r5, r3, r5
 800c772:	f1b5 0801 	subs.w	r8, r5, #1
 800c776:	bf49      	itett	mi
 800c778:	f1c5 0301 	rsbmi	r3, r5, #1
 800c77c:	2300      	movpl	r3, #0
 800c77e:	9305      	strmi	r3, [sp, #20]
 800c780:	f04f 0800 	movmi.w	r8, #0
 800c784:	bf58      	it	pl
 800c786:	9305      	strpl	r3, [sp, #20]
 800c788:	f1ba 0f00 	cmp.w	sl, #0
 800c78c:	db3e      	blt.n	800c80c <_dtoa_r+0x224>
 800c78e:	2300      	movs	r3, #0
 800c790:	44d0      	add	r8, sl
 800c792:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c796:	9307      	str	r3, [sp, #28]
 800c798:	9b06      	ldr	r3, [sp, #24]
 800c79a:	2b09      	cmp	r3, #9
 800c79c:	f200 8090 	bhi.w	800c8c0 <_dtoa_r+0x2d8>
 800c7a0:	2b05      	cmp	r3, #5
 800c7a2:	bfc4      	itt	gt
 800c7a4:	3b04      	subgt	r3, #4
 800c7a6:	9306      	strgt	r3, [sp, #24]
 800c7a8:	9b06      	ldr	r3, [sp, #24]
 800c7aa:	f1a3 0302 	sub.w	r3, r3, #2
 800c7ae:	bfcc      	ite	gt
 800c7b0:	2500      	movgt	r5, #0
 800c7b2:	2501      	movle	r5, #1
 800c7b4:	2b03      	cmp	r3, #3
 800c7b6:	f200 808f 	bhi.w	800c8d8 <_dtoa_r+0x2f0>
 800c7ba:	e8df f003 	tbb	[pc, r3]
 800c7be:	7f7d      	.short	0x7f7d
 800c7c0:	7131      	.short	0x7131
 800c7c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c7c6:	441d      	add	r5, r3
 800c7c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c7cc:	2820      	cmp	r0, #32
 800c7ce:	dd13      	ble.n	800c7f8 <_dtoa_r+0x210>
 800c7d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c7d4:	9b00      	ldr	r3, [sp, #0]
 800c7d6:	fa08 f800 	lsl.w	r8, r8, r0
 800c7da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c7de:	fa23 f000 	lsr.w	r0, r3, r0
 800c7e2:	ea48 0000 	orr.w	r0, r8, r0
 800c7e6:	f7f3 fe8d 	bl	8000504 <__aeabi_ui2d>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	4682      	mov	sl, r0
 800c7ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c7f2:	3d01      	subs	r5, #1
 800c7f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800c7f6:	e772      	b.n	800c6de <_dtoa_r+0xf6>
 800c7f8:	9b00      	ldr	r3, [sp, #0]
 800c7fa:	f1c0 0020 	rsb	r0, r0, #32
 800c7fe:	fa03 f000 	lsl.w	r0, r3, r0
 800c802:	e7f0      	b.n	800c7e6 <_dtoa_r+0x1fe>
 800c804:	2301      	movs	r3, #1
 800c806:	e7b1      	b.n	800c76c <_dtoa_r+0x184>
 800c808:	900f      	str	r0, [sp, #60]	; 0x3c
 800c80a:	e7b0      	b.n	800c76e <_dtoa_r+0x186>
 800c80c:	9b05      	ldr	r3, [sp, #20]
 800c80e:	eba3 030a 	sub.w	r3, r3, sl
 800c812:	9305      	str	r3, [sp, #20]
 800c814:	f1ca 0300 	rsb	r3, sl, #0
 800c818:	9307      	str	r3, [sp, #28]
 800c81a:	2300      	movs	r3, #0
 800c81c:	930e      	str	r3, [sp, #56]	; 0x38
 800c81e:	e7bb      	b.n	800c798 <_dtoa_r+0x1b0>
 800c820:	2301      	movs	r3, #1
 800c822:	930a      	str	r3, [sp, #40]	; 0x28
 800c824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c826:	2b00      	cmp	r3, #0
 800c828:	dd59      	ble.n	800c8de <_dtoa_r+0x2f6>
 800c82a:	9302      	str	r3, [sp, #8]
 800c82c:	4699      	mov	r9, r3
 800c82e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c830:	2200      	movs	r2, #0
 800c832:	6072      	str	r2, [r6, #4]
 800c834:	2204      	movs	r2, #4
 800c836:	f102 0014 	add.w	r0, r2, #20
 800c83a:	4298      	cmp	r0, r3
 800c83c:	6871      	ldr	r1, [r6, #4]
 800c83e:	d953      	bls.n	800c8e8 <_dtoa_r+0x300>
 800c840:	4620      	mov	r0, r4
 800c842:	f000 fe7d 	bl	800d540 <_Balloc>
 800c846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c848:	6030      	str	r0, [r6, #0]
 800c84a:	f1b9 0f0e 	cmp.w	r9, #14
 800c84e:	f8d3 b000 	ldr.w	fp, [r3]
 800c852:	f200 80e6 	bhi.w	800ca22 <_dtoa_r+0x43a>
 800c856:	2d00      	cmp	r5, #0
 800c858:	f000 80e3 	beq.w	800ca22 <_dtoa_r+0x43a>
 800c85c:	ed9d 7b00 	vldr	d7, [sp]
 800c860:	f1ba 0f00 	cmp.w	sl, #0
 800c864:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c868:	dd74      	ble.n	800c954 <_dtoa_r+0x36c>
 800c86a:	4a2a      	ldr	r2, [pc, #168]	; (800c914 <_dtoa_r+0x32c>)
 800c86c:	f00a 030f 	and.w	r3, sl, #15
 800c870:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c874:	ed93 7b00 	vldr	d7, [r3]
 800c878:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c87c:	06f0      	lsls	r0, r6, #27
 800c87e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c882:	d565      	bpl.n	800c950 <_dtoa_r+0x368>
 800c884:	4b24      	ldr	r3, [pc, #144]	; (800c918 <_dtoa_r+0x330>)
 800c886:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c88a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c88e:	f7f3 ffdd 	bl	800084c <__aeabi_ddiv>
 800c892:	e9cd 0100 	strd	r0, r1, [sp]
 800c896:	f006 060f 	and.w	r6, r6, #15
 800c89a:	2503      	movs	r5, #3
 800c89c:	4f1e      	ldr	r7, [pc, #120]	; (800c918 <_dtoa_r+0x330>)
 800c89e:	e04c      	b.n	800c93a <_dtoa_r+0x352>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c8a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8a6:	4453      	add	r3, sl
 800c8a8:	f103 0901 	add.w	r9, r3, #1
 800c8ac:	9302      	str	r3, [sp, #8]
 800c8ae:	464b      	mov	r3, r9
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	bfb8      	it	lt
 800c8b4:	2301      	movlt	r3, #1
 800c8b6:	e7ba      	b.n	800c82e <_dtoa_r+0x246>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	e7b2      	b.n	800c822 <_dtoa_r+0x23a>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	e7f0      	b.n	800c8a2 <_dtoa_r+0x2ba>
 800c8c0:	2501      	movs	r5, #1
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	9306      	str	r3, [sp, #24]
 800c8c6:	950a      	str	r5, [sp, #40]	; 0x28
 800c8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8cc:	9302      	str	r3, [sp, #8]
 800c8ce:	4699      	mov	r9, r3
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	2312      	movs	r3, #18
 800c8d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800c8d6:	e7aa      	b.n	800c82e <_dtoa_r+0x246>
 800c8d8:	2301      	movs	r3, #1
 800c8da:	930a      	str	r3, [sp, #40]	; 0x28
 800c8dc:	e7f4      	b.n	800c8c8 <_dtoa_r+0x2e0>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	9302      	str	r3, [sp, #8]
 800c8e2:	4699      	mov	r9, r3
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	e7f5      	b.n	800c8d4 <_dtoa_r+0x2ec>
 800c8e8:	3101      	adds	r1, #1
 800c8ea:	6071      	str	r1, [r6, #4]
 800c8ec:	0052      	lsls	r2, r2, #1
 800c8ee:	e7a2      	b.n	800c836 <_dtoa_r+0x24e>
 800c8f0:	636f4361 	.word	0x636f4361
 800c8f4:	3fd287a7 	.word	0x3fd287a7
 800c8f8:	8b60c8b3 	.word	0x8b60c8b3
 800c8fc:	3fc68a28 	.word	0x3fc68a28
 800c900:	509f79fb 	.word	0x509f79fb
 800c904:	3fd34413 	.word	0x3fd34413
 800c908:	7ff00000 	.word	0x7ff00000
 800c90c:	0800e9f5 	.word	0x0800e9f5
 800c910:	3ff80000 	.word	0x3ff80000
 800c914:	0800eab0 	.word	0x0800eab0
 800c918:	0800ea88 	.word	0x0800ea88
 800c91c:	0800ea21 	.word	0x0800ea21
 800c920:	07f1      	lsls	r1, r6, #31
 800c922:	d508      	bpl.n	800c936 <_dtoa_r+0x34e>
 800c924:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c92c:	f7f3 fe64 	bl	80005f8 <__aeabi_dmul>
 800c930:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c934:	3501      	adds	r5, #1
 800c936:	1076      	asrs	r6, r6, #1
 800c938:	3708      	adds	r7, #8
 800c93a:	2e00      	cmp	r6, #0
 800c93c:	d1f0      	bne.n	800c920 <_dtoa_r+0x338>
 800c93e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c942:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c946:	f7f3 ff81 	bl	800084c <__aeabi_ddiv>
 800c94a:	e9cd 0100 	strd	r0, r1, [sp]
 800c94e:	e01a      	b.n	800c986 <_dtoa_r+0x39e>
 800c950:	2502      	movs	r5, #2
 800c952:	e7a3      	b.n	800c89c <_dtoa_r+0x2b4>
 800c954:	f000 80a0 	beq.w	800ca98 <_dtoa_r+0x4b0>
 800c958:	f1ca 0600 	rsb	r6, sl, #0
 800c95c:	4b9f      	ldr	r3, [pc, #636]	; (800cbdc <_dtoa_r+0x5f4>)
 800c95e:	4fa0      	ldr	r7, [pc, #640]	; (800cbe0 <_dtoa_r+0x5f8>)
 800c960:	f006 020f 	and.w	r2, r6, #15
 800c964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c970:	f7f3 fe42 	bl	80005f8 <__aeabi_dmul>
 800c974:	e9cd 0100 	strd	r0, r1, [sp]
 800c978:	1136      	asrs	r6, r6, #4
 800c97a:	2300      	movs	r3, #0
 800c97c:	2502      	movs	r5, #2
 800c97e:	2e00      	cmp	r6, #0
 800c980:	d17f      	bne.n	800ca82 <_dtoa_r+0x49a>
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1e1      	bne.n	800c94a <_dtoa_r+0x362>
 800c986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c988:	2b00      	cmp	r3, #0
 800c98a:	f000 8087 	beq.w	800ca9c <_dtoa_r+0x4b4>
 800c98e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c992:	2200      	movs	r2, #0
 800c994:	4b93      	ldr	r3, [pc, #588]	; (800cbe4 <_dtoa_r+0x5fc>)
 800c996:	4630      	mov	r0, r6
 800c998:	4639      	mov	r1, r7
 800c99a:	f7f4 f89f 	bl	8000adc <__aeabi_dcmplt>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	d07c      	beq.n	800ca9c <_dtoa_r+0x4b4>
 800c9a2:	f1b9 0f00 	cmp.w	r9, #0
 800c9a6:	d079      	beq.n	800ca9c <_dtoa_r+0x4b4>
 800c9a8:	9b02      	ldr	r3, [sp, #8]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	dd35      	ble.n	800ca1a <_dtoa_r+0x432>
 800c9ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c9b2:	9308      	str	r3, [sp, #32]
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	4b8b      	ldr	r3, [pc, #556]	; (800cbe8 <_dtoa_r+0x600>)
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f7f3 fe1c 	bl	80005f8 <__aeabi_dmul>
 800c9c0:	e9cd 0100 	strd	r0, r1, [sp]
 800c9c4:	9f02      	ldr	r7, [sp, #8]
 800c9c6:	3501      	adds	r5, #1
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f7f3 fdab 	bl	8000524 <__aeabi_i2d>
 800c9ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9d2:	f7f3 fe11 	bl	80005f8 <__aeabi_dmul>
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	4b84      	ldr	r3, [pc, #528]	; (800cbec <_dtoa_r+0x604>)
 800c9da:	f7f3 fc57 	bl	800028c <__adddf3>
 800c9de:	4605      	mov	r5, r0
 800c9e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c9e4:	2f00      	cmp	r7, #0
 800c9e6:	d15d      	bne.n	800caa4 <_dtoa_r+0x4bc>
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	4b81      	ldr	r3, [pc, #516]	; (800cbf0 <_dtoa_r+0x608>)
 800c9ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9f0:	f7f3 fc4a 	bl	8000288 <__aeabi_dsub>
 800c9f4:	462a      	mov	r2, r5
 800c9f6:	4633      	mov	r3, r6
 800c9f8:	e9cd 0100 	strd	r0, r1, [sp]
 800c9fc:	f7f4 f88c 	bl	8000b18 <__aeabi_dcmpgt>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	f040 8288 	bne.w	800cf16 <_dtoa_r+0x92e>
 800ca06:	462a      	mov	r2, r5
 800ca08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ca0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca10:	f7f4 f864 	bl	8000adc <__aeabi_dcmplt>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	f040 827c 	bne.w	800cf12 <_dtoa_r+0x92a>
 800ca1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca1e:	e9cd 2300 	strd	r2, r3, [sp]
 800ca22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f2c0 8150 	blt.w	800ccca <_dtoa_r+0x6e2>
 800ca2a:	f1ba 0f0e 	cmp.w	sl, #14
 800ca2e:	f300 814c 	bgt.w	800ccca <_dtoa_r+0x6e2>
 800ca32:	4b6a      	ldr	r3, [pc, #424]	; (800cbdc <_dtoa_r+0x5f4>)
 800ca34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ca38:	ed93 7b00 	vldr	d7, [r3]
 800ca3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca44:	f280 80d8 	bge.w	800cbf8 <_dtoa_r+0x610>
 800ca48:	f1b9 0f00 	cmp.w	r9, #0
 800ca4c:	f300 80d4 	bgt.w	800cbf8 <_dtoa_r+0x610>
 800ca50:	f040 825e 	bne.w	800cf10 <_dtoa_r+0x928>
 800ca54:	2200      	movs	r2, #0
 800ca56:	4b66      	ldr	r3, [pc, #408]	; (800cbf0 <_dtoa_r+0x608>)
 800ca58:	ec51 0b17 	vmov	r0, r1, d7
 800ca5c:	f7f3 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ca60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca64:	f7f4 f84e 	bl	8000b04 <__aeabi_dcmpge>
 800ca68:	464f      	mov	r7, r9
 800ca6a:	464e      	mov	r6, r9
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	f040 8234 	bne.w	800ceda <_dtoa_r+0x8f2>
 800ca72:	2331      	movs	r3, #49	; 0x31
 800ca74:	f10b 0501 	add.w	r5, fp, #1
 800ca78:	f88b 3000 	strb.w	r3, [fp]
 800ca7c:	f10a 0a01 	add.w	sl, sl, #1
 800ca80:	e22f      	b.n	800cee2 <_dtoa_r+0x8fa>
 800ca82:	07f2      	lsls	r2, r6, #31
 800ca84:	d505      	bpl.n	800ca92 <_dtoa_r+0x4aa>
 800ca86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca8a:	f7f3 fdb5 	bl	80005f8 <__aeabi_dmul>
 800ca8e:	3501      	adds	r5, #1
 800ca90:	2301      	movs	r3, #1
 800ca92:	1076      	asrs	r6, r6, #1
 800ca94:	3708      	adds	r7, #8
 800ca96:	e772      	b.n	800c97e <_dtoa_r+0x396>
 800ca98:	2502      	movs	r5, #2
 800ca9a:	e774      	b.n	800c986 <_dtoa_r+0x39e>
 800ca9c:	f8cd a020 	str.w	sl, [sp, #32]
 800caa0:	464f      	mov	r7, r9
 800caa2:	e791      	b.n	800c9c8 <_dtoa_r+0x3e0>
 800caa4:	4b4d      	ldr	r3, [pc, #308]	; (800cbdc <_dtoa_r+0x5f4>)
 800caa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800caaa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800caae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d047      	beq.n	800cb44 <_dtoa_r+0x55c>
 800cab4:	4602      	mov	r2, r0
 800cab6:	460b      	mov	r3, r1
 800cab8:	2000      	movs	r0, #0
 800caba:	494e      	ldr	r1, [pc, #312]	; (800cbf4 <_dtoa_r+0x60c>)
 800cabc:	f7f3 fec6 	bl	800084c <__aeabi_ddiv>
 800cac0:	462a      	mov	r2, r5
 800cac2:	4633      	mov	r3, r6
 800cac4:	f7f3 fbe0 	bl	8000288 <__aeabi_dsub>
 800cac8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cacc:	465d      	mov	r5, fp
 800cace:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cad2:	f7f4 f841 	bl	8000b58 <__aeabi_d2iz>
 800cad6:	4606      	mov	r6, r0
 800cad8:	f7f3 fd24 	bl	8000524 <__aeabi_i2d>
 800cadc:	4602      	mov	r2, r0
 800cade:	460b      	mov	r3, r1
 800cae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cae4:	f7f3 fbd0 	bl	8000288 <__aeabi_dsub>
 800cae8:	3630      	adds	r6, #48	; 0x30
 800caea:	f805 6b01 	strb.w	r6, [r5], #1
 800caee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800caf2:	e9cd 0100 	strd	r0, r1, [sp]
 800caf6:	f7f3 fff1 	bl	8000adc <__aeabi_dcmplt>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d163      	bne.n	800cbc6 <_dtoa_r+0x5de>
 800cafe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb02:	2000      	movs	r0, #0
 800cb04:	4937      	ldr	r1, [pc, #220]	; (800cbe4 <_dtoa_r+0x5fc>)
 800cb06:	f7f3 fbbf 	bl	8000288 <__aeabi_dsub>
 800cb0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cb0e:	f7f3 ffe5 	bl	8000adc <__aeabi_dcmplt>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	f040 80b7 	bne.w	800cc86 <_dtoa_r+0x69e>
 800cb18:	eba5 030b 	sub.w	r3, r5, fp
 800cb1c:	429f      	cmp	r7, r3
 800cb1e:	f77f af7c 	ble.w	800ca1a <_dtoa_r+0x432>
 800cb22:	2200      	movs	r2, #0
 800cb24:	4b30      	ldr	r3, [pc, #192]	; (800cbe8 <_dtoa_r+0x600>)
 800cb26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb2a:	f7f3 fd65 	bl	80005f8 <__aeabi_dmul>
 800cb2e:	2200      	movs	r2, #0
 800cb30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cb34:	4b2c      	ldr	r3, [pc, #176]	; (800cbe8 <_dtoa_r+0x600>)
 800cb36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb3a:	f7f3 fd5d 	bl	80005f8 <__aeabi_dmul>
 800cb3e:	e9cd 0100 	strd	r0, r1, [sp]
 800cb42:	e7c4      	b.n	800cace <_dtoa_r+0x4e6>
 800cb44:	462a      	mov	r2, r5
 800cb46:	4633      	mov	r3, r6
 800cb48:	f7f3 fd56 	bl	80005f8 <__aeabi_dmul>
 800cb4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cb50:	eb0b 0507 	add.w	r5, fp, r7
 800cb54:	465e      	mov	r6, fp
 800cb56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb5a:	f7f3 fffd 	bl	8000b58 <__aeabi_d2iz>
 800cb5e:	4607      	mov	r7, r0
 800cb60:	f7f3 fce0 	bl	8000524 <__aeabi_i2d>
 800cb64:	3730      	adds	r7, #48	; 0x30
 800cb66:	4602      	mov	r2, r0
 800cb68:	460b      	mov	r3, r1
 800cb6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb6e:	f7f3 fb8b 	bl	8000288 <__aeabi_dsub>
 800cb72:	f806 7b01 	strb.w	r7, [r6], #1
 800cb76:	42ae      	cmp	r6, r5
 800cb78:	e9cd 0100 	strd	r0, r1, [sp]
 800cb7c:	f04f 0200 	mov.w	r2, #0
 800cb80:	d126      	bne.n	800cbd0 <_dtoa_r+0x5e8>
 800cb82:	4b1c      	ldr	r3, [pc, #112]	; (800cbf4 <_dtoa_r+0x60c>)
 800cb84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb88:	f7f3 fb80 	bl	800028c <__adddf3>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb94:	f7f3 ffc0 	bl	8000b18 <__aeabi_dcmpgt>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d174      	bne.n	800cc86 <_dtoa_r+0x69e>
 800cb9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cba0:	2000      	movs	r0, #0
 800cba2:	4914      	ldr	r1, [pc, #80]	; (800cbf4 <_dtoa_r+0x60c>)
 800cba4:	f7f3 fb70 	bl	8000288 <__aeabi_dsub>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	460b      	mov	r3, r1
 800cbac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbb0:	f7f3 ff94 	bl	8000adc <__aeabi_dcmplt>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	f43f af30 	beq.w	800ca1a <_dtoa_r+0x432>
 800cbba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cbbe:	2b30      	cmp	r3, #48	; 0x30
 800cbc0:	f105 32ff 	add.w	r2, r5, #4294967295
 800cbc4:	d002      	beq.n	800cbcc <_dtoa_r+0x5e4>
 800cbc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cbca:	e04a      	b.n	800cc62 <_dtoa_r+0x67a>
 800cbcc:	4615      	mov	r5, r2
 800cbce:	e7f4      	b.n	800cbba <_dtoa_r+0x5d2>
 800cbd0:	4b05      	ldr	r3, [pc, #20]	; (800cbe8 <_dtoa_r+0x600>)
 800cbd2:	f7f3 fd11 	bl	80005f8 <__aeabi_dmul>
 800cbd6:	e9cd 0100 	strd	r0, r1, [sp]
 800cbda:	e7bc      	b.n	800cb56 <_dtoa_r+0x56e>
 800cbdc:	0800eab0 	.word	0x0800eab0
 800cbe0:	0800ea88 	.word	0x0800ea88
 800cbe4:	3ff00000 	.word	0x3ff00000
 800cbe8:	40240000 	.word	0x40240000
 800cbec:	401c0000 	.word	0x401c0000
 800cbf0:	40140000 	.word	0x40140000
 800cbf4:	3fe00000 	.word	0x3fe00000
 800cbf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cbfc:	465d      	mov	r5, fp
 800cbfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc02:	4630      	mov	r0, r6
 800cc04:	4639      	mov	r1, r7
 800cc06:	f7f3 fe21 	bl	800084c <__aeabi_ddiv>
 800cc0a:	f7f3 ffa5 	bl	8000b58 <__aeabi_d2iz>
 800cc0e:	4680      	mov	r8, r0
 800cc10:	f7f3 fc88 	bl	8000524 <__aeabi_i2d>
 800cc14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc18:	f7f3 fcee 	bl	80005f8 <__aeabi_dmul>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	460b      	mov	r3, r1
 800cc20:	4630      	mov	r0, r6
 800cc22:	4639      	mov	r1, r7
 800cc24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cc28:	f7f3 fb2e 	bl	8000288 <__aeabi_dsub>
 800cc2c:	f805 6b01 	strb.w	r6, [r5], #1
 800cc30:	eba5 060b 	sub.w	r6, r5, fp
 800cc34:	45b1      	cmp	r9, r6
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	d139      	bne.n	800ccb0 <_dtoa_r+0x6c8>
 800cc3c:	f7f3 fb26 	bl	800028c <__adddf3>
 800cc40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc44:	4606      	mov	r6, r0
 800cc46:	460f      	mov	r7, r1
 800cc48:	f7f3 ff66 	bl	8000b18 <__aeabi_dcmpgt>
 800cc4c:	b9c8      	cbnz	r0, 800cc82 <_dtoa_r+0x69a>
 800cc4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc52:	4630      	mov	r0, r6
 800cc54:	4639      	mov	r1, r7
 800cc56:	f7f3 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc5a:	b110      	cbz	r0, 800cc62 <_dtoa_r+0x67a>
 800cc5c:	f018 0f01 	tst.w	r8, #1
 800cc60:	d10f      	bne.n	800cc82 <_dtoa_r+0x69a>
 800cc62:	9904      	ldr	r1, [sp, #16]
 800cc64:	4620      	mov	r0, r4
 800cc66:	f000 fc9f 	bl	800d5a8 <_Bfree>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc6e:	702b      	strb	r3, [r5, #0]
 800cc70:	f10a 0301 	add.w	r3, sl, #1
 800cc74:	6013      	str	r3, [r2, #0]
 800cc76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f000 8241 	beq.w	800d100 <_dtoa_r+0xb18>
 800cc7e:	601d      	str	r5, [r3, #0]
 800cc80:	e23e      	b.n	800d100 <_dtoa_r+0xb18>
 800cc82:	f8cd a020 	str.w	sl, [sp, #32]
 800cc86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cc8a:	2a39      	cmp	r2, #57	; 0x39
 800cc8c:	f105 33ff 	add.w	r3, r5, #4294967295
 800cc90:	d108      	bne.n	800cca4 <_dtoa_r+0x6bc>
 800cc92:	459b      	cmp	fp, r3
 800cc94:	d10a      	bne.n	800ccac <_dtoa_r+0x6c4>
 800cc96:	9b08      	ldr	r3, [sp, #32]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	9308      	str	r3, [sp, #32]
 800cc9c:	2330      	movs	r3, #48	; 0x30
 800cc9e:	f88b 3000 	strb.w	r3, [fp]
 800cca2:	465b      	mov	r3, fp
 800cca4:	781a      	ldrb	r2, [r3, #0]
 800cca6:	3201      	adds	r2, #1
 800cca8:	701a      	strb	r2, [r3, #0]
 800ccaa:	e78c      	b.n	800cbc6 <_dtoa_r+0x5de>
 800ccac:	461d      	mov	r5, r3
 800ccae:	e7ea      	b.n	800cc86 <_dtoa_r+0x69e>
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	4b9b      	ldr	r3, [pc, #620]	; (800cf20 <_dtoa_r+0x938>)
 800ccb4:	f7f3 fca0 	bl	80005f8 <__aeabi_dmul>
 800ccb8:	2200      	movs	r2, #0
 800ccba:	2300      	movs	r3, #0
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	460f      	mov	r7, r1
 800ccc0:	f7f3 ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d09a      	beq.n	800cbfe <_dtoa_r+0x616>
 800ccc8:	e7cb      	b.n	800cc62 <_dtoa_r+0x67a>
 800ccca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cccc:	2a00      	cmp	r2, #0
 800ccce:	f000 808b 	beq.w	800cde8 <_dtoa_r+0x800>
 800ccd2:	9a06      	ldr	r2, [sp, #24]
 800ccd4:	2a01      	cmp	r2, #1
 800ccd6:	dc6e      	bgt.n	800cdb6 <_dtoa_r+0x7ce>
 800ccd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ccda:	2a00      	cmp	r2, #0
 800ccdc:	d067      	beq.n	800cdae <_dtoa_r+0x7c6>
 800ccde:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cce2:	9f07      	ldr	r7, [sp, #28]
 800cce4:	9d05      	ldr	r5, [sp, #20]
 800cce6:	9a05      	ldr	r2, [sp, #20]
 800cce8:	2101      	movs	r1, #1
 800ccea:	441a      	add	r2, r3
 800ccec:	4620      	mov	r0, r4
 800ccee:	9205      	str	r2, [sp, #20]
 800ccf0:	4498      	add	r8, r3
 800ccf2:	f000 fcf9 	bl	800d6e8 <__i2b>
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	2d00      	cmp	r5, #0
 800ccfa:	dd0c      	ble.n	800cd16 <_dtoa_r+0x72e>
 800ccfc:	f1b8 0f00 	cmp.w	r8, #0
 800cd00:	dd09      	ble.n	800cd16 <_dtoa_r+0x72e>
 800cd02:	4545      	cmp	r5, r8
 800cd04:	9a05      	ldr	r2, [sp, #20]
 800cd06:	462b      	mov	r3, r5
 800cd08:	bfa8      	it	ge
 800cd0a:	4643      	movge	r3, r8
 800cd0c:	1ad2      	subs	r2, r2, r3
 800cd0e:	9205      	str	r2, [sp, #20]
 800cd10:	1aed      	subs	r5, r5, r3
 800cd12:	eba8 0803 	sub.w	r8, r8, r3
 800cd16:	9b07      	ldr	r3, [sp, #28]
 800cd18:	b1eb      	cbz	r3, 800cd56 <_dtoa_r+0x76e>
 800cd1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d067      	beq.n	800cdf0 <_dtoa_r+0x808>
 800cd20:	b18f      	cbz	r7, 800cd46 <_dtoa_r+0x75e>
 800cd22:	4631      	mov	r1, r6
 800cd24:	463a      	mov	r2, r7
 800cd26:	4620      	mov	r0, r4
 800cd28:	f000 fd7e 	bl	800d828 <__pow5mult>
 800cd2c:	9a04      	ldr	r2, [sp, #16]
 800cd2e:	4601      	mov	r1, r0
 800cd30:	4606      	mov	r6, r0
 800cd32:	4620      	mov	r0, r4
 800cd34:	f000 fce1 	bl	800d6fa <__multiply>
 800cd38:	9904      	ldr	r1, [sp, #16]
 800cd3a:	9008      	str	r0, [sp, #32]
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f000 fc33 	bl	800d5a8 <_Bfree>
 800cd42:	9b08      	ldr	r3, [sp, #32]
 800cd44:	9304      	str	r3, [sp, #16]
 800cd46:	9b07      	ldr	r3, [sp, #28]
 800cd48:	1bda      	subs	r2, r3, r7
 800cd4a:	d004      	beq.n	800cd56 <_dtoa_r+0x76e>
 800cd4c:	9904      	ldr	r1, [sp, #16]
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f000 fd6a 	bl	800d828 <__pow5mult>
 800cd54:	9004      	str	r0, [sp, #16]
 800cd56:	2101      	movs	r1, #1
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 fcc5 	bl	800d6e8 <__i2b>
 800cd5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd60:	4607      	mov	r7, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f000 81d0 	beq.w	800d108 <_dtoa_r+0xb20>
 800cd68:	461a      	mov	r2, r3
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f000 fd5b 	bl	800d828 <__pow5mult>
 800cd72:	9b06      	ldr	r3, [sp, #24]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	4607      	mov	r7, r0
 800cd78:	dc40      	bgt.n	800cdfc <_dtoa_r+0x814>
 800cd7a:	9b00      	ldr	r3, [sp, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d139      	bne.n	800cdf4 <_dtoa_r+0x80c>
 800cd80:	9b01      	ldr	r3, [sp, #4]
 800cd82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d136      	bne.n	800cdf8 <_dtoa_r+0x810>
 800cd8a:	9b01      	ldr	r3, [sp, #4]
 800cd8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd90:	0d1b      	lsrs	r3, r3, #20
 800cd92:	051b      	lsls	r3, r3, #20
 800cd94:	b12b      	cbz	r3, 800cda2 <_dtoa_r+0x7ba>
 800cd96:	9b05      	ldr	r3, [sp, #20]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	9305      	str	r3, [sp, #20]
 800cd9c:	f108 0801 	add.w	r8, r8, #1
 800cda0:	2301      	movs	r3, #1
 800cda2:	9307      	str	r3, [sp, #28]
 800cda4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d12a      	bne.n	800ce00 <_dtoa_r+0x818>
 800cdaa:	2001      	movs	r0, #1
 800cdac:	e030      	b.n	800ce10 <_dtoa_r+0x828>
 800cdae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cdb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cdb4:	e795      	b.n	800cce2 <_dtoa_r+0x6fa>
 800cdb6:	9b07      	ldr	r3, [sp, #28]
 800cdb8:	f109 37ff 	add.w	r7, r9, #4294967295
 800cdbc:	42bb      	cmp	r3, r7
 800cdbe:	bfbf      	itttt	lt
 800cdc0:	9b07      	ldrlt	r3, [sp, #28]
 800cdc2:	9707      	strlt	r7, [sp, #28]
 800cdc4:	1afa      	sublt	r2, r7, r3
 800cdc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cdc8:	bfbb      	ittet	lt
 800cdca:	189b      	addlt	r3, r3, r2
 800cdcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cdce:	1bdf      	subge	r7, r3, r7
 800cdd0:	2700      	movlt	r7, #0
 800cdd2:	f1b9 0f00 	cmp.w	r9, #0
 800cdd6:	bfb5      	itete	lt
 800cdd8:	9b05      	ldrlt	r3, [sp, #20]
 800cdda:	9d05      	ldrge	r5, [sp, #20]
 800cddc:	eba3 0509 	sublt.w	r5, r3, r9
 800cde0:	464b      	movge	r3, r9
 800cde2:	bfb8      	it	lt
 800cde4:	2300      	movlt	r3, #0
 800cde6:	e77e      	b.n	800cce6 <_dtoa_r+0x6fe>
 800cde8:	9f07      	ldr	r7, [sp, #28]
 800cdea:	9d05      	ldr	r5, [sp, #20]
 800cdec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cdee:	e783      	b.n	800ccf8 <_dtoa_r+0x710>
 800cdf0:	9a07      	ldr	r2, [sp, #28]
 800cdf2:	e7ab      	b.n	800cd4c <_dtoa_r+0x764>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	e7d4      	b.n	800cda2 <_dtoa_r+0x7ba>
 800cdf8:	9b00      	ldr	r3, [sp, #0]
 800cdfa:	e7d2      	b.n	800cda2 <_dtoa_r+0x7ba>
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	9307      	str	r3, [sp, #28]
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ce06:	6918      	ldr	r0, [r3, #16]
 800ce08:	f000 fc20 	bl	800d64c <__hi0bits>
 800ce0c:	f1c0 0020 	rsb	r0, r0, #32
 800ce10:	4440      	add	r0, r8
 800ce12:	f010 001f 	ands.w	r0, r0, #31
 800ce16:	d047      	beq.n	800cea8 <_dtoa_r+0x8c0>
 800ce18:	f1c0 0320 	rsb	r3, r0, #32
 800ce1c:	2b04      	cmp	r3, #4
 800ce1e:	dd3b      	ble.n	800ce98 <_dtoa_r+0x8b0>
 800ce20:	9b05      	ldr	r3, [sp, #20]
 800ce22:	f1c0 001c 	rsb	r0, r0, #28
 800ce26:	4403      	add	r3, r0
 800ce28:	9305      	str	r3, [sp, #20]
 800ce2a:	4405      	add	r5, r0
 800ce2c:	4480      	add	r8, r0
 800ce2e:	9b05      	ldr	r3, [sp, #20]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	dd05      	ble.n	800ce40 <_dtoa_r+0x858>
 800ce34:	461a      	mov	r2, r3
 800ce36:	9904      	ldr	r1, [sp, #16]
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f000 fd43 	bl	800d8c4 <__lshift>
 800ce3e:	9004      	str	r0, [sp, #16]
 800ce40:	f1b8 0f00 	cmp.w	r8, #0
 800ce44:	dd05      	ble.n	800ce52 <_dtoa_r+0x86a>
 800ce46:	4639      	mov	r1, r7
 800ce48:	4642      	mov	r2, r8
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f000 fd3a 	bl	800d8c4 <__lshift>
 800ce50:	4607      	mov	r7, r0
 800ce52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce54:	b353      	cbz	r3, 800ceac <_dtoa_r+0x8c4>
 800ce56:	4639      	mov	r1, r7
 800ce58:	9804      	ldr	r0, [sp, #16]
 800ce5a:	f000 fd87 	bl	800d96c <__mcmp>
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	da24      	bge.n	800ceac <_dtoa_r+0x8c4>
 800ce62:	2300      	movs	r3, #0
 800ce64:	220a      	movs	r2, #10
 800ce66:	9904      	ldr	r1, [sp, #16]
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f000 fbb4 	bl	800d5d6 <__multadd>
 800ce6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce70:	9004      	str	r0, [sp, #16]
 800ce72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f000 814d 	beq.w	800d116 <_dtoa_r+0xb2e>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4631      	mov	r1, r6
 800ce80:	220a      	movs	r2, #10
 800ce82:	4620      	mov	r0, r4
 800ce84:	f000 fba7 	bl	800d5d6 <__multadd>
 800ce88:	9b02      	ldr	r3, [sp, #8]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	dc4f      	bgt.n	800cf30 <_dtoa_r+0x948>
 800ce90:	9b06      	ldr	r3, [sp, #24]
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	dd4c      	ble.n	800cf30 <_dtoa_r+0x948>
 800ce96:	e011      	b.n	800cebc <_dtoa_r+0x8d4>
 800ce98:	d0c9      	beq.n	800ce2e <_dtoa_r+0x846>
 800ce9a:	9a05      	ldr	r2, [sp, #20]
 800ce9c:	331c      	adds	r3, #28
 800ce9e:	441a      	add	r2, r3
 800cea0:	9205      	str	r2, [sp, #20]
 800cea2:	441d      	add	r5, r3
 800cea4:	4498      	add	r8, r3
 800cea6:	e7c2      	b.n	800ce2e <_dtoa_r+0x846>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	e7f6      	b.n	800ce9a <_dtoa_r+0x8b2>
 800ceac:	f1b9 0f00 	cmp.w	r9, #0
 800ceb0:	dc38      	bgt.n	800cf24 <_dtoa_r+0x93c>
 800ceb2:	9b06      	ldr	r3, [sp, #24]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	dd35      	ble.n	800cf24 <_dtoa_r+0x93c>
 800ceb8:	f8cd 9008 	str.w	r9, [sp, #8]
 800cebc:	9b02      	ldr	r3, [sp, #8]
 800cebe:	b963      	cbnz	r3, 800ceda <_dtoa_r+0x8f2>
 800cec0:	4639      	mov	r1, r7
 800cec2:	2205      	movs	r2, #5
 800cec4:	4620      	mov	r0, r4
 800cec6:	f000 fb86 	bl	800d5d6 <__multadd>
 800ceca:	4601      	mov	r1, r0
 800cecc:	4607      	mov	r7, r0
 800cece:	9804      	ldr	r0, [sp, #16]
 800ced0:	f000 fd4c 	bl	800d96c <__mcmp>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	f73f adcc 	bgt.w	800ca72 <_dtoa_r+0x48a>
 800ceda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cedc:	465d      	mov	r5, fp
 800cede:	ea6f 0a03 	mvn.w	sl, r3
 800cee2:	f04f 0900 	mov.w	r9, #0
 800cee6:	4639      	mov	r1, r7
 800cee8:	4620      	mov	r0, r4
 800ceea:	f000 fb5d 	bl	800d5a8 <_Bfree>
 800ceee:	2e00      	cmp	r6, #0
 800cef0:	f43f aeb7 	beq.w	800cc62 <_dtoa_r+0x67a>
 800cef4:	f1b9 0f00 	cmp.w	r9, #0
 800cef8:	d005      	beq.n	800cf06 <_dtoa_r+0x91e>
 800cefa:	45b1      	cmp	r9, r6
 800cefc:	d003      	beq.n	800cf06 <_dtoa_r+0x91e>
 800cefe:	4649      	mov	r1, r9
 800cf00:	4620      	mov	r0, r4
 800cf02:	f000 fb51 	bl	800d5a8 <_Bfree>
 800cf06:	4631      	mov	r1, r6
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f000 fb4d 	bl	800d5a8 <_Bfree>
 800cf0e:	e6a8      	b.n	800cc62 <_dtoa_r+0x67a>
 800cf10:	2700      	movs	r7, #0
 800cf12:	463e      	mov	r6, r7
 800cf14:	e7e1      	b.n	800ceda <_dtoa_r+0x8f2>
 800cf16:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cf1a:	463e      	mov	r6, r7
 800cf1c:	e5a9      	b.n	800ca72 <_dtoa_r+0x48a>
 800cf1e:	bf00      	nop
 800cf20:	40240000 	.word	0x40240000
 800cf24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf26:	f8cd 9008 	str.w	r9, [sp, #8]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	f000 80fa 	beq.w	800d124 <_dtoa_r+0xb3c>
 800cf30:	2d00      	cmp	r5, #0
 800cf32:	dd05      	ble.n	800cf40 <_dtoa_r+0x958>
 800cf34:	4631      	mov	r1, r6
 800cf36:	462a      	mov	r2, r5
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f000 fcc3 	bl	800d8c4 <__lshift>
 800cf3e:	4606      	mov	r6, r0
 800cf40:	9b07      	ldr	r3, [sp, #28]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d04c      	beq.n	800cfe0 <_dtoa_r+0x9f8>
 800cf46:	6871      	ldr	r1, [r6, #4]
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f000 faf9 	bl	800d540 <_Balloc>
 800cf4e:	6932      	ldr	r2, [r6, #16]
 800cf50:	3202      	adds	r2, #2
 800cf52:	4605      	mov	r5, r0
 800cf54:	0092      	lsls	r2, r2, #2
 800cf56:	f106 010c 	add.w	r1, r6, #12
 800cf5a:	300c      	adds	r0, #12
 800cf5c:	f7fe fcda 	bl	800b914 <memcpy>
 800cf60:	2201      	movs	r2, #1
 800cf62:	4629      	mov	r1, r5
 800cf64:	4620      	mov	r0, r4
 800cf66:	f000 fcad 	bl	800d8c4 <__lshift>
 800cf6a:	9b00      	ldr	r3, [sp, #0]
 800cf6c:	f8cd b014 	str.w	fp, [sp, #20]
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	46b1      	mov	r9, r6
 800cf76:	9307      	str	r3, [sp, #28]
 800cf78:	4606      	mov	r6, r0
 800cf7a:	4639      	mov	r1, r7
 800cf7c:	9804      	ldr	r0, [sp, #16]
 800cf7e:	f7ff faa5 	bl	800c4cc <quorem>
 800cf82:	4649      	mov	r1, r9
 800cf84:	4605      	mov	r5, r0
 800cf86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cf8a:	9804      	ldr	r0, [sp, #16]
 800cf8c:	f000 fcee 	bl	800d96c <__mcmp>
 800cf90:	4632      	mov	r2, r6
 800cf92:	9000      	str	r0, [sp, #0]
 800cf94:	4639      	mov	r1, r7
 800cf96:	4620      	mov	r0, r4
 800cf98:	f000 fd02 	bl	800d9a0 <__mdiff>
 800cf9c:	68c3      	ldr	r3, [r0, #12]
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	bb03      	cbnz	r3, 800cfe4 <_dtoa_r+0x9fc>
 800cfa2:	4601      	mov	r1, r0
 800cfa4:	9008      	str	r0, [sp, #32]
 800cfa6:	9804      	ldr	r0, [sp, #16]
 800cfa8:	f000 fce0 	bl	800d96c <__mcmp>
 800cfac:	9a08      	ldr	r2, [sp, #32]
 800cfae:	4603      	mov	r3, r0
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	9308      	str	r3, [sp, #32]
 800cfb6:	f000 faf7 	bl	800d5a8 <_Bfree>
 800cfba:	9b08      	ldr	r3, [sp, #32]
 800cfbc:	b9a3      	cbnz	r3, 800cfe8 <_dtoa_r+0xa00>
 800cfbe:	9a06      	ldr	r2, [sp, #24]
 800cfc0:	b992      	cbnz	r2, 800cfe8 <_dtoa_r+0xa00>
 800cfc2:	9a07      	ldr	r2, [sp, #28]
 800cfc4:	b982      	cbnz	r2, 800cfe8 <_dtoa_r+0xa00>
 800cfc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cfca:	d029      	beq.n	800d020 <_dtoa_r+0xa38>
 800cfcc:	9b00      	ldr	r3, [sp, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	dd01      	ble.n	800cfd6 <_dtoa_r+0x9ee>
 800cfd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cfd6:	9b05      	ldr	r3, [sp, #20]
 800cfd8:	1c5d      	adds	r5, r3, #1
 800cfda:	f883 8000 	strb.w	r8, [r3]
 800cfde:	e782      	b.n	800cee6 <_dtoa_r+0x8fe>
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	e7c2      	b.n	800cf6a <_dtoa_r+0x982>
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e7e3      	b.n	800cfb0 <_dtoa_r+0x9c8>
 800cfe8:	9a00      	ldr	r2, [sp, #0]
 800cfea:	2a00      	cmp	r2, #0
 800cfec:	db04      	blt.n	800cff8 <_dtoa_r+0xa10>
 800cfee:	d125      	bne.n	800d03c <_dtoa_r+0xa54>
 800cff0:	9a06      	ldr	r2, [sp, #24]
 800cff2:	bb1a      	cbnz	r2, 800d03c <_dtoa_r+0xa54>
 800cff4:	9a07      	ldr	r2, [sp, #28]
 800cff6:	bb0a      	cbnz	r2, 800d03c <_dtoa_r+0xa54>
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	ddec      	ble.n	800cfd6 <_dtoa_r+0x9ee>
 800cffc:	2201      	movs	r2, #1
 800cffe:	9904      	ldr	r1, [sp, #16]
 800d000:	4620      	mov	r0, r4
 800d002:	f000 fc5f 	bl	800d8c4 <__lshift>
 800d006:	4639      	mov	r1, r7
 800d008:	9004      	str	r0, [sp, #16]
 800d00a:	f000 fcaf 	bl	800d96c <__mcmp>
 800d00e:	2800      	cmp	r0, #0
 800d010:	dc03      	bgt.n	800d01a <_dtoa_r+0xa32>
 800d012:	d1e0      	bne.n	800cfd6 <_dtoa_r+0x9ee>
 800d014:	f018 0f01 	tst.w	r8, #1
 800d018:	d0dd      	beq.n	800cfd6 <_dtoa_r+0x9ee>
 800d01a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d01e:	d1d8      	bne.n	800cfd2 <_dtoa_r+0x9ea>
 800d020:	9b05      	ldr	r3, [sp, #20]
 800d022:	9a05      	ldr	r2, [sp, #20]
 800d024:	1c5d      	adds	r5, r3, #1
 800d026:	2339      	movs	r3, #57	; 0x39
 800d028:	7013      	strb	r3, [r2, #0]
 800d02a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d02e:	2b39      	cmp	r3, #57	; 0x39
 800d030:	f105 32ff 	add.w	r2, r5, #4294967295
 800d034:	d04f      	beq.n	800d0d6 <_dtoa_r+0xaee>
 800d036:	3301      	adds	r3, #1
 800d038:	7013      	strb	r3, [r2, #0]
 800d03a:	e754      	b.n	800cee6 <_dtoa_r+0x8fe>
 800d03c:	9a05      	ldr	r2, [sp, #20]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	f102 0501 	add.w	r5, r2, #1
 800d044:	dd06      	ble.n	800d054 <_dtoa_r+0xa6c>
 800d046:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d04a:	d0e9      	beq.n	800d020 <_dtoa_r+0xa38>
 800d04c:	f108 0801 	add.w	r8, r8, #1
 800d050:	9b05      	ldr	r3, [sp, #20]
 800d052:	e7c2      	b.n	800cfda <_dtoa_r+0x9f2>
 800d054:	9a02      	ldr	r2, [sp, #8]
 800d056:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d05a:	eba5 030b 	sub.w	r3, r5, fp
 800d05e:	4293      	cmp	r3, r2
 800d060:	d021      	beq.n	800d0a6 <_dtoa_r+0xabe>
 800d062:	2300      	movs	r3, #0
 800d064:	220a      	movs	r2, #10
 800d066:	9904      	ldr	r1, [sp, #16]
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 fab4 	bl	800d5d6 <__multadd>
 800d06e:	45b1      	cmp	r9, r6
 800d070:	9004      	str	r0, [sp, #16]
 800d072:	f04f 0300 	mov.w	r3, #0
 800d076:	f04f 020a 	mov.w	r2, #10
 800d07a:	4649      	mov	r1, r9
 800d07c:	4620      	mov	r0, r4
 800d07e:	d105      	bne.n	800d08c <_dtoa_r+0xaa4>
 800d080:	f000 faa9 	bl	800d5d6 <__multadd>
 800d084:	4681      	mov	r9, r0
 800d086:	4606      	mov	r6, r0
 800d088:	9505      	str	r5, [sp, #20]
 800d08a:	e776      	b.n	800cf7a <_dtoa_r+0x992>
 800d08c:	f000 faa3 	bl	800d5d6 <__multadd>
 800d090:	4631      	mov	r1, r6
 800d092:	4681      	mov	r9, r0
 800d094:	2300      	movs	r3, #0
 800d096:	220a      	movs	r2, #10
 800d098:	4620      	mov	r0, r4
 800d09a:	f000 fa9c 	bl	800d5d6 <__multadd>
 800d09e:	4606      	mov	r6, r0
 800d0a0:	e7f2      	b.n	800d088 <_dtoa_r+0xaa0>
 800d0a2:	f04f 0900 	mov.w	r9, #0
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	9904      	ldr	r1, [sp, #16]
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f000 fc0a 	bl	800d8c4 <__lshift>
 800d0b0:	4639      	mov	r1, r7
 800d0b2:	9004      	str	r0, [sp, #16]
 800d0b4:	f000 fc5a 	bl	800d96c <__mcmp>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	dcb6      	bgt.n	800d02a <_dtoa_r+0xa42>
 800d0bc:	d102      	bne.n	800d0c4 <_dtoa_r+0xadc>
 800d0be:	f018 0f01 	tst.w	r8, #1
 800d0c2:	d1b2      	bne.n	800d02a <_dtoa_r+0xa42>
 800d0c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d0c8:	2b30      	cmp	r3, #48	; 0x30
 800d0ca:	f105 32ff 	add.w	r2, r5, #4294967295
 800d0ce:	f47f af0a 	bne.w	800cee6 <_dtoa_r+0x8fe>
 800d0d2:	4615      	mov	r5, r2
 800d0d4:	e7f6      	b.n	800d0c4 <_dtoa_r+0xadc>
 800d0d6:	4593      	cmp	fp, r2
 800d0d8:	d105      	bne.n	800d0e6 <_dtoa_r+0xafe>
 800d0da:	2331      	movs	r3, #49	; 0x31
 800d0dc:	f10a 0a01 	add.w	sl, sl, #1
 800d0e0:	f88b 3000 	strb.w	r3, [fp]
 800d0e4:	e6ff      	b.n	800cee6 <_dtoa_r+0x8fe>
 800d0e6:	4615      	mov	r5, r2
 800d0e8:	e79f      	b.n	800d02a <_dtoa_r+0xa42>
 800d0ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d150 <_dtoa_r+0xb68>
 800d0ee:	e007      	b.n	800d100 <_dtoa_r+0xb18>
 800d0f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d154 <_dtoa_r+0xb6c>
 800d0f6:	b11b      	cbz	r3, 800d100 <_dtoa_r+0xb18>
 800d0f8:	f10b 0308 	add.w	r3, fp, #8
 800d0fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d0fe:	6013      	str	r3, [r2, #0]
 800d100:	4658      	mov	r0, fp
 800d102:	b017      	add	sp, #92	; 0x5c
 800d104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d108:	9b06      	ldr	r3, [sp, #24]
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	f77f ae35 	ble.w	800cd7a <_dtoa_r+0x792>
 800d110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d112:	9307      	str	r3, [sp, #28]
 800d114:	e649      	b.n	800cdaa <_dtoa_r+0x7c2>
 800d116:	9b02      	ldr	r3, [sp, #8]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	dc03      	bgt.n	800d124 <_dtoa_r+0xb3c>
 800d11c:	9b06      	ldr	r3, [sp, #24]
 800d11e:	2b02      	cmp	r3, #2
 800d120:	f73f aecc 	bgt.w	800cebc <_dtoa_r+0x8d4>
 800d124:	465d      	mov	r5, fp
 800d126:	4639      	mov	r1, r7
 800d128:	9804      	ldr	r0, [sp, #16]
 800d12a:	f7ff f9cf 	bl	800c4cc <quorem>
 800d12e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d132:	f805 8b01 	strb.w	r8, [r5], #1
 800d136:	9a02      	ldr	r2, [sp, #8]
 800d138:	eba5 030b 	sub.w	r3, r5, fp
 800d13c:	429a      	cmp	r2, r3
 800d13e:	ddb0      	ble.n	800d0a2 <_dtoa_r+0xaba>
 800d140:	2300      	movs	r3, #0
 800d142:	220a      	movs	r2, #10
 800d144:	9904      	ldr	r1, [sp, #16]
 800d146:	4620      	mov	r0, r4
 800d148:	f000 fa45 	bl	800d5d6 <__multadd>
 800d14c:	9004      	str	r0, [sp, #16]
 800d14e:	e7ea      	b.n	800d126 <_dtoa_r+0xb3e>
 800d150:	0800e9f4 	.word	0x0800e9f4
 800d154:	0800ea18 	.word	0x0800ea18

0800d158 <__sflush_r>:
 800d158:	898a      	ldrh	r2, [r1, #12]
 800d15a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d15e:	4605      	mov	r5, r0
 800d160:	0710      	lsls	r0, r2, #28
 800d162:	460c      	mov	r4, r1
 800d164:	d458      	bmi.n	800d218 <__sflush_r+0xc0>
 800d166:	684b      	ldr	r3, [r1, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	dc05      	bgt.n	800d178 <__sflush_r+0x20>
 800d16c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d16e:	2b00      	cmp	r3, #0
 800d170:	dc02      	bgt.n	800d178 <__sflush_r+0x20>
 800d172:	2000      	movs	r0, #0
 800d174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d17a:	2e00      	cmp	r6, #0
 800d17c:	d0f9      	beq.n	800d172 <__sflush_r+0x1a>
 800d17e:	2300      	movs	r3, #0
 800d180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d184:	682f      	ldr	r7, [r5, #0]
 800d186:	6a21      	ldr	r1, [r4, #32]
 800d188:	602b      	str	r3, [r5, #0]
 800d18a:	d032      	beq.n	800d1f2 <__sflush_r+0x9a>
 800d18c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d18e:	89a3      	ldrh	r3, [r4, #12]
 800d190:	075a      	lsls	r2, r3, #29
 800d192:	d505      	bpl.n	800d1a0 <__sflush_r+0x48>
 800d194:	6863      	ldr	r3, [r4, #4]
 800d196:	1ac0      	subs	r0, r0, r3
 800d198:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d19a:	b10b      	cbz	r3, 800d1a0 <__sflush_r+0x48>
 800d19c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d19e:	1ac0      	subs	r0, r0, r3
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1a6:	6a21      	ldr	r1, [r4, #32]
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	47b0      	blx	r6
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	89a3      	ldrh	r3, [r4, #12]
 800d1b0:	d106      	bne.n	800d1c0 <__sflush_r+0x68>
 800d1b2:	6829      	ldr	r1, [r5, #0]
 800d1b4:	291d      	cmp	r1, #29
 800d1b6:	d848      	bhi.n	800d24a <__sflush_r+0xf2>
 800d1b8:	4a29      	ldr	r2, [pc, #164]	; (800d260 <__sflush_r+0x108>)
 800d1ba:	40ca      	lsrs	r2, r1
 800d1bc:	07d6      	lsls	r6, r2, #31
 800d1be:	d544      	bpl.n	800d24a <__sflush_r+0xf2>
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	6062      	str	r2, [r4, #4]
 800d1c4:	04d9      	lsls	r1, r3, #19
 800d1c6:	6922      	ldr	r2, [r4, #16]
 800d1c8:	6022      	str	r2, [r4, #0]
 800d1ca:	d504      	bpl.n	800d1d6 <__sflush_r+0x7e>
 800d1cc:	1c42      	adds	r2, r0, #1
 800d1ce:	d101      	bne.n	800d1d4 <__sflush_r+0x7c>
 800d1d0:	682b      	ldr	r3, [r5, #0]
 800d1d2:	b903      	cbnz	r3, 800d1d6 <__sflush_r+0x7e>
 800d1d4:	6560      	str	r0, [r4, #84]	; 0x54
 800d1d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1d8:	602f      	str	r7, [r5, #0]
 800d1da:	2900      	cmp	r1, #0
 800d1dc:	d0c9      	beq.n	800d172 <__sflush_r+0x1a>
 800d1de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1e2:	4299      	cmp	r1, r3
 800d1e4:	d002      	beq.n	800d1ec <__sflush_r+0x94>
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f000 fc94 	bl	800db14 <_free_r>
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	6360      	str	r0, [r4, #52]	; 0x34
 800d1f0:	e7c0      	b.n	800d174 <__sflush_r+0x1c>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	47b0      	blx	r6
 800d1f8:	1c41      	adds	r1, r0, #1
 800d1fa:	d1c8      	bne.n	800d18e <__sflush_r+0x36>
 800d1fc:	682b      	ldr	r3, [r5, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d0c5      	beq.n	800d18e <__sflush_r+0x36>
 800d202:	2b1d      	cmp	r3, #29
 800d204:	d001      	beq.n	800d20a <__sflush_r+0xb2>
 800d206:	2b16      	cmp	r3, #22
 800d208:	d101      	bne.n	800d20e <__sflush_r+0xb6>
 800d20a:	602f      	str	r7, [r5, #0]
 800d20c:	e7b1      	b.n	800d172 <__sflush_r+0x1a>
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d214:	81a3      	strh	r3, [r4, #12]
 800d216:	e7ad      	b.n	800d174 <__sflush_r+0x1c>
 800d218:	690f      	ldr	r7, [r1, #16]
 800d21a:	2f00      	cmp	r7, #0
 800d21c:	d0a9      	beq.n	800d172 <__sflush_r+0x1a>
 800d21e:	0793      	lsls	r3, r2, #30
 800d220:	680e      	ldr	r6, [r1, #0]
 800d222:	bf08      	it	eq
 800d224:	694b      	ldreq	r3, [r1, #20]
 800d226:	600f      	str	r7, [r1, #0]
 800d228:	bf18      	it	ne
 800d22a:	2300      	movne	r3, #0
 800d22c:	eba6 0807 	sub.w	r8, r6, r7
 800d230:	608b      	str	r3, [r1, #8]
 800d232:	f1b8 0f00 	cmp.w	r8, #0
 800d236:	dd9c      	ble.n	800d172 <__sflush_r+0x1a>
 800d238:	4643      	mov	r3, r8
 800d23a:	463a      	mov	r2, r7
 800d23c:	6a21      	ldr	r1, [r4, #32]
 800d23e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d240:	4628      	mov	r0, r5
 800d242:	47b0      	blx	r6
 800d244:	2800      	cmp	r0, #0
 800d246:	dc06      	bgt.n	800d256 <__sflush_r+0xfe>
 800d248:	89a3      	ldrh	r3, [r4, #12]
 800d24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d24e:	81a3      	strh	r3, [r4, #12]
 800d250:	f04f 30ff 	mov.w	r0, #4294967295
 800d254:	e78e      	b.n	800d174 <__sflush_r+0x1c>
 800d256:	4407      	add	r7, r0
 800d258:	eba8 0800 	sub.w	r8, r8, r0
 800d25c:	e7e9      	b.n	800d232 <__sflush_r+0xda>
 800d25e:	bf00      	nop
 800d260:	20400001 	.word	0x20400001

0800d264 <_fflush_r>:
 800d264:	b538      	push	{r3, r4, r5, lr}
 800d266:	690b      	ldr	r3, [r1, #16]
 800d268:	4605      	mov	r5, r0
 800d26a:	460c      	mov	r4, r1
 800d26c:	b1db      	cbz	r3, 800d2a6 <_fflush_r+0x42>
 800d26e:	b118      	cbz	r0, 800d278 <_fflush_r+0x14>
 800d270:	6983      	ldr	r3, [r0, #24]
 800d272:	b90b      	cbnz	r3, 800d278 <_fflush_r+0x14>
 800d274:	f000 f860 	bl	800d338 <__sinit>
 800d278:	4b0c      	ldr	r3, [pc, #48]	; (800d2ac <_fflush_r+0x48>)
 800d27a:	429c      	cmp	r4, r3
 800d27c:	d109      	bne.n	800d292 <_fflush_r+0x2e>
 800d27e:	686c      	ldr	r4, [r5, #4]
 800d280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d284:	b17b      	cbz	r3, 800d2a6 <_fflush_r+0x42>
 800d286:	4621      	mov	r1, r4
 800d288:	4628      	mov	r0, r5
 800d28a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d28e:	f7ff bf63 	b.w	800d158 <__sflush_r>
 800d292:	4b07      	ldr	r3, [pc, #28]	; (800d2b0 <_fflush_r+0x4c>)
 800d294:	429c      	cmp	r4, r3
 800d296:	d101      	bne.n	800d29c <_fflush_r+0x38>
 800d298:	68ac      	ldr	r4, [r5, #8]
 800d29a:	e7f1      	b.n	800d280 <_fflush_r+0x1c>
 800d29c:	4b05      	ldr	r3, [pc, #20]	; (800d2b4 <_fflush_r+0x50>)
 800d29e:	429c      	cmp	r4, r3
 800d2a0:	bf08      	it	eq
 800d2a2:	68ec      	ldreq	r4, [r5, #12]
 800d2a4:	e7ec      	b.n	800d280 <_fflush_r+0x1c>
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	bd38      	pop	{r3, r4, r5, pc}
 800d2aa:	bf00      	nop
 800d2ac:	0800ea48 	.word	0x0800ea48
 800d2b0:	0800ea68 	.word	0x0800ea68
 800d2b4:	0800ea28 	.word	0x0800ea28

0800d2b8 <std>:
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	b510      	push	{r4, lr}
 800d2bc:	4604      	mov	r4, r0
 800d2be:	e9c0 3300 	strd	r3, r3, [r0]
 800d2c2:	6083      	str	r3, [r0, #8]
 800d2c4:	8181      	strh	r1, [r0, #12]
 800d2c6:	6643      	str	r3, [r0, #100]	; 0x64
 800d2c8:	81c2      	strh	r2, [r0, #14]
 800d2ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2ce:	6183      	str	r3, [r0, #24]
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	2208      	movs	r2, #8
 800d2d4:	305c      	adds	r0, #92	; 0x5c
 800d2d6:	f7fe fb28 	bl	800b92a <memset>
 800d2da:	4b05      	ldr	r3, [pc, #20]	; (800d2f0 <std+0x38>)
 800d2dc:	6263      	str	r3, [r4, #36]	; 0x24
 800d2de:	4b05      	ldr	r3, [pc, #20]	; (800d2f4 <std+0x3c>)
 800d2e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2e2:	4b05      	ldr	r3, [pc, #20]	; (800d2f8 <std+0x40>)
 800d2e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d2e6:	4b05      	ldr	r3, [pc, #20]	; (800d2fc <std+0x44>)
 800d2e8:	6224      	str	r4, [r4, #32]
 800d2ea:	6323      	str	r3, [r4, #48]	; 0x30
 800d2ec:	bd10      	pop	{r4, pc}
 800d2ee:	bf00      	nop
 800d2f0:	0800e1a9 	.word	0x0800e1a9
 800d2f4:	0800e1cb 	.word	0x0800e1cb
 800d2f8:	0800e203 	.word	0x0800e203
 800d2fc:	0800e227 	.word	0x0800e227

0800d300 <_cleanup_r>:
 800d300:	4901      	ldr	r1, [pc, #4]	; (800d308 <_cleanup_r+0x8>)
 800d302:	f000 b885 	b.w	800d410 <_fwalk_reent>
 800d306:	bf00      	nop
 800d308:	0800d265 	.word	0x0800d265

0800d30c <__sfmoreglue>:
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	1e4a      	subs	r2, r1, #1
 800d310:	2568      	movs	r5, #104	; 0x68
 800d312:	4355      	muls	r5, r2
 800d314:	460e      	mov	r6, r1
 800d316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d31a:	f000 fc49 	bl	800dbb0 <_malloc_r>
 800d31e:	4604      	mov	r4, r0
 800d320:	b140      	cbz	r0, 800d334 <__sfmoreglue+0x28>
 800d322:	2100      	movs	r1, #0
 800d324:	e9c0 1600 	strd	r1, r6, [r0]
 800d328:	300c      	adds	r0, #12
 800d32a:	60a0      	str	r0, [r4, #8]
 800d32c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d330:	f7fe fafb 	bl	800b92a <memset>
 800d334:	4620      	mov	r0, r4
 800d336:	bd70      	pop	{r4, r5, r6, pc}

0800d338 <__sinit>:
 800d338:	6983      	ldr	r3, [r0, #24]
 800d33a:	b510      	push	{r4, lr}
 800d33c:	4604      	mov	r4, r0
 800d33e:	bb33      	cbnz	r3, 800d38e <__sinit+0x56>
 800d340:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d344:	6503      	str	r3, [r0, #80]	; 0x50
 800d346:	4b12      	ldr	r3, [pc, #72]	; (800d390 <__sinit+0x58>)
 800d348:	4a12      	ldr	r2, [pc, #72]	; (800d394 <__sinit+0x5c>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6282      	str	r2, [r0, #40]	; 0x28
 800d34e:	4298      	cmp	r0, r3
 800d350:	bf04      	itt	eq
 800d352:	2301      	moveq	r3, #1
 800d354:	6183      	streq	r3, [r0, #24]
 800d356:	f000 f81f 	bl	800d398 <__sfp>
 800d35a:	6060      	str	r0, [r4, #4]
 800d35c:	4620      	mov	r0, r4
 800d35e:	f000 f81b 	bl	800d398 <__sfp>
 800d362:	60a0      	str	r0, [r4, #8]
 800d364:	4620      	mov	r0, r4
 800d366:	f000 f817 	bl	800d398 <__sfp>
 800d36a:	2200      	movs	r2, #0
 800d36c:	60e0      	str	r0, [r4, #12]
 800d36e:	2104      	movs	r1, #4
 800d370:	6860      	ldr	r0, [r4, #4]
 800d372:	f7ff ffa1 	bl	800d2b8 <std>
 800d376:	2201      	movs	r2, #1
 800d378:	2109      	movs	r1, #9
 800d37a:	68a0      	ldr	r0, [r4, #8]
 800d37c:	f7ff ff9c 	bl	800d2b8 <std>
 800d380:	2202      	movs	r2, #2
 800d382:	2112      	movs	r1, #18
 800d384:	68e0      	ldr	r0, [r4, #12]
 800d386:	f7ff ff97 	bl	800d2b8 <std>
 800d38a:	2301      	movs	r3, #1
 800d38c:	61a3      	str	r3, [r4, #24]
 800d38e:	bd10      	pop	{r4, pc}
 800d390:	0800e9e0 	.word	0x0800e9e0
 800d394:	0800d301 	.word	0x0800d301

0800d398 <__sfp>:
 800d398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39a:	4b1b      	ldr	r3, [pc, #108]	; (800d408 <__sfp+0x70>)
 800d39c:	681e      	ldr	r6, [r3, #0]
 800d39e:	69b3      	ldr	r3, [r6, #24]
 800d3a0:	4607      	mov	r7, r0
 800d3a2:	b913      	cbnz	r3, 800d3aa <__sfp+0x12>
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	f7ff ffc7 	bl	800d338 <__sinit>
 800d3aa:	3648      	adds	r6, #72	; 0x48
 800d3ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	d503      	bpl.n	800d3bc <__sfp+0x24>
 800d3b4:	6833      	ldr	r3, [r6, #0]
 800d3b6:	b133      	cbz	r3, 800d3c6 <__sfp+0x2e>
 800d3b8:	6836      	ldr	r6, [r6, #0]
 800d3ba:	e7f7      	b.n	800d3ac <__sfp+0x14>
 800d3bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d3c0:	b16d      	cbz	r5, 800d3de <__sfp+0x46>
 800d3c2:	3468      	adds	r4, #104	; 0x68
 800d3c4:	e7f4      	b.n	800d3b0 <__sfp+0x18>
 800d3c6:	2104      	movs	r1, #4
 800d3c8:	4638      	mov	r0, r7
 800d3ca:	f7ff ff9f 	bl	800d30c <__sfmoreglue>
 800d3ce:	6030      	str	r0, [r6, #0]
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d1f1      	bne.n	800d3b8 <__sfp+0x20>
 800d3d4:	230c      	movs	r3, #12
 800d3d6:	603b      	str	r3, [r7, #0]
 800d3d8:	4604      	mov	r4, r0
 800d3da:	4620      	mov	r0, r4
 800d3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3de:	4b0b      	ldr	r3, [pc, #44]	; (800d40c <__sfp+0x74>)
 800d3e0:	6665      	str	r5, [r4, #100]	; 0x64
 800d3e2:	e9c4 5500 	strd	r5, r5, [r4]
 800d3e6:	60a5      	str	r5, [r4, #8]
 800d3e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d3ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d3f0:	2208      	movs	r2, #8
 800d3f2:	4629      	mov	r1, r5
 800d3f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d3f8:	f7fe fa97 	bl	800b92a <memset>
 800d3fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d404:	e7e9      	b.n	800d3da <__sfp+0x42>
 800d406:	bf00      	nop
 800d408:	0800e9e0 	.word	0x0800e9e0
 800d40c:	ffff0001 	.word	0xffff0001

0800d410 <_fwalk_reent>:
 800d410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d414:	4680      	mov	r8, r0
 800d416:	4689      	mov	r9, r1
 800d418:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d41c:	2600      	movs	r6, #0
 800d41e:	b914      	cbnz	r4, 800d426 <_fwalk_reent+0x16>
 800d420:	4630      	mov	r0, r6
 800d422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d426:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d42a:	3f01      	subs	r7, #1
 800d42c:	d501      	bpl.n	800d432 <_fwalk_reent+0x22>
 800d42e:	6824      	ldr	r4, [r4, #0]
 800d430:	e7f5      	b.n	800d41e <_fwalk_reent+0xe>
 800d432:	89ab      	ldrh	r3, [r5, #12]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d907      	bls.n	800d448 <_fwalk_reent+0x38>
 800d438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d43c:	3301      	adds	r3, #1
 800d43e:	d003      	beq.n	800d448 <_fwalk_reent+0x38>
 800d440:	4629      	mov	r1, r5
 800d442:	4640      	mov	r0, r8
 800d444:	47c8      	blx	r9
 800d446:	4306      	orrs	r6, r0
 800d448:	3568      	adds	r5, #104	; 0x68
 800d44a:	e7ee      	b.n	800d42a <_fwalk_reent+0x1a>

0800d44c <_localeconv_r>:
 800d44c:	4b04      	ldr	r3, [pc, #16]	; (800d460 <_localeconv_r+0x14>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	6a18      	ldr	r0, [r3, #32]
 800d452:	4b04      	ldr	r3, [pc, #16]	; (800d464 <_localeconv_r+0x18>)
 800d454:	2800      	cmp	r0, #0
 800d456:	bf08      	it	eq
 800d458:	4618      	moveq	r0, r3
 800d45a:	30f0      	adds	r0, #240	; 0xf0
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	20000084 	.word	0x20000084
 800d464:	200000e8 	.word	0x200000e8

0800d468 <__swhatbuf_r>:
 800d468:	b570      	push	{r4, r5, r6, lr}
 800d46a:	460e      	mov	r6, r1
 800d46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d470:	2900      	cmp	r1, #0
 800d472:	b096      	sub	sp, #88	; 0x58
 800d474:	4614      	mov	r4, r2
 800d476:	461d      	mov	r5, r3
 800d478:	da07      	bge.n	800d48a <__swhatbuf_r+0x22>
 800d47a:	2300      	movs	r3, #0
 800d47c:	602b      	str	r3, [r5, #0]
 800d47e:	89b3      	ldrh	r3, [r6, #12]
 800d480:	061a      	lsls	r2, r3, #24
 800d482:	d410      	bmi.n	800d4a6 <__swhatbuf_r+0x3e>
 800d484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d488:	e00e      	b.n	800d4a8 <__swhatbuf_r+0x40>
 800d48a:	466a      	mov	r2, sp
 800d48c:	f000 fef2 	bl	800e274 <_fstat_r>
 800d490:	2800      	cmp	r0, #0
 800d492:	dbf2      	blt.n	800d47a <__swhatbuf_r+0x12>
 800d494:	9a01      	ldr	r2, [sp, #4]
 800d496:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d49a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d49e:	425a      	negs	r2, r3
 800d4a0:	415a      	adcs	r2, r3
 800d4a2:	602a      	str	r2, [r5, #0]
 800d4a4:	e7ee      	b.n	800d484 <__swhatbuf_r+0x1c>
 800d4a6:	2340      	movs	r3, #64	; 0x40
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	6023      	str	r3, [r4, #0]
 800d4ac:	b016      	add	sp, #88	; 0x58
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}

0800d4b0 <__smakebuf_r>:
 800d4b0:	898b      	ldrh	r3, [r1, #12]
 800d4b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4b4:	079d      	lsls	r5, r3, #30
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	460c      	mov	r4, r1
 800d4ba:	d507      	bpl.n	800d4cc <__smakebuf_r+0x1c>
 800d4bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	6123      	str	r3, [r4, #16]
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	6163      	str	r3, [r4, #20]
 800d4c8:	b002      	add	sp, #8
 800d4ca:	bd70      	pop	{r4, r5, r6, pc}
 800d4cc:	ab01      	add	r3, sp, #4
 800d4ce:	466a      	mov	r2, sp
 800d4d0:	f7ff ffca 	bl	800d468 <__swhatbuf_r>
 800d4d4:	9900      	ldr	r1, [sp, #0]
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	4630      	mov	r0, r6
 800d4da:	f000 fb69 	bl	800dbb0 <_malloc_r>
 800d4de:	b948      	cbnz	r0, 800d4f4 <__smakebuf_r+0x44>
 800d4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4e4:	059a      	lsls	r2, r3, #22
 800d4e6:	d4ef      	bmi.n	800d4c8 <__smakebuf_r+0x18>
 800d4e8:	f023 0303 	bic.w	r3, r3, #3
 800d4ec:	f043 0302 	orr.w	r3, r3, #2
 800d4f0:	81a3      	strh	r3, [r4, #12]
 800d4f2:	e7e3      	b.n	800d4bc <__smakebuf_r+0xc>
 800d4f4:	4b0d      	ldr	r3, [pc, #52]	; (800d52c <__smakebuf_r+0x7c>)
 800d4f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d4f8:	89a3      	ldrh	r3, [r4, #12]
 800d4fa:	6020      	str	r0, [r4, #0]
 800d4fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d500:	81a3      	strh	r3, [r4, #12]
 800d502:	9b00      	ldr	r3, [sp, #0]
 800d504:	6163      	str	r3, [r4, #20]
 800d506:	9b01      	ldr	r3, [sp, #4]
 800d508:	6120      	str	r0, [r4, #16]
 800d50a:	b15b      	cbz	r3, 800d524 <__smakebuf_r+0x74>
 800d50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d510:	4630      	mov	r0, r6
 800d512:	f000 fec1 	bl	800e298 <_isatty_r>
 800d516:	b128      	cbz	r0, 800d524 <__smakebuf_r+0x74>
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	f023 0303 	bic.w	r3, r3, #3
 800d51e:	f043 0301 	orr.w	r3, r3, #1
 800d522:	81a3      	strh	r3, [r4, #12]
 800d524:	89a3      	ldrh	r3, [r4, #12]
 800d526:	431d      	orrs	r5, r3
 800d528:	81a5      	strh	r5, [r4, #12]
 800d52a:	e7cd      	b.n	800d4c8 <__smakebuf_r+0x18>
 800d52c:	0800d301 	.word	0x0800d301

0800d530 <malloc>:
 800d530:	4b02      	ldr	r3, [pc, #8]	; (800d53c <malloc+0xc>)
 800d532:	4601      	mov	r1, r0
 800d534:	6818      	ldr	r0, [r3, #0]
 800d536:	f000 bb3b 	b.w	800dbb0 <_malloc_r>
 800d53a:	bf00      	nop
 800d53c:	20000084 	.word	0x20000084

0800d540 <_Balloc>:
 800d540:	b570      	push	{r4, r5, r6, lr}
 800d542:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d544:	4604      	mov	r4, r0
 800d546:	460e      	mov	r6, r1
 800d548:	b93d      	cbnz	r5, 800d55a <_Balloc+0x1a>
 800d54a:	2010      	movs	r0, #16
 800d54c:	f7ff fff0 	bl	800d530 <malloc>
 800d550:	6260      	str	r0, [r4, #36]	; 0x24
 800d552:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d556:	6005      	str	r5, [r0, #0]
 800d558:	60c5      	str	r5, [r0, #12]
 800d55a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d55c:	68eb      	ldr	r3, [r5, #12]
 800d55e:	b183      	cbz	r3, 800d582 <_Balloc+0x42>
 800d560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d568:	b9b8      	cbnz	r0, 800d59a <_Balloc+0x5a>
 800d56a:	2101      	movs	r1, #1
 800d56c:	fa01 f506 	lsl.w	r5, r1, r6
 800d570:	1d6a      	adds	r2, r5, #5
 800d572:	0092      	lsls	r2, r2, #2
 800d574:	4620      	mov	r0, r4
 800d576:	f000 fabf 	bl	800daf8 <_calloc_r>
 800d57a:	b160      	cbz	r0, 800d596 <_Balloc+0x56>
 800d57c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d580:	e00e      	b.n	800d5a0 <_Balloc+0x60>
 800d582:	2221      	movs	r2, #33	; 0x21
 800d584:	2104      	movs	r1, #4
 800d586:	4620      	mov	r0, r4
 800d588:	f000 fab6 	bl	800daf8 <_calloc_r>
 800d58c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d58e:	60e8      	str	r0, [r5, #12]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1e4      	bne.n	800d560 <_Balloc+0x20>
 800d596:	2000      	movs	r0, #0
 800d598:	bd70      	pop	{r4, r5, r6, pc}
 800d59a:	6802      	ldr	r2, [r0, #0]
 800d59c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5a6:	e7f7      	b.n	800d598 <_Balloc+0x58>

0800d5a8 <_Bfree>:
 800d5a8:	b570      	push	{r4, r5, r6, lr}
 800d5aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d5ac:	4606      	mov	r6, r0
 800d5ae:	460d      	mov	r5, r1
 800d5b0:	b93c      	cbnz	r4, 800d5c2 <_Bfree+0x1a>
 800d5b2:	2010      	movs	r0, #16
 800d5b4:	f7ff ffbc 	bl	800d530 <malloc>
 800d5b8:	6270      	str	r0, [r6, #36]	; 0x24
 800d5ba:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5be:	6004      	str	r4, [r0, #0]
 800d5c0:	60c4      	str	r4, [r0, #12]
 800d5c2:	b13d      	cbz	r5, 800d5d4 <_Bfree+0x2c>
 800d5c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d5c6:	686a      	ldr	r2, [r5, #4]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5ce:	6029      	str	r1, [r5, #0]
 800d5d0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d5d4:	bd70      	pop	{r4, r5, r6, pc}

0800d5d6 <__multadd>:
 800d5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5da:	690d      	ldr	r5, [r1, #16]
 800d5dc:	461f      	mov	r7, r3
 800d5de:	4606      	mov	r6, r0
 800d5e0:	460c      	mov	r4, r1
 800d5e2:	f101 0c14 	add.w	ip, r1, #20
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f8dc 0000 	ldr.w	r0, [ip]
 800d5ec:	b281      	uxth	r1, r0
 800d5ee:	fb02 7101 	mla	r1, r2, r1, r7
 800d5f2:	0c0f      	lsrs	r7, r1, #16
 800d5f4:	0c00      	lsrs	r0, r0, #16
 800d5f6:	fb02 7000 	mla	r0, r2, r0, r7
 800d5fa:	b289      	uxth	r1, r1
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d602:	429d      	cmp	r5, r3
 800d604:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d608:	f84c 1b04 	str.w	r1, [ip], #4
 800d60c:	dcec      	bgt.n	800d5e8 <__multadd+0x12>
 800d60e:	b1d7      	cbz	r7, 800d646 <__multadd+0x70>
 800d610:	68a3      	ldr	r3, [r4, #8]
 800d612:	42ab      	cmp	r3, r5
 800d614:	dc12      	bgt.n	800d63c <__multadd+0x66>
 800d616:	6861      	ldr	r1, [r4, #4]
 800d618:	4630      	mov	r0, r6
 800d61a:	3101      	adds	r1, #1
 800d61c:	f7ff ff90 	bl	800d540 <_Balloc>
 800d620:	6922      	ldr	r2, [r4, #16]
 800d622:	3202      	adds	r2, #2
 800d624:	f104 010c 	add.w	r1, r4, #12
 800d628:	4680      	mov	r8, r0
 800d62a:	0092      	lsls	r2, r2, #2
 800d62c:	300c      	adds	r0, #12
 800d62e:	f7fe f971 	bl	800b914 <memcpy>
 800d632:	4621      	mov	r1, r4
 800d634:	4630      	mov	r0, r6
 800d636:	f7ff ffb7 	bl	800d5a8 <_Bfree>
 800d63a:	4644      	mov	r4, r8
 800d63c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d640:	3501      	adds	r5, #1
 800d642:	615f      	str	r7, [r3, #20]
 800d644:	6125      	str	r5, [r4, #16]
 800d646:	4620      	mov	r0, r4
 800d648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d64c <__hi0bits>:
 800d64c:	0c02      	lsrs	r2, r0, #16
 800d64e:	0412      	lsls	r2, r2, #16
 800d650:	4603      	mov	r3, r0
 800d652:	b9b2      	cbnz	r2, 800d682 <__hi0bits+0x36>
 800d654:	0403      	lsls	r3, r0, #16
 800d656:	2010      	movs	r0, #16
 800d658:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d65c:	bf04      	itt	eq
 800d65e:	021b      	lsleq	r3, r3, #8
 800d660:	3008      	addeq	r0, #8
 800d662:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d666:	bf04      	itt	eq
 800d668:	011b      	lsleq	r3, r3, #4
 800d66a:	3004      	addeq	r0, #4
 800d66c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d670:	bf04      	itt	eq
 800d672:	009b      	lsleq	r3, r3, #2
 800d674:	3002      	addeq	r0, #2
 800d676:	2b00      	cmp	r3, #0
 800d678:	db06      	blt.n	800d688 <__hi0bits+0x3c>
 800d67a:	005b      	lsls	r3, r3, #1
 800d67c:	d503      	bpl.n	800d686 <__hi0bits+0x3a>
 800d67e:	3001      	adds	r0, #1
 800d680:	4770      	bx	lr
 800d682:	2000      	movs	r0, #0
 800d684:	e7e8      	b.n	800d658 <__hi0bits+0xc>
 800d686:	2020      	movs	r0, #32
 800d688:	4770      	bx	lr

0800d68a <__lo0bits>:
 800d68a:	6803      	ldr	r3, [r0, #0]
 800d68c:	f013 0207 	ands.w	r2, r3, #7
 800d690:	4601      	mov	r1, r0
 800d692:	d00b      	beq.n	800d6ac <__lo0bits+0x22>
 800d694:	07da      	lsls	r2, r3, #31
 800d696:	d423      	bmi.n	800d6e0 <__lo0bits+0x56>
 800d698:	0798      	lsls	r0, r3, #30
 800d69a:	bf49      	itett	mi
 800d69c:	085b      	lsrmi	r3, r3, #1
 800d69e:	089b      	lsrpl	r3, r3, #2
 800d6a0:	2001      	movmi	r0, #1
 800d6a2:	600b      	strmi	r3, [r1, #0]
 800d6a4:	bf5c      	itt	pl
 800d6a6:	600b      	strpl	r3, [r1, #0]
 800d6a8:	2002      	movpl	r0, #2
 800d6aa:	4770      	bx	lr
 800d6ac:	b298      	uxth	r0, r3
 800d6ae:	b9a8      	cbnz	r0, 800d6dc <__lo0bits+0x52>
 800d6b0:	0c1b      	lsrs	r3, r3, #16
 800d6b2:	2010      	movs	r0, #16
 800d6b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d6b8:	bf04      	itt	eq
 800d6ba:	0a1b      	lsreq	r3, r3, #8
 800d6bc:	3008      	addeq	r0, #8
 800d6be:	071a      	lsls	r2, r3, #28
 800d6c0:	bf04      	itt	eq
 800d6c2:	091b      	lsreq	r3, r3, #4
 800d6c4:	3004      	addeq	r0, #4
 800d6c6:	079a      	lsls	r2, r3, #30
 800d6c8:	bf04      	itt	eq
 800d6ca:	089b      	lsreq	r3, r3, #2
 800d6cc:	3002      	addeq	r0, #2
 800d6ce:	07da      	lsls	r2, r3, #31
 800d6d0:	d402      	bmi.n	800d6d8 <__lo0bits+0x4e>
 800d6d2:	085b      	lsrs	r3, r3, #1
 800d6d4:	d006      	beq.n	800d6e4 <__lo0bits+0x5a>
 800d6d6:	3001      	adds	r0, #1
 800d6d8:	600b      	str	r3, [r1, #0]
 800d6da:	4770      	bx	lr
 800d6dc:	4610      	mov	r0, r2
 800d6de:	e7e9      	b.n	800d6b4 <__lo0bits+0x2a>
 800d6e0:	2000      	movs	r0, #0
 800d6e2:	4770      	bx	lr
 800d6e4:	2020      	movs	r0, #32
 800d6e6:	4770      	bx	lr

0800d6e8 <__i2b>:
 800d6e8:	b510      	push	{r4, lr}
 800d6ea:	460c      	mov	r4, r1
 800d6ec:	2101      	movs	r1, #1
 800d6ee:	f7ff ff27 	bl	800d540 <_Balloc>
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	6144      	str	r4, [r0, #20]
 800d6f6:	6102      	str	r2, [r0, #16]
 800d6f8:	bd10      	pop	{r4, pc}

0800d6fa <__multiply>:
 800d6fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fe:	4614      	mov	r4, r2
 800d700:	690a      	ldr	r2, [r1, #16]
 800d702:	6923      	ldr	r3, [r4, #16]
 800d704:	429a      	cmp	r2, r3
 800d706:	bfb8      	it	lt
 800d708:	460b      	movlt	r3, r1
 800d70a:	4688      	mov	r8, r1
 800d70c:	bfbc      	itt	lt
 800d70e:	46a0      	movlt	r8, r4
 800d710:	461c      	movlt	r4, r3
 800d712:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d716:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d71a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d71e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d722:	eb07 0609 	add.w	r6, r7, r9
 800d726:	42b3      	cmp	r3, r6
 800d728:	bfb8      	it	lt
 800d72a:	3101      	addlt	r1, #1
 800d72c:	f7ff ff08 	bl	800d540 <_Balloc>
 800d730:	f100 0514 	add.w	r5, r0, #20
 800d734:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d738:	462b      	mov	r3, r5
 800d73a:	2200      	movs	r2, #0
 800d73c:	4573      	cmp	r3, lr
 800d73e:	d316      	bcc.n	800d76e <__multiply+0x74>
 800d740:	f104 0214 	add.w	r2, r4, #20
 800d744:	f108 0114 	add.w	r1, r8, #20
 800d748:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d74c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d750:	9300      	str	r3, [sp, #0]
 800d752:	9b00      	ldr	r3, [sp, #0]
 800d754:	9201      	str	r2, [sp, #4]
 800d756:	4293      	cmp	r3, r2
 800d758:	d80c      	bhi.n	800d774 <__multiply+0x7a>
 800d75a:	2e00      	cmp	r6, #0
 800d75c:	dd03      	ble.n	800d766 <__multiply+0x6c>
 800d75e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d762:	2b00      	cmp	r3, #0
 800d764:	d05d      	beq.n	800d822 <__multiply+0x128>
 800d766:	6106      	str	r6, [r0, #16]
 800d768:	b003      	add	sp, #12
 800d76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76e:	f843 2b04 	str.w	r2, [r3], #4
 800d772:	e7e3      	b.n	800d73c <__multiply+0x42>
 800d774:	f8b2 b000 	ldrh.w	fp, [r2]
 800d778:	f1bb 0f00 	cmp.w	fp, #0
 800d77c:	d023      	beq.n	800d7c6 <__multiply+0xcc>
 800d77e:	4689      	mov	r9, r1
 800d780:	46ac      	mov	ip, r5
 800d782:	f04f 0800 	mov.w	r8, #0
 800d786:	f859 4b04 	ldr.w	r4, [r9], #4
 800d78a:	f8dc a000 	ldr.w	sl, [ip]
 800d78e:	b2a3      	uxth	r3, r4
 800d790:	fa1f fa8a 	uxth.w	sl, sl
 800d794:	fb0b a303 	mla	r3, fp, r3, sl
 800d798:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d79c:	f8dc 4000 	ldr.w	r4, [ip]
 800d7a0:	4443      	add	r3, r8
 800d7a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d7a6:	fb0b 840a 	mla	r4, fp, sl, r8
 800d7aa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d7ae:	46e2      	mov	sl, ip
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d7b6:	454f      	cmp	r7, r9
 800d7b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d7bc:	f84a 3b04 	str.w	r3, [sl], #4
 800d7c0:	d82b      	bhi.n	800d81a <__multiply+0x120>
 800d7c2:	f8cc 8004 	str.w	r8, [ip, #4]
 800d7c6:	9b01      	ldr	r3, [sp, #4]
 800d7c8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d7cc:	3204      	adds	r2, #4
 800d7ce:	f1ba 0f00 	cmp.w	sl, #0
 800d7d2:	d020      	beq.n	800d816 <__multiply+0x11c>
 800d7d4:	682b      	ldr	r3, [r5, #0]
 800d7d6:	4689      	mov	r9, r1
 800d7d8:	46a8      	mov	r8, r5
 800d7da:	f04f 0b00 	mov.w	fp, #0
 800d7de:	f8b9 c000 	ldrh.w	ip, [r9]
 800d7e2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d7e6:	fb0a 440c 	mla	r4, sl, ip, r4
 800d7ea:	445c      	add	r4, fp
 800d7ec:	46c4      	mov	ip, r8
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d7f4:	f84c 3b04 	str.w	r3, [ip], #4
 800d7f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d7fc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d800:	0c1b      	lsrs	r3, r3, #16
 800d802:	fb0a b303 	mla	r3, sl, r3, fp
 800d806:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d80a:	454f      	cmp	r7, r9
 800d80c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d810:	d805      	bhi.n	800d81e <__multiply+0x124>
 800d812:	f8c8 3004 	str.w	r3, [r8, #4]
 800d816:	3504      	adds	r5, #4
 800d818:	e79b      	b.n	800d752 <__multiply+0x58>
 800d81a:	46d4      	mov	ip, sl
 800d81c:	e7b3      	b.n	800d786 <__multiply+0x8c>
 800d81e:	46e0      	mov	r8, ip
 800d820:	e7dd      	b.n	800d7de <__multiply+0xe4>
 800d822:	3e01      	subs	r6, #1
 800d824:	e799      	b.n	800d75a <__multiply+0x60>
	...

0800d828 <__pow5mult>:
 800d828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d82c:	4615      	mov	r5, r2
 800d82e:	f012 0203 	ands.w	r2, r2, #3
 800d832:	4606      	mov	r6, r0
 800d834:	460f      	mov	r7, r1
 800d836:	d007      	beq.n	800d848 <__pow5mult+0x20>
 800d838:	3a01      	subs	r2, #1
 800d83a:	4c21      	ldr	r4, [pc, #132]	; (800d8c0 <__pow5mult+0x98>)
 800d83c:	2300      	movs	r3, #0
 800d83e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d842:	f7ff fec8 	bl	800d5d6 <__multadd>
 800d846:	4607      	mov	r7, r0
 800d848:	10ad      	asrs	r5, r5, #2
 800d84a:	d035      	beq.n	800d8b8 <__pow5mult+0x90>
 800d84c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d84e:	b93c      	cbnz	r4, 800d860 <__pow5mult+0x38>
 800d850:	2010      	movs	r0, #16
 800d852:	f7ff fe6d 	bl	800d530 <malloc>
 800d856:	6270      	str	r0, [r6, #36]	; 0x24
 800d858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d85c:	6004      	str	r4, [r0, #0]
 800d85e:	60c4      	str	r4, [r0, #12]
 800d860:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d868:	b94c      	cbnz	r4, 800d87e <__pow5mult+0x56>
 800d86a:	f240 2171 	movw	r1, #625	; 0x271
 800d86e:	4630      	mov	r0, r6
 800d870:	f7ff ff3a 	bl	800d6e8 <__i2b>
 800d874:	2300      	movs	r3, #0
 800d876:	f8c8 0008 	str.w	r0, [r8, #8]
 800d87a:	4604      	mov	r4, r0
 800d87c:	6003      	str	r3, [r0, #0]
 800d87e:	f04f 0800 	mov.w	r8, #0
 800d882:	07eb      	lsls	r3, r5, #31
 800d884:	d50a      	bpl.n	800d89c <__pow5mult+0x74>
 800d886:	4639      	mov	r1, r7
 800d888:	4622      	mov	r2, r4
 800d88a:	4630      	mov	r0, r6
 800d88c:	f7ff ff35 	bl	800d6fa <__multiply>
 800d890:	4639      	mov	r1, r7
 800d892:	4681      	mov	r9, r0
 800d894:	4630      	mov	r0, r6
 800d896:	f7ff fe87 	bl	800d5a8 <_Bfree>
 800d89a:	464f      	mov	r7, r9
 800d89c:	106d      	asrs	r5, r5, #1
 800d89e:	d00b      	beq.n	800d8b8 <__pow5mult+0x90>
 800d8a0:	6820      	ldr	r0, [r4, #0]
 800d8a2:	b938      	cbnz	r0, 800d8b4 <__pow5mult+0x8c>
 800d8a4:	4622      	mov	r2, r4
 800d8a6:	4621      	mov	r1, r4
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	f7ff ff26 	bl	800d6fa <__multiply>
 800d8ae:	6020      	str	r0, [r4, #0]
 800d8b0:	f8c0 8000 	str.w	r8, [r0]
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	e7e4      	b.n	800d882 <__pow5mult+0x5a>
 800d8b8:	4638      	mov	r0, r7
 800d8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8be:	bf00      	nop
 800d8c0:	0800eb78 	.word	0x0800eb78

0800d8c4 <__lshift>:
 800d8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c8:	460c      	mov	r4, r1
 800d8ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d8ce:	6923      	ldr	r3, [r4, #16]
 800d8d0:	6849      	ldr	r1, [r1, #4]
 800d8d2:	eb0a 0903 	add.w	r9, sl, r3
 800d8d6:	68a3      	ldr	r3, [r4, #8]
 800d8d8:	4607      	mov	r7, r0
 800d8da:	4616      	mov	r6, r2
 800d8dc:	f109 0501 	add.w	r5, r9, #1
 800d8e0:	42ab      	cmp	r3, r5
 800d8e2:	db32      	blt.n	800d94a <__lshift+0x86>
 800d8e4:	4638      	mov	r0, r7
 800d8e6:	f7ff fe2b 	bl	800d540 <_Balloc>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	4680      	mov	r8, r0
 800d8ee:	f100 0114 	add.w	r1, r0, #20
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	4553      	cmp	r3, sl
 800d8f6:	db2b      	blt.n	800d950 <__lshift+0x8c>
 800d8f8:	6920      	ldr	r0, [r4, #16]
 800d8fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8fe:	f104 0314 	add.w	r3, r4, #20
 800d902:	f016 021f 	ands.w	r2, r6, #31
 800d906:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d90a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d90e:	d025      	beq.n	800d95c <__lshift+0x98>
 800d910:	f1c2 0e20 	rsb	lr, r2, #32
 800d914:	2000      	movs	r0, #0
 800d916:	681e      	ldr	r6, [r3, #0]
 800d918:	468a      	mov	sl, r1
 800d91a:	4096      	lsls	r6, r2
 800d91c:	4330      	orrs	r0, r6
 800d91e:	f84a 0b04 	str.w	r0, [sl], #4
 800d922:	f853 0b04 	ldr.w	r0, [r3], #4
 800d926:	459c      	cmp	ip, r3
 800d928:	fa20 f00e 	lsr.w	r0, r0, lr
 800d92c:	d814      	bhi.n	800d958 <__lshift+0x94>
 800d92e:	6048      	str	r0, [r1, #4]
 800d930:	b108      	cbz	r0, 800d936 <__lshift+0x72>
 800d932:	f109 0502 	add.w	r5, r9, #2
 800d936:	3d01      	subs	r5, #1
 800d938:	4638      	mov	r0, r7
 800d93a:	f8c8 5010 	str.w	r5, [r8, #16]
 800d93e:	4621      	mov	r1, r4
 800d940:	f7ff fe32 	bl	800d5a8 <_Bfree>
 800d944:	4640      	mov	r0, r8
 800d946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94a:	3101      	adds	r1, #1
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	e7c7      	b.n	800d8e0 <__lshift+0x1c>
 800d950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d954:	3301      	adds	r3, #1
 800d956:	e7cd      	b.n	800d8f4 <__lshift+0x30>
 800d958:	4651      	mov	r1, sl
 800d95a:	e7dc      	b.n	800d916 <__lshift+0x52>
 800d95c:	3904      	subs	r1, #4
 800d95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d962:	f841 2f04 	str.w	r2, [r1, #4]!
 800d966:	459c      	cmp	ip, r3
 800d968:	d8f9      	bhi.n	800d95e <__lshift+0x9a>
 800d96a:	e7e4      	b.n	800d936 <__lshift+0x72>

0800d96c <__mcmp>:
 800d96c:	6903      	ldr	r3, [r0, #16]
 800d96e:	690a      	ldr	r2, [r1, #16]
 800d970:	1a9b      	subs	r3, r3, r2
 800d972:	b530      	push	{r4, r5, lr}
 800d974:	d10c      	bne.n	800d990 <__mcmp+0x24>
 800d976:	0092      	lsls	r2, r2, #2
 800d978:	3014      	adds	r0, #20
 800d97a:	3114      	adds	r1, #20
 800d97c:	1884      	adds	r4, r0, r2
 800d97e:	4411      	add	r1, r2
 800d980:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d984:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d988:	4295      	cmp	r5, r2
 800d98a:	d003      	beq.n	800d994 <__mcmp+0x28>
 800d98c:	d305      	bcc.n	800d99a <__mcmp+0x2e>
 800d98e:	2301      	movs	r3, #1
 800d990:	4618      	mov	r0, r3
 800d992:	bd30      	pop	{r4, r5, pc}
 800d994:	42a0      	cmp	r0, r4
 800d996:	d3f3      	bcc.n	800d980 <__mcmp+0x14>
 800d998:	e7fa      	b.n	800d990 <__mcmp+0x24>
 800d99a:	f04f 33ff 	mov.w	r3, #4294967295
 800d99e:	e7f7      	b.n	800d990 <__mcmp+0x24>

0800d9a0 <__mdiff>:
 800d9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a4:	460d      	mov	r5, r1
 800d9a6:	4607      	mov	r7, r0
 800d9a8:	4611      	mov	r1, r2
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	4614      	mov	r4, r2
 800d9ae:	f7ff ffdd 	bl	800d96c <__mcmp>
 800d9b2:	1e06      	subs	r6, r0, #0
 800d9b4:	d108      	bne.n	800d9c8 <__mdiff+0x28>
 800d9b6:	4631      	mov	r1, r6
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	f7ff fdc1 	bl	800d540 <_Balloc>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c8:	bfa4      	itt	ge
 800d9ca:	4623      	movge	r3, r4
 800d9cc:	462c      	movge	r4, r5
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	6861      	ldr	r1, [r4, #4]
 800d9d2:	bfa6      	itte	ge
 800d9d4:	461d      	movge	r5, r3
 800d9d6:	2600      	movge	r6, #0
 800d9d8:	2601      	movlt	r6, #1
 800d9da:	f7ff fdb1 	bl	800d540 <_Balloc>
 800d9de:	692b      	ldr	r3, [r5, #16]
 800d9e0:	60c6      	str	r6, [r0, #12]
 800d9e2:	6926      	ldr	r6, [r4, #16]
 800d9e4:	f105 0914 	add.w	r9, r5, #20
 800d9e8:	f104 0214 	add.w	r2, r4, #20
 800d9ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d9f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d9f4:	f100 0514 	add.w	r5, r0, #20
 800d9f8:	f04f 0e00 	mov.w	lr, #0
 800d9fc:	f852 ab04 	ldr.w	sl, [r2], #4
 800da00:	f859 4b04 	ldr.w	r4, [r9], #4
 800da04:	fa1e f18a 	uxtah	r1, lr, sl
 800da08:	b2a3      	uxth	r3, r4
 800da0a:	1ac9      	subs	r1, r1, r3
 800da0c:	0c23      	lsrs	r3, r4, #16
 800da0e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800da12:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800da16:	b289      	uxth	r1, r1
 800da18:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800da1c:	45c8      	cmp	r8, r9
 800da1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800da22:	4694      	mov	ip, r2
 800da24:	f845 3b04 	str.w	r3, [r5], #4
 800da28:	d8e8      	bhi.n	800d9fc <__mdiff+0x5c>
 800da2a:	45bc      	cmp	ip, r7
 800da2c:	d304      	bcc.n	800da38 <__mdiff+0x98>
 800da2e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800da32:	b183      	cbz	r3, 800da56 <__mdiff+0xb6>
 800da34:	6106      	str	r6, [r0, #16]
 800da36:	e7c5      	b.n	800d9c4 <__mdiff+0x24>
 800da38:	f85c 1b04 	ldr.w	r1, [ip], #4
 800da3c:	fa1e f381 	uxtah	r3, lr, r1
 800da40:	141a      	asrs	r2, r3, #16
 800da42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da46:	b29b      	uxth	r3, r3
 800da48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da4c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800da50:	f845 3b04 	str.w	r3, [r5], #4
 800da54:	e7e9      	b.n	800da2a <__mdiff+0x8a>
 800da56:	3e01      	subs	r6, #1
 800da58:	e7e9      	b.n	800da2e <__mdiff+0x8e>

0800da5a <__d2b>:
 800da5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da5e:	460e      	mov	r6, r1
 800da60:	2101      	movs	r1, #1
 800da62:	ec59 8b10 	vmov	r8, r9, d0
 800da66:	4615      	mov	r5, r2
 800da68:	f7ff fd6a 	bl	800d540 <_Balloc>
 800da6c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800da70:	4607      	mov	r7, r0
 800da72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da76:	bb34      	cbnz	r4, 800dac6 <__d2b+0x6c>
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	f1b8 0300 	subs.w	r3, r8, #0
 800da7e:	d027      	beq.n	800dad0 <__d2b+0x76>
 800da80:	a802      	add	r0, sp, #8
 800da82:	f840 3d08 	str.w	r3, [r0, #-8]!
 800da86:	f7ff fe00 	bl	800d68a <__lo0bits>
 800da8a:	9900      	ldr	r1, [sp, #0]
 800da8c:	b1f0      	cbz	r0, 800dacc <__d2b+0x72>
 800da8e:	9a01      	ldr	r2, [sp, #4]
 800da90:	f1c0 0320 	rsb	r3, r0, #32
 800da94:	fa02 f303 	lsl.w	r3, r2, r3
 800da98:	430b      	orrs	r3, r1
 800da9a:	40c2      	lsrs	r2, r0
 800da9c:	617b      	str	r3, [r7, #20]
 800da9e:	9201      	str	r2, [sp, #4]
 800daa0:	9b01      	ldr	r3, [sp, #4]
 800daa2:	61bb      	str	r3, [r7, #24]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	bf14      	ite	ne
 800daa8:	2102      	movne	r1, #2
 800daaa:	2101      	moveq	r1, #1
 800daac:	6139      	str	r1, [r7, #16]
 800daae:	b1c4      	cbz	r4, 800dae2 <__d2b+0x88>
 800dab0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800dab4:	4404      	add	r4, r0
 800dab6:	6034      	str	r4, [r6, #0]
 800dab8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dabc:	6028      	str	r0, [r5, #0]
 800dabe:	4638      	mov	r0, r7
 800dac0:	b003      	add	sp, #12
 800dac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800daca:	e7d5      	b.n	800da78 <__d2b+0x1e>
 800dacc:	6179      	str	r1, [r7, #20]
 800dace:	e7e7      	b.n	800daa0 <__d2b+0x46>
 800dad0:	a801      	add	r0, sp, #4
 800dad2:	f7ff fdda 	bl	800d68a <__lo0bits>
 800dad6:	9b01      	ldr	r3, [sp, #4]
 800dad8:	617b      	str	r3, [r7, #20]
 800dada:	2101      	movs	r1, #1
 800dadc:	6139      	str	r1, [r7, #16]
 800dade:	3020      	adds	r0, #32
 800dae0:	e7e5      	b.n	800daae <__d2b+0x54>
 800dae2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800dae6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800daea:	6030      	str	r0, [r6, #0]
 800daec:	6918      	ldr	r0, [r3, #16]
 800daee:	f7ff fdad 	bl	800d64c <__hi0bits>
 800daf2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800daf6:	e7e1      	b.n	800dabc <__d2b+0x62>

0800daf8 <_calloc_r>:
 800daf8:	b538      	push	{r3, r4, r5, lr}
 800dafa:	fb02 f401 	mul.w	r4, r2, r1
 800dafe:	4621      	mov	r1, r4
 800db00:	f000 f856 	bl	800dbb0 <_malloc_r>
 800db04:	4605      	mov	r5, r0
 800db06:	b118      	cbz	r0, 800db10 <_calloc_r+0x18>
 800db08:	4622      	mov	r2, r4
 800db0a:	2100      	movs	r1, #0
 800db0c:	f7fd ff0d 	bl	800b92a <memset>
 800db10:	4628      	mov	r0, r5
 800db12:	bd38      	pop	{r3, r4, r5, pc}

0800db14 <_free_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	4605      	mov	r5, r0
 800db18:	2900      	cmp	r1, #0
 800db1a:	d045      	beq.n	800dba8 <_free_r+0x94>
 800db1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db20:	1f0c      	subs	r4, r1, #4
 800db22:	2b00      	cmp	r3, #0
 800db24:	bfb8      	it	lt
 800db26:	18e4      	addlt	r4, r4, r3
 800db28:	f000 fc03 	bl	800e332 <__malloc_lock>
 800db2c:	4a1f      	ldr	r2, [pc, #124]	; (800dbac <_free_r+0x98>)
 800db2e:	6813      	ldr	r3, [r2, #0]
 800db30:	4610      	mov	r0, r2
 800db32:	b933      	cbnz	r3, 800db42 <_free_r+0x2e>
 800db34:	6063      	str	r3, [r4, #4]
 800db36:	6014      	str	r4, [r2, #0]
 800db38:	4628      	mov	r0, r5
 800db3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db3e:	f000 bbf9 	b.w	800e334 <__malloc_unlock>
 800db42:	42a3      	cmp	r3, r4
 800db44:	d90c      	bls.n	800db60 <_free_r+0x4c>
 800db46:	6821      	ldr	r1, [r4, #0]
 800db48:	1862      	adds	r2, r4, r1
 800db4a:	4293      	cmp	r3, r2
 800db4c:	bf04      	itt	eq
 800db4e:	681a      	ldreq	r2, [r3, #0]
 800db50:	685b      	ldreq	r3, [r3, #4]
 800db52:	6063      	str	r3, [r4, #4]
 800db54:	bf04      	itt	eq
 800db56:	1852      	addeq	r2, r2, r1
 800db58:	6022      	streq	r2, [r4, #0]
 800db5a:	6004      	str	r4, [r0, #0]
 800db5c:	e7ec      	b.n	800db38 <_free_r+0x24>
 800db5e:	4613      	mov	r3, r2
 800db60:	685a      	ldr	r2, [r3, #4]
 800db62:	b10a      	cbz	r2, 800db68 <_free_r+0x54>
 800db64:	42a2      	cmp	r2, r4
 800db66:	d9fa      	bls.n	800db5e <_free_r+0x4a>
 800db68:	6819      	ldr	r1, [r3, #0]
 800db6a:	1858      	adds	r0, r3, r1
 800db6c:	42a0      	cmp	r0, r4
 800db6e:	d10b      	bne.n	800db88 <_free_r+0x74>
 800db70:	6820      	ldr	r0, [r4, #0]
 800db72:	4401      	add	r1, r0
 800db74:	1858      	adds	r0, r3, r1
 800db76:	4282      	cmp	r2, r0
 800db78:	6019      	str	r1, [r3, #0]
 800db7a:	d1dd      	bne.n	800db38 <_free_r+0x24>
 800db7c:	6810      	ldr	r0, [r2, #0]
 800db7e:	6852      	ldr	r2, [r2, #4]
 800db80:	605a      	str	r2, [r3, #4]
 800db82:	4401      	add	r1, r0
 800db84:	6019      	str	r1, [r3, #0]
 800db86:	e7d7      	b.n	800db38 <_free_r+0x24>
 800db88:	d902      	bls.n	800db90 <_free_r+0x7c>
 800db8a:	230c      	movs	r3, #12
 800db8c:	602b      	str	r3, [r5, #0]
 800db8e:	e7d3      	b.n	800db38 <_free_r+0x24>
 800db90:	6820      	ldr	r0, [r4, #0]
 800db92:	1821      	adds	r1, r4, r0
 800db94:	428a      	cmp	r2, r1
 800db96:	bf04      	itt	eq
 800db98:	6811      	ldreq	r1, [r2, #0]
 800db9a:	6852      	ldreq	r2, [r2, #4]
 800db9c:	6062      	str	r2, [r4, #4]
 800db9e:	bf04      	itt	eq
 800dba0:	1809      	addeq	r1, r1, r0
 800dba2:	6021      	streq	r1, [r4, #0]
 800dba4:	605c      	str	r4, [r3, #4]
 800dba6:	e7c7      	b.n	800db38 <_free_r+0x24>
 800dba8:	bd38      	pop	{r3, r4, r5, pc}
 800dbaa:	bf00      	nop
 800dbac:	200006cc 	.word	0x200006cc

0800dbb0 <_malloc_r>:
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	1ccd      	adds	r5, r1, #3
 800dbb4:	f025 0503 	bic.w	r5, r5, #3
 800dbb8:	3508      	adds	r5, #8
 800dbba:	2d0c      	cmp	r5, #12
 800dbbc:	bf38      	it	cc
 800dbbe:	250c      	movcc	r5, #12
 800dbc0:	2d00      	cmp	r5, #0
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	db01      	blt.n	800dbca <_malloc_r+0x1a>
 800dbc6:	42a9      	cmp	r1, r5
 800dbc8:	d903      	bls.n	800dbd2 <_malloc_r+0x22>
 800dbca:	230c      	movs	r3, #12
 800dbcc:	6033      	str	r3, [r6, #0]
 800dbce:	2000      	movs	r0, #0
 800dbd0:	bd70      	pop	{r4, r5, r6, pc}
 800dbd2:	f000 fbae 	bl	800e332 <__malloc_lock>
 800dbd6:	4a21      	ldr	r2, [pc, #132]	; (800dc5c <_malloc_r+0xac>)
 800dbd8:	6814      	ldr	r4, [r2, #0]
 800dbda:	4621      	mov	r1, r4
 800dbdc:	b991      	cbnz	r1, 800dc04 <_malloc_r+0x54>
 800dbde:	4c20      	ldr	r4, [pc, #128]	; (800dc60 <_malloc_r+0xb0>)
 800dbe0:	6823      	ldr	r3, [r4, #0]
 800dbe2:	b91b      	cbnz	r3, 800dbec <_malloc_r+0x3c>
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f000 facf 	bl	800e188 <_sbrk_r>
 800dbea:	6020      	str	r0, [r4, #0]
 800dbec:	4629      	mov	r1, r5
 800dbee:	4630      	mov	r0, r6
 800dbf0:	f000 faca 	bl	800e188 <_sbrk_r>
 800dbf4:	1c43      	adds	r3, r0, #1
 800dbf6:	d124      	bne.n	800dc42 <_malloc_r+0x92>
 800dbf8:	230c      	movs	r3, #12
 800dbfa:	6033      	str	r3, [r6, #0]
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f000 fb99 	bl	800e334 <__malloc_unlock>
 800dc02:	e7e4      	b.n	800dbce <_malloc_r+0x1e>
 800dc04:	680b      	ldr	r3, [r1, #0]
 800dc06:	1b5b      	subs	r3, r3, r5
 800dc08:	d418      	bmi.n	800dc3c <_malloc_r+0x8c>
 800dc0a:	2b0b      	cmp	r3, #11
 800dc0c:	d90f      	bls.n	800dc2e <_malloc_r+0x7e>
 800dc0e:	600b      	str	r3, [r1, #0]
 800dc10:	50cd      	str	r5, [r1, r3]
 800dc12:	18cc      	adds	r4, r1, r3
 800dc14:	4630      	mov	r0, r6
 800dc16:	f000 fb8d 	bl	800e334 <__malloc_unlock>
 800dc1a:	f104 000b 	add.w	r0, r4, #11
 800dc1e:	1d23      	adds	r3, r4, #4
 800dc20:	f020 0007 	bic.w	r0, r0, #7
 800dc24:	1ac3      	subs	r3, r0, r3
 800dc26:	d0d3      	beq.n	800dbd0 <_malloc_r+0x20>
 800dc28:	425a      	negs	r2, r3
 800dc2a:	50e2      	str	r2, [r4, r3]
 800dc2c:	e7d0      	b.n	800dbd0 <_malloc_r+0x20>
 800dc2e:	428c      	cmp	r4, r1
 800dc30:	684b      	ldr	r3, [r1, #4]
 800dc32:	bf16      	itet	ne
 800dc34:	6063      	strne	r3, [r4, #4]
 800dc36:	6013      	streq	r3, [r2, #0]
 800dc38:	460c      	movne	r4, r1
 800dc3a:	e7eb      	b.n	800dc14 <_malloc_r+0x64>
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	6849      	ldr	r1, [r1, #4]
 800dc40:	e7cc      	b.n	800dbdc <_malloc_r+0x2c>
 800dc42:	1cc4      	adds	r4, r0, #3
 800dc44:	f024 0403 	bic.w	r4, r4, #3
 800dc48:	42a0      	cmp	r0, r4
 800dc4a:	d005      	beq.n	800dc58 <_malloc_r+0xa8>
 800dc4c:	1a21      	subs	r1, r4, r0
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f000 fa9a 	bl	800e188 <_sbrk_r>
 800dc54:	3001      	adds	r0, #1
 800dc56:	d0cf      	beq.n	800dbf8 <_malloc_r+0x48>
 800dc58:	6025      	str	r5, [r4, #0]
 800dc5a:	e7db      	b.n	800dc14 <_malloc_r+0x64>
 800dc5c:	200006cc 	.word	0x200006cc
 800dc60:	200006d0 	.word	0x200006d0

0800dc64 <__ssputs_r>:
 800dc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc68:	688e      	ldr	r6, [r1, #8]
 800dc6a:	429e      	cmp	r6, r3
 800dc6c:	4682      	mov	sl, r0
 800dc6e:	460c      	mov	r4, r1
 800dc70:	4690      	mov	r8, r2
 800dc72:	4699      	mov	r9, r3
 800dc74:	d837      	bhi.n	800dce6 <__ssputs_r+0x82>
 800dc76:	898a      	ldrh	r2, [r1, #12]
 800dc78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc7c:	d031      	beq.n	800dce2 <__ssputs_r+0x7e>
 800dc7e:	6825      	ldr	r5, [r4, #0]
 800dc80:	6909      	ldr	r1, [r1, #16]
 800dc82:	1a6f      	subs	r7, r5, r1
 800dc84:	6965      	ldr	r5, [r4, #20]
 800dc86:	2302      	movs	r3, #2
 800dc88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc8c:	fb95 f5f3 	sdiv	r5, r5, r3
 800dc90:	f109 0301 	add.w	r3, r9, #1
 800dc94:	443b      	add	r3, r7
 800dc96:	429d      	cmp	r5, r3
 800dc98:	bf38      	it	cc
 800dc9a:	461d      	movcc	r5, r3
 800dc9c:	0553      	lsls	r3, r2, #21
 800dc9e:	d530      	bpl.n	800dd02 <__ssputs_r+0x9e>
 800dca0:	4629      	mov	r1, r5
 800dca2:	f7ff ff85 	bl	800dbb0 <_malloc_r>
 800dca6:	4606      	mov	r6, r0
 800dca8:	b950      	cbnz	r0, 800dcc0 <__ssputs_r+0x5c>
 800dcaa:	230c      	movs	r3, #12
 800dcac:	f8ca 3000 	str.w	r3, [sl]
 800dcb0:	89a3      	ldrh	r3, [r4, #12]
 800dcb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcb6:	81a3      	strh	r3, [r4, #12]
 800dcb8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcc0:	463a      	mov	r2, r7
 800dcc2:	6921      	ldr	r1, [r4, #16]
 800dcc4:	f7fd fe26 	bl	800b914 <memcpy>
 800dcc8:	89a3      	ldrh	r3, [r4, #12]
 800dcca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dcce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcd2:	81a3      	strh	r3, [r4, #12]
 800dcd4:	6126      	str	r6, [r4, #16]
 800dcd6:	6165      	str	r5, [r4, #20]
 800dcd8:	443e      	add	r6, r7
 800dcda:	1bed      	subs	r5, r5, r7
 800dcdc:	6026      	str	r6, [r4, #0]
 800dcde:	60a5      	str	r5, [r4, #8]
 800dce0:	464e      	mov	r6, r9
 800dce2:	454e      	cmp	r6, r9
 800dce4:	d900      	bls.n	800dce8 <__ssputs_r+0x84>
 800dce6:	464e      	mov	r6, r9
 800dce8:	4632      	mov	r2, r6
 800dcea:	4641      	mov	r1, r8
 800dcec:	6820      	ldr	r0, [r4, #0]
 800dcee:	f000 fb07 	bl	800e300 <memmove>
 800dcf2:	68a3      	ldr	r3, [r4, #8]
 800dcf4:	1b9b      	subs	r3, r3, r6
 800dcf6:	60a3      	str	r3, [r4, #8]
 800dcf8:	6823      	ldr	r3, [r4, #0]
 800dcfa:	441e      	add	r6, r3
 800dcfc:	6026      	str	r6, [r4, #0]
 800dcfe:	2000      	movs	r0, #0
 800dd00:	e7dc      	b.n	800dcbc <__ssputs_r+0x58>
 800dd02:	462a      	mov	r2, r5
 800dd04:	f000 fb17 	bl	800e336 <_realloc_r>
 800dd08:	4606      	mov	r6, r0
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	d1e2      	bne.n	800dcd4 <__ssputs_r+0x70>
 800dd0e:	6921      	ldr	r1, [r4, #16]
 800dd10:	4650      	mov	r0, sl
 800dd12:	f7ff feff 	bl	800db14 <_free_r>
 800dd16:	e7c8      	b.n	800dcaa <__ssputs_r+0x46>

0800dd18 <_svfiprintf_r>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	461d      	mov	r5, r3
 800dd1e:	898b      	ldrh	r3, [r1, #12]
 800dd20:	061f      	lsls	r7, r3, #24
 800dd22:	b09d      	sub	sp, #116	; 0x74
 800dd24:	4680      	mov	r8, r0
 800dd26:	460c      	mov	r4, r1
 800dd28:	4616      	mov	r6, r2
 800dd2a:	d50f      	bpl.n	800dd4c <_svfiprintf_r+0x34>
 800dd2c:	690b      	ldr	r3, [r1, #16]
 800dd2e:	b96b      	cbnz	r3, 800dd4c <_svfiprintf_r+0x34>
 800dd30:	2140      	movs	r1, #64	; 0x40
 800dd32:	f7ff ff3d 	bl	800dbb0 <_malloc_r>
 800dd36:	6020      	str	r0, [r4, #0]
 800dd38:	6120      	str	r0, [r4, #16]
 800dd3a:	b928      	cbnz	r0, 800dd48 <_svfiprintf_r+0x30>
 800dd3c:	230c      	movs	r3, #12
 800dd3e:	f8c8 3000 	str.w	r3, [r8]
 800dd42:	f04f 30ff 	mov.w	r0, #4294967295
 800dd46:	e0c8      	b.n	800deda <_svfiprintf_r+0x1c2>
 800dd48:	2340      	movs	r3, #64	; 0x40
 800dd4a:	6163      	str	r3, [r4, #20]
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd50:	2320      	movs	r3, #32
 800dd52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd56:	2330      	movs	r3, #48	; 0x30
 800dd58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd5c:	9503      	str	r5, [sp, #12]
 800dd5e:	f04f 0b01 	mov.w	fp, #1
 800dd62:	4637      	mov	r7, r6
 800dd64:	463d      	mov	r5, r7
 800dd66:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dd6a:	b10b      	cbz	r3, 800dd70 <_svfiprintf_r+0x58>
 800dd6c:	2b25      	cmp	r3, #37	; 0x25
 800dd6e:	d13e      	bne.n	800ddee <_svfiprintf_r+0xd6>
 800dd70:	ebb7 0a06 	subs.w	sl, r7, r6
 800dd74:	d00b      	beq.n	800dd8e <_svfiprintf_r+0x76>
 800dd76:	4653      	mov	r3, sl
 800dd78:	4632      	mov	r2, r6
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	4640      	mov	r0, r8
 800dd7e:	f7ff ff71 	bl	800dc64 <__ssputs_r>
 800dd82:	3001      	adds	r0, #1
 800dd84:	f000 80a4 	beq.w	800ded0 <_svfiprintf_r+0x1b8>
 800dd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd8a:	4453      	add	r3, sl
 800dd8c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd8e:	783b      	ldrb	r3, [r7, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f000 809d 	beq.w	800ded0 <_svfiprintf_r+0x1b8>
 800dd96:	2300      	movs	r3, #0
 800dd98:	f04f 32ff 	mov.w	r2, #4294967295
 800dd9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dda0:	9304      	str	r3, [sp, #16]
 800dda2:	9307      	str	r3, [sp, #28]
 800dda4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dda8:	931a      	str	r3, [sp, #104]	; 0x68
 800ddaa:	462f      	mov	r7, r5
 800ddac:	2205      	movs	r2, #5
 800ddae:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ddb2:	4850      	ldr	r0, [pc, #320]	; (800def4 <_svfiprintf_r+0x1dc>)
 800ddb4:	f7f2 fa14 	bl	80001e0 <memchr>
 800ddb8:	9b04      	ldr	r3, [sp, #16]
 800ddba:	b9d0      	cbnz	r0, 800ddf2 <_svfiprintf_r+0xda>
 800ddbc:	06d9      	lsls	r1, r3, #27
 800ddbe:	bf44      	itt	mi
 800ddc0:	2220      	movmi	r2, #32
 800ddc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ddc6:	071a      	lsls	r2, r3, #28
 800ddc8:	bf44      	itt	mi
 800ddca:	222b      	movmi	r2, #43	; 0x2b
 800ddcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ddd0:	782a      	ldrb	r2, [r5, #0]
 800ddd2:	2a2a      	cmp	r2, #42	; 0x2a
 800ddd4:	d015      	beq.n	800de02 <_svfiprintf_r+0xea>
 800ddd6:	9a07      	ldr	r2, [sp, #28]
 800ddd8:	462f      	mov	r7, r5
 800ddda:	2000      	movs	r0, #0
 800dddc:	250a      	movs	r5, #10
 800ddde:	4639      	mov	r1, r7
 800dde0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dde4:	3b30      	subs	r3, #48	; 0x30
 800dde6:	2b09      	cmp	r3, #9
 800dde8:	d94d      	bls.n	800de86 <_svfiprintf_r+0x16e>
 800ddea:	b1b8      	cbz	r0, 800de1c <_svfiprintf_r+0x104>
 800ddec:	e00f      	b.n	800de0e <_svfiprintf_r+0xf6>
 800ddee:	462f      	mov	r7, r5
 800ddf0:	e7b8      	b.n	800dd64 <_svfiprintf_r+0x4c>
 800ddf2:	4a40      	ldr	r2, [pc, #256]	; (800def4 <_svfiprintf_r+0x1dc>)
 800ddf4:	1a80      	subs	r0, r0, r2
 800ddf6:	fa0b f000 	lsl.w	r0, fp, r0
 800ddfa:	4318      	orrs	r0, r3
 800ddfc:	9004      	str	r0, [sp, #16]
 800ddfe:	463d      	mov	r5, r7
 800de00:	e7d3      	b.n	800ddaa <_svfiprintf_r+0x92>
 800de02:	9a03      	ldr	r2, [sp, #12]
 800de04:	1d11      	adds	r1, r2, #4
 800de06:	6812      	ldr	r2, [r2, #0]
 800de08:	9103      	str	r1, [sp, #12]
 800de0a:	2a00      	cmp	r2, #0
 800de0c:	db01      	blt.n	800de12 <_svfiprintf_r+0xfa>
 800de0e:	9207      	str	r2, [sp, #28]
 800de10:	e004      	b.n	800de1c <_svfiprintf_r+0x104>
 800de12:	4252      	negs	r2, r2
 800de14:	f043 0302 	orr.w	r3, r3, #2
 800de18:	9207      	str	r2, [sp, #28]
 800de1a:	9304      	str	r3, [sp, #16]
 800de1c:	783b      	ldrb	r3, [r7, #0]
 800de1e:	2b2e      	cmp	r3, #46	; 0x2e
 800de20:	d10c      	bne.n	800de3c <_svfiprintf_r+0x124>
 800de22:	787b      	ldrb	r3, [r7, #1]
 800de24:	2b2a      	cmp	r3, #42	; 0x2a
 800de26:	d133      	bne.n	800de90 <_svfiprintf_r+0x178>
 800de28:	9b03      	ldr	r3, [sp, #12]
 800de2a:	1d1a      	adds	r2, r3, #4
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	9203      	str	r2, [sp, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	bfb8      	it	lt
 800de34:	f04f 33ff 	movlt.w	r3, #4294967295
 800de38:	3702      	adds	r7, #2
 800de3a:	9305      	str	r3, [sp, #20]
 800de3c:	4d2e      	ldr	r5, [pc, #184]	; (800def8 <_svfiprintf_r+0x1e0>)
 800de3e:	7839      	ldrb	r1, [r7, #0]
 800de40:	2203      	movs	r2, #3
 800de42:	4628      	mov	r0, r5
 800de44:	f7f2 f9cc 	bl	80001e0 <memchr>
 800de48:	b138      	cbz	r0, 800de5a <_svfiprintf_r+0x142>
 800de4a:	2340      	movs	r3, #64	; 0x40
 800de4c:	1b40      	subs	r0, r0, r5
 800de4e:	fa03 f000 	lsl.w	r0, r3, r0
 800de52:	9b04      	ldr	r3, [sp, #16]
 800de54:	4303      	orrs	r3, r0
 800de56:	3701      	adds	r7, #1
 800de58:	9304      	str	r3, [sp, #16]
 800de5a:	7839      	ldrb	r1, [r7, #0]
 800de5c:	4827      	ldr	r0, [pc, #156]	; (800defc <_svfiprintf_r+0x1e4>)
 800de5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de62:	2206      	movs	r2, #6
 800de64:	1c7e      	adds	r6, r7, #1
 800de66:	f7f2 f9bb 	bl	80001e0 <memchr>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	d038      	beq.n	800dee0 <_svfiprintf_r+0x1c8>
 800de6e:	4b24      	ldr	r3, [pc, #144]	; (800df00 <_svfiprintf_r+0x1e8>)
 800de70:	bb13      	cbnz	r3, 800deb8 <_svfiprintf_r+0x1a0>
 800de72:	9b03      	ldr	r3, [sp, #12]
 800de74:	3307      	adds	r3, #7
 800de76:	f023 0307 	bic.w	r3, r3, #7
 800de7a:	3308      	adds	r3, #8
 800de7c:	9303      	str	r3, [sp, #12]
 800de7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de80:	444b      	add	r3, r9
 800de82:	9309      	str	r3, [sp, #36]	; 0x24
 800de84:	e76d      	b.n	800dd62 <_svfiprintf_r+0x4a>
 800de86:	fb05 3202 	mla	r2, r5, r2, r3
 800de8a:	2001      	movs	r0, #1
 800de8c:	460f      	mov	r7, r1
 800de8e:	e7a6      	b.n	800ddde <_svfiprintf_r+0xc6>
 800de90:	2300      	movs	r3, #0
 800de92:	3701      	adds	r7, #1
 800de94:	9305      	str	r3, [sp, #20]
 800de96:	4619      	mov	r1, r3
 800de98:	250a      	movs	r5, #10
 800de9a:	4638      	mov	r0, r7
 800de9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dea0:	3a30      	subs	r2, #48	; 0x30
 800dea2:	2a09      	cmp	r2, #9
 800dea4:	d903      	bls.n	800deae <_svfiprintf_r+0x196>
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d0c8      	beq.n	800de3c <_svfiprintf_r+0x124>
 800deaa:	9105      	str	r1, [sp, #20]
 800deac:	e7c6      	b.n	800de3c <_svfiprintf_r+0x124>
 800deae:	fb05 2101 	mla	r1, r5, r1, r2
 800deb2:	2301      	movs	r3, #1
 800deb4:	4607      	mov	r7, r0
 800deb6:	e7f0      	b.n	800de9a <_svfiprintf_r+0x182>
 800deb8:	ab03      	add	r3, sp, #12
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	4622      	mov	r2, r4
 800debe:	4b11      	ldr	r3, [pc, #68]	; (800df04 <_svfiprintf_r+0x1ec>)
 800dec0:	a904      	add	r1, sp, #16
 800dec2:	4640      	mov	r0, r8
 800dec4:	f7fd fdce 	bl	800ba64 <_printf_float>
 800dec8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800decc:	4681      	mov	r9, r0
 800dece:	d1d6      	bne.n	800de7e <_svfiprintf_r+0x166>
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	065b      	lsls	r3, r3, #25
 800ded4:	f53f af35 	bmi.w	800dd42 <_svfiprintf_r+0x2a>
 800ded8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deda:	b01d      	add	sp, #116	; 0x74
 800dedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee0:	ab03      	add	r3, sp, #12
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	4622      	mov	r2, r4
 800dee6:	4b07      	ldr	r3, [pc, #28]	; (800df04 <_svfiprintf_r+0x1ec>)
 800dee8:	a904      	add	r1, sp, #16
 800deea:	4640      	mov	r0, r8
 800deec:	f7fe f870 	bl	800bfd0 <_printf_i>
 800def0:	e7ea      	b.n	800dec8 <_svfiprintf_r+0x1b0>
 800def2:	bf00      	nop
 800def4:	0800eb84 	.word	0x0800eb84
 800def8:	0800eb8a 	.word	0x0800eb8a
 800defc:	0800eb8e 	.word	0x0800eb8e
 800df00:	0800ba65 	.word	0x0800ba65
 800df04:	0800dc65 	.word	0x0800dc65

0800df08 <__sfputc_r>:
 800df08:	6893      	ldr	r3, [r2, #8]
 800df0a:	3b01      	subs	r3, #1
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	b410      	push	{r4}
 800df10:	6093      	str	r3, [r2, #8]
 800df12:	da08      	bge.n	800df26 <__sfputc_r+0x1e>
 800df14:	6994      	ldr	r4, [r2, #24]
 800df16:	42a3      	cmp	r3, r4
 800df18:	db01      	blt.n	800df1e <__sfputc_r+0x16>
 800df1a:	290a      	cmp	r1, #10
 800df1c:	d103      	bne.n	800df26 <__sfputc_r+0x1e>
 800df1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df22:	f7fe ba13 	b.w	800c34c <__swbuf_r>
 800df26:	6813      	ldr	r3, [r2, #0]
 800df28:	1c58      	adds	r0, r3, #1
 800df2a:	6010      	str	r0, [r2, #0]
 800df2c:	7019      	strb	r1, [r3, #0]
 800df2e:	4608      	mov	r0, r1
 800df30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df34:	4770      	bx	lr

0800df36 <__sfputs_r>:
 800df36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df38:	4606      	mov	r6, r0
 800df3a:	460f      	mov	r7, r1
 800df3c:	4614      	mov	r4, r2
 800df3e:	18d5      	adds	r5, r2, r3
 800df40:	42ac      	cmp	r4, r5
 800df42:	d101      	bne.n	800df48 <__sfputs_r+0x12>
 800df44:	2000      	movs	r0, #0
 800df46:	e007      	b.n	800df58 <__sfputs_r+0x22>
 800df48:	463a      	mov	r2, r7
 800df4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df4e:	4630      	mov	r0, r6
 800df50:	f7ff ffda 	bl	800df08 <__sfputc_r>
 800df54:	1c43      	adds	r3, r0, #1
 800df56:	d1f3      	bne.n	800df40 <__sfputs_r+0xa>
 800df58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df5c <_vfiprintf_r>:
 800df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df60:	460c      	mov	r4, r1
 800df62:	b09d      	sub	sp, #116	; 0x74
 800df64:	4617      	mov	r7, r2
 800df66:	461d      	mov	r5, r3
 800df68:	4606      	mov	r6, r0
 800df6a:	b118      	cbz	r0, 800df74 <_vfiprintf_r+0x18>
 800df6c:	6983      	ldr	r3, [r0, #24]
 800df6e:	b90b      	cbnz	r3, 800df74 <_vfiprintf_r+0x18>
 800df70:	f7ff f9e2 	bl	800d338 <__sinit>
 800df74:	4b7c      	ldr	r3, [pc, #496]	; (800e168 <_vfiprintf_r+0x20c>)
 800df76:	429c      	cmp	r4, r3
 800df78:	d158      	bne.n	800e02c <_vfiprintf_r+0xd0>
 800df7a:	6874      	ldr	r4, [r6, #4]
 800df7c:	89a3      	ldrh	r3, [r4, #12]
 800df7e:	0718      	lsls	r0, r3, #28
 800df80:	d55e      	bpl.n	800e040 <_vfiprintf_r+0xe4>
 800df82:	6923      	ldr	r3, [r4, #16]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d05b      	beq.n	800e040 <_vfiprintf_r+0xe4>
 800df88:	2300      	movs	r3, #0
 800df8a:	9309      	str	r3, [sp, #36]	; 0x24
 800df8c:	2320      	movs	r3, #32
 800df8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df92:	2330      	movs	r3, #48	; 0x30
 800df94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df98:	9503      	str	r5, [sp, #12]
 800df9a:	f04f 0b01 	mov.w	fp, #1
 800df9e:	46b8      	mov	r8, r7
 800dfa0:	4645      	mov	r5, r8
 800dfa2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dfa6:	b10b      	cbz	r3, 800dfac <_vfiprintf_r+0x50>
 800dfa8:	2b25      	cmp	r3, #37	; 0x25
 800dfaa:	d154      	bne.n	800e056 <_vfiprintf_r+0xfa>
 800dfac:	ebb8 0a07 	subs.w	sl, r8, r7
 800dfb0:	d00b      	beq.n	800dfca <_vfiprintf_r+0x6e>
 800dfb2:	4653      	mov	r3, sl
 800dfb4:	463a      	mov	r2, r7
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f7ff ffbc 	bl	800df36 <__sfputs_r>
 800dfbe:	3001      	adds	r0, #1
 800dfc0:	f000 80c2 	beq.w	800e148 <_vfiprintf_r+0x1ec>
 800dfc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc6:	4453      	add	r3, sl
 800dfc8:	9309      	str	r3, [sp, #36]	; 0x24
 800dfca:	f898 3000 	ldrb.w	r3, [r8]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f000 80ba 	beq.w	800e148 <_vfiprintf_r+0x1ec>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	f04f 32ff 	mov.w	r2, #4294967295
 800dfda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfde:	9304      	str	r3, [sp, #16]
 800dfe0:	9307      	str	r3, [sp, #28]
 800dfe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfe6:	931a      	str	r3, [sp, #104]	; 0x68
 800dfe8:	46a8      	mov	r8, r5
 800dfea:	2205      	movs	r2, #5
 800dfec:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dff0:	485e      	ldr	r0, [pc, #376]	; (800e16c <_vfiprintf_r+0x210>)
 800dff2:	f7f2 f8f5 	bl	80001e0 <memchr>
 800dff6:	9b04      	ldr	r3, [sp, #16]
 800dff8:	bb78      	cbnz	r0, 800e05a <_vfiprintf_r+0xfe>
 800dffa:	06d9      	lsls	r1, r3, #27
 800dffc:	bf44      	itt	mi
 800dffe:	2220      	movmi	r2, #32
 800e000:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e004:	071a      	lsls	r2, r3, #28
 800e006:	bf44      	itt	mi
 800e008:	222b      	movmi	r2, #43	; 0x2b
 800e00a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e00e:	782a      	ldrb	r2, [r5, #0]
 800e010:	2a2a      	cmp	r2, #42	; 0x2a
 800e012:	d02a      	beq.n	800e06a <_vfiprintf_r+0x10e>
 800e014:	9a07      	ldr	r2, [sp, #28]
 800e016:	46a8      	mov	r8, r5
 800e018:	2000      	movs	r0, #0
 800e01a:	250a      	movs	r5, #10
 800e01c:	4641      	mov	r1, r8
 800e01e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e022:	3b30      	subs	r3, #48	; 0x30
 800e024:	2b09      	cmp	r3, #9
 800e026:	d969      	bls.n	800e0fc <_vfiprintf_r+0x1a0>
 800e028:	b360      	cbz	r0, 800e084 <_vfiprintf_r+0x128>
 800e02a:	e024      	b.n	800e076 <_vfiprintf_r+0x11a>
 800e02c:	4b50      	ldr	r3, [pc, #320]	; (800e170 <_vfiprintf_r+0x214>)
 800e02e:	429c      	cmp	r4, r3
 800e030:	d101      	bne.n	800e036 <_vfiprintf_r+0xda>
 800e032:	68b4      	ldr	r4, [r6, #8]
 800e034:	e7a2      	b.n	800df7c <_vfiprintf_r+0x20>
 800e036:	4b4f      	ldr	r3, [pc, #316]	; (800e174 <_vfiprintf_r+0x218>)
 800e038:	429c      	cmp	r4, r3
 800e03a:	bf08      	it	eq
 800e03c:	68f4      	ldreq	r4, [r6, #12]
 800e03e:	e79d      	b.n	800df7c <_vfiprintf_r+0x20>
 800e040:	4621      	mov	r1, r4
 800e042:	4630      	mov	r0, r6
 800e044:	f7fe f9d4 	bl	800c3f0 <__swsetup_r>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d09d      	beq.n	800df88 <_vfiprintf_r+0x2c>
 800e04c:	f04f 30ff 	mov.w	r0, #4294967295
 800e050:	b01d      	add	sp, #116	; 0x74
 800e052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e056:	46a8      	mov	r8, r5
 800e058:	e7a2      	b.n	800dfa0 <_vfiprintf_r+0x44>
 800e05a:	4a44      	ldr	r2, [pc, #272]	; (800e16c <_vfiprintf_r+0x210>)
 800e05c:	1a80      	subs	r0, r0, r2
 800e05e:	fa0b f000 	lsl.w	r0, fp, r0
 800e062:	4318      	orrs	r0, r3
 800e064:	9004      	str	r0, [sp, #16]
 800e066:	4645      	mov	r5, r8
 800e068:	e7be      	b.n	800dfe8 <_vfiprintf_r+0x8c>
 800e06a:	9a03      	ldr	r2, [sp, #12]
 800e06c:	1d11      	adds	r1, r2, #4
 800e06e:	6812      	ldr	r2, [r2, #0]
 800e070:	9103      	str	r1, [sp, #12]
 800e072:	2a00      	cmp	r2, #0
 800e074:	db01      	blt.n	800e07a <_vfiprintf_r+0x11e>
 800e076:	9207      	str	r2, [sp, #28]
 800e078:	e004      	b.n	800e084 <_vfiprintf_r+0x128>
 800e07a:	4252      	negs	r2, r2
 800e07c:	f043 0302 	orr.w	r3, r3, #2
 800e080:	9207      	str	r2, [sp, #28]
 800e082:	9304      	str	r3, [sp, #16]
 800e084:	f898 3000 	ldrb.w	r3, [r8]
 800e088:	2b2e      	cmp	r3, #46	; 0x2e
 800e08a:	d10e      	bne.n	800e0aa <_vfiprintf_r+0x14e>
 800e08c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e090:	2b2a      	cmp	r3, #42	; 0x2a
 800e092:	d138      	bne.n	800e106 <_vfiprintf_r+0x1aa>
 800e094:	9b03      	ldr	r3, [sp, #12]
 800e096:	1d1a      	adds	r2, r3, #4
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	9203      	str	r2, [sp, #12]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	bfb8      	it	lt
 800e0a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0a4:	f108 0802 	add.w	r8, r8, #2
 800e0a8:	9305      	str	r3, [sp, #20]
 800e0aa:	4d33      	ldr	r5, [pc, #204]	; (800e178 <_vfiprintf_r+0x21c>)
 800e0ac:	f898 1000 	ldrb.w	r1, [r8]
 800e0b0:	2203      	movs	r2, #3
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	f7f2 f894 	bl	80001e0 <memchr>
 800e0b8:	b140      	cbz	r0, 800e0cc <_vfiprintf_r+0x170>
 800e0ba:	2340      	movs	r3, #64	; 0x40
 800e0bc:	1b40      	subs	r0, r0, r5
 800e0be:	fa03 f000 	lsl.w	r0, r3, r0
 800e0c2:	9b04      	ldr	r3, [sp, #16]
 800e0c4:	4303      	orrs	r3, r0
 800e0c6:	f108 0801 	add.w	r8, r8, #1
 800e0ca:	9304      	str	r3, [sp, #16]
 800e0cc:	f898 1000 	ldrb.w	r1, [r8]
 800e0d0:	482a      	ldr	r0, [pc, #168]	; (800e17c <_vfiprintf_r+0x220>)
 800e0d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0d6:	2206      	movs	r2, #6
 800e0d8:	f108 0701 	add.w	r7, r8, #1
 800e0dc:	f7f2 f880 	bl	80001e0 <memchr>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	d037      	beq.n	800e154 <_vfiprintf_r+0x1f8>
 800e0e4:	4b26      	ldr	r3, [pc, #152]	; (800e180 <_vfiprintf_r+0x224>)
 800e0e6:	bb1b      	cbnz	r3, 800e130 <_vfiprintf_r+0x1d4>
 800e0e8:	9b03      	ldr	r3, [sp, #12]
 800e0ea:	3307      	adds	r3, #7
 800e0ec:	f023 0307 	bic.w	r3, r3, #7
 800e0f0:	3308      	adds	r3, #8
 800e0f2:	9303      	str	r3, [sp, #12]
 800e0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0f6:	444b      	add	r3, r9
 800e0f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e0fa:	e750      	b.n	800df9e <_vfiprintf_r+0x42>
 800e0fc:	fb05 3202 	mla	r2, r5, r2, r3
 800e100:	2001      	movs	r0, #1
 800e102:	4688      	mov	r8, r1
 800e104:	e78a      	b.n	800e01c <_vfiprintf_r+0xc0>
 800e106:	2300      	movs	r3, #0
 800e108:	f108 0801 	add.w	r8, r8, #1
 800e10c:	9305      	str	r3, [sp, #20]
 800e10e:	4619      	mov	r1, r3
 800e110:	250a      	movs	r5, #10
 800e112:	4640      	mov	r0, r8
 800e114:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e118:	3a30      	subs	r2, #48	; 0x30
 800e11a:	2a09      	cmp	r2, #9
 800e11c:	d903      	bls.n	800e126 <_vfiprintf_r+0x1ca>
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d0c3      	beq.n	800e0aa <_vfiprintf_r+0x14e>
 800e122:	9105      	str	r1, [sp, #20]
 800e124:	e7c1      	b.n	800e0aa <_vfiprintf_r+0x14e>
 800e126:	fb05 2101 	mla	r1, r5, r1, r2
 800e12a:	2301      	movs	r3, #1
 800e12c:	4680      	mov	r8, r0
 800e12e:	e7f0      	b.n	800e112 <_vfiprintf_r+0x1b6>
 800e130:	ab03      	add	r3, sp, #12
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	4622      	mov	r2, r4
 800e136:	4b13      	ldr	r3, [pc, #76]	; (800e184 <_vfiprintf_r+0x228>)
 800e138:	a904      	add	r1, sp, #16
 800e13a:	4630      	mov	r0, r6
 800e13c:	f7fd fc92 	bl	800ba64 <_printf_float>
 800e140:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e144:	4681      	mov	r9, r0
 800e146:	d1d5      	bne.n	800e0f4 <_vfiprintf_r+0x198>
 800e148:	89a3      	ldrh	r3, [r4, #12]
 800e14a:	065b      	lsls	r3, r3, #25
 800e14c:	f53f af7e 	bmi.w	800e04c <_vfiprintf_r+0xf0>
 800e150:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e152:	e77d      	b.n	800e050 <_vfiprintf_r+0xf4>
 800e154:	ab03      	add	r3, sp, #12
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	4622      	mov	r2, r4
 800e15a:	4b0a      	ldr	r3, [pc, #40]	; (800e184 <_vfiprintf_r+0x228>)
 800e15c:	a904      	add	r1, sp, #16
 800e15e:	4630      	mov	r0, r6
 800e160:	f7fd ff36 	bl	800bfd0 <_printf_i>
 800e164:	e7ec      	b.n	800e140 <_vfiprintf_r+0x1e4>
 800e166:	bf00      	nop
 800e168:	0800ea48 	.word	0x0800ea48
 800e16c:	0800eb84 	.word	0x0800eb84
 800e170:	0800ea68 	.word	0x0800ea68
 800e174:	0800ea28 	.word	0x0800ea28
 800e178:	0800eb8a 	.word	0x0800eb8a
 800e17c:	0800eb8e 	.word	0x0800eb8e
 800e180:	0800ba65 	.word	0x0800ba65
 800e184:	0800df37 	.word	0x0800df37

0800e188 <_sbrk_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	4c06      	ldr	r4, [pc, #24]	; (800e1a4 <_sbrk_r+0x1c>)
 800e18c:	2300      	movs	r3, #0
 800e18e:	4605      	mov	r5, r0
 800e190:	4608      	mov	r0, r1
 800e192:	6023      	str	r3, [r4, #0]
 800e194:	f7f4 fd84 	bl	8002ca0 <_sbrk>
 800e198:	1c43      	adds	r3, r0, #1
 800e19a:	d102      	bne.n	800e1a2 <_sbrk_r+0x1a>
 800e19c:	6823      	ldr	r3, [r4, #0]
 800e19e:	b103      	cbz	r3, 800e1a2 <_sbrk_r+0x1a>
 800e1a0:	602b      	str	r3, [r5, #0]
 800e1a2:	bd38      	pop	{r3, r4, r5, pc}
 800e1a4:	20006dfc 	.word	0x20006dfc

0800e1a8 <__sread>:
 800e1a8:	b510      	push	{r4, lr}
 800e1aa:	460c      	mov	r4, r1
 800e1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1b0:	f000 f8e8 	bl	800e384 <_read_r>
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	bfab      	itete	ge
 800e1b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e1ba:	89a3      	ldrhlt	r3, [r4, #12]
 800e1bc:	181b      	addge	r3, r3, r0
 800e1be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e1c2:	bfac      	ite	ge
 800e1c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e1c6:	81a3      	strhlt	r3, [r4, #12]
 800e1c8:	bd10      	pop	{r4, pc}

0800e1ca <__swrite>:
 800e1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ce:	461f      	mov	r7, r3
 800e1d0:	898b      	ldrh	r3, [r1, #12]
 800e1d2:	05db      	lsls	r3, r3, #23
 800e1d4:	4605      	mov	r5, r0
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	4616      	mov	r6, r2
 800e1da:	d505      	bpl.n	800e1e8 <__swrite+0x1e>
 800e1dc:	2302      	movs	r3, #2
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1e4:	f000 f868 	bl	800e2b8 <_lseek_r>
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1f2:	81a3      	strh	r3, [r4, #12]
 800e1f4:	4632      	mov	r2, r6
 800e1f6:	463b      	mov	r3, r7
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1fe:	f000 b817 	b.w	800e230 <_write_r>

0800e202 <__sseek>:
 800e202:	b510      	push	{r4, lr}
 800e204:	460c      	mov	r4, r1
 800e206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e20a:	f000 f855 	bl	800e2b8 <_lseek_r>
 800e20e:	1c43      	adds	r3, r0, #1
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	bf15      	itete	ne
 800e214:	6560      	strne	r0, [r4, #84]	; 0x54
 800e216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e21a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e21e:	81a3      	strheq	r3, [r4, #12]
 800e220:	bf18      	it	ne
 800e222:	81a3      	strhne	r3, [r4, #12]
 800e224:	bd10      	pop	{r4, pc}

0800e226 <__sclose>:
 800e226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e22a:	f000 b813 	b.w	800e254 <_close_r>
	...

0800e230 <_write_r>:
 800e230:	b538      	push	{r3, r4, r5, lr}
 800e232:	4c07      	ldr	r4, [pc, #28]	; (800e250 <_write_r+0x20>)
 800e234:	4605      	mov	r5, r0
 800e236:	4608      	mov	r0, r1
 800e238:	4611      	mov	r1, r2
 800e23a:	2200      	movs	r2, #0
 800e23c:	6022      	str	r2, [r4, #0]
 800e23e:	461a      	mov	r2, r3
 800e240:	f7f4 f95f 	bl	8002502 <_write>
 800e244:	1c43      	adds	r3, r0, #1
 800e246:	d102      	bne.n	800e24e <_write_r+0x1e>
 800e248:	6823      	ldr	r3, [r4, #0]
 800e24a:	b103      	cbz	r3, 800e24e <_write_r+0x1e>
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	bd38      	pop	{r3, r4, r5, pc}
 800e250:	20006dfc 	.word	0x20006dfc

0800e254 <_close_r>:
 800e254:	b538      	push	{r3, r4, r5, lr}
 800e256:	4c06      	ldr	r4, [pc, #24]	; (800e270 <_close_r+0x1c>)
 800e258:	2300      	movs	r3, #0
 800e25a:	4605      	mov	r5, r0
 800e25c:	4608      	mov	r0, r1
 800e25e:	6023      	str	r3, [r4, #0]
 800e260:	f7f4 fce9 	bl	8002c36 <_close>
 800e264:	1c43      	adds	r3, r0, #1
 800e266:	d102      	bne.n	800e26e <_close_r+0x1a>
 800e268:	6823      	ldr	r3, [r4, #0]
 800e26a:	b103      	cbz	r3, 800e26e <_close_r+0x1a>
 800e26c:	602b      	str	r3, [r5, #0]
 800e26e:	bd38      	pop	{r3, r4, r5, pc}
 800e270:	20006dfc 	.word	0x20006dfc

0800e274 <_fstat_r>:
 800e274:	b538      	push	{r3, r4, r5, lr}
 800e276:	4c07      	ldr	r4, [pc, #28]	; (800e294 <_fstat_r+0x20>)
 800e278:	2300      	movs	r3, #0
 800e27a:	4605      	mov	r5, r0
 800e27c:	4608      	mov	r0, r1
 800e27e:	4611      	mov	r1, r2
 800e280:	6023      	str	r3, [r4, #0]
 800e282:	f7f4 fce4 	bl	8002c4e <_fstat>
 800e286:	1c43      	adds	r3, r0, #1
 800e288:	d102      	bne.n	800e290 <_fstat_r+0x1c>
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	b103      	cbz	r3, 800e290 <_fstat_r+0x1c>
 800e28e:	602b      	str	r3, [r5, #0]
 800e290:	bd38      	pop	{r3, r4, r5, pc}
 800e292:	bf00      	nop
 800e294:	20006dfc 	.word	0x20006dfc

0800e298 <_isatty_r>:
 800e298:	b538      	push	{r3, r4, r5, lr}
 800e29a:	4c06      	ldr	r4, [pc, #24]	; (800e2b4 <_isatty_r+0x1c>)
 800e29c:	2300      	movs	r3, #0
 800e29e:	4605      	mov	r5, r0
 800e2a0:	4608      	mov	r0, r1
 800e2a2:	6023      	str	r3, [r4, #0]
 800e2a4:	f7f4 fce3 	bl	8002c6e <_isatty>
 800e2a8:	1c43      	adds	r3, r0, #1
 800e2aa:	d102      	bne.n	800e2b2 <_isatty_r+0x1a>
 800e2ac:	6823      	ldr	r3, [r4, #0]
 800e2ae:	b103      	cbz	r3, 800e2b2 <_isatty_r+0x1a>
 800e2b0:	602b      	str	r3, [r5, #0]
 800e2b2:	bd38      	pop	{r3, r4, r5, pc}
 800e2b4:	20006dfc 	.word	0x20006dfc

0800e2b8 <_lseek_r>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4c07      	ldr	r4, [pc, #28]	; (800e2d8 <_lseek_r+0x20>)
 800e2bc:	4605      	mov	r5, r0
 800e2be:	4608      	mov	r0, r1
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	6022      	str	r2, [r4, #0]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	f7f4 fcdc 	bl	8002c84 <_lseek>
 800e2cc:	1c43      	adds	r3, r0, #1
 800e2ce:	d102      	bne.n	800e2d6 <_lseek_r+0x1e>
 800e2d0:	6823      	ldr	r3, [r4, #0]
 800e2d2:	b103      	cbz	r3, 800e2d6 <_lseek_r+0x1e>
 800e2d4:	602b      	str	r3, [r5, #0]
 800e2d6:	bd38      	pop	{r3, r4, r5, pc}
 800e2d8:	20006dfc 	.word	0x20006dfc

0800e2dc <__ascii_mbtowc>:
 800e2dc:	b082      	sub	sp, #8
 800e2de:	b901      	cbnz	r1, 800e2e2 <__ascii_mbtowc+0x6>
 800e2e0:	a901      	add	r1, sp, #4
 800e2e2:	b142      	cbz	r2, 800e2f6 <__ascii_mbtowc+0x1a>
 800e2e4:	b14b      	cbz	r3, 800e2fa <__ascii_mbtowc+0x1e>
 800e2e6:	7813      	ldrb	r3, [r2, #0]
 800e2e8:	600b      	str	r3, [r1, #0]
 800e2ea:	7812      	ldrb	r2, [r2, #0]
 800e2ec:	1c10      	adds	r0, r2, #0
 800e2ee:	bf18      	it	ne
 800e2f0:	2001      	movne	r0, #1
 800e2f2:	b002      	add	sp, #8
 800e2f4:	4770      	bx	lr
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	e7fb      	b.n	800e2f2 <__ascii_mbtowc+0x16>
 800e2fa:	f06f 0001 	mvn.w	r0, #1
 800e2fe:	e7f8      	b.n	800e2f2 <__ascii_mbtowc+0x16>

0800e300 <memmove>:
 800e300:	4288      	cmp	r0, r1
 800e302:	b510      	push	{r4, lr}
 800e304:	eb01 0302 	add.w	r3, r1, r2
 800e308:	d807      	bhi.n	800e31a <memmove+0x1a>
 800e30a:	1e42      	subs	r2, r0, #1
 800e30c:	4299      	cmp	r1, r3
 800e30e:	d00a      	beq.n	800e326 <memmove+0x26>
 800e310:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e314:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e318:	e7f8      	b.n	800e30c <memmove+0xc>
 800e31a:	4283      	cmp	r3, r0
 800e31c:	d9f5      	bls.n	800e30a <memmove+0xa>
 800e31e:	1881      	adds	r1, r0, r2
 800e320:	1ad2      	subs	r2, r2, r3
 800e322:	42d3      	cmn	r3, r2
 800e324:	d100      	bne.n	800e328 <memmove+0x28>
 800e326:	bd10      	pop	{r4, pc}
 800e328:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e32c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e330:	e7f7      	b.n	800e322 <memmove+0x22>

0800e332 <__malloc_lock>:
 800e332:	4770      	bx	lr

0800e334 <__malloc_unlock>:
 800e334:	4770      	bx	lr

0800e336 <_realloc_r>:
 800e336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e338:	4607      	mov	r7, r0
 800e33a:	4614      	mov	r4, r2
 800e33c:	460e      	mov	r6, r1
 800e33e:	b921      	cbnz	r1, 800e34a <_realloc_r+0x14>
 800e340:	4611      	mov	r1, r2
 800e342:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e346:	f7ff bc33 	b.w	800dbb0 <_malloc_r>
 800e34a:	b922      	cbnz	r2, 800e356 <_realloc_r+0x20>
 800e34c:	f7ff fbe2 	bl	800db14 <_free_r>
 800e350:	4625      	mov	r5, r4
 800e352:	4628      	mov	r0, r5
 800e354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e356:	f000 f834 	bl	800e3c2 <_malloc_usable_size_r>
 800e35a:	42a0      	cmp	r0, r4
 800e35c:	d20f      	bcs.n	800e37e <_realloc_r+0x48>
 800e35e:	4621      	mov	r1, r4
 800e360:	4638      	mov	r0, r7
 800e362:	f7ff fc25 	bl	800dbb0 <_malloc_r>
 800e366:	4605      	mov	r5, r0
 800e368:	2800      	cmp	r0, #0
 800e36a:	d0f2      	beq.n	800e352 <_realloc_r+0x1c>
 800e36c:	4631      	mov	r1, r6
 800e36e:	4622      	mov	r2, r4
 800e370:	f7fd fad0 	bl	800b914 <memcpy>
 800e374:	4631      	mov	r1, r6
 800e376:	4638      	mov	r0, r7
 800e378:	f7ff fbcc 	bl	800db14 <_free_r>
 800e37c:	e7e9      	b.n	800e352 <_realloc_r+0x1c>
 800e37e:	4635      	mov	r5, r6
 800e380:	e7e7      	b.n	800e352 <_realloc_r+0x1c>
	...

0800e384 <_read_r>:
 800e384:	b538      	push	{r3, r4, r5, lr}
 800e386:	4c07      	ldr	r4, [pc, #28]	; (800e3a4 <_read_r+0x20>)
 800e388:	4605      	mov	r5, r0
 800e38a:	4608      	mov	r0, r1
 800e38c:	4611      	mov	r1, r2
 800e38e:	2200      	movs	r2, #0
 800e390:	6022      	str	r2, [r4, #0]
 800e392:	461a      	mov	r2, r3
 800e394:	f7f4 fc32 	bl	8002bfc <_read>
 800e398:	1c43      	adds	r3, r0, #1
 800e39a:	d102      	bne.n	800e3a2 <_read_r+0x1e>
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	b103      	cbz	r3, 800e3a2 <_read_r+0x1e>
 800e3a0:	602b      	str	r3, [r5, #0]
 800e3a2:	bd38      	pop	{r3, r4, r5, pc}
 800e3a4:	20006dfc 	.word	0x20006dfc

0800e3a8 <__ascii_wctomb>:
 800e3a8:	b149      	cbz	r1, 800e3be <__ascii_wctomb+0x16>
 800e3aa:	2aff      	cmp	r2, #255	; 0xff
 800e3ac:	bf85      	ittet	hi
 800e3ae:	238a      	movhi	r3, #138	; 0x8a
 800e3b0:	6003      	strhi	r3, [r0, #0]
 800e3b2:	700a      	strbls	r2, [r1, #0]
 800e3b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e3b8:	bf98      	it	ls
 800e3ba:	2001      	movls	r0, #1
 800e3bc:	4770      	bx	lr
 800e3be:	4608      	mov	r0, r1
 800e3c0:	4770      	bx	lr

0800e3c2 <_malloc_usable_size_r>:
 800e3c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3c6:	1f18      	subs	r0, r3, #4
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	bfbc      	itt	lt
 800e3cc:	580b      	ldrlt	r3, [r1, r0]
 800e3ce:	18c0      	addlt	r0, r0, r3
 800e3d0:	4770      	bx	lr
	...

0800e3d4 <_init>:
 800e3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d6:	bf00      	nop
 800e3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3da:	bc08      	pop	{r3}
 800e3dc:	469e      	mov	lr, r3
 800e3de:	4770      	bx	lr

0800e3e0 <_fini>:
 800e3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e2:	bf00      	nop
 800e3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3e6:	bc08      	pop	{r3}
 800e3e8:	469e      	mov	lr, r3
 800e3ea:	4770      	bx	lr
