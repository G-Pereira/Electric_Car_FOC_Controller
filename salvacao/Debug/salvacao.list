
salvacao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010258  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b5c  080103e8  080103e8  000203e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f44  08010f44  00030244  2**0
                  CONTENTS
  4 .ARM          00000008  08010f44  08010f44  00020f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f4c  08010f4c  00030244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f4c  08010f4c  00020f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f50  08010f50  00020f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08010f54  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068e0  20000244  08011198  00030244  2**2
                  ALLOC
 10 ._user_heap_stack 00010004  20006b24  08011198  00036b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f54b  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040c7  00000000  00000000  0004f7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001828  00000000  00000000  00053888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001620  00000000  00000000  000550b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025bee  00000000  00000000  000566d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000169ff  00000000  00000000  0007c2be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2aae  00000000  00000000  00092cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016576b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a7c  00000000  00000000  001657e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080103d0 	.word	0x080103d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	080103d0 	.word	0x080103d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d2:	f1a4 0401 	sub.w	r4, r4, #1
 80003d6:	d1e9      	bne.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_ldivmod>:
 8000c5c:	b97b      	cbnz	r3, 8000c7e <__aeabi_ldivmod+0x22>
 8000c5e:	b972      	cbnz	r2, 8000c7e <__aeabi_ldivmod+0x22>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bfbe      	ittt	lt
 8000c64:	2000      	movlt	r0, #0
 8000c66:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c6a:	e006      	blt.n	8000c7a <__aeabi_ldivmod+0x1e>
 8000c6c:	bf08      	it	eq
 8000c6e:	2800      	cmpeq	r0, #0
 8000c70:	bf1c      	itt	ne
 8000c72:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c76:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7a:	f000 b9bd 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c82:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c86:	2900      	cmp	r1, #0
 8000c88:	db09      	blt.n	8000c9e <__aeabi_ldivmod+0x42>
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db1a      	blt.n	8000cc4 <__aeabi_ldivmod+0x68>
 8000c8e:	f000 f84d 	bl	8000d2c <__udivmoddi4>
 8000c92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9a:	b004      	add	sp, #16
 8000c9c:	4770      	bx	lr
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db1b      	blt.n	8000ce0 <__aeabi_ldivmod+0x84>
 8000ca8:	f000 f840 	bl	8000d2c <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	4252      	negs	r2, r2
 8000cbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc2:	4770      	bx	lr
 8000cc4:	4252      	negs	r2, r2
 8000cc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cca:	f000 f82f 	bl	8000d2c <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4240      	negs	r0, r0
 8000cda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cde:	4770      	bx	lr
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	f000 f821 	bl	8000d2c <__udivmoddi4>
 8000cea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf2:	b004      	add	sp, #16
 8000cf4:	4252      	negs	r2, r2
 8000cf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_uldivmod>:
 8000cfc:	b953      	cbnz	r3, 8000d14 <__aeabi_uldivmod+0x18>
 8000cfe:	b94a      	cbnz	r2, 8000d14 <__aeabi_uldivmod+0x18>
 8000d00:	2900      	cmp	r1, #0
 8000d02:	bf08      	it	eq
 8000d04:	2800      	cmpeq	r0, #0
 8000d06:	bf1c      	itt	ne
 8000d08:	f04f 31ff 	movne.w	r1, #4294967295
 8000d0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d10:	f000 b972 	b.w	8000ff8 <__aeabi_idiv0>
 8000d14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d1c:	f000 f806 	bl	8000d2c <__udivmoddi4>
 8000d20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d28:	b004      	add	sp, #16
 8000d2a:	4770      	bx	lr

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d30:	9e08      	ldr	r6, [sp, #32]
 8000d32:	4604      	mov	r4, r0
 8000d34:	4688      	mov	r8, r1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d14b      	bne.n	8000dd2 <__udivmoddi4+0xa6>
 8000d3a:	428a      	cmp	r2, r1
 8000d3c:	4615      	mov	r5, r2
 8000d3e:	d967      	bls.n	8000e10 <__udivmoddi4+0xe4>
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	b14a      	cbz	r2, 8000d5a <__udivmoddi4+0x2e>
 8000d46:	f1c2 0720 	rsb	r7, r2, #32
 8000d4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000d52:	4095      	lsls	r5, r2
 8000d54:	ea47 0803 	orr.w	r8, r7, r3
 8000d58:	4094      	lsls	r4, r2
 8000d5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d5e:	0c23      	lsrs	r3, r4, #16
 8000d60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d64:	fa1f fc85 	uxth.w	ip, r5
 8000d68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d70:	fb07 f10c 	mul.w	r1, r7, ip
 8000d74:	4299      	cmp	r1, r3
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x60>
 8000d78:	18eb      	adds	r3, r5, r3
 8000d7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d7e:	f080 811b 	bcs.w	8000fb8 <__udivmoddi4+0x28c>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 8118 	bls.w	8000fb8 <__udivmoddi4+0x28c>
 8000d88:	3f02      	subs	r7, #2
 8000d8a:	442b      	add	r3, r5
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	f080 8107 	bcs.w	8000fbc <__udivmoddi4+0x290>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	f240 8104 	bls.w	8000fbc <__udivmoddi4+0x290>
 8000db4:	3802      	subs	r0, #2
 8000db6:	442c      	add	r4, r5
 8000db8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000dbc:	eba4 040c 	sub.w	r4, r4, ip
 8000dc0:	2700      	movs	r7, #0
 8000dc2:	b11e      	cbz	r6, 8000dcc <__udivmoddi4+0xa0>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000dcc:	4639      	mov	r1, r7
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xbe>
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	f000 80eb 	beq.w	8000fb2 <__udivmoddi4+0x286>
 8000ddc:	2700      	movs	r7, #0
 8000dde:	e9c6 0100 	strd	r0, r1, [r6]
 8000de2:	4638      	mov	r0, r7
 8000de4:	4639      	mov	r1, r7
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f783 	clz	r7, r3
 8000dee:	2f00      	cmp	r7, #0
 8000df0:	d147      	bne.n	8000e82 <__udivmoddi4+0x156>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd0>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80fa 	bhi.w	8000ff0 <__udivmoddi4+0x2c4>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4698      	mov	r8, r3
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa0>
 8000e0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa0>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xe8>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 808f 	bne.w	8000f3c <__udivmoddi4+0x210>
 8000e1e:	1b49      	subs	r1, r1, r5
 8000e20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e24:	fa1f f885 	uxth.w	r8, r5
 8000e28:	2701      	movs	r7, #1
 8000e2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e2e:	0c23      	lsrs	r3, r4, #16
 8000e30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e38:	fb08 f10c 	mul.w	r1, r8, ip
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e40:	18eb      	adds	r3, r5, r3
 8000e42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x122>
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2bc>
 8000e4e:	4684      	mov	ip, r0
 8000e50:	1a59      	subs	r1, r3, r1
 8000e52:	b2a3      	uxth	r3, r4
 8000e54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e60:	fb08 f800 	mul.w	r8, r8, r0
 8000e64:	45a0      	cmp	r8, r4
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x14c>
 8000e68:	192c      	adds	r4, r5, r4
 8000e6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x14a>
 8000e70:	45a0      	cmp	r8, r4
 8000e72:	f200 80b6 	bhi.w	8000fe2 <__udivmoddi4+0x2b6>
 8000e76:	4618      	mov	r0, r3
 8000e78:	eba4 0408 	sub.w	r4, r4, r8
 8000e7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e80:	e79f      	b.n	8000dc2 <__udivmoddi4+0x96>
 8000e82:	f1c7 0c20 	rsb	ip, r7, #32
 8000e86:	40bb      	lsls	r3, r7
 8000e88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e90:	fa01 f407 	lsl.w	r4, r1, r7
 8000e94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ea0:	4325      	orrs	r5, r4
 8000ea2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ea6:	0c2c      	lsrs	r4, r5, #16
 8000ea8:	fb08 3319 	mls	r3, r8, r9, r3
 8000eac:	fa1f fa8e 	uxth.w	sl, lr
 8000eb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000eb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000eb8:	429c      	cmp	r4, r3
 8000eba:	fa02 f207 	lsl.w	r2, r2, r7
 8000ebe:	fa00 f107 	lsl.w	r1, r0, r7
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b0>
 8000ec4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	f080 8087 	bcs.w	8000fde <__udivmoddi4+0x2b2>
 8000ed0:	429c      	cmp	r4, r3
 8000ed2:	f240 8084 	bls.w	8000fde <__udivmoddi4+0x2b2>
 8000ed6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eda:	4473      	add	r3, lr
 8000edc:	1b1b      	subs	r3, r3, r4
 8000ede:	b2ad      	uxth	r5, r5
 8000ee0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ee8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ef0:	45a2      	cmp	sl, r4
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1da>
 8000ef4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000efc:	d26b      	bcs.n	8000fd6 <__udivmoddi4+0x2aa>
 8000efe:	45a2      	cmp	sl, r4
 8000f00:	d969      	bls.n	8000fd6 <__udivmoddi4+0x2aa>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4474      	add	r4, lr
 8000f06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	eba4 040a 	sub.w	r4, r4, sl
 8000f12:	454c      	cmp	r4, r9
 8000f14:	46c2      	mov	sl, r8
 8000f16:	464b      	mov	r3, r9
 8000f18:	d354      	bcc.n	8000fc4 <__udivmoddi4+0x298>
 8000f1a:	d051      	beq.n	8000fc0 <__udivmoddi4+0x294>
 8000f1c:	2e00      	cmp	r6, #0
 8000f1e:	d069      	beq.n	8000ff4 <__udivmoddi4+0x2c8>
 8000f20:	ebb1 050a 	subs.w	r5, r1, sl
 8000f24:	eb64 0403 	sbc.w	r4, r4, r3
 8000f28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f2c:	40fd      	lsrs	r5, r7
 8000f2e:	40fc      	lsrs	r4, r7
 8000f30:	ea4c 0505 	orr.w	r5, ip, r5
 8000f34:	e9c6 5400 	strd	r5, r4, [r6]
 8000f38:	2700      	movs	r7, #0
 8000f3a:	e747      	b.n	8000dcc <__udivmoddi4+0xa0>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f703 	lsr.w	r7, r0, r3
 8000f44:	4095      	lsls	r5, r2
 8000f46:	fa01 f002 	lsl.w	r0, r1, r2
 8000f4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f52:	4338      	orrs	r0, r7
 8000f54:	0c01      	lsrs	r1, r0, #16
 8000f56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f5a:	fa1f f885 	uxth.w	r8, r5
 8000f5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f66:	fb07 f308 	mul.w	r3, r7, r8
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x256>
 8000f72:	1869      	adds	r1, r5, r1
 8000f74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f78:	d22f      	bcs.n	8000fda <__udivmoddi4+0x2ae>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d92d      	bls.n	8000fda <__udivmoddi4+0x2ae>
 8000f7e:	3f02      	subs	r7, #2
 8000f80:	4429      	add	r1, r5
 8000f82:	1acb      	subs	r3, r1, r3
 8000f84:	b281      	uxth	r1, r0
 8000f86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f92:	fb00 f308 	mul.w	r3, r0, r8
 8000f96:	428b      	cmp	r3, r1
 8000f98:	d907      	bls.n	8000faa <__udivmoddi4+0x27e>
 8000f9a:	1869      	adds	r1, r5, r1
 8000f9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fa0:	d217      	bcs.n	8000fd2 <__udivmoddi4+0x2a6>
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	d915      	bls.n	8000fd2 <__udivmoddi4+0x2a6>
 8000fa6:	3802      	subs	r0, #2
 8000fa8:	4429      	add	r1, r5
 8000faa:	1ac9      	subs	r1, r1, r3
 8000fac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fb0:	e73b      	b.n	8000e2a <__udivmoddi4+0xfe>
 8000fb2:	4637      	mov	r7, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e709      	b.n	8000dcc <__udivmoddi4+0xa0>
 8000fb8:	4607      	mov	r7, r0
 8000fba:	e6e7      	b.n	8000d8c <__udivmoddi4+0x60>
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	e6fb      	b.n	8000db8 <__udivmoddi4+0x8c>
 8000fc0:	4541      	cmp	r1, r8
 8000fc2:	d2ab      	bcs.n	8000f1c <__udivmoddi4+0x1f0>
 8000fc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000fcc:	3801      	subs	r0, #1
 8000fce:	4613      	mov	r3, r2
 8000fd0:	e7a4      	b.n	8000f1c <__udivmoddi4+0x1f0>
 8000fd2:	4660      	mov	r0, ip
 8000fd4:	e7e9      	b.n	8000faa <__udivmoddi4+0x27e>
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	e795      	b.n	8000f06 <__udivmoddi4+0x1da>
 8000fda:	4667      	mov	r7, ip
 8000fdc:	e7d1      	b.n	8000f82 <__udivmoddi4+0x256>
 8000fde:	4681      	mov	r9, r0
 8000fe0:	e77c      	b.n	8000edc <__udivmoddi4+0x1b0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	442c      	add	r4, r5
 8000fe6:	e747      	b.n	8000e78 <__udivmoddi4+0x14c>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	442b      	add	r3, r5
 8000fee:	e72f      	b.n	8000e50 <__udivmoddi4+0x124>
 8000ff0:	4638      	mov	r0, r7
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xda>
 8000ff4:	4637      	mov	r7, r6
 8000ff6:	e6e9      	b.n	8000dcc <__udivmoddi4+0xa0>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <IMU_config>:
//includes
#include "main.h"
#include "IMU_read.h"


void IMU_config(SPI_HandleTypeDef *hspi){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	uint8_t write_words[10];

	//accelerometer config
	write_words[0]=BMX055_RESET_REG;
 8001004:	2314      	movs	r3, #20
 8001006:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET; //accelerometer soft reset
 8001008:	23b6      	movs	r3, #182	; 0xb6
 800100a:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_ACC_PMU_RANGE_REG;
 800100c:	230f      	movs	r3, #15
 800100e:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_ACC_RANGE_2;
 8001010:	2303      	movs	r3, #3
 8001012:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_ACC_PMU_BW_REG;
 8001014:	2310      	movs	r3, #16
 8001016:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_ACC_PMU_BW_7_81;
 8001018:	2308      	movs	r3, #8
 800101a:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_ACC_PMU_LPW_REG;
 800101c:	2311      	movs	r3, #17
 800101e:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_ACC_PMU_LPW_MODE_NOMAL|BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 8001020:	2300      	movs	r3, #0
 8001022:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	4833      	ldr	r0, [pc, #204]	; (80010f8 <IMU_config+0xfc>)
 800102a:	f003 f8cd 	bl	80041c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 800102e:	f107 010c 	add.w	r1, r7, #12
 8001032:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001036:	2208      	movs	r2, #8
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f005 ff6f 	bl	8006f1c <HAL_SPI_Transmit>
	HAL_Delay(100);
 800103e:	2064      	movs	r0, #100	; 0x64
 8001040:	f001 fe62 	bl	8002d08 <HAL_Delay>
	  	  HAL_Delay(100);
	  	  HAL_SPI_Transmit(&hspi1, write_words+4, 2, 2000);
	  	  HAL_Delay(100);
	  	  HAL_SPI_Transmit(&hspi1, write_words+6, 2, 2000);
	  	  HAL_Delay(100);*/
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2110      	movs	r1, #16
 8001048:	482b      	ldr	r0, [pc, #172]	; (80010f8 <IMU_config+0xfc>)
 800104a:	f003 f8bd 	bl	80041c8 <HAL_GPIO_WritePin>

	// gyroscope config
	write_words[0]=BMX055_RESET_REG;
 800104e:	2314      	movs	r3, #20
 8001050:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 8001052:	23b6      	movs	r3, #182	; 0xb6
 8001054:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_GYRO_RANGE_REG;
 8001056:	230f      	movs	r3, #15
 8001058:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_GYRO_RANGE_262_4; // Select Gyro Range(262.4 LSB/°/s)
 800105a:	2304      	movs	r3, #4
 800105c:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_GYRO_BW_REG;
 800105e:	2310      	movs	r3, #16
 8001060:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_GYRO_BW_64; // Select Gyro BW   (32Hz)
 8001062:	2306      	movs	r3, #6
 8001064:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_GYRO_LPM1_REG;
 8001066:	2311      	movs	r3, #17
 8001068:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_GYRO_LPM1_MODE_NOMAL|BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 800106a:	2300      	movs	r3, #0
 800106c:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2104      	movs	r1, #4
 8001072:	4822      	ldr	r0, [pc, #136]	; (80010fc <IMU_config+0x100>)
 8001074:	f003 f8a8 	bl	80041c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 8001078:	f107 010c 	add.w	r1, r7, #12
 800107c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001080:	2208      	movs	r2, #8
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f005 ff4a 	bl	8006f1c <HAL_SPI_Transmit>
	HAL_Delay(100);
 8001088:	2064      	movs	r0, #100	; 0x64
 800108a:	f001 fe3d 	bl	8002d08 <HAL_Delay>
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2104      	movs	r1, #4
 8001092:	481a      	ldr	r0, [pc, #104]	; (80010fc <IMU_config+0x100>)
 8001094:	f003 f898 	bl	80041c8 <HAL_GPIO_WritePin>

	// magnetometer config
	write_words[0]=BMX055_RESET_REG;
 8001098:	2314      	movs	r3, #20
 800109a:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 800109c:	23b6      	movs	r3, #182	; 0xb6
 800109e:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_MAG_POW_CTL_REG;
 80010a0:	234b      	movs	r3, #75	; 0x4b
 80010a2:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_MAG_POW_CTL_SLEEP_MODE; // Select Sleep mode
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_MAG_ADV_OP_OUTPUT_REG;
 80010a8:	234c      	movs	r3, #76	; 0x4c
 80010aa:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_MAG_DATA_RATE_10; // (NomalMode, ODR 10Hz)
 80010ac:	2300      	movs	r3, #0
 80010ae:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_MAG_REP_XY_REG;
 80010b0:	2351      	movs	r3, #81	; 0x51
 80010b2:	74bb      	strb	r3, [r7, #18]
	write_words[7]=0x04; // Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
 80010b4:	2304      	movs	r3, #4
 80010b6:	74fb      	strb	r3, [r7, #19]
	write_words[8]=BMX055_MAG_REP_Z_REG;
 80010b8:	2352      	movs	r3, #82	; 0x52
 80010ba:	753b      	strb	r3, [r7, #20]
	write_words[9]= 0x0F; // Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
 80010bc:	230f      	movs	r3, #15
 80010be:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c6:	480d      	ldr	r0, [pc, #52]	; (80010fc <IMU_config+0x100>)
 80010c8:	f003 f87e 	bl	80041c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 10, 2000);
 80010cc:	f107 010c 	add.w	r1, r7, #12
 80010d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010d4:	220a      	movs	r2, #10
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f005 ff20 	bl	8006f1c <HAL_SPI_Transmit>
	HAL_Delay(100);
 80010dc:	2064      	movs	r0, #100	; 0x64
 80010de:	f001 fe13 	bl	8002d08 <HAL_Delay>
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <IMU_config+0x100>)
 80010ea:	f003 f86d 	bl	80041c8 <HAL_GPIO_WritePin>

}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400

08001100 <IMU_acc_read>:

void IMU_acc_read(SPI_HandleTypeDef *hspi, int *accel_data){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_ACC_DATA_START_REG;
 800110a:	2382      	movs	r3, #130	; 0x82
 800110c:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET); //read acceloremeter data
 800110e:	2200      	movs	r2, #0
 8001110:	2110      	movs	r1, #16
 8001112:	4836      	ldr	r0, [pc, #216]	; (80011ec <IMU_acc_read+0xec>)
 8001114:	f003 f858 	bl	80041c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001118:	f107 0113 	add.w	r1, r7, #19
 800111c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001120:	2201      	movs	r2, #1
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f005 fefa 	bl	8006f1c <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	e00c      	b.n	8001148 <IMU_acc_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f107 020c 	add.w	r2, r7, #12
 8001134:	18d1      	adds	r1, r2, r3
 8001136:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800113a:	2201      	movs	r2, #1
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f006 f821 	bl	8007184 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b05      	cmp	r3, #5
 800114c:	ddef      	ble.n	800112e <IMU_acc_read+0x2e>
		//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2110      	movs	r1, #16
 8001152:	4826      	ldr	r0, [pc, #152]	; (80011ec <IMU_acc_read+0xec>)
 8001154:	f003 f838 	bl	80041c8 <HAL_GPIO_WritePin>
	accel_data[0]=((store_data[1]<<4)+(store_data[0]>>4));
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	7b3a      	ldrb	r2, [r7, #12]
 800115e:	0912      	lsrs	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	441a      	add	r2, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	601a      	str	r2, [r3, #0]
	accel_data[1]=((store_data[3]<<4)+(store_data[2]>>4));
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	011a      	lsls	r2, r3, #4
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3304      	adds	r3, #4
 8001178:	440a      	add	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
	accel_data[2]=((store_data[5]<<4)+(store_data[4]>>4));
 800117c:	7c7b      	ldrb	r3, [r7, #17]
 800117e:	011a      	lsls	r2, r3, #4
 8001180:	7c3b      	ldrb	r3, [r7, #16]
 8001182:	091b      	lsrs	r3, r3, #4
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	3308      	adds	r3, #8
 800118c:	440a      	add	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8001190:	2064      	movs	r0, #100	; 0x64
 8001192:	f001 fdb9 	bl	8002d08 <HAL_Delay>

	if (accel_data[0] > 2047)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800119e:	db05      	blt.n	80011ac <IMU_acc_read+0xac>
	{
		accel_data[0] -= 4096;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (accel_data[1]> 2047)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3304      	adds	r3, #4
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011b6:	db07      	blt.n	80011c8 <IMU_acc_read+0xc8>
	{
		accel_data[1] -= 4096;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	3304      	adds	r3, #4
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3304      	adds	r3, #4
 80011c2:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 80011c6:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (accel_data[2] > 2047)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	3308      	adds	r3, #8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011d2:	db07      	blt.n	80011e4 <IMU_acc_read+0xe4>
	{
		accel_data[2] -= 4096;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	3308      	adds	r3, #8
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	3308      	adds	r3, #8
 80011de:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 80011e2:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40020000 	.word	0x40020000

080011f0 <IMU_gyro_read>:

void IMU_gyro_read(SPI_HandleTypeDef *hspi, int *gyro_data){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_GYRO_DATA_START_REG;
 80011fa:	2382      	movs	r3, #130	; 0x82
 80011fc:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET); //read acceloremeter data
 80011fe:	2200      	movs	r2, #0
 8001200:	2104      	movs	r1, #4
 8001202:	4833      	ldr	r0, [pc, #204]	; (80012d0 <IMU_gyro_read+0xe0>)
 8001204:	f002 ffe0 	bl	80041c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001208:	f107 0113 	add.w	r1, r7, #19
 800120c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001210:	2201      	movs	r2, #1
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f005 fe82 	bl	8006f1c <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e00c      	b.n	8001238 <IMU_gyro_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f107 020c 	add.w	r2, r7, #12
 8001224:	18d1      	adds	r1, r2, r3
 8001226:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800122a:	2201      	movs	r2, #1
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f005 ffa9 	bl	8007184 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2b05      	cmp	r3, #5
 800123c:	ddef      	ble.n	800121e <IMU_gyro_read+0x2e>
		//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 800123e:	2201      	movs	r2, #1
 8001240:	2104      	movs	r1, #4
 8001242:	4823      	ldr	r0, [pc, #140]	; (80012d0 <IMU_gyro_read+0xe0>)
 8001244:	f002 ffc0 	bl	80041c8 <HAL_GPIO_WritePin>
	gyro_data[0]=((store_data[1]<<8)+(store_data[0]));
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	7b3a      	ldrb	r2, [r7, #12]
 800124e:	441a      	add	r2, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	601a      	str	r2, [r3, #0]
	gyro_data[1]=((store_data[3]<<8)+(store_data[2]));
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	021a      	lsls	r2, r3, #8
 8001258:	7bbb      	ldrb	r3, [r7, #14]
 800125a:	4619      	mov	r1, r3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3304      	adds	r3, #4
 8001260:	440a      	add	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
	gyro_data[2]=((store_data[5]<<8)+(store_data[4]));
 8001264:	7c7b      	ldrb	r3, [r7, #17]
 8001266:	021a      	lsls	r2, r3, #8
 8001268:	7c3b      	ldrb	r3, [r7, #16]
 800126a:	4619      	mov	r1, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	3308      	adds	r3, #8
 8001270:	440a      	add	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8001274:	2064      	movs	r0, #100	; 0x64
 8001276:	f001 fd47 	bl	8002d08 <HAL_Delay>

	if (gyro_data[0] > 32767)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001282:	db05      	blt.n	8001290 <IMU_gyro_read+0xa0>
	{
		gyro_data[0] -= 65536;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (gyro_data[1]> 32767)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	3304      	adds	r3, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800129a:	db07      	blt.n	80012ac <IMU_gyro_read+0xbc>
	{
		gyro_data[1] -= 65536;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3304      	adds	r3, #4
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3304      	adds	r3, #4
 80012a6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80012aa:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (gyro_data[2] > 32767)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	3308      	adds	r3, #8
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012b6:	db07      	blt.n	80012c8 <IMU_gyro_read+0xd8>
	{
		gyro_data[2] -= 65536;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3308      	adds	r3, #8
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	3308      	adds	r3, #8
 80012c2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80012c6:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40020400 	.word	0x40020400
 80012d4:	00000000 	.word	0x00000000

080012d8 <adcInt2Volt>:
#include "adcUnitConversion.h"
#include "stdio.h"
#include "math.h"
#include "main.h"

float adcInt2Volt (unsigned long int ADCReading){
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

	//ADCVREF reference voltage = ?
	return ((float)ADCReading/(1 << 12 ))*ADCVREF;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001328 <adcInt2Volt+0x50>
 80012ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012f2:	ee16 0a90 	vmov	r0, s13
 80012f6:	f7ff f931 	bl	800055c <__aeabi_f2d>
 80012fa:	a309      	add	r3, pc, #36	; (adr r3, 8001320 <adcInt2Volt+0x48>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff f984 	bl	800060c <__aeabi_dmul>
 8001304:	4603      	mov	r3, r0
 8001306:	460c      	mov	r4, r1
 8001308:	4618      	mov	r0, r3
 800130a:	4621      	mov	r1, r4
 800130c:	f7ff fc56 	bl	8000bbc <__aeabi_d2f>
 8001310:	4603      	mov	r3, r0
 8001312:	ee07 3a90 	vmov	s15, r3
}
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	66666666 	.word	0x66666666
 8001324:	400a6666 	.word	0x400a6666
 8001328:	45800000 	.word	0x45800000
 800132c:	00000000 	.word	0x00000000

08001330 <motorCurrent>:


float motorCurrent (int adcReading){
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	//0.0066 sensor's scale factor
	return (adcInt2Volt(adcReading) - BIASSENSOR)/0.0066;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ffcc 	bl	80012d8 <adcInt2Volt>
 8001340:	ee10 3a10 	vmov	r3, s0
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f909 	bl	800055c <__aeabi_f2d>
 800134a:	a30f      	add	r3, pc, #60	; (adr r3, 8001388 <motorCurrent+0x58>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7fe ffa4 	bl	800029c <__aeabi_dsub>
 8001354:	4603      	mov	r3, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4618      	mov	r0, r3
 800135a:	4621      	mov	r1, r4
 800135c:	a30c      	add	r3, pc, #48	; (adr r3, 8001390 <motorCurrent+0x60>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff fa7d 	bl	8000860 <__aeabi_ddiv>
 8001366:	4603      	mov	r3, r0
 8001368:	460c      	mov	r4, r1
 800136a:	4618      	mov	r0, r3
 800136c:	4621      	mov	r1, r4
 800136e:	f7ff fc25 	bl	8000bbc <__aeabi_d2f>
 8001372:	4603      	mov	r3, r0
 8001374:	ee07 3a90 	vmov	s15, r3
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	f3af 8000 	nop.w
 8001388:	66666666 	.word	0x66666666
 800138c:	3ffa6666 	.word	0x3ffa6666
 8001390:	02752546 	.word	0x02752546
 8001394:	3f7b089a 	.word	0x3f7b089a

08001398 <igbtTemp>:

float igbtTemp (int adcReading){
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

	int Rmin = 160, Rmax = 16100;
 80013a0:	23a0      	movs	r3, #160	; 0xa0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013a4:	f643 63e4 	movw	r3, #16100	; 0x3ee4
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
	float Vmin = 0.05, Vmax = 3.25;
 80013aa:	4b27      	ldr	r3, [pc, #156]	; (8001448 <igbtTemp+0xb0>)
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	4b27      	ldr	r3, [pc, #156]	; (800144c <igbtTemp+0xb4>)
 80013b0:	623b      	str	r3, [r7, #32]
	int Tmin = 0, Tmax = 150;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	2396      	movs	r3, #150	; 0x96
 80013b8:	61bb      	str	r3, [r7, #24]

	float m, b, T;
	m = b = T = 0;
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	60fb      	str	r3, [r7, #12]

	m = 53.085;//(Tmin-Tmax)/(Vmax-Vmin);
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <igbtTemp+0xb8>)
 80013ca:	60fb      	str	r3, [r7, #12]
	b = 22.025;//Tmin - m*Vmax;
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <igbtTemp+0xbc>)
 80013ce:	613b      	str	r3, [r7, #16]

	T = m*(adcInt2Volt(adcReading)/3.3)+b;
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff f8c3 	bl	800055c <__aeabi_f2d>
 80013d6:	4604      	mov	r4, r0
 80013d8:	460d      	mov	r5, r1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff7b 	bl	80012d8 <adcInt2Volt>
 80013e2:	ee10 3a10 	vmov	r3, s0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8b8 	bl	800055c <__aeabi_f2d>
 80013ec:	a314      	add	r3, pc, #80	; (adr r3, 8001440 <igbtTemp+0xa8>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff fa35 	bl	8000860 <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7ff f905 	bl	800060c <__aeabi_dmul>
 8001402:	4603      	mov	r3, r0
 8001404:	460c      	mov	r4, r1
 8001406:	4625      	mov	r5, r4
 8001408:	461c      	mov	r4, r3
 800140a:	6938      	ldr	r0, [r7, #16]
 800140c:	f7ff f8a6 	bl	800055c <__aeabi_f2d>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4620      	mov	r0, r4
 8001416:	4629      	mov	r1, r5
 8001418:	f7fe ff42 	bl	80002a0 <__adddf3>
 800141c:	4603      	mov	r3, r0
 800141e:	460c      	mov	r4, r1
 8001420:	4618      	mov	r0, r3
 8001422:	4621      	mov	r1, r4
 8001424:	f7ff fbca 	bl	8000bbc <__aeabi_d2f>
 8001428:	4603      	mov	r3, r0
 800142a:	617b      	str	r3, [r7, #20]

	return T;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	ee07 3a90 	vmov	s15, r3
}
 8001432:	eeb0 0a67 	vmov.f32	s0, s15
 8001436:	3730      	adds	r7, #48	; 0x30
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}
 800143c:	f3af 8000 	nop.w
 8001440:	66666666 	.word	0x66666666
 8001444:	400a6666 	.word	0x400a6666
 8001448:	3d4ccccd 	.word	0x3d4ccccd
 800144c:	40500000 	.word	0x40500000
 8001450:	4254570a 	.word	0x4254570a
 8001454:	41b03333 	.word	0x41b03333

08001458 <motorTemp>:

float motorTemp (unsigned long int adcReading){
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

	int Rmin = 1600, Rmax = 4000;   //resistance
 8001460:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001466:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
	float Vmin = 0.05, Vmax = 3.25; //voltage
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <motorTemp+0x6c>)
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <motorTemp+0x70>)
 8001472:	623b      	str	r3, [r7, #32]
	int Tmin=0, Tmax=150;			//temperature
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	2396      	movs	r3, #150	; 0x96
 800147a:	61bb      	str	r3, [r7, #24]

	float m, b, Rt, T;
	m = b = Rt = T = 0;
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	60bb      	str	r3, [r7, #8]

	/*m = (Tmin-Tmax)/(Vmin-Vmax);
	b = Tmin-Vmin*m; */
	m = -119.81;
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <motorTemp+0x74>)
 8001490:	60bb      	str	r3, [r7, #8]
	b = 365.61;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <motorTemp+0x78>)
 8001494:	60fb      	str	r3, [r7, #12]

	T = m*(adcInt2Volt(adcReading))+b;
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff1e 	bl	80012d8 <adcInt2Volt>
 800149c:	eeb0 7a40 	vmov.f32	s14, s0
 80014a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	edc7 7a05 	vstr	s15, [r7, #20]

	return T;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	ee07 3a90 	vmov	s15, r3

}
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	3730      	adds	r7, #48	; 0x30
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	3d4ccccd 	.word	0x3d4ccccd
 80014c8:	40500000 	.word	0x40500000
 80014cc:	c2ef9eb8 	.word	0xc2ef9eb8
 80014d0:	43b6ce14 	.word	0x43b6ce14
 80014d4:	00000000 	.word	0x00000000

080014d8 <pedalPos>:
	return Vin;

}


float pedalPos (int adcReading){
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

	float pos = (adcInt2Volt(adcReading)/ADCVREF)*100;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fef8 	bl	80012d8 <adcInt2Volt>
 80014e8:	ee10 3a10 	vmov	r3, s0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f835 	bl	800055c <__aeabi_f2d>
 80014f2:	a310      	add	r3, pc, #64	; (adr r3, 8001534 <pedalPos+0x5c>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f9b2 	bl	8000860 <__aeabi_ddiv>
 80014fc:	4603      	mov	r3, r0
 80014fe:	460c      	mov	r4, r1
 8001500:	4618      	mov	r0, r3
 8001502:	4621      	mov	r1, r4
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <pedalPos+0x58>)
 800150a:	f7ff f87f 	bl	800060c <__aeabi_dmul>
 800150e:	4603      	mov	r3, r0
 8001510:	460c      	mov	r4, r1
 8001512:	4618      	mov	r0, r3
 8001514:	4621      	mov	r1, r4
 8001516:	f7ff fb51 	bl	8000bbc <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	60fb      	str	r3, [r7, #12]

	return pos;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	ee07 3a90 	vmov	s15, r3

}
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	40590000 	.word	0x40590000
 8001534:	66666666 	.word	0x66666666
 8001538:	400a6666 	.word	0x400a6666
 800153c:	00000000 	.word	0x00000000

08001540 <motorSpeed>:
 */

#include "main.h"
#include "encoderMode.h"

int motorSpeed (uint32_t *cnt1, uint32_t *tick, TIM_HandleTypeDef htim2){
 8001540:	b082      	sub	sp, #8
 8001542:	b590      	push	{r4, r7, lr}
 8001544:	ed2d 8b02 	vpush	{d8}
 8001548:	b087      	sub	sp, #28
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
 8001550:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001554:	e881 000c 	stmia.w	r1, {r2, r3}

	uint32_t cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	613b      	str	r3, [r7, #16]
	int diff = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]

	printf("cnt1 = %lu counter2 = %lu\n",*cnt1,cnt2);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4619      	mov	r1, r3
 800156a:	483d      	ldr	r0, [pc, #244]	; (8001660 <motorSpeed+0x120>)
 800156c:	f00b ff66 	bl	800d43c <iprintf>

	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8001570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	2b10      	cmp	r3, #16
 800157a:	d113      	bne.n	80015a4 <motorSpeed+0x64>
		if(cnt2 < *cnt1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	429a      	cmp	r2, r3
 8001584:	d205      	bcs.n	8001592 <motorSpeed+0x52>
			diff = *cnt1 - cnt2;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e01b      	b.n	80015ca <motorSpeed+0x8a>
		else
			diff = (65535 - cnt2) + *cnt1;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800159e:	33ff      	adds	r3, #255	; 0xff
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e012      	b.n	80015ca <motorSpeed+0x8a>
	} else {
		if(cnt2 > *cnt1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d905      	bls.n	80015ba <motorSpeed+0x7a>
			diff = cnt2 - *cnt1;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e007      	b.n	80015ca <motorSpeed+0x8a>
		else
			diff = (65535 - *cnt1) + cnt2;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015c6:	33ff      	adds	r3, #255	; 0xff
 80015c8:	617b      	str	r3, [r7, #20]
	}



	printf("diff = %d\n", diff);
 80015ca:	6979      	ldr	r1, [r7, #20]
 80015cc:	4825      	ldr	r0, [pc, #148]	; (8001664 <motorSpeed+0x124>)
 80015ce:	f00b ff35 	bl	800d43c <iprintf>
	//float speed = (((float)(diff)/8)*60)*2;  //((diff/8)*60)/0.02;  // change when sysTimer configured
	float speed = (((float)(diff)/4)*60)/(HAL_GetTick() - *tick)*0.001;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015dc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80015e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001668 <motorSpeed+0x128>
 80015e8:	ee27 8a87 	vmul.f32	s16, s15, s14
 80015ec:	f001 fb80 	bl	8002cf0 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001600:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8001604:	ee17 0a10 	vmov	r0, s14
 8001608:	f7fe ffa8 	bl	800055c <__aeabi_f2d>
 800160c:	a312      	add	r3, pc, #72	; (adr r3, 8001658 <motorSpeed+0x118>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe fffb 	bl	800060c <__aeabi_dmul>
 8001616:	4603      	mov	r3, r0
 8001618:	460c      	mov	r4, r1
 800161a:	4618      	mov	r0, r3
 800161c:	4621      	mov	r1, r4
 800161e:	f7ff facd 	bl	8000bbc <__aeabi_d2f>
 8001622:	4603      	mov	r3, r0
 8001624:	60fb      	str	r3, [r7, #12]


	*tick = HAL_GetTick();
 8001626:	f001 fb63 	bl	8002cf0 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	601a      	str	r2, [r3, #0]
	*cnt1 = cnt2;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	601a      	str	r2, [r3, #0]
	//printf("aqui %f\n",speed);
	return speed;
 8001636:	edd7 7a03 	vldr	s15, [r7, #12]
 800163a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163e:	ee17 3a90 	vmov	r3, s15
}
 8001642:	4618      	mov	r0, r3
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	ecbd 8b02 	vpop	{d8}
 800164c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001650:	b002      	add	sp, #8
 8001652:	4770      	bx	lr
 8001654:	f3af 8000 	nop.w
 8001658:	d2f1a9fc 	.word	0xd2f1a9fc
 800165c:	3f50624d 	.word	0x3f50624d
 8001660:	080103e8 	.word	0x080103e8
 8001664:	08010404 	.word	0x08010404
 8001668:	42700000 	.word	0x42700000

0800166c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001674:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001678:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001684:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001688:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800168c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00b      	beq.n	80016ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001694:	e000      	b.n	8001698 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001696:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001698:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f9      	beq.n	8001696 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <HAL_ADC_ConvCpltCallback+0x40>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d110      	bne.n	80016f0 <HAL_ADC_ConvCpltCallback+0x34>
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e00a      	b.n	80016ea <HAL_ADC_ConvCpltCallback+0x2e>
			{
				adc_dma[i]=buffer_dma[i];
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_ADC_ConvCpltCallback+0x44>)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016dc:	4909      	ldr	r1, [pc, #36]	; (8001704 <HAL_ADC_ConvCpltCallback+0x48>)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	ddf1      	ble.n	80016d4 <HAL_ADC_ConvCpltCallback+0x18>
			}

		//printf("buff %lu\n", adc_dma[0]);
	}
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40012000 	.word	0x40012000
 8001700:	20001884 	.word	0x20001884
 8001704:	20001578 	.word	0x20001578

08001708 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

	printf("Interrupcao\n");
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <HAL_RTC_AlarmAEventCallback+0x20>)
 8001712:	f00b ff07 	bl	800d524 <puts>
	time_subsec = HAL_GetTick();
 8001716:	f001 faeb 	bl	8002cf0 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_RTC_AlarmAEventCallback+0x24>)
 800171e:	601a      	str	r2, [r3, #0]

}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	08010410 	.word	0x08010410
 800172c:	2000026c 	.word	0x2000026c

08001730 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	b091      	sub	sp, #68	; 0x44
 8001734:	af0e      	add	r7, sp, #56	; 0x38
 8001736:	6078      	str	r0, [r7, #4]

	//UNUSED(htim); será preciso?

	//counter2 = __HAL_TIM_GET_COUNTER(&htim2);
	//printf("%lu\n", HAL_GetTick());
	speed = motorSpeed(&counter1, &tick, htim2);
 8001738:	4e0f      	ldr	r6, [pc, #60]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800173a:	466d      	mov	r5, sp
 800173c:	f106 0408 	add.w	r4, r6, #8
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001750:	e885 0003 	stmia.w	r5, {r0, r1}
 8001754:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001758:	4908      	ldr	r1, [pc, #32]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800175a:	4809      	ldr	r0, [pc, #36]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800175c:	f7ff fef0 	bl	8001540 <motorSpeed>
 8001760:	ee07 0a90 	vmov	s15, r0
 8001764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800176a:	edc3 7a00 	vstr	s15, [r3]

	/* passa a fazer-se aqui?
	sprintf(str, "%f ", speed);
	update_file("encoder_data.txt", str, get_timestamp(&hrtc, &currentTime, &currentDate), stamp, &(fil[12]), &bw); */

}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001776:	bf00      	nop
 8001778:	200029bc 	.word	0x200029bc
 800177c:	20000264 	.word	0x20000264
 8001780:	20000260 	.word	0x20000260
 8001784:	20000268 	.word	0x20000268

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b09f      	sub	sp, #124	; 0x7c
 800178c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178e:	f001 fa49 	bl	8002c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001792:	f000 faed 	bl	8001d70 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  printf("hallo");
 8001796:	485b      	ldr	r0, [pc, #364]	; (8001904 <main+0x17c>)
 8001798:	f00b fe50 	bl	800d43c <iprintf>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179c:	f000 fda6 	bl	80022ec <MX_GPIO_Init>
  MX_DMA_Init();
 80017a0:	f000 fd84 	bl	80022ac <MX_DMA_Init>
  MX_SPI2_Init();
 80017a4:	f000 fcc2 	bl	800212c <MX_SPI2_Init>
  MX_ADC1_Init();
 80017a8:	f000 fb6c 	bl	8001e84 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 80017ac:	f000 fc9e 	bl	80020ec <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80017b0:	f007 f9a6 	bl	8008b00 <MX_FATFS_Init>
  MX_RTC_Init();
 80017b4:	f000 fc0c 	bl	8001fd0 <MX_RTC_Init>
  MX_TIM6_Init();
 80017b8:	f000 fd42 	bl	8002240 <MX_TIM6_Init>
  MX_TIM2_Init();
 80017bc:	f000 fcec 	bl	8002198 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	2110      	movs	r1, #16
 80017c4:	4850      	ldr	r0, [pc, #320]	; (8001908 <main+0x180>)
 80017c6:	f002 fcff 	bl	80041c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2104      	movs	r1, #4
 80017ce:	484f      	ldr	r0, [pc, #316]	; (800190c <main+0x184>)
 80017d0:	f002 fcfa 	bl	80041c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017da:	484c      	ldr	r0, [pc, #304]	; (800190c <main+0x184>)
 80017dc:	f002 fcf4 	bl	80041c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e6:	4849      	ldr	r0, [pc, #292]	; (800190c <main+0x184>)
 80017e8:	f002 fcee 	bl	80041c8 <HAL_GPIO_WritePin>

  fresult = f_mount(&fs, "", 0 );
 80017ec:	2200      	movs	r2, #0
 80017ee:	4948      	ldr	r1, [pc, #288]	; (8001910 <main+0x188>)
 80017f0:	4848      	ldr	r0, [pc, #288]	; (8001914 <main+0x18c>)
 80017f2:	f009 fd45 	bl	800b280 <f_mount>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <main+0x190>)
 80017fc:	701a      	strb	r2, [r3, #0]
  if(fresult == FR_OK){
 80017fe:	4b46      	ldr	r3, [pc, #280]	; (8001918 <main+0x190>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <main+0x84>
	  printf("Mount feito\n");
 8001806:	4845      	ldr	r0, [pc, #276]	; (800191c <main+0x194>)
 8001808:	f00b fe8c 	bl	800d524 <puts>
  }
  fresult = f_open(&fil, "agora17.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800180c:	220a      	movs	r2, #10
 800180e:	4944      	ldr	r1, [pc, #272]	; (8001920 <main+0x198>)
 8001810:	4844      	ldr	r0, [pc, #272]	; (8001924 <main+0x19c>)
 8001812:	f009 fd7b 	bl	800b30c <f_open>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <main+0x190>)
 800181c:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK){
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <main+0x190>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <main+0xa4>
  	  printf("agora17.txt fodeu\n");
 8001826:	4840      	ldr	r0, [pc, #256]	; (8001928 <main+0x1a0>)
 8001828:	f00b fe7c 	bl	800d524 <puts>
  }
  fresult = f_printf(&fil, "kay\n");
 800182c:	493f      	ldr	r1, [pc, #252]	; (800192c <main+0x1a4>)
 800182e:	483d      	ldr	r0, [pc, #244]	; (8001924 <main+0x19c>)
 8001830:	f00a f9ec 	bl	800bc0c <f_printf>
 8001834:	4603      	mov	r3, r0
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b37      	ldr	r3, [pc, #220]	; (8001918 <main+0x190>)
 800183a:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK){
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <main+0x190>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <main+0xc2>
	  printf("agora17.txt fprintf falhou\n");
 8001844:	483a      	ldr	r0, [pc, #232]	; (8001930 <main+0x1a8>)
 8001846:	f00b fe6d 	bl	800d524 <puts>
  }
  f_close(&fil);
 800184a:	4836      	ldr	r0, [pc, #216]	; (8001924 <main+0x19c>)
 800184c:	f00a f93c 	bl	800bac8 <f_close>


  fresult = update_file("test.txt", "hey\n", "", "", &fil, &bw);
 8001850:	4b38      	ldr	r3, [pc, #224]	; (8001934 <main+0x1ac>)
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	4b33      	ldr	r3, [pc, #204]	; (8001924 <main+0x19c>)
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <main+0x188>)
 800185a:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <main+0x188>)
 800185c:	4936      	ldr	r1, [pc, #216]	; (8001938 <main+0x1b0>)
 800185e:	4837      	ldr	r0, [pc, #220]	; (800193c <main+0x1b4>)
 8001860:	f000 fe16 	bl	8002490 <update_file>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <main+0x190>)
 800186a:	701a      	strb	r2, [r3, #0]
  if(fresult!=FR_OK){
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <main+0x190>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <main+0xf2>
	  printf("test.txt fodeu\n");
 8001874:	4832      	ldr	r0, [pc, #200]	; (8001940 <main+0x1b8>)
 8001876:	f00b fe55 	bl	800d524 <puts>
  }

  char str2[30];

  IMU_config(&hspi2);
 800187a:	4832      	ldr	r0, [pc, #200]	; (8001944 <main+0x1bc>)
 800187c:	f7ff fbbe 	bl	8000ffc <IMU_config>

  HAL_TIM_Base_Start_IT(&htim6);
 8001880:	4831      	ldr	r0, [pc, #196]	; (8001948 <main+0x1c0>)
 8001882:	f006 f866 	bl	8007952 <HAL_TIM_Base_Start_IT>

  //Initialize encoder mode
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001886:	213c      	movs	r1, #60	; 0x3c
 8001888:	4830      	ldr	r0, [pc, #192]	; (800194c <main+0x1c4>)
 800188a:	f006 f918 	bl	8007abe <HAL_TIM_Encoder_Start>
  tick = HAL_GetTick();
 800188e:	f001 fa2f 	bl	8002cf0 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <main+0x1c8>)
 8001896:	601a      	str	r2, [r3, #0]
  counter1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001898:	4b2c      	ldr	r3, [pc, #176]	; (800194c <main+0x1c4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	4a2d      	ldr	r2, [pc, #180]	; (8001954 <main+0x1cc>)
 80018a0:	6013      	str	r3, [r2, #0]

  uint8_t aux[5], aux2[1], aux3[1], str3[4], str[5];
  uint8_t ref[5];
    aux[0]=0b10000001;
 80018a2:	2381      	movs	r3, #129	; 0x81
 80018a4:	f887 3020 	strb.w	r3, [r7, #32]
    for(int i=1; i<=4; i++){
 80018a8:	2301      	movs	r3, #1
 80018aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018ac:	e008      	b.n	80018c0 <main+0x138>
  	  aux[i]=0b00000000;
 80018ae:	f107 0220 	add.w	r2, r7, #32
 80018b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018b4:	4413      	add	r3, r2
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
    for(int i=1; i<=4; i++){
 80018ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018bc:	3301      	adds	r3, #1
 80018be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	ddf3      	ble.n	80018ae <main+0x126>
    }
    aux2[0]=0b00000000;
 80018c6:	2300      	movs	r3, #0
 80018c8:	773b      	strb	r3, [r7, #28]


	HAL_ADC_Start_DMA(&hadc1, buffer_dma, NR_ADC_CHANNELS);
 80018ca:	2207      	movs	r2, #7
 80018cc:	4922      	ldr	r1, [pc, #136]	; (8001958 <main+0x1d0>)
 80018ce:	4823      	ldr	r0, [pc, #140]	; (800195c <main+0x1d4>)
 80018d0:	f001 fa80 	bl	8002dd4 <HAL_ADC_Start_DMA>


	fresult = update_file("test2.txt", "hey", "", "", &fil, &bw);
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <main+0x1ac>)
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <main+0x19c>)
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <main+0x188>)
 80018de:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <main+0x188>)
 80018e0:	491f      	ldr	r1, [pc, #124]	; (8001960 <main+0x1d8>)
 80018e2:	4820      	ldr	r0, [pc, #128]	; (8001964 <main+0x1dc>)
 80018e4:	f000 fdd4 	bl	8002490 <update_file>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <main+0x190>)
 80018ee:	701a      	strb	r2, [r3, #0]
	if(fresult!=FR_OK){
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <main+0x190>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <main+0x176>
		printf("test.txt fodeu\n");
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <main+0x1b8>)
 80018fa:	f00b fe13 	bl	800d524 <puts>
	 }

    for(int i=0; i<4; i++){
 80018fe:	2300      	movs	r3, #0
 8001900:	66bb      	str	r3, [r7, #104]	; 0x68
 8001902:	e03e      	b.n	8001982 <main+0x1fa>
 8001904:	0801041c 	.word	0x0801041c
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400
 8001910:	08010424 	.word	0x08010424
 8001914:	20000540 	.word	0x20000540
 8001918:	20001988 	.word	0x20001988
 800191c:	08010428 	.word	0x08010428
 8001920:	08010434 	.word	0x08010434
 8001924:	20002a38 	.word	0x20002a38
 8001928:	08010440 	.word	0x08010440
 800192c:	08010454 	.word	0x08010454
 8001930:	0801045c 	.word	0x0801045c
 8001934:	200018fc 	.word	0x200018fc
 8001938:	08010478 	.word	0x08010478
 800193c:	08010480 	.word	0x08010480
 8001940:	0801048c 	.word	0x0801048c
 8001944:	200004e4 	.word	0x200004e4
 8001948:	200018a0 	.word	0x200018a0
 800194c:	200029bc 	.word	0x200029bc
 8001950:	20000264 	.word	0x20000264
 8001954:	20000260 	.word	0x20000260
 8001958:	20001884 	.word	0x20001884
 800195c:	200015b4 	.word	0x200015b4
 8001960:	0801049c 	.word	0x0801049c
 8001964:	080104a0 	.word	0x080104a0
    	  printf("aux %d - %d\n", i, aux[i]);
 8001968:	f107 0220 	add.w	r2, r7, #32
 800196c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001976:	48c2      	ldr	r0, [pc, #776]	; (8001c80 <main+0x4f8>)
 8001978:	f00b fd60 	bl	800d43c <iprintf>
    for(int i=0; i<4; i++){
 800197c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800197e:	3301      	adds	r3, #1
 8001980:	66bb      	str	r3, [r7, #104]	; 0x68
 8001982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001984:	2b03      	cmp	r3, #3
 8001986:	ddef      	ble.n	8001968 <main+0x1e0>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  printf("time_subsec %lu\n", time_subsec);
 8001988:	4bbe      	ldr	r3, [pc, #760]	; (8001c84 <main+0x4fc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	48be      	ldr	r0, [pc, #760]	; (8001c88 <main+0x500>)
 8001990:	f00b fd54 	bl	800d43c <iprintf>

	  uint32_t read=adc_dma[0];
 8001994:	4bbd      	ldr	r3, [pc, #756]	; (8001c8c <main+0x504>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	65fb      	str	r3, [r7, #92]	; 0x5c
	  motor_temp = motorTemp(read);
 800199a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800199c:	f7ff fd5c 	bl	8001458 <motorTemp>
 80019a0:	eef0 7a40 	vmov.f32	s15, s0
 80019a4:	4bba      	ldr	r3, [pc, #744]	; (8001c90 <main+0x508>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
	  printf("temp %f\n", motor_temp);
 80019aa:	4bb9      	ldr	r3, [pc, #740]	; (8001c90 <main+0x508>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdd4 	bl	800055c <__aeabi_f2d>
 80019b4:	4603      	mov	r3, r0
 80019b6:	460c      	mov	r4, r1
 80019b8:	461a      	mov	r2, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	48b5      	ldr	r0, [pc, #724]	; (8001c94 <main+0x50c>)
 80019be:	f00b fd3d 	bl	800d43c <iprintf>
	  read=adc_dma[1];
 80019c2:	4bb2      	ldr	r3, [pc, #712]	; (8001c8c <main+0x504>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	65fb      	str	r3, [r7, #92]	; 0x5c
	  float brk = pedalPos(read);
 80019c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fd84 	bl	80014d8 <pedalPos>
 80019d0:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
	  printf("brk %f", brk);
 80019d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80019d6:	f7fe fdc1 	bl	800055c <__aeabi_f2d>
 80019da:	4603      	mov	r3, r0
 80019dc:	460c      	mov	r4, r1
 80019de:	461a      	mov	r2, r3
 80019e0:	4623      	mov	r3, r4
 80019e2:	48ad      	ldr	r0, [pc, #692]	; (8001c98 <main+0x510>)
 80019e4:	f00b fd2a 	bl	800d43c <iprintf>
	  read=adc_dma[2];
 80019e8:	4ba8      	ldr	r3, [pc, #672]	; (8001c8c <main+0x504>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	65fb      	str	r3, [r7, #92]	; 0x5c
	  float acc = pedalPos(read);
 80019ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fd71 	bl	80014d8 <pedalPos>
 80019f6:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
	  printf("acc %f", acc);
 80019fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80019fc:	f7fe fdae 	bl	800055c <__aeabi_f2d>
 8001a00:	4603      	mov	r3, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	461a      	mov	r2, r3
 8001a06:	4623      	mov	r3, r4
 8001a08:	48a4      	ldr	r0, [pc, #656]	; (8001c9c <main+0x514>)
 8001a0a:	f00b fd17 	bl	800d43c <iprintf>

	  read=adc_dma[3];
 8001a0e:	4b9f      	ldr	r3, [pc, #636]	; (8001c8c <main+0x504>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	65fb      	str	r3, [r7, #92]	; 0x5c
	  float c1_f = motorCurrent(read);
 8001a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fc8a 	bl	8001330 <motorCurrent>
 8001a1c:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	  c1=c1_f;
 8001a20:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a28:	ee17 2a90 	vmov	r2, s15
 8001a2c:	4b9c      	ldr	r3, [pc, #624]	; (8001ca0 <main+0x518>)
 8001a2e:	601a      	str	r2, [r3, #0]
	  printf("current1 %l", c1);
 8001a30:	4b9b      	ldr	r3, [pc, #620]	; (8001ca0 <main+0x518>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	489b      	ldr	r0, [pc, #620]	; (8001ca4 <main+0x51c>)
 8001a38:	f00b fd00 	bl	800d43c <iprintf>
	  read=adc_dma[4];
 8001a3c:	4b93      	ldr	r3, [pc, #588]	; (8001c8c <main+0x504>)
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	65fb      	str	r3, [r7, #92]	; 0x5c
	  float c2 = motorCurrent(read);
 8001a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fc73 	bl	8001330 <motorCurrent>
 8001a4a:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	  read=adc_dma[5];
 8001a4e:	4b8f      	ldr	r3, [pc, #572]	; (8001c8c <main+0x504>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	65fb      	str	r3, [r7, #92]	; 0x5c
	  float c3 = motorCurrent(read);
 8001a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fc6a 	bl	8001330 <motorCurrent>
 8001a5c:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

	  read=adc_dma[6];
 8001a60:	4b8a      	ldr	r3, [pc, #552]	; (8001c8c <main+0x504>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	65fb      	str	r3, [r7, #92]	; 0x5c
	  conv_temp = igbtTemp(read);
 8001a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fc95 	bl	8001398 <igbtTemp>
 8001a6e:	eef0 7a40 	vmov.f32	s15, s0
 8001a72:	4b8d      	ldr	r3, [pc, #564]	; (8001ca8 <main+0x520>)
 8001a74:	edc3 7a00 	vstr	s15, [r3]
	  printf("temp %f\n", conv_temp);
 8001a78:	4b8b      	ldr	r3, [pc, #556]	; (8001ca8 <main+0x520>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd6d 	bl	800055c <__aeabi_f2d>
 8001a82:	4603      	mov	r3, r0
 8001a84:	460c      	mov	r4, r1
 8001a86:	461a      	mov	r2, r3
 8001a88:	4623      	mov	r3, r4
 8001a8a:	4882      	ldr	r0, [pc, #520]	; (8001c94 <main+0x50c>)
 8001a8c:	f00b fcd6 	bl	800d43c <iprintf>
		  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
	  }
	  else if(brk>50)*/


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a96:	4885      	ldr	r0, [pc, #532]	; (8001cac <main+0x524>)
 8001a98:	f002 fb96 	bl	80041c8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux, 5, 1000);
 8001a9c:	f107 0120 	add.w	r1, r7, #32
 8001aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	4882      	ldr	r0, [pc, #520]	; (8001cb0 <main+0x528>)
 8001aa8:	f005 fa38 	bl	8006f1c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab2:	487e      	ldr	r0, [pc, #504]	; (8001cac <main+0x524>)
 8001ab4:	f002 fb88 	bl	80041c8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f001 f925 	bl	8002d08 <HAL_Delay>


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac4:	4879      	ldr	r0, [pc, #484]	; (8001cac <main+0x524>)
 8001ac6:	f002 fb7f 	bl	80041c8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux2, 1, 1000);
 8001aca:	f107 011c 	add.w	r1, r7, #28
 8001ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4876      	ldr	r0, [pc, #472]	; (8001cb0 <main+0x528>)
 8001ad6:	f005 fa21 	bl	8006f1c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f001 f914 	bl	8002d08 <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str, 4, 1000);
 8001ae0:	f107 010c 	add.w	r1, r7, #12
 8001ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae8:	2204      	movs	r2, #4
 8001aea:	4871      	ldr	r0, [pc, #452]	; (8001cb0 <main+0x528>)
 8001aec:	f005 fb4a 	bl	8007184 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af6:	486d      	ldr	r0, [pc, #436]	; (8001cac <main+0x524>)
 8001af8:	f002 fb66 	bl	80041c8 <HAL_GPIO_WritePin>
	  //HAL_SPI_Receive(&hspi2, str, 4, 200);
	  printf("Aquiii\n");
 8001afc:	486d      	ldr	r0, [pc, #436]	; (8001cb4 <main+0x52c>)
 8001afe:	f00b fd11 	bl	800d524 <puts>
	  printf("%d %d %d %d\n", str[0], str[1], str[2], str[3]);
 8001b02:	7b3b      	ldrb	r3, [r7, #12]
 8001b04:	4619      	mov	r1, r3
 8001b06:	7b7b      	ldrb	r3, [r7, #13]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	7bbb      	ldrb	r3, [r7, #14]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	4603      	mov	r3, r0
 8001b14:	4868      	ldr	r0, [pc, #416]	; (8001cb8 <main+0x530>)
 8001b16:	f00b fc91 	bl	800d43c <iprintf>


	  //ler velocidades do tmc
	  aux3[0]=0x6A;
 8001b1a:	236a      	movs	r3, #106	; 0x6a
 8001b1c:	763b      	strb	r3, [r7, #24]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b24:	4861      	ldr	r0, [pc, #388]	; (8001cac <main+0x524>)
 8001b26:	f002 fb4f 	bl	80041c8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001b2a:	f107 0118 	add.w	r1, r7, #24
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	2201      	movs	r2, #1
 8001b34:	485e      	ldr	r0, [pc, #376]	; (8001cb0 <main+0x528>)
 8001b36:	f005 f9f1 	bl	8006f1c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f001 f8e4 	bl	8002d08 <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001b40:	f107 0114 	add.w	r1, r7, #20
 8001b44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b48:	2204      	movs	r2, #4
 8001b4a:	4859      	ldr	r0, [pc, #356]	; (8001cb0 <main+0x528>)
 8001b4c:	f005 fb1a 	bl	8007184 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001b50:	2201      	movs	r2, #1
 8001b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b56:	4855      	ldr	r0, [pc, #340]	; (8001cac <main+0x524>)
 8001b58:	f002 fb36 	bl	80041c8 <HAL_GPIO_WritePin>
	  printf("PID VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);
 8001b5c:	7d3b      	ldrb	r3, [r7, #20]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	7d7b      	ldrb	r3, [r7, #21]
 8001b62:	461a      	mov	r2, r3
 8001b64:	7dbb      	ldrb	r3, [r7, #22]
 8001b66:	4618      	mov	r0, r3
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4853      	ldr	r0, [pc, #332]	; (8001cbc <main+0x534>)
 8001b70:	f00b fc64 	bl	800d43c <iprintf>

	  aux3[0]=0x22;
 8001b74:	2322      	movs	r3, #34	; 0x22
 8001b76:	763b      	strb	r3, [r7, #24]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7e:	484b      	ldr	r0, [pc, #300]	; (8001cac <main+0x524>)
 8001b80:	f002 fb22 	bl	80041c8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001b84:	f107 0118 	add.w	r1, r7, #24
 8001b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4848      	ldr	r0, [pc, #288]	; (8001cb0 <main+0x528>)
 8001b90:	f005 f9c4 	bl	8006f1c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f001 f8b7 	bl	8002d08 <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001b9a:	f107 0114 	add.w	r1, r7, #20
 8001b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4842      	ldr	r0, [pc, #264]	; (8001cb0 <main+0x528>)
 8001ba6:	f005 faed 	bl	8007184 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001baa:	2201      	movs	r2, #1
 8001bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb0:	483e      	ldr	r0, [pc, #248]	; (8001cac <main+0x524>)
 8001bb2:	f002 fb09 	bl	80041c8 <HAL_GPIO_WritePin>
	  printf("OPENLOOP VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);
 8001bb6:	7d3b      	ldrb	r3, [r7, #20]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	7d7b      	ldrb	r3, [r7, #21]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	7dbb      	ldrb	r3, [r7, #22]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	483d      	ldr	r0, [pc, #244]	; (8001cc0 <main+0x538>)
 8001bca:	f00b fc37 	bl	800d43c <iprintf>

	  aux3[0]=0x41;
 8001bce:	2341      	movs	r3, #65	; 0x41
 8001bd0:	763b      	strb	r3, [r7, #24]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd8:	4834      	ldr	r0, [pc, #208]	; (8001cac <main+0x524>)
 8001bda:	f002 faf5 	bl	80041c8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001bde:	f107 0118 	add.w	r1, r7, #24
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	2201      	movs	r2, #1
 8001be8:	4831      	ldr	r0, [pc, #196]	; (8001cb0 <main+0x528>)
 8001bea:	f005 f997 	bl	8006f1c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f001 f88a 	bl	8002d08 <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001bf4:	f107 0114 	add.w	r1, r7, #20
 8001bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	482c      	ldr	r0, [pc, #176]	; (8001cb0 <main+0x528>)
 8001c00:	f005 fac0 	bl	8007184 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0a:	4828      	ldr	r0, [pc, #160]	; (8001cac <main+0x524>)
 8001c0c:	f002 fadc 	bl	80041c8 <HAL_GPIO_WritePin>
	  printf("AENC DECODER COUNT: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);
 8001c10:	7d3b      	ldrb	r3, [r7, #20]
 8001c12:	4619      	mov	r1, r3
 8001c14:	7d7b      	ldrb	r3, [r7, #21]
 8001c16:	461a      	mov	r2, r3
 8001c18:	7dbb      	ldrb	r3, [r7, #22]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	4603      	mov	r3, r0
 8001c22:	4828      	ldr	r0, [pc, #160]	; (8001cc4 <main+0x53c>)
 8001c24:	f00b fc0a 	bl	800d43c <iprintf>

	  sprintf(str2,"adeus");
 8001c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2c:	4a26      	ldr	r2, [pc, #152]	; (8001cc8 <main+0x540>)
 8001c2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c32:	6018      	str	r0, [r3, #0]
 8001c34:	3304      	adds	r3, #4
 8001c36:	8019      	strh	r1, [r3, #0]
	  time_stamp = HAL_GetTick()-time_subsec;
 8001c38:	f001 f85a 	bl	8002cf0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <main+0x4fc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <main+0x544>)
 8001c46:	6013      	str	r3, [r2, #0]
	  sprintf(stamp, "%s", time_stamp);
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <main+0x544>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4820      	ldr	r0, [pc, #128]	; (8001cd0 <main+0x548>)
 8001c50:	f00b fcaf 	bl	800d5b2 <strcpy>
	  printf("HAL_GetTick() - %lu  time-subsec - %lu \n", HAL_GetTick(), time_subsec);
 8001c54:	f001 f84c 	bl	8002cf0 <HAL_GetTick>
 8001c58:	4601      	mov	r1, r0
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <main+0x4fc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	481c      	ldr	r0, [pc, #112]	; (8001cd4 <main+0x54c>)
 8001c62:	f00b fbeb 	bl	800d43c <iprintf>
	  FRESULT res = update_file("meio.txt", str2, get_timestamp(&hrtc, &currentTime, &currentDate), stamp , &fil2, &bw);
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <main+0x550>)
 8001c68:	491c      	ldr	r1, [pc, #112]	; (8001cdc <main+0x554>)
 8001c6a:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <main+0x558>)
 8001c6c:	f000 fc5c 	bl	8002528 <get_timestamp>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <main+0x55c>)
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <main+0x560>)
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	e035      	b.n	8001cec <main+0x564>
 8001c80:	080104ac 	.word	0x080104ac
 8001c84:	2000026c 	.word	0x2000026c
 8001c88:	080104bc 	.word	0x080104bc
 8001c8c:	20001578 	.word	0x20001578
 8001c90:	200004dc 	.word	0x200004dc
 8001c94:	080104d0 	.word	0x080104d0
 8001c98:	080104dc 	.word	0x080104dc
 8001c9c:	080104e4 	.word	0x080104e4
 8001ca0:	20001600 	.word	0x20001600
 8001ca4:	080104ec 	.word	0x080104ec
 8001ca8:	200015a0 	.word	0x200015a0
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	200004e4 	.word	0x200004e4
 8001cb4:	080104f8 	.word	0x080104f8
 8001cb8:	08010500 	.word	0x08010500
 8001cbc:	08010510 	.word	0x08010510
 8001cc0:	08010534 	.word	0x08010534
 8001cc4:	0801055c 	.word	0x0801055c
 8001cc8:	08010580 	.word	0x08010580
 8001ccc:	20000270 	.word	0x20000270
 8001cd0:	20002a04 	.word	0x20002a04
 8001cd4:	08010588 	.word	0x08010588
 8001cd8:	20002a00 	.word	0x20002a00
 8001cdc:	20003a68 	.word	0x20003a68
 8001ce0:	20001864 	.word	0x20001864
 8001ce4:	200018fc 	.word	0x200018fc
 8001ce8:	20003a7c 	.word	0x20003a7c
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <main+0x5d0>)
 8001cee:	481b      	ldr	r0, [pc, #108]	; (8001d5c <main+0x5d4>)
 8001cf0:	f000 fbce 	bl	8002490 <update_file>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


	  //update_file("teste.txt", "chico da tina", "ah", "ah\n", &fil, &bw);
	  IMU_acc_read(&hspi2, accel_data);
 8001cfa:	4919      	ldr	r1, [pc, #100]	; (8001d60 <main+0x5d8>)
 8001cfc:	4819      	ldr	r0, [pc, #100]	; (8001d64 <main+0x5dc>)
 8001cfe:	f7ff f9ff 	bl	8001100 <IMU_acc_read>
	  for(int i=0; i<=2; i++){
 8001d02:	2300      	movs	r3, #0
 8001d04:	667b      	str	r3, [r7, #100]	; 0x64
 8001d06:	e00c      	b.n	8001d22 <main+0x59a>
		  sprintf(str2, "%d ", accel_data[i]);
 8001d08:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <main+0x5d8>)
 8001d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d14:	4914      	ldr	r1, [pc, #80]	; (8001d68 <main+0x5e0>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f00b fc1c 	bl	800d554 <siprintf>
	  for(int i=0; i<=2; i++){
 8001d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d1e:	3301      	adds	r3, #1
 8001d20:	667b      	str	r3, [r7, #100]	; 0x64
 8001d22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	ddef      	ble.n	8001d08 <main+0x580>
		  }
		  //printf("acc[%d]= %s  ", i, str2);*/
	  }


	  IMU_gyro_read(&hspi2, gyro_data);
 8001d28:	4910      	ldr	r1, [pc, #64]	; (8001d6c <main+0x5e4>)
 8001d2a:	480e      	ldr	r0, [pc, #56]	; (8001d64 <main+0x5dc>)
 8001d2c:	f7ff fa60 	bl	80011f0 <IMU_gyro_read>
	  for(int i=0; i<=2; i++){
 8001d30:	2300      	movs	r3, #0
 8001d32:	663b      	str	r3, [r7, #96]	; 0x60
 8001d34:	e00c      	b.n	8001d50 <main+0x5c8>
		  sprintf(str2, "%d ", gyro_data[i]);
 8001d36:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <main+0x5e4>)
 8001d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d42:	4909      	ldr	r1, [pc, #36]	; (8001d68 <main+0x5e0>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00b fc05 	bl	800d554 <siprintf>
	  for(int i=0; i<=2; i++){
 8001d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	663b      	str	r3, [r7, #96]	; 0x60
 8001d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	ddef      	ble.n	8001d36 <main+0x5ae>
  {
 8001d56:	e617      	b.n	8001988 <main+0x200>
 8001d58:	20002a04 	.word	0x20002a04
 8001d5c:	080105b4 	.word	0x080105b4
 8001d60:	200018e0 	.word	0x200018e0
 8001d64:	200004e4 	.word	0x200004e4
 8001d68:	080105c0 	.word	0x080105c0
 8001d6c:	200018f0 	.word	0x200018f0

08001d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b098      	sub	sp, #96	; 0x60
 8001d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d7a:	2230      	movs	r2, #48	; 0x30
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f00a fbbc 	bl	800c4fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <SystemClock_Config+0x10c>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a34      	ldr	r2, [pc, #208]	; (8001e7c <SystemClock_Config+0x10c>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <SystemClock_Config+0x10c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <SystemClock_Config+0x110>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a2e      	ldr	r2, [pc, #184]	; (8001e80 <SystemClock_Config+0x110>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b2c      	ldr	r3, [pc, #176]	; (8001e80 <SystemClock_Config+0x110>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001dda:	2309      	movs	r3, #9
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001de4:	2301      	movs	r3, #1
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de8:	2302      	movs	r3, #2
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001df2:	2319      	movs	r3, #25
 8001df4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001df6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001dfa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e00:	2307      	movs	r3, #7
 8001e02:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 f9f7 	bl	80041fc <HAL_RCC_OscConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001e14:	f000 fb35 	bl	8002482 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e18:	230f      	movs	r3, #15
 8001e1a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	2105      	movs	r1, #5
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 fc50 	bl	80046dc <HAL_RCC_ClockConfig>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001e42:	f000 fb1e 	bl	8002482 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e46:	2302      	movs	r3, #2
 8001e48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e4e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 fe41 	bl	8004adc <HAL_RCCEx_PeriphCLKConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001e60:	f000 fb0f 	bl	8002482 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_2);
 8001e64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f002 fd1b 	bl	80048a8 <HAL_RCC_MCOConfig>
}
 8001e72:	bf00      	nop
 8001e74:	3760      	adds	r7, #96	; 0x60
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000

08001e84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001e96:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001e98:	4a4b      	ldr	r2, [pc, #300]	; (8001fc8 <MX_ADC1_Init+0x144>)
 8001e9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e9c:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001e9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ea2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ea4:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001eaa:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001eb0:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eb6:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ec4:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001ec6:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <MX_ADC1_Init+0x148>)
 8001ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001eca:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8001ed0:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ede:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ee4:	4837      	ldr	r0, [pc, #220]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001ee6:	f000 ff31 	bl	8002d4c <HAL_ADC_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ef0:	f000 fac7 	bl	8002482 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f00:	463b      	mov	r3, r7
 8001f02:	4619      	mov	r1, r3
 8001f04:	482f      	ldr	r0, [pc, #188]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001f06:	f001 f86b 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f10:	f000 fab7 	bl	8002482 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001f14:	230c      	movs	r3, #12
 8001f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4828      	ldr	r0, [pc, #160]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001f22:	f001 f85d 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f2c:	f000 faa9 	bl	8002482 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001f30:	230d      	movs	r3, #13
 8001f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001f34:	2303      	movs	r3, #3
 8001f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f38:	463b      	mov	r3, r7
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4821      	ldr	r0, [pc, #132]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001f3e:	f001 f84f 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001f48:	f000 fa9b 	bl	8002482 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001f50:	2304      	movs	r3, #4
 8001f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f54:	463b      	mov	r3, r7
 8001f56:	4619      	mov	r1, r3
 8001f58:	481a      	ldr	r0, [pc, #104]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001f5a:	f001 f841 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001f64:	f000 fa8d 	bl	8002482 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001f68:	230a      	movs	r3, #10
 8001f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f6c:	2305      	movs	r3, #5
 8001f6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f70:	463b      	mov	r3, r7
 8001f72:	4619      	mov	r1, r3
 8001f74:	4813      	ldr	r0, [pc, #76]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001f76:	f001 f833 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001f80:	f000 fa7f 	bl	8002482 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001f84:	230b      	movs	r3, #11
 8001f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001f88:	2306      	movs	r3, #6
 8001f8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001f92:	f001 f825 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001f9c:	f000 fa71 	bl	8002482 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001fa0:	2309      	movs	r3, #9
 8001fa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa8:	463b      	mov	r3, r7
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_ADC1_Init+0x140>)
 8001fae:	f001 f817 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001fb8:	f000 fa63 	bl	8002482 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200015b4 	.word	0x200015b4
 8001fc8:	40012000 	.word	0x40012000
 8001fcc:	0f000001 	.word	0x0f000001

08001fd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b090      	sub	sp, #64	; 0x40
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001fea:	463b      	mov	r3, r7
 8001fec:	2228      	movs	r2, #40	; 0x28
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00a fa83 	bl	800c4fc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <MX_RTC_Init+0x114>)
 8001ff8:	4a3b      	ldr	r2, [pc, #236]	; (80020e8 <MX_RTC_Init+0x118>)
 8001ffa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <MX_RTC_Init+0x114>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <MX_RTC_Init+0x114>)
 8002004:	227f      	movs	r2, #127	; 0x7f
 8002006:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <MX_RTC_Init+0x114>)
 800200a:	22ff      	movs	r2, #255	; 0xff
 800200c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <MX_RTC_Init+0x114>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002014:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <MX_RTC_Init+0x114>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800201a:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <MX_RTC_Init+0x114>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002020:	4830      	ldr	r0, [pc, #192]	; (80020e4 <MX_RTC_Init+0x114>)
 8002022:	f002 fe3d 	bl	8004ca0 <HAL_RTC_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800202c:	f000 fa29 	bl	8002482 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x16;
 8002030:	2316      	movs	r3, #22
 8002032:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002042:	2300      	movs	r3, #0
 8002044:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800204a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800204e:	2201      	movs	r2, #1
 8002050:	4619      	mov	r1, r3
 8002052:	4824      	ldr	r0, [pc, #144]	; (80020e4 <MX_RTC_Init+0x114>)
 8002054:	f002 feb5 	bl	8004dc2 <HAL_RTC_SetTime>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800205e:	f000 fa10 	bl	8002482 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002062:	2303      	movs	r3, #3
 8002064:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x29;
 800206e:	2329      	movs	r3, #41	; 0x29
 8002070:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800207a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207e:	2201      	movs	r2, #1
 8002080:	4619      	mov	r1, r3
 8002082:	4818      	ldr	r0, [pc, #96]	; (80020e4 <MX_RTC_Init+0x114>)
 8002084:	f002 ffb8 	bl	8004ff8 <HAL_RTC_SetDate>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800208e:	f000 f9f8 	bl	8002482 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002092:	2300      	movs	r3, #0
 8002094:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002096:	2300      	movs	r3, #0
 8002098:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800209a:	2300      	movs	r3, #0
 800209c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80020aa:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 80020ae:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80020be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80020c4:	463b      	mov	r3, r7
 80020c6:	2201      	movs	r2, #1
 80020c8:	4619      	mov	r1, r3
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <MX_RTC_Init+0x114>)
 80020cc:	f003 f88a 	bl	80051e4 <HAL_RTC_SetAlarm_IT>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80020d6:	f000 f9d4 	bl	8002482 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	3740      	adds	r7, #64	; 0x40
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20001864 	.word	0x20001864
 80020e8:	40002800 	.word	0x40002800

080020ec <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MX_SDIO_SD_Init+0x38>)
 80020f2:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <MX_SDIO_SD_Init+0x3c>)
 80020f4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <MX_SDIO_SD_Init+0x38>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <MX_SDIO_SD_Init+0x38>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <MX_SDIO_SD_Init+0x38>)
 8002104:	2200      	movs	r2, #0
 8002106:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <MX_SDIO_SD_Init+0x38>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <MX_SDIO_SD_Init+0x38>)
 8002110:	2200      	movs	r2, #0
 8002112:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <MX_SDIO_SD_Init+0x38>)
 8002116:	22ff      	movs	r2, #255	; 0xff
 8002118:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	20001900 	.word	0x20001900
 8002128:	40012c00 	.word	0x40012c00

0800212c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002130:	4b17      	ldr	r3, [pc, #92]	; (8002190 <MX_SPI2_Init+0x64>)
 8002132:	4a18      	ldr	r2, [pc, #96]	; (8002194 <MX_SPI2_Init+0x68>)
 8002134:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <MX_SPI2_Init+0x64>)
 8002138:	f44f 7282 	mov.w	r2, #260	; 0x104
 800213c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800213e:	4b14      	ldr	r3, [pc, #80]	; (8002190 <MX_SPI2_Init+0x64>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <MX_SPI2_Init+0x64>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MX_SPI2_Init+0x64>)
 800214c:	2202      	movs	r2, #2
 800214e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <MX_SPI2_Init+0x64>)
 8002152:	2201      	movs	r2, #1
 8002154:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_SPI2_Init+0x64>)
 8002158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_SPI2_Init+0x64>)
 8002160:	2228      	movs	r2, #40	; 0x28
 8002162:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <MX_SPI2_Init+0x64>)
 8002166:	2200      	movs	r2, #0
 8002168:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_SPI2_Init+0x64>)
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <MX_SPI2_Init+0x64>)
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_SPI2_Init+0x64>)
 8002178:	220a      	movs	r2, #10
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800217c:	4804      	ldr	r0, [pc, #16]	; (8002190 <MX_SPI2_Init+0x64>)
 800217e:	f004 fe69 	bl	8006e54 <HAL_SPI_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002188:	f000 f97b 	bl	8002482 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200004e4 	.word	0x200004e4
 8002194:	40003800 	.word	0x40003800

08002198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	2224      	movs	r2, #36	; 0x24
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f00a f9a8 	bl	800c4fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <MX_TIM2_Init+0xa4>)
 80021b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021bc:	4b1f      	ldr	r3, [pc, #124]	; (800223c <MX_TIM2_Init+0xa4>)
 80021be:	2200      	movs	r2, #0
 80021c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <MX_TIM2_Init+0xa4>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <MX_TIM2_Init+0xa4>)
 80021ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d0:	4b1a      	ldr	r3, [pc, #104]	; (800223c <MX_TIM2_Init+0xa4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d6:	4b19      	ldr	r3, [pc, #100]	; (800223c <MX_TIM2_Init+0xa4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80021dc:	2301      	movs	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021e4:	2301      	movs	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80021ec:	2305      	movs	r3, #5
 80021ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021f4:	2301      	movs	r3, #1
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 80021fc:	2305      	movs	r3, #5
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	4619      	mov	r1, r3
 8002206:	480d      	ldr	r0, [pc, #52]	; (800223c <MX_TIM2_Init+0xa4>)
 8002208:	f005 fbc7 	bl	800799a <HAL_TIM_Encoder_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002212:	f000 f936 	bl	8002482 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	4619      	mov	r1, r3
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <MX_TIM2_Init+0xa4>)
 8002224:	f005 fe78 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800222e:	f000 f928 	bl	8002482 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	3730      	adds	r7, #48	; 0x30
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200029bc 	.word	0x200029bc

08002240 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002246:	463b      	mov	r3, r7
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <MX_TIM6_Init+0x64>)
 8002250:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <MX_TIM6_Init+0x68>)
 8002252:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000;
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <MX_TIM6_Init+0x64>)
 8002256:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800225a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_TIM6_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <MX_TIM6_Init+0x64>)
 8002264:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002268:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_TIM6_Init+0x64>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <MX_TIM6_Init+0x64>)
 8002272:	f005 fb43 	bl	80078fc <HAL_TIM_Base_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800227c:	f000 f901 	bl	8002482 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002280:	2320      	movs	r3, #32
 8002282:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002288:	463b      	mov	r3, r7
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_TIM6_Init+0x64>)
 800228e:	f005 fe43 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002298:	f000 f8f3 	bl	8002482 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	200018a0 	.word	0x200018a0
 80022a8:	40001000 	.word	0x40001000

080022ac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <MX_DMA_Init+0x3c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <MX_DMA_Init+0x3c>)
 80022bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <MX_DMA_Init+0x3c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	2038      	movs	r0, #56	; 0x38
 80022d4:	f001 f9ff 	bl	80036d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022d8:	2038      	movs	r0, #56	; 0x38
 80022da:	f001 fa18 	bl	800370e <HAL_NVIC_EnableIRQ>

}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800

080022ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b46      	ldr	r3, [pc, #280]	; (8002420 <MX_GPIO_Init+0x134>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a45      	ldr	r2, [pc, #276]	; (8002420 <MX_GPIO_Init+0x134>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <MX_GPIO_Init+0x134>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <MX_GPIO_Init+0x134>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a3e      	ldr	r2, [pc, #248]	; (8002420 <MX_GPIO_Init+0x134>)
 8002328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b3c      	ldr	r3, [pc, #240]	; (8002420 <MX_GPIO_Init+0x134>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <MX_GPIO_Init+0x134>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a37      	ldr	r2, [pc, #220]	; (8002420 <MX_GPIO_Init+0x134>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b35      	ldr	r3, [pc, #212]	; (8002420 <MX_GPIO_Init+0x134>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	4b31      	ldr	r3, [pc, #196]	; (8002420 <MX_GPIO_Init+0x134>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a30      	ldr	r2, [pc, #192]	; (8002420 <MX_GPIO_Init+0x134>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <MX_GPIO_Init+0x134>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <MX_GPIO_Init+0x134>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a29      	ldr	r2, [pc, #164]	; (8002420 <MX_GPIO_Init+0x134>)
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b27      	ldr	r3, [pc, #156]	; (8002420 <MX_GPIO_Init+0x134>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	2110      	movs	r1, #16
 8002392:	4824      	ldr	r0, [pc, #144]	; (8002424 <MX_GPIO_Init+0x138>)
 8002394:	f001 ff18 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	f241 4104 	movw	r1, #5124	; 0x1404
 800239e:	4822      	ldr	r0, [pc, #136]	; (8002428 <MX_GPIO_Init+0x13c>)
 80023a0:	f001 ff12 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Accel_CS_Pin */
  GPIO_InitStruct.Pin = Accel_CS_Pin;
 80023a4:	2310      	movs	r3, #16
 80023a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a8:	2301      	movs	r3, #1
 80023aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Accel_CS_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	481a      	ldr	r0, [pc, #104]	; (8002424 <MX_GPIO_Init+0x138>)
 80023bc:	f001 fd52 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gyro_CS_Pin Magnet_CS_Pin SPI_CS_FOC_Pin */
  GPIO_InitStruct.Pin = Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin;
 80023c0:	f241 4304 	movw	r3, #5124	; 0x1404
 80023c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	4813      	ldr	r0, [pc, #76]	; (8002428 <MX_GPIO_Init+0x13c>)
 80023da:	f001 fd43 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Det_Pin */
  GPIO_InitStruct.Pin = SD_Det_Pin;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Det_GPIO_Port, &GPIO_InitStruct);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	480e      	ldr	r0, [pc, #56]	; (800242c <MX_GPIO_Init+0x140>)
 80023f2:	f001 fd37 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002408:	2300      	movs	r3, #0
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4804      	ldr	r0, [pc, #16]	; (8002424 <MX_GPIO_Init+0x138>)
 8002414:	f001 fd26 	bl	8003e64 <HAL_GPIO_Init>

}
 8002418:	bf00      	nop
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	40020000 	.word	0x40020000
 8002428:	40020400 	.word	0x40020400
 800242c:	40020800 	.word	0x40020800

08002430 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch){
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff f916 	bl	800166c <ITM_SendChar>
	return ch;
 8002440:	687b      	ldr	r3, [r7, #4]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <_write>:

int _write(int file, char *ptr, int len){
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e009      	b.n	8002470 <_write+0x26>
		__io_putchar(*ptr++);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	60ba      	str	r2, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ffe3 	bl	8002430 <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3301      	adds	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	dbf1      	blt.n	800245c <_write+0x12>
	}
	return len;
 8002478:	687b      	ldr	r3, [r7, #4]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <update_file>:
	return fresult;
}

/*********************UPDATING an existing file ***************************/
FRESULT update_file(char *filename, char *data, char *timestamp, char *msec_stamp, FIL *fil, UINT *bw)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
	FRESULT fresult;

	strcat(data,timestamp);
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	68b8      	ldr	r0, [r7, #8]
 80024a2:	f00b f877 	bl	800d594 <strcat>
	strcat(data,msec_stamp);
 80024a6:	6839      	ldr	r1, [r7, #0]
 80024a8:	68b8      	ldr	r0, [r7, #8]
 80024aa:	f00b f873 	bl	800d594 <strcat>
	strcat(data,"\n");
 80024ae:	68b8      	ldr	r0, [r7, #8]
 80024b0:	f7fd fe8e 	bl	80001d0 <strlen>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4413      	add	r3, r2
 80024bc:	4916      	ldr	r1, [pc, #88]	; (8002518 <update_file+0x88>)
 80024be:	461a      	mov	r2, r3
 80024c0:	460b      	mov	r3, r1
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	8013      	strh	r3, [r2, #0]

	//printf("lib\n");
	/* Open the file with write access */
	fresult = f_open(fil, filename, FA_OPEN_APPEND | FA_WRITE);// FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80024c6:	2232      	movs	r2, #50	; 0x32
 80024c8:	68f9      	ldr	r1, [r7, #12]
 80024ca:	6a38      	ldr	r0, [r7, #32]
 80024cc:	f008 ff1e 	bl	800b30c <f_open>
 80024d0:	4603      	mov	r3, r0
 80024d2:	75fb      	strb	r3, [r7, #23]
	if (fresult!=FR_OK){
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <update_file+0x50>
		printf("update_file - f_open fodeu\n " );
 80024da:	4810      	ldr	r0, [pc, #64]	; (800251c <update_file+0x8c>)
 80024dc:	f00a ffae 	bl	800d43c <iprintf>

	/* Move to offset to the end of the file */
	//fresult = f_lseek(fil, fil->fptr);

	/* write the string to the file */
	fresult = f_printf(fil, data); //pode precisar de um "\n"
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6a38      	ldr	r0, [r7, #32]
 80024e4:	f009 fb92 	bl	800bc0c <f_printf>
 80024e8:	4603      	mov	r3, r0
 80024ea:	75fb      	strb	r3, [r7, #23]
	if (fresult!=FR_OK){
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <update_file+0x68>
			printf("update_file - f_printf fodeu\n " );
 80024f2:	480b      	ldr	r0, [pc, #44]	; (8002520 <update_file+0x90>)
 80024f4:	f00a ffa2 	bl	800d43c <iprintf>
		}
	fresult = f_close (fil);
 80024f8:	6a38      	ldr	r0, [r7, #32]
 80024fa:	f009 fae5 	bl	800bac8 <f_close>
 80024fe:	4603      	mov	r3, r0
 8002500:	75fb      	strb	r3, [r7, #23]
	if(fresult != FR_OK){
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <update_file+0x7e>
		printf("update_file - f_close fodeu\n " );
 8002508:	4806      	ldr	r0, [pc, #24]	; (8002524 <update_file+0x94>)
 800250a:	f00a ff97 	bl	800d43c <iprintf>
	}
	return fresult;
 800250e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	080105e4 	.word	0x080105e4
 800251c:	080105e8 	.word	0x080105e8
 8002520:	08010608 	.word	0x08010608
 8002524:	08010628 	.word	0x08010628

08002528 <get_timestamp>:

char *get_timestamp(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currentTime, RTC_DateTypeDef *currentDate){
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b091      	sub	sp, #68	; 0x44
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]

	time_t timestamp;
	struct tm currTime;

	HAL_RTC_GetTime(hrtc, currentTime, RTC_FORMAT_BIN);
 8002534:	2200      	movs	r2, #0
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f002 fcff 	bl	8004f3c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currentDate, RTC_FORMAT_BIN);
 800253e:	2200      	movs	r2, #0
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f002 fdff 	bl	8005146 <HAL_RTC_GetDate>


	currTime.tm_year = currentDate->Year-16;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	78db      	ldrb	r3, [r3, #3]
 800254c:	3b10      	subs	r3, #16
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
	currTime.tm_mday = currentDate->Date-6;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	789b      	ldrb	r3, [r3, #2]
 8002554:	3b06      	subs	r3, #6
 8002556:	623b      	str	r3, [r7, #32]
	currTime.tm_mon  = currentDate->Month-2;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	3b02      	subs	r3, #2
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
	currTime.tm_hour = currentTime->Hours+8;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	3308      	adds	r3, #8
 8002566:	61fb      	str	r3, [r7, #28]
	currTime.tm_min  = currentTime->Minutes-23;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	3b17      	subs	r3, #23
 800256e:	61bb      	str	r3, [r7, #24]
	currTime.tm_sec  = currentTime->Seconds;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	789b      	ldrb	r3, [r3, #2]
 8002574:	617b      	str	r3, [r7, #20]

	timestamp = mktime(&currTime);
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	4618      	mov	r0, r3
 800257c:	f00a f8a0 	bl	800c6c0 <mktime>
 8002580:	4603      	mov	r3, r0
 8002582:	460c      	mov	r4, r1
 8002584:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	return asctime(gmtime(&timestamp));
 8002588:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800258c:	4618      	mov	r0, r3
 800258e:	f009 fec1 	bl	800c314 <gmtime>
 8002592:	4603      	mov	r3, r0
 8002594:	4618      	mov	r0, r3
 8002596:	f009 fe7b 	bl	800c290 <asctime>
 800259a:	4603      	mov	r3, r0

}
 800259c:	4618      	mov	r0, r3
 800259e:	3744      	adds	r7, #68	; 0x44
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}

080025a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_MspInit+0x4c>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <HAL_MspInit+0x4c>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_MspInit+0x4c>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_MspInit+0x4c>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_MspInit+0x4c>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_MspInit+0x4c>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08c      	sub	sp, #48	; 0x30
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a49      	ldr	r2, [pc, #292]	; (8002738 <HAL_ADC_MspInit+0x144>)
 8002612:	4293      	cmp	r3, r2
 8002614:	f040 808c 	bne.w	8002730 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_ADC_MspInit+0x148>)
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	4a46      	ldr	r2, [pc, #280]	; (800273c <HAL_ADC_MspInit+0x148>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	6453      	str	r3, [r2, #68]	; 0x44
 8002628:	4b44      	ldr	r3, [pc, #272]	; (800273c <HAL_ADC_MspInit+0x148>)
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_ADC_MspInit+0x148>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	4a3f      	ldr	r2, [pc, #252]	; (800273c <HAL_ADC_MspInit+0x148>)
 800263e:	f043 0304 	orr.w	r3, r3, #4
 8002642:	6313      	str	r3, [r2, #48]	; 0x30
 8002644:	4b3d      	ldr	r3, [pc, #244]	; (800273c <HAL_ADC_MspInit+0x148>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	4b39      	ldr	r3, [pc, #228]	; (800273c <HAL_ADC_MspInit+0x148>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	4a38      	ldr	r2, [pc, #224]	; (800273c <HAL_ADC_MspInit+0x148>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6313      	str	r3, [r2, #48]	; 0x30
 8002660:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_ADC_MspInit+0x148>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_ADC_MspInit+0x148>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_ADC_MspInit+0x148>)
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	6313      	str	r3, [r2, #48]	; 0x30
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_ADC_MspInit+0x148>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN13
    PA2     ------> ADC1_IN2
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = curr_u_Pin|curr_v_Pin|brk_pedal_Pin|acc_pedal_Pin;
 8002688:	230f      	movs	r3, #15
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800268c:	2303      	movs	r3, #3
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	4829      	ldr	r0, [pc, #164]	; (8002740 <HAL_ADC_MspInit+0x14c>)
 800269c:	f001 fbe2 	bl	8003e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = curr_w_Pin;
 80026a0:	2304      	movs	r3, #4
 80026a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a4:	2303      	movs	r3, #3
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(curr_w_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4619      	mov	r1, r3
 80026b2:	4824      	ldr	r0, [pc, #144]	; (8002744 <HAL_ADC_MspInit+0x150>)
 80026b4:	f001 fbd6 	bl	8003e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026b8:	2303      	movs	r3, #3
 80026ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026bc:	2303      	movs	r3, #3
 80026be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	481f      	ldr	r0, [pc, #124]	; (8002748 <HAL_ADC_MspInit+0x154>)
 80026cc:	f001 fbca 	bl	8003e64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <HAL_ADC_MspInit+0x158>)
 80026d2:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <HAL_ADC_MspInit+0x15c>)
 80026d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_ADC_MspInit+0x158>)
 80026d8:	2200      	movs	r2, #0
 80026da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_ADC_MspInit+0x158>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_ADC_MspInit+0x158>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_ADC_MspInit+0x158>)
 80026ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026f0:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_ADC_MspInit+0x158>)
 80026f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <HAL_ADC_MspInit+0x158>)
 80026fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_ADC_MspInit+0x158>)
 8002702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002706:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_ADC_MspInit+0x158>)
 800270a:	2200      	movs	r2, #0
 800270c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_ADC_MspInit+0x158>)
 8002710:	2200      	movs	r2, #0
 8002712:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002714:	480d      	ldr	r0, [pc, #52]	; (800274c <HAL_ADC_MspInit+0x158>)
 8002716:	f001 f815 	bl	8003744 <HAL_DMA_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002720:	f7ff feaf 	bl	8002482 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <HAL_ADC_MspInit+0x158>)
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
 800272a:	4a08      	ldr	r2, [pc, #32]	; (800274c <HAL_ADC_MspInit+0x158>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002730:	bf00      	nop
 8002732:	3730      	adds	r7, #48	; 0x30
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40012000 	.word	0x40012000
 800273c:	40023800 	.word	0x40023800
 8002740:	40020800 	.word	0x40020800
 8002744:	40020000 	.word	0x40020000
 8002748:	40020400 	.word	0x40020400
 800274c:	20001804 	.word	0x20001804
 8002750:	40026410 	.word	0x40026410

08002754 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a08      	ldr	r2, [pc, #32]	; (8002784 <HAL_RTC_MspInit+0x30>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10a      	bne.n	800277c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_RTC_MspInit+0x34>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	2029      	movs	r0, #41	; 0x29
 8002772:	f000 ffb0 	bl	80036d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002776:	2029      	movs	r0, #41	; 0x29
 8002778:	f000 ffc9 	bl	800370e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40002800 	.word	0x40002800
 8002788:	42470e3c 	.word	0x42470e3c

0800278c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a35      	ldr	r2, [pc, #212]	; (8002880 <HAL_SD_MspInit+0xf4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d163      	bne.n	8002876 <HAL_SD_MspInit+0xea>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	4b34      	ldr	r3, [pc, #208]	; (8002884 <HAL_SD_MspInit+0xf8>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	4a33      	ldr	r2, [pc, #204]	; (8002884 <HAL_SD_MspInit+0xf8>)
 80027b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027bc:	6453      	str	r3, [r2, #68]	; 0x44
 80027be:	4b31      	ldr	r3, [pc, #196]	; (8002884 <HAL_SD_MspInit+0xf8>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_SD_MspInit+0xf8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a2c      	ldr	r2, [pc, #176]	; (8002884 <HAL_SD_MspInit+0xf8>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_SD_MspInit+0xf8>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_SD_MspInit+0xf8>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <HAL_SD_MspInit+0xf8>)
 80027f0:	f043 0308 	orr.w	r3, r3, #8
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_SD_MspInit+0xf8>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800280c:	2301      	movs	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002814:	230c      	movs	r3, #12
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	481a      	ldr	r0, [pc, #104]	; (8002888 <HAL_SD_MspInit+0xfc>)
 8002820:	f001 fb20 	bl	8003e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002824:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002832:	2303      	movs	r3, #3
 8002834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002836:	230c      	movs	r3, #12
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	4619      	mov	r1, r3
 8002840:	4811      	ldr	r0, [pc, #68]	; (8002888 <HAL_SD_MspInit+0xfc>)
 8002842:	f001 fb0f 	bl	8003e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002846:	2304      	movs	r3, #4
 8002848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284e:	2301      	movs	r3, #1
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002856:	230c      	movs	r3, #12
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	480a      	ldr	r0, [pc, #40]	; (800288c <HAL_SD_MspInit+0x100>)
 8002862:	f001 faff 	bl	8003e64 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	2031      	movs	r0, #49	; 0x31
 800286c:	f000 ff33 	bl	80036d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002870:	2031      	movs	r0, #49	; 0x31
 8002872:	f000 ff4c 	bl	800370e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002876:	bf00      	nop
 8002878:	3728      	adds	r7, #40	; 0x28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40012c00 	.word	0x40012c00
 8002884:	40023800 	.word	0x40023800
 8002888:	40020800 	.word	0x40020800
 800288c:	40020c00 	.word	0x40020c00

08002890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_SPI_MspInit+0x84>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12c      	bne.n	800290c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <HAL_SPI_MspInit+0x88>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_SPI_MspInit+0x88>)
 80028bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_SPI_MspInit+0x88>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_SPI_MspInit+0x88>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a10      	ldr	r2, [pc, #64]	; (8002918 <HAL_SPI_MspInit+0x88>)
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_SPI_MspInit+0x88>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80028ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f8:	2303      	movs	r3, #3
 80028fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028fc:	2305      	movs	r3, #5
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	4619      	mov	r1, r3
 8002906:	4805      	ldr	r0, [pc, #20]	; (800291c <HAL_SPI_MspInit+0x8c>)
 8002908:	f001 faac 	bl	8003e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800290c:	bf00      	nop
 800290e:	3728      	adds	r7, #40	; 0x28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40003800 	.word	0x40003800
 8002918:	40023800 	.word	0x40023800
 800291c:	40020400 	.word	0x40020400

08002920 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002940:	d12b      	bne.n	800299a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x84>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin;
 800297a:	2303      	movs	r3, #3
 800297c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800298a:	2301      	movs	r3, #1
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002996:	f001 fa65 	bl	8003e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800299a:	bf00      	nop
 800299c:	3728      	adds	r7, #40	; 0x28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020000 	.word	0x40020000

080029ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <HAL_TIM_Base_MspInit+0x48>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d115      	bne.n	80029ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_TIM_Base_MspInit+0x4c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <HAL_TIM_Base_MspInit+0x4c>)
 80029c8:	f043 0310 	orr.w	r3, r3, #16
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_TIM_Base_MspInit+0x4c>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	2036      	movs	r0, #54	; 0x36
 80029e0:	f000 fe79 	bl	80036d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029e4:	2036      	movs	r0, #54	; 0x36
 80029e6:	f000 fe92 	bl	800370e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40001000 	.word	0x40001000
 80029f8:	40023800 	.word	0x40023800

080029fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a0e:	e7fe      	b.n	8002a0e <HardFault_Handler+0x4>

08002a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <MemManage_Handler+0x4>

08002a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <BusFault_Handler+0x4>

08002a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <UsageFault_Handler+0x4>

08002a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a50:	f000 f93a 	bl	8002cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <RTC_Alarm_IRQHandler+0x10>)
 8002a5e:	f002 fcf9 	bl	8005454 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20001864 	.word	0x20001864

08002a6c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <SDIO_IRQHandler+0x10>)
 8002a72:	f003 f9fb 	bl	8005e6c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20001900 	.word	0x20001900

08002a80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <TIM6_DAC_IRQHandler+0x10>)
 8002a86:	f005 f851 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200018a0 	.word	0x200018a0

08002a94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <DMA2_Stream0_IRQHandler+0x10>)
 8002a9a:	f000 ff7b 	bl	8003994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20001804 	.word	0x20001804

08002aa8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	e00a      	b.n	8002ad0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aba:	f3af 8000 	nop.w
 8002abe:	4601      	mov	r1, r0
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	60ba      	str	r2, [r7, #8]
 8002ac6:	b2ca      	uxtb	r2, r1
 8002ac8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	dbf0      	blt.n	8002aba <_read+0x12>
	}

return len;
 8002ad8:	687b      	ldr	r3, [r7, #4]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <_isatty>:

int _isatty(int file)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
	return 1;
 8002b22:	2301      	movs	r3, #1
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <_sbrk+0x50>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <_sbrk+0x16>
		heap_end = &end;
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <_sbrk+0x50>)
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <_sbrk+0x54>)
 8002b60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002b62:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <_sbrk+0x50>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <_sbrk+0x50>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4413      	add	r3, r2
 8002b70:	466a      	mov	r2, sp
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d907      	bls.n	8002b86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002b76:	f009 fbc7 	bl	800c308 <__errno>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	230c      	movs	r3, #12
 8002b7e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
 8002b84:	e006      	b.n	8002b94 <_sbrk+0x48>
	}

	heap_end += incr;
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <_sbrk+0x50>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4a03      	ldr	r2, [pc, #12]	; (8002b9c <_sbrk+0x50>)
 8002b90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002b92:	68fb      	ldr	r3, [r7, #12]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000278 	.word	0x20000278
 8002ba0:	20006b28 	.word	0x20006b28

08002ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <SystemInit+0x28>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <SystemInit+0x28>)
 8002bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <SystemInit+0x28>)
 8002bba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bbe:	609a      	str	r2, [r3, #8]
#endif
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bd6:	e003      	b.n	8002be0 <LoopCopyDataInit>

08002bd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bde:	3104      	adds	r1, #4

08002be0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002be0:	480b      	ldr	r0, [pc, #44]	; (8002c10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002be4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002be6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002be8:	d3f6      	bcc.n	8002bd8 <CopyDataInit>
  ldr  r2, =_sbss
 8002bea:	4a0b      	ldr	r2, [pc, #44]	; (8002c18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002bec:	e002      	b.n	8002bf4 <LoopFillZerobss>

08002bee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002bee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bf0:	f842 3b04 	str.w	r3, [r2], #4

08002bf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bf8:	d3f9      	bcc.n	8002bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bfa:	f7ff ffd3 	bl	8002ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bfe:	f009 fc49 	bl	800c494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c02:	f7fe fdc1 	bl	8001788 <main>
  bx  lr    
 8002c06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c0c:	08010f54 	.word	0x08010f54
  ldr  r0, =_sdata
 8002c10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c14:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 8002c18:	20000244 	.word	0x20000244
  ldr  r3, = _ebss
 8002c1c:	20006b24 	.word	0x20006b24

08002c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c20:	e7fe      	b.n	8002c20 <ADC_IRQHandler>
	...

08002c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <HAL_Init+0x40>)
 8002c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_Init+0x40>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_Init+0x40>)
 8002c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_Init+0x40>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <HAL_Init+0x40>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 fd37 	bl	80036c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f000 f808 	bl	8002c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c58:	f7ff fca4 	bl	80025a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023c00 	.word	0x40023c00

08002c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x54>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_InitTick+0x58>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fd4f 	bl	800372a <HAL_SYSTICK_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00e      	b.n	8002cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b0f      	cmp	r3, #15
 8002c9a:	d80a      	bhi.n	8002cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f000 fd17 	bl	80036d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <HAL_InitTick+0x5c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000004 	.word	0x20000004
 8002cc0:	2000000c 	.word	0x2000000c
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_IncTick+0x24>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_IncTick+0x24>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	2000000c 	.word	0x2000000c
 8002cec:	20004aac 	.word	0x20004aac

08002cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_GetTick+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20004aac 	.word	0x20004aac

08002d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff ffee 	bl	8002cf0 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d005      	beq.n	8002d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_Delay+0x40>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d2e:	bf00      	nop
 8002d30:	f7ff ffde 	bl	8002cf0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d8f7      	bhi.n	8002d30 <HAL_Delay+0x28>
  {
  }
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	2000000c 	.word	0x2000000c

08002d4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e033      	b.n	8002dca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fc42 	bl	80025f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d118      	bne.n	8002dbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d92:	f023 0302 	bic.w	r3, r3, #2
 8002d96:	f043 0202 	orr.w	r2, r3, #2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fa40 	bl	8003224 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f023 0303 	bic.w	r3, r3, #3
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
 8002dba:	e001      	b.n	8002dc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_Start_DMA+0x1e>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e0cc      	b.n	8002f8c <HAL_ADC_Start_DMA+0x1b8>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d018      	beq.n	8002e3a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e18:	4b5e      	ldr	r3, [pc, #376]	; (8002f94 <HAL_ADC_Start_DMA+0x1c0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a5e      	ldr	r2, [pc, #376]	; (8002f98 <HAL_ADC_Start_DMA+0x1c4>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0c9a      	lsrs	r2, r3, #18
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e2c:	e002      	b.n	8002e34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	f040 80a0 	bne.w	8002f8a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e88:	d106      	bne.n	8002e98 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f023 0206 	bic.w	r2, r3, #6
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	645a      	str	r2, [r3, #68]	; 0x44
 8002e96:	e002      	b.n	8002e9e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	; (8002f9c <HAL_ADC_Start_DMA+0x1c8>)
 8002ea8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	4a3c      	ldr	r2, [pc, #240]	; (8002fa0 <HAL_ADC_Start_DMA+0x1cc>)
 8002eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <HAL_ADC_Start_DMA+0x1d0>)
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	4a3a      	ldr	r2, [pc, #232]	; (8002fa8 <HAL_ADC_Start_DMA+0x1d4>)
 8002ec0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002eca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002eda:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	334c      	adds	r3, #76	; 0x4c
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f000 fcd0 	bl	80038a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d12a      	bne.n	8002f62 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a26      	ldr	r2, [pc, #152]	; (8002fac <HAL_ADC_Start_DMA+0x1d8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d015      	beq.n	8002f42 <HAL_ADC_Start_DMA+0x16e>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <HAL_ADC_Start_DMA+0x1dc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_Start_DMA+0x158>
 8002f20:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <HAL_ADC_Start_DMA+0x1c8>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a20      	ldr	r2, [pc, #128]	; (8002fb4 <HAL_ADC_Start_DMA+0x1e0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d129      	bne.n	8002f8a <HAL_ADC_Start_DMA+0x1b6>
 8002f36:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_ADC_Start_DMA+0x1c8>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2b0f      	cmp	r3, #15
 8002f40:	d823      	bhi.n	8002f8a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d11c      	bne.n	8002f8a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	e013      	b.n	8002f8a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a11      	ldr	r2, [pc, #68]	; (8002fac <HAL_ADC_Start_DMA+0x1d8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d10e      	bne.n	8002f8a <HAL_ADC_Start_DMA+0x1b6>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d107      	bne.n	8002f8a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f88:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000004 	.word	0x20000004
 8002f98:	431bde83 	.word	0x431bde83
 8002f9c:	40012300 	.word	0x40012300
 8002fa0:	0800341d 	.word	0x0800341d
 8002fa4:	080034d7 	.word	0x080034d7
 8002fa8:	080034f3 	.word	0x080034f3
 8002fac:	40012000 	.word	0x40012000
 8002fb0:	40012100 	.word	0x40012100
 8002fb4:	40012200 	.word	0x40012200

08002fb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x1c>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e105      	b.n	8003208 <HAL_ADC_ConfigChannel+0x228>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b09      	cmp	r3, #9
 800300a:	d925      	bls.n	8003058 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	3b1e      	subs	r3, #30
 8003022:	2207      	movs	r2, #7
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43da      	mvns	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	400a      	ands	r2, r1
 8003030:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68d9      	ldr	r1, [r3, #12]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	4618      	mov	r0, r3
 8003044:	4603      	mov	r3, r0
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4403      	add	r3, r0
 800304a:	3b1e      	subs	r3, #30
 800304c:	409a      	lsls	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	e022      	b.n	800309e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6919      	ldr	r1, [r3, #16]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	2207      	movs	r2, #7
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	400a      	ands	r2, r1
 800307a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6919      	ldr	r1, [r3, #16]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	4618      	mov	r0, r3
 800308e:	4603      	mov	r3, r0
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4403      	add	r3, r0
 8003094:	409a      	lsls	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d824      	bhi.n	80030f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	3b05      	subs	r3, #5
 80030b8:	221f      	movs	r2, #31
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	400a      	ands	r2, r1
 80030c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b05      	subs	r3, #5
 80030e2:	fa00 f203 	lsl.w	r2, r0, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34
 80030ee:	e04c      	b.n	800318a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b0c      	cmp	r3, #12
 80030f6:	d824      	bhi.n	8003142 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	3b23      	subs	r3, #35	; 0x23
 800310a:	221f      	movs	r2, #31
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43da      	mvns	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	400a      	ands	r2, r1
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	4618      	mov	r0, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b23      	subs	r3, #35	; 0x23
 8003134:	fa00 f203 	lsl.w	r2, r0, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
 8003140:	e023      	b.n	800318a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	3b41      	subs	r3, #65	; 0x41
 8003154:	221f      	movs	r2, #31
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	400a      	ands	r2, r1
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	4618      	mov	r0, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	3b41      	subs	r3, #65	; 0x41
 800317e:	fa00 f203 	lsl.w	r2, r0, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800318a:	4b22      	ldr	r3, [pc, #136]	; (8003214 <HAL_ADC_ConfigChannel+0x234>)
 800318c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a21      	ldr	r2, [pc, #132]	; (8003218 <HAL_ADC_ConfigChannel+0x238>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d109      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x1cc>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b12      	cmp	r3, #18
 800319e:	d105      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a19      	ldr	r2, [pc, #100]	; (8003218 <HAL_ADC_ConfigChannel+0x238>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d123      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x21e>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d003      	beq.n	80031c6 <HAL_ADC_ConfigChannel+0x1e6>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b11      	cmp	r3, #17
 80031c4:	d11b      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d111      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_ADC_ConfigChannel+0x23c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <HAL_ADC_ConfigChannel+0x240>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	0c9a      	lsrs	r2, r3, #18
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031f0:	e002      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f9      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40012300 	.word	0x40012300
 8003218:	40012000 	.word	0x40012000
 800321c:	20000004 	.word	0x20000004
 8003220:	431bde83 	.word	0x431bde83

08003224 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800322c:	4b79      	ldr	r3, [pc, #484]	; (8003414 <ADC_Init+0x1f0>)
 800322e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	431a      	orrs	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	021a      	lsls	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800327c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	4a58      	ldr	r2, [pc, #352]	; (8003418 <ADC_Init+0x1f4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6899      	ldr	r1, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6899      	ldr	r1, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	e00f      	b.n	8003322 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003320:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0202 	bic.w	r2, r2, #2
 8003330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6899      	ldr	r1, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7e1b      	ldrb	r3, [r3, #24]
 800333c:	005a      	lsls	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800335e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800336e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	3b01      	subs	r3, #1
 800337c:	035a      	lsls	r2, r3, #13
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	e007      	b.n	8003398 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003396:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	051a      	lsls	r2, r3, #20
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033da:	025a      	lsls	r2, r3, #9
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6899      	ldr	r1, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	029a      	lsls	r2, r3, #10
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	609a      	str	r2, [r3, #8]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40012300 	.word	0x40012300
 8003418:	0f000001 	.word	0x0f000001

0800341c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003432:	2b00      	cmp	r3, #0
 8003434:	d13c      	bne.n	80034b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d12b      	bne.n	80034a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003454:	2b00      	cmp	r3, #0
 8003456:	d127      	bne.n	80034a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003470:	2b00      	cmp	r3, #0
 8003472:	d119      	bne.n	80034a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0220 	bic.w	r2, r2, #32
 8003482:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f043 0201 	orr.w	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7fe f907 	bl	80016bc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034ae:	e00e      	b.n	80034ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff fd85 	bl	8002fcc <HAL_ADC_ErrorCallback>
}
 80034c2:	e004      	b.n	80034ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f7ff fd67 	bl	8002fb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2240      	movs	r2, #64	; 0x40
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f043 0204 	orr.w	r2, r3, #4
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff fd5a 	bl	8002fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <__NVIC_SetPriorityGrouping>:
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <__NVIC_SetPriorityGrouping+0x44>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800353c:	4013      	ands	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800354c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003552:	4a04      	ldr	r2, [pc, #16]	; (8003564 <__NVIC_SetPriorityGrouping+0x44>)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	60d3      	str	r3, [r2, #12]
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <__NVIC_GetPriorityGrouping>:
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <__NVIC_GetPriorityGrouping+0x18>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	f003 0307 	and.w	r3, r3, #7
}
 8003576:	4618      	mov	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <__NVIC_EnableIRQ>:
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	2b00      	cmp	r3, #0
 8003594:	db0b      	blt.n	80035ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	f003 021f 	and.w	r2, r3, #31
 800359c:	4907      	ldr	r1, [pc, #28]	; (80035bc <__NVIC_EnableIRQ+0x38>)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	2001      	movs	r0, #1
 80035a6:	fa00 f202 	lsl.w	r2, r0, r2
 80035aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000e100 	.word	0xe000e100

080035c0 <__NVIC_SetPriority>:
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	6039      	str	r1, [r7, #0]
 80035ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	db0a      	blt.n	80035ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	490c      	ldr	r1, [pc, #48]	; (800360c <__NVIC_SetPriority+0x4c>)
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	0112      	lsls	r2, r2, #4
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	440b      	add	r3, r1
 80035e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035e8:	e00a      	b.n	8003600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4908      	ldr	r1, [pc, #32]	; (8003610 <__NVIC_SetPriority+0x50>)
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	3b04      	subs	r3, #4
 80035f8:	0112      	lsls	r2, r2, #4
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	440b      	add	r3, r1
 80035fe:	761a      	strb	r2, [r3, #24]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000e100 	.word	0xe000e100
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <NVIC_EncodePriority>:
{
 8003614:	b480      	push	{r7}
 8003616:	b089      	sub	sp, #36	; 0x24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f1c3 0307 	rsb	r3, r3, #7
 800362e:	2b04      	cmp	r3, #4
 8003630:	bf28      	it	cs
 8003632:	2304      	movcs	r3, #4
 8003634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3304      	adds	r3, #4
 800363a:	2b06      	cmp	r3, #6
 800363c:	d902      	bls.n	8003644 <NVIC_EncodePriority+0x30>
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3b03      	subs	r3, #3
 8003642:	e000      	b.n	8003646 <NVIC_EncodePriority+0x32>
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003648:	f04f 32ff 	mov.w	r2, #4294967295
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43da      	mvns	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	401a      	ands	r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800365c:	f04f 31ff 	mov.w	r1, #4294967295
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	fa01 f303 	lsl.w	r3, r1, r3
 8003666:	43d9      	mvns	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800366c:	4313      	orrs	r3, r2
}
 800366e:	4618      	mov	r0, r3
 8003670:	3724      	adds	r7, #36	; 0x24
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <SysTick_Config>:
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3b01      	subs	r3, #1
 8003688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800368c:	d301      	bcc.n	8003692 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800368e:	2301      	movs	r3, #1
 8003690:	e00f      	b.n	80036b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003692:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <SysTick_Config+0x40>)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3b01      	subs	r3, #1
 8003698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800369a:	210f      	movs	r1, #15
 800369c:	f04f 30ff 	mov.w	r0, #4294967295
 80036a0:	f7ff ff8e 	bl	80035c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <SysTick_Config+0x40>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <SysTick_Config+0x40>)
 80036ac:	2207      	movs	r2, #7
 80036ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	e000e010 	.word	0xe000e010

080036c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ff29 	bl	8003520 <__NVIC_SetPriorityGrouping>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b086      	sub	sp, #24
 80036da:	af00      	add	r7, sp, #0
 80036dc:	4603      	mov	r3, r0
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
 80036e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036e8:	f7ff ff3e 	bl	8003568 <__NVIC_GetPriorityGrouping>
 80036ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	6978      	ldr	r0, [r7, #20]
 80036f4:	f7ff ff8e 	bl	8003614 <NVIC_EncodePriority>
 80036f8:	4602      	mov	r2, r0
 80036fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff5d 	bl	80035c0 <__NVIC_SetPriority>
}
 8003706:	bf00      	nop
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff31 	bl	8003584 <__NVIC_EnableIRQ>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff ffa2 	bl	800367c <SysTick_Config>
 8003738:	4603      	mov	r3, r0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003750:	f7ff face 	bl	8002cf0 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e099      	b.n	8003894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003780:	e00f      	b.n	80037a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003782:	f7ff fab5 	bl	8002cf0 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b05      	cmp	r3, #5
 800378e:	d908      	bls.n	80037a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2203      	movs	r2, #3
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e078      	b.n	8003894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e8      	bne.n	8003782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4b38      	ldr	r3, [pc, #224]	; (800389c <HAL_DMA_Init+0x158>)
 80037bc:	4013      	ands	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d107      	bne.n	800380c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	4313      	orrs	r3, r2
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0307 	bic.w	r3, r3, #7
 8003822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b04      	cmp	r3, #4
 8003834:	d117      	bne.n	8003866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00e      	beq.n	8003866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fa91 	bl	8003d70 <DMA_CheckFifoParam>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2240      	movs	r2, #64	; 0x40
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003862:	2301      	movs	r3, #1
 8003864:	e016      	b.n	8003894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa48 	bl	8003d04 <DMA_CalcBaseAndBitshift>
 8003874:	4603      	mov	r3, r0
 8003876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	223f      	movs	r2, #63	; 0x3f
 800387e:	409a      	lsls	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	f010803f 	.word	0xf010803f

080038a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_DMA_Start_IT+0x26>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e040      	b.n	8003948 <HAL_DMA_Start_IT+0xa8>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d12f      	bne.n	800393a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2202      	movs	r2, #2
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f9da 	bl	8003ca8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	223f      	movs	r2, #63	; 0x3f
 80038fa:	409a      	lsls	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0216 	orr.w	r2, r2, #22
 800390e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0208 	orr.w	r2, r2, #8
 8003926:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e005      	b.n	8003946 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003942:	2302      	movs	r3, #2
 8003944:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d004      	beq.n	800396e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e00c      	b.n	8003988 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2205      	movs	r2, #5
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039a0:	4b92      	ldr	r3, [pc, #584]	; (8003bec <HAL_DMA_IRQHandler+0x258>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a92      	ldr	r2, [pc, #584]	; (8003bf0 <HAL_DMA_IRQHandler+0x25c>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	0a9b      	lsrs	r3, r3, #10
 80039ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	2208      	movs	r2, #8
 80039c0:	409a      	lsls	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01a      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0204 	bic.w	r2, r2, #4
 80039e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	2208      	movs	r2, #8
 80039ee:	409a      	lsls	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	2201      	movs	r2, #1
 8003a06:	409a      	lsls	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d012      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	2201      	movs	r2, #1
 8003a24:	409a      	lsls	r2, r3
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2e:	f043 0202 	orr.w	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d012      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	2204      	movs	r2, #4
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f043 0204 	orr.w	r2, r3, #4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	2210      	movs	r2, #16
 8003a72:	409a      	lsls	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d043      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d03c      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	2210      	movs	r2, #16
 8003a90:	409a      	lsls	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d018      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d108      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d024      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
 8003ac2:	e01f      	b.n	8003b04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01b      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
 8003ad4:	e016      	b.n	8003b04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d107      	bne.n	8003af4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0208 	bic.w	r2, r2, #8
 8003af2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	2220      	movs	r2, #32
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 808e 	beq.w	8003c32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8086 	beq.w	8003c32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b05      	cmp	r3, #5
 8003b3c:	d136      	bne.n	8003bac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0216 	bic.w	r2, r2, #22
 8003b4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x1da>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0208 	bic.w	r2, r2, #8
 8003b7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	223f      	movs	r2, #63	; 0x3f
 8003b84:	409a      	lsls	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d07d      	beq.n	8003c9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
        }
        return;
 8003baa:	e078      	b.n	8003c9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01c      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d108      	bne.n	8003bda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d030      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
 8003bd8:	e02b      	b.n	8003c32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d027      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4798      	blx	r3
 8003bea:	e022      	b.n	8003c32 <HAL_DMA_IRQHandler+0x29e>
 8003bec:	20000004 	.word	0x20000004
 8003bf0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0210 	bic.w	r2, r2, #16
 8003c10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d032      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d022      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2205      	movs	r2, #5
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3301      	adds	r3, #1
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d307      	bcc.n	8003c7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f2      	bne.n	8003c5e <HAL_DMA_IRQHandler+0x2ca>
 8003c78:	e000      	b.n	8003c7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3
 8003c9c:	e000      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c9e:	bf00      	nop
    }
  }
}
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop

08003ca8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d108      	bne.n	8003ce8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ce6:	e007      	b.n	8003cf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	3b10      	subs	r3, #16
 8003d14:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <DMA_CalcBaseAndBitshift+0x64>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d1e:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <DMA_CalcBaseAndBitshift+0x68>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d909      	bls.n	8003d46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	1d1a      	adds	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	659a      	str	r2, [r3, #88]	; 0x58
 8003d44:	e007      	b.n	8003d56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	aaaaaaab 	.word	0xaaaaaaab
 8003d6c:	080106b4 	.word	0x080106b4

08003d70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11f      	bne.n	8003dca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d855      	bhi.n	8003e3c <DMA_CheckFifoParam+0xcc>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <DMA_CheckFifoParam+0x28>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003dbb 	.word	0x08003dbb
 8003da0:	08003da9 	.word	0x08003da9
 8003da4:	08003e3d 	.word	0x08003e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d045      	beq.n	8003e40 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db8:	e042      	b.n	8003e40 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dc2:	d13f      	bne.n	8003e44 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc8:	e03c      	b.n	8003e44 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd2:	d121      	bne.n	8003e18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d836      	bhi.n	8003e48 <DMA_CheckFifoParam+0xd8>
 8003dda:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <DMA_CheckFifoParam+0x70>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003df1 	.word	0x08003df1
 8003de4:	08003df7 	.word	0x08003df7
 8003de8:	08003df1 	.word	0x08003df1
 8003dec:	08003e09 	.word	0x08003e09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      break;
 8003df4:	e02f      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d024      	beq.n	8003e4c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e06:	e021      	b.n	8003e4c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e10:	d11e      	bne.n	8003e50 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e16:	e01b      	b.n	8003e50 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <DMA_CheckFifoParam+0xb4>
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d003      	beq.n	8003e2a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e22:	e018      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      break;
 8003e28:	e015      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00e      	beq.n	8003e54 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      break;
 8003e3a:	e00b      	b.n	8003e54 <DMA_CheckFifoParam+0xe4>
      break;
 8003e3c:	bf00      	nop
 8003e3e:	e00a      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;
 8003e40:	bf00      	nop
 8003e42:	e008      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;
 8003e44:	bf00      	nop
 8003e46:	e006      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;
 8003e48:	bf00      	nop
 8003e4a:	e004      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;   
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;
 8003e54:	bf00      	nop
    }
  } 
  
  return status; 
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b089      	sub	sp, #36	; 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	e16b      	b.n	8004158 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e80:	2201      	movs	r2, #1
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	f040 815a 	bne.w	8004152 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d00b      	beq.n	8003ebe <HAL_GPIO_Init+0x5a>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d007      	beq.n	8003ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eb2:	2b11      	cmp	r3, #17
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b12      	cmp	r3, #18
 8003ebc:	d130      	bne.n	8003f20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2203      	movs	r2, #3
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 0201 	and.w	r2, r3, #1
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0xfc>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b12      	cmp	r3, #18
 8003f5e:	d123      	bne.n	8003fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	08da      	lsrs	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3208      	adds	r2, #8
 8003f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	220f      	movs	r2, #15
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	08da      	lsrs	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3208      	adds	r2, #8
 8003fa2:	69b9      	ldr	r1, [r7, #24]
 8003fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0203 	and.w	r2, r3, #3
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80b4 	beq.w	8004152 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	4b5f      	ldr	r3, [pc, #380]	; (800416c <HAL_GPIO_Init+0x308>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	4a5e      	ldr	r2, [pc, #376]	; (800416c <HAL_GPIO_Init+0x308>)
 8003ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8003ffa:	4b5c      	ldr	r3, [pc, #368]	; (800416c <HAL_GPIO_Init+0x308>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004006:	4a5a      	ldr	r2, [pc, #360]	; (8004170 <HAL_GPIO_Init+0x30c>)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3302      	adds	r3, #2
 800400e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	220f      	movs	r2, #15
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43db      	mvns	r3, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a51      	ldr	r2, [pc, #324]	; (8004174 <HAL_GPIO_Init+0x310>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d02b      	beq.n	800408a <HAL_GPIO_Init+0x226>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a50      	ldr	r2, [pc, #320]	; (8004178 <HAL_GPIO_Init+0x314>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d025      	beq.n	8004086 <HAL_GPIO_Init+0x222>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4f      	ldr	r2, [pc, #316]	; (800417c <HAL_GPIO_Init+0x318>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01f      	beq.n	8004082 <HAL_GPIO_Init+0x21e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4e      	ldr	r2, [pc, #312]	; (8004180 <HAL_GPIO_Init+0x31c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d019      	beq.n	800407e <HAL_GPIO_Init+0x21a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4d      	ldr	r2, [pc, #308]	; (8004184 <HAL_GPIO_Init+0x320>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_GPIO_Init+0x216>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4c      	ldr	r2, [pc, #304]	; (8004188 <HAL_GPIO_Init+0x324>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00d      	beq.n	8004076 <HAL_GPIO_Init+0x212>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4b      	ldr	r2, [pc, #300]	; (800418c <HAL_GPIO_Init+0x328>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <HAL_GPIO_Init+0x20e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4a      	ldr	r2, [pc, #296]	; (8004190 <HAL_GPIO_Init+0x32c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_GPIO_Init+0x20a>
 800406a:	2307      	movs	r3, #7
 800406c:	e00e      	b.n	800408c <HAL_GPIO_Init+0x228>
 800406e:	2308      	movs	r3, #8
 8004070:	e00c      	b.n	800408c <HAL_GPIO_Init+0x228>
 8004072:	2306      	movs	r3, #6
 8004074:	e00a      	b.n	800408c <HAL_GPIO_Init+0x228>
 8004076:	2305      	movs	r3, #5
 8004078:	e008      	b.n	800408c <HAL_GPIO_Init+0x228>
 800407a:	2304      	movs	r3, #4
 800407c:	e006      	b.n	800408c <HAL_GPIO_Init+0x228>
 800407e:	2303      	movs	r3, #3
 8004080:	e004      	b.n	800408c <HAL_GPIO_Init+0x228>
 8004082:	2302      	movs	r3, #2
 8004084:	e002      	b.n	800408c <HAL_GPIO_Init+0x228>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <HAL_GPIO_Init+0x228>
 800408a:	2300      	movs	r3, #0
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	f002 0203 	and.w	r2, r2, #3
 8004092:	0092      	lsls	r2, r2, #2
 8004094:	4093      	lsls	r3, r2
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4313      	orrs	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800409c:	4934      	ldr	r1, [pc, #208]	; (8004170 <HAL_GPIO_Init+0x30c>)
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	089b      	lsrs	r3, r3, #2
 80040a2:	3302      	adds	r3, #2
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040aa:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <HAL_GPIO_Init+0x330>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040ce:	4a31      	ldr	r2, [pc, #196]	; (8004194 <HAL_GPIO_Init+0x330>)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040d4:	4b2f      	ldr	r3, [pc, #188]	; (8004194 <HAL_GPIO_Init+0x330>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040f8:	4a26      	ldr	r2, [pc, #152]	; (8004194 <HAL_GPIO_Init+0x330>)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040fe:	4b25      	ldr	r3, [pc, #148]	; (8004194 <HAL_GPIO_Init+0x330>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	43db      	mvns	r3, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4013      	ands	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004122:	4a1c      	ldr	r2, [pc, #112]	; (8004194 <HAL_GPIO_Init+0x330>)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <HAL_GPIO_Init+0x330>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	43db      	mvns	r3, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800414c:	4a11      	ldr	r2, [pc, #68]	; (8004194 <HAL_GPIO_Init+0x330>)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3301      	adds	r3, #1
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	2b0f      	cmp	r3, #15
 800415c:	f67f ae90 	bls.w	8003e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004160:	bf00      	nop
 8004162:	3724      	adds	r7, #36	; 0x24
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	40023800 	.word	0x40023800
 8004170:	40013800 	.word	0x40013800
 8004174:	40020000 	.word	0x40020000
 8004178:	40020400 	.word	0x40020400
 800417c:	40020800 	.word	0x40020800
 8004180:	40020c00 	.word	0x40020c00
 8004184:	40021000 	.word	0x40021000
 8004188:	40021400 	.word	0x40021400
 800418c:	40021800 	.word	0x40021800
 8004190:	40021c00 	.word	0x40021c00
 8004194:	40013c00 	.word	0x40013c00

08004198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	887b      	ldrh	r3, [r7, #2]
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
 80041b4:	e001      	b.n	80041ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]
 80041d4:	4613      	mov	r3, r2
 80041d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041d8:	787b      	ldrb	r3, [r7, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041de:	887a      	ldrh	r2, [r7, #2]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041e4:	e003      	b.n	80041ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041e6:	887b      	ldrh	r3, [r7, #2]
 80041e8:	041a      	lsls	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	619a      	str	r2, [r3, #24]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e25b      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d075      	beq.n	8004306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421a:	4ba3      	ldr	r3, [pc, #652]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b04      	cmp	r3, #4
 8004224:	d00c      	beq.n	8004240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004226:	4ba0      	ldr	r3, [pc, #640]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800422e:	2b08      	cmp	r3, #8
 8004230:	d112      	bne.n	8004258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004232:	4b9d      	ldr	r3, [pc, #628]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800423e:	d10b      	bne.n	8004258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004240:	4b99      	ldr	r3, [pc, #612]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d05b      	beq.n	8004304 <HAL_RCC_OscConfig+0x108>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d157      	bne.n	8004304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e236      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d106      	bne.n	8004270 <HAL_RCC_OscConfig+0x74>
 8004262:	4b91      	ldr	r3, [pc, #580]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a90      	ldr	r2, [pc, #576]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e01d      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x98>
 800427a:	4b8b      	ldr	r3, [pc, #556]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a8a      	ldr	r2, [pc, #552]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b88      	ldr	r3, [pc, #544]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a87      	ldr	r2, [pc, #540]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004294:	4b84      	ldr	r3, [pc, #528]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a83      	ldr	r2, [pc, #524]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b81      	ldr	r3, [pc, #516]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a80      	ldr	r2, [pc, #512]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fe fd1c 	bl	8002cf0 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fe fd18 	bl	8002cf0 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e1fb      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b76      	ldr	r3, [pc, #472]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0xc0>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fe fd08 	bl	8002cf0 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe fd04 	bl	8002cf0 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e1e7      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	4b6c      	ldr	r3, [pc, #432]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0xe8>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d063      	beq.n	80043da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004312:	4b65      	ldr	r3, [pc, #404]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431e:	4b62      	ldr	r3, [pc, #392]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004326:	2b08      	cmp	r3, #8
 8004328:	d11c      	bne.n	8004364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432a:	4b5f      	ldr	r3, [pc, #380]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d116      	bne.n	8004364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	4b5c      	ldr	r3, [pc, #368]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_RCC_OscConfig+0x152>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1bb      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b56      	ldr	r3, [pc, #344]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4952      	ldr	r1, [pc, #328]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	e03a      	b.n	80043da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d020      	beq.n	80043ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800436c:	4b4f      	ldr	r3, [pc, #316]	; (80044ac <HAL_RCC_OscConfig+0x2b0>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fe fcbd 	bl	8002cf0 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800437a:	f7fe fcb9 	bl	8002cf0 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e19c      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438c:	4b46      	ldr	r3, [pc, #280]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004398:	4b43      	ldr	r3, [pc, #268]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4940      	ldr	r1, [pc, #256]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]
 80043ac:	e015      	b.n	80043da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ae:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <HAL_RCC_OscConfig+0x2b0>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fe fc9c 	bl	8002cf0 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043bc:	f7fe fc98 	bl	8002cf0 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e17b      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d030      	beq.n	8004448 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ee:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <HAL_RCC_OscConfig+0x2b4>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fe fc7c 	bl	8002cf0 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fc:	f7fe fc78 	bl	8002cf0 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e15b      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440e:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x200>
 800441a:	e015      	b.n	8004448 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800441c:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_RCC_OscConfig+0x2b4>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004422:	f7fe fc65 	bl	8002cf0 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800442a:	f7fe fc61 	bl	8002cf0 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e144      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800443e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80a0 	beq.w	8004596 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10f      	bne.n	8004486 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a0e      	ldr	r2, [pc, #56]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
 8004476:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004482:	2301      	movs	r3, #1
 8004484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_OscConfig+0x2b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d121      	bne.n	80044d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <HAL_RCC_OscConfig+0x2b8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <HAL_RCC_OscConfig+0x2b8>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449e:	f7fe fc27 	bl	8002cf0 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a4:	e011      	b.n	80044ca <HAL_RCC_OscConfig+0x2ce>
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
 80044ac:	42470000 	.word	0x42470000
 80044b0:	42470e80 	.word	0x42470e80
 80044b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b8:	f7fe fc1a 	bl	8002cf0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0fd      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	4b81      	ldr	r3, [pc, #516]	; (80046d0 <HAL_RCC_OscConfig+0x4d4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d106      	bne.n	80044ec <HAL_RCC_OscConfig+0x2f0>
 80044de:	4b7d      	ldr	r3, [pc, #500]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a7c      	ldr	r2, [pc, #496]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ea:	e01c      	b.n	8004526 <HAL_RCC_OscConfig+0x32a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d10c      	bne.n	800450e <HAL_RCC_OscConfig+0x312>
 80044f4:	4b77      	ldr	r3, [pc, #476]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a76      	ldr	r2, [pc, #472]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 80044fa:	f043 0304 	orr.w	r3, r3, #4
 80044fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004500:	4b74      	ldr	r3, [pc, #464]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	4a73      	ldr	r2, [pc, #460]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
 800450c:	e00b      	b.n	8004526 <HAL_RCC_OscConfig+0x32a>
 800450e:	4b71      	ldr	r3, [pc, #452]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	4a70      	ldr	r2, [pc, #448]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	6713      	str	r3, [r2, #112]	; 0x70
 800451a:	4b6e      	ldr	r3, [pc, #440]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a6d      	ldr	r2, [pc, #436]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 8004520:	f023 0304 	bic.w	r3, r3, #4
 8004524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d015      	beq.n	800455a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452e:	f7fe fbdf 	bl	8002cf0 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fe fbdb 	bl	8002cf0 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	; 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0bc      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454c:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ee      	beq.n	8004536 <HAL_RCC_OscConfig+0x33a>
 8004558:	e014      	b.n	8004584 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455a:	f7fe fbc9 	bl	8002cf0 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fe fbc5 	bl	8002cf0 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0a6      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004578:	4b56      	ldr	r3, [pc, #344]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ee      	bne.n	8004562 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d105      	bne.n	8004596 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458a:	4b52      	ldr	r3, [pc, #328]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	4a51      	ldr	r2, [pc, #324]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004594:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 8092 	beq.w	80046c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a0:	4b4c      	ldr	r3, [pc, #304]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d05c      	beq.n	8004666 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d141      	bne.n	8004638 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b4:	4b48      	ldr	r3, [pc, #288]	; (80046d8 <HAL_RCC_OscConfig+0x4dc>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ba:	f7fe fb99 	bl	8002cf0 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fe fb95 	bl	8002cf0 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e078      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d4:	4b3f      	ldr	r3, [pc, #252]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	019b      	lsls	r3, r3, #6
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	3b01      	subs	r3, #1
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	061b      	lsls	r3, r3, #24
 8004604:	4933      	ldr	r1, [pc, #204]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800460a:	4b33      	ldr	r3, [pc, #204]	; (80046d8 <HAL_RCC_OscConfig+0x4dc>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004610:	f7fe fb6e 	bl	8002cf0 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004618:	f7fe fb6a 	bl	8002cf0 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e04d      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462a:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x41c>
 8004636:	e045      	b.n	80046c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <HAL_RCC_OscConfig+0x4dc>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fe fb57 	bl	8002cf0 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004646:	f7fe fb53 	bl	8002cf0 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e036      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004658:	4b1e      	ldr	r3, [pc, #120]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x44a>
 8004664:	e02e      	b.n	80046c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e029      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004672:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <HAL_RCC_OscConfig+0x4d8>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	429a      	cmp	r2, r3
 8004684:	d11c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d115      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800469a:	4013      	ands	r3, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d10d      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d106      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40007000 	.word	0x40007000
 80046d4:	40023800 	.word	0x40023800
 80046d8:	42470060 	.word	0x42470060

080046dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0cc      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046f0:	4b68      	ldr	r3, [pc, #416]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d90c      	bls.n	8004718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fe:	4b65      	ldr	r3, [pc, #404]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b63      	ldr	r3, [pc, #396]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0b8      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004730:	4b59      	ldr	r3, [pc, #356]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4a58      	ldr	r2, [pc, #352]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800473a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004748:	4b53      	ldr	r3, [pc, #332]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4a52      	ldr	r2, [pc, #328]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004754:	4b50      	ldr	r3, [pc, #320]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	494d      	ldr	r1, [pc, #308]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d044      	beq.n	80047fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d119      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e07f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d003      	beq.n	800479a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004796:	2b03      	cmp	r3, #3
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479a:	4b3f      	ldr	r3, [pc, #252]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e06f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047aa:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e067      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ba:	4b37      	ldr	r3, [pc, #220]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4934      	ldr	r1, [pc, #208]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047cc:	f7fe fa90 	bl	8002cf0 <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f7fe fa8c 	bl	8002cf0 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e04f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	4b2b      	ldr	r3, [pc, #172]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 020c 	and.w	r2, r3, #12
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d1eb      	bne.n	80047d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047fc:	4b25      	ldr	r3, [pc, #148]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d20c      	bcs.n	8004824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b22      	ldr	r3, [pc, #136]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004812:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e032      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4916      	ldr	r1, [pc, #88]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	490e      	ldr	r1, [pc, #56]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004862:	f000 f889 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004866:	4601      	mov	r1, r0
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	4a0a      	ldr	r2, [pc, #40]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 8004874:	5cd3      	ldrb	r3, [r2, r3]
 8004876:	fa21 f303 	lsr.w	r3, r1, r3
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe f9f0 	bl	8002c68 <HAL_InitTick>

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023c00 	.word	0x40023c00
 8004898:	40023800 	.word	0x40023800
 800489c:	080106a4 	.word	0x080106a4
 80048a0:	20000004 	.word	0x20000004
 80048a4:	20000008 	.word	0x20000008

080048a8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08c      	sub	sp, #48	; 0x30
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d129      	bne.n	800490e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	4b2b      	ldr	r3, [pc, #172]	; (800496c <HAL_RCC_MCOConfig+0xc4>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	4a2a      	ldr	r2, [pc, #168]	; (800496c <HAL_RCC_MCOConfig+0xc4>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	6313      	str	r3, [r2, #48]	; 0x30
 80048ca:	4b28      	ldr	r3, [pc, #160]	; (800496c <HAL_RCC_MCOConfig+0xc4>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80048d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048dc:	2302      	movs	r3, #2
 80048de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e0:	2303      	movs	r3, #3
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80048ec:	f107 031c 	add.w	r3, r7, #28
 80048f0:	4619      	mov	r1, r3
 80048f2:	481f      	ldr	r0, [pc, #124]	; (8004970 <HAL_RCC_MCOConfig+0xc8>)
 80048f4:	f7ff fab6 	bl	8003e64 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80048f8:	4b1c      	ldr	r3, [pc, #112]	; (800496c <HAL_RCC_MCOConfig+0xc4>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	430b      	orrs	r3, r1
 8004906:	4919      	ldr	r1, [pc, #100]	; (800496c <HAL_RCC_MCOConfig+0xc4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800490c:	e029      	b.n	8004962 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	4b16      	ldr	r3, [pc, #88]	; (800496c <HAL_RCC_MCOConfig+0xc4>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	4a15      	ldr	r2, [pc, #84]	; (800496c <HAL_RCC_MCOConfig+0xc4>)
 8004918:	f043 0304 	orr.w	r3, r3, #4
 800491c:	6313      	str	r3, [r2, #48]	; 0x30
 800491e:	4b13      	ldr	r3, [pc, #76]	; (800496c <HAL_RCC_MCOConfig+0xc4>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800492a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800492e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004930:	2302      	movs	r3, #2
 8004932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004934:	2303      	movs	r3, #3
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800493c:	2300      	movs	r3, #0
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004940:	f107 031c 	add.w	r3, r7, #28
 8004944:	4619      	mov	r1, r3
 8004946:	480b      	ldr	r0, [pc, #44]	; (8004974 <HAL_RCC_MCOConfig+0xcc>)
 8004948:	f7ff fa8c 	bl	8003e64 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <HAL_RCC_MCOConfig+0xc4>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	00d9      	lsls	r1, r3, #3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	430b      	orrs	r3, r1
 800495c:	4903      	ldr	r1, [pc, #12]	; (800496c <HAL_RCC_MCOConfig+0xc4>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
}
 8004962:	bf00      	nop
 8004964:	3730      	adds	r7, #48	; 0x30
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023800 	.word	0x40023800
 8004970:	40020000 	.word	0x40020000
 8004974:	40020800 	.word	0x40020800

08004978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	2300      	movs	r3, #0
 8004988:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800498e:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b04      	cmp	r3, #4
 8004998:	d007      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x32>
 800499a:	2b08      	cmp	r3, #8
 800499c:	d008      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x38>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f040 808d 	bne.w	8004abe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a4:	4b4b      	ldr	r3, [pc, #300]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80049a6:	60bb      	str	r3, [r7, #8]
       break;
 80049a8:	e08c      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049aa:	4b4b      	ldr	r3, [pc, #300]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049ac:	60bb      	str	r3, [r7, #8]
      break;
 80049ae:	e089      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b0:	4b47      	ldr	r3, [pc, #284]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ba:	4b45      	ldr	r3, [pc, #276]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d023      	beq.n	8004a0e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c6:	4b42      	ldr	r3, [pc, #264]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	f04f 0400 	mov.w	r4, #0
 80049d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	ea03 0501 	and.w	r5, r3, r1
 80049dc:	ea04 0602 	and.w	r6, r4, r2
 80049e0:	4a3d      	ldr	r2, [pc, #244]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049e2:	fb02 f106 	mul.w	r1, r2, r6
 80049e6:	2200      	movs	r2, #0
 80049e8:	fb02 f205 	mul.w	r2, r2, r5
 80049ec:	440a      	add	r2, r1
 80049ee:	493a      	ldr	r1, [pc, #232]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049f0:	fba5 0101 	umull	r0, r1, r5, r1
 80049f4:	1853      	adds	r3, r2, r1
 80049f6:	4619      	mov	r1, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f04f 0400 	mov.w	r4, #0
 80049fe:	461a      	mov	r2, r3
 8004a00:	4623      	mov	r3, r4
 8004a02:	f7fc f97b 	bl	8000cfc <__aeabi_uldivmod>
 8004a06:	4603      	mov	r3, r0
 8004a08:	460c      	mov	r4, r1
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	e049      	b.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a0e:	4b30      	ldr	r3, [pc, #192]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	099b      	lsrs	r3, r3, #6
 8004a14:	f04f 0400 	mov.w	r4, #0
 8004a18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	ea03 0501 	and.w	r5, r3, r1
 8004a24:	ea04 0602 	and.w	r6, r4, r2
 8004a28:	4629      	mov	r1, r5
 8004a2a:	4632      	mov	r2, r6
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	f04f 0400 	mov.w	r4, #0
 8004a34:	0154      	lsls	r4, r2, #5
 8004a36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a3a:	014b      	lsls	r3, r1, #5
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4622      	mov	r2, r4
 8004a40:	1b49      	subs	r1, r1, r5
 8004a42:	eb62 0206 	sbc.w	r2, r2, r6
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	f04f 0400 	mov.w	r4, #0
 8004a4e:	0194      	lsls	r4, r2, #6
 8004a50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a54:	018b      	lsls	r3, r1, #6
 8004a56:	1a5b      	subs	r3, r3, r1
 8004a58:	eb64 0402 	sbc.w	r4, r4, r2
 8004a5c:	f04f 0100 	mov.w	r1, #0
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	00e2      	lsls	r2, r4, #3
 8004a66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a6a:	00d9      	lsls	r1, r3, #3
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4614      	mov	r4, r2
 8004a70:	195b      	adds	r3, r3, r5
 8004a72:	eb44 0406 	adc.w	r4, r4, r6
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	02a2      	lsls	r2, r4, #10
 8004a80:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a84:	0299      	lsls	r1, r3, #10
 8004a86:	460b      	mov	r3, r1
 8004a88:	4614      	mov	r4, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f04f 0400 	mov.w	r4, #0
 8004a94:	461a      	mov	r2, r3
 8004a96:	4623      	mov	r3, r4
 8004a98:	f7fc f930 	bl	8000cfc <__aeabi_uldivmod>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	0c1b      	lsrs	r3, r3, #16
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	3301      	adds	r3, #1
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aba:	60bb      	str	r3, [r7, #8]
      break;
 8004abc:	e002      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004abe:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ac0:	60bb      	str	r3, [r7, #8]
      break;
 8004ac2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	00f42400 	.word	0x00f42400
 8004ad8:	017d7840 	.word	0x017d7840

08004adc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d105      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d035      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b04:	4b62      	ldr	r3, [pc, #392]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b0a:	f7fe f8f1 	bl	8002cf0 <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b12:	f7fe f8ed 	bl	8002cf0 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e0b0      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b24:	4b5b      	ldr	r3, [pc, #364]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f0      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	019a      	lsls	r2, r3, #6
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	071b      	lsls	r3, r3, #28
 8004b3c:	4955      	ldr	r1, [pc, #340]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b44:	4b52      	ldr	r3, [pc, #328]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b4a:	f7fe f8d1 	bl	8002cf0 <HAL_GetTick>
 8004b4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b52:	f7fe f8cd 	bl	8002cf0 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e090      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b64:	4b4b      	ldr	r3, [pc, #300]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8083 	beq.w	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	4b44      	ldr	r3, [pc, #272]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4a43      	ldr	r2, [pc, #268]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8e:	4b41      	ldr	r3, [pc, #260]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b9a:	4b3f      	ldr	r3, [pc, #252]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a3e      	ldr	r2, [pc, #248]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ba6:	f7fe f8a3 	bl	8002cf0 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bae:	f7fe f89f 	bl	8002cf0 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e062      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bc0:	4b35      	ldr	r3, [pc, #212]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bcc:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02f      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d028      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bea:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bf4:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bfa:	4b28      	ldr	r3, [pc, #160]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c00:	4a24      	ldr	r2, [pc, #144]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c06:	4b23      	ldr	r3, [pc, #140]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d114      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c12:	f7fe f86d 	bl	8002cf0 <HAL_GetTick>
 8004c16:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c18:	e00a      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7fe f869 	bl	8002cf0 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e02a      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c30:	4b18      	ldr	r3, [pc, #96]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0ee      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c48:	d10d      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c4a:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5e:	490d      	ldr	r1, [pc, #52]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	608b      	str	r3, [r1, #8]
 8004c64:	e005      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c70:	6093      	str	r3, [r2, #8]
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7e:	4905      	ldr	r1, [pc, #20]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	42470068 	.word	0x42470068
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40007000 	.word	0x40007000
 8004c9c:	42470e40 	.word	0x42470e40

08004ca0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e083      	b.n	8004dba <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	7f5b      	ldrb	r3, [r3, #29]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d105      	bne.n	8004cc8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fd fd46 	bl	8002754 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	22ca      	movs	r2, #202	; 0xca
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2253      	movs	r2, #83	; 0x53
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fc26 	bl	8005530 <RTC_EnterInitMode>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	22ff      	movs	r2, #255	; 0xff
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e05e      	b.n	8004dba <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6899      	ldr	r1, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68d2      	ldr	r2, [r2, #12]
 8004d36:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6919      	ldr	r1, [r3, #16]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	041a      	lsls	r2, r3, #16
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10e      	bne.n	8004d88 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fbb8 	bl	80054e0 <HAL_RTC_WaitForSynchro>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d008      	beq.n	8004d88 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	22ff      	movs	r2, #255	; 0xff
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2204      	movs	r2, #4
 8004d82:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e018      	b.n	8004dba <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	22ff      	movs	r2, #255	; 0xff
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004dc2:	b590      	push	{r4, r7, lr}
 8004dc4:	b087      	sub	sp, #28
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	7f1b      	ldrb	r3, [r3, #28]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_RTC_SetTime+0x1c>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e0aa      	b.n	8004f34 <HAL_RTC_SetTime+0x172>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2202      	movs	r2, #2
 8004de8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d126      	bne.n	8004e3e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2200      	movs	r2, #0
 8004e02:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fbbd 	bl	8005588 <RTC_ByteToBcd2>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	785b      	ldrb	r3, [r3, #1]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fbb6 	bl	8005588 <RTC_ByteToBcd2>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e20:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	789b      	ldrb	r3, [r3, #2]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fbae 	bl	8005588 <RTC_ByteToBcd2>
 8004e2c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e2e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	78db      	ldrb	r3, [r3, #3]
 8004e36:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e018      	b.n	8004e70 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e5e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e64:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	78db      	ldrb	r3, [r3, #3]
 8004e6a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	22ca      	movs	r2, #202	; 0xca
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2253      	movs	r2, #83	; 0x53
 8004e7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 fb55 	bl	8005530 <RTC_EnterInitMode>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	22ff      	movs	r2, #255	; 0xff
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2204      	movs	r2, #4
 8004e98:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e047      	b.n	8004f34 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004eae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004eb2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ec2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6899      	ldr	r1, [r3, #8]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d111      	bne.n	8004f1e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 faf0 	bl	80054e0 <HAL_RTC_WaitForSynchro>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	22ff      	movs	r2, #255	; 0xff
 8004f0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2204      	movs	r2, #4
 8004f12:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e00a      	b.n	8004f34 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	22ff      	movs	r2, #255	; 0xff
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004f32:	2300      	movs	r3, #0
  }
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd90      	pop	{r4, r7, pc}

08004f3c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004f6e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d11a      	bne.n	8004fee <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fb01 	bl	80055c4 <RTC_Bcd2ToByte>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 faf8 	bl	80055c4 <RTC_Bcd2ToByte>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	789b      	ldrb	r3, [r3, #2]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 faef 	bl	80055c4 <RTC_Bcd2ToByte>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	7f1b      	ldrb	r3, [r3, #28]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_RTC_SetDate+0x1c>
 8005010:	2302      	movs	r3, #2
 8005012:	e094      	b.n	800513e <HAL_RTC_SetDate+0x146>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2202      	movs	r2, #2
 800501e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10e      	bne.n	8005044 <HAL_RTC_SetDate+0x4c>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	f023 0310 	bic.w	r3, r3, #16
 800503a:	b2db      	uxtb	r3, r3
 800503c:	330a      	adds	r3, #10
 800503e:	b2da      	uxtb	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d11c      	bne.n	8005084 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	78db      	ldrb	r3, [r3, #3]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fa9a 	bl	8005588 <RTC_ByteToBcd2>
 8005054:	4603      	mov	r3, r0
 8005056:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fa93 	bl	8005588 <RTC_ByteToBcd2>
 8005062:	4603      	mov	r3, r0
 8005064:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005066:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	789b      	ldrb	r3, [r3, #2]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fa8b 	bl	8005588 <RTC_ByteToBcd2>
 8005072:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005074:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e00e      	b.n	80050a2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	78db      	ldrb	r3, [r3, #3]
 8005088:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005090:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005096:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	22ca      	movs	r2, #202	; 0xca
 80050a8:	625a      	str	r2, [r3, #36]	; 0x24
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2253      	movs	r2, #83	; 0x53
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fa3c 	bl	8005530 <RTC_EnterInitMode>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	22ff      	movs	r2, #255	; 0xff
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2204      	movs	r2, #4
 80050ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e033      	b.n	800513e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050e4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050f4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d111      	bne.n	8005128 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f9eb 	bl	80054e0 <HAL_RTC_WaitForSynchro>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00b      	beq.n	8005128 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	22ff      	movs	r2, #255	; 0xff
 8005116:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2204      	movs	r2, #4
 800511c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e00a      	b.n	800513e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	22ff      	movs	r2, #255	; 0xff
 800512e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800513c:	2300      	movs	r3, #0
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	bd90      	pop	{r4, r7, pc}

08005146 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b086      	sub	sp, #24
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005160:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005164:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	b2da      	uxtb	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	0a1b      	lsrs	r3, r3, #8
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	b2da      	uxtb	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	0b5b      	lsrs	r3, r3, #13
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d11a      	bne.n	80051da <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	78db      	ldrb	r3, [r3, #3]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fa0b 	bl	80055c4 <RTC_Bcd2ToByte>
 80051ae:	4603      	mov	r3, r0
 80051b0:	461a      	mov	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fa02 	bl	80055c4 <RTC_Bcd2ToByte>
 80051c0:	4603      	mov	r3, r0
 80051c2:	461a      	mov	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	789b      	ldrb	r3, [r3, #2]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 f9f9 	bl	80055c4 <RTC_Bcd2ToByte>
 80051d2:	4603      	mov	r3, r0
 80051d4:	461a      	mov	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b089      	sub	sp, #36	; 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	2300      	movs	r3, #0
 80051f6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80051f8:	4b93      	ldr	r3, [pc, #588]	; (8005448 <HAL_RTC_SetAlarm_IT+0x264>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a93      	ldr	r2, [pc, #588]	; (800544c <HAL_RTC_SetAlarm_IT+0x268>)
 80051fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005202:	0adb      	lsrs	r3, r3, #11
 8005204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005208:	fb02 f303 	mul.w	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	7f1b      	ldrb	r3, [r3, #28]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_RTC_SetAlarm_IT+0x36>
 8005216:	2302      	movs	r3, #2
 8005218:	e111      	b.n	800543e <HAL_RTC_SetAlarm_IT+0x25a>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2202      	movs	r2, #2
 8005224:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d137      	bne.n	800529c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2200      	movs	r2, #0
 800523e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f99f 	bl	8005588 <RTC_ByteToBcd2>
 800524a:	4603      	mov	r3, r0
 800524c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f998 	bl	8005588 <RTC_ByteToBcd2>
 8005258:	4603      	mov	r3, r0
 800525a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800525c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	789b      	ldrb	r3, [r3, #2]
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f990 	bl	8005588 <RTC_ByteToBcd2>
 8005268:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800526a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	78db      	ldrb	r3, [r3, #3]
 8005272:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005274:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 f982 	bl	8005588 <RTC_ByteToBcd2>
 8005284:	4603      	mov	r3, r0
 8005286:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005288:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005290:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005296:	4313      	orrs	r3, r2
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	e023      	b.n	80052e4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d102      	bne.n	80052b0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2200      	movs	r2, #0
 80052ae:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80052bc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80052c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	78db      	ldrb	r3, [r3, #3]
 80052c8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80052ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80052d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80052da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80052e0:	4313      	orrs	r3, r2
 80052e2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	22ca      	movs	r2, #202	; 0xca
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2253      	movs	r2, #83	; 0x53
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005308:	d141      	bne.n	800538e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005318:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	b2da      	uxtb	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800532a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	1e5a      	subs	r2, r3, #1
 8005330:	617a      	str	r2, [r7, #20]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10b      	bne.n	800534e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	22ff      	movs	r2, #255	; 0xff
 800533c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2203      	movs	r2, #3
 8005342:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e077      	b.n	800543e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0e7      	beq.n	800532c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800537a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	e040      	b.n	8005410 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800539c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f462 7220 	orn	r2, r2, #640	; 0x280
 80053ae:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	1e5a      	subs	r2, r3, #1
 80053b4:	617a      	str	r2, [r7, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	22ff      	movs	r2, #255	; 0xff
 80053c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2203      	movs	r2, #3
 80053c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e035      	b.n	800543e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0e7      	beq.n	80053b0 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053fe:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800540e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <HAL_RTC_SetAlarm_IT+0x26c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a0e      	ldr	r2, [pc, #56]	; (8005450 <HAL_RTC_SetAlarm_IT+0x26c>)
 8005416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800541a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800541c:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <HAL_RTC_SetAlarm_IT+0x26c>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <HAL_RTC_SetAlarm_IT+0x26c>)
 8005422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005426:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	22ff      	movs	r2, #255	; 0xff
 800542e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3724      	adds	r7, #36	; 0x24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd90      	pop	{r4, r7, pc}
 8005446:	bf00      	nop
 8005448:	20000004 	.word	0x20000004
 800544c:	10624dd3 	.word	0x10624dd3
 8005450:	40013c00 	.word	0x40013c00

08005454 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d012      	beq.n	8005490 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fc f945 	bl	8001708 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	b2da      	uxtb	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800548e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d012      	beq.n	80054c4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f8a7 	bl	8005600 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f462 7220 	orn	r2, r2, #640	; 0x280
 80054c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <HAL_RTC_AlarmIRQHandler+0x88>)
 80054c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054ca:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	775a      	strb	r2, [r3, #29]
}
 80054d2:	bf00      	nop
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40013c00 	.word	0x40013c00

080054e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054fc:	f7fd fbf8 	bl	8002cf0 <HAL_GetTick>
 8005500:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005502:	e009      	b.n	8005518 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005504:	f7fd fbf4 	bl	8002cf0 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005512:	d901      	bls.n	8005518 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e007      	b.n	8005528 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0ee      	beq.n	8005504 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d119      	bne.n	800557e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f04f 32ff 	mov.w	r2, #4294967295
 8005552:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005554:	f7fd fbcc 	bl	8002cf0 <HAL_GetTick>
 8005558:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800555a:	e009      	b.n	8005570 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800555c:	f7fd fbc8 	bl	8002cf0 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800556a:	d901      	bls.n	8005570 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e007      	b.n	8005580 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0ee      	beq.n	800555c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005596:	e005      	b.n	80055a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3301      	adds	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	3b0a      	subs	r3, #10
 80055a2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	2b09      	cmp	r3, #9
 80055a8:	d8f6      	bhi.n	8005598 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	b2db      	uxtb	r3, r3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	091b      	lsrs	r3, r3, #4
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	4413      	add	r3, r2
 80055f2:	b2db      	uxtb	r3, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e022      	b.n	800566c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7fd f8a7 	bl	800278c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2203      	movs	r2, #3
 8005642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f814 	bl	8005674 <HAL_SD_InitCard>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e00a      	b.n	800566c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005674:	b5b0      	push	{r4, r5, r7, lr}
 8005676:	b08e      	sub	sp, #56	; 0x38
 8005678:	af04      	add	r7, sp, #16
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800567c:	2300      	movs	r3, #0
 800567e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800568c:	2300      	movs	r3, #0
 800568e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005690:	2376      	movs	r3, #118	; 0x76
 8005692:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681d      	ldr	r5, [r3, #0]
 8005698:	466c      	mov	r4, sp
 800569a:	f107 0314 	add.w	r3, r7, #20
 800569e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056ac:	4628      	mov	r0, r5
 80056ae:	f002 fcc3 	bl	8008038 <SDIO_Init>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80056b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e031      	b.n	8005728 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80056c4:	4b1a      	ldr	r3, [pc, #104]	; (8005730 <HAL_SD_InitCard+0xbc>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f002 fcfb 	bl	80080ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80056d4:	4b16      	ldr	r3, [pc, #88]	; (8005730 <HAL_SD_InitCard+0xbc>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f001 f8fe 	bl	80068dc <SD_PowerON>
 80056e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e013      	b.n	8005728 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 f81d 	bl	8006740 <SD_InitCard>
 8005706:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00b      	beq.n	8005726 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3728      	adds	r7, #40	; 0x28
 800572c:	46bd      	mov	sp, r7
 800572e:	bdb0      	pop	{r4, r5, r7, pc}
 8005730:	422580a0 	.word	0x422580a0

08005734 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b092      	sub	sp, #72	; 0x48
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005742:	f7fd fad5 	bl	8002cf0 <HAL_GetTick>
 8005746:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d107      	bne.n	8005766 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e1d9      	b.n	8005b1a <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b01      	cmp	r3, #1
 8005770:	f040 81cc 	bne.w	8005b0c <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800577a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	441a      	add	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005784:	429a      	cmp	r2, r3
 8005786:	d907      	bls.n	8005798 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e1c0      	b.n	8005b1a <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2203      	movs	r2, #3
 800579c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2200      	movs	r2, #0
 80057a6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d002      	beq.n	80057b6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	025b      	lsls	r3, r3, #9
 80057b4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057be:	4618      	mov	r0, r3
 80057c0:	f002 fd16 	bl	80081f0 <SDMMC_CmdBlockLength>
 80057c4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80057c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00f      	beq.n	80057ec <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a9b      	ldr	r2, [pc, #620]	; (8005a40 <HAL_SD_ReadBlocks+0x30c>)
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057da:	431a      	orrs	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e196      	b.n	8005b1a <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295
 80057f0:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	025b      	lsls	r3, r3, #9
 80057f6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80057f8:	2390      	movs	r3, #144	; 0x90
 80057fa:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80057fc:	2302      	movs	r3, #2
 80057fe:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005800:	2300      	movs	r3, #0
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005804:	2301      	movs	r3, #1
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f107 0214 	add.w	r2, r7, #20
 8005810:	4611      	mov	r1, r2
 8005812:	4618      	mov	r0, r3
 8005814:	f002 fcc0 	bl	8008198 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d90a      	bls.n	8005834 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2202      	movs	r2, #2
 8005822:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800582a:	4618      	mov	r0, r3
 800582c:	f002 fd24 	bl	8008278 <SDMMC_CmdReadMultiBlock>
 8005830:	6478      	str	r0, [r7, #68]	; 0x44
 8005832:	e009      	b.n	8005848 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005840:	4618      	mov	r0, r3
 8005842:	f002 fcf7 	bl	8008234 <SDMMC_CmdReadSingleBlock>
 8005846:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800584a:	2b00      	cmp	r3, #0
 800584c:	d012      	beq.n	8005874 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a7b      	ldr	r2, [pc, #492]	; (8005a40 <HAL_SD_ReadBlocks+0x30c>)
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800585a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800585c:	431a      	orrs	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e152      	b.n	8005b1a <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005878:	e061      	b.n	800593e <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d03c      	beq.n	8005902 <HAL_SD_ReadBlocks+0x1ce>
 8005888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d039      	beq.n	8005902 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800588e:	2300      	movs	r3, #0
 8005890:	643b      	str	r3, [r7, #64]	; 0x40
 8005892:	e033      	b.n	80058fc <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f002 fbf8 	bl	800808e <SDIO_ReadFIFO>
 800589e:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80058a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058aa:	3301      	adds	r3, #1
 80058ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b0:	3b01      	subs	r3, #1
 80058b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	0a1b      	lsrs	r3, r3, #8
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c0:	3301      	adds	r3, #1
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c6:	3b01      	subs	r3, #1
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	0c1b      	lsrs	r3, r3, #16
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d6:	3301      	adds	r3, #1
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058dc:	3b01      	subs	r3, #1
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	0e1b      	lsrs	r3, r3, #24
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ec:	3301      	adds	r3, #1
 80058ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f2:	3b01      	subs	r3, #1
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80058f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f8:	3301      	adds	r3, #1
 80058fa:	643b      	str	r3, [r7, #64]	; 0x40
 80058fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fe:	2b07      	cmp	r3, #7
 8005900:	d9c8      	bls.n	8005894 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005902:	f7fd f9f5 	bl	8002cf0 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800590e:	429a      	cmp	r2, r3
 8005910:	d902      	bls.n	8005918 <HAL_SD_ReadBlocks+0x1e4>
 8005912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005914:	2b00      	cmp	r3, #0
 8005916:	d112      	bne.n	800593e <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a48      	ldr	r2, [pc, #288]	; (8005a40 <HAL_SD_ReadBlocks+0x30c>)
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e0ed      	b.n	8005b1a <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005944:	f240 332a 	movw	r3, #810	; 0x32a
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d095      	beq.n	800587a <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d022      	beq.n	80059a2 <HAL_SD_ReadBlocks+0x26e>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d91f      	bls.n	80059a2 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	2b03      	cmp	r3, #3
 8005968:	d01b      	beq.n	80059a2 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f002 fce8 	bl	8008344 <SDMMC_CmdStopTransfer>
 8005974:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005978:	2b00      	cmp	r3, #0
 800597a:	d012      	beq.n	80059a2 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <HAL_SD_ReadBlocks+0x30c>)
 8005982:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598a:	431a      	orrs	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e0bb      	b.n	8005b1a <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d012      	beq.n	80059d6 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <HAL_SD_ReadBlocks+0x30c>)
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	f043 0208 	orr.w	r2, r3, #8
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0a1      	b.n	8005b1a <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d012      	beq.n	8005a0a <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <HAL_SD_ReadBlocks+0x30c>)
 80059ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	f043 0202 	orr.w	r2, r3, #2
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e087      	b.n	8005b1a <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d064      	beq.n	8005ae2 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a08      	ldr	r2, [pc, #32]	; (8005a40 <HAL_SD_ReadBlocks+0x30c>)
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	f043 0220 	orr.w	r2, r3, #32
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e06d      	b.n	8005b1a <HAL_SD_ReadBlocks+0x3e6>
 8005a3e:	bf00      	nop
 8005a40:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f002 fb20 	bl	800808e <SDIO_ReadFIFO>
 8005a4e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a56:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a60:	3b01      	subs	r3, #1
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a70:	3301      	adds	r3, #1
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a76:	3b01      	subs	r3, #1
 8005a78:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a82:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	3301      	adds	r3, #1
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	0e1b      	lsrs	r3, r3, #24
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a98:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005aa6:	f7fd f923 	bl	8002cf0 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d902      	bls.n	8005abc <HAL_SD_ReadBlocks+0x388>
 8005ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d112      	bne.n	8005ae2 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a18      	ldr	r2, [pc, #96]	; (8005b24 <HAL_SD_ReadBlocks+0x3f0>)
 8005ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e01b      	b.n	8005b1a <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_SD_ReadBlocks+0x3c2>
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1a6      	bne.n	8005a44 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f240 523a 	movw	r2, #1338	; 0x53a
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e006      	b.n	8005b1a <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
  }
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3748      	adds	r7, #72	; 0x48
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	004005ff 	.word	0x004005ff

08005b28 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b092      	sub	sp, #72	; 0x48
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005b36:	f7fd f8db 	bl	8002cf0 <HAL_GetTick>
 8005b3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d107      	bne.n	8005b5a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e184      	b.n	8005e64 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	f040 8177 	bne.w	8005e56 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	441a      	add	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d907      	bls.n	8005b8c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e16b      	b.n	8005e64 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2203      	movs	r2, #3
 8005b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d002      	beq.n	8005baa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	025b      	lsls	r3, r3, #9
 8005ba8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f002 fb1c 	bl	80081f0 <SDMMC_CmdBlockLength>
 8005bb8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00f      	beq.n	8005be0 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a9d      	ldr	r2, [pc, #628]	; (8005e3c <HAL_SD_WriteBlocks+0x314>)
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e141      	b.n	8005e64 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005be0:	f04f 33ff 	mov.w	r3, #4294967295
 8005be4:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	025b      	lsls	r3, r3, #9
 8005bea:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005bec:	2390      	movs	r3, #144	; 0x90
 8005bee:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f107 0218 	add.w	r2, r7, #24
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f002 fac6 	bl	8008198 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d90a      	bls.n	8005c28 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2220      	movs	r2, #32
 8005c16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f002 fb6e 	bl	8008300 <SDMMC_CmdWriteMultiBlock>
 8005c24:	6478      	str	r0, [r7, #68]	; 0x44
 8005c26:	e009      	b.n	8005c3c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2210      	movs	r2, #16
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c34:	4618      	mov	r0, r3
 8005c36:	f002 fb41 	bl	80082bc <SDMMC_CmdWriteSingleBlock>
 8005c3a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d012      	beq.n	8005c68 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a7d      	ldr	r2, [pc, #500]	; (8005e3c <HAL_SD_WriteBlocks+0x314>)
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c50:	431a      	orrs	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0fd      	b.n	8005e64 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005c6c:	e065      	b.n	8005d3a <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d040      	beq.n	8005cfe <HAL_SD_WriteBlocks+0x1d6>
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d03d      	beq.n	8005cfe <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	643b      	str	r3, [r7, #64]	; 0x40
 8005c86:	e037      	b.n	8005cf8 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	3301      	adds	r3, #1
 8005c92:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c96:	3b01      	subs	r3, #1
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	021a      	lsls	r2, r3, #8
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca8:	3301      	adds	r3, #1
 8005caa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	041a      	lsls	r2, r3, #16
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	061a      	lsls	r2, r3, #24
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd8:	3301      	adds	r3, #1
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f107 0214 	add.w	r2, r7, #20
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f002 f9db 	bl	80080a8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfa:	2b07      	cmp	r3, #7
 8005cfc:	d9c4      	bls.n	8005c88 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005cfe:	f7fc fff7 	bl	8002cf0 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d902      	bls.n	8005d14 <HAL_SD_WriteBlocks+0x1ec>
 8005d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d112      	bne.n	8005d3a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a48      	ldr	r2, [pc, #288]	; (8005e3c <HAL_SD_WriteBlocks+0x314>)
 8005d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d22:	431a      	orrs	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e094      	b.n	8005e64 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d40:	f240 331a 	movw	r3, #794	; 0x31a
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d091      	beq.n	8005c6e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d022      	beq.n	8005d9e <HAL_SD_WriteBlocks+0x276>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d91f      	bls.n	8005d9e <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d01b      	beq.n	8005d9e <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f002 faea 	bl	8008344 <SDMMC_CmdStopTransfer>
 8005d70:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d012      	beq.n	8005d9e <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a2f      	ldr	r2, [pc, #188]	; (8005e3c <HAL_SD_WriteBlocks+0x314>)
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d86:	431a      	orrs	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e062      	b.n	8005e64 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d012      	beq.n	8005dd2 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a22      	ldr	r2, [pc, #136]	; (8005e3c <HAL_SD_WriteBlocks+0x314>)
 8005db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	f043 0208 	orr.w	r2, r3, #8
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e048      	b.n	8005e64 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d012      	beq.n	8005e06 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <HAL_SD_WriteBlocks+0x314>)
 8005de6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	f043 0202 	orr.w	r2, r3, #2
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e02e      	b.n	8005e64 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d015      	beq.n	8005e40 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a08      	ldr	r2, [pc, #32]	; (8005e3c <HAL_SD_WriteBlocks+0x314>)
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	f043 0210 	orr.w	r2, r3, #16
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e014      	b.n	8005e64 <HAL_SD_WriteBlocks+0x33c>
 8005e3a:	bf00      	nop
 8005e3c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e006      	b.n	8005e64 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
  }
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3748      	adds	r7, #72	; 0x48
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <HAL_SD_IRQHandler+0x2e>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 ff38 	bl	8006d08 <SD_Read_IT>
 8005e98:	e165      	b.n	8006166 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 808f 	beq.w	8005fc8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005ec2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005ec6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d039      	beq.n	8005f56 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <HAL_SD_IRQHandler+0x8a>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d011      	beq.n	8005f1a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f002 fa22 	bl	8008344 <SDMMC_CmdStopTransfer>
 8005f00:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f92f 	bl	8006178 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f22:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <HAL_SD_IRQHandler+0xda>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f002 fe88 	bl	8008c5c <HAL_SD_RxCpltCallback>
 8005f4c:	e10b      	b.n	8006166 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f002 fe7a 	bl	8008c48 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f54:	e107      	b.n	8006166 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 8102 	beq.w	8006166 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d011      	beq.n	8005f90 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f002 f9e7 	bl	8008344 <SDMMC_CmdStopTransfer>
 8005f76:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d008      	beq.n	8005f90 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f8f4 	bl	8006178 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 80e5 	bne.w	8006166 <HAL_SD_IRQHandler+0x2fa>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f040 80df 	bne.w	8006166 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0208 	bic.w	r2, r2, #8
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f002 fe41 	bl	8008c48 <HAL_SD_TxCpltCallback>
}
 8005fc6:	e0ce      	b.n	8006166 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <HAL_SD_IRQHandler+0x17c>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fee2 	bl	8006daa <SD_Write_IT>
 8005fe6:	e0be      	b.n	8006166 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fee:	f240 233a 	movw	r3, #570	; 0x23a
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80b6 	beq.w	8006166 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	f043 0202 	orr.w	r2, r3, #2
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601a:	f003 0308 	and.w	r3, r3, #8
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	f043 0208 	orr.w	r2, r3, #8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	f043 0220 	orr.w	r2, r3, #32
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	f043 0210 	orr.w	r2, r3, #16
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	f043 0208 	orr.w	r2, r3, #8
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f240 723a 	movw	r2, #1850	; 0x73a
 8006084:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006094:	f023 0302 	bic.w	r3, r3, #2
 8006098:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f002 f950 	bl	8008344 <SDMMC_CmdStopTransfer>
 80060a4:	4602      	mov	r2, r0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f855 	bl	8006178 <HAL_SD_ErrorCallback>
}
 80060ce:	e04a      	b.n	8006166 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d045      	beq.n	8006166 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d104      	bne.n	80060ee <HAL_SD_IRQHandler+0x282>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d011      	beq.n	8006112 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f2:	4a1f      	ldr	r2, [pc, #124]	; (8006170 <HAL_SD_IRQHandler+0x304>)
 80060f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fd fc28 	bl	8003950 <HAL_DMA_Abort_IT>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d02f      	beq.n	8006166 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	4618      	mov	r0, r3
 800610c:	f000 faaa 	bl	8006664 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006110:	e029      	b.n	8006166 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <HAL_SD_IRQHandler+0x2ba>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d011      	beq.n	800614a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	4a12      	ldr	r2, [pc, #72]	; (8006174 <HAL_SD_IRQHandler+0x308>)
 800612c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	4618      	mov	r0, r3
 8006134:	f7fd fc0c 	bl	8003950 <HAL_DMA_Abort_IT>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d013      	beq.n	8006166 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fac5 	bl	80066d2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006148:	e00d      	b.n	8006166 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f002 fd68 	bl	8008c34 <HAL_SD_AbortCallback>
}
 8006164:	e7ff      	b.n	8006166 <HAL_SD_IRQHandler+0x2fa>
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	08006665 	.word	0x08006665
 8006174:	080066d3 	.word	0x080066d3

08006178 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800619a:	0f9b      	lsrs	r3, r3, #30
 800619c:	b2da      	uxtb	r2, r3
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a6:	0e9b      	lsrs	r3, r3, #26
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b8:	0e1b      	lsrs	r3, r3, #24
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ca:	0c1b      	lsrs	r3, r3, #16
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d6:	0a1b      	lsrs	r3, r3, #8
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ec:	0d1b      	lsrs	r3, r3, #20
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f8:	0c1b      	lsrs	r3, r3, #16
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	b2da      	uxtb	r2, r3
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800620a:	0bdb      	lsrs	r3, r3, #15
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	b2da      	uxtb	r2, r3
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800621c:	0b9b      	lsrs	r3, r3, #14
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800622e:	0b5b      	lsrs	r3, r3, #13
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	b2da      	uxtb	r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006240:	0b1b      	lsrs	r3, r3, #12
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	b2da      	uxtb	r2, r3
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2200      	movs	r2, #0
 8006252:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006258:	2b00      	cmp	r3, #0
 800625a:	d163      	bne.n	8006324 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006260:	009a      	lsls	r2, r3, #2
 8006262:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006266:	4013      	ands	r3, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800626c:	0f92      	lsrs	r2, r2, #30
 800626e:	431a      	orrs	r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006278:	0edb      	lsrs	r3, r3, #27
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	b2da      	uxtb	r2, r3
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628a:	0e1b      	lsrs	r3, r3, #24
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	b2da      	uxtb	r2, r3
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800629c:	0d5b      	lsrs	r3, r3, #21
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ae:	0c9b      	lsrs	r3, r3, #18
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c0:	0bdb      	lsrs	r3, r3, #15
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	7e1b      	ldrb	r3, [r3, #24]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	3302      	adds	r3, #2
 80062e4:	2201      	movs	r2, #1
 80062e6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80062ee:	fb02 f203 	mul.w	r2, r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	7a1b      	ldrb	r3, [r3, #8]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	f003 030f 	and.w	r3, r3, #15
 8006300:	2201      	movs	r2, #1
 8006302:	409a      	lsls	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006310:	0a52      	lsrs	r2, r2, #9
 8006312:	fb02 f203 	mul.w	r2, r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006320:	661a      	str	r2, [r3, #96]	; 0x60
 8006322:	e031      	b.n	8006388 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006328:	2b01      	cmp	r3, #1
 800632a:	d11d      	bne.n	8006368 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006330:	041b      	lsls	r3, r3, #16
 8006332:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800633a:	0c1b      	lsrs	r3, r3, #16
 800633c:	431a      	orrs	r2, r3
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	3301      	adds	r3, #1
 8006348:	029a      	lsls	r2, r3, #10
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800635c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	661a      	str	r2, [r3, #96]	; 0x60
 8006366:	e00f      	b.n	8006388 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a58      	ldr	r2, [pc, #352]	; (80064d0 <HAL_SD_GetCardCSD+0x344>)
 800636e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e09d      	b.n	80064c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638c:	0b9b      	lsrs	r3, r3, #14
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	b2da      	uxtb	r2, r3
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800639e:	09db      	lsrs	r3, r3, #7
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c0:	0fdb      	lsrs	r3, r3, #31
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	0f5b      	lsrs	r3, r3, #29
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063de:	0e9b      	lsrs	r3, r3, #26
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f0:	0d9b      	lsrs	r3, r3, #22
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006402:	0d5b      	lsrs	r3, r3, #21
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	b2da      	uxtb	r2, r3
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641e:	0c1b      	lsrs	r3, r3, #16
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	b2da      	uxtb	r2, r3
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006432:	0bdb      	lsrs	r3, r3, #15
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	b2da      	uxtb	r2, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006446:	0b9b      	lsrs	r3, r3, #14
 8006448:	b2db      	uxtb	r3, r3
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	b2da      	uxtb	r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645a:	0b5b      	lsrs	r3, r3, #13
 800645c:	b2db      	uxtb	r3, r3
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	b2da      	uxtb	r2, r3
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646e:	0b1b      	lsrs	r3, r3, #12
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	b2da      	uxtb	r2, r3
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006482:	0a9b      	lsrs	r3, r3, #10
 8006484:	b2db      	uxtb	r3, r3
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	b2da      	uxtb	r2, r3
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	b2db      	uxtb	r3, r3
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	004005ff 	.word	0x004005ff

080064d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800652c:	b5b0      	push	{r4, r5, r7, lr}
 800652e:	b08e      	sub	sp, #56	; 0x38
 8006530:	af04      	add	r7, sp, #16
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2203      	movs	r2, #3
 800653a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006542:	2b03      	cmp	r3, #3
 8006544:	d02e      	beq.n	80065a4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654c:	d106      	bne.n	800655c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
 800655a:	e029      	b.n	80065b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006562:	d10a      	bne.n	800657a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fa6f 	bl	8006a48 <SD_WideBus_Enable>
 800656a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	639a      	str	r2, [r3, #56]	; 0x38
 8006578:	e01a      	b.n	80065b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 faac 	bl	8006ade <SD_WideBus_Disable>
 8006586:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
 8006594:	e00c      	b.n	80065b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
 80065a2:	e005      	b.n	80065b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d009      	beq.n	80065cc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a18      	ldr	r2, [pc, #96]	; (8006620 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e024      	b.n	8006616 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681d      	ldr	r5, [r3, #0]
 80065f2:	466c      	mov	r4, sp
 80065f4:	f107 0318 	add.w	r3, r7, #24
 80065f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006600:	f107 030c 	add.w	r3, r7, #12
 8006604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006606:	4628      	mov	r0, r5
 8006608:	f001 fd16 	bl	8008038 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3728      	adds	r7, #40	; 0x28
 800661a:	46bd      	mov	sp, r7
 800661c:	bdb0      	pop	{r4, r5, r7, pc}
 800661e:	bf00      	nop
 8006620:	004005ff 	.word	0x004005ff

08006624 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006630:	f107 030c 	add.w	r3, r7, #12
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f9de 	bl	80069f8 <SD_SendStatus>
 800663c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	0a5b      	lsrs	r3, r3, #9
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800665a:	693b      	ldr	r3, [r7, #16]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f240 523a 	movw	r2, #1338	; 0x53a
 800667a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7ff ffd1 	bl	8006624 <HAL_SD_GetCardState>
 8006682:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b06      	cmp	r3, #6
 8006696:	d002      	beq.n	800669e <SD_DMATxAbort+0x3a>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b05      	cmp	r3, #5
 800669c:	d10a      	bne.n	80066b4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f001 fe4e 	bl	8008344 <SDMMC_CmdStopTransfer>
 80066a8:	4602      	mov	r2, r0
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	431a      	orrs	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d103      	bne.n	80066c4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f002 fab9 	bl	8008c34 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80066c2:	e002      	b.n	80066ca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff fd57 	bl	8006178 <HAL_SD_ErrorCallback>
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066de:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f240 523a 	movw	r2, #1338	; 0x53a
 80066e8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff ff9a 	bl	8006624 <HAL_SD_GetCardState>
 80066f0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b06      	cmp	r3, #6
 8006704:	d002      	beq.n	800670c <SD_DMARxAbort+0x3a>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b05      	cmp	r3, #5
 800670a:	d10a      	bne.n	8006722 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f001 fe17 	bl	8008344 <SDMMC_CmdStopTransfer>
 8006716:	4602      	mov	r2, r0
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	431a      	orrs	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	2b00      	cmp	r3, #0
 8006728:	d103      	bne.n	8006732 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f002 fa82 	bl	8008c34 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006730:	e002      	b.n	8006738 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fd20 	bl	8006178 <HAL_SD_ErrorCallback>
}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006740:	b5b0      	push	{r4, r5, r7, lr}
 8006742:	b094      	sub	sp, #80	; 0x50
 8006744:	af04      	add	r7, sp, #16
 8006746:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006748:	2301      	movs	r3, #1
 800674a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4618      	mov	r0, r3
 8006752:	f001 fcc9 	bl	80080e8 <SDIO_GetPowerState>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800675c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006760:	e0b7      	b.n	80068d2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	2b03      	cmp	r3, #3
 8006768:	d02f      	beq.n	80067ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f001 fef2 	bl	8008558 <SDMMC_CmdSendCID>
 8006774:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <SD_InitCard+0x40>
    {
      return errorstate;
 800677c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677e:	e0a8      	b.n	80068d2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2100      	movs	r1, #0
 8006786:	4618      	mov	r0, r3
 8006788:	f001 fcf3 	bl	8008172 <SDIO_GetResponse>
 800678c:	4602      	mov	r2, r0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2104      	movs	r1, #4
 8006798:	4618      	mov	r0, r3
 800679a:	f001 fcea 	bl	8008172 <SDIO_GetResponse>
 800679e:	4602      	mov	r2, r0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2108      	movs	r1, #8
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 fce1 	bl	8008172 <SDIO_GetResponse>
 80067b0:	4602      	mov	r2, r0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	210c      	movs	r1, #12
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fcd8 	bl	8008172 <SDIO_GetResponse>
 80067c2:	4602      	mov	r2, r0
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d00d      	beq.n	80067ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f107 020e 	add.w	r2, r7, #14
 80067da:	4611      	mov	r1, r2
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 fef8 	bl	80085d2 <SDMMC_CmdSetRelAdd>
 80067e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <SD_InitCard+0xae>
    {
      return errorstate;
 80067ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ec:	e071      	b.n	80068d2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d036      	beq.n	8006864 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80067f6:	89fb      	ldrh	r3, [r7, #14]
 80067f8:	461a      	mov	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006806:	041b      	lsls	r3, r3, #16
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f001 fec2 	bl	8008594 <SDMMC_CmdSendCSD>
 8006810:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681a:	e05a      	b.n	80068d2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f001 fca5 	bl	8008172 <SDIO_GetResponse>
 8006828:	4602      	mov	r2, r0
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2104      	movs	r1, #4
 8006834:	4618      	mov	r0, r3
 8006836:	f001 fc9c 	bl	8008172 <SDIO_GetResponse>
 800683a:	4602      	mov	r2, r0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2108      	movs	r1, #8
 8006846:	4618      	mov	r0, r3
 8006848:	f001 fc93 	bl	8008172 <SDIO_GetResponse>
 800684c:	4602      	mov	r2, r0
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	210c      	movs	r1, #12
 8006858:	4618      	mov	r0, r3
 800685a:	f001 fc8a 	bl	8008172 <SDIO_GetResponse>
 800685e:	4602      	mov	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2104      	movs	r1, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f001 fc81 	bl	8008172 <SDIO_GetResponse>
 8006870:	4603      	mov	r3, r0
 8006872:	0d1a      	lsrs	r2, r3, #20
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006878:	f107 0310 	add.w	r3, r7, #16
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff fc84 	bl	800618c <HAL_SD_GetCardCSD>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800688a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800688e:	e020      	b.n	80068d2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6819      	ldr	r1, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006898:	041b      	lsls	r3, r3, #16
 800689a:	f04f 0400 	mov.w	r4, #0
 800689e:	461a      	mov	r2, r3
 80068a0:	4623      	mov	r3, r4
 80068a2:	4608      	mov	r0, r1
 80068a4:	f001 fd70 	bl	8008388 <SDMMC_CmdSelDesel>
 80068a8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80068aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <SD_InitCard+0x174>
  {
    return errorstate;
 80068b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b2:	e00e      	b.n	80068d2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681d      	ldr	r5, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	466c      	mov	r4, sp
 80068bc:	f103 0210 	add.w	r2, r3, #16
 80068c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80068c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068c6:	3304      	adds	r3, #4
 80068c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068ca:	4628      	mov	r0, r5
 80068cc:	f001 fbb4 	bl	8008038 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3740      	adds	r7, #64	; 0x40
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080068dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 fd6a 	bl	80083ce <SDMMC_CmdGoIdleState>
 80068fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	e072      	b.n	80069ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fd7d 	bl	800840a <SDMMC_CmdOperCond>
 8006910:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00d      	beq.n	8006934 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f001 fd53 	bl	80083ce <SDMMC_CmdGoIdleState>
 8006928:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d004      	beq.n	800693a <SD_PowerON+0x5e>
    {
      return errorstate;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	e05b      	b.n	80069ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693e:	2b01      	cmp	r3, #1
 8006940:	d137      	bne.n	80069b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2100      	movs	r1, #0
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fd7d 	bl	8008448 <SDMMC_CmdAppCommand>
 800694e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d02d      	beq.n	80069b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006956:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800695a:	e047      	b.n	80069ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2100      	movs	r1, #0
 8006962:	4618      	mov	r0, r3
 8006964:	f001 fd70 	bl	8008448 <SDMMC_CmdAppCommand>
 8006968:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <SD_PowerON+0x98>
    {
      return errorstate;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	e03b      	b.n	80069ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	491e      	ldr	r1, [pc, #120]	; (80069f4 <SD_PowerON+0x118>)
 800697a:	4618      	mov	r0, r3
 800697c:	f001 fd86 	bl	800848c <SDMMC_CmdAppOperCommand>
 8006980:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006988:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800698c:	e02e      	b.n	80069ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2100      	movs	r1, #0
 8006994:	4618      	mov	r0, r3
 8006996:	f001 fbec 	bl	8008172 <SDIO_GetResponse>
 800699a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	0fdb      	lsrs	r3, r3, #31
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <SD_PowerON+0xcc>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <SD_PowerON+0xce>
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]

    count++;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	3301      	adds	r3, #1
 80069b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d802      	bhi.n	80069c2 <SD_PowerON+0xe6>
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0cc      	beq.n	800695c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d902      	bls.n	80069d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80069cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069d0:	e00c      	b.n	80069ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	645a      	str	r2, [r3, #68]	; 0x44
 80069e2:	e002      	b.n	80069ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	c1100000 	.word	0xc1100000

080069f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d102      	bne.n	8006a0e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006a08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a0c:	e018      	b.n	8006a40 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a16:	041b      	lsls	r3, r3, #16
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f001 fdfa 	bl	8008614 <SDMMC_CmdSendStatus>
 8006a20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	e009      	b.n	8006a40 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 fb9d 	bl	8008172 <SDIO_GetResponse>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	2300      	movs	r3, #0
 8006a56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f001 fb87 	bl	8008172 <SDIO_GetResponse>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a6e:	d102      	bne.n	8006a76 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a74:	e02f      	b.n	8006ad6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a76:	f107 030c 	add.w	r3, r7, #12
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f879 	bl	8006b74 <SD_FindSCR>
 8006a82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	e023      	b.n	8006ad6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01c      	beq.n	8006ad2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa0:	041b      	lsls	r3, r3, #16
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	f001 fccf 	bl	8008448 <SDMMC_CmdAppCommand>
 8006aaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	e00f      	b.n	8006ad6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2102      	movs	r1, #2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 fd08 	bl	80084d2 <SDMMC_CmdBusWidth>
 8006ac2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	e003      	b.n	8006ad6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e001      	b.n	8006ad6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ad2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	2300      	movs	r3, #0
 8006aec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f001 fb3c 	bl	8008172 <SDIO_GetResponse>
 8006afa:	4603      	mov	r3, r0
 8006afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b04:	d102      	bne.n	8006b0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b0a:	e02f      	b.n	8006b6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006b0c:	f107 030c 	add.w	r3, r7, #12
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f82e 	bl	8006b74 <SD_FindSCR>
 8006b18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	e023      	b.n	8006b6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01c      	beq.n	8006b68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f001 fc84 	bl	8008448 <SDMMC_CmdAppCommand>
 8006b40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	e00f      	b.n	8006b6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2100      	movs	r1, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 fcbd 	bl	80084d2 <SDMMC_CmdBusWidth>
 8006b58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	e003      	b.n	8006b6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e001      	b.n	8006b6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b08f      	sub	sp, #60	; 0x3c
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b7e:	f7fc f8b7 	bl	8002cf0 <HAL_GetTick>
 8006b82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60bb      	str	r3, [r7, #8]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2108      	movs	r1, #8
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f001 fb28 	bl	80081f0 <SDMMC_CmdBlockLength>
 8006ba0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <SD_FindSCR+0x38>
  {
    return errorstate;
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	e0a9      	b.n	8006d00 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb4:	041b      	lsls	r3, r3, #16
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f001 fc45 	bl	8008448 <SDMMC_CmdAppCommand>
 8006bbe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <SD_FindSCR+0x56>
  {
    return errorstate;
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	e09a      	b.n	8006d00 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006bca:	f04f 33ff 	mov.w	r3, #4294967295
 8006bce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006bd0:	2308      	movs	r3, #8
 8006bd2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006bd4:	2330      	movs	r3, #48	; 0x30
 8006bd6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006be0:	2301      	movs	r3, #1
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f107 0210 	add.w	r2, r7, #16
 8006bec:	4611      	mov	r1, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 fad2 	bl	8008198 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 fc8c 	bl	8008516 <SDMMC_CmdSendSCR>
 8006bfe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d022      	beq.n	8006c4c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	e07a      	b.n	8006d00 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00e      	beq.n	8006c36 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6819      	ldr	r1, [r3, #0]
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	f107 0208 	add.w	r2, r7, #8
 8006c24:	18d4      	adds	r4, r2, r3
 8006c26:	4608      	mov	r0, r1
 8006c28:	f001 fa31 	bl	800808e <SDIO_ReadFIFO>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	6023      	str	r3, [r4, #0]
      index++;
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	3301      	adds	r3, #1
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c36:	f7fc f85b 	bl	8002cf0 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c44:	d102      	bne.n	8006c4c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006c46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c4a:	e059      	b.n	8006d00 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c52:	f240 432a 	movw	r3, #1066	; 0x42a
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0d6      	beq.n	8006c0a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2208      	movs	r2, #8
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006c72:	2308      	movs	r3, #8
 8006c74:	e044      	b.n	8006d00 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e037      	b.n	8006d00 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d005      	beq.n	8006caa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006ca6:	2320      	movs	r3, #32
 8006ca8:	e02a      	b.n	8006d00 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f240 523a 	movw	r2, #1338	; 0x53a
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	061a      	lsls	r2, r3, #24
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cc0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	0a1b      	lsrs	r3, r3, #8
 8006cc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006cca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	0e1b      	lsrs	r3, r3, #24
 8006cd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	601a      	str	r2, [r3, #0]
    scr++;
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	3304      	adds	r3, #4
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	061a      	lsls	r2, r3, #24
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ce8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	0a1b      	lsrs	r3, r3, #8
 8006cee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006cf2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	0e1b      	lsrs	r3, r3, #24
 8006cf8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	373c      	adds	r7, #60	; 0x3c
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd90      	pop	{r4, r7, pc}

08006d08 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d03f      	beq.n	8006da2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006d22:	2300      	movs	r3, #0
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	e033      	b.n	8006d90 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f001 f9ae 	bl	800808e <SDIO_ReadFIFO>
 8006d32:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3301      	adds	r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	0c1b      	lsrs	r3, r3, #16
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	0e1b      	lsrs	r3, r3, #24
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3301      	adds	r3, #1
 8006d82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b07      	cmp	r3, #7
 8006d94:	d9c8      	bls.n	8006d28 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006da2:	bf00      	nop
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b086      	sub	sp, #24
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d043      	beq.n	8006e4c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	e037      	b.n	8006e3a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	021a      	lsls	r2, r3, #8
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3301      	adds	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	041a      	lsls	r2, r3, #16
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	061a      	lsls	r2, r3, #24
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f107 0208 	add.w	r2, r7, #8
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 f93a 	bl	80080a8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	3301      	adds	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b07      	cmp	r3, #7
 8006e3e:	d9c4      	bls.n	8006dca <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006e4c:	bf00      	nop
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e056      	b.n	8006f14 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d106      	bne.n	8006e86 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7fb fd05 	bl	8002890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2202      	movs	r2, #2
 8006e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	ea42 0103 	orr.w	r1, r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	0c1b      	lsrs	r3, r3, #16
 8006ee4:	f003 0104 	and.w	r1, r3, #4
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	69da      	ldr	r2, [r3, #28]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d101      	bne.n	8006f3e <HAL_SPI_Transmit+0x22>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e11e      	b.n	800717c <HAL_SPI_Transmit+0x260>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f46:	f7fb fed3 	bl	8002cf0 <HAL_GetTick>
 8006f4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d002      	beq.n	8006f62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f60:	e103      	b.n	800716a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <HAL_SPI_Transmit+0x52>
 8006f68:	88fb      	ldrh	r3, [r7, #6]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f72:	e0fa      	b.n	800716a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2203      	movs	r2, #3
 8006f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	88fa      	ldrh	r2, [r7, #6]
 8006f8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	88fa      	ldrh	r2, [r7, #6]
 8006f92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fba:	d107      	bne.n	8006fcc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd6:	2b40      	cmp	r3, #64	; 0x40
 8006fd8:	d007      	beq.n	8006fea <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fe8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff2:	d14b      	bne.n	800708c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <HAL_SPI_Transmit+0xe6>
 8006ffc:	8afb      	ldrh	r3, [r7, #22]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d13e      	bne.n	8007080 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	881a      	ldrh	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007026:	e02b      	b.n	8007080 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b02      	cmp	r3, #2
 8007034:	d112      	bne.n	800705c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	881a      	ldrh	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007046:	1c9a      	adds	r2, r3, #2
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	86da      	strh	r2, [r3, #54]	; 0x36
 800705a:	e011      	b.n	8007080 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800705c:	f7fb fe48 	bl	8002cf0 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d803      	bhi.n	8007074 <HAL_SPI_Transmit+0x158>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d102      	bne.n	800707a <HAL_SPI_Transmit+0x15e>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800707e:	e074      	b.n	800716a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1ce      	bne.n	8007028 <HAL_SPI_Transmit+0x10c>
 800708a:	e04c      	b.n	8007126 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <HAL_SPI_Transmit+0x17e>
 8007094:	8afb      	ldrh	r3, [r7, #22]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d140      	bne.n	800711c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	7812      	ldrb	r2, [r2, #0]
 80070a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070c0:	e02c      	b.n	800711c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d113      	bne.n	80070f8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	330c      	adds	r3, #12
 80070da:	7812      	ldrb	r2, [r2, #0]
 80070dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80070f6:	e011      	b.n	800711c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070f8:	f7fb fdfa 	bl	8002cf0 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d803      	bhi.n	8007110 <HAL_SPI_Transmit+0x1f4>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d102      	bne.n	8007116 <HAL_SPI_Transmit+0x1fa>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d102      	bne.n	800711c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	77fb      	strb	r3, [r7, #31]
          goto error;
 800711a:	e026      	b.n	800716a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1cd      	bne.n	80070c2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 fba4 	bl	8007878 <SPI_EndRxTxTransaction>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2220      	movs	r2, #32
 800713a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007144:	2300      	movs	r3, #0
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	77fb      	strb	r3, [r7, #31]
 8007166:	e000      	b.n	800716a <HAL_SPI_Transmit+0x24e>
  }

error:
 8007168:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800717a:	7ffb      	ldrb	r3, [r7, #31]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af02      	add	r7, sp, #8
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	603b      	str	r3, [r7, #0]
 8007190:	4613      	mov	r3, r2
 8007192:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071a0:	d112      	bne.n	80071c8 <HAL_SPI_Receive+0x44>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10e      	bne.n	80071c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2204      	movs	r2, #4
 80071ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80071b2:	88fa      	ldrh	r2, [r7, #6]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	68b9      	ldr	r1, [r7, #8]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 f8e9 	bl	8007396 <HAL_SPI_TransmitReceive>
 80071c4:	4603      	mov	r3, r0
 80071c6:	e0e2      	b.n	800738e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_SPI_Receive+0x52>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e0db      	b.n	800738e <HAL_SPI_Receive+0x20a>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071de:	f7fb fd87 	bl	8002cf0 <HAL_GetTick>
 80071e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d002      	beq.n	80071f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80071f0:	2302      	movs	r3, #2
 80071f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071f4:	e0c2      	b.n	800737c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <HAL_SPI_Receive+0x7e>
 80071fc:	88fb      	ldrh	r3, [r7, #6]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d102      	bne.n	8007208 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007206:	e0b9      	b.n	800737c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2204      	movs	r2, #4
 800720c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	88fa      	ldrh	r2, [r7, #6]
 8007220:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	88fa      	ldrh	r2, [r7, #6]
 8007226:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800724e:	d107      	bne.n	8007260 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800725e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d007      	beq.n	800727e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800727c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d162      	bne.n	800734c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007286:	e02e      	b.n	80072e6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b01      	cmp	r3, #1
 8007294:	d115      	bne.n	80072c2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f103 020c 	add.w	r2, r3, #12
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	7812      	ldrb	r2, [r2, #0]
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072c0:	e011      	b.n	80072e6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072c2:	f7fb fd15 	bl	8002cf0 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d803      	bhi.n	80072da <HAL_SPI_Receive+0x156>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d8:	d102      	bne.n	80072e0 <HAL_SPI_Receive+0x15c>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d102      	bne.n	80072e6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072e4:	e04a      	b.n	800737c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1cb      	bne.n	8007288 <HAL_SPI_Receive+0x104>
 80072f0:	e031      	b.n	8007356 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d113      	bne.n	8007328 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	b292      	uxth	r2, r2
 800730c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	1c9a      	adds	r2, r3, #2
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007326:	e011      	b.n	800734c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007328:	f7fb fce2 	bl	8002cf0 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d803      	bhi.n	8007340 <HAL_SPI_Receive+0x1bc>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733e:	d102      	bne.n	8007346 <HAL_SPI_Receive+0x1c2>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d102      	bne.n	800734c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	75fb      	strb	r3, [r7, #23]
          goto error;
 800734a:	e017      	b.n	800737c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007350:	b29b      	uxth	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1cd      	bne.n	80072f2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 fa27 	bl	80077ae <SPI_EndRxTransaction>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2220      	movs	r2, #32
 800736a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	75fb      	strb	r3, [r7, #23]
 8007378:	e000      	b.n	800737c <HAL_SPI_Receive+0x1f8>
  }

error :
 800737a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b08c      	sub	sp, #48	; 0x30
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073a4:	2301      	movs	r3, #1
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_SPI_TransmitReceive+0x26>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e18a      	b.n	80076d2 <HAL_SPI_TransmitReceive+0x33c>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073c4:	f7fb fc94 	bl	8002cf0 <HAL_GetTick>
 80073c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80073da:	887b      	ldrh	r3, [r7, #2]
 80073dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d00f      	beq.n	8007406 <HAL_SPI_TransmitReceive+0x70>
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ec:	d107      	bne.n	80073fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d103      	bne.n	80073fe <HAL_SPI_TransmitReceive+0x68>
 80073f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d003      	beq.n	8007406 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80073fe:	2302      	movs	r3, #2
 8007400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007404:	e15b      	b.n	80076be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_SPI_TransmitReceive+0x82>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <HAL_SPI_TransmitReceive+0x82>
 8007412:	887b      	ldrh	r3, [r7, #2]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d103      	bne.n	8007420 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800741e:	e14e      	b.n	80076be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b04      	cmp	r3, #4
 800742a:	d003      	beq.n	8007434 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2205      	movs	r2, #5
 8007430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	887a      	ldrh	r2, [r7, #2]
 8007444:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	887a      	ldrh	r2, [r7, #2]
 800744a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	887a      	ldrh	r2, [r7, #2]
 8007456:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	887a      	ldrh	r2, [r7, #2]
 800745c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b40      	cmp	r3, #64	; 0x40
 8007476:	d007      	beq.n	8007488 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007486:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007490:	d178      	bne.n	8007584 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <HAL_SPI_TransmitReceive+0x10a>
 800749a:	8b7b      	ldrh	r3, [r7, #26]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d166      	bne.n	800756e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	881a      	ldrh	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	1c9a      	adds	r2, r3, #2
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074c4:	e053      	b.n	800756e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d11b      	bne.n	800750c <HAL_SPI_TransmitReceive+0x176>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d016      	beq.n	800750c <HAL_SPI_TransmitReceive+0x176>
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d113      	bne.n	800750c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	881a      	ldrh	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	1c9a      	adds	r2, r3, #2
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3b01      	subs	r3, #1
 8007502:	b29a      	uxth	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b01      	cmp	r3, #1
 8007518:	d119      	bne.n	800754e <HAL_SPI_TransmitReceive+0x1b8>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d014      	beq.n	800754e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	b292      	uxth	r2, r2
 8007530:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007536:	1c9a      	adds	r2, r3, #2
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800754a:	2301      	movs	r3, #1
 800754c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800754e:	f7fb fbcf 	bl	8002cf0 <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800755a:	429a      	cmp	r2, r3
 800755c:	d807      	bhi.n	800756e <HAL_SPI_TransmitReceive+0x1d8>
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007564:	d003      	beq.n	800756e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800756c:	e0a7      	b.n	80076be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007572:	b29b      	uxth	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1a6      	bne.n	80074c6 <HAL_SPI_TransmitReceive+0x130>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1a1      	bne.n	80074c6 <HAL_SPI_TransmitReceive+0x130>
 8007582:	e07c      	b.n	800767e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <HAL_SPI_TransmitReceive+0x1fc>
 800758c:	8b7b      	ldrh	r3, [r7, #26]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d16b      	bne.n	800766a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	330c      	adds	r3, #12
 800759c:	7812      	ldrb	r2, [r2, #0]
 800759e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075b8:	e057      	b.n	800766a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d11c      	bne.n	8007602 <HAL_SPI_TransmitReceive+0x26c>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d017      	beq.n	8007602 <HAL_SPI_TransmitReceive+0x26c>
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d114      	bne.n	8007602 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	330c      	adds	r3, #12
 80075e2:	7812      	ldrb	r2, [r2, #0]
 80075e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b01      	cmp	r3, #1
 800760e:	d119      	bne.n	8007644 <HAL_SPI_TransmitReceive+0x2ae>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d014      	beq.n	8007644 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b01      	subs	r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007640:	2301      	movs	r3, #1
 8007642:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007644:	f7fb fb54 	bl	8002cf0 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007650:	429a      	cmp	r2, r3
 8007652:	d803      	bhi.n	800765c <HAL_SPI_TransmitReceive+0x2c6>
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765a:	d102      	bne.n	8007662 <HAL_SPI_TransmitReceive+0x2cc>
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	2b00      	cmp	r3, #0
 8007660:	d103      	bne.n	800766a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007668:	e029      	b.n	80076be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1a2      	bne.n	80075ba <HAL_SPI_TransmitReceive+0x224>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007678:	b29b      	uxth	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d19d      	bne.n	80075ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800767e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 f8f8 	bl	8007878 <SPI_EndRxTxTransaction>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d006      	beq.n	800769c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800769a:	e010      	b.n	80076be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10b      	bne.n	80076bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076a4:	2300      	movs	r3, #0
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	e000      	b.n	80076be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80076bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3730      	adds	r7, #48	; 0x30
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	603b      	str	r3, [r7, #0]
 80076e6:	4613      	mov	r3, r2
 80076e8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ea:	e04c      	b.n	8007786 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f2:	d048      	beq.n	8007786 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80076f4:	f7fb fafc 	bl	8002cf0 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d902      	bls.n	800770a <SPI_WaitFlagStateUntilTimeout+0x30>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d13d      	bne.n	8007786 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007718:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007722:	d111      	bne.n	8007748 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800772c:	d004      	beq.n	8007738 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007736:	d107      	bne.n	8007748 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007746:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007750:	d10f      	bne.n	8007772 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007770:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e00f      	b.n	80077a6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4013      	ands	r3, r2
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	429a      	cmp	r2, r3
 8007794:	bf0c      	ite	eq
 8007796:	2301      	moveq	r3, #1
 8007798:	2300      	movne	r3, #0
 800779a:	b2db      	uxtb	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d1a3      	bne.n	80076ec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b086      	sub	sp, #24
 80077b2:	af02      	add	r7, sp, #8
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077c2:	d111      	bne.n	80077e8 <SPI_EndRxTransaction+0x3a>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077cc:	d004      	beq.n	80077d8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d6:	d107      	bne.n	80077e8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077e6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f0:	d12a      	bne.n	8007848 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077fa:	d012      	beq.n	8007822 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	2180      	movs	r1, #128	; 0x80
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f7ff ff67 	bl	80076da <SPI_WaitFlagStateUntilTimeout>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d02d      	beq.n	800786e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007816:	f043 0220 	orr.w	r2, r3, #32
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e026      	b.n	8007870 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2200      	movs	r2, #0
 800782a:	2101      	movs	r1, #1
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7ff ff54 	bl	80076da <SPI_WaitFlagStateUntilTimeout>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01a      	beq.n	800786e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783c:	f043 0220 	orr.w	r2, r3, #32
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e013      	b.n	8007870 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2200      	movs	r2, #0
 8007850:	2101      	movs	r1, #1
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff ff41 	bl	80076da <SPI_WaitFlagStateUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d007      	beq.n	800786e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007862:	f043 0220 	orr.w	r2, r3, #32
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e000      	b.n	8007870 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007884:	4b1b      	ldr	r3, [pc, #108]	; (80078f4 <SPI_EndRxTxTransaction+0x7c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1b      	ldr	r2, [pc, #108]	; (80078f8 <SPI_EndRxTxTransaction+0x80>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	0d5b      	lsrs	r3, r3, #21
 8007890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007894:	fb02 f303 	mul.w	r3, r2, r3
 8007898:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078a2:	d112      	bne.n	80078ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2200      	movs	r2, #0
 80078ac:	2180      	movs	r1, #128	; 0x80
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff ff13 	bl	80076da <SPI_WaitFlagStateUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d016      	beq.n	80078e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f043 0220 	orr.w	r2, r3, #32
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e00f      	b.n	80078ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e0:	2b80      	cmp	r3, #128	; 0x80
 80078e2:	d0f2      	beq.n	80078ca <SPI_EndRxTxTransaction+0x52>
 80078e4:	e000      	b.n	80078e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80078e6:	bf00      	nop
  }

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20000004 	.word	0x20000004
 80078f8:	165e9f81 	.word	0x165e9f81

080078fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e01d      	b.n	800794a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7fb f842 	bl	80029ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3304      	adds	r3, #4
 8007938:	4619      	mov	r1, r3
 800793a:	4610      	mov	r0, r2
 800793c:	f000 fa26 	bl	8007d8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007952:	b480      	push	{r7}
 8007954:	b085      	sub	sp, #20
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f042 0201 	orr.w	r2, r2, #1
 8007968:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b06      	cmp	r3, #6
 800797a:	d007      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0201 	orr.w	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e083      	b.n	8007ab6 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fa ffac 	bl	8002920 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079de:	f023 0307 	bic.w	r3, r3, #7
 80079e2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	4610      	mov	r0, r2
 80079f0:	f000 f9cc 	bl	8007d8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a1c:	f023 0303 	bic.w	r3, r3, #3
 8007a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007a3a:	f023 030c 	bic.w	r3, r3, #12
 8007a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	4313      	orrs	r3, r2
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	011a      	lsls	r2, r3, #4
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	031b      	lsls	r3, r3, #12
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007a78:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007a80:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <HAL_TIM_Encoder_Start+0x16>
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d008      	beq.n	8007ae4 <HAL_TIM_Encoder_Start+0x26>
 8007ad2:	e00f      	b.n	8007af4 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	2100      	movs	r1, #0
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 f9f5 	bl	8007ecc <TIM_CCxChannelCmd>
      break;
 8007ae2:	e016      	b.n	8007b12 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	2104      	movs	r1, #4
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 f9ed 	bl	8007ecc <TIM_CCxChannelCmd>
      break;
 8007af2:	e00e      	b.n	8007b12 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2201      	movs	r2, #1
 8007afa:	2100      	movs	r1, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 f9e5 	bl	8007ecc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2201      	movs	r2, #1
 8007b08:	2104      	movs	r1, #4
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 f9de 	bl	8007ecc <TIM_CCxChannelCmd>
      break;
 8007b10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0201 	orr.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d122      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d11b      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0202 	mvn.w	r2, #2
 8007b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f8ee 	bl	8007d50 <HAL_TIM_IC_CaptureCallback>
 8007b74:	e005      	b.n	8007b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f8e0 	bl	8007d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f8f1 	bl	8007d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d122      	bne.n	8007bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d11b      	bne.n	8007bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f06f 0204 	mvn.w	r2, #4
 8007bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f8c4 	bl	8007d50 <HAL_TIM_IC_CaptureCallback>
 8007bc8:	e005      	b.n	8007bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f8b6 	bl	8007d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f8c7 	bl	8007d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d122      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f003 0308 	and.w	r3, r3, #8
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d11b      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f06f 0208 	mvn.w	r2, #8
 8007c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2204      	movs	r2, #4
 8007c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f89a 	bl	8007d50 <HAL_TIM_IC_CaptureCallback>
 8007c1c:	e005      	b.n	8007c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f88c 	bl	8007d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f89d 	bl	8007d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b10      	cmp	r3, #16
 8007c3c:	d122      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b10      	cmp	r3, #16
 8007c4a:	d11b      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0210 	mvn.w	r2, #16
 8007c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2208      	movs	r2, #8
 8007c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f870 	bl	8007d50 <HAL_TIM_IC_CaptureCallback>
 8007c70:	e005      	b.n	8007c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f862 	bl	8007d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f873 	bl	8007d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d10e      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d107      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f06f 0201 	mvn.w	r2, #1
 8007ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7f9 fd40 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cba:	2b80      	cmp	r3, #128	; 0x80
 8007cbc:	d10e      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc8:	2b80      	cmp	r3, #128	; 0x80
 8007cca:	d107      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f9a4 	bl	8008024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce6:	2b40      	cmp	r3, #64	; 0x40
 8007ce8:	d10e      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf4:	2b40      	cmp	r3, #64	; 0x40
 8007cf6:	d107      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f838 	bl	8007d78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0320 	and.w	r3, r3, #32
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	d10e      	bne.n	8007d34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d107      	bne.n	8007d34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f06f 0220 	mvn.w	r2, #32
 8007d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f96e 	bl	8008010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a40      	ldr	r2, [pc, #256]	; (8007ea0 <TIM_Base_SetConfig+0x114>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d013      	beq.n	8007dcc <TIM_Base_SetConfig+0x40>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007daa:	d00f      	beq.n	8007dcc <TIM_Base_SetConfig+0x40>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a3d      	ldr	r2, [pc, #244]	; (8007ea4 <TIM_Base_SetConfig+0x118>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d00b      	beq.n	8007dcc <TIM_Base_SetConfig+0x40>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a3c      	ldr	r2, [pc, #240]	; (8007ea8 <TIM_Base_SetConfig+0x11c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d007      	beq.n	8007dcc <TIM_Base_SetConfig+0x40>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a3b      	ldr	r2, [pc, #236]	; (8007eac <TIM_Base_SetConfig+0x120>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d003      	beq.n	8007dcc <TIM_Base_SetConfig+0x40>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a3a      	ldr	r2, [pc, #232]	; (8007eb0 <TIM_Base_SetConfig+0x124>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d108      	bne.n	8007dde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a2f      	ldr	r2, [pc, #188]	; (8007ea0 <TIM_Base_SetConfig+0x114>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d02b      	beq.n	8007e3e <TIM_Base_SetConfig+0xb2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dec:	d027      	beq.n	8007e3e <TIM_Base_SetConfig+0xb2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a2c      	ldr	r2, [pc, #176]	; (8007ea4 <TIM_Base_SetConfig+0x118>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d023      	beq.n	8007e3e <TIM_Base_SetConfig+0xb2>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a2b      	ldr	r2, [pc, #172]	; (8007ea8 <TIM_Base_SetConfig+0x11c>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d01f      	beq.n	8007e3e <TIM_Base_SetConfig+0xb2>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a2a      	ldr	r2, [pc, #168]	; (8007eac <TIM_Base_SetConfig+0x120>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d01b      	beq.n	8007e3e <TIM_Base_SetConfig+0xb2>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a29      	ldr	r2, [pc, #164]	; (8007eb0 <TIM_Base_SetConfig+0x124>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d017      	beq.n	8007e3e <TIM_Base_SetConfig+0xb2>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a28      	ldr	r2, [pc, #160]	; (8007eb4 <TIM_Base_SetConfig+0x128>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d013      	beq.n	8007e3e <TIM_Base_SetConfig+0xb2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a27      	ldr	r2, [pc, #156]	; (8007eb8 <TIM_Base_SetConfig+0x12c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00f      	beq.n	8007e3e <TIM_Base_SetConfig+0xb2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a26      	ldr	r2, [pc, #152]	; (8007ebc <TIM_Base_SetConfig+0x130>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00b      	beq.n	8007e3e <TIM_Base_SetConfig+0xb2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a25      	ldr	r2, [pc, #148]	; (8007ec0 <TIM_Base_SetConfig+0x134>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d007      	beq.n	8007e3e <TIM_Base_SetConfig+0xb2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a24      	ldr	r2, [pc, #144]	; (8007ec4 <TIM_Base_SetConfig+0x138>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d003      	beq.n	8007e3e <TIM_Base_SetConfig+0xb2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a23      	ldr	r2, [pc, #140]	; (8007ec8 <TIM_Base_SetConfig+0x13c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d108      	bne.n	8007e50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a0a      	ldr	r2, [pc, #40]	; (8007ea0 <TIM_Base_SetConfig+0x114>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d003      	beq.n	8007e84 <TIM_Base_SetConfig+0xf8>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a0c      	ldr	r2, [pc, #48]	; (8007eb0 <TIM_Base_SetConfig+0x124>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d103      	bne.n	8007e8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	691a      	ldr	r2, [r3, #16]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	615a      	str	r2, [r3, #20]
}
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40000400 	.word	0x40000400
 8007ea8:	40000800 	.word	0x40000800
 8007eac:	40000c00 	.word	0x40000c00
 8007eb0:	40010400 	.word	0x40010400
 8007eb4:	40014000 	.word	0x40014000
 8007eb8:	40014400 	.word	0x40014400
 8007ebc:	40014800 	.word	0x40014800
 8007ec0:	40001800 	.word	0x40001800
 8007ec4:	40001c00 	.word	0x40001c00
 8007ec8:	40002000 	.word	0x40002000

08007ecc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f003 031f 	and.w	r3, r3, #31
 8007ede:	2201      	movs	r2, #1
 8007ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1a      	ldr	r2, [r3, #32]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	43db      	mvns	r3, r3
 8007eee:	401a      	ands	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a1a      	ldr	r2, [r3, #32]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f003 031f 	and.w	r3, r3, #31
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	fa01 f303 	lsl.w	r3, r1, r3
 8007f04:	431a      	orrs	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	621a      	str	r2, [r3, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
	...

08007f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e05a      	b.n	8007fe6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a21      	ldr	r2, [pc, #132]	; (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d022      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f7c:	d01d      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a1d      	ldr	r2, [pc, #116]	; (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d018      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a1b      	ldr	r2, [pc, #108]	; (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d013      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a1a      	ldr	r2, [pc, #104]	; (8008000 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00e      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a18      	ldr	r2, [pc, #96]	; (8008004 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d009      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a17      	ldr	r2, [pc, #92]	; (8008008 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d004      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a15      	ldr	r2, [pc, #84]	; (800800c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d10c      	bne.n	8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40010000 	.word	0x40010000
 8007ff8:	40000400 	.word	0x40000400
 8007ffc:	40000800 	.word	0x40000800
 8008000:	40000c00 	.word	0x40000c00
 8008004:	40010400 	.word	0x40010400
 8008008:	40014000 	.word	0x40014000
 800800c:	40001800 	.word	0x40001800

08008010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008038:	b084      	sub	sp, #16
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	f107 001c 	add.w	r0, r7, #28
 8008046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800804e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008050:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008052:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008056:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800805a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800805e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008062:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008072:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	431a      	orrs	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	b004      	add	sp, #16
 800808c:	4770      	bx	lr

0800808e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2203      	movs	r2, #3
 80080d6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80080d8:	2002      	movs	r0, #2
 80080da:	f7fa fe15 	bl	8002d08 <HAL_Delay>
  
  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0303 	and.w	r3, r3, #3
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008122:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008128:	431a      	orrs	r2, r3
                       Command->CPSM);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800812e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800813e:	f023 030f 	bic.w	r3, r3, #15
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	431a      	orrs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	b2db      	uxtb	r3, r3
}
 8008166:	4618      	mov	r0, r3
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008172:	b480      	push	{r7}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3314      	adds	r3, #20
 8008180:	461a      	mov	r2, r3
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	4413      	add	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
}  
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80081be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80081c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80081ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0

}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80081fe:	2310      	movs	r3, #16
 8008200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008202:	2340      	movs	r3, #64	; 0x40
 8008204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008206:	2300      	movs	r3, #0
 8008208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800820a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800820e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008210:	f107 0308 	add.w	r3, r7, #8
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff ff74 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800821c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008220:	2110      	movs	r1, #16
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fa40 	bl	80086a8 <SDMMC_GetCmdResp1>
 8008228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800822a:	69fb      	ldr	r3, [r7, #28]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008242:	2311      	movs	r3, #17
 8008244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008246:	2340      	movs	r3, #64	; 0x40
 8008248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800824e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008252:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008254:	f107 0308 	add.w	r3, r7, #8
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7ff ff52 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008260:	f241 3288 	movw	r2, #5000	; 0x1388
 8008264:	2111      	movs	r1, #17
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa1e 	bl	80086a8 <SDMMC_GetCmdResp1>
 800826c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800826e:	69fb      	ldr	r3, [r7, #28]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008286:	2312      	movs	r3, #18
 8008288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800828a:	2340      	movs	r3, #64	; 0x40
 800828c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800828e:	2300      	movs	r3, #0
 8008290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008296:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008298:	f107 0308 	add.w	r3, r7, #8
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7ff ff30 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80082a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a8:	2112      	movs	r1, #18
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f9fc 	bl	80086a8 <SDMMC_GetCmdResp1>
 80082b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082b2:	69fb      	ldr	r3, [r7, #28]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3720      	adds	r7, #32
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80082ca:	2318      	movs	r3, #24
 80082cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082ce:	2340      	movs	r3, #64	; 0x40
 80082d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082d2:	2300      	movs	r3, #0
 80082d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082dc:	f107 0308 	add.w	r3, r7, #8
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff ff0e 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80082e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ec:	2118      	movs	r1, #24
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f9da 	bl	80086a8 <SDMMC_GetCmdResp1>
 80082f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082f6:	69fb      	ldr	r3, [r7, #28]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3720      	adds	r7, #32
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b088      	sub	sp, #32
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800830e:	2319      	movs	r3, #25
 8008310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008312:	2340      	movs	r3, #64	; 0x40
 8008314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008316:	2300      	movs	r3, #0
 8008318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800831a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800831e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008320:	f107 0308 	add.w	r3, r7, #8
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7ff feec 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800832c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008330:	2119      	movs	r1, #25
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9b8 	bl	80086a8 <SDMMC_GetCmdResp1>
 8008338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800833a:	69fb      	ldr	r3, [r7, #28]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008350:	230c      	movs	r3, #12
 8008352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008354:	2340      	movs	r3, #64	; 0x40
 8008356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800835c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008360:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008362:	f107 0308 	add.w	r3, r7, #8
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff fecb 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800836e:	4a05      	ldr	r2, [pc, #20]	; (8008384 <SDMMC_CmdStopTransfer+0x40>)
 8008370:	210c      	movs	r1, #12
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f998 	bl	80086a8 <SDMMC_GetCmdResp1>
 8008378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800837a:	69fb      	ldr	r3, [r7, #28]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3720      	adds	r7, #32
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	05f5e100 	.word	0x05f5e100

08008388 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	; 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008398:	2307      	movs	r3, #7
 800839a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800839c:	2340      	movs	r3, #64	; 0x40
 800839e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083aa:	f107 0310 	add.w	r3, r7, #16
 80083ae:	4619      	mov	r1, r3
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7ff fea7 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80083b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ba:	2107      	movs	r1, #7
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f973 	bl	80086a8 <SDMMC_GetCmdResp1>
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3728      	adds	r7, #40	; 0x28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b088      	sub	sp, #32
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80083da:	2300      	movs	r3, #0
 80083dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80083de:	2300      	movs	r3, #0
 80083e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083e2:	2300      	movs	r3, #0
 80083e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083ec:	f107 0308 	add.w	r3, r7, #8
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff fe86 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f92d 	bl	8008658 <SDMMC_GetCmdError>
 80083fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008400:	69fb      	ldr	r3, [r7, #28]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b088      	sub	sp, #32
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008412:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008418:	2308      	movs	r3, #8
 800841a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800841c:	2340      	movs	r3, #64	; 0x40
 800841e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008420:	2300      	movs	r3, #0
 8008422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008428:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800842a:	f107 0308 	add.w	r3, r7, #8
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7ff fe67 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fb16 	bl	8008a68 <SDMMC_GetCmdResp7>
 800843c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800843e:	69fb      	ldr	r3, [r7, #28]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3720      	adds	r7, #32
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008456:	2337      	movs	r3, #55	; 0x37
 8008458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800845a:	2340      	movs	r3, #64	; 0x40
 800845c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800845e:	2300      	movs	r3, #0
 8008460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008466:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008468:	f107 0308 	add.w	r3, r7, #8
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7ff fe48 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008474:	f241 3288 	movw	r2, #5000	; 0x1388
 8008478:	2137      	movs	r1, #55	; 0x37
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f914 	bl	80086a8 <SDMMC_GetCmdResp1>
 8008480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008482:	69fb      	ldr	r3, [r7, #28]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3720      	adds	r7, #32
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800849c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80084a2:	2329      	movs	r3, #41	; 0x29
 80084a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084a6:	2340      	movs	r3, #64	; 0x40
 80084a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084b4:	f107 0308 	add.w	r3, r7, #8
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7ff fe22 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fa23 	bl	800890c <SDMMC_GetCmdResp3>
 80084c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084c8:	69fb      	ldr	r3, [r7, #28]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3720      	adds	r7, #32
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b088      	sub	sp, #32
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80084e0:	2306      	movs	r3, #6
 80084e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084e4:	2340      	movs	r3, #64	; 0x40
 80084e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084e8:	2300      	movs	r3, #0
 80084ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084f2:	f107 0308 	add.w	r3, r7, #8
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff fe03 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80084fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008502:	2106      	movs	r1, #6
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f8cf 	bl	80086a8 <SDMMC_GetCmdResp1>
 800850a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800850c:	69fb      	ldr	r3, [r7, #28]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3720      	adds	r7, #32
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b088      	sub	sp, #32
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800851e:	2300      	movs	r3, #0
 8008520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008522:	2333      	movs	r3, #51	; 0x33
 8008524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008526:	2340      	movs	r3, #64	; 0x40
 8008528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800852a:	2300      	movs	r3, #0
 800852c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800852e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008532:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008534:	f107 0308 	add.w	r3, r7, #8
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff fde2 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008540:	f241 3288 	movw	r2, #5000	; 0x1388
 8008544:	2133      	movs	r1, #51	; 0x33
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f8ae 	bl	80086a8 <SDMMC_GetCmdResp1>
 800854c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800854e:	69fb      	ldr	r3, [r7, #28]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3720      	adds	r7, #32
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008564:	2302      	movs	r3, #2
 8008566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008568:	23c0      	movs	r3, #192	; 0xc0
 800856a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800856c:	2300      	movs	r3, #0
 800856e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008574:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008576:	f107 0308 	add.w	r3, r7, #8
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff fdc1 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f97c 	bl	8008880 <SDMMC_GetCmdResp2>
 8008588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800858a:	69fb      	ldr	r3, [r7, #28]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3720      	adds	r7, #32
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80085a2:	2309      	movs	r3, #9
 80085a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80085a6:	23c0      	movs	r3, #192	; 0xc0
 80085a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085b4:	f107 0308 	add.w	r3, r7, #8
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7ff fda2 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f95d 	bl	8008880 <SDMMC_GetCmdResp2>
 80085c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085c8:	69fb      	ldr	r3, [r7, #28]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3720      	adds	r7, #32
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b088      	sub	sp, #32
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80085e0:	2303      	movs	r3, #3
 80085e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085e4:	2340      	movs	r3, #64	; 0x40
 80085e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085e8:	2300      	movs	r3, #0
 80085ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085f2:	f107 0308 	add.w	r3, r7, #8
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff fd83 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	2103      	movs	r1, #3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f9bc 	bl	8008980 <SDMMC_GetCmdResp6>
 8008608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800860a:	69fb      	ldr	r3, [r7, #28]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3720      	adds	r7, #32
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008622:	230d      	movs	r3, #13
 8008624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008626:	2340      	movs	r3, #64	; 0x40
 8008628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800862a:	2300      	movs	r3, #0
 800862c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800862e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008632:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008634:	f107 0308 	add.w	r3, r7, #8
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7ff fd62 	bl	8008104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008640:	f241 3288 	movw	r2, #5000	; 0x1388
 8008644:	210d      	movs	r1, #13
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f82e 	bl	80086a8 <SDMMC_GetCmdResp1>
 800864c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800864e:	69fb      	ldr	r3, [r7, #28]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3720      	adds	r7, #32
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008658:	b490      	push	{r4, r7}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008660:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <SDMMC_GetCmdError+0x48>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a0f      	ldr	r2, [pc, #60]	; (80086a4 <SDMMC_GetCmdError+0x4c>)
 8008666:	fba2 2303 	umull	r2, r3, r2, r3
 800866a:	0a5b      	lsrs	r3, r3, #9
 800866c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008670:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008674:	4623      	mov	r3, r4
 8008676:	1e5c      	subs	r4, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d102      	bne.n	8008682 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800867c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008680:	e009      	b.n	8008696 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0f2      	beq.n	8008674 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	22c5      	movs	r2, #197	; 0xc5
 8008692:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bc90      	pop	{r4, r7}
 800869e:	4770      	bx	lr
 80086a0:	20000004 	.word	0x20000004
 80086a4:	10624dd3 	.word	0x10624dd3

080086a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80086a8:	b590      	push	{r4, r7, lr}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	460b      	mov	r3, r1
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80086b6:	4b6f      	ldr	r3, [pc, #444]	; (8008874 <SDMMC_GetCmdResp1+0x1cc>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a6f      	ldr	r2, [pc, #444]	; (8008878 <SDMMC_GetCmdResp1+0x1d0>)
 80086bc:	fba2 2303 	umull	r2, r3, r2, r3
 80086c0:	0a5b      	lsrs	r3, r3, #9
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80086c8:	4623      	mov	r3, r4
 80086ca:	1e5c      	subs	r4, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086d4:	e0c9      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086da:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f0      	beq.n	80086c8 <SDMMC_GetCmdResp1+0x20>
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1eb      	bne.n	80086c8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d004      	beq.n	8008706 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2204      	movs	r2, #4
 8008700:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008702:	2304      	movs	r3, #4
 8008704:	e0b1      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d004      	beq.n	800871c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2201      	movs	r2, #1
 8008716:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008718:	2301      	movs	r3, #1
 800871a:	e0a6      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	22c5      	movs	r2, #197	; 0xc5
 8008720:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7ff fd18 	bl	8008158 <SDIO_GetCommandResponse>
 8008728:	4603      	mov	r3, r0
 800872a:	461a      	mov	r2, r3
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	4293      	cmp	r3, r2
 8008730:	d001      	beq.n	8008736 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008732:	2301      	movs	r3, #1
 8008734:	e099      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008736:	2100      	movs	r1, #0
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff fd1a 	bl	8008172 <SDIO_GetResponse>
 800873e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4b4e      	ldr	r3, [pc, #312]	; (800887c <SDMMC_GetCmdResp1+0x1d4>)
 8008744:	4013      	ands	r3, r2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800874a:	2300      	movs	r3, #0
 800874c:	e08d      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	da02      	bge.n	800875a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008758:	e087      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008764:	2340      	movs	r3, #64	; 0x40
 8008766:	e080      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008772:	2380      	movs	r3, #128	; 0x80
 8008774:	e079      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008784:	e071      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008794:	e069      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80087a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087a4:	e061      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80087b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087b4:	e059      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80087c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087c4:	e051      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80087d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087d4:	e049      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80087e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087e4:	e041      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80087f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087f4:	e039      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008804:	e031      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008810:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008814:	e029      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008820:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008824:	e021      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008830:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008834:	e019      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008840:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008844:	e011      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008850:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008854:	e009      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f003 0308 	and.w	r3, r3, #8
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008860:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008864:	e001      	b.n	800886a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800886a:	4618      	mov	r0, r3
 800886c:	371c      	adds	r7, #28
 800886e:	46bd      	mov	sp, r7
 8008870:	bd90      	pop	{r4, r7, pc}
 8008872:	bf00      	nop
 8008874:	20000004 	.word	0x20000004
 8008878:	10624dd3 	.word	0x10624dd3
 800887c:	fdffe008 	.word	0xfdffe008

08008880 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008880:	b490      	push	{r4, r7}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008888:	4b1e      	ldr	r3, [pc, #120]	; (8008904 <SDMMC_GetCmdResp2+0x84>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a1e      	ldr	r2, [pc, #120]	; (8008908 <SDMMC_GetCmdResp2+0x88>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	0a5b      	lsrs	r3, r3, #9
 8008894:	f241 3288 	movw	r2, #5000	; 0x1388
 8008898:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800889c:	4623      	mov	r3, r4
 800889e:	1e5c      	subs	r4, r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d102      	bne.n	80088aa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088a8:	e026      	b.n	80088f8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0f0      	beq.n	800889c <SDMMC_GetCmdResp2+0x1c>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1eb      	bne.n	800889c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d004      	beq.n	80088da <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2204      	movs	r2, #4
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088d6:	2304      	movs	r3, #4
 80088d8:	e00e      	b.n	80088f8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d004      	beq.n	80088f0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e003      	b.n	80088f8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	22c5      	movs	r2, #197	; 0xc5
 80088f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bc90      	pop	{r4, r7}
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	20000004 	.word	0x20000004
 8008908:	10624dd3 	.word	0x10624dd3

0800890c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800890c:	b490      	push	{r4, r7}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008914:	4b18      	ldr	r3, [pc, #96]	; (8008978 <SDMMC_GetCmdResp3+0x6c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a18      	ldr	r2, [pc, #96]	; (800897c <SDMMC_GetCmdResp3+0x70>)
 800891a:	fba2 2303 	umull	r2, r3, r2, r3
 800891e:	0a5b      	lsrs	r3, r3, #9
 8008920:	f241 3288 	movw	r2, #5000	; 0x1388
 8008924:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008928:	4623      	mov	r3, r4
 800892a:	1e5c      	subs	r4, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d102      	bne.n	8008936 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008934:	e01b      	b.n	800896e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0f0      	beq.n	8008928 <SDMMC_GetCmdResp3+0x1c>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1eb      	bne.n	8008928 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d004      	beq.n	8008966 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2204      	movs	r2, #4
 8008960:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008962:	2304      	movs	r3, #4
 8008964:	e003      	b.n	800896e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	22c5      	movs	r2, #197	; 0xc5
 800896a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bc90      	pop	{r4, r7}
 8008976:	4770      	bx	lr
 8008978:	20000004 	.word	0x20000004
 800897c:	10624dd3 	.word	0x10624dd3

08008980 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008980:	b590      	push	{r4, r7, lr}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	460b      	mov	r3, r1
 800898a:	607a      	str	r2, [r7, #4]
 800898c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800898e:	4b34      	ldr	r3, [pc, #208]	; (8008a60 <SDMMC_GetCmdResp6+0xe0>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a34      	ldr	r2, [pc, #208]	; (8008a64 <SDMMC_GetCmdResp6+0xe4>)
 8008994:	fba2 2303 	umull	r2, r3, r2, r3
 8008998:	0a5b      	lsrs	r3, r3, #9
 800899a:	f241 3288 	movw	r2, #5000	; 0x1388
 800899e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80089a2:	4623      	mov	r3, r4
 80089a4:	1e5c      	subs	r4, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d102      	bne.n	80089b0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089ae:	e052      	b.n	8008a56 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0f0      	beq.n	80089a2 <SDMMC_GetCmdResp6+0x22>
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1eb      	bne.n	80089a2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d004      	beq.n	80089e0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2204      	movs	r2, #4
 80089da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089dc:	2304      	movs	r3, #4
 80089de:	e03a      	b.n	8008a56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d004      	beq.n	80089f6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e02f      	b.n	8008a56 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f7ff fbae 	bl	8008158 <SDIO_GetCommandResponse>
 80089fc:	4603      	mov	r3, r0
 80089fe:	461a      	mov	r2, r3
 8008a00:	7afb      	ldrb	r3, [r7, #11]
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d001      	beq.n	8008a0a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e025      	b.n	8008a56 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	22c5      	movs	r2, #197	; 0xc5
 8008a0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008a10:	2100      	movs	r1, #0
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f7ff fbad 	bl	8008172 <SDIO_GetResponse>
 8008a18:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d106      	bne.n	8008a32 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	0c1b      	lsrs	r3, r3, #16
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e011      	b.n	8008a56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a40:	e009      	b.n	8008a56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a50:	e001      	b.n	8008a56 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	371c      	adds	r7, #28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd90      	pop	{r4, r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000004 	.word	0x20000004
 8008a64:	10624dd3 	.word	0x10624dd3

08008a68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008a68:	b490      	push	{r4, r7}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a70:	4b21      	ldr	r3, [pc, #132]	; (8008af8 <SDMMC_GetCmdResp7+0x90>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a21      	ldr	r2, [pc, #132]	; (8008afc <SDMMC_GetCmdResp7+0x94>)
 8008a76:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7a:	0a5b      	lsrs	r3, r3, #9
 8008a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008a84:	4623      	mov	r3, r4
 8008a86:	1e5c      	subs	r4, r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d102      	bne.n	8008a92 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a90:	e02c      	b.n	8008aec <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a96:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0f0      	beq.n	8008a84 <SDMMC_GetCmdResp7+0x1c>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1eb      	bne.n	8008a84 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab0:	f003 0304 	and.w	r3, r3, #4
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d004      	beq.n	8008ac2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2204      	movs	r2, #4
 8008abc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008abe:	2304      	movs	r3, #4
 8008ac0:	e014      	b.n	8008aec <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d004      	beq.n	8008ad8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e009      	b.n	8008aec <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2240      	movs	r2, #64	; 0x40
 8008ae8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008aea:	2300      	movs	r3, #0
  
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc90      	pop	{r4, r7}
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000004 	.word	0x20000004
 8008afc:	10624dd3 	.word	0x10624dd3

08008b00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008b04:	4904      	ldr	r1, [pc, #16]	; (8008b18 <MX_FATFS_Init+0x18>)
 8008b06:	4805      	ldr	r0, [pc, #20]	; (8008b1c <MX_FATFS_Init+0x1c>)
 8008b08:	f003 faec 	bl	800c0e4 <FATFS_LinkDriver>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	4b03      	ldr	r3, [pc, #12]	; (8008b20 <MX_FATFS_Init+0x20>)
 8008b12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008b14:	bf00      	nop
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20004ab4 	.word	0x20004ab4
 8008b1c:	080106bc 	.word	0x080106bc
 8008b20:	20004ab0 	.word	0x20004ab0

08008b24 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008b28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008b3e:	f000 f8ac 	bl	8008c9a <BSP_SD_IsDetected>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d001      	beq.n	8008b4c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e012      	b.n	8008b72 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008b4c:	480b      	ldr	r0, [pc, #44]	; (8008b7c <BSP_SD_Init+0x48>)
 8008b4e:	f7fc fd61 	bl	8005614 <HAL_SD_Init>
 8008b52:	4603      	mov	r3, r0
 8008b54:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d109      	bne.n	8008b70 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008b5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b60:	4806      	ldr	r0, [pc, #24]	; (8008b7c <BSP_SD_Init+0x48>)
 8008b62:	f7fd fce3 	bl	800652c <HAL_SD_ConfigWideBusOperation>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008b70:	79fb      	ldrb	r3, [r7, #7]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20001900 	.word	0x20001900

08008b80 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af02      	add	r7, sp, #8
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	68f9      	ldr	r1, [r7, #12]
 8008b9c:	4806      	ldr	r0, [pc, #24]	; (8008bb8 <BSP_SD_ReadBlocks+0x38>)
 8008b9e:	f7fc fdc9 	bl	8005734 <HAL_SD_ReadBlocks>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3718      	adds	r7, #24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20001900 	.word	0x20001900

08008bbc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	4806      	ldr	r0, [pc, #24]	; (8008bf4 <BSP_SD_WriteBlocks+0x38>)
 8008bda:	f7fc ffa5 	bl	8005b28 <HAL_SD_WriteBlocks>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20001900 	.word	0x20001900

08008bf8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008bfc:	4805      	ldr	r0, [pc, #20]	; (8008c14 <BSP_SD_GetCardState+0x1c>)
 8008bfe:	f7fd fd11 	bl	8006624 <HAL_SD_GetCardState>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	bf14      	ite	ne
 8008c08:	2301      	movne	r3, #1
 8008c0a:	2300      	moveq	r3, #0
 8008c0c:	b2db      	uxtb	r3, r3
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20001900 	.word	0x20001900

08008c18 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	4803      	ldr	r0, [pc, #12]	; (8008c30 <BSP_SD_GetCardInfo+0x18>)
 8008c24:	f7fd fc56 	bl	80064d4 <HAL_SD_GetCardInfo>
}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20001900 	.word	0x20001900

08008c34 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008c3c:	f000 f818 	bl	8008c70 <BSP_SD_AbortCallback>
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008c50:	f000 f815 	bl	8008c7e <BSP_SD_WriteCpltCallback>
}
 8008c54:	bf00      	nop
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008c64:	f000 f812 	bl	8008c8c <BSP_SD_ReadCpltCallback>
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008c70:	b480      	push	{r7}
 8008c72:	af00      	add	r7, sp, #0

}
 8008c74:	bf00      	nop
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	af00      	add	r7, sp, #0

}
 8008c82:	bf00      	nop
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0

}
 8008c90:	bf00      	nop
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8008ca4:	f000 f80c 	bl	8008cc0 <BSP_PlatformIsDetected>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
 8008cb4:	b2db      	uxtb	r3, r3
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
	...

08008cc0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008cca:	2180      	movs	r1, #128	; 0x80
 8008ccc:	480f      	ldr	r0, [pc, #60]	; (8008d0c <BSP_PlatformIsDetected+0x4c>)
 8008cce:	f7fb fa63 	bl	8004198 <HAL_GPIO_ReadPin>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    printf("s - %u\n", status);
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	480b      	ldr	r0, [pc, #44]	; (8008d10 <BSP_PlatformIsDetected+0x50>)
 8008ce2:	f004 fbab 	bl	800d43c <iprintf>
    if(status == SD_PRESENT) status = SD_NOT_PRESENT;
 8008ce6:	79fb      	ldrb	r3, [r7, #7]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d102      	bne.n	8008cf2 <BSP_PlatformIsDetected+0x32>
 8008cec:	2300      	movs	r3, #0
 8008cee:	71fb      	strb	r3, [r7, #7]
 8008cf0:	e001      	b.n	8008cf6 <BSP_PlatformIsDetected+0x36>
    else status = SD_PRESENT;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	71fb      	strb	r3, [r7, #7]
    printf("s - %u\n", status);
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4805      	ldr	r0, [pc, #20]	; (8008d10 <BSP_PlatformIsDetected+0x50>)
 8008cfc:	f004 fb9e 	bl	800d43c <iprintf>
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8008d00:	79fb      	ldrb	r3, [r7, #7]
}  
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	40020800 	.word	0x40020800
 8008d10:	08010648 	.word	0x08010648

08008d14 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008d1e:	4b0b      	ldr	r3, [pc, #44]	; (8008d4c <SD_CheckStatus+0x38>)
 8008d20:	2201      	movs	r2, #1
 8008d22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008d24:	f7ff ff68 	bl	8008bf8 <BSP_SD_GetCardState>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d107      	bne.n	8008d3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <SD_CheckStatus+0x38>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	f023 0301 	bic.w	r3, r3, #1
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	4b04      	ldr	r3, [pc, #16]	; (8008d4c <SD_CheckStatus+0x38>)
 8008d3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008d3e:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <SD_CheckStatus+0x38>)
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	b2db      	uxtb	r3, r3
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	2000000d 	.word	0x2000000d

08008d50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	4603      	mov	r3, r0
 8008d58:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <SD_initialize+0x38>)
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008d60:	f7ff fee8 	bl	8008b34 <BSP_SD_Init>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d107      	bne.n	8008d7a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff ffd1 	bl	8008d14 <SD_CheckStatus>
 8008d72:	4603      	mov	r3, r0
 8008d74:	461a      	mov	r2, r3
 8008d76:	4b04      	ldr	r3, [pc, #16]	; (8008d88 <SD_initialize+0x38>)
 8008d78:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8008d7a:	4b03      	ldr	r3, [pc, #12]	; (8008d88 <SD_initialize+0x38>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	b2db      	uxtb	r3, r3
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	2000000d 	.word	0x2000000d

08008d8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7ff ffbb 	bl	8008d14 <SD_CheckStatus>
 8008d9e:	4603      	mov	r3, r0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	607a      	str	r2, [r7, #4]
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	68b8      	ldr	r0, [r7, #8]
 8008dc6:	f7ff fedb 	bl	8008b80 <BSP_SD_ReadBlocks>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d107      	bne.n	8008de0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008dd0:	bf00      	nop
 8008dd2:	f7ff ff11 	bl	8008bf8 <BSP_SD_GetCardState>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1fa      	bne.n	8008dd2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b086      	sub	sp, #24
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	6879      	ldr	r1, [r7, #4]
 8008e06:	68b8      	ldr	r0, [r7, #8]
 8008e08:	f7ff fed8 	bl	8008bbc <BSP_SD_WriteBlocks>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d107      	bne.n	8008e22 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008e12:	bf00      	nop
 8008e14:	f7ff fef0 	bl	8008bf8 <BSP_SD_GetCardState>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1fa      	bne.n	8008e14 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08c      	sub	sp, #48	; 0x30
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	603a      	str	r2, [r7, #0]
 8008e36:	71fb      	strb	r3, [r7, #7]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008e42:	4b25      	ldr	r3, [pc, #148]	; (8008ed8 <SD_ioctl+0xac>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <SD_ioctl+0x28>
 8008e50:	2303      	movs	r3, #3
 8008e52:	e03c      	b.n	8008ece <SD_ioctl+0xa2>

  switch (cmd)
 8008e54:	79bb      	ldrb	r3, [r7, #6]
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d834      	bhi.n	8008ec4 <SD_ioctl+0x98>
 8008e5a:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <SD_ioctl+0x34>)
 8008e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e60:	08008e71 	.word	0x08008e71
 8008e64:	08008e79 	.word	0x08008e79
 8008e68:	08008e91 	.word	0x08008e91
 8008e6c:	08008eab 	.word	0x08008eab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008e76:	e028      	b.n	8008eca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008e78:	f107 030c 	add.w	r3, r7, #12
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff fecb 	bl	8008c18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008e8e:	e01c      	b.n	8008eca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008e90:	f107 030c 	add.w	r3, r7, #12
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff febf 	bl	8008c18 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008ea8:	e00f      	b.n	8008eca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008eaa:	f107 030c 	add.w	r3, r7, #12
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff feb2 	bl	8008c18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	0a5a      	lsrs	r2, r3, #9
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008ec2:	e002      	b.n	8008eca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008ec4:	2304      	movs	r3, #4
 8008ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3730      	adds	r7, #48	; 0x30
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	2000000d 	.word	0x2000000d

08008edc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008ee6:	79fb      	ldrb	r3, [r7, #7]
 8008ee8:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <disk_status+0x30>)
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	79fa      	ldrb	r2, [r7, #7]
 8008ef4:	4905      	ldr	r1, [pc, #20]	; (8008f0c <disk_status+0x30>)
 8008ef6:	440a      	add	r2, r1
 8008ef8:	7a12      	ldrb	r2, [r2, #8]
 8008efa:	4610      	mov	r0, r2
 8008efc:	4798      	blx	r3
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	200004a4 	.word	0x200004a4

08008f10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008f1e:	79fb      	ldrb	r3, [r7, #7]
 8008f20:	4a0d      	ldr	r2, [pc, #52]	; (8008f58 <disk_initialize+0x48>)
 8008f22:	5cd3      	ldrb	r3, [r2, r3]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d111      	bne.n	8008f4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	4a0b      	ldr	r2, [pc, #44]	; (8008f58 <disk_initialize+0x48>)
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	4a09      	ldr	r2, [pc, #36]	; (8008f58 <disk_initialize+0x48>)
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	79fa      	ldrb	r2, [r7, #7]
 8008f3e:	4906      	ldr	r1, [pc, #24]	; (8008f58 <disk_initialize+0x48>)
 8008f40:	440a      	add	r2, r1
 8008f42:	7a12      	ldrb	r2, [r2, #8]
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	200004a4 	.word	0x200004a4

08008f5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008f5c:	b590      	push	{r4, r7, lr}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	607a      	str	r2, [r7, #4]
 8008f66:	603b      	str	r3, [r7, #0]
 8008f68:	4603      	mov	r3, r0
 8008f6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	4a0a      	ldr	r2, [pc, #40]	; (8008f98 <disk_read+0x3c>)
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	689c      	ldr	r4, [r3, #8]
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	4a07      	ldr	r2, [pc, #28]	; (8008f98 <disk_read+0x3c>)
 8008f7c:	4413      	add	r3, r2
 8008f7e:	7a18      	ldrb	r0, [r3, #8]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	47a0      	blx	r4
 8008f88:	4603      	mov	r3, r0
 8008f8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd90      	pop	{r4, r7, pc}
 8008f96:	bf00      	nop
 8008f98:	200004a4 	.word	0x200004a4

08008f9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008f9c:	b590      	push	{r4, r7, lr}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	607a      	str	r2, [r7, #4]
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	4a0a      	ldr	r2, [pc, #40]	; (8008fd8 <disk_write+0x3c>)
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	68dc      	ldr	r4, [r3, #12]
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	4a07      	ldr	r2, [pc, #28]	; (8008fd8 <disk_write+0x3c>)
 8008fbc:	4413      	add	r3, r2
 8008fbe:	7a18      	ldrb	r0, [r3, #8]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	68b9      	ldr	r1, [r7, #8]
 8008fc6:	47a0      	blx	r4
 8008fc8:	4603      	mov	r3, r0
 8008fca:	75fb      	strb	r3, [r7, #23]
  return res;
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd90      	pop	{r4, r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	200004a4 	.word	0x200004a4

08008fdc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	603a      	str	r2, [r7, #0]
 8008fe6:	71fb      	strb	r3, [r7, #7]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	4a09      	ldr	r2, [pc, #36]	; (8009014 <disk_ioctl+0x38>)
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	79fa      	ldrb	r2, [r7, #7]
 8008ffa:	4906      	ldr	r1, [pc, #24]	; (8009014 <disk_ioctl+0x38>)
 8008ffc:	440a      	add	r2, r1
 8008ffe:	7a10      	ldrb	r0, [r2, #8]
 8009000:	79b9      	ldrb	r1, [r7, #6]
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	4798      	blx	r3
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]
  return res;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	200004a4 	.word	0x200004a4

08009018 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3301      	adds	r3, #1
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009028:	89fb      	ldrh	r3, [r7, #14]
 800902a:	021b      	lsls	r3, r3, #8
 800902c:	b21a      	sxth	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	b21b      	sxth	r3, r3
 8009034:	4313      	orrs	r3, r2
 8009036:	b21b      	sxth	r3, r3
 8009038:	81fb      	strh	r3, [r7, #14]
	return rv;
 800903a:	89fb      	ldrh	r3, [r7, #14]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3303      	adds	r3, #3
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	3202      	adds	r2, #2
 8009060:	7812      	ldrb	r2, [r2, #0]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	021b      	lsls	r3, r3, #8
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	3201      	adds	r2, #1
 800906e:	7812      	ldrb	r2, [r2, #0]
 8009070:	4313      	orrs	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	021b      	lsls	r3, r3, #8
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	7812      	ldrb	r2, [r2, #0]
 800907c:	4313      	orrs	r3, r2
 800907e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009080:	68fb      	ldr	r3, [r7, #12]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800908e:	b480      	push	{r7}
 8009090:	b083      	sub	sp, #12
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	460b      	mov	r3, r1
 8009098:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	887a      	ldrh	r2, [r7, #2]
 80090a2:	b2d2      	uxtb	r2, r2
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	887b      	ldrh	r3, [r7, #2]
 80090a8:	0a1b      	lsrs	r3, r3, #8
 80090aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	1c5a      	adds	r2, r3, #1
 80090b0:	607a      	str	r2, [r7, #4]
 80090b2:	887a      	ldrh	r2, [r7, #2]
 80090b4:	b2d2      	uxtb	r2, r2
 80090b6:	701a      	strb	r2, [r3, #0]
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	0a1b      	lsrs	r3, r3, #8
 80090de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	607a      	str	r2, [r7, #4]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	b2d2      	uxtb	r2, r2
 80090ea:	701a      	strb	r2, [r3, #0]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	0a1b      	lsrs	r3, r3, #8
 80090f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	b2d2      	uxtb	r2, r2
 80090fc:	701a      	strb	r2, [r3, #0]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	0a1b      	lsrs	r3, r3, #8
 8009102:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	607a      	str	r2, [r7, #4]
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	b2d2      	uxtb	r2, r2
 800910e:	701a      	strb	r2, [r3, #0]
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800911c:	b480      	push	{r7}
 800911e:	b087      	sub	sp, #28
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00d      	beq.n	8009152 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	1c53      	adds	r3, r2, #1
 800913a:	613b      	str	r3, [r7, #16]
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	1c59      	adds	r1, r3, #1
 8009140:	6179      	str	r1, [r7, #20]
 8009142:	7812      	ldrb	r2, [r2, #0]
 8009144:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3b01      	subs	r3, #1
 800914a:	607b      	str	r3, [r7, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1f1      	bne.n	8009136 <mem_cpy+0x1a>
	}
}
 8009152:	bf00      	nop
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800915e:	b480      	push	{r7}
 8009160:	b087      	sub	sp, #28
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	617a      	str	r2, [r7, #20]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3b01      	subs	r3, #1
 800917e:	607b      	str	r3, [r7, #4]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1f3      	bne.n	800916e <mem_set+0x10>
}
 8009186:	bf00      	nop
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009192:	b480      	push	{r7}
 8009194:	b089      	sub	sp, #36	; 0x24
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	61fb      	str	r3, [r7, #28]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	1c5a      	adds	r2, r3, #1
 80091ae:	61fa      	str	r2, [r7, #28]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	4619      	mov	r1, r3
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	61ba      	str	r2, [r7, #24]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	1acb      	subs	r3, r1, r3
 80091be:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	607b      	str	r3, [r7, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <mem_cmp+0x40>
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0eb      	beq.n	80091aa <mem_cmp+0x18>

	return r;
 80091d2:	697b      	ldr	r3, [r7, #20]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3724      	adds	r7, #36	; 0x24
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80091ea:	e002      	b.n	80091f2 <chk_chr+0x12>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3301      	adds	r3, #1
 80091f0:	607b      	str	r3, [r7, #4]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d005      	beq.n	8009206 <chk_chr+0x26>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	4293      	cmp	r3, r2
 8009204:	d1f2      	bne.n	80091ec <chk_chr+0xc>
	return *str;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	781b      	ldrb	r3, [r3, #0]
}
 800920a:	4618      	mov	r0, r3
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
	...

08009218 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009222:	2300      	movs	r3, #0
 8009224:	60bb      	str	r3, [r7, #8]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	e029      	b.n	8009280 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800922c:	4a27      	ldr	r2, [pc, #156]	; (80092cc <chk_lock+0xb4>)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	4413      	add	r3, r2
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d01d      	beq.n	8009276 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800923a:	4a24      	ldr	r2, [pc, #144]	; (80092cc <chk_lock+0xb4>)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	4413      	add	r3, r2
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	429a      	cmp	r2, r3
 800924a:	d116      	bne.n	800927a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800924c:	4a1f      	ldr	r2, [pc, #124]	; (80092cc <chk_lock+0xb4>)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	011b      	lsls	r3, r3, #4
 8009252:	4413      	add	r3, r2
 8009254:	3304      	adds	r3, #4
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800925c:	429a      	cmp	r2, r3
 800925e:	d10c      	bne.n	800927a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009260:	4a1a      	ldr	r2, [pc, #104]	; (80092cc <chk_lock+0xb4>)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	4413      	add	r3, r2
 8009268:	3308      	adds	r3, #8
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009270:	429a      	cmp	r2, r3
 8009272:	d102      	bne.n	800927a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009274:	e007      	b.n	8009286 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009276:	2301      	movs	r3, #1
 8009278:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3301      	adds	r3, #1
 800927e:	60fb      	str	r3, [r7, #12]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d9d2      	bls.n	800922c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b02      	cmp	r3, #2
 800928a:	d109      	bne.n	80092a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d102      	bne.n	8009298 <chk_lock+0x80>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b02      	cmp	r3, #2
 8009296:	d101      	bne.n	800929c <chk_lock+0x84>
 8009298:	2300      	movs	r3, #0
 800929a:	e010      	b.n	80092be <chk_lock+0xa6>
 800929c:	2312      	movs	r3, #18
 800929e:	e00e      	b.n	80092be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d108      	bne.n	80092b8 <chk_lock+0xa0>
 80092a6:	4a09      	ldr	r2, [pc, #36]	; (80092cc <chk_lock+0xb4>)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	4413      	add	r3, r2
 80092ae:	330c      	adds	r3, #12
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b6:	d101      	bne.n	80092bc <chk_lock+0xa4>
 80092b8:	2310      	movs	r3, #16
 80092ba:	e000      	b.n	80092be <chk_lock+0xa6>
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	20000284 	.word	0x20000284

080092d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80092d6:	2300      	movs	r3, #0
 80092d8:	607b      	str	r3, [r7, #4]
 80092da:	e002      	b.n	80092e2 <enq_lock+0x12>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3301      	adds	r3, #1
 80092e0:	607b      	str	r3, [r7, #4]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d806      	bhi.n	80092f6 <enq_lock+0x26>
 80092e8:	4a09      	ldr	r2, [pc, #36]	; (8009310 <enq_lock+0x40>)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	4413      	add	r3, r2
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1f2      	bne.n	80092dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	bf14      	ite	ne
 80092fc:	2301      	movne	r3, #1
 80092fe:	2300      	moveq	r3, #0
 8009300:	b2db      	uxtb	r3, r3
}
 8009302:	4618      	mov	r0, r3
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20000284 	.word	0x20000284

08009314 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
 8009322:	e01f      	b.n	8009364 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009324:	4a41      	ldr	r2, [pc, #260]	; (800942c <inc_lock+0x118>)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	011b      	lsls	r3, r3, #4
 800932a:	4413      	add	r3, r2
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	429a      	cmp	r2, r3
 8009334:	d113      	bne.n	800935e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009336:	4a3d      	ldr	r2, [pc, #244]	; (800942c <inc_lock+0x118>)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	011b      	lsls	r3, r3, #4
 800933c:	4413      	add	r3, r2
 800933e:	3304      	adds	r3, #4
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009346:	429a      	cmp	r2, r3
 8009348:	d109      	bne.n	800935e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800934a:	4a38      	ldr	r2, [pc, #224]	; (800942c <inc_lock+0x118>)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	011b      	lsls	r3, r3, #4
 8009350:	4413      	add	r3, r2
 8009352:	3308      	adds	r3, #8
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800935a:	429a      	cmp	r2, r3
 800935c:	d006      	beq.n	800936c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3301      	adds	r3, #1
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d9dc      	bls.n	8009324 <inc_lock+0x10>
 800936a:	e000      	b.n	800936e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800936c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b02      	cmp	r3, #2
 8009372:	d132      	bne.n	80093da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009374:	2300      	movs	r3, #0
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	e002      	b.n	8009380 <inc_lock+0x6c>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3301      	adds	r3, #1
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d806      	bhi.n	8009394 <inc_lock+0x80>
 8009386:	4a29      	ldr	r2, [pc, #164]	; (800942c <inc_lock+0x118>)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	4413      	add	r3, r2
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1f2      	bne.n	800937a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b02      	cmp	r3, #2
 8009398:	d101      	bne.n	800939e <inc_lock+0x8a>
 800939a:	2300      	movs	r3, #0
 800939c:	e040      	b.n	8009420 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	4922      	ldr	r1, [pc, #136]	; (800942c <inc_lock+0x118>)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	011b      	lsls	r3, r3, #4
 80093a8:	440b      	add	r3, r1
 80093aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	491e      	ldr	r1, [pc, #120]	; (800942c <inc_lock+0x118>)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	011b      	lsls	r3, r3, #4
 80093b6:	440b      	add	r3, r1
 80093b8:	3304      	adds	r3, #4
 80093ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	695a      	ldr	r2, [r3, #20]
 80093c0:	491a      	ldr	r1, [pc, #104]	; (800942c <inc_lock+0x118>)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	440b      	add	r3, r1
 80093c8:	3308      	adds	r3, #8
 80093ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80093cc:	4a17      	ldr	r2, [pc, #92]	; (800942c <inc_lock+0x118>)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	011b      	lsls	r3, r3, #4
 80093d2:	4413      	add	r3, r2
 80093d4:	330c      	adds	r3, #12
 80093d6:	2200      	movs	r2, #0
 80093d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d009      	beq.n	80093f4 <inc_lock+0xe0>
 80093e0:	4a12      	ldr	r2, [pc, #72]	; (800942c <inc_lock+0x118>)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	011b      	lsls	r3, r3, #4
 80093e6:	4413      	add	r3, r2
 80093e8:	330c      	adds	r3, #12
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <inc_lock+0xe0>
 80093f0:	2300      	movs	r3, #0
 80093f2:	e015      	b.n	8009420 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d108      	bne.n	800940c <inc_lock+0xf8>
 80093fa:	4a0c      	ldr	r2, [pc, #48]	; (800942c <inc_lock+0x118>)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	011b      	lsls	r3, r3, #4
 8009400:	4413      	add	r3, r2
 8009402:	330c      	adds	r3, #12
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	3301      	adds	r3, #1
 8009408:	b29a      	uxth	r2, r3
 800940a:	e001      	b.n	8009410 <inc_lock+0xfc>
 800940c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009410:	4906      	ldr	r1, [pc, #24]	; (800942c <inc_lock+0x118>)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	011b      	lsls	r3, r3, #4
 8009416:	440b      	add	r3, r1
 8009418:	330c      	adds	r3, #12
 800941a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3301      	adds	r3, #1
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	20000284 	.word	0x20000284

08009430 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3b01      	subs	r3, #1
 800943c:	607b      	str	r3, [r7, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d825      	bhi.n	8009490 <dec_lock+0x60>
		n = Files[i].ctr;
 8009444:	4a17      	ldr	r2, [pc, #92]	; (80094a4 <dec_lock+0x74>)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	4413      	add	r3, r2
 800944c:	330c      	adds	r3, #12
 800944e:	881b      	ldrh	r3, [r3, #0]
 8009450:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009452:	89fb      	ldrh	r3, [r7, #14]
 8009454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009458:	d101      	bne.n	800945e <dec_lock+0x2e>
 800945a:	2300      	movs	r3, #0
 800945c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800945e:	89fb      	ldrh	r3, [r7, #14]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <dec_lock+0x3a>
 8009464:	89fb      	ldrh	r3, [r7, #14]
 8009466:	3b01      	subs	r3, #1
 8009468:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800946a:	4a0e      	ldr	r2, [pc, #56]	; (80094a4 <dec_lock+0x74>)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	4413      	add	r3, r2
 8009472:	330c      	adds	r3, #12
 8009474:	89fa      	ldrh	r2, [r7, #14]
 8009476:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009478:	89fb      	ldrh	r3, [r7, #14]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d105      	bne.n	800948a <dec_lock+0x5a>
 800947e:	4a09      	ldr	r2, [pc, #36]	; (80094a4 <dec_lock+0x74>)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	4413      	add	r3, r2
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	737b      	strb	r3, [r7, #13]
 800948e:	e001      	b.n	8009494 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009490:	2302      	movs	r3, #2
 8009492:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009494:	7b7b      	ldrb	r3, [r7, #13]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	20000284 	.word	0x20000284

080094a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	e010      	b.n	80094d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80094b6:	4a0d      	ldr	r2, [pc, #52]	; (80094ec <clear_lock+0x44>)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	4413      	add	r3, r2
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d105      	bne.n	80094d2 <clear_lock+0x2a>
 80094c6:	4a09      	ldr	r2, [pc, #36]	; (80094ec <clear_lock+0x44>)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	011b      	lsls	r3, r3, #4
 80094cc:	4413      	add	r3, r2
 80094ce:	2200      	movs	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3301      	adds	r3, #1
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d9eb      	bls.n	80094b6 <clear_lock+0xe>
	}
}
 80094de:	bf00      	nop
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	20000284 	.word	0x20000284

080094f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	78db      	ldrb	r3, [r3, #3]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d034      	beq.n	800956e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009508:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	7858      	ldrb	r0, [r3, #1]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009514:	2301      	movs	r3, #1
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	f7ff fd40 	bl	8008f9c <disk_write>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009522:	2301      	movs	r3, #1
 8009524:	73fb      	strb	r3, [r7, #15]
 8009526:	e022      	b.n	800956e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	1ad2      	subs	r2, r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	429a      	cmp	r2, r3
 800953c:	d217      	bcs.n	800956e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	789b      	ldrb	r3, [r3, #2]
 8009542:	613b      	str	r3, [r7, #16]
 8009544:	e010      	b.n	8009568 <sync_window+0x78>
					wsect += fs->fsize;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	4413      	add	r3, r2
 800954e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	7858      	ldrb	r0, [r3, #1]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800955a:	2301      	movs	r3, #1
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	f7ff fd1d 	bl	8008f9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	3b01      	subs	r3, #1
 8009566:	613b      	str	r3, [r7, #16]
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d8eb      	bhi.n	8009546 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3718      	adds	r7, #24
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	429a      	cmp	r2, r3
 800958e:	d01b      	beq.n	80095c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff ffad 	bl	80094f0 <sync_window>
 8009596:	4603      	mov	r3, r0
 8009598:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d113      	bne.n	80095c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	7858      	ldrb	r0, [r3, #1]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80095aa:	2301      	movs	r3, #1
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	f7ff fcd5 	bl	8008f5c <disk_read>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80095b8:	f04f 33ff 	mov.w	r3, #4294967295
 80095bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80095be:	2301      	movs	r3, #1
 80095c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff ff87 	bl	80094f0 <sync_window>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d159      	bne.n	80096a0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d149      	bne.n	8009688 <sync_fs+0xb4>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	791b      	ldrb	r3, [r3, #4]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d145      	bne.n	8009688 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	899b      	ldrh	r3, [r3, #12]
 8009606:	461a      	mov	r2, r3
 8009608:	2100      	movs	r1, #0
 800960a:	f7ff fda8 	bl	800915e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3338      	adds	r3, #56	; 0x38
 8009612:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009616:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff fd37 	bl	800908e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3338      	adds	r3, #56	; 0x38
 8009624:	4921      	ldr	r1, [pc, #132]	; (80096ac <sync_fs+0xd8>)
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff fd4c 	bl	80090c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3338      	adds	r3, #56	; 0x38
 8009630:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009634:	491e      	ldr	r1, [pc, #120]	; (80096b0 <sync_fs+0xdc>)
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff fd44 	bl	80090c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	3338      	adds	r3, #56	; 0x38
 8009640:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f7ff fd3a 	bl	80090c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3338      	adds	r3, #56	; 0x38
 8009654:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	4619      	mov	r1, r3
 800965e:	4610      	mov	r0, r2
 8009660:	f7ff fd30 	bl	80090c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	7858      	ldrb	r0, [r3, #1]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800967c:	2301      	movs	r3, #1
 800967e:	f7ff fc8d 	bl	8008f9c <disk_write>
			fs->fsi_flag = 0;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	785b      	ldrb	r3, [r3, #1]
 800968c:	2200      	movs	r2, #0
 800968e:	2100      	movs	r1, #0
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff fca3 	bl	8008fdc <disk_ioctl>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <sync_fs+0xcc>
 800969c:	2301      	movs	r3, #1
 800969e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	41615252 	.word	0x41615252
 80096b0:	61417272 	.word	0x61417272

080096b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	3b02      	subs	r3, #2
 80096c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	69db      	ldr	r3, [r3, #28]
 80096c8:	3b02      	subs	r3, #2
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d301      	bcc.n	80096d4 <clust2sect+0x20>
 80096d0:	2300      	movs	r3, #0
 80096d2:	e008      	b.n	80096e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	895b      	ldrh	r3, [r3, #10]
 80096d8:	461a      	mov	r2, r3
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	fb03 f202 	mul.w	r2, r3, r2
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e4:	4413      	add	r3, r2
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b086      	sub	sp, #24
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d904      	bls.n	8009712 <get_fat+0x20>
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	429a      	cmp	r2, r3
 8009710:	d302      	bcc.n	8009718 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009712:	2301      	movs	r3, #1
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	e0b7      	b.n	8009888 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009718:	f04f 33ff 	mov.w	r3, #4294967295
 800971c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d05a      	beq.n	80097dc <get_fat+0xea>
 8009726:	2b03      	cmp	r3, #3
 8009728:	d07d      	beq.n	8009826 <get_fat+0x134>
 800972a:	2b01      	cmp	r3, #1
 800972c:	f040 80a2 	bne.w	8009874 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	085b      	lsrs	r3, r3, #1
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	4413      	add	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	899b      	ldrh	r3, [r3, #12]
 8009746:	4619      	mov	r1, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	fbb3 f3f1 	udiv	r3, r3, r1
 800974e:	4413      	add	r3, r2
 8009750:	4619      	mov	r1, r3
 8009752:	6938      	ldr	r0, [r7, #16]
 8009754:	f7ff ff10 	bl	8009578 <move_window>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	f040 808d 	bne.w	800987a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	60fa      	str	r2, [r7, #12]
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	8992      	ldrh	r2, [r2, #12]
 800976a:	fbb3 f1f2 	udiv	r1, r3, r2
 800976e:	fb02 f201 	mul.w	r2, r2, r1
 8009772:	1a9b      	subs	r3, r3, r2
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	4413      	add	r3, r2
 8009778:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800977c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	899b      	ldrh	r3, [r3, #12]
 8009786:	4619      	mov	r1, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	fbb3 f3f1 	udiv	r3, r3, r1
 800978e:	4413      	add	r3, r2
 8009790:	4619      	mov	r1, r3
 8009792:	6938      	ldr	r0, [r7, #16]
 8009794:	f7ff fef0 	bl	8009578 <move_window>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d16f      	bne.n	800987e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	899b      	ldrh	r3, [r3, #12]
 80097a2:	461a      	mov	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80097aa:	fb02 f201 	mul.w	r2, r2, r1
 80097ae:	1a9b      	subs	r3, r3, r2
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	4413      	add	r3, r2
 80097b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80097b8:	021b      	lsls	r3, r3, #8
 80097ba:	461a      	mov	r2, r3
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	4313      	orrs	r3, r2
 80097c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <get_fat+0xe0>
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	091b      	lsrs	r3, r3, #4
 80097d0:	e002      	b.n	80097d8 <get_fat+0xe6>
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097d8:	617b      	str	r3, [r7, #20]
			break;
 80097da:	e055      	b.n	8009888 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	899b      	ldrh	r3, [r3, #12]
 80097e4:	085b      	lsrs	r3, r3, #1
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	4619      	mov	r1, r3
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80097f0:	4413      	add	r3, r2
 80097f2:	4619      	mov	r1, r3
 80097f4:	6938      	ldr	r0, [r7, #16]
 80097f6:	f7ff febf 	bl	8009578 <move_window>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d140      	bne.n	8009882 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	8992      	ldrh	r2, [r2, #12]
 800980e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009812:	fb02 f200 	mul.w	r2, r2, r0
 8009816:	1a9b      	subs	r3, r3, r2
 8009818:	440b      	add	r3, r1
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff fbfc 	bl	8009018 <ld_word>
 8009820:	4603      	mov	r3, r0
 8009822:	617b      	str	r3, [r7, #20]
			break;
 8009824:	e030      	b.n	8009888 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	899b      	ldrh	r3, [r3, #12]
 800982e:	089b      	lsrs	r3, r3, #2
 8009830:	b29b      	uxth	r3, r3
 8009832:	4619      	mov	r1, r3
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	fbb3 f3f1 	udiv	r3, r3, r1
 800983a:	4413      	add	r3, r2
 800983c:	4619      	mov	r1, r3
 800983e:	6938      	ldr	r0, [r7, #16]
 8009840:	f7ff fe9a 	bl	8009578 <move_window>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d11d      	bne.n	8009886 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	8992      	ldrh	r2, [r2, #12]
 8009858:	fbb3 f0f2 	udiv	r0, r3, r2
 800985c:	fb02 f200 	mul.w	r2, r2, r0
 8009860:	1a9b      	subs	r3, r3, r2
 8009862:	440b      	add	r3, r1
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff fbef 	bl	8009048 <ld_dword>
 800986a:	4603      	mov	r3, r0
 800986c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009870:	617b      	str	r3, [r7, #20]
			break;
 8009872:	e009      	b.n	8009888 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009874:	2301      	movs	r3, #1
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	e006      	b.n	8009888 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800987a:	bf00      	nop
 800987c:	e004      	b.n	8009888 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800987e:	bf00      	nop
 8009880:	e002      	b.n	8009888 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009882:	bf00      	nop
 8009884:	e000      	b.n	8009888 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009886:	bf00      	nop
		}
	}

	return val;
 8009888:	697b      	ldr	r3, [r7, #20]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009892:	b590      	push	{r4, r7, lr}
 8009894:	b089      	sub	sp, #36	; 0x24
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800989e:	2302      	movs	r3, #2
 80098a0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	f240 8106 	bls.w	8009ab6 <put_fat+0x224>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	69db      	ldr	r3, [r3, #28]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	f080 8100 	bcs.w	8009ab6 <put_fat+0x224>
		switch (fs->fs_type) {
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	f000 8088 	beq.w	80099d0 <put_fat+0x13e>
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	f000 80b0 	beq.w	8009a26 <put_fat+0x194>
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	f040 80f5 	bne.w	8009ab6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	61bb      	str	r3, [r7, #24]
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	085b      	lsrs	r3, r3, #1
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	4413      	add	r3, r2
 80098d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	899b      	ldrh	r3, [r3, #12]
 80098e2:	4619      	mov	r1, r3
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80098ea:	4413      	add	r3, r2
 80098ec:	4619      	mov	r1, r3
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7ff fe42 	bl	8009578 <move_window>
 80098f4:	4603      	mov	r3, r0
 80098f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098f8:	7ffb      	ldrb	r3, [r7, #31]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f040 80d4 	bne.w	8009aa8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	61ba      	str	r2, [r7, #24]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	8992      	ldrh	r2, [r2, #12]
 8009910:	fbb3 f0f2 	udiv	r0, r3, r2
 8009914:	fb02 f200 	mul.w	r2, r2, r0
 8009918:	1a9b      	subs	r3, r3, r2
 800991a:	440b      	add	r3, r1
 800991c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	f003 0301 	and.w	r3, r3, #1
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00d      	beq.n	8009944 <put_fat+0xb2>
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	b25b      	sxtb	r3, r3
 800992e:	f003 030f 	and.w	r3, r3, #15
 8009932:	b25a      	sxtb	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	b2db      	uxtb	r3, r3
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	b25b      	sxtb	r3, r3
 800993c:	4313      	orrs	r3, r2
 800993e:	b25b      	sxtb	r3, r3
 8009940:	b2db      	uxtb	r3, r3
 8009942:	e001      	b.n	8009948 <put_fat+0xb6>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	b2db      	uxtb	r3, r3
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2201      	movs	r2, #1
 8009950:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	899b      	ldrh	r3, [r3, #12]
 800995a:	4619      	mov	r1, r3
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009962:	4413      	add	r3, r2
 8009964:	4619      	mov	r1, r3
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f7ff fe06 	bl	8009578 <move_window>
 800996c:	4603      	mov	r3, r0
 800996e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009970:	7ffb      	ldrb	r3, [r7, #31]
 8009972:	2b00      	cmp	r3, #0
 8009974:	f040 809a 	bne.w	8009aac <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	899b      	ldrh	r3, [r3, #12]
 8009982:	461a      	mov	r2, r3
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	fbb3 f0f2 	udiv	r0, r3, r2
 800998a:	fb02 f200 	mul.w	r2, r2, r0
 800998e:	1a9b      	subs	r3, r3, r2
 8009990:	440b      	add	r3, r1
 8009992:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <put_fat+0x114>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	091b      	lsrs	r3, r3, #4
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	e00e      	b.n	80099c4 <put_fat+0x132>
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	b25b      	sxtb	r3, r3
 80099ac:	f023 030f 	bic.w	r3, r3, #15
 80099b0:	b25a      	sxtb	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	0a1b      	lsrs	r3, r3, #8
 80099b6:	b25b      	sxtb	r3, r3
 80099b8:	f003 030f 	and.w	r3, r3, #15
 80099bc:	b25b      	sxtb	r3, r3
 80099be:	4313      	orrs	r3, r2
 80099c0:	b25b      	sxtb	r3, r3
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2201      	movs	r2, #1
 80099cc:	70da      	strb	r2, [r3, #3]
			break;
 80099ce:	e072      	b.n	8009ab6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	899b      	ldrh	r3, [r3, #12]
 80099d8:	085b      	lsrs	r3, r3, #1
 80099da:	b29b      	uxth	r3, r3
 80099dc:	4619      	mov	r1, r3
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80099e4:	4413      	add	r3, r2
 80099e6:	4619      	mov	r1, r3
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7ff fdc5 	bl	8009578 <move_window>
 80099ee:	4603      	mov	r3, r0
 80099f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099f2:	7ffb      	ldrb	r3, [r7, #31]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d15b      	bne.n	8009ab0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	005b      	lsls	r3, r3, #1
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	8992      	ldrh	r2, [r2, #12]
 8009a06:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a0a:	fb02 f200 	mul.w	r2, r2, r0
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	440b      	add	r3, r1
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	b292      	uxth	r2, r2
 8009a16:	4611      	mov	r1, r2
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7ff fb38 	bl	800908e <st_word>
			fs->wflag = 1;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2201      	movs	r2, #1
 8009a22:	70da      	strb	r2, [r3, #3]
			break;
 8009a24:	e047      	b.n	8009ab6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	899b      	ldrh	r3, [r3, #12]
 8009a2e:	089b      	lsrs	r3, r3, #2
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	4619      	mov	r1, r3
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a3a:	4413      	add	r3, r2
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f7ff fd9a 	bl	8009578 <move_window>
 8009a44:	4603      	mov	r3, r0
 8009a46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a48:	7ffb      	ldrb	r3, [r7, #31]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d132      	bne.n	8009ab4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	8992      	ldrh	r2, [r2, #12]
 8009a62:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a66:	fb02 f200 	mul.w	r2, r2, r0
 8009a6a:	1a9b      	subs	r3, r3, r2
 8009a6c:	440b      	add	r3, r1
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7ff faea 	bl	8009048 <ld_dword>
 8009a74:	4603      	mov	r3, r0
 8009a76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a7a:	4323      	orrs	r3, r4
 8009a7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	8992      	ldrh	r2, [r2, #12]
 8009a8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a90:	fb02 f200 	mul.w	r2, r2, r0
 8009a94:	1a9b      	subs	r3, r3, r2
 8009a96:	440b      	add	r3, r1
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff fb12 	bl	80090c4 <st_dword>
			fs->wflag = 1;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	70da      	strb	r2, [r3, #3]
			break;
 8009aa6:	e006      	b.n	8009ab6 <put_fat+0x224>
			if (res != FR_OK) break;
 8009aa8:	bf00      	nop
 8009aaa:	e004      	b.n	8009ab6 <put_fat+0x224>
			if (res != FR_OK) break;
 8009aac:	bf00      	nop
 8009aae:	e002      	b.n	8009ab6 <put_fat+0x224>
			if (res != FR_OK) break;
 8009ab0:	bf00      	nop
 8009ab2:	e000      	b.n	8009ab6 <put_fat+0x224>
			if (res != FR_OK) break;
 8009ab4:	bf00      	nop
		}
	}
	return res;
 8009ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3724      	adds	r7, #36	; 0x24
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd90      	pop	{r4, r7, pc}

08009ac0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d904      	bls.n	8009ae6 <remove_chain+0x26>
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	69db      	ldr	r3, [r3, #28]
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d301      	bcc.n	8009aea <remove_chain+0x2a>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e04b      	b.n	8009b82 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00c      	beq.n	8009b0a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009af0:	f04f 32ff 	mov.w	r2, #4294967295
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	69b8      	ldr	r0, [r7, #24]
 8009af8:	f7ff fecb 	bl	8009892 <put_fat>
 8009afc:	4603      	mov	r3, r0
 8009afe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009b00:	7ffb      	ldrb	r3, [r7, #31]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <remove_chain+0x4a>
 8009b06:	7ffb      	ldrb	r3, [r7, #31]
 8009b08:	e03b      	b.n	8009b82 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009b0a:	68b9      	ldr	r1, [r7, #8]
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f7ff fdf0 	bl	80096f2 <get_fat>
 8009b12:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d031      	beq.n	8009b7e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d101      	bne.n	8009b24 <remove_chain+0x64>
 8009b20:	2302      	movs	r3, #2
 8009b22:	e02e      	b.n	8009b82 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2a:	d101      	bne.n	8009b30 <remove_chain+0x70>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e028      	b.n	8009b82 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009b30:	2200      	movs	r2, #0
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	69b8      	ldr	r0, [r7, #24]
 8009b36:	f7ff feac 	bl	8009892 <put_fat>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009b3e:	7ffb      	ldrb	r3, [r7, #31]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <remove_chain+0x88>
 8009b44:	7ffb      	ldrb	r3, [r7, #31]
 8009b46:	e01c      	b.n	8009b82 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	699a      	ldr	r2, [r3, #24]
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	3b02      	subs	r3, #2
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d20b      	bcs.n	8009b6e <remove_chain+0xae>
			fs->free_clst++;
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	791b      	ldrb	r3, [r3, #4]
 8009b64:	f043 0301 	orr.w	r3, r3, #1
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d3c6      	bcc.n	8009b0a <remove_chain+0x4a>
 8009b7c:	e000      	b.n	8009b80 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009b7e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3720      	adds	r7, #32
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b088      	sub	sp, #32
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10d      	bne.n	8009bbc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d004      	beq.n	8009bb6 <create_chain+0x2c>
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	69db      	ldr	r3, [r3, #28]
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d31b      	bcc.n	8009bee <create_chain+0x64>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	61bb      	str	r3, [r7, #24]
 8009bba:	e018      	b.n	8009bee <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff fd97 	bl	80096f2 <get_fat>
 8009bc4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d801      	bhi.n	8009bd0 <create_chain+0x46>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e070      	b.n	8009cb2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd6:	d101      	bne.n	8009bdc <create_chain+0x52>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	e06a      	b.n	8009cb2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d201      	bcs.n	8009bea <create_chain+0x60>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	e063      	b.n	8009cb2 <create_chain+0x128>
		scl = clst;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d307      	bcc.n	8009c12 <create_chain+0x88>
				ncl = 2;
 8009c02:	2302      	movs	r3, #2
 8009c04:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009c06:	69fa      	ldr	r2, [r7, #28]
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d901      	bls.n	8009c12 <create_chain+0x88>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e04f      	b.n	8009cb2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009c12:	69f9      	ldr	r1, [r7, #28]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff fd6c 	bl	80096f2 <get_fat>
 8009c1a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00e      	beq.n	8009c40 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d003      	beq.n	8009c30 <create_chain+0xa6>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	d101      	bne.n	8009c34 <create_chain+0xaa>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	e03e      	b.n	8009cb2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009c34:	69fa      	ldr	r2, [r7, #28]
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d1da      	bne.n	8009bf2 <create_chain+0x68>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e038      	b.n	8009cb2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009c40:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009c42:	f04f 32ff 	mov.w	r2, #4294967295
 8009c46:	69f9      	ldr	r1, [r7, #28]
 8009c48:	6938      	ldr	r0, [r7, #16]
 8009c4a:	f7ff fe22 	bl	8009892 <put_fat>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d109      	bne.n	8009c6c <create_chain+0xe2>
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d006      	beq.n	8009c6c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009c5e:	69fa      	ldr	r2, [r7, #28]
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6938      	ldr	r0, [r7, #16]
 8009c64:	f7ff fe15 	bl	8009892 <put_fat>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d116      	bne.n	8009ca0 <create_chain+0x116>
		fs->last_clst = ncl;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	69fa      	ldr	r2, [r7, #28]
 8009c76:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	699a      	ldr	r2, [r3, #24]
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	3b02      	subs	r3, #2
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d804      	bhi.n	8009c90 <create_chain+0x106>
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	1e5a      	subs	r2, r3, #1
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	791b      	ldrb	r3, [r3, #4]
 8009c94:	f043 0301 	orr.w	r3, r3, #1
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	711a      	strb	r2, [r3, #4]
 8009c9e:	e007      	b.n	8009cb0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d102      	bne.n	8009cac <create_chain+0x122>
 8009ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8009caa:	e000      	b.n	8009cae <create_chain+0x124>
 8009cac:	2301      	movs	r3, #1
 8009cae:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009cb0:	69fb      	ldr	r3, [r7, #28]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3720      	adds	r7, #32
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b087      	sub	sp, #28
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cce:	3304      	adds	r3, #4
 8009cd0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	899b      	ldrh	r3, [r3, #12]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	8952      	ldrh	r2, [r2, #10]
 8009ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ce6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	1d1a      	adds	r2, r3, #4
 8009cec:	613a      	str	r2, [r7, #16]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <clmt_clust+0x42>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	e010      	b.n	8009d1e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d307      	bcc.n	8009d14 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d12:	e7e9      	b.n	8009ce8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009d14:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	4413      	add	r3, r2
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	371c      	adds	r7, #28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b086      	sub	sp, #24
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d40:	d204      	bcs.n	8009d4c <dir_sdi+0x22>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	f003 031f 	and.w	r3, r3, #31
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	e071      	b.n	8009e34 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d106      	bne.n	8009d70 <dir_sdi+0x46>
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d902      	bls.n	8009d70 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10c      	bne.n	8009d90 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	095b      	lsrs	r3, r3, #5
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	8912      	ldrh	r2, [r2, #8]
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d301      	bcc.n	8009d86 <dir_sdi+0x5c>
 8009d82:	2302      	movs	r3, #2
 8009d84:	e056      	b.n	8009e34 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	61da      	str	r2, [r3, #28]
 8009d8e:	e02d      	b.n	8009dec <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	895b      	ldrh	r3, [r3, #10]
 8009d94:	461a      	mov	r2, r3
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	899b      	ldrh	r3, [r3, #12]
 8009d9a:	fb03 f302 	mul.w	r3, r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009da0:	e019      	b.n	8009dd6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6979      	ldr	r1, [r7, #20]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff fca3 	bl	80096f2 <get_fat>
 8009dac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db4:	d101      	bne.n	8009dba <dir_sdi+0x90>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e03c      	b.n	8009e34 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d904      	bls.n	8009dca <dir_sdi+0xa0>
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	69db      	ldr	r3, [r3, #28]
 8009dc4:	697a      	ldr	r2, [r7, #20]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d301      	bcc.n	8009dce <dir_sdi+0xa4>
 8009dca:	2302      	movs	r3, #2
 8009dcc:	e032      	b.n	8009e34 <dir_sdi+0x10a>
			ofs -= csz;
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d2e1      	bcs.n	8009da2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009dde:	6979      	ldr	r1, [r7, #20]
 8009de0:	6938      	ldr	r0, [r7, #16]
 8009de2:	f7ff fc67 	bl	80096b4 <clust2sect>
 8009de6:	4602      	mov	r2, r0
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <dir_sdi+0xd4>
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	e01a      	b.n	8009e34 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	69da      	ldr	r2, [r3, #28]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	899b      	ldrh	r3, [r3, #12]
 8009e06:	4619      	mov	r1, r3
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e0e:	441a      	add	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	899b      	ldrh	r3, [r3, #12]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e26:	fb02 f200 	mul.w	r2, r2, r0
 8009e2a:	1a9b      	subs	r3, r3, r2
 8009e2c:	18ca      	adds	r2, r1, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	3320      	adds	r3, #32
 8009e52:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	69db      	ldr	r3, [r3, #28]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d003      	beq.n	8009e64 <dir_next+0x28>
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e62:	d301      	bcc.n	8009e68 <dir_next+0x2c>
 8009e64:	2304      	movs	r3, #4
 8009e66:	e0bb      	b.n	8009fe0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	899b      	ldrh	r3, [r3, #12]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e74:	fb02 f201 	mul.w	r2, r2, r1
 8009e78:	1a9b      	subs	r3, r3, r2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f040 809d 	bne.w	8009fba <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	69db      	ldr	r3, [r3, #28]
 8009e84:	1c5a      	adds	r2, r3, #1
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10b      	bne.n	8009eaa <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	095b      	lsrs	r3, r3, #5
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	8912      	ldrh	r2, [r2, #8]
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	f0c0 808d 	bcc.w	8009fba <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	61da      	str	r2, [r3, #28]
 8009ea6:	2304      	movs	r3, #4
 8009ea8:	e09a      	b.n	8009fe0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	899b      	ldrh	r3, [r3, #12]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	8952      	ldrh	r2, [r2, #10]
 8009eba:	3a01      	subs	r2, #1
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d17b      	bne.n	8009fba <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4610      	mov	r0, r2
 8009ecc:	f7ff fc11 	bl	80096f2 <get_fat>
 8009ed0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d801      	bhi.n	8009edc <dir_next+0xa0>
 8009ed8:	2302      	movs	r3, #2
 8009eda:	e081      	b.n	8009fe0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee2:	d101      	bne.n	8009ee8 <dir_next+0xac>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e07b      	b.n	8009fe0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	69db      	ldr	r3, [r3, #28]
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d359      	bcc.n	8009fa6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d104      	bne.n	8009f02 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	61da      	str	r2, [r3, #28]
 8009efe:	2304      	movs	r3, #4
 8009f00:	e06e      	b.n	8009fe0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	f7ff fe3d 	bl	8009b8a <create_chain>
 8009f10:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <dir_next+0xe0>
 8009f18:	2307      	movs	r3, #7
 8009f1a:	e061      	b.n	8009fe0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d101      	bne.n	8009f26 <dir_next+0xea>
 8009f22:	2302      	movs	r3, #2
 8009f24:	e05c      	b.n	8009fe0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2c:	d101      	bne.n	8009f32 <dir_next+0xf6>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e056      	b.n	8009fe0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f7ff fadc 	bl	80094f0 <sync_window>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <dir_next+0x106>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e04e      	b.n	8009fe0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	899b      	ldrh	r3, [r3, #12]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	2100      	movs	r1, #0
 8009f50:	f7ff f905 	bl	800915e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f54:	2300      	movs	r3, #0
 8009f56:	613b      	str	r3, [r7, #16]
 8009f58:	6979      	ldr	r1, [r7, #20]
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7ff fbaa 	bl	80096b4 <clust2sect>
 8009f60:	4602      	mov	r2, r0
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	635a      	str	r2, [r3, #52]	; 0x34
 8009f66:	e012      	b.n	8009f8e <dir_next+0x152>
						fs->wflag = 1;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f7ff fabe 	bl	80094f0 <sync_window>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <dir_next+0x142>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e030      	b.n	8009fe0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	3301      	adds	r3, #1
 8009f82:	613b      	str	r3, [r7, #16]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	895b      	ldrh	r3, [r3, #10]
 8009f92:	461a      	mov	r2, r3
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d3e6      	bcc.n	8009f68 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	1ad2      	subs	r2, r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009fac:	6979      	ldr	r1, [r7, #20]
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f7ff fb80 	bl	80096b4 <clust2sect>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	899b      	ldrh	r3, [r3, #12]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fd2:	fb02 f200 	mul.w	r2, r2, r0
 8009fd6:	1a9b      	subs	r3, r3, r2
 8009fd8:	18ca      	adds	r2, r1, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3718      	adds	r7, #24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff fe95 	bl	8009d2a <dir_sdi>
 800a000:	4603      	mov	r3, r0
 800a002:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a004:	7dfb      	ldrb	r3, [r7, #23]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d12b      	bne.n	800a062 <dir_alloc+0x7a>
		n = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	4619      	mov	r1, r3
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f7ff faaf 	bl	8009578 <move_window>
 800a01a:	4603      	mov	r3, r0
 800a01c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d11d      	bne.n	800a060 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a1b      	ldr	r3, [r3, #32]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	2be5      	cmp	r3, #229	; 0xe5
 800a02c:	d004      	beq.n	800a038 <dir_alloc+0x50>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d107      	bne.n	800a048 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	3301      	adds	r3, #1
 800a03c:	613b      	str	r3, [r7, #16]
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d102      	bne.n	800a04c <dir_alloc+0x64>
 800a046:	e00c      	b.n	800a062 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a048:	2300      	movs	r3, #0
 800a04a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a04c:	2101      	movs	r1, #1
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff fef4 	bl	8009e3c <dir_next>
 800a054:	4603      	mov	r3, r0
 800a056:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a058:	7dfb      	ldrb	r3, [r7, #23]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0d7      	beq.n	800a00e <dir_alloc+0x26>
 800a05e:	e000      	b.n	800a062 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a060:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	2b04      	cmp	r3, #4
 800a066:	d101      	bne.n	800a06c <dir_alloc+0x84>
 800a068:	2307      	movs	r3, #7
 800a06a:	75fb      	strb	r3, [r7, #23]
	return res;
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	331a      	adds	r3, #26
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe ffc7 	bl	8009018 <ld_word>
 800a08a:	4603      	mov	r3, r0
 800a08c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b03      	cmp	r3, #3
 800a094:	d109      	bne.n	800a0aa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	3314      	adds	r3, #20
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe ffbc 	bl	8009018 <ld_word>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	041b      	lsls	r3, r3, #16
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	331a      	adds	r3, #26
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	b292      	uxth	r2, r2
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe ffdf 	bl	800908e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2b03      	cmp	r3, #3
 800a0d6:	d109      	bne.n	800a0ec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	f103 0214 	add.w	r2, r3, #20
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	0c1b      	lsrs	r3, r3, #16
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	f7fe ffd1 	bl	800908e <st_word>
	}
}
 800a0ec:	bf00      	nop
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a0f4:	b590      	push	{r4, r7, lr}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	331a      	adds	r3, #26
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe ff88 	bl	8009018 <ld_word>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <cmp_lfn+0x1e>
 800a10e:	2300      	movs	r3, #0
 800a110:	e059      	b.n	800a1c6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a11a:	1e5a      	subs	r2, r3, #1
 800a11c:	4613      	mov	r3, r2
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	4413      	add	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a128:	2301      	movs	r3, #1
 800a12a:	81fb      	strh	r3, [r7, #14]
 800a12c:	2300      	movs	r3, #0
 800a12e:	613b      	str	r3, [r7, #16]
 800a130:	e033      	b.n	800a19a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a132:	4a27      	ldr	r2, [pc, #156]	; (800a1d0 <cmp_lfn+0xdc>)
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	4413      	add	r3, r2
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	4413      	add	r3, r2
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe ff69 	bl	8009018 <ld_word>
 800a146:	4603      	mov	r3, r0
 800a148:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a14a:	89fb      	ldrh	r3, [r7, #14]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d01a      	beq.n	800a186 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	2bfe      	cmp	r3, #254	; 0xfe
 800a154:	d812      	bhi.n	800a17c <cmp_lfn+0x88>
 800a156:	89bb      	ldrh	r3, [r7, #12]
 800a158:	4618      	mov	r0, r3
 800a15a:	f002 f80f 	bl	800c17c <ff_wtoupper>
 800a15e:	4603      	mov	r3, r0
 800a160:	461c      	mov	r4, r3
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	1c5a      	adds	r2, r3, #1
 800a166:	617a      	str	r2, [r7, #20]
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	4618      	mov	r0, r3
 800a172:	f002 f803 	bl	800c17c <ff_wtoupper>
 800a176:	4603      	mov	r3, r0
 800a178:	429c      	cmp	r4, r3
 800a17a:	d001      	beq.n	800a180 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a17c:	2300      	movs	r3, #0
 800a17e:	e022      	b.n	800a1c6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a180:	89bb      	ldrh	r3, [r7, #12]
 800a182:	81fb      	strh	r3, [r7, #14]
 800a184:	e006      	b.n	800a194 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a186:	89bb      	ldrh	r3, [r7, #12]
 800a188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d001      	beq.n	800a194 <cmp_lfn+0xa0>
 800a190:	2300      	movs	r3, #0
 800a192:	e018      	b.n	800a1c6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	3301      	adds	r3, #1
 800a198:	613b      	str	r3, [r7, #16]
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2b0c      	cmp	r3, #12
 800a19e:	d9c8      	bls.n	800a132 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00b      	beq.n	800a1c4 <cmp_lfn+0xd0>
 800a1ac:	89fb      	ldrh	r3, [r7, #14]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d008      	beq.n	800a1c4 <cmp_lfn+0xd0>
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <cmp_lfn+0xd0>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	e000      	b.n	800a1c6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a1c4:	2301      	movs	r3, #1
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	371c      	adds	r7, #28
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd90      	pop	{r4, r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	08010750 	.word	0x08010750

0800a1d4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b088      	sub	sp, #32
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	4611      	mov	r1, r2
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	71fb      	strb	r3, [r7, #7]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	330d      	adds	r3, #13
 800a1ee:	79ba      	ldrb	r2, [r7, #6]
 800a1f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	330b      	adds	r3, #11
 800a1f6:	220f      	movs	r2, #15
 800a1f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	330c      	adds	r3, #12
 800a1fe:	2200      	movs	r2, #0
 800a200:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	331a      	adds	r3, #26
 800a206:	2100      	movs	r1, #0
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fe ff40 	bl	800908e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a20e:	79fb      	ldrb	r3, [r7, #7]
 800a210:	1e5a      	subs	r2, r3, #1
 800a212:	4613      	mov	r3, r2
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	82fb      	strh	r3, [r7, #22]
 800a222:	2300      	movs	r3, #0
 800a224:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a226:	8afb      	ldrh	r3, [r7, #22]
 800a228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d007      	beq.n	800a240 <put_lfn+0x6c>
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	61fa      	str	r2, [r7, #28]
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	4413      	add	r3, r2
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a240:	4a17      	ldr	r2, [pc, #92]	; (800a2a0 <put_lfn+0xcc>)
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	4413      	add	r3, r2
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	4413      	add	r3, r2
 800a24e:	8afa      	ldrh	r2, [r7, #22]
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe ff1b 	bl	800908e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a258:	8afb      	ldrh	r3, [r7, #22]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d102      	bne.n	800a264 <put_lfn+0x90>
 800a25e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a262:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	3301      	adds	r3, #1
 800a268:	61bb      	str	r3, [r7, #24]
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	2b0c      	cmp	r3, #12
 800a26e:	d9da      	bls.n	800a226 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a270:	8afb      	ldrh	r3, [r7, #22]
 800a272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a276:	4293      	cmp	r3, r2
 800a278:	d006      	beq.n	800a288 <put_lfn+0xb4>
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	4413      	add	r3, r2
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d103      	bne.n	800a290 <put_lfn+0xbc>
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a28e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	79fa      	ldrb	r2, [r7, #7]
 800a294:	701a      	strb	r2, [r3, #0]
}
 800a296:	bf00      	nop
 800a298:	3720      	adds	r7, #32
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	08010750 	.word	0x08010750

0800a2a4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b08c      	sub	sp, #48	; 0x30
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a2b2:	220b      	movs	r2, #11
 800a2b4:	68b9      	ldr	r1, [r7, #8]
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7fe ff30 	bl	800911c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	2b05      	cmp	r3, #5
 800a2c0:	d92b      	bls.n	800a31a <gen_numname+0x76>
		sr = seq;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a2c6:	e022      	b.n	800a30e <gen_numname+0x6a>
			wc = *lfn++;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	1c9a      	adds	r2, r3, #2
 800a2cc:	607a      	str	r2, [r7, #4]
 800a2ce:	881b      	ldrh	r3, [r3, #0]
 800a2d0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2d6:	e017      	b.n	800a308 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	005a      	lsls	r2, r3, #1
 800a2dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	4413      	add	r3, r2
 800a2e4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a2e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2e8:	085b      	lsrs	r3, r3, #1
 800a2ea:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <gen_numname+0x5e>
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a2fc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a300:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a304:	3301      	adds	r3, #1
 800a306:	62bb      	str	r3, [r7, #40]	; 0x28
 800a308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30a:	2b0f      	cmp	r3, #15
 800a30c:	d9e4      	bls.n	800a2d8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1d8      	bne.n	800a2c8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a31a:	2307      	movs	r3, #7
 800a31c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	b2db      	uxtb	r3, r3
 800a322:	f003 030f 	and.w	r3, r3, #15
 800a326:	b2db      	uxtb	r3, r3
 800a328:	3330      	adds	r3, #48	; 0x30
 800a32a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a32e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a332:	2b39      	cmp	r3, #57	; 0x39
 800a334:	d904      	bls.n	800a340 <gen_numname+0x9c>
 800a336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a33a:	3307      	adds	r3, #7
 800a33c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a342:	1e5a      	subs	r2, r3, #1
 800a344:	62ba      	str	r2, [r7, #40]	; 0x28
 800a346:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a34a:	4413      	add	r3, r2
 800a34c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a350:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	091b      	lsrs	r3, r3, #4
 800a358:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1de      	bne.n	800a31e <gen_numname+0x7a>
	ns[i] = '~';
 800a360:	f107 0214 	add.w	r2, r7, #20
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a366:	4413      	add	r3, r2
 800a368:	227e      	movs	r2, #126	; 0x7e
 800a36a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a36c:	2300      	movs	r3, #0
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
 800a370:	e002      	b.n	800a378 <gen_numname+0xd4>
 800a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a374:	3301      	adds	r3, #1
 800a376:	627b      	str	r3, [r7, #36]	; 0x24
 800a378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d205      	bcs.n	800a38c <gen_numname+0xe8>
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	4413      	add	r3, r2
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	2b20      	cmp	r3, #32
 800a38a:	d1f2      	bne.n	800a372 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	2b07      	cmp	r3, #7
 800a390:	d808      	bhi.n	800a3a4 <gen_numname+0x100>
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	1c5a      	adds	r2, r3, #1
 800a396:	62ba      	str	r2, [r7, #40]	; 0x28
 800a398:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a39c:	4413      	add	r3, r2
 800a39e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a3a2:	e000      	b.n	800a3a6 <gen_numname+0x102>
 800a3a4:	2120      	movs	r1, #32
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	627a      	str	r2, [r7, #36]	; 0x24
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	460a      	mov	r2, r1
 800a3b2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	2b07      	cmp	r3, #7
 800a3b8:	d9e8      	bls.n	800a38c <gen_numname+0xe8>
}
 800a3ba:	bf00      	nop
 800a3bc:	3730      	adds	r7, #48	; 0x30
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b085      	sub	sp, #20
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a3ce:	230b      	movs	r3, #11
 800a3d0:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	0852      	lsrs	r2, r2, #1
 800a3d8:	01db      	lsls	r3, r3, #7
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	1c59      	adds	r1, r3, #1
 800a3e2:	6079      	str	r1, [r7, #4]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	60bb      	str	r3, [r7, #8]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1ed      	bne.n	800a3d2 <sum_sfn+0x10>
	return sum;
 800a3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a412:	2100      	movs	r1, #0
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff fc88 	bl	8009d2a <dir_sdi>
 800a41a:	4603      	mov	r3, r0
 800a41c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a41e:	7dfb      	ldrb	r3, [r7, #23]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <dir_find+0x24>
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	e0a9      	b.n	800a57c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a428:	23ff      	movs	r3, #255	; 0xff
 800a42a:	753b      	strb	r3, [r7, #20]
 800a42c:	7d3b      	ldrb	r3, [r7, #20]
 800a42e:	757b      	strb	r3, [r7, #21]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f04f 32ff 	mov.w	r2, #4294967295
 800a436:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	69db      	ldr	r3, [r3, #28]
 800a43c:	4619      	mov	r1, r3
 800a43e:	6938      	ldr	r0, [r7, #16]
 800a440:	f7ff f89a 	bl	8009578 <move_window>
 800a444:	4603      	mov	r3, r0
 800a446:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a448:	7dfb      	ldrb	r3, [r7, #23]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f040 8090 	bne.w	800a570 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a458:	7dbb      	ldrb	r3, [r7, #22]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d102      	bne.n	800a464 <dir_find+0x60>
 800a45e:	2304      	movs	r3, #4
 800a460:	75fb      	strb	r3, [r7, #23]
 800a462:	e08a      	b.n	800a57a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	330b      	adds	r3, #11
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a470:	73fb      	strb	r3, [r7, #15]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	7bfa      	ldrb	r2, [r7, #15]
 800a476:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a478:	7dbb      	ldrb	r3, [r7, #22]
 800a47a:	2be5      	cmp	r3, #229	; 0xe5
 800a47c:	d007      	beq.n	800a48e <dir_find+0x8a>
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
 800a480:	f003 0308 	and.w	r3, r3, #8
 800a484:	2b00      	cmp	r3, #0
 800a486:	d009      	beq.n	800a49c <dir_find+0x98>
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	2b0f      	cmp	r3, #15
 800a48c:	d006      	beq.n	800a49c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a48e:	23ff      	movs	r3, #255	; 0xff
 800a490:	757b      	strb	r3, [r7, #21]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f04f 32ff 	mov.w	r2, #4294967295
 800a498:	631a      	str	r2, [r3, #48]	; 0x30
 800a49a:	e05e      	b.n	800a55a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	2b0f      	cmp	r3, #15
 800a4a0:	d136      	bne.n	800a510 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d154      	bne.n	800a55a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a4b0:	7dbb      	ldrb	r3, [r7, #22]
 800a4b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00d      	beq.n	800a4d6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	7b5b      	ldrb	r3, [r3, #13]
 800a4c0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a4c2:	7dbb      	ldrb	r3, [r7, #22]
 800a4c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4c8:	75bb      	strb	r3, [r7, #22]
 800a4ca:	7dbb      	ldrb	r3, [r7, #22]
 800a4cc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	695a      	ldr	r2, [r3, #20]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a4d6:	7dba      	ldrb	r2, [r7, #22]
 800a4d8:	7d7b      	ldrb	r3, [r7, #21]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d115      	bne.n	800a50a <dir_find+0x106>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	330d      	adds	r3, #13
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	7d3a      	ldrb	r2, [r7, #20]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d10e      	bne.n	800a50a <dir_find+0x106>
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	691a      	ldr	r2, [r3, #16]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a1b      	ldr	r3, [r3, #32]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	f7ff fdfc 	bl	800a0f4 <cmp_lfn>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d003      	beq.n	800a50a <dir_find+0x106>
 800a502:	7d7b      	ldrb	r3, [r7, #21]
 800a504:	3b01      	subs	r3, #1
 800a506:	b2db      	uxtb	r3, r3
 800a508:	e000      	b.n	800a50c <dir_find+0x108>
 800a50a:	23ff      	movs	r3, #255	; 0xff
 800a50c:	757b      	strb	r3, [r7, #21]
 800a50e:	e024      	b.n	800a55a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a510:	7d7b      	ldrb	r3, [r7, #21]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d109      	bne.n	800a52a <dir_find+0x126>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7ff ff51 	bl	800a3c2 <sum_sfn>
 800a520:	4603      	mov	r3, r0
 800a522:	461a      	mov	r2, r3
 800a524:	7d3b      	ldrb	r3, [r7, #20]
 800a526:	4293      	cmp	r3, r2
 800a528:	d024      	beq.n	800a574 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <dir_find+0x14a>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a18      	ldr	r0, [r3, #32]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3324      	adds	r3, #36	; 0x24
 800a540:	220b      	movs	r2, #11
 800a542:	4619      	mov	r1, r3
 800a544:	f7fe fe25 	bl	8009192 <mem_cmp>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d014      	beq.n	800a578 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a54e:	23ff      	movs	r3, #255	; 0xff
 800a550:	757b      	strb	r3, [r7, #21]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f04f 32ff 	mov.w	r2, #4294967295
 800a558:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a55a:	2100      	movs	r1, #0
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7ff fc6d 	bl	8009e3c <dir_next>
 800a562:	4603      	mov	r3, r0
 800a564:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a566:	7dfb      	ldrb	r3, [r7, #23]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f43f af65 	beq.w	800a438 <dir_find+0x34>
 800a56e:	e004      	b.n	800a57a <dir_find+0x176>
		if (res != FR_OK) break;
 800a570:	bf00      	nop
 800a572:	e002      	b.n	800a57a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a574:	bf00      	nop
 800a576:	e000      	b.n	800a57a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a578:	bf00      	nop

	return res;
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3718      	adds	r7, #24
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08c      	sub	sp, #48	; 0x30
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a598:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <dir_register+0x20>
 800a5a0:	2306      	movs	r3, #6
 800a5a2:	e0e0      	b.n	800a766 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5a8:	e002      	b.n	800a5b0 <dir_register+0x2c>
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	691a      	ldr	r2, [r3, #16]
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	4413      	add	r3, r2
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1f4      	bne.n	800a5aa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a5c6:	f107 030c 	add.w	r3, r7, #12
 800a5ca:	220c      	movs	r2, #12
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fe fda5 	bl	800911c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d032      	beq.n	800a642 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2240      	movs	r2, #64	; 0x40
 800a5e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5e8:	e016      	b.n	800a618 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	691a      	ldr	r2, [r3, #16]
 800a5f4:	f107 010c 	add.w	r1, r7, #12
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	f7ff fe53 	bl	800a2a4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7ff ff00 	bl	800a404 <dir_find>
 800a604:	4603      	mov	r3, r0
 800a606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a60a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d106      	bne.n	800a620 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	3301      	adds	r3, #1
 800a616:	62bb      	str	r3, [r7, #40]	; 0x28
 800a618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61a:	2b63      	cmp	r3, #99	; 0x63
 800a61c:	d9e5      	bls.n	800a5ea <dir_register+0x66>
 800a61e:	e000      	b.n	800a622 <dir_register+0x9e>
			if (res != FR_OK) break;
 800a620:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	2b64      	cmp	r3, #100	; 0x64
 800a626:	d101      	bne.n	800a62c <dir_register+0xa8>
 800a628:	2307      	movs	r3, #7
 800a62a:	e09c      	b.n	800a766 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a62c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a630:	2b04      	cmp	r3, #4
 800a632:	d002      	beq.n	800a63a <dir_register+0xb6>
 800a634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a638:	e095      	b.n	800a766 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a63a:	7dfa      	ldrb	r2, [r7, #23]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a642:	7dfb      	ldrb	r3, [r7, #23]
 800a644:	f003 0302 	and.w	r3, r3, #2
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d007      	beq.n	800a65c <dir_register+0xd8>
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	330c      	adds	r3, #12
 800a650:	4a47      	ldr	r2, [pc, #284]	; (800a770 <dir_register+0x1ec>)
 800a652:	fba2 2303 	umull	r2, r3, r2, r3
 800a656:	089b      	lsrs	r3, r3, #2
 800a658:	3301      	adds	r3, #1
 800a65a:	e000      	b.n	800a65e <dir_register+0xda>
 800a65c:	2301      	movs	r3, #1
 800a65e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a660:	6a39      	ldr	r1, [r7, #32]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7ff fcc0 	bl	8009fe8 <dir_alloc>
 800a668:	4603      	mov	r3, r0
 800a66a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a66e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a672:	2b00      	cmp	r3, #0
 800a674:	d148      	bne.n	800a708 <dir_register+0x184>
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	3b01      	subs	r3, #1
 800a67a:	623b      	str	r3, [r7, #32]
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d042      	beq.n	800a708 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	695a      	ldr	r2, [r3, #20]
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	015b      	lsls	r3, r3, #5
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff fb4b 	bl	8009d2a <dir_sdi>
 800a694:	4603      	mov	r3, r0
 800a696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a69a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d132      	bne.n	800a708 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3324      	adds	r3, #36	; 0x24
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7ff fe8b 	bl	800a3c2 <sum_sfn>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	69f8      	ldr	r0, [r7, #28]
 800a6b8:	f7fe ff5e 	bl	8009578 <move_window>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a6c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d11d      	bne.n	800a706 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	6918      	ldr	r0, [r3, #16]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a19      	ldr	r1, [r3, #32]
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	7efb      	ldrb	r3, [r7, #27]
 800a6d8:	f7ff fd7c 	bl	800a1d4 <put_lfn>
				fs->wflag = 1;
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff fba9 	bl	8009e3c <dir_next>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a6f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d107      	bne.n	800a708 <dir_register+0x184>
 800a6f8:	6a3b      	ldr	r3, [r7, #32]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	623b      	str	r3, [r7, #32]
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1d5      	bne.n	800a6b0 <dir_register+0x12c>
 800a704:	e000      	b.n	800a708 <dir_register+0x184>
				if (res != FR_OK) break;
 800a706:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d128      	bne.n	800a762 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	69db      	ldr	r3, [r3, #28]
 800a714:	4619      	mov	r1, r3
 800a716:	69f8      	ldr	r0, [r7, #28]
 800a718:	f7fe ff2e 	bl	8009578 <move_window>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a726:	2b00      	cmp	r3, #0
 800a728:	d11b      	bne.n	800a762 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	2220      	movs	r2, #32
 800a730:	2100      	movs	r1, #0
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe fd13 	bl	800915e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a18      	ldr	r0, [r3, #32]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	3324      	adds	r3, #36	; 0x24
 800a740:	220b      	movs	r2, #11
 800a742:	4619      	mov	r1, r3
 800a744:	f7fe fcea 	bl	800911c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	330c      	adds	r3, #12
 800a754:	f002 0218 	and.w	r2, r2, #24
 800a758:	b2d2      	uxtb	r2, r2
 800a75a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	2201      	movs	r2, #1
 800a760:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a766:	4618      	mov	r0, r3
 800a768:	3730      	adds	r7, #48	; 0x30
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	4ec4ec4f 	.word	0x4ec4ec4f

0800a774 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08a      	sub	sp, #40	; 0x28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	613b      	str	r3, [r7, #16]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	2300      	movs	r3, #0
 800a78e:	617b      	str	r3, [r7, #20]
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	61ba      	str	r2, [r7, #24]
 800a79a:	693a      	ldr	r2, [r7, #16]
 800a79c:	4413      	add	r3, r2
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a7a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7a4:	2b1f      	cmp	r3, #31
 800a7a6:	d940      	bls.n	800a82a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a7a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7aa:	2b2f      	cmp	r3, #47	; 0x2f
 800a7ac:	d006      	beq.n	800a7bc <create_name+0x48>
 800a7ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7b0:	2b5c      	cmp	r3, #92	; 0x5c
 800a7b2:	d110      	bne.n	800a7d6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a7b4:	e002      	b.n	800a7bc <create_name+0x48>
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	61bb      	str	r3, [r7, #24]
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	2b2f      	cmp	r3, #47	; 0x2f
 800a7c6:	d0f6      	beq.n	800a7b6 <create_name+0x42>
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	2b5c      	cmp	r3, #92	; 0x5c
 800a7d2:	d0f0      	beq.n	800a7b6 <create_name+0x42>
			break;
 800a7d4:	e02a      	b.n	800a82c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	2bfe      	cmp	r3, #254	; 0xfe
 800a7da:	d901      	bls.n	800a7e0 <create_name+0x6c>
 800a7dc:	2306      	movs	r3, #6
 800a7de:	e177      	b.n	800aad0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a7e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a7e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f001 fc8a 	bl	800c104 <ff_convert>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a7f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d101      	bne.n	800a7fe <create_name+0x8a>
 800a7fa:	2306      	movs	r3, #6
 800a7fc:	e168      	b.n	800aad0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a7fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a800:	2b7f      	cmp	r3, #127	; 0x7f
 800a802:	d809      	bhi.n	800a818 <create_name+0xa4>
 800a804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a806:	4619      	mov	r1, r3
 800a808:	48b3      	ldr	r0, [pc, #716]	; (800aad8 <create_name+0x364>)
 800a80a:	f7fe fce9 	bl	80091e0 <chk_chr>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <create_name+0xa4>
 800a814:	2306      	movs	r3, #6
 800a816:	e15b      	b.n	800aad0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	1c5a      	adds	r2, r3, #1
 800a81c:	617a      	str	r2, [r7, #20]
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	4413      	add	r3, r2
 800a824:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a826:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a828:	e7b4      	b.n	800a794 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a82a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	441a      	add	r2, r3
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a838:	2b1f      	cmp	r3, #31
 800a83a:	d801      	bhi.n	800a840 <create_name+0xcc>
 800a83c:	2304      	movs	r3, #4
 800a83e:	e000      	b.n	800a842 <create_name+0xce>
 800a840:	2300      	movs	r3, #0
 800a842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a846:	e011      	b.n	800a86c <create_name+0xf8>
		w = lfn[di - 1];
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a84e:	3b01      	subs	r3, #1
 800a850:	005b      	lsls	r3, r3, #1
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	4413      	add	r3, r2
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a85a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	d002      	beq.n	800a866 <create_name+0xf2>
 800a860:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a862:	2b2e      	cmp	r3, #46	; 0x2e
 800a864:	d106      	bne.n	800a874 <create_name+0x100>
		di--;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	3b01      	subs	r3, #1
 800a86a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1ea      	bne.n	800a848 <create_name+0xd4>
 800a872:	e000      	b.n	800a876 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a874:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	4413      	add	r3, r2
 800a87e:	2200      	movs	r2, #0
 800a880:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <create_name+0x118>
 800a888:	2306      	movs	r3, #6
 800a88a:	e121      	b.n	800aad0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3324      	adds	r3, #36	; 0x24
 800a890:	220b      	movs	r2, #11
 800a892:	2120      	movs	r1, #32
 800a894:	4618      	mov	r0, r3
 800a896:	f7fe fc62 	bl	800915e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a89a:	2300      	movs	r3, #0
 800a89c:	61bb      	str	r3, [r7, #24]
 800a89e:	e002      	b.n	800a8a6 <create_name+0x132>
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	61bb      	str	r3, [r7, #24]
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	2b20      	cmp	r3, #32
 800a8b2:	d0f5      	beq.n	800a8a0 <create_name+0x12c>
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	2b2e      	cmp	r3, #46	; 0x2e
 800a8c0:	d0ee      	beq.n	800a8a0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d009      	beq.n	800a8dc <create_name+0x168>
 800a8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8cc:	f043 0303 	orr.w	r3, r3, #3
 800a8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a8d4:	e002      	b.n	800a8dc <create_name+0x168>
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d009      	beq.n	800a8f6 <create_name+0x182>
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a8f4:	d1ef      	bne.n	800a8d6 <create_name+0x162>

	i = b = 0; ni = 8;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	623b      	str	r3, [r7, #32]
 800a900:	2308      	movs	r3, #8
 800a902:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	1c5a      	adds	r2, r3, #1
 800a908:	61ba      	str	r2, [r7, #24]
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	881b      	ldrh	r3, [r3, #0]
 800a912:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 8090 	beq.w	800aa3c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a91c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a91e:	2b20      	cmp	r3, #32
 800a920:	d006      	beq.n	800a930 <create_name+0x1bc>
 800a922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a924:	2b2e      	cmp	r3, #46	; 0x2e
 800a926:	d10a      	bne.n	800a93e <create_name+0x1ca>
 800a928:	69ba      	ldr	r2, [r7, #24]
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d006      	beq.n	800a93e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a934:	f043 0303 	orr.w	r3, r3, #3
 800a938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a93c:	e07d      	b.n	800aa3a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a93e:	6a3a      	ldr	r2, [r7, #32]
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	429a      	cmp	r2, r3
 800a944:	d203      	bcs.n	800a94e <create_name+0x1da>
 800a946:	69ba      	ldr	r2, [r7, #24]
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d123      	bne.n	800a996 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	2b0b      	cmp	r3, #11
 800a952:	d106      	bne.n	800a962 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a958:	f043 0303 	orr.w	r3, r3, #3
 800a95c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a960:	e06f      	b.n	800aa42 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a962:	69ba      	ldr	r2, [r7, #24]
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	429a      	cmp	r2, r3
 800a968:	d005      	beq.n	800a976 <create_name+0x202>
 800a96a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a96e:	f043 0303 	orr.w	r3, r3, #3
 800a972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d860      	bhi.n	800aa40 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	61bb      	str	r3, [r7, #24]
 800a982:	2308      	movs	r3, #8
 800a984:	623b      	str	r3, [r7, #32]
 800a986:	230b      	movs	r3, #11
 800a988:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a98a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a994:	e051      	b.n	800aa3a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a998:	2b7f      	cmp	r3, #127	; 0x7f
 800a99a:	d914      	bls.n	800a9c6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a99c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a99e:	2100      	movs	r1, #0
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f001 fbaf 	bl	800c104 <ff_convert>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a9aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d004      	beq.n	800a9ba <create_name+0x246>
 800a9b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9b2:	3b80      	subs	r3, #128	; 0x80
 800a9b4:	4a49      	ldr	r2, [pc, #292]	; (800aadc <create_name+0x368>)
 800a9b6:	5cd3      	ldrb	r3, [r2, r3]
 800a9b8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a9ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9be:	f043 0302 	orr.w	r3, r3, #2
 800a9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a9c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d007      	beq.n	800a9dc <create_name+0x268>
 800a9cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4843      	ldr	r0, [pc, #268]	; (800aae0 <create_name+0x36c>)
 800a9d2:	f7fe fc05 	bl	80091e0 <chk_chr>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d008      	beq.n	800a9ee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a9dc:	235f      	movs	r3, #95	; 0x5f
 800a9de:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9e4:	f043 0303 	orr.w	r3, r3, #3
 800a9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9ec:	e01b      	b.n	800aa26 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a9ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9f0:	2b40      	cmp	r3, #64	; 0x40
 800a9f2:	d909      	bls.n	800aa08 <create_name+0x294>
 800a9f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9f6:	2b5a      	cmp	r3, #90	; 0x5a
 800a9f8:	d806      	bhi.n	800aa08 <create_name+0x294>
					b |= 2;
 800a9fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9fe:	f043 0302 	orr.w	r3, r3, #2
 800aa02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aa06:	e00e      	b.n	800aa26 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800aa08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa0a:	2b60      	cmp	r3, #96	; 0x60
 800aa0c:	d90b      	bls.n	800aa26 <create_name+0x2b2>
 800aa0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa10:	2b7a      	cmp	r3, #122	; 0x7a
 800aa12:	d808      	bhi.n	800aa26 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800aa14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa18:	f043 0301 	orr.w	r3, r3, #1
 800aa1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aa20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa22:	3b20      	subs	r3, #32
 800aa24:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	1c5a      	adds	r2, r3, #1
 800aa2a:	623a      	str	r2, [r7, #32]
 800aa2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa2e:	b2d1      	uxtb	r1, r2
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	4413      	add	r3, r2
 800aa34:	460a      	mov	r2, r1
 800aa36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800aa3a:	e763      	b.n	800a904 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800aa3c:	bf00      	nop
 800aa3e:	e000      	b.n	800aa42 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800aa40:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aa48:	2be5      	cmp	r3, #229	; 0xe5
 800aa4a:	d103      	bne.n	800aa54 <create_name+0x2e0>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2205      	movs	r2, #5
 800aa50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	2b08      	cmp	r3, #8
 800aa58:	d104      	bne.n	800aa64 <create_name+0x2f0>
 800aa5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800aa64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa68:	f003 030c 	and.w	r3, r3, #12
 800aa6c:	2b0c      	cmp	r3, #12
 800aa6e:	d005      	beq.n	800aa7c <create_name+0x308>
 800aa70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa74:	f003 0303 	and.w	r3, r3, #3
 800aa78:	2b03      	cmp	r3, #3
 800aa7a:	d105      	bne.n	800aa88 <create_name+0x314>
 800aa7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa80:	f043 0302 	orr.w	r3, r3, #2
 800aa84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800aa88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa8c:	f003 0302 	and.w	r3, r3, #2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d117      	bne.n	800aac4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800aa94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa98:	f003 0303 	and.w	r3, r3, #3
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d105      	bne.n	800aaac <create_name+0x338>
 800aaa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaa4:	f043 0310 	orr.w	r3, r3, #16
 800aaa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800aaac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aab0:	f003 030c 	and.w	r3, r3, #12
 800aab4:	2b04      	cmp	r3, #4
 800aab6:	d105      	bne.n	800aac4 <create_name+0x350>
 800aab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aabc:	f043 0308 	orr.w	r3, r3, #8
 800aac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aaca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800aace:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3728      	adds	r7, #40	; 0x28
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	08010650 	.word	0x08010650
 800aadc:	080106d0 	.word	0x080106d0
 800aae0:	0801065c 	.word	0x0801065c

0800aae4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aaf8:	e002      	b.n	800ab00 <follow_path+0x1c>
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	3301      	adds	r3, #1
 800aafe:	603b      	str	r3, [r7, #0]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	2b2f      	cmp	r3, #47	; 0x2f
 800ab06:	d0f8      	beq.n	800aafa <follow_path+0x16>
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b5c      	cmp	r3, #92	; 0x5c
 800ab0e:	d0f4      	beq.n	800aafa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	2200      	movs	r2, #0
 800ab14:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	2b1f      	cmp	r3, #31
 800ab1c:	d80a      	bhi.n	800ab34 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2280      	movs	r2, #128	; 0x80
 800ab22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ab26:	2100      	movs	r1, #0
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7ff f8fe 	bl	8009d2a <dir_sdi>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	75fb      	strb	r3, [r7, #23]
 800ab32:	e048      	b.n	800abc6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab34:	463b      	mov	r3, r7
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7ff fe1b 	bl	800a774 <create_name>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d139      	bne.n	800abbc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff fc5b 	bl	800a404 <dir_find>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ab58:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ab5a:	7dfb      	ldrb	r3, [r7, #23]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00a      	beq.n	800ab76 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
 800ab62:	2b04      	cmp	r3, #4
 800ab64:	d12c      	bne.n	800abc0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ab66:	7afb      	ldrb	r3, [r7, #11]
 800ab68:	f003 0304 	and.w	r3, r3, #4
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d127      	bne.n	800abc0 <follow_path+0xdc>
 800ab70:	2305      	movs	r3, #5
 800ab72:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ab74:	e024      	b.n	800abc0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab76:	7afb      	ldrb	r3, [r7, #11]
 800ab78:	f003 0304 	and.w	r3, r3, #4
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d121      	bne.n	800abc4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	799b      	ldrb	r3, [r3, #6]
 800ab84:	f003 0310 	and.w	r3, r3, #16
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d102      	bne.n	800ab92 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ab8c:	2305      	movs	r3, #5
 800ab8e:	75fb      	strb	r3, [r7, #23]
 800ab90:	e019      	b.n	800abc6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	8992      	ldrh	r2, [r2, #12]
 800aba0:	fbb3 f0f2 	udiv	r0, r3, r2
 800aba4:	fb02 f200 	mul.w	r2, r2, r0
 800aba8:	1a9b      	subs	r3, r3, r2
 800abaa:	440b      	add	r3, r1
 800abac:	4619      	mov	r1, r3
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f7ff fa61 	bl	800a076 <ld_clust>
 800abb4:	4602      	mov	r2, r0
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800abba:	e7bb      	b.n	800ab34 <follow_path+0x50>
			if (res != FR_OK) break;
 800abbc:	bf00      	nop
 800abbe:	e002      	b.n	800abc6 <follow_path+0xe2>
				break;
 800abc0:	bf00      	nop
 800abc2:	e000      	b.n	800abc6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800abc4:	bf00      	nop
			}
		}
	}

	return res;
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b087      	sub	sp, #28
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800abd8:	f04f 33ff 	mov.w	r3, #4294967295
 800abdc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d031      	beq.n	800ac4a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	617b      	str	r3, [r7, #20]
 800abec:	e002      	b.n	800abf4 <get_ldnumber+0x24>
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	3301      	adds	r3, #1
 800abf2:	617b      	str	r3, [r7, #20]
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	2b1f      	cmp	r3, #31
 800abfa:	d903      	bls.n	800ac04 <get_ldnumber+0x34>
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	2b3a      	cmp	r3, #58	; 0x3a
 800ac02:	d1f4      	bne.n	800abee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	2b3a      	cmp	r3, #58	; 0x3a
 800ac0a:	d11c      	bne.n	800ac46 <get_ldnumber+0x76>
			tp = *path;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	60fa      	str	r2, [r7, #12]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	3b30      	subs	r3, #48	; 0x30
 800ac1c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2b09      	cmp	r3, #9
 800ac22:	d80e      	bhi.n	800ac42 <get_ldnumber+0x72>
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d10a      	bne.n	800ac42 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d107      	bne.n	800ac42 <get_ldnumber+0x72>
					vol = (int)i;
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	617b      	str	r3, [r7, #20]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	e002      	b.n	800ac4c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ac46:	2300      	movs	r3, #0
 800ac48:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ac4a:	693b      	ldr	r3, [r7, #16]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	371c      	adds	r7, #28
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	70da      	strb	r2, [r3, #3]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac6e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7fe fc80 	bl	8009578 <move_window>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <check_fs+0x2a>
 800ac7e:	2304      	movs	r3, #4
 800ac80:	e038      	b.n	800acf4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	3338      	adds	r3, #56	; 0x38
 800ac86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fe f9c4 	bl	8009018 <ld_word>
 800ac90:	4603      	mov	r3, r0
 800ac92:	461a      	mov	r2, r3
 800ac94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d001      	beq.n	800aca0 <check_fs+0x48>
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e029      	b.n	800acf4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aca6:	2be9      	cmp	r3, #233	; 0xe9
 800aca8:	d009      	beq.n	800acbe <check_fs+0x66>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800acb0:	2beb      	cmp	r3, #235	; 0xeb
 800acb2:	d11e      	bne.n	800acf2 <check_fs+0x9a>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800acba:	2b90      	cmp	r3, #144	; 0x90
 800acbc:	d119      	bne.n	800acf2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3338      	adds	r3, #56	; 0x38
 800acc2:	3336      	adds	r3, #54	; 0x36
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fe f9bf 	bl	8009048 <ld_dword>
 800acca:	4603      	mov	r3, r0
 800accc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800acd0:	4a0a      	ldr	r2, [pc, #40]	; (800acfc <check_fs+0xa4>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d101      	bne.n	800acda <check_fs+0x82>
 800acd6:	2300      	movs	r3, #0
 800acd8:	e00c      	b.n	800acf4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	3338      	adds	r3, #56	; 0x38
 800acde:	3352      	adds	r3, #82	; 0x52
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fe f9b1 	bl	8009048 <ld_dword>
 800ace6:	4602      	mov	r2, r0
 800ace8:	4b05      	ldr	r3, [pc, #20]	; (800ad00 <check_fs+0xa8>)
 800acea:	429a      	cmp	r2, r3
 800acec:	d101      	bne.n	800acf2 <check_fs+0x9a>
 800acee:	2300      	movs	r3, #0
 800acf0:	e000      	b.n	800acf4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800acf2:	2302      	movs	r3, #2
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	00544146 	.word	0x00544146
 800ad00:	33544146 	.word	0x33544146

0800ad04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b096      	sub	sp, #88	; 0x58
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2200      	movs	r2, #0
 800ad16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff ff59 	bl	800abd0 <get_ldnumber>
 800ad1e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ad20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	da01      	bge.n	800ad2a <find_volume+0x26>
 800ad26:	230b      	movs	r3, #11
 800ad28:	e268      	b.n	800b1fc <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ad2a:	4ab0      	ldr	r2, [pc, #704]	; (800afec <find_volume+0x2e8>)
 800ad2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d101      	bne.n	800ad3e <find_volume+0x3a>
 800ad3a:	230c      	movs	r3, #12
 800ad3c:	e25e      	b.n	800b1fc <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	f023 0301 	bic.w	r3, r3, #1
 800ad4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d01a      	beq.n	800ad8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ad54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad56:	785b      	ldrb	r3, [r3, #1]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe f8bf 	bl	8008edc <disk_status>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ad64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10c      	bne.n	800ad8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ad70:	79fb      	ldrb	r3, [r7, #7]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d007      	beq.n	800ad86 <find_volume+0x82>
 800ad76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d001      	beq.n	800ad86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ad82:	230a      	movs	r3, #10
 800ad84:	e23a      	b.n	800b1fc <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800ad86:	2300      	movs	r3, #0
 800ad88:	e238      	b.n	800b1fc <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ad90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ad98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9a:	785b      	ldrb	r3, [r3, #1]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7fe f8b7 	bl	8008f10 <disk_initialize>
 800ada2:	4603      	mov	r3, r0
 800ada4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ada8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d001      	beq.n	800adb8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800adb4:	2303      	movs	r3, #3
 800adb6:	e221      	b.n	800b1fc <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800adb8:	79fb      	ldrb	r3, [r7, #7]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d007      	beq.n	800adce <find_volume+0xca>
 800adbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800adc2:	f003 0304 	and.w	r3, r3, #4
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d001      	beq.n	800adce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800adca:	230a      	movs	r3, #10
 800adcc:	e216      	b.n	800b1fc <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800adce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add0:	7858      	ldrb	r0, [r3, #1]
 800add2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add4:	330c      	adds	r3, #12
 800add6:	461a      	mov	r2, r3
 800add8:	2102      	movs	r1, #2
 800adda:	f7fe f8ff 	bl	8008fdc <disk_ioctl>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <find_volume+0xe4>
 800ade4:	2301      	movs	r3, #1
 800ade6:	e209      	b.n	800b1fc <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ade8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adea:	899b      	ldrh	r3, [r3, #12]
 800adec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adf0:	d80d      	bhi.n	800ae0e <find_volume+0x10a>
 800adf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf4:	899b      	ldrh	r3, [r3, #12]
 800adf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adfa:	d308      	bcc.n	800ae0e <find_volume+0x10a>
 800adfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfe:	899b      	ldrh	r3, [r3, #12]
 800ae00:	461a      	mov	r2, r3
 800ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae04:	899b      	ldrh	r3, [r3, #12]
 800ae06:	3b01      	subs	r3, #1
 800ae08:	4013      	ands	r3, r2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <find_volume+0x10e>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e1f4      	b.n	800b1fc <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ae12:	2300      	movs	r3, #0
 800ae14:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ae16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae1a:	f7ff ff1d 	bl	800ac58 <check_fs>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ae24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d14b      	bne.n	800aec4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	643b      	str	r3, [r7, #64]	; 0x40
 800ae30:	e01f      	b.n	800ae72 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ae38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae3a:	011b      	lsls	r3, r3, #4
 800ae3c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ae40:	4413      	add	r3, r2
 800ae42:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	3304      	adds	r3, #4
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d006      	beq.n	800ae5c <find_volume+0x158>
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	3308      	adds	r3, #8
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fe f8f8 	bl	8009048 <ld_dword>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	e000      	b.n	800ae5e <find_volume+0x15a>
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ae66:	440b      	add	r3, r1
 800ae68:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae6e:	3301      	adds	r3, #1
 800ae70:	643b      	str	r3, [r7, #64]	; 0x40
 800ae72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	d9dc      	bls.n	800ae32 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ae78:	2300      	movs	r3, #0
 800ae7a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ae7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d002      	beq.n	800ae88 <find_volume+0x184>
 800ae82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae84:	3b01      	subs	r3, #1
 800ae86:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ae88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ae90:	4413      	add	r3, r2
 800ae92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ae96:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ae98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d005      	beq.n	800aeaa <find_volume+0x1a6>
 800ae9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aea2:	f7ff fed9 	bl	800ac58 <check_fs>
 800aea6:	4603      	mov	r3, r0
 800aea8:	e000      	b.n	800aeac <find_volume+0x1a8>
 800aeaa:	2303      	movs	r3, #3
 800aeac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800aeb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d905      	bls.n	800aec4 <find_volume+0x1c0>
 800aeb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeba:	3301      	adds	r3, #1
 800aebc:	643b      	str	r3, [r7, #64]	; 0x40
 800aebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec0:	2b03      	cmp	r3, #3
 800aec2:	d9e1      	bls.n	800ae88 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800aec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aec8:	2b04      	cmp	r3, #4
 800aeca:	d101      	bne.n	800aed0 <find_volume+0x1cc>
 800aecc:	2301      	movs	r3, #1
 800aece:	e195      	b.n	800b1fc <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800aed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d901      	bls.n	800aedc <find_volume+0x1d8>
 800aed8:	230d      	movs	r3, #13
 800aeda:	e18f      	b.n	800b1fc <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aede:	3338      	adds	r3, #56	; 0x38
 800aee0:	330b      	adds	r3, #11
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe f898 	bl	8009018 <ld_word>
 800aee8:	4603      	mov	r3, r0
 800aeea:	461a      	mov	r2, r3
 800aeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeee:	899b      	ldrh	r3, [r3, #12]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d001      	beq.n	800aef8 <find_volume+0x1f4>
 800aef4:	230d      	movs	r3, #13
 800aef6:	e181      	b.n	800b1fc <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800aef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefa:	3338      	adds	r3, #56	; 0x38
 800aefc:	3316      	adds	r3, #22
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fe f88a 	bl	8009018 <ld_word>
 800af04:	4603      	mov	r3, r0
 800af06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800af08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d106      	bne.n	800af1c <find_volume+0x218>
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	3338      	adds	r3, #56	; 0x38
 800af12:	3324      	adds	r3, #36	; 0x24
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe f897 	bl	8009048 <ld_dword>
 800af1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800af1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af20:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800af22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af24:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800af28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	789b      	ldrb	r3, [r3, #2]
 800af30:	2b01      	cmp	r3, #1
 800af32:	d005      	beq.n	800af40 <find_volume+0x23c>
 800af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af36:	789b      	ldrb	r3, [r3, #2]
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d001      	beq.n	800af40 <find_volume+0x23c>
 800af3c:	230d      	movs	r3, #13
 800af3e:	e15d      	b.n	800b1fc <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	789b      	ldrb	r3, [r3, #2]
 800af44:	461a      	mov	r2, r3
 800af46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af48:	fb02 f303 	mul.w	r3, r2, r3
 800af4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800af4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af54:	b29a      	uxth	r2, r3
 800af56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800af5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5c:	895b      	ldrh	r3, [r3, #10]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d008      	beq.n	800af74 <find_volume+0x270>
 800af62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af64:	895b      	ldrh	r3, [r3, #10]
 800af66:	461a      	mov	r2, r3
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	895b      	ldrh	r3, [r3, #10]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	4013      	ands	r3, r2
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <find_volume+0x274>
 800af74:	230d      	movs	r3, #13
 800af76:	e141      	b.n	800b1fc <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800af78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7a:	3338      	adds	r3, #56	; 0x38
 800af7c:	3311      	adds	r3, #17
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fe f84a 	bl	8009018 <ld_word>
 800af84:	4603      	mov	r3, r0
 800af86:	461a      	mov	r2, r3
 800af88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	891b      	ldrh	r3, [r3, #8]
 800af90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af92:	8992      	ldrh	r2, [r2, #12]
 800af94:	0952      	lsrs	r2, r2, #5
 800af96:	b292      	uxth	r2, r2
 800af98:	fbb3 f1f2 	udiv	r1, r3, r2
 800af9c:	fb02 f201 	mul.w	r2, r2, r1
 800afa0:	1a9b      	subs	r3, r3, r2
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <find_volume+0x2a8>
 800afa8:	230d      	movs	r3, #13
 800afaa:	e127      	b.n	800b1fc <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800afac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afae:	3338      	adds	r3, #56	; 0x38
 800afb0:	3313      	adds	r3, #19
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fe f830 	bl	8009018 <ld_word>
 800afb8:	4603      	mov	r3, r0
 800afba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800afbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d106      	bne.n	800afd0 <find_volume+0x2cc>
 800afc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc4:	3338      	adds	r3, #56	; 0x38
 800afc6:	3320      	adds	r3, #32
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fe f83d 	bl	8009048 <ld_dword>
 800afce:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800afd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd2:	3338      	adds	r3, #56	; 0x38
 800afd4:	330e      	adds	r3, #14
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fe f81e 	bl	8009018 <ld_word>
 800afdc:	4603      	mov	r3, r0
 800afde:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800afe0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d104      	bne.n	800aff0 <find_volume+0x2ec>
 800afe6:	230d      	movs	r3, #13
 800afe8:	e108      	b.n	800b1fc <find_volume+0x4f8>
 800afea:	bf00      	nop
 800afec:	2000027c 	.word	0x2000027c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aff0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aff4:	4413      	add	r3, r2
 800aff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aff8:	8911      	ldrh	r1, [r2, #8]
 800affa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800affc:	8992      	ldrh	r2, [r2, #12]
 800affe:	0952      	lsrs	r2, r2, #5
 800b000:	b292      	uxth	r2, r2
 800b002:	fbb1 f2f2 	udiv	r2, r1, r2
 800b006:	b292      	uxth	r2, r2
 800b008:	4413      	add	r3, r2
 800b00a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b00c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b010:	429a      	cmp	r2, r3
 800b012:	d201      	bcs.n	800b018 <find_volume+0x314>
 800b014:	230d      	movs	r3, #13
 800b016:	e0f1      	b.n	800b1fc <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b020:	8952      	ldrh	r2, [r2, #10]
 800b022:	fbb3 f3f2 	udiv	r3, r3, r2
 800b026:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <find_volume+0x32e>
 800b02e:	230d      	movs	r3, #13
 800b030:	e0e4      	b.n	800b1fc <find_volume+0x4f8>
		fmt = FS_FAT32;
 800b032:	2303      	movs	r3, #3
 800b034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b03e:	4293      	cmp	r3, r2
 800b040:	d802      	bhi.n	800b048 <find_volume+0x344>
 800b042:	2302      	movs	r3, #2
 800b044:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b04e:	4293      	cmp	r3, r2
 800b050:	d802      	bhi.n	800b058 <find_volume+0x354>
 800b052:	2301      	movs	r3, #1
 800b054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05a:	1c9a      	adds	r2, r3, #2
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b064:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b066:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b06a:	441a      	add	r2, r3
 800b06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b074:	441a      	add	r2, r3
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b07a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b07e:	2b03      	cmp	r3, #3
 800b080:	d11e      	bne.n	800b0c0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b084:	3338      	adds	r3, #56	; 0x38
 800b086:	332a      	adds	r3, #42	; 0x2a
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fd ffc5 	bl	8009018 <ld_word>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <find_volume+0x394>
 800b094:	230d      	movs	r3, #13
 800b096:	e0b1      	b.n	800b1fc <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09a:	891b      	ldrh	r3, [r3, #8]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <find_volume+0x3a0>
 800b0a0:	230d      	movs	r3, #13
 800b0a2:	e0ab      	b.n	800b1fc <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a6:	3338      	adds	r3, #56	; 0x38
 800b0a8:	332c      	adds	r3, #44	; 0x2c
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fd ffcc 	bl	8009048 <ld_dword>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	69db      	ldr	r3, [r3, #28]
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b0be:	e01f      	b.n	800b100 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	891b      	ldrh	r3, [r3, #8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <find_volume+0x3c8>
 800b0c8:	230d      	movs	r3, #13
 800b0ca:	e097      	b.n	800b1fc <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d2:	441a      	add	r2, r3
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d103      	bne.n	800b0e8 <find_volume+0x3e4>
 800b0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e2:	69db      	ldr	r3, [r3, #28]
 800b0e4:	005b      	lsls	r3, r3, #1
 800b0e6:	e00a      	b.n	800b0fe <find_volume+0x3fa>
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	69da      	ldr	r2, [r3, #28]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	005b      	lsls	r3, r3, #1
 800b0f0:	4413      	add	r3, r2
 800b0f2:	085a      	lsrs	r2, r3, #1
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f6:	69db      	ldr	r3, [r3, #28]
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b0fe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b102:	6a1a      	ldr	r2, [r3, #32]
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	899b      	ldrh	r3, [r3, #12]
 800b108:	4619      	mov	r1, r3
 800b10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b10c:	440b      	add	r3, r1
 800b10e:	3b01      	subs	r3, #1
 800b110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b112:	8989      	ldrh	r1, [r1, #12]
 800b114:	fbb3 f3f1 	udiv	r3, r3, r1
 800b118:	429a      	cmp	r2, r3
 800b11a:	d201      	bcs.n	800b120 <find_volume+0x41c>
 800b11c:	230d      	movs	r3, #13
 800b11e:	e06d      	b.n	800b1fc <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b122:	f04f 32ff 	mov.w	r2, #4294967295
 800b126:	619a      	str	r2, [r3, #24]
 800b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12a:	699a      	ldr	r2, [r3, #24]
 800b12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b132:	2280      	movs	r2, #128	; 0x80
 800b134:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b136:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d149      	bne.n	800b1d2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b140:	3338      	adds	r3, #56	; 0x38
 800b142:	3330      	adds	r3, #48	; 0x30
 800b144:	4618      	mov	r0, r3
 800b146:	f7fd ff67 	bl	8009018 <ld_word>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d140      	bne.n	800b1d2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b152:	3301      	adds	r3, #1
 800b154:	4619      	mov	r1, r3
 800b156:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b158:	f7fe fa0e 	bl	8009578 <move_window>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d137      	bne.n	800b1d2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800b162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b164:	2200      	movs	r2, #0
 800b166:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16a:	3338      	adds	r3, #56	; 0x38
 800b16c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b170:	4618      	mov	r0, r3
 800b172:	f7fd ff51 	bl	8009018 <ld_word>
 800b176:	4603      	mov	r3, r0
 800b178:	461a      	mov	r2, r3
 800b17a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b17e:	429a      	cmp	r2, r3
 800b180:	d127      	bne.n	800b1d2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b184:	3338      	adds	r3, #56	; 0x38
 800b186:	4618      	mov	r0, r3
 800b188:	f7fd ff5e 	bl	8009048 <ld_dword>
 800b18c:	4602      	mov	r2, r0
 800b18e:	4b1d      	ldr	r3, [pc, #116]	; (800b204 <find_volume+0x500>)
 800b190:	429a      	cmp	r2, r3
 800b192:	d11e      	bne.n	800b1d2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	3338      	adds	r3, #56	; 0x38
 800b198:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fd ff53 	bl	8009048 <ld_dword>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	4b18      	ldr	r3, [pc, #96]	; (800b208 <find_volume+0x504>)
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d113      	bne.n	800b1d2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ac:	3338      	adds	r3, #56	; 0x38
 800b1ae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fd ff48 	bl	8009048 <ld_dword>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1bc:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c0:	3338      	adds	r3, #56	; 0x38
 800b1c2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fd ff3e 	bl	8009048 <ld_dword>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b1d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b1da:	4b0c      	ldr	r3, [pc, #48]	; (800b20c <find_volume+0x508>)
 800b1dc:	881b      	ldrh	r3, [r3, #0]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	4b0a      	ldr	r3, [pc, #40]	; (800b20c <find_volume+0x508>)
 800b1e4:	801a      	strh	r2, [r3, #0]
 800b1e6:	4b09      	ldr	r3, [pc, #36]	; (800b20c <find_volume+0x508>)
 800b1e8:	881a      	ldrh	r2, [r3, #0]
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f0:	4a07      	ldr	r2, [pc, #28]	; (800b210 <find_volume+0x50c>)
 800b1f2:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b1f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b1f6:	f7fe f957 	bl	80094a8 <clear_lock>
#endif
	return FR_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3758      	adds	r7, #88	; 0x58
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	41615252 	.word	0x41615252
 800b208:	61417272 	.word	0x61417272
 800b20c:	20000280 	.word	0x20000280
 800b210:	200002a4 	.word	0x200002a4

0800b214 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b21e:	2309      	movs	r3, #9
 800b220:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d01c      	beq.n	800b262 <validate+0x4e>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d018      	beq.n	800b262 <validate+0x4e>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d013      	beq.n	800b262 <validate+0x4e>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	889a      	ldrh	r2, [r3, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	88db      	ldrh	r3, [r3, #6]
 800b244:	429a      	cmp	r2, r3
 800b246:	d10c      	bne.n	800b262 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	785b      	ldrb	r3, [r3, #1]
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fd fe44 	bl	8008edc <disk_status>
 800b254:	4603      	mov	r3, r0
 800b256:	f003 0301 	and.w	r3, r3, #1
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <validate+0x4e>
			res = FR_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b262:	7bfb      	ldrb	r3, [r7, #15]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d102      	bne.n	800b26e <validate+0x5a>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	e000      	b.n	800b270 <validate+0x5c>
 800b26e:	2300      	movs	r3, #0
 800b270:	683a      	ldr	r2, [r7, #0]
 800b272:	6013      	str	r3, [r2, #0]
	return res;
 800b274:	7bfb      	ldrb	r3, [r7, #15]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b088      	sub	sp, #32
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	4613      	mov	r3, r2
 800b28c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b292:	f107 0310 	add.w	r3, r7, #16
 800b296:	4618      	mov	r0, r3
 800b298:	f7ff fc9a 	bl	800abd0 <get_ldnumber>
 800b29c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	da01      	bge.n	800b2a8 <f_mount+0x28>
 800b2a4:	230b      	movs	r3, #11
 800b2a6:	e02b      	b.n	800b300 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b2a8:	4a17      	ldr	r2, [pc, #92]	; (800b308 <f_mount+0x88>)
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d005      	beq.n	800b2c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b2b8:	69b8      	ldr	r0, [r7, #24]
 800b2ba:	f7fe f8f5 	bl	80094a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d002      	beq.n	800b2d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	490d      	ldr	r1, [pc, #52]	; (800b308 <f_mount+0x88>)
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <f_mount+0x66>
 800b2e0:	79fb      	ldrb	r3, [r7, #7]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d001      	beq.n	800b2ea <f_mount+0x6a>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	e00a      	b.n	800b300 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b2ea:	f107 010c 	add.w	r1, r7, #12
 800b2ee:	f107 0308 	add.w	r3, r7, #8
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff fd05 	bl	800ad04 <find_volume>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b2fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3720      	adds	r7, #32
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	2000027c 	.word	0x2000027c

0800b30c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b09a      	sub	sp, #104	; 0x68
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	4613      	mov	r3, r2
 800b318:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <f_open+0x18>
 800b320:	2309      	movs	r3, #9
 800b322:	e1bb      	b.n	800b69c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b324:	79fb      	ldrb	r3, [r7, #7]
 800b326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b32a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b32c:	79fa      	ldrb	r2, [r7, #7]
 800b32e:	f107 0114 	add.w	r1, r7, #20
 800b332:	f107 0308 	add.w	r3, r7, #8
 800b336:	4618      	mov	r0, r3
 800b338:	f7ff fce4 	bl	800ad04 <find_volume>
 800b33c:	4603      	mov	r3, r0
 800b33e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b342:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b346:	2b00      	cmp	r3, #0
 800b348:	f040 819f 	bne.w	800b68a <f_open+0x37e>
		dj.obj.fs = fs;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	f107 0318 	add.w	r3, r7, #24
 800b356:	4611      	mov	r1, r2
 800b358:	4618      	mov	r0, r3
 800b35a:	f7ff fbc3 	bl	800aae4 <follow_path>
 800b35e:	4603      	mov	r3, r0
 800b360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b364:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d11a      	bne.n	800b3a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b36c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b370:	b25b      	sxtb	r3, r3
 800b372:	2b00      	cmp	r3, #0
 800b374:	da03      	bge.n	800b37e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b376:	2306      	movs	r3, #6
 800b378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b37c:	e011      	b.n	800b3a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	f023 0301 	bic.w	r3, r3, #1
 800b384:	2b00      	cmp	r3, #0
 800b386:	bf14      	ite	ne
 800b388:	2301      	movne	r3, #1
 800b38a:	2300      	moveq	r3, #0
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	461a      	mov	r2, r3
 800b390:	f107 0318 	add.w	r3, r7, #24
 800b394:	4611      	mov	r1, r2
 800b396:	4618      	mov	r0, r3
 800b398:	f7fd ff3e 	bl	8009218 <chk_lock>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	f003 031c 	and.w	r3, r3, #28
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d07f      	beq.n	800b4ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b3ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d017      	beq.n	800b3e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b3b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b3b8:	2b04      	cmp	r3, #4
 800b3ba:	d10e      	bne.n	800b3da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b3bc:	f7fd ff88 	bl	80092d0 <enq_lock>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d006      	beq.n	800b3d4 <f_open+0xc8>
 800b3c6:	f107 0318 	add.w	r3, r7, #24
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff f8da 	bl	800a584 <dir_register>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	e000      	b.n	800b3d6 <f_open+0xca>
 800b3d4:	2312      	movs	r3, #18
 800b3d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b3da:	79fb      	ldrb	r3, [r7, #7]
 800b3dc:	f043 0308 	orr.w	r3, r3, #8
 800b3e0:	71fb      	strb	r3, [r7, #7]
 800b3e2:	e010      	b.n	800b406 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b3e4:	7fbb      	ldrb	r3, [r7, #30]
 800b3e6:	f003 0311 	and.w	r3, r3, #17
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d003      	beq.n	800b3f6 <f_open+0xea>
					res = FR_DENIED;
 800b3ee:	2307      	movs	r3, #7
 800b3f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b3f4:	e007      	b.n	800b406 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b3f6:	79fb      	ldrb	r3, [r7, #7]
 800b3f8:	f003 0304 	and.w	r3, r3, #4
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d002      	beq.n	800b406 <f_open+0xfa>
 800b400:	2308      	movs	r3, #8
 800b402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b406:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d168      	bne.n	800b4e0 <f_open+0x1d4>
 800b40e:	79fb      	ldrb	r3, [r7, #7]
 800b410:	f003 0308 	and.w	r3, r3, #8
 800b414:	2b00      	cmp	r3, #0
 800b416:	d063      	beq.n	800b4e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b418:	f7fd fb84 	bl	8008b24 <get_fattime>
 800b41c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	330e      	adds	r3, #14
 800b422:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b424:	4618      	mov	r0, r3
 800b426:	f7fd fe4d 	bl	80090c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42c:	3316      	adds	r3, #22
 800b42e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b430:	4618      	mov	r0, r3
 800b432:	f7fd fe47 	bl	80090c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b438:	330b      	adds	r3, #11
 800b43a:	2220      	movs	r2, #32
 800b43c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b442:	4611      	mov	r1, r2
 800b444:	4618      	mov	r0, r3
 800b446:	f7fe fe16 	bl	800a076 <ld_clust>
 800b44a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b450:	2200      	movs	r2, #0
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fe2e 	bl	800a0b4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45a:	331c      	adds	r3, #28
 800b45c:	2100      	movs	r1, #0
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fd fe30 	bl	80090c4 <st_dword>
					fs->wflag = 1;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	2201      	movs	r2, #1
 800b468:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b46a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d037      	beq.n	800b4e0 <f_open+0x1d4>
						dw = fs->winsect;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b474:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b476:	f107 0318 	add.w	r3, r7, #24
 800b47a:	2200      	movs	r2, #0
 800b47c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe fb1e 	bl	8009ac0 <remove_chain>
 800b484:	4603      	mov	r3, r0
 800b486:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b48a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d126      	bne.n	800b4e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe f86e 	bl	8009578 <move_window>
 800b49c:	4603      	mov	r3, r0
 800b49e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4a6:	3a01      	subs	r2, #1
 800b4a8:	615a      	str	r2, [r3, #20]
 800b4aa:	e019      	b.n	800b4e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b4ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d115      	bne.n	800b4e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b4b4:	7fbb      	ldrb	r3, [r7, #30]
 800b4b6:	f003 0310 	and.w	r3, r3, #16
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d003      	beq.n	800b4c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b4be:	2304      	movs	r3, #4
 800b4c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b4c4:	e00c      	b.n	800b4e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b4c6:	79fb      	ldrb	r3, [r7, #7]
 800b4c8:	f003 0302 	and.w	r3, r3, #2
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d007      	beq.n	800b4e0 <f_open+0x1d4>
 800b4d0:	7fbb      	ldrb	r3, [r7, #30]
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d002      	beq.n	800b4e0 <f_open+0x1d4>
						res = FR_DENIED;
 800b4da:	2307      	movs	r3, #7
 800b4dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b4e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d128      	bne.n	800b53a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	f003 0308 	and.w	r3, r3, #8
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d003      	beq.n	800b4fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
 800b4f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b508:	79fb      	ldrb	r3, [r7, #7]
 800b50a:	f023 0301 	bic.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	bf14      	ite	ne
 800b512:	2301      	movne	r3, #1
 800b514:	2300      	moveq	r3, #0
 800b516:	b2db      	uxtb	r3, r3
 800b518:	461a      	mov	r2, r3
 800b51a:	f107 0318 	add.w	r3, r7, #24
 800b51e:	4611      	mov	r1, r2
 800b520:	4618      	mov	r0, r3
 800b522:	f7fd fef7 	bl	8009314 <inc_lock>
 800b526:	4602      	mov	r2, r0
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <f_open+0x22e>
 800b534:	2302      	movs	r3, #2
 800b536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b53a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f040 80a3 	bne.w	800b68a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b548:	4611      	mov	r1, r2
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fe fd93 	bl	800a076 <ld_clust>
 800b550:	4602      	mov	r2, r0
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b558:	331c      	adds	r3, #28
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fd fd74 	bl	8009048 <ld_dword>
 800b560:	4602      	mov	r2, r0
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b56c:	697a      	ldr	r2, [r7, #20]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	88da      	ldrh	r2, [r3, #6]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	79fa      	ldrb	r2, [r7, #7]
 800b57e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	3330      	adds	r3, #48	; 0x30
 800b596:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b59a:	2100      	movs	r1, #0
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fd fdde 	bl	800915e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b5a2:	79fb      	ldrb	r3, [r7, #7]
 800b5a4:	f003 0320 	and.w	r3, r3, #32
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d06e      	beq.n	800b68a <f_open+0x37e>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d06a      	beq.n	800b68a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	68da      	ldr	r2, [r3, #12]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	895b      	ldrh	r3, [r3, #10]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	899b      	ldrh	r3, [r3, #12]
 800b5c6:	fb03 f302 	mul.w	r3, r3, r2
 800b5ca:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5d8:	e016      	b.n	800b608 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fe f887 	bl	80096f2 <get_fat>
 800b5e4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b5e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d802      	bhi.n	800b5f2 <f_open+0x2e6>
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b5f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f8:	d102      	bne.n	800b600 <f_open+0x2f4>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b600:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b608:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d103      	bne.n	800b618 <f_open+0x30c>
 800b610:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b614:	429a      	cmp	r2, r3
 800b616:	d8e0      	bhi.n	800b5da <f_open+0x2ce>
				}
				fp->clust = clst;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b61c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b61e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b622:	2b00      	cmp	r3, #0
 800b624:	d131      	bne.n	800b68a <f_open+0x37e>
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	899b      	ldrh	r3, [r3, #12]
 800b62a:	461a      	mov	r2, r3
 800b62c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b62e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b632:	fb02 f201 	mul.w	r2, r2, r1
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d026      	beq.n	800b68a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b640:	4618      	mov	r0, r3
 800b642:	f7fe f837 	bl	80096b4 <clust2sect>
 800b646:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d103      	bne.n	800b656 <f_open+0x34a>
						res = FR_INT_ERR;
 800b64e:	2302      	movs	r3, #2
 800b650:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b654:	e019      	b.n	800b68a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	899b      	ldrh	r3, [r3, #12]
 800b65a:	461a      	mov	r2, r3
 800b65c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b65e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b664:	441a      	add	r2, r3
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	7858      	ldrb	r0, [r3, #1]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6a1a      	ldr	r2, [r3, #32]
 800b678:	2301      	movs	r3, #1
 800b67a:	f7fd fc6f 	bl	8008f5c <disk_read>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d002      	beq.n	800b68a <f_open+0x37e>
 800b684:	2301      	movs	r3, #1
 800b686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b68a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d002      	beq.n	800b698 <f_open+0x38c>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b698:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3768      	adds	r7, #104	; 0x68
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08c      	sub	sp, #48	; 0x30
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f107 0210 	add.w	r2, r7, #16
 800b6c2:	4611      	mov	r1, r2
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff fda5 	bl	800b214 <validate>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b6d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d107      	bne.n	800b6e8 <f_write+0x44>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	7d5b      	ldrb	r3, [r3, #21]
 800b6dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b6e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <f_write+0x4a>
 800b6e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6ec:	e16a      	b.n	800b9c4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	7d1b      	ldrb	r3, [r3, #20]
 800b6f2:	f003 0302 	and.w	r3, r3, #2
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d101      	bne.n	800b6fe <f_write+0x5a>
 800b6fa:	2307      	movs	r3, #7
 800b6fc:	e162      	b.n	800b9c4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	699a      	ldr	r2, [r3, #24]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	441a      	add	r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	f080 814c 	bcs.w	800b9a8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	43db      	mvns	r3, r3
 800b716:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b718:	e146      	b.n	800b9a8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	699b      	ldr	r3, [r3, #24]
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	8992      	ldrh	r2, [r2, #12]
 800b722:	fbb3 f1f2 	udiv	r1, r3, r2
 800b726:	fb02 f201 	mul.w	r2, r2, r1
 800b72a:	1a9b      	subs	r3, r3, r2
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f040 80f1 	bne.w	800b914 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	8992      	ldrh	r2, [r2, #12]
 800b73a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b73e:	693a      	ldr	r2, [r7, #16]
 800b740:	8952      	ldrh	r2, [r2, #10]
 800b742:	3a01      	subs	r2, #1
 800b744:	4013      	ands	r3, r2
 800b746:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d143      	bne.n	800b7d6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10c      	bne.n	800b770 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d11a      	bne.n	800b798 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2100      	movs	r1, #0
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe fa0f 	bl	8009b8a <create_chain>
 800b76c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b76e:	e013      	b.n	800b798 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	2b00      	cmp	r3, #0
 800b776:	d007      	beq.n	800b788 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	4619      	mov	r1, r3
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7fe fa9b 	bl	8009cba <clmt_clust>
 800b784:	62b8      	str	r0, [r7, #40]	; 0x28
 800b786:	e007      	b.n	800b798 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	69db      	ldr	r3, [r3, #28]
 800b78e:	4619      	mov	r1, r3
 800b790:	4610      	mov	r0, r2
 800b792:	f7fe f9fa 	bl	8009b8a <create_chain>
 800b796:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 8109 	beq.w	800b9b2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d104      	bne.n	800b7b0 <f_write+0x10c>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	755a      	strb	r2, [r3, #21]
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	e109      	b.n	800b9c4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b6:	d104      	bne.n	800b7c2 <f_write+0x11e>
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	755a      	strb	r2, [r3, #21]
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e100      	b.n	800b9c4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7c6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d102      	bne.n	800b7d6 <f_write+0x132>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	7d1b      	ldrb	r3, [r3, #20]
 800b7da:	b25b      	sxtb	r3, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	da18      	bge.n	800b812 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	7858      	ldrb	r0, [r3, #1]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6a1a      	ldr	r2, [r3, #32]
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	f7fd fbd4 	bl	8008f9c <disk_write>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d004      	beq.n	800b804 <f_write+0x160>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	755a      	strb	r2, [r3, #21]
 800b800:	2301      	movs	r3, #1
 800b802:	e0df      	b.n	800b9c4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	7d1b      	ldrb	r3, [r3, #20]
 800b808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f7fd ff4a 	bl	80096b4 <clust2sect>
 800b820:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d104      	bne.n	800b832 <f_write+0x18e>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2202      	movs	r2, #2
 800b82c:	755a      	strb	r2, [r3, #21]
 800b82e:	2302      	movs	r3, #2
 800b830:	e0c8      	b.n	800b9c4 <f_write+0x320>
			sect += csect;
 800b832:	697a      	ldr	r2, [r7, #20]
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	4413      	add	r3, r2
 800b838:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	899b      	ldrh	r3, [r3, #12]
 800b83e:	461a      	mov	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	fbb3 f3f2 	udiv	r3, r3, r2
 800b846:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b848:	6a3b      	ldr	r3, [r7, #32]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d043      	beq.n	800b8d6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	4413      	add	r3, r2
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	8952      	ldrh	r2, [r2, #10]
 800b858:	4293      	cmp	r3, r2
 800b85a:	d905      	bls.n	800b868 <f_write+0x1c4>
					cc = fs->csize - csect;
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	895b      	ldrh	r3, [r3, #10]
 800b860:	461a      	mov	r2, r3
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	1ad3      	subs	r3, r2, r3
 800b866:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	7858      	ldrb	r0, [r3, #1]
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	69f9      	ldr	r1, [r7, #28]
 800b872:	f7fd fb93 	bl	8008f9c <disk_write>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d004      	beq.n	800b886 <f_write+0x1e2>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2201      	movs	r2, #1
 800b880:	755a      	strb	r2, [r3, #21]
 800b882:	2301      	movs	r3, #1
 800b884:	e09e      	b.n	800b9c4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6a1a      	ldr	r2, [r3, #32]
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	6a3a      	ldr	r2, [r7, #32]
 800b890:	429a      	cmp	r2, r3
 800b892:	d918      	bls.n	800b8c6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6a1a      	ldr	r2, [r3, #32]
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	8992      	ldrh	r2, [r2, #12]
 800b8a6:	fb02 f303 	mul.w	r3, r2, r3
 800b8aa:	69fa      	ldr	r2, [r7, #28]
 800b8ac:	18d1      	adds	r1, r2, r3
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	899b      	ldrh	r3, [r3, #12]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f7fd fc32 	bl	800911c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	7d1b      	ldrb	r3, [r3, #20]
 800b8bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	899b      	ldrh	r3, [r3, #12]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	6a3b      	ldr	r3, [r7, #32]
 800b8ce:	fb02 f303 	mul.w	r3, r2, r3
 800b8d2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b8d4:	e04b      	b.n	800b96e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6a1b      	ldr	r3, [r3, #32]
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d016      	beq.n	800b90e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	699a      	ldr	r2, [r3, #24]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d210      	bcs.n	800b90e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	7858      	ldrb	r0, [r3, #1]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	f7fd fb2f 	bl	8008f5c <disk_read>
 800b8fe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b900:	2b00      	cmp	r3, #0
 800b902:	d004      	beq.n	800b90e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2201      	movs	r2, #1
 800b908:	755a      	strb	r2, [r3, #21]
 800b90a:	2301      	movs	r3, #1
 800b90c:	e05a      	b.n	800b9c4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	899b      	ldrh	r3, [r3, #12]
 800b918:	4618      	mov	r0, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	8992      	ldrh	r2, [r2, #12]
 800b922:	fbb3 f1f2 	udiv	r1, r3, r2
 800b926:	fb02 f201 	mul.w	r2, r2, r1
 800b92a:	1a9b      	subs	r3, r3, r2
 800b92c:	1ac3      	subs	r3, r0, r3
 800b92e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	d901      	bls.n	800b93c <f_write+0x298>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	699b      	ldr	r3, [r3, #24]
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	8992      	ldrh	r2, [r2, #12]
 800b94a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b94e:	fb02 f200 	mul.w	r2, r2, r0
 800b952:	1a9b      	subs	r3, r3, r2
 800b954:	440b      	add	r3, r1
 800b956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b958:	69f9      	ldr	r1, [r7, #28]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fd fbde 	bl	800911c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	7d1b      	ldrb	r3, [r3, #20]
 800b964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	4413      	add	r3, r2
 800b974:	61fb      	str	r3, [r7, #28]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	699a      	ldr	r2, [r3, #24]
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	441a      	add	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	619a      	str	r2, [r3, #24]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68da      	ldr	r2, [r3, #12]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	bf38      	it	cc
 800b98e:	461a      	movcc	r2, r3
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	60da      	str	r2, [r3, #12]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	441a      	add	r2, r3
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	601a      	str	r2, [r3, #0]
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f47f aeb5 	bne.w	800b71a <f_write+0x76>
 800b9b0:	e000      	b.n	800b9b4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b9b2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	7d1b      	ldrb	r3, [r3, #20]
 800b9b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3730      	adds	r7, #48	; 0x30
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f107 0208 	add.w	r2, r7, #8
 800b9da:	4611      	mov	r1, r2
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff fc19 	bl	800b214 <validate>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b9e6:	7dfb      	ldrb	r3, [r7, #23]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d168      	bne.n	800babe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	7d1b      	ldrb	r3, [r3, #20]
 800b9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d062      	beq.n	800babe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	7d1b      	ldrb	r3, [r3, #20]
 800b9fc:	b25b      	sxtb	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	da15      	bge.n	800ba2e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	7858      	ldrb	r0, [r3, #1]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a1a      	ldr	r2, [r3, #32]
 800ba10:	2301      	movs	r3, #1
 800ba12:	f7fd fac3 	bl	8008f9c <disk_write>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <f_sync+0x54>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e04f      	b.n	800bac0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	7d1b      	ldrb	r3, [r3, #20]
 800ba24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ba2e:	f7fd f879 	bl	8008b24 <get_fattime>
 800ba32:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	f7fd fd9b 	bl	8009578 <move_window>
 800ba42:	4603      	mov	r3, r0
 800ba44:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ba46:	7dfb      	ldrb	r3, [r7, #23]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d138      	bne.n	800babe <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba50:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	330b      	adds	r3, #11
 800ba56:	781a      	ldrb	r2, [r3, #0]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	330b      	adds	r3, #11
 800ba5c:	f042 0220 	orr.w	r2, r2, #32
 800ba60:	b2d2      	uxtb	r2, r2
 800ba62:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6818      	ldr	r0, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	68f9      	ldr	r1, [r7, #12]
 800ba70:	f7fe fb20 	bl	800a0b4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f103 021c 	add.w	r2, r3, #28
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	4619      	mov	r1, r3
 800ba80:	4610      	mov	r0, r2
 800ba82:	f7fd fb1f 	bl	80090c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3316      	adds	r3, #22
 800ba8a:	6939      	ldr	r1, [r7, #16]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fd fb19 	bl	80090c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3312      	adds	r3, #18
 800ba96:	2100      	movs	r1, #0
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fd faf8 	bl	800908e <st_word>
					fs->wflag = 1;
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	2201      	movs	r2, #1
 800baa2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fd fd94 	bl	80095d4 <sync_fs>
 800baac:	4603      	mov	r3, r0
 800baae:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	7d1b      	ldrb	r3, [r3, #20]
 800bab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800babe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f7ff ff7b 	bl	800b9cc <f_sync>
 800bad6:	4603      	mov	r3, r0
 800bad8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bada:	7bfb      	ldrb	r3, [r7, #15]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d118      	bne.n	800bb12 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f107 0208 	add.w	r2, r7, #8
 800bae6:	4611      	mov	r1, r2
 800bae8:	4618      	mov	r0, r3
 800baea:	f7ff fb93 	bl	800b214 <validate>
 800baee:	4603      	mov	r3, r0
 800baf0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10c      	bne.n	800bb12 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fd fc97 	bl	8009430 <dec_lock>
 800bb02:	4603      	mov	r3, r0
 800bb04:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d102      	bne.n	800bb12 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800bb28:	78fb      	ldrb	r3, [r7, #3]
 800bb2a:	2b0a      	cmp	r3, #10
 800bb2c:	d103      	bne.n	800bb36 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800bb2e:	210d      	movs	r1, #13
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7ff fff3 	bl	800bb1c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	db25      	blt.n	800bb8e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	60fa      	str	r2, [r7, #12]
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	78fa      	ldrb	r2, [r7, #3]
 800bb4e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b3c      	cmp	r3, #60	; 0x3c
 800bb54:	dd12      	ble.n	800bb7c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6818      	ldr	r0, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f103 010c 	add.w	r1, r3, #12
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	f107 0308 	add.w	r3, r7, #8
 800bb66:	f7ff fd9d 	bl	800b6a4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d101      	bne.n	800bb76 <putc_bfd+0x5a>
 800bb72:	2300      	movs	r3, #0
 800bb74:	e001      	b.n	800bb7a <putc_bfd+0x5e>
 800bb76:	f04f 33ff 	mov.w	r3, #4294967295
 800bb7a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	1c5a      	adds	r2, r3, #1
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	609a      	str	r2, [r3, #8]
 800bb8c:	e000      	b.n	800bb90 <putc_bfd+0x74>
	if (i < 0) return;
 800bb8e:	bf00      	nop
}
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b084      	sub	sp, #16
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	db17      	blt.n	800bbd6 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6818      	ldr	r0, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f103 010c 	add.w	r1, r3, #12
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	f107 030c 	add.w	r3, r7, #12
 800bbba:	f7ff fd73 	bl	800b6a4 <f_write>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d108      	bne.n	800bbd6 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d102      	bne.n	800bbd6 <putc_flush+0x40>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	e001      	b.n	800bbda <putc_flush+0x44>
	return EOF;
 800bbd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b083      	sub	sp, #12
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	605a      	str	r2, [r3, #4]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	609a      	str	r2, [r3, #8]
}
 800bc00:	bf00      	nop
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800bc0c:	b40e      	push	{r1, r2, r3}
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b0a7      	sub	sp, #156	; 0x9c
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800bc16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff ffe0 	bl	800bbe2 <putc_init>

	va_start(arp, fmt);
 800bc22:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800bc26:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800bc28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800bc38:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 81f4 	beq.w	800c02a <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800bc42:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bc46:	2b25      	cmp	r3, #37	; 0x25
 800bc48:	d008      	beq.n	800bc5c <f_printf+0x50>
			putc_bfd(&pb, c);
 800bc4a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800bc4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc52:	4611      	mov	r1, r2
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7ff ff61 	bl	800bb1c <putc_bfd>
			continue;
 800bc5a:	e1e5      	b.n	800c028 <f_printf+0x41c>
		}
		w = f = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800bc62:	2300      	movs	r3, #0
 800bc64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800bc68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bc6c:	1c5a      	adds	r2, r3, #1
 800bc6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800bc78:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bc7c:	2b30      	cmp	r3, #48	; 0x30
 800bc7e:	d10b      	bne.n	800bc98 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800bc80:	2301      	movs	r3, #1
 800bc82:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800bc86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bc8a:	1c5a      	adds	r2, r3, #1
 800bc8c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800bc96:	e024      	b.n	800bce2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800bc98:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bc9c:	2b2d      	cmp	r3, #45	; 0x2d
 800bc9e:	d120      	bne.n	800bce2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800bca0:	2302      	movs	r3, #2
 800bca2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800bca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bcaa:	1c5a      	adds	r2, r3, #1
 800bcac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800bcb6:	e014      	b.n	800bce2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800bcb8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	005b      	lsls	r3, r3, #1
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bcca:	4413      	add	r3, r2
 800bccc:	3b30      	subs	r3, #48	; 0x30
 800bcce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800bcd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bcd6:	1c5a      	adds	r2, r3, #1
 800bcd8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800bce2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bce6:	2b2f      	cmp	r3, #47	; 0x2f
 800bce8:	d903      	bls.n	800bcf2 <f_printf+0xe6>
 800bcea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bcee:	2b39      	cmp	r3, #57	; 0x39
 800bcf0:	d9e2      	bls.n	800bcb8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800bcf2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bcf6:	2b6c      	cmp	r3, #108	; 0x6c
 800bcf8:	d003      	beq.n	800bd02 <f_printf+0xf6>
 800bcfa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bcfe:	2b4c      	cmp	r3, #76	; 0x4c
 800bd00:	d10d      	bne.n	800bd1e <f_printf+0x112>
			f |= 4; c = *fmt++;
 800bd02:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bd06:	f043 0304 	orr.w	r3, r3, #4
 800bd0a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800bd0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bd12:	1c5a      	adds	r2, r3, #1
 800bd14:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800bd1e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	f000 8183 	beq.w	800c02e <f_printf+0x422>
		d = c;
 800bd28:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bd2c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800bd30:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bd34:	2b60      	cmp	r3, #96	; 0x60
 800bd36:	d908      	bls.n	800bd4a <f_printf+0x13e>
 800bd38:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bd3c:	2b7a      	cmp	r3, #122	; 0x7a
 800bd3e:	d804      	bhi.n	800bd4a <f_printf+0x13e>
 800bd40:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bd44:	3b20      	subs	r3, #32
 800bd46:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800bd4a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bd4e:	3b42      	subs	r3, #66	; 0x42
 800bd50:	2b16      	cmp	r3, #22
 800bd52:	f200 8098 	bhi.w	800be86 <f_printf+0x27a>
 800bd56:	a201      	add	r2, pc, #4	; (adr r2, 800bd5c <f_printf+0x150>)
 800bd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5c:	0800be67 	.word	0x0800be67
 800bd60:	0800be4f 	.word	0x0800be4f
 800bd64:	0800be77 	.word	0x0800be77
 800bd68:	0800be87 	.word	0x0800be87
 800bd6c:	0800be87 	.word	0x0800be87
 800bd70:	0800be87 	.word	0x0800be87
 800bd74:	0800be87 	.word	0x0800be87
 800bd78:	0800be87 	.word	0x0800be87
 800bd7c:	0800be87 	.word	0x0800be87
 800bd80:	0800be87 	.word	0x0800be87
 800bd84:	0800be87 	.word	0x0800be87
 800bd88:	0800be87 	.word	0x0800be87
 800bd8c:	0800be87 	.word	0x0800be87
 800bd90:	0800be6f 	.word	0x0800be6f
 800bd94:	0800be87 	.word	0x0800be87
 800bd98:	0800be87 	.word	0x0800be87
 800bd9c:	0800be87 	.word	0x0800be87
 800bda0:	0800bdb9 	.word	0x0800bdb9
 800bda4:	0800be87 	.word	0x0800be87
 800bda8:	0800be77 	.word	0x0800be77
 800bdac:	0800be87 	.word	0x0800be87
 800bdb0:	0800be87 	.word	0x0800be87
 800bdb4:	0800be7f 	.word	0x0800be7f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800bdb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdba:	1d1a      	adds	r2, r3, #4
 800bdbc:	67ba      	str	r2, [r7, #120]	; 0x78
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bdc8:	e004      	b.n	800bdd4 <f_printf+0x1c8>
 800bdca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdce:	3301      	adds	r3, #1
 800bdd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bdd4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bdd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdda:	4413      	add	r3, r2
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1f3      	bne.n	800bdca <f_printf+0x1be>
			if (!(f & 2)) {
 800bde2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bde6:	f003 0302 	and.w	r3, r3, #2
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d11a      	bne.n	800be24 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800bdee:	e005      	b.n	800bdfc <f_printf+0x1f0>
 800bdf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bdf4:	2120      	movs	r1, #32
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7ff fe90 	bl	800bb1c <putc_bfd>
 800bdfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be00:	1c5a      	adds	r2, r3, #1
 800be02:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d8f0      	bhi.n	800bdf0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800be0e:	e009      	b.n	800be24 <f_printf+0x218>
 800be10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be12:	1c5a      	adds	r2, r3, #1
 800be14:	67fa      	str	r2, [r7, #124]	; 0x7c
 800be16:	781a      	ldrb	r2, [r3, #0]
 800be18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be1c:	4611      	mov	r1, r2
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff fe7c 	bl	800bb1c <putc_bfd>
 800be24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1f1      	bne.n	800be10 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800be2c:	e005      	b.n	800be3a <f_printf+0x22e>
 800be2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be32:	2120      	movs	r1, #32
 800be34:	4618      	mov	r0, r3
 800be36:	f7ff fe71 	bl	800bb1c <putc_bfd>
 800be3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800be48:	429a      	cmp	r2, r3
 800be4a:	d8f0      	bhi.n	800be2e <f_printf+0x222>
			continue;
 800be4c:	e0ec      	b.n	800c028 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800be4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be50:	1d1a      	adds	r2, r3, #4
 800be52:	67ba      	str	r2, [r7, #120]	; 0x78
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	b2da      	uxtb	r2, r3
 800be58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be5c:	4611      	mov	r1, r2
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff fe5c 	bl	800bb1c <putc_bfd>
 800be64:	e0e0      	b.n	800c028 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800be66:	2302      	movs	r3, #2
 800be68:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800be6c:	e014      	b.n	800be98 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800be6e:	2308      	movs	r3, #8
 800be70:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800be74:	e010      	b.n	800be98 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800be76:	230a      	movs	r3, #10
 800be78:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800be7c:	e00c      	b.n	800be98 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800be7e:	2310      	movs	r3, #16
 800be80:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800be84:	e008      	b.n	800be98 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800be86:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800be8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be8e:	4611      	mov	r1, r2
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff fe43 	bl	800bb1c <putc_bfd>
 800be96:	e0c7      	b.n	800c028 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800be98:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800be9c:	f003 0304 	and.w	r3, r3, #4
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d004      	beq.n	800beae <f_printf+0x2a2>
 800bea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bea6:	1d1a      	adds	r2, r3, #4
 800bea8:	67ba      	str	r2, [r7, #120]	; 0x78
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	e00c      	b.n	800bec8 <f_printf+0x2bc>
 800beae:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800beb2:	2b44      	cmp	r3, #68	; 0x44
 800beb4:	d104      	bne.n	800bec0 <f_printf+0x2b4>
 800beb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beb8:	1d1a      	adds	r2, r3, #4
 800beba:	67ba      	str	r2, [r7, #120]	; 0x78
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	e003      	b.n	800bec8 <f_printf+0x2bc>
 800bec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bec2:	1d1a      	adds	r2, r3, #4
 800bec4:	67ba      	str	r2, [r7, #120]	; 0x78
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800becc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bed0:	2b44      	cmp	r3, #68	; 0x44
 800bed2:	d10e      	bne.n	800bef2 <f_printf+0x2e6>
 800bed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bed8:	2b00      	cmp	r3, #0
 800beda:	da0a      	bge.n	800bef2 <f_printf+0x2e6>
			v = 0 - v;
 800bedc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bee0:	425b      	negs	r3, r3
 800bee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800bee6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800beea:	f043 0308 	orr.w	r3, r3, #8
 800beee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800bef8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800befc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf00:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf04:	fb02 f201 	mul.w	r2, r2, r1
 800bf08:	1a9b      	subs	r3, r3, r2
 800bf0a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800bf0e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800bf12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bf16:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800bf1e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bf22:	2b09      	cmp	r3, #9
 800bf24:	d90b      	bls.n	800bf3e <f_printf+0x332>
 800bf26:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bf2a:	2b78      	cmp	r3, #120	; 0x78
 800bf2c:	d101      	bne.n	800bf32 <f_printf+0x326>
 800bf2e:	2227      	movs	r2, #39	; 0x27
 800bf30:	e000      	b.n	800bf34 <f_printf+0x328>
 800bf32:	2207      	movs	r2, #7
 800bf34:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bf38:	4413      	add	r3, r2
 800bf3a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800bf3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf42:	1c5a      	adds	r2, r3, #1
 800bf44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800bf48:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800bf4c:	3230      	adds	r2, #48	; 0x30
 800bf4e:	b2d2      	uxtb	r2, r2
 800bf50:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800bf54:	440b      	add	r3, r1
 800bf56:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800bf5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d003      	beq.n	800bf6a <f_printf+0x35e>
 800bf62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf66:	2b1f      	cmp	r3, #31
 800bf68:	d9c6      	bls.n	800bef8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800bf6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bf6e:	f003 0308 	and.w	r3, r3, #8
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00a      	beq.n	800bf8c <f_printf+0x380>
 800bf76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800bf80:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800bf84:	4413      	add	r3, r2
 800bf86:	222d      	movs	r2, #45	; 0x2d
 800bf88:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800bf8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bf94:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <f_printf+0x398>
 800bfa0:	2330      	movs	r3, #48	; 0x30
 800bfa2:	e000      	b.n	800bfa6 <f_printf+0x39a>
 800bfa4:	2320      	movs	r3, #32
 800bfa6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800bfaa:	e007      	b.n	800bfbc <f_printf+0x3b0>
 800bfac:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800bfb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff fdb0 	bl	800bb1c <putc_bfd>
 800bfbc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bfc0:	f003 0302 	and.w	r3, r3, #2
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d108      	bne.n	800bfda <f_printf+0x3ce>
 800bfc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfcc:	1c5a      	adds	r2, r3, #1
 800bfce:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bfd2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d8e8      	bhi.n	800bfac <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800bfda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bfe4:	f107 020c 	add.w	r2, r7, #12
 800bfe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfec:	4413      	add	r3, r2
 800bfee:	781a      	ldrb	r2, [r3, #0]
 800bff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bff4:	4611      	mov	r1, r2
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7ff fd90 	bl	800bb1c <putc_bfd>
		} while (i);
 800bffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1ea      	bne.n	800bfda <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800c004:	e007      	b.n	800c016 <f_printf+0x40a>
 800c006:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800c00a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c00e:	4611      	mov	r1, r2
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff fd83 	bl	800bb1c <putc_bfd>
 800c016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c01a:	1c5a      	adds	r2, r3, #1
 800c01c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c020:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c024:	429a      	cmp	r2, r3
 800c026:	d8ee      	bhi.n	800c006 <f_printf+0x3fa>
		c = *fmt++;
 800c028:	e5fe      	b.n	800bc28 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800c02a:	bf00      	nop
 800c02c:	e000      	b.n	800c030 <f_printf+0x424>
		if (!c) break;
 800c02e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800c030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c034:	4618      	mov	r0, r3
 800c036:	f7ff fdae 	bl	800bb96 <putc_flush>
 800c03a:	4603      	mov	r3, r0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	379c      	adds	r7, #156	; 0x9c
 800c040:	46bd      	mov	sp, r7
 800c042:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c046:	b003      	add	sp, #12
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop

0800c04c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b087      	sub	sp, #28
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	4613      	mov	r3, r2
 800c058:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c05a:	2301      	movs	r3, #1
 800c05c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c05e:	2300      	movs	r3, #0
 800c060:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c062:	4b1f      	ldr	r3, [pc, #124]	; (800c0e0 <FATFS_LinkDriverEx+0x94>)
 800c064:	7a5b      	ldrb	r3, [r3, #9]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d131      	bne.n	800c0d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c06c:	4b1c      	ldr	r3, [pc, #112]	; (800c0e0 <FATFS_LinkDriverEx+0x94>)
 800c06e:	7a5b      	ldrb	r3, [r3, #9]
 800c070:	b2db      	uxtb	r3, r3
 800c072:	461a      	mov	r2, r3
 800c074:	4b1a      	ldr	r3, [pc, #104]	; (800c0e0 <FATFS_LinkDriverEx+0x94>)
 800c076:	2100      	movs	r1, #0
 800c078:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c07a:	4b19      	ldr	r3, [pc, #100]	; (800c0e0 <FATFS_LinkDriverEx+0x94>)
 800c07c:	7a5b      	ldrb	r3, [r3, #9]
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	4a17      	ldr	r2, [pc, #92]	; (800c0e0 <FATFS_LinkDriverEx+0x94>)
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c08a:	4b15      	ldr	r3, [pc, #84]	; (800c0e0 <FATFS_LinkDriverEx+0x94>)
 800c08c:	7a5b      	ldrb	r3, [r3, #9]
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	461a      	mov	r2, r3
 800c092:	4b13      	ldr	r3, [pc, #76]	; (800c0e0 <FATFS_LinkDriverEx+0x94>)
 800c094:	4413      	add	r3, r2
 800c096:	79fa      	ldrb	r2, [r7, #7]
 800c098:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c09a:	4b11      	ldr	r3, [pc, #68]	; (800c0e0 <FATFS_LinkDriverEx+0x94>)
 800c09c:	7a5b      	ldrb	r3, [r3, #9]
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	1c5a      	adds	r2, r3, #1
 800c0a2:	b2d1      	uxtb	r1, r2
 800c0a4:	4a0e      	ldr	r2, [pc, #56]	; (800c0e0 <FATFS_LinkDriverEx+0x94>)
 800c0a6:	7251      	strb	r1, [r2, #9]
 800c0a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c0aa:	7dbb      	ldrb	r3, [r7, #22]
 800c0ac:	3330      	adds	r3, #48	; 0x30
 800c0ae:	b2da      	uxtb	r2, r3
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	223a      	movs	r2, #58	; 0x3a
 800c0ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	3302      	adds	r3, #2
 800c0c0:	222f      	movs	r2, #47	; 0x2f
 800c0c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	3303      	adds	r3, #3
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	371c      	adds	r7, #28
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	200004a4 	.word	0x200004a4

0800c0e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff ffaa 	bl	800c04c <FATFS_LinkDriverEx>
 800c0f8:	4603      	mov	r3, r0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	4603      	mov	r3, r0
 800c10c:	6039      	str	r1, [r7, #0]
 800c10e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c110:	88fb      	ldrh	r3, [r7, #6]
 800c112:	2b7f      	cmp	r3, #127	; 0x7f
 800c114:	d802      	bhi.n	800c11c <ff_convert+0x18>
		c = chr;
 800c116:	88fb      	ldrh	r3, [r7, #6]
 800c118:	81fb      	strh	r3, [r7, #14]
 800c11a:	e025      	b.n	800c168 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00b      	beq.n	800c13a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c122:	88fb      	ldrh	r3, [r7, #6]
 800c124:	2bff      	cmp	r3, #255	; 0xff
 800c126:	d805      	bhi.n	800c134 <ff_convert+0x30>
 800c128:	88fb      	ldrh	r3, [r7, #6]
 800c12a:	3b80      	subs	r3, #128	; 0x80
 800c12c:	4a12      	ldr	r2, [pc, #72]	; (800c178 <ff_convert+0x74>)
 800c12e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c132:	e000      	b.n	800c136 <ff_convert+0x32>
 800c134:	2300      	movs	r3, #0
 800c136:	81fb      	strh	r3, [r7, #14]
 800c138:	e016      	b.n	800c168 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c13a:	2300      	movs	r3, #0
 800c13c:	81fb      	strh	r3, [r7, #14]
 800c13e:	e009      	b.n	800c154 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c140:	89fb      	ldrh	r3, [r7, #14]
 800c142:	4a0d      	ldr	r2, [pc, #52]	; (800c178 <ff_convert+0x74>)
 800c144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c148:	88fa      	ldrh	r2, [r7, #6]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d006      	beq.n	800c15c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c14e:	89fb      	ldrh	r3, [r7, #14]
 800c150:	3301      	adds	r3, #1
 800c152:	81fb      	strh	r3, [r7, #14]
 800c154:	89fb      	ldrh	r3, [r7, #14]
 800c156:	2b7f      	cmp	r3, #127	; 0x7f
 800c158:	d9f2      	bls.n	800c140 <ff_convert+0x3c>
 800c15a:	e000      	b.n	800c15e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c15c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c15e:	89fb      	ldrh	r3, [r7, #14]
 800c160:	3380      	adds	r3, #128	; 0x80
 800c162:	b29b      	uxth	r3, r3
 800c164:	b2db      	uxtb	r3, r3
 800c166:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c168:	89fb      	ldrh	r3, [r7, #14]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3714      	adds	r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	08010760 	.word	0x08010760

0800c17c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b087      	sub	sp, #28
 800c180:	af00      	add	r7, sp, #0
 800c182:	4603      	mov	r3, r0
 800c184:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c186:	88fb      	ldrh	r3, [r7, #6]
 800c188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c18c:	d201      	bcs.n	800c192 <ff_wtoupper+0x16>
 800c18e:	4b3e      	ldr	r3, [pc, #248]	; (800c288 <ff_wtoupper+0x10c>)
 800c190:	e000      	b.n	800c194 <ff_wtoupper+0x18>
 800c192:	4b3e      	ldr	r3, [pc, #248]	; (800c28c <ff_wtoupper+0x110>)
 800c194:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	1c9a      	adds	r2, r3, #2
 800c19a:	617a      	str	r2, [r7, #20]
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c1a0:	8a7b      	ldrh	r3, [r7, #18]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d068      	beq.n	800c278 <ff_wtoupper+0xfc>
 800c1a6:	88fa      	ldrh	r2, [r7, #6]
 800c1a8:	8a7b      	ldrh	r3, [r7, #18]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d364      	bcc.n	800c278 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	1c9a      	adds	r2, r3, #2
 800c1b2:	617a      	str	r2, [r7, #20]
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	823b      	strh	r3, [r7, #16]
 800c1b8:	8a3b      	ldrh	r3, [r7, #16]
 800c1ba:	0a1b      	lsrs	r3, r3, #8
 800c1bc:	81fb      	strh	r3, [r7, #14]
 800c1be:	8a3b      	ldrh	r3, [r7, #16]
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c1c4:	88fa      	ldrh	r2, [r7, #6]
 800c1c6:	8a79      	ldrh	r1, [r7, #18]
 800c1c8:	8a3b      	ldrh	r3, [r7, #16]
 800c1ca:	440b      	add	r3, r1
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	da49      	bge.n	800c264 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c1d0:	89fb      	ldrh	r3, [r7, #14]
 800c1d2:	2b08      	cmp	r3, #8
 800c1d4:	d84f      	bhi.n	800c276 <ff_wtoupper+0xfa>
 800c1d6:	a201      	add	r2, pc, #4	; (adr r2, 800c1dc <ff_wtoupper+0x60>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c201 	.word	0x0800c201
 800c1e0:	0800c213 	.word	0x0800c213
 800c1e4:	0800c229 	.word	0x0800c229
 800c1e8:	0800c231 	.word	0x0800c231
 800c1ec:	0800c239 	.word	0x0800c239
 800c1f0:	0800c241 	.word	0x0800c241
 800c1f4:	0800c249 	.word	0x0800c249
 800c1f8:	0800c251 	.word	0x0800c251
 800c1fc:	0800c259 	.word	0x0800c259
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c200:	88fa      	ldrh	r2, [r7, #6]
 800c202:	8a7b      	ldrh	r3, [r7, #18]
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	4413      	add	r3, r2
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	80fb      	strh	r3, [r7, #6]
 800c210:	e027      	b.n	800c262 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c212:	88fa      	ldrh	r2, [r7, #6]
 800c214:	8a7b      	ldrh	r3, [r7, #18]
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	b29b      	uxth	r3, r3
 800c21a:	f003 0301 	and.w	r3, r3, #1
 800c21e:	b29b      	uxth	r3, r3
 800c220:	88fa      	ldrh	r2, [r7, #6]
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	80fb      	strh	r3, [r7, #6]
 800c226:	e01c      	b.n	800c262 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c228:	88fb      	ldrh	r3, [r7, #6]
 800c22a:	3b10      	subs	r3, #16
 800c22c:	80fb      	strh	r3, [r7, #6]
 800c22e:	e018      	b.n	800c262 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c230:	88fb      	ldrh	r3, [r7, #6]
 800c232:	3b20      	subs	r3, #32
 800c234:	80fb      	strh	r3, [r7, #6]
 800c236:	e014      	b.n	800c262 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c238:	88fb      	ldrh	r3, [r7, #6]
 800c23a:	3b30      	subs	r3, #48	; 0x30
 800c23c:	80fb      	strh	r3, [r7, #6]
 800c23e:	e010      	b.n	800c262 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c240:	88fb      	ldrh	r3, [r7, #6]
 800c242:	3b1a      	subs	r3, #26
 800c244:	80fb      	strh	r3, [r7, #6]
 800c246:	e00c      	b.n	800c262 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c248:	88fb      	ldrh	r3, [r7, #6]
 800c24a:	3308      	adds	r3, #8
 800c24c:	80fb      	strh	r3, [r7, #6]
 800c24e:	e008      	b.n	800c262 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c250:	88fb      	ldrh	r3, [r7, #6]
 800c252:	3b50      	subs	r3, #80	; 0x50
 800c254:	80fb      	strh	r3, [r7, #6]
 800c256:	e004      	b.n	800c262 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c258:	88fb      	ldrh	r3, [r7, #6]
 800c25a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c25e:	80fb      	strh	r3, [r7, #6]
 800c260:	bf00      	nop
			}
			break;
 800c262:	e008      	b.n	800c276 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c264:	89fb      	ldrh	r3, [r7, #14]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d195      	bne.n	800c196 <ff_wtoupper+0x1a>
 800c26a:	8a3b      	ldrh	r3, [r7, #16]
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	697a      	ldr	r2, [r7, #20]
 800c270:	4413      	add	r3, r2
 800c272:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c274:	e78f      	b.n	800c196 <ff_wtoupper+0x1a>
			break;
 800c276:	bf00      	nop
	}

	return chr;
 800c278:	88fb      	ldrh	r3, [r7, #6]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	371c      	adds	r7, #28
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	08010860 	.word	0x08010860
 800c28c:	08010a54 	.word	0x08010a54

0800c290 <asctime>:
 800c290:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <asctime+0x28>)
 800c292:	b570      	push	{r4, r5, r6, lr}
 800c294:	681c      	ldr	r4, [r3, #0]
 800c296:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800c298:	4606      	mov	r6, r0
 800c29a:	b93d      	cbnz	r5, 800c2ac <asctime+0x1c>
 800c29c:	201a      	movs	r0, #26
 800c29e:	f000 f91d 	bl	800c4dc <malloc>
 800c2a2:	221a      	movs	r2, #26
 800c2a4:	6420      	str	r0, [r4, #64]	; 0x40
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	f000 f928 	bl	800c4fc <memset>
 800c2ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2b4:	f000 b802 	b.w	800c2bc <asctime_r>
 800c2b8:	20000010 	.word	0x20000010

0800c2bc <asctime_r>:
 800c2bc:	b510      	push	{r4, lr}
 800c2be:	460c      	mov	r4, r1
 800c2c0:	6941      	ldr	r1, [r0, #20]
 800c2c2:	6903      	ldr	r3, [r0, #16]
 800c2c4:	6982      	ldr	r2, [r0, #24]
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800c2cc:	9104      	str	r1, [sp, #16]
 800c2ce:	6801      	ldr	r1, [r0, #0]
 800c2d0:	9103      	str	r1, [sp, #12]
 800c2d2:	6841      	ldr	r1, [r0, #4]
 800c2d4:	9102      	str	r1, [sp, #8]
 800c2d6:	6881      	ldr	r1, [r0, #8]
 800c2d8:	9101      	str	r1, [sp, #4]
 800c2da:	68c1      	ldr	r1, [r0, #12]
 800c2dc:	9100      	str	r1, [sp, #0]
 800c2de:	4907      	ldr	r1, [pc, #28]	; (800c2fc <asctime_r+0x40>)
 800c2e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c2e4:	440b      	add	r3, r1
 800c2e6:	4906      	ldr	r1, [pc, #24]	; (800c300 <asctime_r+0x44>)
 800c2e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c2ec:	440a      	add	r2, r1
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4904      	ldr	r1, [pc, #16]	; (800c304 <asctime_r+0x48>)
 800c2f2:	f001 f92f 	bl	800d554 <siprintf>
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	b006      	add	sp, #24
 800c2fa:	bd10      	pop	{r4, pc}
 800c2fc:	08010b45 	.word	0x08010b45
 800c300:	08010b30 	.word	0x08010b30
 800c304:	08010b10 	.word	0x08010b10

0800c308 <__errno>:
 800c308:	4b01      	ldr	r3, [pc, #4]	; (800c310 <__errno+0x8>)
 800c30a:	6818      	ldr	r0, [r3, #0]
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	20000010 	.word	0x20000010

0800c314 <gmtime>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4b07      	ldr	r3, [pc, #28]	; (800c334 <gmtime+0x20>)
 800c318:	681c      	ldr	r4, [r3, #0]
 800c31a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c31c:	4605      	mov	r5, r0
 800c31e:	b91b      	cbnz	r3, 800c328 <gmtime+0x14>
 800c320:	2024      	movs	r0, #36	; 0x24
 800c322:	f000 f8db 	bl	800c4dc <malloc>
 800c326:	63e0      	str	r0, [r4, #60]	; 0x3c
 800c328:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c32a:	4628      	mov	r0, r5
 800c32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c330:	f000 b802 	b.w	800c338 <gmtime_r>
 800c334:	20000010 	.word	0x20000010

0800c338 <gmtime_r>:
 800c338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c33c:	e9d0 8900 	ldrd	r8, r9, [r0]
 800c340:	460c      	mov	r4, r1
 800c342:	4a50      	ldr	r2, [pc, #320]	; (800c484 <gmtime_r+0x14c>)
 800c344:	2300      	movs	r3, #0
 800c346:	4640      	mov	r0, r8
 800c348:	4649      	mov	r1, r9
 800c34a:	f7f4 fc87 	bl	8000c5c <__aeabi_ldivmod>
 800c34e:	4a4d      	ldr	r2, [pc, #308]	; (800c484 <gmtime_r+0x14c>)
 800c350:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 800c354:	2300      	movs	r3, #0
 800c356:	4640      	mov	r0, r8
 800c358:	4649      	mov	r1, r9
 800c35a:	f7f4 fc7f 	bl	8000c5c <__aeabi_ldivmod>
 800c35e:	2a00      	cmp	r2, #0
 800c360:	bfbc      	itt	lt
 800c362:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800c366:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800c36a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800c36e:	fb92 f3f1 	sdiv	r3, r2, r1
 800c372:	fb01 2213 	mls	r2, r1, r3, r2
 800c376:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800c37a:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 800c37e:	60a3      	str	r3, [r4, #8]
 800c380:	bfb8      	it	lt
 800c382:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 800c386:	fb92 f3f1 	sdiv	r3, r2, r1
 800c38a:	fb01 2213 	mls	r2, r1, r3, r2
 800c38e:	6063      	str	r3, [r4, #4]
 800c390:	6022      	str	r2, [r4, #0]
 800c392:	1ceb      	adds	r3, r5, #3
 800c394:	2207      	movs	r2, #7
 800c396:	fb93 f2f2 	sdiv	r2, r3, r2
 800c39a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800c39e:	1a9b      	subs	r3, r3, r2
 800c3a0:	bf48      	it	mi
 800c3a2:	3307      	addmi	r3, #7
 800c3a4:	2d00      	cmp	r5, #0
 800c3a6:	61a3      	str	r3, [r4, #24]
 800c3a8:	bfb8      	it	lt
 800c3aa:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 800c3ae:	4836      	ldr	r0, [pc, #216]	; (800c488 <gmtime_r+0x150>)
 800c3b0:	bfae      	itee	ge
 800c3b2:	fb95 f0f0 	sdivge	r0, r5, r0
 800c3b6:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800c3ba:	fb93 f0f0 	sdivlt	r0, r3, r0
 800c3be:	4b33      	ldr	r3, [pc, #204]	; (800c48c <gmtime_r+0x154>)
 800c3c0:	fb03 5300 	mla	r3, r3, r0, r5
 800c3c4:	f648 61ac 	movw	r1, #36524	; 0x8eac
 800c3c8:	fbb3 f1f1 	udiv	r1, r3, r1
 800c3cc:	4419      	add	r1, r3
 800c3ce:	f240 57b4 	movw	r7, #1460	; 0x5b4
 800c3d2:	fbb3 f2f7 	udiv	r2, r3, r7
 800c3d6:	1a89      	subs	r1, r1, r2
 800c3d8:	4a2d      	ldr	r2, [pc, #180]	; (800c490 <gmtime_r+0x158>)
 800c3da:	fbb3 f2f2 	udiv	r2, r3, r2
 800c3de:	1a8a      	subs	r2, r1, r2
 800c3e0:	f648 6194 	movw	r1, #36500	; 0x8e94
 800c3e4:	fbb2 f1f1 	udiv	r1, r2, r1
 800c3e8:	440b      	add	r3, r1
 800c3ea:	f240 166d 	movw	r6, #365	; 0x16d
 800c3ee:	fbb2 f5f6 	udiv	r5, r2, r6
 800c3f2:	fbb2 f2f7 	udiv	r2, r2, r7
 800c3f6:	1a9a      	subs	r2, r3, r2
 800c3f8:	fb06 2315 	mls	r3, r6, r5, r2
 800c3fc:	2199      	movs	r1, #153	; 0x99
 800c3fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800c402:	1c5e      	adds	r6, r3, #1
 800c404:	3202      	adds	r2, #2
 800c406:	fbb2 f2f1 	udiv	r2, r2, r1
 800c40a:	2a0a      	cmp	r2, #10
 800c40c:	fb01 f102 	mul.w	r1, r1, r2
 800c410:	f101 0102 	add.w	r1, r1, #2
 800c414:	f04f 0705 	mov.w	r7, #5
 800c418:	fbb1 f1f7 	udiv	r1, r1, r7
 800c41c:	eba6 0101 	sub.w	r1, r6, r1
 800c420:	bf34      	ite	cc
 800c422:	2602      	movcc	r6, #2
 800c424:	f06f 0609 	mvncs.w	r6, #9
 800c428:	4416      	add	r6, r2
 800c42a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c42e:	fb02 5000 	mla	r0, r2, r0, r5
 800c432:	2e01      	cmp	r6, #1
 800c434:	bf98      	it	ls
 800c436:	3001      	addls	r0, #1
 800c438:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c43c:	d30c      	bcc.n	800c458 <gmtime_r+0x120>
 800c43e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c442:	61e3      	str	r3, [r4, #28]
 800c444:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 800c448:	2300      	movs	r3, #0
 800c44a:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800c44e:	60e1      	str	r1, [r4, #12]
 800c450:	6223      	str	r3, [r4, #32]
 800c452:	4620      	mov	r0, r4
 800c454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c458:	07aa      	lsls	r2, r5, #30
 800c45a:	d105      	bne.n	800c468 <gmtime_r+0x130>
 800c45c:	2764      	movs	r7, #100	; 0x64
 800c45e:	fbb5 f2f7 	udiv	r2, r5, r7
 800c462:	fb07 5212 	mls	r2, r7, r2, r5
 800c466:	b95a      	cbnz	r2, 800c480 <gmtime_r+0x148>
 800c468:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800c46c:	fbb5 f2f7 	udiv	r2, r5, r7
 800c470:	fb07 5212 	mls	r2, r7, r2, r5
 800c474:	fab2 f282 	clz	r2, r2
 800c478:	0952      	lsrs	r2, r2, #5
 800c47a:	333b      	adds	r3, #59	; 0x3b
 800c47c:	4413      	add	r3, r2
 800c47e:	e7e0      	b.n	800c442 <gmtime_r+0x10a>
 800c480:	2201      	movs	r2, #1
 800c482:	e7fa      	b.n	800c47a <gmtime_r+0x142>
 800c484:	00015180 	.word	0x00015180
 800c488:	00023ab1 	.word	0x00023ab1
 800c48c:	fffdc54f 	.word	0xfffdc54f
 800c490:	00023ab0 	.word	0x00023ab0

0800c494 <__libc_init_array>:
 800c494:	b570      	push	{r4, r5, r6, lr}
 800c496:	4e0d      	ldr	r6, [pc, #52]	; (800c4cc <__libc_init_array+0x38>)
 800c498:	4c0d      	ldr	r4, [pc, #52]	; (800c4d0 <__libc_init_array+0x3c>)
 800c49a:	1ba4      	subs	r4, r4, r6
 800c49c:	10a4      	asrs	r4, r4, #2
 800c49e:	2500      	movs	r5, #0
 800c4a0:	42a5      	cmp	r5, r4
 800c4a2:	d109      	bne.n	800c4b8 <__libc_init_array+0x24>
 800c4a4:	4e0b      	ldr	r6, [pc, #44]	; (800c4d4 <__libc_init_array+0x40>)
 800c4a6:	4c0c      	ldr	r4, [pc, #48]	; (800c4d8 <__libc_init_array+0x44>)
 800c4a8:	f003 ff92 	bl	80103d0 <_init>
 800c4ac:	1ba4      	subs	r4, r4, r6
 800c4ae:	10a4      	asrs	r4, r4, #2
 800c4b0:	2500      	movs	r5, #0
 800c4b2:	42a5      	cmp	r5, r4
 800c4b4:	d105      	bne.n	800c4c2 <__libc_init_array+0x2e>
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4bc:	4798      	blx	r3
 800c4be:	3501      	adds	r5, #1
 800c4c0:	e7ee      	b.n	800c4a0 <__libc_init_array+0xc>
 800c4c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4c6:	4798      	blx	r3
 800c4c8:	3501      	adds	r5, #1
 800c4ca:	e7f2      	b.n	800c4b2 <__libc_init_array+0x1e>
 800c4cc:	08010f4c 	.word	0x08010f4c
 800c4d0:	08010f4c 	.word	0x08010f4c
 800c4d4:	08010f4c 	.word	0x08010f4c
 800c4d8:	08010f50 	.word	0x08010f50

0800c4dc <malloc>:
 800c4dc:	4b02      	ldr	r3, [pc, #8]	; (800c4e8 <malloc+0xc>)
 800c4de:	4601      	mov	r1, r0
 800c4e0:	6818      	ldr	r0, [r3, #0]
 800c4e2:	f000 baf5 	b.w	800cad0 <_malloc_r>
 800c4e6:	bf00      	nop
 800c4e8:	20000010 	.word	0x20000010

0800c4ec <free>:
 800c4ec:	4b02      	ldr	r3, [pc, #8]	; (800c4f8 <free+0xc>)
 800c4ee:	4601      	mov	r1, r0
 800c4f0:	6818      	ldr	r0, [r3, #0]
 800c4f2:	f000 ba9f 	b.w	800ca34 <_free_r>
 800c4f6:	bf00      	nop
 800c4f8:	20000010 	.word	0x20000010

0800c4fc <memset>:
 800c4fc:	4402      	add	r2, r0
 800c4fe:	4603      	mov	r3, r0
 800c500:	4293      	cmp	r3, r2
 800c502:	d100      	bne.n	800c506 <memset+0xa>
 800c504:	4770      	bx	lr
 800c506:	f803 1b01 	strb.w	r1, [r3], #1
 800c50a:	e7f9      	b.n	800c500 <memset+0x4>

0800c50c <validate_structure>:
 800c50c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c50e:	6801      	ldr	r1, [r0, #0]
 800c510:	293b      	cmp	r1, #59	; 0x3b
 800c512:	4604      	mov	r4, r0
 800c514:	d911      	bls.n	800c53a <validate_structure+0x2e>
 800c516:	223c      	movs	r2, #60	; 0x3c
 800c518:	4668      	mov	r0, sp
 800c51a:	f001 fb41 	bl	800dba0 <div>
 800c51e:	9a01      	ldr	r2, [sp, #4]
 800c520:	6863      	ldr	r3, [r4, #4]
 800c522:	9900      	ldr	r1, [sp, #0]
 800c524:	2a00      	cmp	r2, #0
 800c526:	440b      	add	r3, r1
 800c528:	6063      	str	r3, [r4, #4]
 800c52a:	bfbb      	ittet	lt
 800c52c:	323c      	addlt	r2, #60	; 0x3c
 800c52e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c532:	6022      	strge	r2, [r4, #0]
 800c534:	6022      	strlt	r2, [r4, #0]
 800c536:	bfb8      	it	lt
 800c538:	6063      	strlt	r3, [r4, #4]
 800c53a:	6861      	ldr	r1, [r4, #4]
 800c53c:	293b      	cmp	r1, #59	; 0x3b
 800c53e:	d911      	bls.n	800c564 <validate_structure+0x58>
 800c540:	223c      	movs	r2, #60	; 0x3c
 800c542:	4668      	mov	r0, sp
 800c544:	f001 fb2c 	bl	800dba0 <div>
 800c548:	9a01      	ldr	r2, [sp, #4]
 800c54a:	68a3      	ldr	r3, [r4, #8]
 800c54c:	9900      	ldr	r1, [sp, #0]
 800c54e:	2a00      	cmp	r2, #0
 800c550:	440b      	add	r3, r1
 800c552:	60a3      	str	r3, [r4, #8]
 800c554:	bfbb      	ittet	lt
 800c556:	323c      	addlt	r2, #60	; 0x3c
 800c558:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c55c:	6062      	strge	r2, [r4, #4]
 800c55e:	6062      	strlt	r2, [r4, #4]
 800c560:	bfb8      	it	lt
 800c562:	60a3      	strlt	r3, [r4, #8]
 800c564:	68a1      	ldr	r1, [r4, #8]
 800c566:	2917      	cmp	r1, #23
 800c568:	d911      	bls.n	800c58e <validate_structure+0x82>
 800c56a:	2218      	movs	r2, #24
 800c56c:	4668      	mov	r0, sp
 800c56e:	f001 fb17 	bl	800dba0 <div>
 800c572:	9a01      	ldr	r2, [sp, #4]
 800c574:	68e3      	ldr	r3, [r4, #12]
 800c576:	9900      	ldr	r1, [sp, #0]
 800c578:	2a00      	cmp	r2, #0
 800c57a:	440b      	add	r3, r1
 800c57c:	60e3      	str	r3, [r4, #12]
 800c57e:	bfbb      	ittet	lt
 800c580:	3218      	addlt	r2, #24
 800c582:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c586:	60a2      	strge	r2, [r4, #8]
 800c588:	60a2      	strlt	r2, [r4, #8]
 800c58a:	bfb8      	it	lt
 800c58c:	60e3      	strlt	r3, [r4, #12]
 800c58e:	6921      	ldr	r1, [r4, #16]
 800c590:	290b      	cmp	r1, #11
 800c592:	d911      	bls.n	800c5b8 <validate_structure+0xac>
 800c594:	220c      	movs	r2, #12
 800c596:	4668      	mov	r0, sp
 800c598:	f001 fb02 	bl	800dba0 <div>
 800c59c:	9a01      	ldr	r2, [sp, #4]
 800c59e:	6963      	ldr	r3, [r4, #20]
 800c5a0:	9900      	ldr	r1, [sp, #0]
 800c5a2:	2a00      	cmp	r2, #0
 800c5a4:	440b      	add	r3, r1
 800c5a6:	6163      	str	r3, [r4, #20]
 800c5a8:	bfbb      	ittet	lt
 800c5aa:	320c      	addlt	r2, #12
 800c5ac:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c5b0:	6122      	strge	r2, [r4, #16]
 800c5b2:	6122      	strlt	r2, [r4, #16]
 800c5b4:	bfb8      	it	lt
 800c5b6:	6163      	strlt	r3, [r4, #20]
 800c5b8:	6963      	ldr	r3, [r4, #20]
 800c5ba:	0799      	lsls	r1, r3, #30
 800c5bc:	d120      	bne.n	800c600 <validate_structure+0xf4>
 800c5be:	2164      	movs	r1, #100	; 0x64
 800c5c0:	fb93 f2f1 	sdiv	r2, r3, r1
 800c5c4:	fb01 3212 	mls	r2, r1, r2, r3
 800c5c8:	b9e2      	cbnz	r2, 800c604 <validate_structure+0xf8>
 800c5ca:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800c5ce:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800c5d2:	fb93 f2f1 	sdiv	r2, r3, r1
 800c5d6:	fb01 3312 	mls	r3, r1, r2, r3
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	bf14      	ite	ne
 800c5de:	231c      	movne	r3, #28
 800c5e0:	231d      	moveq	r3, #29
 800c5e2:	68e2      	ldr	r2, [r4, #12]
 800c5e4:	2a00      	cmp	r2, #0
 800c5e6:	dc0f      	bgt.n	800c608 <validate_structure+0xfc>
 800c5e8:	4f34      	ldr	r7, [pc, #208]	; (800c6bc <validate_structure+0x1b0>)
 800c5ea:	260b      	movs	r6, #11
 800c5ec:	2064      	movs	r0, #100	; 0x64
 800c5ee:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c5f2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c5f6:	f1bc 0f00 	cmp.w	ip, #0
 800c5fa:	dd14      	ble.n	800c626 <validate_structure+0x11a>
 800c5fc:	b003      	add	sp, #12
 800c5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c600:	231c      	movs	r3, #28
 800c602:	e7ee      	b.n	800c5e2 <validate_structure+0xd6>
 800c604:	231d      	movs	r3, #29
 800c606:	e7ec      	b.n	800c5e2 <validate_structure+0xd6>
 800c608:	4f2c      	ldr	r7, [pc, #176]	; (800c6bc <validate_structure+0x1b0>)
 800c60a:	f04f 0c00 	mov.w	ip, #0
 800c60e:	2564      	movs	r5, #100	; 0x64
 800c610:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800c614:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c618:	2a01      	cmp	r2, #1
 800c61a:	d02f      	beq.n	800c67c <validate_structure+0x170>
 800c61c:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 800c620:	4281      	cmp	r1, r0
 800c622:	dc2e      	bgt.n	800c682 <validate_structure+0x176>
 800c624:	e7ea      	b.n	800c5fc <validate_structure+0xf0>
 800c626:	6921      	ldr	r1, [r4, #16]
 800c628:	3901      	subs	r1, #1
 800c62a:	6121      	str	r1, [r4, #16]
 800c62c:	3101      	adds	r1, #1
 800c62e:	d114      	bne.n	800c65a <validate_structure+0x14e>
 800c630:	6963      	ldr	r3, [r4, #20]
 800c632:	1e59      	subs	r1, r3, #1
 800c634:	078a      	lsls	r2, r1, #30
 800c636:	e9c4 6104 	strd	r6, r1, [r4, #16]
 800c63a:	d117      	bne.n	800c66c <validate_structure+0x160>
 800c63c:	fb91 f2f0 	sdiv	r2, r1, r0
 800c640:	fb00 1112 	mls	r1, r0, r2, r1
 800c644:	b9a1      	cbnz	r1, 800c670 <validate_structure+0x164>
 800c646:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c64a:	fb93 f2f5 	sdiv	r2, r3, r5
 800c64e:	fb05 3312 	mls	r3, r5, r2, r3
 800c652:	2b00      	cmp	r3, #0
 800c654:	bf14      	ite	ne
 800c656:	231c      	movne	r3, #28
 800c658:	231d      	moveq	r3, #29
 800c65a:	6922      	ldr	r2, [r4, #16]
 800c65c:	2a01      	cmp	r2, #1
 800c65e:	bf14      	ite	ne
 800c660:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800c664:	461a      	moveq	r2, r3
 800c666:	4462      	add	r2, ip
 800c668:	60e2      	str	r2, [r4, #12]
 800c66a:	e7c2      	b.n	800c5f2 <validate_structure+0xe6>
 800c66c:	231c      	movs	r3, #28
 800c66e:	e7f4      	b.n	800c65a <validate_structure+0x14e>
 800c670:	231d      	movs	r3, #29
 800c672:	e7f2      	b.n	800c65a <validate_structure+0x14e>
 800c674:	231c      	movs	r3, #28
 800c676:	e7cd      	b.n	800c614 <validate_structure+0x108>
 800c678:	231d      	movs	r3, #29
 800c67a:	e7cb      	b.n	800c614 <validate_structure+0x108>
 800c67c:	428b      	cmp	r3, r1
 800c67e:	dabd      	bge.n	800c5fc <validate_structure+0xf0>
 800c680:	4618      	mov	r0, r3
 800c682:	3201      	adds	r2, #1
 800c684:	1a09      	subs	r1, r1, r0
 800c686:	2a0c      	cmp	r2, #12
 800c688:	60e1      	str	r1, [r4, #12]
 800c68a:	6122      	str	r2, [r4, #16]
 800c68c:	d1c2      	bne.n	800c614 <validate_structure+0x108>
 800c68e:	6963      	ldr	r3, [r4, #20]
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	0791      	lsls	r1, r2, #30
 800c694:	e9c4 c204 	strd	ip, r2, [r4, #16]
 800c698:	d1ec      	bne.n	800c674 <validate_structure+0x168>
 800c69a:	fb92 f1f5 	sdiv	r1, r2, r5
 800c69e:	fb05 2211 	mls	r2, r5, r1, r2
 800c6a2:	2a00      	cmp	r2, #0
 800c6a4:	d1e8      	bne.n	800c678 <validate_structure+0x16c>
 800c6a6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800c6aa:	fb93 f2f6 	sdiv	r2, r3, r6
 800c6ae:	fb06 3312 	mls	r3, r6, r2, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	bf14      	ite	ne
 800c6b6:	231c      	movne	r3, #28
 800c6b8:	231d      	moveq	r3, #29
 800c6ba:	e7ab      	b.n	800c614 <validate_structure+0x108>
 800c6bc:	08010b70 	.word	0x08010b70

0800c6c0 <mktime>:
 800c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c4:	b089      	sub	sp, #36	; 0x24
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	f002 fa80 	bl	800ebcc <__gettzinfo>
 800c6cc:	4680      	mov	r8, r0
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	f7ff ff1c 	bl	800c50c <validate_structure>
 800c6d4:	e9d6 3000 	ldrd	r3, r0, [r6]
 800c6d8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 800c6dc:	fb0a 3a00 	mla	sl, sl, r0, r3
 800c6e0:	68b0      	ldr	r0, [r6, #8]
 800c6e2:	4abe      	ldr	r2, [pc, #760]	; (800c9dc <mktime+0x31c>)
 800c6e4:	6975      	ldr	r5, [r6, #20]
 800c6e6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c6ea:	fb03 aa00 	mla	sl, r3, r0, sl
 800c6ee:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 800c6f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c6f6:	3c01      	subs	r4, #1
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	ea4f 7bea 	mov.w	fp, sl, asr #31
 800c6fe:	4414      	add	r4, r2
 800c700:	dd11      	ble.n	800c726 <mktime+0x66>
 800c702:	07a9      	lsls	r1, r5, #30
 800c704:	d10f      	bne.n	800c726 <mktime+0x66>
 800c706:	2264      	movs	r2, #100	; 0x64
 800c708:	fb95 f3f2 	sdiv	r3, r5, r2
 800c70c:	fb02 5313 	mls	r3, r2, r3, r5
 800c710:	b943      	cbnz	r3, 800c724 <mktime+0x64>
 800c712:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 800c716:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c71a:	fb91 f3f2 	sdiv	r3, r1, r2
 800c71e:	fb02 1313 	mls	r3, r2, r3, r1
 800c722:	b903      	cbnz	r3, 800c726 <mktime+0x66>
 800c724:	3401      	adds	r4, #1
 800c726:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 800c72a:	3310      	adds	r3, #16
 800c72c:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c730:	4293      	cmp	r3, r2
 800c732:	61f4      	str	r4, [r6, #28]
 800c734:	f200 8179 	bhi.w	800ca2a <mktime+0x36a>
 800c738:	2d46      	cmp	r5, #70	; 0x46
 800c73a:	f340 8084 	ble.w	800c846 <mktime+0x186>
 800c73e:	2346      	movs	r3, #70	; 0x46
 800c740:	f240 176d 	movw	r7, #365	; 0x16d
 800c744:	2164      	movs	r1, #100	; 0x64
 800c746:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c74a:	079a      	lsls	r2, r3, #30
 800c74c:	d175      	bne.n	800c83a <mktime+0x17a>
 800c74e:	fb93 f2f1 	sdiv	r2, r3, r1
 800c752:	fb01 3212 	mls	r2, r1, r2, r3
 800c756:	2a00      	cmp	r2, #0
 800c758:	d172      	bne.n	800c840 <mktime+0x180>
 800c75a:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800c75e:	fb9c f2f0 	sdiv	r2, ip, r0
 800c762:	fb00 c212 	mls	r2, r0, r2, ip
 800c766:	2a00      	cmp	r2, #0
 800c768:	bf14      	ite	ne
 800c76a:	463a      	movne	r2, r7
 800c76c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c770:	3301      	adds	r3, #1
 800c772:	429d      	cmp	r5, r3
 800c774:	4414      	add	r4, r2
 800c776:	d1e8      	bne.n	800c74a <mktime+0x8a>
 800c778:	4b99      	ldr	r3, [pc, #612]	; (800c9e0 <mktime+0x320>)
 800c77a:	4363      	muls	r3, r4
 800c77c:	eb1a 0103 	adds.w	r1, sl, r3
 800c780:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 800c784:	e9cd 1200 	strd	r1, r2, [sp]
 800c788:	f000 ffc4 	bl	800d714 <__tz_lock>
 800c78c:	f000 ffc4 	bl	800d718 <_tzset_unlocked>
 800c790:	4b94      	ldr	r3, [pc, #592]	; (800c9e4 <mktime+0x324>)
 800c792:	f8d3 9000 	ldr.w	r9, [r3]
 800c796:	f1b9 0f00 	cmp.w	r9, #0
 800c79a:	d045      	beq.n	800c828 <mktime+0x168>
 800c79c:	f8d6 9020 	ldr.w	r9, [r6, #32]
 800c7a0:	6970      	ldr	r0, [r6, #20]
 800c7a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7a6:	464f      	mov	r7, r9
 800c7a8:	2f01      	cmp	r7, #1
 800c7aa:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c7ae:	bfa8      	it	ge
 800c7b0:	2701      	movge	r7, #1
 800c7b2:	4283      	cmp	r3, r0
 800c7b4:	f040 8089 	bne.w	800c8ca <mktime+0x20a>
 800c7b8:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 800c7bc:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 800c7c0:	460a      	mov	r2, r1
 800c7c2:	17cb      	asrs	r3, r1, #31
 800c7c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c7c8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 800c7cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7d0:	1a12      	subs	r2, r2, r0
 800c7d2:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 800c7d6:	4692      	mov	sl, r2
 800c7d8:	469b      	mov	fp, r3
 800c7da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7de:	4552      	cmp	r2, sl
 800c7e0:	eb73 0c0b 	sbcs.w	ip, r3, fp
 800c7e4:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800c7e8:	da76      	bge.n	800c8d8 <mktime+0x218>
 800c7ea:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800c7ee:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c7f2:	ebb2 0a0a 	subs.w	sl, r2, sl
 800c7f6:	eb63 0b0b 	sbc.w	fp, r3, fp
 800c7fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d079      	beq.n	800c8f6 <mktime+0x236>
 800c802:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c806:	4552      	cmp	r2, sl
 800c808:	eb73 030b 	sbcs.w	r3, r3, fp
 800c80c:	db07      	blt.n	800c81e <mktime+0x15e>
 800c80e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c812:	e9dd ab00 	ldrd	sl, fp, [sp]
 800c816:	4592      	cmp	sl, r2
 800c818:	eb7b 0303 	sbcs.w	r3, fp, r3
 800c81c:	db71      	blt.n	800c902 <mktime+0x242>
 800c81e:	f1b9 0f00 	cmp.w	r9, #0
 800c822:	f04f 0900 	mov.w	r9, #0
 800c826:	da71      	bge.n	800c90c <mktime+0x24c>
 800c828:	e9dd ab00 	ldrd	sl, fp, [sp]
 800c82c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800c830:	eb1a 0a03 	adds.w	sl, sl, r3
 800c834:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800c838:	e0b4      	b.n	800c9a4 <mktime+0x2e4>
 800c83a:	f240 126d 	movw	r2, #365	; 0x16d
 800c83e:	e797      	b.n	800c770 <mktime+0xb0>
 800c840:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c844:	e794      	b.n	800c770 <mktime+0xb0>
 800c846:	d097      	beq.n	800c778 <mktime+0xb8>
 800c848:	2345      	movs	r3, #69	; 0x45
 800c84a:	f240 176d 	movw	r7, #365	; 0x16d
 800c84e:	2164      	movs	r1, #100	; 0x64
 800c850:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c854:	e012      	b.n	800c87c <mktime+0x1bc>
 800c856:	bb62      	cbnz	r2, 800c8b2 <mktime+0x1f2>
 800c858:	fb93 f2f1 	sdiv	r2, r3, r1
 800c85c:	fb01 3212 	mls	r2, r1, r2, r3
 800c860:	bb52      	cbnz	r2, 800c8b8 <mktime+0x1f8>
 800c862:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800c866:	fb9c f2f0 	sdiv	r2, ip, r0
 800c86a:	fb00 c212 	mls	r2, r0, r2, ip
 800c86e:	2a00      	cmp	r2, #0
 800c870:	bf14      	ite	ne
 800c872:	463a      	movne	r2, r7
 800c874:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c878:	1aa4      	subs	r4, r4, r2
 800c87a:	3b01      	subs	r3, #1
 800c87c:	429d      	cmp	r5, r3
 800c87e:	f003 0203 	and.w	r2, r3, #3
 800c882:	dbe8      	blt.n	800c856 <mktime+0x196>
 800c884:	b9da      	cbnz	r2, 800c8be <mktime+0x1fe>
 800c886:	2264      	movs	r2, #100	; 0x64
 800c888:	fb95 f3f2 	sdiv	r3, r5, r2
 800c88c:	fb02 5313 	mls	r3, r2, r3, r5
 800c890:	b9c3      	cbnz	r3, 800c8c4 <mktime+0x204>
 800c892:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 800c896:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c89a:	fb91 f3f2 	sdiv	r3, r1, r2
 800c89e:	fb02 1313 	mls	r3, r2, r3, r1
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f240 136d 	movw	r3, #365	; 0x16d
 800c8a8:	bf08      	it	eq
 800c8aa:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c8ae:	1ae4      	subs	r4, r4, r3
 800c8b0:	e762      	b.n	800c778 <mktime+0xb8>
 800c8b2:	f240 126d 	movw	r2, #365	; 0x16d
 800c8b6:	e7df      	b.n	800c878 <mktime+0x1b8>
 800c8b8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c8bc:	e7dc      	b.n	800c878 <mktime+0x1b8>
 800c8be:	f240 136d 	movw	r3, #365	; 0x16d
 800c8c2:	e7f4      	b.n	800c8ae <mktime+0x1ee>
 800c8c4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c8c8:	e7f1      	b.n	800c8ae <mktime+0x1ee>
 800c8ca:	f000 fe7b 	bl	800d5c4 <__tzcalc_limits>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	f47f af72 	bne.w	800c7b8 <mktime+0xf8>
 800c8d4:	46b9      	mov	r9, r7
 800c8d6:	e057      	b.n	800c988 <mktime+0x2c8>
 800c8d8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c8dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8e0:	ebb2 020a 	subs.w	r2, r2, sl
 800c8e4:	eb63 030b 	sbc.w	r3, r3, fp
 800c8e8:	e9dd ab00 	ldrd	sl, fp, [sp]
 800c8ec:	4592      	cmp	sl, r2
 800c8ee:	eb7b 0303 	sbcs.w	r3, fp, r3
 800c8f2:	dbef      	blt.n	800c8d4 <mktime+0x214>
 800c8f4:	e779      	b.n	800c7ea <mktime+0x12a>
 800c8f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8fa:	4552      	cmp	r2, sl
 800c8fc:	eb73 030b 	sbcs.w	r3, r3, fp
 800c900:	db85      	blt.n	800c80e <mktime+0x14e>
 800c902:	f1b9 0f00 	cmp.w	r9, #0
 800c906:	db43      	blt.n	800c990 <mktime+0x2d0>
 800c908:	f04f 0901 	mov.w	r9, #1
 800c90c:	ea87 0709 	eor.w	r7, r7, r9
 800c910:	2f01      	cmp	r7, #1
 800c912:	d139      	bne.n	800c988 <mktime+0x2c8>
 800c914:	1a40      	subs	r0, r0, r1
 800c916:	f1b9 0f00 	cmp.w	r9, #0
 800c91a:	d100      	bne.n	800c91e <mktime+0x25e>
 800c91c:	4240      	negs	r0, r0
 800c91e:	6833      	ldr	r3, [r6, #0]
 800c920:	4403      	add	r3, r0
 800c922:	6033      	str	r3, [r6, #0]
 800c924:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c928:	1812      	adds	r2, r2, r0
 800c92a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 800c92e:	e9cd 2300 	strd	r2, r3, [sp]
 800c932:	4630      	mov	r0, r6
 800c934:	68f2      	ldr	r2, [r6, #12]
 800c936:	9202      	str	r2, [sp, #8]
 800c938:	f7ff fde8 	bl	800c50c <validate_structure>
 800c93c:	68f3      	ldr	r3, [r6, #12]
 800c93e:	9a02      	ldr	r2, [sp, #8]
 800c940:	1a9b      	subs	r3, r3, r2
 800c942:	d021      	beq.n	800c988 <mktime+0x2c8>
 800c944:	2b01      	cmp	r3, #1
 800c946:	dc40      	bgt.n	800c9ca <mktime+0x30a>
 800c948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94c:	bfa8      	it	ge
 800c94e:	461f      	movge	r7, r3
 800c950:	69f3      	ldr	r3, [r6, #28]
 800c952:	443c      	add	r4, r7
 800c954:	18ff      	adds	r7, r7, r3
 800c956:	d547      	bpl.n	800c9e8 <mktime+0x328>
 800c958:	1e6a      	subs	r2, r5, #1
 800c95a:	0791      	lsls	r1, r2, #30
 800c95c:	d138      	bne.n	800c9d0 <mktime+0x310>
 800c95e:	2164      	movs	r1, #100	; 0x64
 800c960:	fb92 f3f1 	sdiv	r3, r2, r1
 800c964:	fb01 2313 	mls	r3, r1, r3, r2
 800c968:	bbab      	cbnz	r3, 800c9d6 <mktime+0x316>
 800c96a:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 800c96e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c972:	fb95 f3f2 	sdiv	r3, r5, r2
 800c976:	fb02 5513 	mls	r5, r2, r3, r5
 800c97a:	2d00      	cmp	r5, #0
 800c97c:	f240 136d 	movw	r3, #365	; 0x16d
 800c980:	bf18      	it	ne
 800c982:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c986:	61f3      	str	r3, [r6, #28]
 800c988:	f1b9 0f01 	cmp.w	r9, #1
 800c98c:	f47f af4c 	bne.w	800c828 <mktime+0x168>
 800c990:	e9dd ab00 	ldrd	sl, fp, [sp]
 800c994:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 800c998:	eb1a 0a03 	adds.w	sl, sl, r3
 800c99c:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800c9a0:	f04f 0901 	mov.w	r9, #1
 800c9a4:	f000 feb7 	bl	800d716 <__tz_unlock>
 800c9a8:	3404      	adds	r4, #4
 800c9aa:	2307      	movs	r3, #7
 800c9ac:	fb94 f3f3 	sdiv	r3, r4, r3
 800c9b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c9b4:	1ae4      	subs	r4, r4, r3
 800c9b6:	bf48      	it	mi
 800c9b8:	3407      	addmi	r4, #7
 800c9ba:	f8c6 9020 	str.w	r9, [r6, #32]
 800c9be:	61b4      	str	r4, [r6, #24]
 800c9c0:	4650      	mov	r0, sl
 800c9c2:	4659      	mov	r1, fp
 800c9c4:	b009      	add	sp, #36	; 0x24
 800c9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ca:	f04f 37ff 	mov.w	r7, #4294967295
 800c9ce:	e7bf      	b.n	800c950 <mktime+0x290>
 800c9d0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c9d4:	e7d7      	b.n	800c986 <mktime+0x2c6>
 800c9d6:	f240 136d 	movw	r3, #365	; 0x16d
 800c9da:	e7d4      	b.n	800c986 <mktime+0x2c6>
 800c9dc:	08010ba0 	.word	0x08010ba0
 800c9e0:	00015180 	.word	0x00015180
 800c9e4:	200004d4 	.word	0x200004d4
 800c9e8:	07ab      	lsls	r3, r5, #30
 800c9ea:	d118      	bne.n	800ca1e <mktime+0x35e>
 800c9ec:	2264      	movs	r2, #100	; 0x64
 800c9ee:	fb95 f3f2 	sdiv	r3, r5, r2
 800c9f2:	fb02 5313 	mls	r3, r2, r3, r5
 800c9f6:	b9ab      	cbnz	r3, 800ca24 <mktime+0x364>
 800c9f8:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 800c9fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ca00:	fb95 f3f2 	sdiv	r3, r5, r2
 800ca04:	fb02 5513 	mls	r5, r2, r3, r5
 800ca08:	2d00      	cmp	r5, #0
 800ca0a:	f240 136d 	movw	r3, #365	; 0x16d
 800ca0e:	bf08      	it	eq
 800ca10:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800ca14:	429f      	cmp	r7, r3
 800ca16:	bfa8      	it	ge
 800ca18:	1aff      	subge	r7, r7, r3
 800ca1a:	61f7      	str	r7, [r6, #28]
 800ca1c:	e7b4      	b.n	800c988 <mktime+0x2c8>
 800ca1e:	f240 136d 	movw	r3, #365	; 0x16d
 800ca22:	e7f7      	b.n	800ca14 <mktime+0x354>
 800ca24:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800ca28:	e7f4      	b.n	800ca14 <mktime+0x354>
 800ca2a:	f04f 3aff 	mov.w	sl, #4294967295
 800ca2e:	f04f 3bff 	mov.w	fp, #4294967295
 800ca32:	e7c5      	b.n	800c9c0 <mktime+0x300>

0800ca34 <_free_r>:
 800ca34:	b538      	push	{r3, r4, r5, lr}
 800ca36:	4605      	mov	r5, r0
 800ca38:	2900      	cmp	r1, #0
 800ca3a:	d045      	beq.n	800cac8 <_free_r+0x94>
 800ca3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca40:	1f0c      	subs	r4, r1, #4
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	bfb8      	it	lt
 800ca46:	18e4      	addlt	r4, r4, r3
 800ca48:	f002 f941 	bl	800ecce <__malloc_lock>
 800ca4c:	4a1f      	ldr	r2, [pc, #124]	; (800cacc <_free_r+0x98>)
 800ca4e:	6813      	ldr	r3, [r2, #0]
 800ca50:	4610      	mov	r0, r2
 800ca52:	b933      	cbnz	r3, 800ca62 <_free_r+0x2e>
 800ca54:	6063      	str	r3, [r4, #4]
 800ca56:	6014      	str	r4, [r2, #0]
 800ca58:	4628      	mov	r0, r5
 800ca5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca5e:	f002 b937 	b.w	800ecd0 <__malloc_unlock>
 800ca62:	42a3      	cmp	r3, r4
 800ca64:	d90c      	bls.n	800ca80 <_free_r+0x4c>
 800ca66:	6821      	ldr	r1, [r4, #0]
 800ca68:	1862      	adds	r2, r4, r1
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	bf04      	itt	eq
 800ca6e:	681a      	ldreq	r2, [r3, #0]
 800ca70:	685b      	ldreq	r3, [r3, #4]
 800ca72:	6063      	str	r3, [r4, #4]
 800ca74:	bf04      	itt	eq
 800ca76:	1852      	addeq	r2, r2, r1
 800ca78:	6022      	streq	r2, [r4, #0]
 800ca7a:	6004      	str	r4, [r0, #0]
 800ca7c:	e7ec      	b.n	800ca58 <_free_r+0x24>
 800ca7e:	4613      	mov	r3, r2
 800ca80:	685a      	ldr	r2, [r3, #4]
 800ca82:	b10a      	cbz	r2, 800ca88 <_free_r+0x54>
 800ca84:	42a2      	cmp	r2, r4
 800ca86:	d9fa      	bls.n	800ca7e <_free_r+0x4a>
 800ca88:	6819      	ldr	r1, [r3, #0]
 800ca8a:	1858      	adds	r0, r3, r1
 800ca8c:	42a0      	cmp	r0, r4
 800ca8e:	d10b      	bne.n	800caa8 <_free_r+0x74>
 800ca90:	6820      	ldr	r0, [r4, #0]
 800ca92:	4401      	add	r1, r0
 800ca94:	1858      	adds	r0, r3, r1
 800ca96:	4282      	cmp	r2, r0
 800ca98:	6019      	str	r1, [r3, #0]
 800ca9a:	d1dd      	bne.n	800ca58 <_free_r+0x24>
 800ca9c:	6810      	ldr	r0, [r2, #0]
 800ca9e:	6852      	ldr	r2, [r2, #4]
 800caa0:	605a      	str	r2, [r3, #4]
 800caa2:	4401      	add	r1, r0
 800caa4:	6019      	str	r1, [r3, #0]
 800caa6:	e7d7      	b.n	800ca58 <_free_r+0x24>
 800caa8:	d902      	bls.n	800cab0 <_free_r+0x7c>
 800caaa:	230c      	movs	r3, #12
 800caac:	602b      	str	r3, [r5, #0]
 800caae:	e7d3      	b.n	800ca58 <_free_r+0x24>
 800cab0:	6820      	ldr	r0, [r4, #0]
 800cab2:	1821      	adds	r1, r4, r0
 800cab4:	428a      	cmp	r2, r1
 800cab6:	bf04      	itt	eq
 800cab8:	6811      	ldreq	r1, [r2, #0]
 800caba:	6852      	ldreq	r2, [r2, #4]
 800cabc:	6062      	str	r2, [r4, #4]
 800cabe:	bf04      	itt	eq
 800cac0:	1809      	addeq	r1, r1, r0
 800cac2:	6021      	streq	r1, [r4, #0]
 800cac4:	605c      	str	r4, [r3, #4]
 800cac6:	e7c7      	b.n	800ca58 <_free_r+0x24>
 800cac8:	bd38      	pop	{r3, r4, r5, pc}
 800caca:	bf00      	nop
 800cacc:	200004b0 	.word	0x200004b0

0800cad0 <_malloc_r>:
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	1ccd      	adds	r5, r1, #3
 800cad4:	f025 0503 	bic.w	r5, r5, #3
 800cad8:	3508      	adds	r5, #8
 800cada:	2d0c      	cmp	r5, #12
 800cadc:	bf38      	it	cc
 800cade:	250c      	movcc	r5, #12
 800cae0:	2d00      	cmp	r5, #0
 800cae2:	4606      	mov	r6, r0
 800cae4:	db01      	blt.n	800caea <_malloc_r+0x1a>
 800cae6:	42a9      	cmp	r1, r5
 800cae8:	d903      	bls.n	800caf2 <_malloc_r+0x22>
 800caea:	230c      	movs	r3, #12
 800caec:	6033      	str	r3, [r6, #0]
 800caee:	2000      	movs	r0, #0
 800caf0:	bd70      	pop	{r4, r5, r6, pc}
 800caf2:	f002 f8ec 	bl	800ecce <__malloc_lock>
 800caf6:	4a21      	ldr	r2, [pc, #132]	; (800cb7c <_malloc_r+0xac>)
 800caf8:	6814      	ldr	r4, [r2, #0]
 800cafa:	4621      	mov	r1, r4
 800cafc:	b991      	cbnz	r1, 800cb24 <_malloc_r+0x54>
 800cafe:	4c20      	ldr	r4, [pc, #128]	; (800cb80 <_malloc_r+0xb0>)
 800cb00:	6823      	ldr	r3, [r4, #0]
 800cb02:	b91b      	cbnz	r3, 800cb0c <_malloc_r+0x3c>
 800cb04:	4630      	mov	r0, r6
 800cb06:	f000 fd15 	bl	800d534 <_sbrk_r>
 800cb0a:	6020      	str	r0, [r4, #0]
 800cb0c:	4629      	mov	r1, r5
 800cb0e:	4630      	mov	r0, r6
 800cb10:	f000 fd10 	bl	800d534 <_sbrk_r>
 800cb14:	1c43      	adds	r3, r0, #1
 800cb16:	d124      	bne.n	800cb62 <_malloc_r+0x92>
 800cb18:	230c      	movs	r3, #12
 800cb1a:	6033      	str	r3, [r6, #0]
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f002 f8d7 	bl	800ecd0 <__malloc_unlock>
 800cb22:	e7e4      	b.n	800caee <_malloc_r+0x1e>
 800cb24:	680b      	ldr	r3, [r1, #0]
 800cb26:	1b5b      	subs	r3, r3, r5
 800cb28:	d418      	bmi.n	800cb5c <_malloc_r+0x8c>
 800cb2a:	2b0b      	cmp	r3, #11
 800cb2c:	d90f      	bls.n	800cb4e <_malloc_r+0x7e>
 800cb2e:	600b      	str	r3, [r1, #0]
 800cb30:	50cd      	str	r5, [r1, r3]
 800cb32:	18cc      	adds	r4, r1, r3
 800cb34:	4630      	mov	r0, r6
 800cb36:	f002 f8cb 	bl	800ecd0 <__malloc_unlock>
 800cb3a:	f104 000b 	add.w	r0, r4, #11
 800cb3e:	1d23      	adds	r3, r4, #4
 800cb40:	f020 0007 	bic.w	r0, r0, #7
 800cb44:	1ac3      	subs	r3, r0, r3
 800cb46:	d0d3      	beq.n	800caf0 <_malloc_r+0x20>
 800cb48:	425a      	negs	r2, r3
 800cb4a:	50e2      	str	r2, [r4, r3]
 800cb4c:	e7d0      	b.n	800caf0 <_malloc_r+0x20>
 800cb4e:	428c      	cmp	r4, r1
 800cb50:	684b      	ldr	r3, [r1, #4]
 800cb52:	bf16      	itet	ne
 800cb54:	6063      	strne	r3, [r4, #4]
 800cb56:	6013      	streq	r3, [r2, #0]
 800cb58:	460c      	movne	r4, r1
 800cb5a:	e7eb      	b.n	800cb34 <_malloc_r+0x64>
 800cb5c:	460c      	mov	r4, r1
 800cb5e:	6849      	ldr	r1, [r1, #4]
 800cb60:	e7cc      	b.n	800cafc <_malloc_r+0x2c>
 800cb62:	1cc4      	adds	r4, r0, #3
 800cb64:	f024 0403 	bic.w	r4, r4, #3
 800cb68:	42a0      	cmp	r0, r4
 800cb6a:	d005      	beq.n	800cb78 <_malloc_r+0xa8>
 800cb6c:	1a21      	subs	r1, r4, r0
 800cb6e:	4630      	mov	r0, r6
 800cb70:	f000 fce0 	bl	800d534 <_sbrk_r>
 800cb74:	3001      	adds	r0, #1
 800cb76:	d0cf      	beq.n	800cb18 <_malloc_r+0x48>
 800cb78:	6025      	str	r5, [r4, #0]
 800cb7a:	e7db      	b.n	800cb34 <_malloc_r+0x64>
 800cb7c:	200004b0 	.word	0x200004b0
 800cb80:	200004b4 	.word	0x200004b4

0800cb84 <__cvt>:
 800cb84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb88:	ec55 4b10 	vmov	r4, r5, d0
 800cb8c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800cb8e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cb92:	2d00      	cmp	r5, #0
 800cb94:	460e      	mov	r6, r1
 800cb96:	4691      	mov	r9, r2
 800cb98:	4619      	mov	r1, r3
 800cb9a:	bfb8      	it	lt
 800cb9c:	4622      	movlt	r2, r4
 800cb9e:	462b      	mov	r3, r5
 800cba0:	f027 0720 	bic.w	r7, r7, #32
 800cba4:	bfbb      	ittet	lt
 800cba6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cbaa:	461d      	movlt	r5, r3
 800cbac:	2300      	movge	r3, #0
 800cbae:	232d      	movlt	r3, #45	; 0x2d
 800cbb0:	bfb8      	it	lt
 800cbb2:	4614      	movlt	r4, r2
 800cbb4:	2f46      	cmp	r7, #70	; 0x46
 800cbb6:	700b      	strb	r3, [r1, #0]
 800cbb8:	d004      	beq.n	800cbc4 <__cvt+0x40>
 800cbba:	2f45      	cmp	r7, #69	; 0x45
 800cbbc:	d100      	bne.n	800cbc0 <__cvt+0x3c>
 800cbbe:	3601      	adds	r6, #1
 800cbc0:	2102      	movs	r1, #2
 800cbc2:	e000      	b.n	800cbc6 <__cvt+0x42>
 800cbc4:	2103      	movs	r1, #3
 800cbc6:	ab03      	add	r3, sp, #12
 800cbc8:	9301      	str	r3, [sp, #4]
 800cbca:	ab02      	add	r3, sp, #8
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	4632      	mov	r2, r6
 800cbd0:	4653      	mov	r3, sl
 800cbd2:	ec45 4b10 	vmov	d0, r4, r5
 800cbd6:	f001 f883 	bl	800dce0 <_dtoa_r>
 800cbda:	2f47      	cmp	r7, #71	; 0x47
 800cbdc:	4680      	mov	r8, r0
 800cbde:	d102      	bne.n	800cbe6 <__cvt+0x62>
 800cbe0:	f019 0f01 	tst.w	r9, #1
 800cbe4:	d026      	beq.n	800cc34 <__cvt+0xb0>
 800cbe6:	2f46      	cmp	r7, #70	; 0x46
 800cbe8:	eb08 0906 	add.w	r9, r8, r6
 800cbec:	d111      	bne.n	800cc12 <__cvt+0x8e>
 800cbee:	f898 3000 	ldrb.w	r3, [r8]
 800cbf2:	2b30      	cmp	r3, #48	; 0x30
 800cbf4:	d10a      	bne.n	800cc0c <__cvt+0x88>
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	f7f3 ff6d 	bl	8000adc <__aeabi_dcmpeq>
 800cc02:	b918      	cbnz	r0, 800cc0c <__cvt+0x88>
 800cc04:	f1c6 0601 	rsb	r6, r6, #1
 800cc08:	f8ca 6000 	str.w	r6, [sl]
 800cc0c:	f8da 3000 	ldr.w	r3, [sl]
 800cc10:	4499      	add	r9, r3
 800cc12:	2200      	movs	r2, #0
 800cc14:	2300      	movs	r3, #0
 800cc16:	4620      	mov	r0, r4
 800cc18:	4629      	mov	r1, r5
 800cc1a:	f7f3 ff5f 	bl	8000adc <__aeabi_dcmpeq>
 800cc1e:	b938      	cbnz	r0, 800cc30 <__cvt+0xac>
 800cc20:	2230      	movs	r2, #48	; 0x30
 800cc22:	9b03      	ldr	r3, [sp, #12]
 800cc24:	454b      	cmp	r3, r9
 800cc26:	d205      	bcs.n	800cc34 <__cvt+0xb0>
 800cc28:	1c59      	adds	r1, r3, #1
 800cc2a:	9103      	str	r1, [sp, #12]
 800cc2c:	701a      	strb	r2, [r3, #0]
 800cc2e:	e7f8      	b.n	800cc22 <__cvt+0x9e>
 800cc30:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc34:	9b03      	ldr	r3, [sp, #12]
 800cc36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc38:	eba3 0308 	sub.w	r3, r3, r8
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	6013      	str	r3, [r2, #0]
 800cc40:	b004      	add	sp, #16
 800cc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800cc46 <__exponent>:
 800cc46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc48:	2900      	cmp	r1, #0
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	bfba      	itte	lt
 800cc4e:	4249      	neglt	r1, r1
 800cc50:	232d      	movlt	r3, #45	; 0x2d
 800cc52:	232b      	movge	r3, #43	; 0x2b
 800cc54:	2909      	cmp	r1, #9
 800cc56:	f804 2b02 	strb.w	r2, [r4], #2
 800cc5a:	7043      	strb	r3, [r0, #1]
 800cc5c:	dd20      	ble.n	800cca0 <__exponent+0x5a>
 800cc5e:	f10d 0307 	add.w	r3, sp, #7
 800cc62:	461f      	mov	r7, r3
 800cc64:	260a      	movs	r6, #10
 800cc66:	fb91 f5f6 	sdiv	r5, r1, r6
 800cc6a:	fb06 1115 	mls	r1, r6, r5, r1
 800cc6e:	3130      	adds	r1, #48	; 0x30
 800cc70:	2d09      	cmp	r5, #9
 800cc72:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cc76:	f103 32ff 	add.w	r2, r3, #4294967295
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	dc09      	bgt.n	800cc92 <__exponent+0x4c>
 800cc7e:	3130      	adds	r1, #48	; 0x30
 800cc80:	3b02      	subs	r3, #2
 800cc82:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cc86:	42bb      	cmp	r3, r7
 800cc88:	4622      	mov	r2, r4
 800cc8a:	d304      	bcc.n	800cc96 <__exponent+0x50>
 800cc8c:	1a10      	subs	r0, r2, r0
 800cc8e:	b003      	add	sp, #12
 800cc90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc92:	4613      	mov	r3, r2
 800cc94:	e7e7      	b.n	800cc66 <__exponent+0x20>
 800cc96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc9a:	f804 2b01 	strb.w	r2, [r4], #1
 800cc9e:	e7f2      	b.n	800cc86 <__exponent+0x40>
 800cca0:	2330      	movs	r3, #48	; 0x30
 800cca2:	4419      	add	r1, r3
 800cca4:	7083      	strb	r3, [r0, #2]
 800cca6:	1d02      	adds	r2, r0, #4
 800cca8:	70c1      	strb	r1, [r0, #3]
 800ccaa:	e7ef      	b.n	800cc8c <__exponent+0x46>

0800ccac <_printf_float>:
 800ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb0:	b08d      	sub	sp, #52	; 0x34
 800ccb2:	460c      	mov	r4, r1
 800ccb4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ccb8:	4616      	mov	r6, r2
 800ccba:	461f      	mov	r7, r3
 800ccbc:	4605      	mov	r5, r0
 800ccbe:	f001 ff89 	bl	800ebd4 <_localeconv_r>
 800ccc2:	6803      	ldr	r3, [r0, #0]
 800ccc4:	9304      	str	r3, [sp, #16]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7f3 fa82 	bl	80001d0 <strlen>
 800cccc:	2300      	movs	r3, #0
 800ccce:	930a      	str	r3, [sp, #40]	; 0x28
 800ccd0:	f8d8 3000 	ldr.w	r3, [r8]
 800ccd4:	9005      	str	r0, [sp, #20]
 800ccd6:	3307      	adds	r3, #7
 800ccd8:	f023 0307 	bic.w	r3, r3, #7
 800ccdc:	f103 0208 	add.w	r2, r3, #8
 800cce0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cce4:	f8d4 b000 	ldr.w	fp, [r4]
 800cce8:	f8c8 2000 	str.w	r2, [r8]
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ccf4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ccf8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ccfc:	9307      	str	r3, [sp, #28]
 800ccfe:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd02:	f04f 32ff 	mov.w	r2, #4294967295
 800cd06:	4ba7      	ldr	r3, [pc, #668]	; (800cfa4 <_printf_float+0x2f8>)
 800cd08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd0c:	f7f3 ff18 	bl	8000b40 <__aeabi_dcmpun>
 800cd10:	bb70      	cbnz	r0, 800cd70 <_printf_float+0xc4>
 800cd12:	f04f 32ff 	mov.w	r2, #4294967295
 800cd16:	4ba3      	ldr	r3, [pc, #652]	; (800cfa4 <_printf_float+0x2f8>)
 800cd18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd1c:	f7f3 fef2 	bl	8000b04 <__aeabi_dcmple>
 800cd20:	bb30      	cbnz	r0, 800cd70 <_printf_float+0xc4>
 800cd22:	2200      	movs	r2, #0
 800cd24:	2300      	movs	r3, #0
 800cd26:	4640      	mov	r0, r8
 800cd28:	4649      	mov	r1, r9
 800cd2a:	f7f3 fee1 	bl	8000af0 <__aeabi_dcmplt>
 800cd2e:	b110      	cbz	r0, 800cd36 <_printf_float+0x8a>
 800cd30:	232d      	movs	r3, #45	; 0x2d
 800cd32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd36:	4a9c      	ldr	r2, [pc, #624]	; (800cfa8 <_printf_float+0x2fc>)
 800cd38:	4b9c      	ldr	r3, [pc, #624]	; (800cfac <_printf_float+0x300>)
 800cd3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cd3e:	bf8c      	ite	hi
 800cd40:	4690      	movhi	r8, r2
 800cd42:	4698      	movls	r8, r3
 800cd44:	2303      	movs	r3, #3
 800cd46:	f02b 0204 	bic.w	r2, fp, #4
 800cd4a:	6123      	str	r3, [r4, #16]
 800cd4c:	6022      	str	r2, [r4, #0]
 800cd4e:	f04f 0900 	mov.w	r9, #0
 800cd52:	9700      	str	r7, [sp, #0]
 800cd54:	4633      	mov	r3, r6
 800cd56:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd58:	4621      	mov	r1, r4
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	f000 f9e6 	bl	800d12c <_printf_common>
 800cd60:	3001      	adds	r0, #1
 800cd62:	f040 808d 	bne.w	800ce80 <_printf_float+0x1d4>
 800cd66:	f04f 30ff 	mov.w	r0, #4294967295
 800cd6a:	b00d      	add	sp, #52	; 0x34
 800cd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd70:	4642      	mov	r2, r8
 800cd72:	464b      	mov	r3, r9
 800cd74:	4640      	mov	r0, r8
 800cd76:	4649      	mov	r1, r9
 800cd78:	f7f3 fee2 	bl	8000b40 <__aeabi_dcmpun>
 800cd7c:	b110      	cbz	r0, 800cd84 <_printf_float+0xd8>
 800cd7e:	4a8c      	ldr	r2, [pc, #560]	; (800cfb0 <_printf_float+0x304>)
 800cd80:	4b8c      	ldr	r3, [pc, #560]	; (800cfb4 <_printf_float+0x308>)
 800cd82:	e7da      	b.n	800cd3a <_printf_float+0x8e>
 800cd84:	6861      	ldr	r1, [r4, #4]
 800cd86:	1c4b      	adds	r3, r1, #1
 800cd88:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800cd8c:	a80a      	add	r0, sp, #40	; 0x28
 800cd8e:	d13e      	bne.n	800ce0e <_printf_float+0x162>
 800cd90:	2306      	movs	r3, #6
 800cd92:	6063      	str	r3, [r4, #4]
 800cd94:	2300      	movs	r3, #0
 800cd96:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cd9a:	ab09      	add	r3, sp, #36	; 0x24
 800cd9c:	9300      	str	r3, [sp, #0]
 800cd9e:	ec49 8b10 	vmov	d0, r8, r9
 800cda2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cda6:	6022      	str	r2, [r4, #0]
 800cda8:	f8cd a004 	str.w	sl, [sp, #4]
 800cdac:	6861      	ldr	r1, [r4, #4]
 800cdae:	4628      	mov	r0, r5
 800cdb0:	f7ff fee8 	bl	800cb84 <__cvt>
 800cdb4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800cdb8:	2b47      	cmp	r3, #71	; 0x47
 800cdba:	4680      	mov	r8, r0
 800cdbc:	d109      	bne.n	800cdd2 <_printf_float+0x126>
 800cdbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc0:	1cd8      	adds	r0, r3, #3
 800cdc2:	db02      	blt.n	800cdca <_printf_float+0x11e>
 800cdc4:	6862      	ldr	r2, [r4, #4]
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	dd47      	ble.n	800ce5a <_printf_float+0x1ae>
 800cdca:	f1aa 0a02 	sub.w	sl, sl, #2
 800cdce:	fa5f fa8a 	uxtb.w	sl, sl
 800cdd2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cdd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdd8:	d824      	bhi.n	800ce24 <_printf_float+0x178>
 800cdda:	3901      	subs	r1, #1
 800cddc:	4652      	mov	r2, sl
 800cdde:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cde2:	9109      	str	r1, [sp, #36]	; 0x24
 800cde4:	f7ff ff2f 	bl	800cc46 <__exponent>
 800cde8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdea:	1813      	adds	r3, r2, r0
 800cdec:	2a01      	cmp	r2, #1
 800cdee:	4681      	mov	r9, r0
 800cdf0:	6123      	str	r3, [r4, #16]
 800cdf2:	dc02      	bgt.n	800cdfa <_printf_float+0x14e>
 800cdf4:	6822      	ldr	r2, [r4, #0]
 800cdf6:	07d1      	lsls	r1, r2, #31
 800cdf8:	d501      	bpl.n	800cdfe <_printf_float+0x152>
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	6123      	str	r3, [r4, #16]
 800cdfe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d0a5      	beq.n	800cd52 <_printf_float+0xa6>
 800ce06:	232d      	movs	r3, #45	; 0x2d
 800ce08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce0c:	e7a1      	b.n	800cd52 <_printf_float+0xa6>
 800ce0e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ce12:	f000 8177 	beq.w	800d104 <_printf_float+0x458>
 800ce16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ce1a:	d1bb      	bne.n	800cd94 <_printf_float+0xe8>
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	d1b9      	bne.n	800cd94 <_printf_float+0xe8>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e7b6      	b.n	800cd92 <_printf_float+0xe6>
 800ce24:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ce28:	d119      	bne.n	800ce5e <_printf_float+0x1b2>
 800ce2a:	2900      	cmp	r1, #0
 800ce2c:	6863      	ldr	r3, [r4, #4]
 800ce2e:	dd0c      	ble.n	800ce4a <_printf_float+0x19e>
 800ce30:	6121      	str	r1, [r4, #16]
 800ce32:	b913      	cbnz	r3, 800ce3a <_printf_float+0x18e>
 800ce34:	6822      	ldr	r2, [r4, #0]
 800ce36:	07d2      	lsls	r2, r2, #31
 800ce38:	d502      	bpl.n	800ce40 <_printf_float+0x194>
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	440b      	add	r3, r1
 800ce3e:	6123      	str	r3, [r4, #16]
 800ce40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce42:	65a3      	str	r3, [r4, #88]	; 0x58
 800ce44:	f04f 0900 	mov.w	r9, #0
 800ce48:	e7d9      	b.n	800cdfe <_printf_float+0x152>
 800ce4a:	b913      	cbnz	r3, 800ce52 <_printf_float+0x1a6>
 800ce4c:	6822      	ldr	r2, [r4, #0]
 800ce4e:	07d0      	lsls	r0, r2, #31
 800ce50:	d501      	bpl.n	800ce56 <_printf_float+0x1aa>
 800ce52:	3302      	adds	r3, #2
 800ce54:	e7f3      	b.n	800ce3e <_printf_float+0x192>
 800ce56:	2301      	movs	r3, #1
 800ce58:	e7f1      	b.n	800ce3e <_printf_float+0x192>
 800ce5a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ce5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ce62:	4293      	cmp	r3, r2
 800ce64:	db05      	blt.n	800ce72 <_printf_float+0x1c6>
 800ce66:	6822      	ldr	r2, [r4, #0]
 800ce68:	6123      	str	r3, [r4, #16]
 800ce6a:	07d1      	lsls	r1, r2, #31
 800ce6c:	d5e8      	bpl.n	800ce40 <_printf_float+0x194>
 800ce6e:	3301      	adds	r3, #1
 800ce70:	e7e5      	b.n	800ce3e <_printf_float+0x192>
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	bfd4      	ite	le
 800ce76:	f1c3 0302 	rsble	r3, r3, #2
 800ce7a:	2301      	movgt	r3, #1
 800ce7c:	4413      	add	r3, r2
 800ce7e:	e7de      	b.n	800ce3e <_printf_float+0x192>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	055a      	lsls	r2, r3, #21
 800ce84:	d407      	bmi.n	800ce96 <_printf_float+0x1ea>
 800ce86:	6923      	ldr	r3, [r4, #16]
 800ce88:	4642      	mov	r2, r8
 800ce8a:	4631      	mov	r1, r6
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	47b8      	blx	r7
 800ce90:	3001      	adds	r0, #1
 800ce92:	d12b      	bne.n	800ceec <_printf_float+0x240>
 800ce94:	e767      	b.n	800cd66 <_printf_float+0xba>
 800ce96:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ce9a:	f240 80dc 	bls.w	800d056 <_printf_float+0x3aa>
 800ce9e:	2200      	movs	r2, #0
 800cea0:	2300      	movs	r3, #0
 800cea2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cea6:	f7f3 fe19 	bl	8000adc <__aeabi_dcmpeq>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d033      	beq.n	800cf16 <_printf_float+0x26a>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	4a41      	ldr	r2, [pc, #260]	; (800cfb8 <_printf_float+0x30c>)
 800ceb2:	4631      	mov	r1, r6
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	47b8      	blx	r7
 800ceb8:	3001      	adds	r0, #1
 800ceba:	f43f af54 	beq.w	800cd66 <_printf_float+0xba>
 800cebe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cec2:	429a      	cmp	r2, r3
 800cec4:	db02      	blt.n	800cecc <_printf_float+0x220>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	07d8      	lsls	r0, r3, #31
 800ceca:	d50f      	bpl.n	800ceec <_printf_float+0x240>
 800cecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ced0:	4631      	mov	r1, r6
 800ced2:	4628      	mov	r0, r5
 800ced4:	47b8      	blx	r7
 800ced6:	3001      	adds	r0, #1
 800ced8:	f43f af45 	beq.w	800cd66 <_printf_float+0xba>
 800cedc:	f04f 0800 	mov.w	r8, #0
 800cee0:	f104 091a 	add.w	r9, r4, #26
 800cee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cee6:	3b01      	subs	r3, #1
 800cee8:	4543      	cmp	r3, r8
 800ceea:	dc09      	bgt.n	800cf00 <_printf_float+0x254>
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	079b      	lsls	r3, r3, #30
 800cef0:	f100 8103 	bmi.w	800d0fa <_printf_float+0x44e>
 800cef4:	68e0      	ldr	r0, [r4, #12]
 800cef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cef8:	4298      	cmp	r0, r3
 800cefa:	bfb8      	it	lt
 800cefc:	4618      	movlt	r0, r3
 800cefe:	e734      	b.n	800cd6a <_printf_float+0xbe>
 800cf00:	2301      	movs	r3, #1
 800cf02:	464a      	mov	r2, r9
 800cf04:	4631      	mov	r1, r6
 800cf06:	4628      	mov	r0, r5
 800cf08:	47b8      	blx	r7
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	f43f af2b 	beq.w	800cd66 <_printf_float+0xba>
 800cf10:	f108 0801 	add.w	r8, r8, #1
 800cf14:	e7e6      	b.n	800cee4 <_printf_float+0x238>
 800cf16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	dc2b      	bgt.n	800cf74 <_printf_float+0x2c8>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	4a26      	ldr	r2, [pc, #152]	; (800cfb8 <_printf_float+0x30c>)
 800cf20:	4631      	mov	r1, r6
 800cf22:	4628      	mov	r0, r5
 800cf24:	47b8      	blx	r7
 800cf26:	3001      	adds	r0, #1
 800cf28:	f43f af1d 	beq.w	800cd66 <_printf_float+0xba>
 800cf2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf2e:	b923      	cbnz	r3, 800cf3a <_printf_float+0x28e>
 800cf30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf32:	b913      	cbnz	r3, 800cf3a <_printf_float+0x28e>
 800cf34:	6823      	ldr	r3, [r4, #0]
 800cf36:	07d9      	lsls	r1, r3, #31
 800cf38:	d5d8      	bpl.n	800ceec <_printf_float+0x240>
 800cf3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4628      	mov	r0, r5
 800cf42:	47b8      	blx	r7
 800cf44:	3001      	adds	r0, #1
 800cf46:	f43f af0e 	beq.w	800cd66 <_printf_float+0xba>
 800cf4a:	f04f 0900 	mov.w	r9, #0
 800cf4e:	f104 0a1a 	add.w	sl, r4, #26
 800cf52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf54:	425b      	negs	r3, r3
 800cf56:	454b      	cmp	r3, r9
 800cf58:	dc01      	bgt.n	800cf5e <_printf_float+0x2b2>
 800cf5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf5c:	e794      	b.n	800ce88 <_printf_float+0x1dc>
 800cf5e:	2301      	movs	r3, #1
 800cf60:	4652      	mov	r2, sl
 800cf62:	4631      	mov	r1, r6
 800cf64:	4628      	mov	r0, r5
 800cf66:	47b8      	blx	r7
 800cf68:	3001      	adds	r0, #1
 800cf6a:	f43f aefc 	beq.w	800cd66 <_printf_float+0xba>
 800cf6e:	f109 0901 	add.w	r9, r9, #1
 800cf72:	e7ee      	b.n	800cf52 <_printf_float+0x2a6>
 800cf74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	bfa8      	it	ge
 800cf7c:	461a      	movge	r2, r3
 800cf7e:	2a00      	cmp	r2, #0
 800cf80:	4691      	mov	r9, r2
 800cf82:	dd07      	ble.n	800cf94 <_printf_float+0x2e8>
 800cf84:	4613      	mov	r3, r2
 800cf86:	4631      	mov	r1, r6
 800cf88:	4642      	mov	r2, r8
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	47b8      	blx	r7
 800cf8e:	3001      	adds	r0, #1
 800cf90:	f43f aee9 	beq.w	800cd66 <_printf_float+0xba>
 800cf94:	f104 031a 	add.w	r3, r4, #26
 800cf98:	f04f 0b00 	mov.w	fp, #0
 800cf9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfa0:	9306      	str	r3, [sp, #24]
 800cfa2:	e015      	b.n	800cfd0 <_printf_float+0x324>
 800cfa4:	7fefffff 	.word	0x7fefffff
 800cfa8:	08010bd4 	.word	0x08010bd4
 800cfac:	08010bd0 	.word	0x08010bd0
 800cfb0:	08010bdc 	.word	0x08010bdc
 800cfb4:	08010bd8 	.word	0x08010bd8
 800cfb8:	08010e3d 	.word	0x08010e3d
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	9a06      	ldr	r2, [sp, #24]
 800cfc0:	4631      	mov	r1, r6
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	47b8      	blx	r7
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	f43f aecd 	beq.w	800cd66 <_printf_float+0xba>
 800cfcc:	f10b 0b01 	add.w	fp, fp, #1
 800cfd0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cfd4:	ebaa 0309 	sub.w	r3, sl, r9
 800cfd8:	455b      	cmp	r3, fp
 800cfda:	dcef      	bgt.n	800cfbc <_printf_float+0x310>
 800cfdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	44d0      	add	r8, sl
 800cfe4:	db15      	blt.n	800d012 <_printf_float+0x366>
 800cfe6:	6823      	ldr	r3, [r4, #0]
 800cfe8:	07da      	lsls	r2, r3, #31
 800cfea:	d412      	bmi.n	800d012 <_printf_float+0x366>
 800cfec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cff0:	eba3 020a 	sub.w	r2, r3, sl
 800cff4:	eba3 0a01 	sub.w	sl, r3, r1
 800cff8:	4592      	cmp	sl, r2
 800cffa:	bfa8      	it	ge
 800cffc:	4692      	movge	sl, r2
 800cffe:	f1ba 0f00 	cmp.w	sl, #0
 800d002:	dc0e      	bgt.n	800d022 <_printf_float+0x376>
 800d004:	f04f 0800 	mov.w	r8, #0
 800d008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d00c:	f104 091a 	add.w	r9, r4, #26
 800d010:	e019      	b.n	800d046 <_printf_float+0x39a>
 800d012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d016:	4631      	mov	r1, r6
 800d018:	4628      	mov	r0, r5
 800d01a:	47b8      	blx	r7
 800d01c:	3001      	adds	r0, #1
 800d01e:	d1e5      	bne.n	800cfec <_printf_float+0x340>
 800d020:	e6a1      	b.n	800cd66 <_printf_float+0xba>
 800d022:	4653      	mov	r3, sl
 800d024:	4642      	mov	r2, r8
 800d026:	4631      	mov	r1, r6
 800d028:	4628      	mov	r0, r5
 800d02a:	47b8      	blx	r7
 800d02c:	3001      	adds	r0, #1
 800d02e:	d1e9      	bne.n	800d004 <_printf_float+0x358>
 800d030:	e699      	b.n	800cd66 <_printf_float+0xba>
 800d032:	2301      	movs	r3, #1
 800d034:	464a      	mov	r2, r9
 800d036:	4631      	mov	r1, r6
 800d038:	4628      	mov	r0, r5
 800d03a:	47b8      	blx	r7
 800d03c:	3001      	adds	r0, #1
 800d03e:	f43f ae92 	beq.w	800cd66 <_printf_float+0xba>
 800d042:	f108 0801 	add.w	r8, r8, #1
 800d046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d04a:	1a9b      	subs	r3, r3, r2
 800d04c:	eba3 030a 	sub.w	r3, r3, sl
 800d050:	4543      	cmp	r3, r8
 800d052:	dcee      	bgt.n	800d032 <_printf_float+0x386>
 800d054:	e74a      	b.n	800ceec <_printf_float+0x240>
 800d056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d058:	2a01      	cmp	r2, #1
 800d05a:	dc01      	bgt.n	800d060 <_printf_float+0x3b4>
 800d05c:	07db      	lsls	r3, r3, #31
 800d05e:	d53a      	bpl.n	800d0d6 <_printf_float+0x42a>
 800d060:	2301      	movs	r3, #1
 800d062:	4642      	mov	r2, r8
 800d064:	4631      	mov	r1, r6
 800d066:	4628      	mov	r0, r5
 800d068:	47b8      	blx	r7
 800d06a:	3001      	adds	r0, #1
 800d06c:	f43f ae7b 	beq.w	800cd66 <_printf_float+0xba>
 800d070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d074:	4631      	mov	r1, r6
 800d076:	4628      	mov	r0, r5
 800d078:	47b8      	blx	r7
 800d07a:	3001      	adds	r0, #1
 800d07c:	f108 0801 	add.w	r8, r8, #1
 800d080:	f43f ae71 	beq.w	800cd66 <_printf_float+0xba>
 800d084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d086:	2200      	movs	r2, #0
 800d088:	f103 3aff 	add.w	sl, r3, #4294967295
 800d08c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d090:	2300      	movs	r3, #0
 800d092:	f7f3 fd23 	bl	8000adc <__aeabi_dcmpeq>
 800d096:	b9c8      	cbnz	r0, 800d0cc <_printf_float+0x420>
 800d098:	4653      	mov	r3, sl
 800d09a:	4642      	mov	r2, r8
 800d09c:	4631      	mov	r1, r6
 800d09e:	4628      	mov	r0, r5
 800d0a0:	47b8      	blx	r7
 800d0a2:	3001      	adds	r0, #1
 800d0a4:	d10e      	bne.n	800d0c4 <_printf_float+0x418>
 800d0a6:	e65e      	b.n	800cd66 <_printf_float+0xba>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	4652      	mov	r2, sl
 800d0ac:	4631      	mov	r1, r6
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	47b8      	blx	r7
 800d0b2:	3001      	adds	r0, #1
 800d0b4:	f43f ae57 	beq.w	800cd66 <_printf_float+0xba>
 800d0b8:	f108 0801 	add.w	r8, r8, #1
 800d0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0be:	3b01      	subs	r3, #1
 800d0c0:	4543      	cmp	r3, r8
 800d0c2:	dcf1      	bgt.n	800d0a8 <_printf_float+0x3fc>
 800d0c4:	464b      	mov	r3, r9
 800d0c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d0ca:	e6de      	b.n	800ce8a <_printf_float+0x1de>
 800d0cc:	f04f 0800 	mov.w	r8, #0
 800d0d0:	f104 0a1a 	add.w	sl, r4, #26
 800d0d4:	e7f2      	b.n	800d0bc <_printf_float+0x410>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e7df      	b.n	800d09a <_printf_float+0x3ee>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	464a      	mov	r2, r9
 800d0de:	4631      	mov	r1, r6
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	47b8      	blx	r7
 800d0e4:	3001      	adds	r0, #1
 800d0e6:	f43f ae3e 	beq.w	800cd66 <_printf_float+0xba>
 800d0ea:	f108 0801 	add.w	r8, r8, #1
 800d0ee:	68e3      	ldr	r3, [r4, #12]
 800d0f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d0f2:	1a9b      	subs	r3, r3, r2
 800d0f4:	4543      	cmp	r3, r8
 800d0f6:	dcf0      	bgt.n	800d0da <_printf_float+0x42e>
 800d0f8:	e6fc      	b.n	800cef4 <_printf_float+0x248>
 800d0fa:	f04f 0800 	mov.w	r8, #0
 800d0fe:	f104 0919 	add.w	r9, r4, #25
 800d102:	e7f4      	b.n	800d0ee <_printf_float+0x442>
 800d104:	2900      	cmp	r1, #0
 800d106:	f43f ae8b 	beq.w	800ce20 <_printf_float+0x174>
 800d10a:	2300      	movs	r3, #0
 800d10c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d110:	ab09      	add	r3, sp, #36	; 0x24
 800d112:	9300      	str	r3, [sp, #0]
 800d114:	ec49 8b10 	vmov	d0, r8, r9
 800d118:	6022      	str	r2, [r4, #0]
 800d11a:	f8cd a004 	str.w	sl, [sp, #4]
 800d11e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d122:	4628      	mov	r0, r5
 800d124:	f7ff fd2e 	bl	800cb84 <__cvt>
 800d128:	4680      	mov	r8, r0
 800d12a:	e648      	b.n	800cdbe <_printf_float+0x112>

0800d12c <_printf_common>:
 800d12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d130:	4691      	mov	r9, r2
 800d132:	461f      	mov	r7, r3
 800d134:	688a      	ldr	r2, [r1, #8]
 800d136:	690b      	ldr	r3, [r1, #16]
 800d138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d13c:	4293      	cmp	r3, r2
 800d13e:	bfb8      	it	lt
 800d140:	4613      	movlt	r3, r2
 800d142:	f8c9 3000 	str.w	r3, [r9]
 800d146:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d14a:	4606      	mov	r6, r0
 800d14c:	460c      	mov	r4, r1
 800d14e:	b112      	cbz	r2, 800d156 <_printf_common+0x2a>
 800d150:	3301      	adds	r3, #1
 800d152:	f8c9 3000 	str.w	r3, [r9]
 800d156:	6823      	ldr	r3, [r4, #0]
 800d158:	0699      	lsls	r1, r3, #26
 800d15a:	bf42      	ittt	mi
 800d15c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d160:	3302      	addmi	r3, #2
 800d162:	f8c9 3000 	strmi.w	r3, [r9]
 800d166:	6825      	ldr	r5, [r4, #0]
 800d168:	f015 0506 	ands.w	r5, r5, #6
 800d16c:	d107      	bne.n	800d17e <_printf_common+0x52>
 800d16e:	f104 0a19 	add.w	sl, r4, #25
 800d172:	68e3      	ldr	r3, [r4, #12]
 800d174:	f8d9 2000 	ldr.w	r2, [r9]
 800d178:	1a9b      	subs	r3, r3, r2
 800d17a:	42ab      	cmp	r3, r5
 800d17c:	dc28      	bgt.n	800d1d0 <_printf_common+0xa4>
 800d17e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d182:	6822      	ldr	r2, [r4, #0]
 800d184:	3300      	adds	r3, #0
 800d186:	bf18      	it	ne
 800d188:	2301      	movne	r3, #1
 800d18a:	0692      	lsls	r2, r2, #26
 800d18c:	d42d      	bmi.n	800d1ea <_printf_common+0xbe>
 800d18e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d192:	4639      	mov	r1, r7
 800d194:	4630      	mov	r0, r6
 800d196:	47c0      	blx	r8
 800d198:	3001      	adds	r0, #1
 800d19a:	d020      	beq.n	800d1de <_printf_common+0xb2>
 800d19c:	6823      	ldr	r3, [r4, #0]
 800d19e:	68e5      	ldr	r5, [r4, #12]
 800d1a0:	f8d9 2000 	ldr.w	r2, [r9]
 800d1a4:	f003 0306 	and.w	r3, r3, #6
 800d1a8:	2b04      	cmp	r3, #4
 800d1aa:	bf08      	it	eq
 800d1ac:	1aad      	subeq	r5, r5, r2
 800d1ae:	68a3      	ldr	r3, [r4, #8]
 800d1b0:	6922      	ldr	r2, [r4, #16]
 800d1b2:	bf0c      	ite	eq
 800d1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1b8:	2500      	movne	r5, #0
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	bfc4      	itt	gt
 800d1be:	1a9b      	subgt	r3, r3, r2
 800d1c0:	18ed      	addgt	r5, r5, r3
 800d1c2:	f04f 0900 	mov.w	r9, #0
 800d1c6:	341a      	adds	r4, #26
 800d1c8:	454d      	cmp	r5, r9
 800d1ca:	d11a      	bne.n	800d202 <_printf_common+0xd6>
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	e008      	b.n	800d1e2 <_printf_common+0xb6>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	4652      	mov	r2, sl
 800d1d4:	4639      	mov	r1, r7
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	47c0      	blx	r8
 800d1da:	3001      	adds	r0, #1
 800d1dc:	d103      	bne.n	800d1e6 <_printf_common+0xba>
 800d1de:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e6:	3501      	adds	r5, #1
 800d1e8:	e7c3      	b.n	800d172 <_printf_common+0x46>
 800d1ea:	18e1      	adds	r1, r4, r3
 800d1ec:	1c5a      	adds	r2, r3, #1
 800d1ee:	2030      	movs	r0, #48	; 0x30
 800d1f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1f4:	4422      	add	r2, r4
 800d1f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1fe:	3302      	adds	r3, #2
 800d200:	e7c5      	b.n	800d18e <_printf_common+0x62>
 800d202:	2301      	movs	r3, #1
 800d204:	4622      	mov	r2, r4
 800d206:	4639      	mov	r1, r7
 800d208:	4630      	mov	r0, r6
 800d20a:	47c0      	blx	r8
 800d20c:	3001      	adds	r0, #1
 800d20e:	d0e6      	beq.n	800d1de <_printf_common+0xb2>
 800d210:	f109 0901 	add.w	r9, r9, #1
 800d214:	e7d8      	b.n	800d1c8 <_printf_common+0x9c>
	...

0800d218 <_printf_i>:
 800d218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d21c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d220:	460c      	mov	r4, r1
 800d222:	7e09      	ldrb	r1, [r1, #24]
 800d224:	b085      	sub	sp, #20
 800d226:	296e      	cmp	r1, #110	; 0x6e
 800d228:	4617      	mov	r7, r2
 800d22a:	4606      	mov	r6, r0
 800d22c:	4698      	mov	r8, r3
 800d22e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d230:	f000 80b3 	beq.w	800d39a <_printf_i+0x182>
 800d234:	d822      	bhi.n	800d27c <_printf_i+0x64>
 800d236:	2963      	cmp	r1, #99	; 0x63
 800d238:	d036      	beq.n	800d2a8 <_printf_i+0x90>
 800d23a:	d80a      	bhi.n	800d252 <_printf_i+0x3a>
 800d23c:	2900      	cmp	r1, #0
 800d23e:	f000 80b9 	beq.w	800d3b4 <_printf_i+0x19c>
 800d242:	2958      	cmp	r1, #88	; 0x58
 800d244:	f000 8083 	beq.w	800d34e <_printf_i+0x136>
 800d248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d24c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d250:	e032      	b.n	800d2b8 <_printf_i+0xa0>
 800d252:	2964      	cmp	r1, #100	; 0x64
 800d254:	d001      	beq.n	800d25a <_printf_i+0x42>
 800d256:	2969      	cmp	r1, #105	; 0x69
 800d258:	d1f6      	bne.n	800d248 <_printf_i+0x30>
 800d25a:	6820      	ldr	r0, [r4, #0]
 800d25c:	6813      	ldr	r3, [r2, #0]
 800d25e:	0605      	lsls	r5, r0, #24
 800d260:	f103 0104 	add.w	r1, r3, #4
 800d264:	d52a      	bpl.n	800d2bc <_printf_i+0xa4>
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6011      	str	r1, [r2, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	da03      	bge.n	800d276 <_printf_i+0x5e>
 800d26e:	222d      	movs	r2, #45	; 0x2d
 800d270:	425b      	negs	r3, r3
 800d272:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d276:	486f      	ldr	r0, [pc, #444]	; (800d434 <_printf_i+0x21c>)
 800d278:	220a      	movs	r2, #10
 800d27a:	e039      	b.n	800d2f0 <_printf_i+0xd8>
 800d27c:	2973      	cmp	r1, #115	; 0x73
 800d27e:	f000 809d 	beq.w	800d3bc <_printf_i+0x1a4>
 800d282:	d808      	bhi.n	800d296 <_printf_i+0x7e>
 800d284:	296f      	cmp	r1, #111	; 0x6f
 800d286:	d020      	beq.n	800d2ca <_printf_i+0xb2>
 800d288:	2970      	cmp	r1, #112	; 0x70
 800d28a:	d1dd      	bne.n	800d248 <_printf_i+0x30>
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	f043 0320 	orr.w	r3, r3, #32
 800d292:	6023      	str	r3, [r4, #0]
 800d294:	e003      	b.n	800d29e <_printf_i+0x86>
 800d296:	2975      	cmp	r1, #117	; 0x75
 800d298:	d017      	beq.n	800d2ca <_printf_i+0xb2>
 800d29a:	2978      	cmp	r1, #120	; 0x78
 800d29c:	d1d4      	bne.n	800d248 <_printf_i+0x30>
 800d29e:	2378      	movs	r3, #120	; 0x78
 800d2a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2a4:	4864      	ldr	r0, [pc, #400]	; (800d438 <_printf_i+0x220>)
 800d2a6:	e055      	b.n	800d354 <_printf_i+0x13c>
 800d2a8:	6813      	ldr	r3, [r2, #0]
 800d2aa:	1d19      	adds	r1, r3, #4
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	6011      	str	r1, [r2, #0]
 800d2b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e08c      	b.n	800d3d6 <_printf_i+0x1be>
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	6011      	str	r1, [r2, #0]
 800d2c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2c4:	bf18      	it	ne
 800d2c6:	b21b      	sxthne	r3, r3
 800d2c8:	e7cf      	b.n	800d26a <_printf_i+0x52>
 800d2ca:	6813      	ldr	r3, [r2, #0]
 800d2cc:	6825      	ldr	r5, [r4, #0]
 800d2ce:	1d18      	adds	r0, r3, #4
 800d2d0:	6010      	str	r0, [r2, #0]
 800d2d2:	0628      	lsls	r0, r5, #24
 800d2d4:	d501      	bpl.n	800d2da <_printf_i+0xc2>
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	e002      	b.n	800d2e0 <_printf_i+0xc8>
 800d2da:	0668      	lsls	r0, r5, #25
 800d2dc:	d5fb      	bpl.n	800d2d6 <_printf_i+0xbe>
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	4854      	ldr	r0, [pc, #336]	; (800d434 <_printf_i+0x21c>)
 800d2e2:	296f      	cmp	r1, #111	; 0x6f
 800d2e4:	bf14      	ite	ne
 800d2e6:	220a      	movne	r2, #10
 800d2e8:	2208      	moveq	r2, #8
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2f0:	6865      	ldr	r5, [r4, #4]
 800d2f2:	60a5      	str	r5, [r4, #8]
 800d2f4:	2d00      	cmp	r5, #0
 800d2f6:	f2c0 8095 	blt.w	800d424 <_printf_i+0x20c>
 800d2fa:	6821      	ldr	r1, [r4, #0]
 800d2fc:	f021 0104 	bic.w	r1, r1, #4
 800d300:	6021      	str	r1, [r4, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d13d      	bne.n	800d382 <_printf_i+0x16a>
 800d306:	2d00      	cmp	r5, #0
 800d308:	f040 808e 	bne.w	800d428 <_printf_i+0x210>
 800d30c:	4665      	mov	r5, ip
 800d30e:	2a08      	cmp	r2, #8
 800d310:	d10b      	bne.n	800d32a <_printf_i+0x112>
 800d312:	6823      	ldr	r3, [r4, #0]
 800d314:	07db      	lsls	r3, r3, #31
 800d316:	d508      	bpl.n	800d32a <_printf_i+0x112>
 800d318:	6923      	ldr	r3, [r4, #16]
 800d31a:	6862      	ldr	r2, [r4, #4]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	bfde      	ittt	le
 800d320:	2330      	movle	r3, #48	; 0x30
 800d322:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d326:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d32a:	ebac 0305 	sub.w	r3, ip, r5
 800d32e:	6123      	str	r3, [r4, #16]
 800d330:	f8cd 8000 	str.w	r8, [sp]
 800d334:	463b      	mov	r3, r7
 800d336:	aa03      	add	r2, sp, #12
 800d338:	4621      	mov	r1, r4
 800d33a:	4630      	mov	r0, r6
 800d33c:	f7ff fef6 	bl	800d12c <_printf_common>
 800d340:	3001      	adds	r0, #1
 800d342:	d14d      	bne.n	800d3e0 <_printf_i+0x1c8>
 800d344:	f04f 30ff 	mov.w	r0, #4294967295
 800d348:	b005      	add	sp, #20
 800d34a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d34e:	4839      	ldr	r0, [pc, #228]	; (800d434 <_printf_i+0x21c>)
 800d350:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d354:	6813      	ldr	r3, [r2, #0]
 800d356:	6821      	ldr	r1, [r4, #0]
 800d358:	1d1d      	adds	r5, r3, #4
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6015      	str	r5, [r2, #0]
 800d35e:	060a      	lsls	r2, r1, #24
 800d360:	d50b      	bpl.n	800d37a <_printf_i+0x162>
 800d362:	07ca      	lsls	r2, r1, #31
 800d364:	bf44      	itt	mi
 800d366:	f041 0120 	orrmi.w	r1, r1, #32
 800d36a:	6021      	strmi	r1, [r4, #0]
 800d36c:	b91b      	cbnz	r3, 800d376 <_printf_i+0x15e>
 800d36e:	6822      	ldr	r2, [r4, #0]
 800d370:	f022 0220 	bic.w	r2, r2, #32
 800d374:	6022      	str	r2, [r4, #0]
 800d376:	2210      	movs	r2, #16
 800d378:	e7b7      	b.n	800d2ea <_printf_i+0xd2>
 800d37a:	064d      	lsls	r5, r1, #25
 800d37c:	bf48      	it	mi
 800d37e:	b29b      	uxthmi	r3, r3
 800d380:	e7ef      	b.n	800d362 <_printf_i+0x14a>
 800d382:	4665      	mov	r5, ip
 800d384:	fbb3 f1f2 	udiv	r1, r3, r2
 800d388:	fb02 3311 	mls	r3, r2, r1, r3
 800d38c:	5cc3      	ldrb	r3, [r0, r3]
 800d38e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d392:	460b      	mov	r3, r1
 800d394:	2900      	cmp	r1, #0
 800d396:	d1f5      	bne.n	800d384 <_printf_i+0x16c>
 800d398:	e7b9      	b.n	800d30e <_printf_i+0xf6>
 800d39a:	6813      	ldr	r3, [r2, #0]
 800d39c:	6825      	ldr	r5, [r4, #0]
 800d39e:	6961      	ldr	r1, [r4, #20]
 800d3a0:	1d18      	adds	r0, r3, #4
 800d3a2:	6010      	str	r0, [r2, #0]
 800d3a4:	0628      	lsls	r0, r5, #24
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	d501      	bpl.n	800d3ae <_printf_i+0x196>
 800d3aa:	6019      	str	r1, [r3, #0]
 800d3ac:	e002      	b.n	800d3b4 <_printf_i+0x19c>
 800d3ae:	066a      	lsls	r2, r5, #25
 800d3b0:	d5fb      	bpl.n	800d3aa <_printf_i+0x192>
 800d3b2:	8019      	strh	r1, [r3, #0]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	6123      	str	r3, [r4, #16]
 800d3b8:	4665      	mov	r5, ip
 800d3ba:	e7b9      	b.n	800d330 <_printf_i+0x118>
 800d3bc:	6813      	ldr	r3, [r2, #0]
 800d3be:	1d19      	adds	r1, r3, #4
 800d3c0:	6011      	str	r1, [r2, #0]
 800d3c2:	681d      	ldr	r5, [r3, #0]
 800d3c4:	6862      	ldr	r2, [r4, #4]
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	f7f2 ff09 	bl	80001e0 <memchr>
 800d3ce:	b108      	cbz	r0, 800d3d4 <_printf_i+0x1bc>
 800d3d0:	1b40      	subs	r0, r0, r5
 800d3d2:	6060      	str	r0, [r4, #4]
 800d3d4:	6863      	ldr	r3, [r4, #4]
 800d3d6:	6123      	str	r3, [r4, #16]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3de:	e7a7      	b.n	800d330 <_printf_i+0x118>
 800d3e0:	6923      	ldr	r3, [r4, #16]
 800d3e2:	462a      	mov	r2, r5
 800d3e4:	4639      	mov	r1, r7
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	47c0      	blx	r8
 800d3ea:	3001      	adds	r0, #1
 800d3ec:	d0aa      	beq.n	800d344 <_printf_i+0x12c>
 800d3ee:	6823      	ldr	r3, [r4, #0]
 800d3f0:	079b      	lsls	r3, r3, #30
 800d3f2:	d413      	bmi.n	800d41c <_printf_i+0x204>
 800d3f4:	68e0      	ldr	r0, [r4, #12]
 800d3f6:	9b03      	ldr	r3, [sp, #12]
 800d3f8:	4298      	cmp	r0, r3
 800d3fa:	bfb8      	it	lt
 800d3fc:	4618      	movlt	r0, r3
 800d3fe:	e7a3      	b.n	800d348 <_printf_i+0x130>
 800d400:	2301      	movs	r3, #1
 800d402:	464a      	mov	r2, r9
 800d404:	4639      	mov	r1, r7
 800d406:	4630      	mov	r0, r6
 800d408:	47c0      	blx	r8
 800d40a:	3001      	adds	r0, #1
 800d40c:	d09a      	beq.n	800d344 <_printf_i+0x12c>
 800d40e:	3501      	adds	r5, #1
 800d410:	68e3      	ldr	r3, [r4, #12]
 800d412:	9a03      	ldr	r2, [sp, #12]
 800d414:	1a9b      	subs	r3, r3, r2
 800d416:	42ab      	cmp	r3, r5
 800d418:	dcf2      	bgt.n	800d400 <_printf_i+0x1e8>
 800d41a:	e7eb      	b.n	800d3f4 <_printf_i+0x1dc>
 800d41c:	2500      	movs	r5, #0
 800d41e:	f104 0919 	add.w	r9, r4, #25
 800d422:	e7f5      	b.n	800d410 <_printf_i+0x1f8>
 800d424:	2b00      	cmp	r3, #0
 800d426:	d1ac      	bne.n	800d382 <_printf_i+0x16a>
 800d428:	7803      	ldrb	r3, [r0, #0]
 800d42a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d42e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d432:	e76c      	b.n	800d30e <_printf_i+0xf6>
 800d434:	08010be0 	.word	0x08010be0
 800d438:	08010bf1 	.word	0x08010bf1

0800d43c <iprintf>:
 800d43c:	b40f      	push	{r0, r1, r2, r3}
 800d43e:	4b0a      	ldr	r3, [pc, #40]	; (800d468 <iprintf+0x2c>)
 800d440:	b513      	push	{r0, r1, r4, lr}
 800d442:	681c      	ldr	r4, [r3, #0]
 800d444:	b124      	cbz	r4, 800d450 <iprintf+0x14>
 800d446:	69a3      	ldr	r3, [r4, #24]
 800d448:	b913      	cbnz	r3, 800d450 <iprintf+0x14>
 800d44a:	4620      	mov	r0, r4
 800d44c:	f001 faf0 	bl	800ea30 <__sinit>
 800d450:	ab05      	add	r3, sp, #20
 800d452:	9a04      	ldr	r2, [sp, #16]
 800d454:	68a1      	ldr	r1, [r4, #8]
 800d456:	9301      	str	r3, [sp, #4]
 800d458:	4620      	mov	r0, r4
 800d45a:	f002 f89f 	bl	800f59c <_vfiprintf_r>
 800d45e:	b002      	add	sp, #8
 800d460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d464:	b004      	add	sp, #16
 800d466:	4770      	bx	lr
 800d468:	20000010 	.word	0x20000010

0800d46c <_puts_r>:
 800d46c:	b570      	push	{r4, r5, r6, lr}
 800d46e:	460e      	mov	r6, r1
 800d470:	4605      	mov	r5, r0
 800d472:	b118      	cbz	r0, 800d47c <_puts_r+0x10>
 800d474:	6983      	ldr	r3, [r0, #24]
 800d476:	b90b      	cbnz	r3, 800d47c <_puts_r+0x10>
 800d478:	f001 fada 	bl	800ea30 <__sinit>
 800d47c:	69ab      	ldr	r3, [r5, #24]
 800d47e:	68ac      	ldr	r4, [r5, #8]
 800d480:	b913      	cbnz	r3, 800d488 <_puts_r+0x1c>
 800d482:	4628      	mov	r0, r5
 800d484:	f001 fad4 	bl	800ea30 <__sinit>
 800d488:	4b23      	ldr	r3, [pc, #140]	; (800d518 <_puts_r+0xac>)
 800d48a:	429c      	cmp	r4, r3
 800d48c:	d117      	bne.n	800d4be <_puts_r+0x52>
 800d48e:	686c      	ldr	r4, [r5, #4]
 800d490:	89a3      	ldrh	r3, [r4, #12]
 800d492:	071b      	lsls	r3, r3, #28
 800d494:	d51d      	bpl.n	800d4d2 <_puts_r+0x66>
 800d496:	6923      	ldr	r3, [r4, #16]
 800d498:	b1db      	cbz	r3, 800d4d2 <_puts_r+0x66>
 800d49a:	3e01      	subs	r6, #1
 800d49c:	68a3      	ldr	r3, [r4, #8]
 800d49e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	60a3      	str	r3, [r4, #8]
 800d4a6:	b9e9      	cbnz	r1, 800d4e4 <_puts_r+0x78>
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	da2e      	bge.n	800d50a <_puts_r+0x9e>
 800d4ac:	4622      	mov	r2, r4
 800d4ae:	210a      	movs	r1, #10
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	f000 fab5 	bl	800da20 <__swbuf_r>
 800d4b6:	3001      	adds	r0, #1
 800d4b8:	d011      	beq.n	800d4de <_puts_r+0x72>
 800d4ba:	200a      	movs	r0, #10
 800d4bc:	e011      	b.n	800d4e2 <_puts_r+0x76>
 800d4be:	4b17      	ldr	r3, [pc, #92]	; (800d51c <_puts_r+0xb0>)
 800d4c0:	429c      	cmp	r4, r3
 800d4c2:	d101      	bne.n	800d4c8 <_puts_r+0x5c>
 800d4c4:	68ac      	ldr	r4, [r5, #8]
 800d4c6:	e7e3      	b.n	800d490 <_puts_r+0x24>
 800d4c8:	4b15      	ldr	r3, [pc, #84]	; (800d520 <_puts_r+0xb4>)
 800d4ca:	429c      	cmp	r4, r3
 800d4cc:	bf08      	it	eq
 800d4ce:	68ec      	ldreq	r4, [r5, #12]
 800d4d0:	e7de      	b.n	800d490 <_puts_r+0x24>
 800d4d2:	4621      	mov	r1, r4
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	f000 faf5 	bl	800dac4 <__swsetup_r>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d0dd      	beq.n	800d49a <_puts_r+0x2e>
 800d4de:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e2:	bd70      	pop	{r4, r5, r6, pc}
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	da04      	bge.n	800d4f2 <_puts_r+0x86>
 800d4e8:	69a2      	ldr	r2, [r4, #24]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	dc06      	bgt.n	800d4fc <_puts_r+0x90>
 800d4ee:	290a      	cmp	r1, #10
 800d4f0:	d004      	beq.n	800d4fc <_puts_r+0x90>
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	1c5a      	adds	r2, r3, #1
 800d4f6:	6022      	str	r2, [r4, #0]
 800d4f8:	7019      	strb	r1, [r3, #0]
 800d4fa:	e7cf      	b.n	800d49c <_puts_r+0x30>
 800d4fc:	4622      	mov	r2, r4
 800d4fe:	4628      	mov	r0, r5
 800d500:	f000 fa8e 	bl	800da20 <__swbuf_r>
 800d504:	3001      	adds	r0, #1
 800d506:	d1c9      	bne.n	800d49c <_puts_r+0x30>
 800d508:	e7e9      	b.n	800d4de <_puts_r+0x72>
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	200a      	movs	r0, #10
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	6022      	str	r2, [r4, #0]
 800d512:	7018      	strb	r0, [r3, #0]
 800d514:	e7e5      	b.n	800d4e2 <_puts_r+0x76>
 800d516:	bf00      	nop
 800d518:	08010c6c 	.word	0x08010c6c
 800d51c:	08010c8c 	.word	0x08010c8c
 800d520:	08010c4c 	.word	0x08010c4c

0800d524 <puts>:
 800d524:	4b02      	ldr	r3, [pc, #8]	; (800d530 <puts+0xc>)
 800d526:	4601      	mov	r1, r0
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	f7ff bf9f 	b.w	800d46c <_puts_r>
 800d52e:	bf00      	nop
 800d530:	20000010 	.word	0x20000010

0800d534 <_sbrk_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	4c06      	ldr	r4, [pc, #24]	; (800d550 <_sbrk_r+0x1c>)
 800d538:	2300      	movs	r3, #0
 800d53a:	4605      	mov	r5, r0
 800d53c:	4608      	mov	r0, r1
 800d53e:	6023      	str	r3, [r4, #0]
 800d540:	f7f5 fb04 	bl	8002b4c <_sbrk>
 800d544:	1c43      	adds	r3, r0, #1
 800d546:	d102      	bne.n	800d54e <_sbrk_r+0x1a>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	b103      	cbz	r3, 800d54e <_sbrk_r+0x1a>
 800d54c:	602b      	str	r3, [r5, #0]
 800d54e:	bd38      	pop	{r3, r4, r5, pc}
 800d550:	20006b20 	.word	0x20006b20

0800d554 <siprintf>:
 800d554:	b40e      	push	{r1, r2, r3}
 800d556:	b500      	push	{lr}
 800d558:	b09c      	sub	sp, #112	; 0x70
 800d55a:	ab1d      	add	r3, sp, #116	; 0x74
 800d55c:	9002      	str	r0, [sp, #8]
 800d55e:	9006      	str	r0, [sp, #24]
 800d560:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d564:	4809      	ldr	r0, [pc, #36]	; (800d58c <siprintf+0x38>)
 800d566:	9107      	str	r1, [sp, #28]
 800d568:	9104      	str	r1, [sp, #16]
 800d56a:	4909      	ldr	r1, [pc, #36]	; (800d590 <siprintf+0x3c>)
 800d56c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d570:	9105      	str	r1, [sp, #20]
 800d572:	6800      	ldr	r0, [r0, #0]
 800d574:	9301      	str	r3, [sp, #4]
 800d576:	a902      	add	r1, sp, #8
 800d578:	f001 feee 	bl	800f358 <_svfiprintf_r>
 800d57c:	9b02      	ldr	r3, [sp, #8]
 800d57e:	2200      	movs	r2, #0
 800d580:	701a      	strb	r2, [r3, #0]
 800d582:	b01c      	add	sp, #112	; 0x70
 800d584:	f85d eb04 	ldr.w	lr, [sp], #4
 800d588:	b003      	add	sp, #12
 800d58a:	4770      	bx	lr
 800d58c:	20000010 	.word	0x20000010
 800d590:	ffff0208 	.word	0xffff0208

0800d594 <strcat>:
 800d594:	b510      	push	{r4, lr}
 800d596:	4603      	mov	r3, r0
 800d598:	781a      	ldrb	r2, [r3, #0]
 800d59a:	1c5c      	adds	r4, r3, #1
 800d59c:	b93a      	cbnz	r2, 800d5ae <strcat+0x1a>
 800d59e:	3b01      	subs	r3, #1
 800d5a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5a8:	2a00      	cmp	r2, #0
 800d5aa:	d1f9      	bne.n	800d5a0 <strcat+0xc>
 800d5ac:	bd10      	pop	{r4, pc}
 800d5ae:	4623      	mov	r3, r4
 800d5b0:	e7f2      	b.n	800d598 <strcat+0x4>

0800d5b2 <strcpy>:
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5b8:	f803 2b01 	strb.w	r2, [r3], #1
 800d5bc:	2a00      	cmp	r2, #0
 800d5be:	d1f9      	bne.n	800d5b4 <strcpy+0x2>
 800d5c0:	4770      	bx	lr
	...

0800d5c4 <__tzcalc_limits>:
 800d5c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	f001 faff 	bl	800ebcc <__gettzinfo>
 800d5ce:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800d5d2:	4598      	cmp	r8, r3
 800d5d4:	f340 8098 	ble.w	800d708 <__tzcalc_limits+0x144>
 800d5d8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800d5dc:	4443      	add	r3, r8
 800d5de:	109b      	asrs	r3, r3, #2
 800d5e0:	f240 126d 	movw	r2, #365	; 0x16d
 800d5e4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800d5e8:	fb02 3505 	mla	r5, r2, r5, r3
 800d5ec:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800d5f0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800d5f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5f8:	441d      	add	r5, r3
 800d5fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800d5fe:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800d602:	fb98 f7f3 	sdiv	r7, r8, r3
 800d606:	fb03 8717 	mls	r7, r3, r7, r8
 800d60a:	4442      	add	r2, r8
 800d60c:	fab7 fc87 	clz	ip, r7
 800d610:	fb92 f2f3 	sdiv	r2, r2, r3
 800d614:	f008 0303 	and.w	r3, r8, #3
 800d618:	4415      	add	r5, r2
 800d61a:	2264      	movs	r2, #100	; 0x64
 800d61c:	f8c0 8004 	str.w	r8, [r0, #4]
 800d620:	fb98 f6f2 	sdiv	r6, r8, r2
 800d624:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d628:	fb02 8616 	mls	r6, r2, r6, r8
 800d62c:	4604      	mov	r4, r0
 800d62e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	f04f 0e07 	mov.w	lr, #7
 800d638:	7a22      	ldrb	r2, [r4, #8]
 800d63a:	6963      	ldr	r3, [r4, #20]
 800d63c:	2a4a      	cmp	r2, #74	; 0x4a
 800d63e:	d128      	bne.n	800d692 <__tzcalc_limits+0xce>
 800d640:	9900      	ldr	r1, [sp, #0]
 800d642:	18ea      	adds	r2, r5, r3
 800d644:	b901      	cbnz	r1, 800d648 <__tzcalc_limits+0x84>
 800d646:	b906      	cbnz	r6, 800d64a <__tzcalc_limits+0x86>
 800d648:	bb0f      	cbnz	r7, 800d68e <__tzcalc_limits+0xca>
 800d64a:	2b3b      	cmp	r3, #59	; 0x3b
 800d64c:	bfd4      	ite	le
 800d64e:	2300      	movle	r3, #0
 800d650:	2301      	movgt	r3, #1
 800d652:	4413      	add	r3, r2
 800d654:	1e5a      	subs	r2, r3, #1
 800d656:	69a3      	ldr	r3, [r4, #24]
 800d658:	492c      	ldr	r1, [pc, #176]	; (800d70c <__tzcalc_limits+0x148>)
 800d65a:	fb01 3202 	mla	r2, r1, r2, r3
 800d65e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d660:	4413      	add	r3, r2
 800d662:	461a      	mov	r2, r3
 800d664:	17db      	asrs	r3, r3, #31
 800d666:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800d66a:	3428      	adds	r4, #40	; 0x28
 800d66c:	45a3      	cmp	fp, r4
 800d66e:	d1e3      	bne.n	800d638 <__tzcalc_limits+0x74>
 800d670:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 800d674:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800d678:	4294      	cmp	r4, r2
 800d67a:	eb75 0303 	sbcs.w	r3, r5, r3
 800d67e:	bfb4      	ite	lt
 800d680:	2301      	movlt	r3, #1
 800d682:	2300      	movge	r3, #0
 800d684:	6003      	str	r3, [r0, #0]
 800d686:	2001      	movs	r0, #1
 800d688:	b003      	add	sp, #12
 800d68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68e:	2300      	movs	r3, #0
 800d690:	e7df      	b.n	800d652 <__tzcalc_limits+0x8e>
 800d692:	2a44      	cmp	r2, #68	; 0x44
 800d694:	d101      	bne.n	800d69a <__tzcalc_limits+0xd6>
 800d696:	18ea      	adds	r2, r5, r3
 800d698:	e7dd      	b.n	800d656 <__tzcalc_limits+0x92>
 800d69a:	9a00      	ldr	r2, [sp, #0]
 800d69c:	bb72      	cbnz	r2, 800d6fc <__tzcalc_limits+0x138>
 800d69e:	2e00      	cmp	r6, #0
 800d6a0:	bf0c      	ite	eq
 800d6a2:	46e1      	moveq	r9, ip
 800d6a4:	f04f 0901 	movne.w	r9, #1
 800d6a8:	2230      	movs	r2, #48	; 0x30
 800d6aa:	fb02 f909 	mul.w	r9, r2, r9
 800d6ae:	68e2      	ldr	r2, [r4, #12]
 800d6b0:	9201      	str	r2, [sp, #4]
 800d6b2:	f04f 0800 	mov.w	r8, #0
 800d6b6:	462a      	mov	r2, r5
 800d6b8:	f108 0801 	add.w	r8, r8, #1
 800d6bc:	4914      	ldr	r1, [pc, #80]	; (800d710 <__tzcalc_limits+0x14c>)
 800d6be:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 800d6c2:	448a      	add	sl, r1
 800d6c4:	9901      	ldr	r1, [sp, #4]
 800d6c6:	f85a ac04 	ldr.w	sl, [sl, #-4]
 800d6ca:	4541      	cmp	r1, r8
 800d6cc:	dc18      	bgt.n	800d700 <__tzcalc_limits+0x13c>
 800d6ce:	f102 0804 	add.w	r8, r2, #4
 800d6d2:	fb98 f9fe 	sdiv	r9, r8, lr
 800d6d6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800d6da:	eba8 0909 	sub.w	r9, r8, r9
 800d6de:	ebb3 0909 	subs.w	r9, r3, r9
 800d6e2:	6923      	ldr	r3, [r4, #16]
 800d6e4:	f103 33ff 	add.w	r3, r3, #4294967295
 800d6e8:	bf48      	it	mi
 800d6ea:	f109 0907 	addmi.w	r9, r9, #7
 800d6ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d6f2:	444b      	add	r3, r9
 800d6f4:	4553      	cmp	r3, sl
 800d6f6:	da05      	bge.n	800d704 <__tzcalc_limits+0x140>
 800d6f8:	441a      	add	r2, r3
 800d6fa:	e7ac      	b.n	800d656 <__tzcalc_limits+0x92>
 800d6fc:	46e1      	mov	r9, ip
 800d6fe:	e7d3      	b.n	800d6a8 <__tzcalc_limits+0xe4>
 800d700:	4452      	add	r2, sl
 800d702:	e7d9      	b.n	800d6b8 <__tzcalc_limits+0xf4>
 800d704:	3b07      	subs	r3, #7
 800d706:	e7f5      	b.n	800d6f4 <__tzcalc_limits+0x130>
 800d708:	2000      	movs	r0, #0
 800d70a:	e7bd      	b.n	800d688 <__tzcalc_limits+0xc4>
 800d70c:	00015180 	.word	0x00015180
 800d710:	08010cac 	.word	0x08010cac

0800d714 <__tz_lock>:
 800d714:	4770      	bx	lr

0800d716 <__tz_unlock>:
 800d716:	4770      	bx	lr

0800d718 <_tzset_unlocked>:
 800d718:	4b01      	ldr	r3, [pc, #4]	; (800d720 <_tzset_unlocked+0x8>)
 800d71a:	6818      	ldr	r0, [r3, #0]
 800d71c:	f000 b802 	b.w	800d724 <_tzset_unlocked_r>
 800d720:	20000010 	.word	0x20000010

0800d724 <_tzset_unlocked_r>:
 800d724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d728:	b08d      	sub	sp, #52	; 0x34
 800d72a:	4607      	mov	r7, r0
 800d72c:	f001 fa4e 	bl	800ebcc <__gettzinfo>
 800d730:	49af      	ldr	r1, [pc, #700]	; (800d9f0 <_tzset_unlocked_r+0x2cc>)
 800d732:	4eb0      	ldr	r6, [pc, #704]	; (800d9f4 <_tzset_unlocked_r+0x2d0>)
 800d734:	4605      	mov	r5, r0
 800d736:	4638      	mov	r0, r7
 800d738:	f001 fa40 	bl	800ebbc <_getenv_r>
 800d73c:	4604      	mov	r4, r0
 800d73e:	b970      	cbnz	r0, 800d75e <_tzset_unlocked_r+0x3a>
 800d740:	4bad      	ldr	r3, [pc, #692]	; (800d9f8 <_tzset_unlocked_r+0x2d4>)
 800d742:	4aae      	ldr	r2, [pc, #696]	; (800d9fc <_tzset_unlocked_r+0x2d8>)
 800d744:	6018      	str	r0, [r3, #0]
 800d746:	4bae      	ldr	r3, [pc, #696]	; (800da00 <_tzset_unlocked_r+0x2dc>)
 800d748:	6018      	str	r0, [r3, #0]
 800d74a:	4bae      	ldr	r3, [pc, #696]	; (800da04 <_tzset_unlocked_r+0x2e0>)
 800d74c:	6830      	ldr	r0, [r6, #0]
 800d74e:	e9c3 2200 	strd	r2, r2, [r3]
 800d752:	f7fe fecb 	bl	800c4ec <free>
 800d756:	6034      	str	r4, [r6, #0]
 800d758:	b00d      	add	sp, #52	; 0x34
 800d75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d75e:	6831      	ldr	r1, [r6, #0]
 800d760:	2900      	cmp	r1, #0
 800d762:	d15f      	bne.n	800d824 <_tzset_unlocked_r+0x100>
 800d764:	6830      	ldr	r0, [r6, #0]
 800d766:	f7fe fec1 	bl	800c4ec <free>
 800d76a:	4620      	mov	r0, r4
 800d76c:	f7f2 fd30 	bl	80001d0 <strlen>
 800d770:	1c41      	adds	r1, r0, #1
 800d772:	4638      	mov	r0, r7
 800d774:	f7ff f9ac 	bl	800cad0 <_malloc_r>
 800d778:	6030      	str	r0, [r6, #0]
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d157      	bne.n	800d82e <_tzset_unlocked_r+0x10a>
 800d77e:	7823      	ldrb	r3, [r4, #0]
 800d780:	4aa1      	ldr	r2, [pc, #644]	; (800da08 <_tzset_unlocked_r+0x2e4>)
 800d782:	49a2      	ldr	r1, [pc, #648]	; (800da0c <_tzset_unlocked_r+0x2e8>)
 800d784:	2b3a      	cmp	r3, #58	; 0x3a
 800d786:	bf08      	it	eq
 800d788:	3401      	addeq	r4, #1
 800d78a:	ae0a      	add	r6, sp, #40	; 0x28
 800d78c:	4633      	mov	r3, r6
 800d78e:	4620      	mov	r0, r4
 800d790:	f002 f81a 	bl	800f7c8 <siscanf>
 800d794:	2800      	cmp	r0, #0
 800d796:	dddf      	ble.n	800d758 <_tzset_unlocked_r+0x34>
 800d798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d79a:	18e7      	adds	r7, r4, r3
 800d79c:	5ce3      	ldrb	r3, [r4, r3]
 800d79e:	2b2d      	cmp	r3, #45	; 0x2d
 800d7a0:	d149      	bne.n	800d836 <_tzset_unlocked_r+0x112>
 800d7a2:	3701      	adds	r7, #1
 800d7a4:	f04f 34ff 	mov.w	r4, #4294967295
 800d7a8:	f10d 0a20 	add.w	sl, sp, #32
 800d7ac:	f10d 0b1e 	add.w	fp, sp, #30
 800d7b0:	f04f 0800 	mov.w	r8, #0
 800d7b4:	9603      	str	r6, [sp, #12]
 800d7b6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800d7ba:	f8cd b000 	str.w	fp, [sp]
 800d7be:	4633      	mov	r3, r6
 800d7c0:	aa07      	add	r2, sp, #28
 800d7c2:	4993      	ldr	r1, [pc, #588]	; (800da10 <_tzset_unlocked_r+0x2ec>)
 800d7c4:	f8ad 801e 	strh.w	r8, [sp, #30]
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f8ad 8020 	strh.w	r8, [sp, #32]
 800d7ce:	f001 fffb 	bl	800f7c8 <siscanf>
 800d7d2:	4540      	cmp	r0, r8
 800d7d4:	ddc0      	ble.n	800d758 <_tzset_unlocked_r+0x34>
 800d7d6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d7da:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d7de:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800da1c <_tzset_unlocked_r+0x2f8>
 800d7e2:	213c      	movs	r1, #60	; 0x3c
 800d7e4:	fb01 2203 	mla	r2, r1, r3, r2
 800d7e8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d7ec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d7f0:	fb01 2303 	mla	r3, r1, r3, r2
 800d7f4:	435c      	muls	r4, r3
 800d7f6:	62ac      	str	r4, [r5, #40]	; 0x28
 800d7f8:	4c82      	ldr	r4, [pc, #520]	; (800da04 <_tzset_unlocked_r+0x2e0>)
 800d7fa:	4b83      	ldr	r3, [pc, #524]	; (800da08 <_tzset_unlocked_r+0x2e4>)
 800d7fc:	6023      	str	r3, [r4, #0]
 800d7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d800:	4982      	ldr	r1, [pc, #520]	; (800da0c <_tzset_unlocked_r+0x2e8>)
 800d802:	441f      	add	r7, r3
 800d804:	464a      	mov	r2, r9
 800d806:	4633      	mov	r3, r6
 800d808:	4638      	mov	r0, r7
 800d80a:	f001 ffdd 	bl	800f7c8 <siscanf>
 800d80e:	4540      	cmp	r0, r8
 800d810:	dc16      	bgt.n	800d840 <_tzset_unlocked_r+0x11c>
 800d812:	6823      	ldr	r3, [r4, #0]
 800d814:	6063      	str	r3, [r4, #4]
 800d816:	4b78      	ldr	r3, [pc, #480]	; (800d9f8 <_tzset_unlocked_r+0x2d4>)
 800d818:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d81a:	601a      	str	r2, [r3, #0]
 800d81c:	4b78      	ldr	r3, [pc, #480]	; (800da00 <_tzset_unlocked_r+0x2dc>)
 800d81e:	f8c3 8000 	str.w	r8, [r3]
 800d822:	e799      	b.n	800d758 <_tzset_unlocked_r+0x34>
 800d824:	f7f2 fd2c 	bl	8000280 <strcmp>
 800d828:	2800      	cmp	r0, #0
 800d82a:	d095      	beq.n	800d758 <_tzset_unlocked_r+0x34>
 800d82c:	e79a      	b.n	800d764 <_tzset_unlocked_r+0x40>
 800d82e:	4621      	mov	r1, r4
 800d830:	f7ff febf 	bl	800d5b2 <strcpy>
 800d834:	e7a3      	b.n	800d77e <_tzset_unlocked_r+0x5a>
 800d836:	2b2b      	cmp	r3, #43	; 0x2b
 800d838:	bf08      	it	eq
 800d83a:	3701      	addeq	r7, #1
 800d83c:	2401      	movs	r4, #1
 800d83e:	e7b3      	b.n	800d7a8 <_tzset_unlocked_r+0x84>
 800d840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d842:	f8c4 9004 	str.w	r9, [r4, #4]
 800d846:	18fc      	adds	r4, r7, r3
 800d848:	5cfb      	ldrb	r3, [r7, r3]
 800d84a:	2b2d      	cmp	r3, #45	; 0x2d
 800d84c:	f040 808b 	bne.w	800d966 <_tzset_unlocked_r+0x242>
 800d850:	3401      	adds	r4, #1
 800d852:	f04f 37ff 	mov.w	r7, #4294967295
 800d856:	2300      	movs	r3, #0
 800d858:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d85c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d860:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d864:	930a      	str	r3, [sp, #40]	; 0x28
 800d866:	e9cd a602 	strd	sl, r6, [sp, #8]
 800d86a:	e9cd b600 	strd	fp, r6, [sp]
 800d86e:	4633      	mov	r3, r6
 800d870:	aa07      	add	r2, sp, #28
 800d872:	4967      	ldr	r1, [pc, #412]	; (800da10 <_tzset_unlocked_r+0x2ec>)
 800d874:	4620      	mov	r0, r4
 800d876:	f001 ffa7 	bl	800f7c8 <siscanf>
 800d87a:	2800      	cmp	r0, #0
 800d87c:	dc78      	bgt.n	800d970 <_tzset_unlocked_r+0x24c>
 800d87e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d880:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800d884:	652b      	str	r3, [r5, #80]	; 0x50
 800d886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d888:	462f      	mov	r7, r5
 800d88a:	441c      	add	r4, r3
 800d88c:	f04f 0900 	mov.w	r9, #0
 800d890:	7823      	ldrb	r3, [r4, #0]
 800d892:	2b2c      	cmp	r3, #44	; 0x2c
 800d894:	bf08      	it	eq
 800d896:	3401      	addeq	r4, #1
 800d898:	f894 8000 	ldrb.w	r8, [r4]
 800d89c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800d8a0:	d179      	bne.n	800d996 <_tzset_unlocked_r+0x272>
 800d8a2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800d8a6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800d8aa:	ab09      	add	r3, sp, #36	; 0x24
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	9603      	str	r6, [sp, #12]
 800d8b0:	4633      	mov	r3, r6
 800d8b2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800d8b6:	4957      	ldr	r1, [pc, #348]	; (800da14 <_tzset_unlocked_r+0x2f0>)
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f001 ff85 	bl	800f7c8 <siscanf>
 800d8be:	2803      	cmp	r0, #3
 800d8c0:	f47f af4a 	bne.w	800d758 <_tzset_unlocked_r+0x34>
 800d8c4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800d8c8:	1e4b      	subs	r3, r1, #1
 800d8ca:	2b0b      	cmp	r3, #11
 800d8cc:	f63f af44 	bhi.w	800d758 <_tzset_unlocked_r+0x34>
 800d8d0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800d8d4:	1e53      	subs	r3, r2, #1
 800d8d6:	2b04      	cmp	r3, #4
 800d8d8:	f63f af3e 	bhi.w	800d758 <_tzset_unlocked_r+0x34>
 800d8dc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800d8e0:	2b06      	cmp	r3, #6
 800d8e2:	f63f af39 	bhi.w	800d758 <_tzset_unlocked_r+0x34>
 800d8e6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800d8ea:	f887 8008 	strb.w	r8, [r7, #8]
 800d8ee:	617b      	str	r3, [r7, #20]
 800d8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8f2:	eb04 0803 	add.w	r8, r4, r3
 800d8f6:	2302      	movs	r3, #2
 800d8f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d902:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d906:	930a      	str	r3, [sp, #40]	; 0x28
 800d908:	f898 3000 	ldrb.w	r3, [r8]
 800d90c:	2b2f      	cmp	r3, #47	; 0x2f
 800d90e:	d109      	bne.n	800d924 <_tzset_unlocked_r+0x200>
 800d910:	e9cd a602 	strd	sl, r6, [sp, #8]
 800d914:	e9cd b600 	strd	fp, r6, [sp]
 800d918:	4633      	mov	r3, r6
 800d91a:	aa07      	add	r2, sp, #28
 800d91c:	493e      	ldr	r1, [pc, #248]	; (800da18 <_tzset_unlocked_r+0x2f4>)
 800d91e:	4640      	mov	r0, r8
 800d920:	f001 ff52 	bl	800f7c8 <siscanf>
 800d924:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d928:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d92c:	213c      	movs	r1, #60	; 0x3c
 800d92e:	fb01 2203 	mla	r2, r1, r3, r2
 800d932:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d936:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d93a:	fb01 2303 	mla	r3, r1, r3, r2
 800d93e:	61bb      	str	r3, [r7, #24]
 800d940:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d942:	3728      	adds	r7, #40	; 0x28
 800d944:	4444      	add	r4, r8
 800d946:	f1b9 0f00 	cmp.w	r9, #0
 800d94a:	d021      	beq.n	800d990 <_tzset_unlocked_r+0x26c>
 800d94c:	6868      	ldr	r0, [r5, #4]
 800d94e:	f7ff fe39 	bl	800d5c4 <__tzcalc_limits>
 800d952:	4b29      	ldr	r3, [pc, #164]	; (800d9f8 <_tzset_unlocked_r+0x2d4>)
 800d954:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d956:	601a      	str	r2, [r3, #0]
 800d958:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d95a:	1a9b      	subs	r3, r3, r2
 800d95c:	4a28      	ldr	r2, [pc, #160]	; (800da00 <_tzset_unlocked_r+0x2dc>)
 800d95e:	bf18      	it	ne
 800d960:	2301      	movne	r3, #1
 800d962:	6013      	str	r3, [r2, #0]
 800d964:	e6f8      	b.n	800d758 <_tzset_unlocked_r+0x34>
 800d966:	2b2b      	cmp	r3, #43	; 0x2b
 800d968:	bf08      	it	eq
 800d96a:	3401      	addeq	r4, #1
 800d96c:	2701      	movs	r7, #1
 800d96e:	e772      	b.n	800d856 <_tzset_unlocked_r+0x132>
 800d970:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d974:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d978:	213c      	movs	r1, #60	; 0x3c
 800d97a:	fb01 2203 	mla	r2, r1, r3, r2
 800d97e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d982:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d986:	fb01 2303 	mla	r3, r1, r3, r2
 800d98a:	435f      	muls	r7, r3
 800d98c:	652f      	str	r7, [r5, #80]	; 0x50
 800d98e:	e77a      	b.n	800d886 <_tzset_unlocked_r+0x162>
 800d990:	f04f 0901 	mov.w	r9, #1
 800d994:	e77c      	b.n	800d890 <_tzset_unlocked_r+0x16c>
 800d996:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800d99a:	bf06      	itte	eq
 800d99c:	3401      	addeq	r4, #1
 800d99e:	4643      	moveq	r3, r8
 800d9a0:	2344      	movne	r3, #68	; 0x44
 800d9a2:	220a      	movs	r2, #10
 800d9a4:	a90b      	add	r1, sp, #44	; 0x2c
 800d9a6:	4620      	mov	r0, r4
 800d9a8:	9305      	str	r3, [sp, #20]
 800d9aa:	f002 f81b 	bl	800f9e4 <strtoul>
 800d9ae:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800d9b2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800d9b6:	45a0      	cmp	r8, r4
 800d9b8:	9b05      	ldr	r3, [sp, #20]
 800d9ba:	d114      	bne.n	800d9e6 <_tzset_unlocked_r+0x2c2>
 800d9bc:	234d      	movs	r3, #77	; 0x4d
 800d9be:	f1b9 0f00 	cmp.w	r9, #0
 800d9c2:	d107      	bne.n	800d9d4 <_tzset_unlocked_r+0x2b0>
 800d9c4:	722b      	strb	r3, [r5, #8]
 800d9c6:	2103      	movs	r1, #3
 800d9c8:	2302      	movs	r3, #2
 800d9ca:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800d9ce:	f8c5 9014 	str.w	r9, [r5, #20]
 800d9d2:	e790      	b.n	800d8f6 <_tzset_unlocked_r+0x1d2>
 800d9d4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800d9d8:	220b      	movs	r2, #11
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	63eb      	str	r3, [r5, #60]	; 0x3c
 800d9e4:	e787      	b.n	800d8f6 <_tzset_unlocked_r+0x1d2>
 800d9e6:	b280      	uxth	r0, r0
 800d9e8:	723b      	strb	r3, [r7, #8]
 800d9ea:	6178      	str	r0, [r7, #20]
 800d9ec:	e783      	b.n	800d8f6 <_tzset_unlocked_r+0x1d2>
 800d9ee:	bf00      	nop
 800d9f0:	08010c02 	.word	0x08010c02
 800d9f4:	200004d0 	.word	0x200004d0
 800d9f8:	200004d8 	.word	0x200004d8
 800d9fc:	08010c05 	.word	0x08010c05
 800da00:	200004d4 	.word	0x200004d4
 800da04:	20000074 	.word	0x20000074
 800da08:	200004c3 	.word	0x200004c3
 800da0c:	08010c09 	.word	0x08010c09
 800da10:	08010c2c 	.word	0x08010c2c
 800da14:	08010c18 	.word	0x08010c18
 800da18:	08010c2b 	.word	0x08010c2b
 800da1c:	200004b8 	.word	0x200004b8

0800da20 <__swbuf_r>:
 800da20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da22:	460e      	mov	r6, r1
 800da24:	4614      	mov	r4, r2
 800da26:	4605      	mov	r5, r0
 800da28:	b118      	cbz	r0, 800da32 <__swbuf_r+0x12>
 800da2a:	6983      	ldr	r3, [r0, #24]
 800da2c:	b90b      	cbnz	r3, 800da32 <__swbuf_r+0x12>
 800da2e:	f000 ffff 	bl	800ea30 <__sinit>
 800da32:	4b21      	ldr	r3, [pc, #132]	; (800dab8 <__swbuf_r+0x98>)
 800da34:	429c      	cmp	r4, r3
 800da36:	d12a      	bne.n	800da8e <__swbuf_r+0x6e>
 800da38:	686c      	ldr	r4, [r5, #4]
 800da3a:	69a3      	ldr	r3, [r4, #24]
 800da3c:	60a3      	str	r3, [r4, #8]
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	071a      	lsls	r2, r3, #28
 800da42:	d52e      	bpl.n	800daa2 <__swbuf_r+0x82>
 800da44:	6923      	ldr	r3, [r4, #16]
 800da46:	b363      	cbz	r3, 800daa2 <__swbuf_r+0x82>
 800da48:	6923      	ldr	r3, [r4, #16]
 800da4a:	6820      	ldr	r0, [r4, #0]
 800da4c:	1ac0      	subs	r0, r0, r3
 800da4e:	6963      	ldr	r3, [r4, #20]
 800da50:	b2f6      	uxtb	r6, r6
 800da52:	4283      	cmp	r3, r0
 800da54:	4637      	mov	r7, r6
 800da56:	dc04      	bgt.n	800da62 <__swbuf_r+0x42>
 800da58:	4621      	mov	r1, r4
 800da5a:	4628      	mov	r0, r5
 800da5c:	f000 ff7e 	bl	800e95c <_fflush_r>
 800da60:	bb28      	cbnz	r0, 800daae <__swbuf_r+0x8e>
 800da62:	68a3      	ldr	r3, [r4, #8]
 800da64:	3b01      	subs	r3, #1
 800da66:	60a3      	str	r3, [r4, #8]
 800da68:	6823      	ldr	r3, [r4, #0]
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	6022      	str	r2, [r4, #0]
 800da6e:	701e      	strb	r6, [r3, #0]
 800da70:	6963      	ldr	r3, [r4, #20]
 800da72:	3001      	adds	r0, #1
 800da74:	4283      	cmp	r3, r0
 800da76:	d004      	beq.n	800da82 <__swbuf_r+0x62>
 800da78:	89a3      	ldrh	r3, [r4, #12]
 800da7a:	07db      	lsls	r3, r3, #31
 800da7c:	d519      	bpl.n	800dab2 <__swbuf_r+0x92>
 800da7e:	2e0a      	cmp	r6, #10
 800da80:	d117      	bne.n	800dab2 <__swbuf_r+0x92>
 800da82:	4621      	mov	r1, r4
 800da84:	4628      	mov	r0, r5
 800da86:	f000 ff69 	bl	800e95c <_fflush_r>
 800da8a:	b190      	cbz	r0, 800dab2 <__swbuf_r+0x92>
 800da8c:	e00f      	b.n	800daae <__swbuf_r+0x8e>
 800da8e:	4b0b      	ldr	r3, [pc, #44]	; (800dabc <__swbuf_r+0x9c>)
 800da90:	429c      	cmp	r4, r3
 800da92:	d101      	bne.n	800da98 <__swbuf_r+0x78>
 800da94:	68ac      	ldr	r4, [r5, #8]
 800da96:	e7d0      	b.n	800da3a <__swbuf_r+0x1a>
 800da98:	4b09      	ldr	r3, [pc, #36]	; (800dac0 <__swbuf_r+0xa0>)
 800da9a:	429c      	cmp	r4, r3
 800da9c:	bf08      	it	eq
 800da9e:	68ec      	ldreq	r4, [r5, #12]
 800daa0:	e7cb      	b.n	800da3a <__swbuf_r+0x1a>
 800daa2:	4621      	mov	r1, r4
 800daa4:	4628      	mov	r0, r5
 800daa6:	f000 f80d 	bl	800dac4 <__swsetup_r>
 800daaa:	2800      	cmp	r0, #0
 800daac:	d0cc      	beq.n	800da48 <__swbuf_r+0x28>
 800daae:	f04f 37ff 	mov.w	r7, #4294967295
 800dab2:	4638      	mov	r0, r7
 800dab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dab6:	bf00      	nop
 800dab8:	08010c6c 	.word	0x08010c6c
 800dabc:	08010c8c 	.word	0x08010c8c
 800dac0:	08010c4c 	.word	0x08010c4c

0800dac4 <__swsetup_r>:
 800dac4:	4b32      	ldr	r3, [pc, #200]	; (800db90 <__swsetup_r+0xcc>)
 800dac6:	b570      	push	{r4, r5, r6, lr}
 800dac8:	681d      	ldr	r5, [r3, #0]
 800daca:	4606      	mov	r6, r0
 800dacc:	460c      	mov	r4, r1
 800dace:	b125      	cbz	r5, 800dada <__swsetup_r+0x16>
 800dad0:	69ab      	ldr	r3, [r5, #24]
 800dad2:	b913      	cbnz	r3, 800dada <__swsetup_r+0x16>
 800dad4:	4628      	mov	r0, r5
 800dad6:	f000 ffab 	bl	800ea30 <__sinit>
 800dada:	4b2e      	ldr	r3, [pc, #184]	; (800db94 <__swsetup_r+0xd0>)
 800dadc:	429c      	cmp	r4, r3
 800dade:	d10f      	bne.n	800db00 <__swsetup_r+0x3c>
 800dae0:	686c      	ldr	r4, [r5, #4]
 800dae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dae6:	b29a      	uxth	r2, r3
 800dae8:	0715      	lsls	r5, r2, #28
 800daea:	d42c      	bmi.n	800db46 <__swsetup_r+0x82>
 800daec:	06d0      	lsls	r0, r2, #27
 800daee:	d411      	bmi.n	800db14 <__swsetup_r+0x50>
 800daf0:	2209      	movs	r2, #9
 800daf2:	6032      	str	r2, [r6, #0]
 800daf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daf8:	81a3      	strh	r3, [r4, #12]
 800dafa:	f04f 30ff 	mov.w	r0, #4294967295
 800dafe:	e03e      	b.n	800db7e <__swsetup_r+0xba>
 800db00:	4b25      	ldr	r3, [pc, #148]	; (800db98 <__swsetup_r+0xd4>)
 800db02:	429c      	cmp	r4, r3
 800db04:	d101      	bne.n	800db0a <__swsetup_r+0x46>
 800db06:	68ac      	ldr	r4, [r5, #8]
 800db08:	e7eb      	b.n	800dae2 <__swsetup_r+0x1e>
 800db0a:	4b24      	ldr	r3, [pc, #144]	; (800db9c <__swsetup_r+0xd8>)
 800db0c:	429c      	cmp	r4, r3
 800db0e:	bf08      	it	eq
 800db10:	68ec      	ldreq	r4, [r5, #12]
 800db12:	e7e6      	b.n	800dae2 <__swsetup_r+0x1e>
 800db14:	0751      	lsls	r1, r2, #29
 800db16:	d512      	bpl.n	800db3e <__swsetup_r+0x7a>
 800db18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db1a:	b141      	cbz	r1, 800db2e <__swsetup_r+0x6a>
 800db1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db20:	4299      	cmp	r1, r3
 800db22:	d002      	beq.n	800db2a <__swsetup_r+0x66>
 800db24:	4630      	mov	r0, r6
 800db26:	f7fe ff85 	bl	800ca34 <_free_r>
 800db2a:	2300      	movs	r3, #0
 800db2c:	6363      	str	r3, [r4, #52]	; 0x34
 800db2e:	89a3      	ldrh	r3, [r4, #12]
 800db30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db34:	81a3      	strh	r3, [r4, #12]
 800db36:	2300      	movs	r3, #0
 800db38:	6063      	str	r3, [r4, #4]
 800db3a:	6923      	ldr	r3, [r4, #16]
 800db3c:	6023      	str	r3, [r4, #0]
 800db3e:	89a3      	ldrh	r3, [r4, #12]
 800db40:	f043 0308 	orr.w	r3, r3, #8
 800db44:	81a3      	strh	r3, [r4, #12]
 800db46:	6923      	ldr	r3, [r4, #16]
 800db48:	b94b      	cbnz	r3, 800db5e <__swsetup_r+0x9a>
 800db4a:	89a3      	ldrh	r3, [r4, #12]
 800db4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db54:	d003      	beq.n	800db5e <__swsetup_r+0x9a>
 800db56:	4621      	mov	r1, r4
 800db58:	4630      	mov	r0, r6
 800db5a:	f001 f86d 	bl	800ec38 <__smakebuf_r>
 800db5e:	89a2      	ldrh	r2, [r4, #12]
 800db60:	f012 0301 	ands.w	r3, r2, #1
 800db64:	d00c      	beq.n	800db80 <__swsetup_r+0xbc>
 800db66:	2300      	movs	r3, #0
 800db68:	60a3      	str	r3, [r4, #8]
 800db6a:	6963      	ldr	r3, [r4, #20]
 800db6c:	425b      	negs	r3, r3
 800db6e:	61a3      	str	r3, [r4, #24]
 800db70:	6923      	ldr	r3, [r4, #16]
 800db72:	b953      	cbnz	r3, 800db8a <__swsetup_r+0xc6>
 800db74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800db7c:	d1ba      	bne.n	800daf4 <__swsetup_r+0x30>
 800db7e:	bd70      	pop	{r4, r5, r6, pc}
 800db80:	0792      	lsls	r2, r2, #30
 800db82:	bf58      	it	pl
 800db84:	6963      	ldrpl	r3, [r4, #20]
 800db86:	60a3      	str	r3, [r4, #8]
 800db88:	e7f2      	b.n	800db70 <__swsetup_r+0xac>
 800db8a:	2000      	movs	r0, #0
 800db8c:	e7f7      	b.n	800db7e <__swsetup_r+0xba>
 800db8e:	bf00      	nop
 800db90:	20000010 	.word	0x20000010
 800db94:	08010c6c 	.word	0x08010c6c
 800db98:	08010c8c 	.word	0x08010c8c
 800db9c:	08010c4c 	.word	0x08010c4c

0800dba0 <div>:
 800dba0:	2900      	cmp	r1, #0
 800dba2:	b510      	push	{r4, lr}
 800dba4:	fb91 f4f2 	sdiv	r4, r1, r2
 800dba8:	fb02 1314 	mls	r3, r2, r4, r1
 800dbac:	db06      	blt.n	800dbbc <div+0x1c>
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	da01      	bge.n	800dbb6 <div+0x16>
 800dbb2:	3401      	adds	r4, #1
 800dbb4:	1a9b      	subs	r3, r3, r2
 800dbb6:	e9c0 4300 	strd	r4, r3, [r0]
 800dbba:	bd10      	pop	{r4, pc}
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	bfc4      	itt	gt
 800dbc0:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800dbc4:	189b      	addgt	r3, r3, r2
 800dbc6:	e7f6      	b.n	800dbb6 <div+0x16>

0800dbc8 <quorem>:
 800dbc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbcc:	6903      	ldr	r3, [r0, #16]
 800dbce:	690c      	ldr	r4, [r1, #16]
 800dbd0:	42a3      	cmp	r3, r4
 800dbd2:	4680      	mov	r8, r0
 800dbd4:	f2c0 8082 	blt.w	800dcdc <quorem+0x114>
 800dbd8:	3c01      	subs	r4, #1
 800dbda:	f101 0714 	add.w	r7, r1, #20
 800dbde:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800dbe2:	f100 0614 	add.w	r6, r0, #20
 800dbe6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800dbea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800dbee:	eb06 030c 	add.w	r3, r6, ip
 800dbf2:	3501      	adds	r5, #1
 800dbf4:	eb07 090c 	add.w	r9, r7, ip
 800dbf8:	9301      	str	r3, [sp, #4]
 800dbfa:	fbb0 f5f5 	udiv	r5, r0, r5
 800dbfe:	b395      	cbz	r5, 800dc66 <quorem+0x9e>
 800dc00:	f04f 0a00 	mov.w	sl, #0
 800dc04:	4638      	mov	r0, r7
 800dc06:	46b6      	mov	lr, r6
 800dc08:	46d3      	mov	fp, sl
 800dc0a:	f850 2b04 	ldr.w	r2, [r0], #4
 800dc0e:	b293      	uxth	r3, r2
 800dc10:	fb05 a303 	mla	r3, r5, r3, sl
 800dc14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	ebab 0303 	sub.w	r3, fp, r3
 800dc1e:	0c12      	lsrs	r2, r2, #16
 800dc20:	f8de b000 	ldr.w	fp, [lr]
 800dc24:	fb05 a202 	mla	r2, r5, r2, sl
 800dc28:	fa13 f38b 	uxtah	r3, r3, fp
 800dc2c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800dc30:	fa1f fb82 	uxth.w	fp, r2
 800dc34:	f8de 2000 	ldr.w	r2, [lr]
 800dc38:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800dc3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc46:	4581      	cmp	r9, r0
 800dc48:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800dc4c:	f84e 3b04 	str.w	r3, [lr], #4
 800dc50:	d2db      	bcs.n	800dc0a <quorem+0x42>
 800dc52:	f856 300c 	ldr.w	r3, [r6, ip]
 800dc56:	b933      	cbnz	r3, 800dc66 <quorem+0x9e>
 800dc58:	9b01      	ldr	r3, [sp, #4]
 800dc5a:	3b04      	subs	r3, #4
 800dc5c:	429e      	cmp	r6, r3
 800dc5e:	461a      	mov	r2, r3
 800dc60:	d330      	bcc.n	800dcc4 <quorem+0xfc>
 800dc62:	f8c8 4010 	str.w	r4, [r8, #16]
 800dc66:	4640      	mov	r0, r8
 800dc68:	f001 fa48 	bl	800f0fc <__mcmp>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	db25      	blt.n	800dcbc <quorem+0xf4>
 800dc70:	3501      	adds	r5, #1
 800dc72:	4630      	mov	r0, r6
 800dc74:	f04f 0c00 	mov.w	ip, #0
 800dc78:	f857 2b04 	ldr.w	r2, [r7], #4
 800dc7c:	f8d0 e000 	ldr.w	lr, [r0]
 800dc80:	b293      	uxth	r3, r2
 800dc82:	ebac 0303 	sub.w	r3, ip, r3
 800dc86:	0c12      	lsrs	r2, r2, #16
 800dc88:	fa13 f38e 	uxtah	r3, r3, lr
 800dc8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dc90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc9a:	45b9      	cmp	r9, r7
 800dc9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dca0:	f840 3b04 	str.w	r3, [r0], #4
 800dca4:	d2e8      	bcs.n	800dc78 <quorem+0xb0>
 800dca6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dcaa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800dcae:	b92a      	cbnz	r2, 800dcbc <quorem+0xf4>
 800dcb0:	3b04      	subs	r3, #4
 800dcb2:	429e      	cmp	r6, r3
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	d30b      	bcc.n	800dcd0 <quorem+0x108>
 800dcb8:	f8c8 4010 	str.w	r4, [r8, #16]
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	b003      	add	sp, #12
 800dcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc4:	6812      	ldr	r2, [r2, #0]
 800dcc6:	3b04      	subs	r3, #4
 800dcc8:	2a00      	cmp	r2, #0
 800dcca:	d1ca      	bne.n	800dc62 <quorem+0x9a>
 800dccc:	3c01      	subs	r4, #1
 800dcce:	e7c5      	b.n	800dc5c <quorem+0x94>
 800dcd0:	6812      	ldr	r2, [r2, #0]
 800dcd2:	3b04      	subs	r3, #4
 800dcd4:	2a00      	cmp	r2, #0
 800dcd6:	d1ef      	bne.n	800dcb8 <quorem+0xf0>
 800dcd8:	3c01      	subs	r4, #1
 800dcda:	e7ea      	b.n	800dcb2 <quorem+0xea>
 800dcdc:	2000      	movs	r0, #0
 800dcde:	e7ee      	b.n	800dcbe <quorem+0xf6>

0800dce0 <_dtoa_r>:
 800dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	ec57 6b10 	vmov	r6, r7, d0
 800dce8:	b097      	sub	sp, #92	; 0x5c
 800dcea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dcec:	9106      	str	r1, [sp, #24]
 800dcee:	4604      	mov	r4, r0
 800dcf0:	920b      	str	r2, [sp, #44]	; 0x2c
 800dcf2:	9312      	str	r3, [sp, #72]	; 0x48
 800dcf4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dcf8:	e9cd 6700 	strd	r6, r7, [sp]
 800dcfc:	b93d      	cbnz	r5, 800dd0e <_dtoa_r+0x2e>
 800dcfe:	2010      	movs	r0, #16
 800dd00:	f7fe fbec 	bl	800c4dc <malloc>
 800dd04:	6260      	str	r0, [r4, #36]	; 0x24
 800dd06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd0a:	6005      	str	r5, [r0, #0]
 800dd0c:	60c5      	str	r5, [r0, #12]
 800dd0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd10:	6819      	ldr	r1, [r3, #0]
 800dd12:	b151      	cbz	r1, 800dd2a <_dtoa_r+0x4a>
 800dd14:	685a      	ldr	r2, [r3, #4]
 800dd16:	604a      	str	r2, [r1, #4]
 800dd18:	2301      	movs	r3, #1
 800dd1a:	4093      	lsls	r3, r2
 800dd1c:	608b      	str	r3, [r1, #8]
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f001 f80b 	bl	800ed3a <_Bfree>
 800dd24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd26:	2200      	movs	r2, #0
 800dd28:	601a      	str	r2, [r3, #0]
 800dd2a:	1e3b      	subs	r3, r7, #0
 800dd2c:	bfbb      	ittet	lt
 800dd2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dd32:	9301      	strlt	r3, [sp, #4]
 800dd34:	2300      	movge	r3, #0
 800dd36:	2201      	movlt	r2, #1
 800dd38:	bfac      	ite	ge
 800dd3a:	f8c8 3000 	strge.w	r3, [r8]
 800dd3e:	f8c8 2000 	strlt.w	r2, [r8]
 800dd42:	4baf      	ldr	r3, [pc, #700]	; (800e000 <_dtoa_r+0x320>)
 800dd44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dd48:	ea33 0308 	bics.w	r3, r3, r8
 800dd4c:	d114      	bne.n	800dd78 <_dtoa_r+0x98>
 800dd4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd50:	f242 730f 	movw	r3, #9999	; 0x270f
 800dd54:	6013      	str	r3, [r2, #0]
 800dd56:	9b00      	ldr	r3, [sp, #0]
 800dd58:	b923      	cbnz	r3, 800dd64 <_dtoa_r+0x84>
 800dd5a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	f000 8542 	beq.w	800e7e8 <_dtoa_r+0xb08>
 800dd64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd66:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e014 <_dtoa_r+0x334>
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f000 8544 	beq.w	800e7f8 <_dtoa_r+0xb18>
 800dd70:	f10b 0303 	add.w	r3, fp, #3
 800dd74:	f000 bd3e 	b.w	800e7f4 <_dtoa_r+0xb14>
 800dd78:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	2300      	movs	r3, #0
 800dd80:	4630      	mov	r0, r6
 800dd82:	4639      	mov	r1, r7
 800dd84:	f7f2 feaa 	bl	8000adc <__aeabi_dcmpeq>
 800dd88:	4681      	mov	r9, r0
 800dd8a:	b168      	cbz	r0, 800dda8 <_dtoa_r+0xc8>
 800dd8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd8e:	2301      	movs	r3, #1
 800dd90:	6013      	str	r3, [r2, #0]
 800dd92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	f000 8524 	beq.w	800e7e2 <_dtoa_r+0xb02>
 800dd9a:	4b9a      	ldr	r3, [pc, #616]	; (800e004 <_dtoa_r+0x324>)
 800dd9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd9e:	f103 3bff 	add.w	fp, r3, #4294967295
 800dda2:	6013      	str	r3, [r2, #0]
 800dda4:	f000 bd28 	b.w	800e7f8 <_dtoa_r+0xb18>
 800dda8:	aa14      	add	r2, sp, #80	; 0x50
 800ddaa:	a915      	add	r1, sp, #84	; 0x54
 800ddac:	ec47 6b10 	vmov	d0, r6, r7
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f001 fa1a 	bl	800f1ea <__d2b>
 800ddb6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ddba:	9004      	str	r0, [sp, #16]
 800ddbc:	2d00      	cmp	r5, #0
 800ddbe:	d07c      	beq.n	800deba <_dtoa_r+0x1da>
 800ddc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ddc4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ddc8:	46b2      	mov	sl, r6
 800ddca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ddce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ddd2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	4b8b      	ldr	r3, [pc, #556]	; (800e008 <_dtoa_r+0x328>)
 800ddda:	4650      	mov	r0, sl
 800dddc:	4659      	mov	r1, fp
 800ddde:	f7f2 fa5d 	bl	800029c <__aeabi_dsub>
 800dde2:	a381      	add	r3, pc, #516	; (adr r3, 800dfe8 <_dtoa_r+0x308>)
 800dde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde8:	f7f2 fc10 	bl	800060c <__aeabi_dmul>
 800ddec:	a380      	add	r3, pc, #512	; (adr r3, 800dff0 <_dtoa_r+0x310>)
 800ddee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf2:	f7f2 fa55 	bl	80002a0 <__adddf3>
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	460f      	mov	r7, r1
 800ddfc:	f7f2 fb9c 	bl	8000538 <__aeabi_i2d>
 800de00:	a37d      	add	r3, pc, #500	; (adr r3, 800dff8 <_dtoa_r+0x318>)
 800de02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de06:	f7f2 fc01 	bl	800060c <__aeabi_dmul>
 800de0a:	4602      	mov	r2, r0
 800de0c:	460b      	mov	r3, r1
 800de0e:	4630      	mov	r0, r6
 800de10:	4639      	mov	r1, r7
 800de12:	f7f2 fa45 	bl	80002a0 <__adddf3>
 800de16:	4606      	mov	r6, r0
 800de18:	460f      	mov	r7, r1
 800de1a:	f7f2 fea7 	bl	8000b6c <__aeabi_d2iz>
 800de1e:	2200      	movs	r2, #0
 800de20:	4682      	mov	sl, r0
 800de22:	2300      	movs	r3, #0
 800de24:	4630      	mov	r0, r6
 800de26:	4639      	mov	r1, r7
 800de28:	f7f2 fe62 	bl	8000af0 <__aeabi_dcmplt>
 800de2c:	b148      	cbz	r0, 800de42 <_dtoa_r+0x162>
 800de2e:	4650      	mov	r0, sl
 800de30:	f7f2 fb82 	bl	8000538 <__aeabi_i2d>
 800de34:	4632      	mov	r2, r6
 800de36:	463b      	mov	r3, r7
 800de38:	f7f2 fe50 	bl	8000adc <__aeabi_dcmpeq>
 800de3c:	b908      	cbnz	r0, 800de42 <_dtoa_r+0x162>
 800de3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de42:	f1ba 0f16 	cmp.w	sl, #22
 800de46:	d859      	bhi.n	800defc <_dtoa_r+0x21c>
 800de48:	4970      	ldr	r1, [pc, #448]	; (800e00c <_dtoa_r+0x32c>)
 800de4a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800de4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de56:	f7f2 fe69 	bl	8000b2c <__aeabi_dcmpgt>
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d050      	beq.n	800df00 <_dtoa_r+0x220>
 800de5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de62:	2300      	movs	r3, #0
 800de64:	930f      	str	r3, [sp, #60]	; 0x3c
 800de66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de68:	1b5d      	subs	r5, r3, r5
 800de6a:	f1b5 0801 	subs.w	r8, r5, #1
 800de6e:	bf49      	itett	mi
 800de70:	f1c5 0301 	rsbmi	r3, r5, #1
 800de74:	2300      	movpl	r3, #0
 800de76:	9305      	strmi	r3, [sp, #20]
 800de78:	f04f 0800 	movmi.w	r8, #0
 800de7c:	bf58      	it	pl
 800de7e:	9305      	strpl	r3, [sp, #20]
 800de80:	f1ba 0f00 	cmp.w	sl, #0
 800de84:	db3e      	blt.n	800df04 <_dtoa_r+0x224>
 800de86:	2300      	movs	r3, #0
 800de88:	44d0      	add	r8, sl
 800de8a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800de8e:	9307      	str	r3, [sp, #28]
 800de90:	9b06      	ldr	r3, [sp, #24]
 800de92:	2b09      	cmp	r3, #9
 800de94:	f200 8090 	bhi.w	800dfb8 <_dtoa_r+0x2d8>
 800de98:	2b05      	cmp	r3, #5
 800de9a:	bfc4      	itt	gt
 800de9c:	3b04      	subgt	r3, #4
 800de9e:	9306      	strgt	r3, [sp, #24]
 800dea0:	9b06      	ldr	r3, [sp, #24]
 800dea2:	f1a3 0302 	sub.w	r3, r3, #2
 800dea6:	bfcc      	ite	gt
 800dea8:	2500      	movgt	r5, #0
 800deaa:	2501      	movle	r5, #1
 800deac:	2b03      	cmp	r3, #3
 800deae:	f200 808f 	bhi.w	800dfd0 <_dtoa_r+0x2f0>
 800deb2:	e8df f003 	tbb	[pc, r3]
 800deb6:	7f7d      	.short	0x7f7d
 800deb8:	7131      	.short	0x7131
 800deba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800debe:	441d      	add	r5, r3
 800dec0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800dec4:	2820      	cmp	r0, #32
 800dec6:	dd13      	ble.n	800def0 <_dtoa_r+0x210>
 800dec8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800decc:	9b00      	ldr	r3, [sp, #0]
 800dece:	fa08 f800 	lsl.w	r8, r8, r0
 800ded2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ded6:	fa23 f000 	lsr.w	r0, r3, r0
 800deda:	ea48 0000 	orr.w	r0, r8, r0
 800dede:	f7f2 fb1b 	bl	8000518 <__aeabi_ui2d>
 800dee2:	2301      	movs	r3, #1
 800dee4:	4682      	mov	sl, r0
 800dee6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800deea:	3d01      	subs	r5, #1
 800deec:	9313      	str	r3, [sp, #76]	; 0x4c
 800deee:	e772      	b.n	800ddd6 <_dtoa_r+0xf6>
 800def0:	9b00      	ldr	r3, [sp, #0]
 800def2:	f1c0 0020 	rsb	r0, r0, #32
 800def6:	fa03 f000 	lsl.w	r0, r3, r0
 800defa:	e7f0      	b.n	800dede <_dtoa_r+0x1fe>
 800defc:	2301      	movs	r3, #1
 800defe:	e7b1      	b.n	800de64 <_dtoa_r+0x184>
 800df00:	900f      	str	r0, [sp, #60]	; 0x3c
 800df02:	e7b0      	b.n	800de66 <_dtoa_r+0x186>
 800df04:	9b05      	ldr	r3, [sp, #20]
 800df06:	eba3 030a 	sub.w	r3, r3, sl
 800df0a:	9305      	str	r3, [sp, #20]
 800df0c:	f1ca 0300 	rsb	r3, sl, #0
 800df10:	9307      	str	r3, [sp, #28]
 800df12:	2300      	movs	r3, #0
 800df14:	930e      	str	r3, [sp, #56]	; 0x38
 800df16:	e7bb      	b.n	800de90 <_dtoa_r+0x1b0>
 800df18:	2301      	movs	r3, #1
 800df1a:	930a      	str	r3, [sp, #40]	; 0x28
 800df1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df1e:	2b00      	cmp	r3, #0
 800df20:	dd59      	ble.n	800dfd6 <_dtoa_r+0x2f6>
 800df22:	9302      	str	r3, [sp, #8]
 800df24:	4699      	mov	r9, r3
 800df26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800df28:	2200      	movs	r2, #0
 800df2a:	6072      	str	r2, [r6, #4]
 800df2c:	2204      	movs	r2, #4
 800df2e:	f102 0014 	add.w	r0, r2, #20
 800df32:	4298      	cmp	r0, r3
 800df34:	6871      	ldr	r1, [r6, #4]
 800df36:	d953      	bls.n	800dfe0 <_dtoa_r+0x300>
 800df38:	4620      	mov	r0, r4
 800df3a:	f000 feca 	bl	800ecd2 <_Balloc>
 800df3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df40:	6030      	str	r0, [r6, #0]
 800df42:	f1b9 0f0e 	cmp.w	r9, #14
 800df46:	f8d3 b000 	ldr.w	fp, [r3]
 800df4a:	f200 80e6 	bhi.w	800e11a <_dtoa_r+0x43a>
 800df4e:	2d00      	cmp	r5, #0
 800df50:	f000 80e3 	beq.w	800e11a <_dtoa_r+0x43a>
 800df54:	ed9d 7b00 	vldr	d7, [sp]
 800df58:	f1ba 0f00 	cmp.w	sl, #0
 800df5c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800df60:	dd74      	ble.n	800e04c <_dtoa_r+0x36c>
 800df62:	4a2a      	ldr	r2, [pc, #168]	; (800e00c <_dtoa_r+0x32c>)
 800df64:	f00a 030f 	and.w	r3, sl, #15
 800df68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800df6c:	ed93 7b00 	vldr	d7, [r3]
 800df70:	ea4f 162a 	mov.w	r6, sl, asr #4
 800df74:	06f0      	lsls	r0, r6, #27
 800df76:	ed8d 7b08 	vstr	d7, [sp, #32]
 800df7a:	d565      	bpl.n	800e048 <_dtoa_r+0x368>
 800df7c:	4b24      	ldr	r3, [pc, #144]	; (800e010 <_dtoa_r+0x330>)
 800df7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800df82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df86:	f7f2 fc6b 	bl	8000860 <__aeabi_ddiv>
 800df8a:	e9cd 0100 	strd	r0, r1, [sp]
 800df8e:	f006 060f 	and.w	r6, r6, #15
 800df92:	2503      	movs	r5, #3
 800df94:	4f1e      	ldr	r7, [pc, #120]	; (800e010 <_dtoa_r+0x330>)
 800df96:	e04c      	b.n	800e032 <_dtoa_r+0x352>
 800df98:	2301      	movs	r3, #1
 800df9a:	930a      	str	r3, [sp, #40]	; 0x28
 800df9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df9e:	4453      	add	r3, sl
 800dfa0:	f103 0901 	add.w	r9, r3, #1
 800dfa4:	9302      	str	r3, [sp, #8]
 800dfa6:	464b      	mov	r3, r9
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	bfb8      	it	lt
 800dfac:	2301      	movlt	r3, #1
 800dfae:	e7ba      	b.n	800df26 <_dtoa_r+0x246>
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	e7b2      	b.n	800df1a <_dtoa_r+0x23a>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	e7f0      	b.n	800df9a <_dtoa_r+0x2ba>
 800dfb8:	2501      	movs	r5, #1
 800dfba:	2300      	movs	r3, #0
 800dfbc:	9306      	str	r3, [sp, #24]
 800dfbe:	950a      	str	r5, [sp, #40]	; 0x28
 800dfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfc4:	9302      	str	r3, [sp, #8]
 800dfc6:	4699      	mov	r9, r3
 800dfc8:	2200      	movs	r2, #0
 800dfca:	2312      	movs	r3, #18
 800dfcc:	920b      	str	r2, [sp, #44]	; 0x2c
 800dfce:	e7aa      	b.n	800df26 <_dtoa_r+0x246>
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	930a      	str	r3, [sp, #40]	; 0x28
 800dfd4:	e7f4      	b.n	800dfc0 <_dtoa_r+0x2e0>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	9302      	str	r3, [sp, #8]
 800dfda:	4699      	mov	r9, r3
 800dfdc:	461a      	mov	r2, r3
 800dfde:	e7f5      	b.n	800dfcc <_dtoa_r+0x2ec>
 800dfe0:	3101      	adds	r1, #1
 800dfe2:	6071      	str	r1, [r6, #4]
 800dfe4:	0052      	lsls	r2, r2, #1
 800dfe6:	e7a2      	b.n	800df2e <_dtoa_r+0x24e>
 800dfe8:	636f4361 	.word	0x636f4361
 800dfec:	3fd287a7 	.word	0x3fd287a7
 800dff0:	8b60c8b3 	.word	0x8b60c8b3
 800dff4:	3fc68a28 	.word	0x3fc68a28
 800dff8:	509f79fb 	.word	0x509f79fb
 800dffc:	3fd34413 	.word	0x3fd34413
 800e000:	7ff00000 	.word	0x7ff00000
 800e004:	08010e3e 	.word	0x08010e3e
 800e008:	3ff80000 	.word	0x3ff80000
 800e00c:	08010d38 	.word	0x08010d38
 800e010:	08010d10 	.word	0x08010d10
 800e014:	08010c47 	.word	0x08010c47
 800e018:	07f1      	lsls	r1, r6, #31
 800e01a:	d508      	bpl.n	800e02e <_dtoa_r+0x34e>
 800e01c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e020:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e024:	f7f2 faf2 	bl	800060c <__aeabi_dmul>
 800e028:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e02c:	3501      	adds	r5, #1
 800e02e:	1076      	asrs	r6, r6, #1
 800e030:	3708      	adds	r7, #8
 800e032:	2e00      	cmp	r6, #0
 800e034:	d1f0      	bne.n	800e018 <_dtoa_r+0x338>
 800e036:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e03a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e03e:	f7f2 fc0f 	bl	8000860 <__aeabi_ddiv>
 800e042:	e9cd 0100 	strd	r0, r1, [sp]
 800e046:	e01a      	b.n	800e07e <_dtoa_r+0x39e>
 800e048:	2502      	movs	r5, #2
 800e04a:	e7a3      	b.n	800df94 <_dtoa_r+0x2b4>
 800e04c:	f000 80a0 	beq.w	800e190 <_dtoa_r+0x4b0>
 800e050:	f1ca 0600 	rsb	r6, sl, #0
 800e054:	4b9f      	ldr	r3, [pc, #636]	; (800e2d4 <_dtoa_r+0x5f4>)
 800e056:	4fa0      	ldr	r7, [pc, #640]	; (800e2d8 <_dtoa_r+0x5f8>)
 800e058:	f006 020f 	and.w	r2, r6, #15
 800e05c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e064:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e068:	f7f2 fad0 	bl	800060c <__aeabi_dmul>
 800e06c:	e9cd 0100 	strd	r0, r1, [sp]
 800e070:	1136      	asrs	r6, r6, #4
 800e072:	2300      	movs	r3, #0
 800e074:	2502      	movs	r5, #2
 800e076:	2e00      	cmp	r6, #0
 800e078:	d17f      	bne.n	800e17a <_dtoa_r+0x49a>
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1e1      	bne.n	800e042 <_dtoa_r+0x362>
 800e07e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e080:	2b00      	cmp	r3, #0
 800e082:	f000 8087 	beq.w	800e194 <_dtoa_r+0x4b4>
 800e086:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e08a:	2200      	movs	r2, #0
 800e08c:	4b93      	ldr	r3, [pc, #588]	; (800e2dc <_dtoa_r+0x5fc>)
 800e08e:	4630      	mov	r0, r6
 800e090:	4639      	mov	r1, r7
 800e092:	f7f2 fd2d 	bl	8000af0 <__aeabi_dcmplt>
 800e096:	2800      	cmp	r0, #0
 800e098:	d07c      	beq.n	800e194 <_dtoa_r+0x4b4>
 800e09a:	f1b9 0f00 	cmp.w	r9, #0
 800e09e:	d079      	beq.n	800e194 <_dtoa_r+0x4b4>
 800e0a0:	9b02      	ldr	r3, [sp, #8]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	dd35      	ble.n	800e112 <_dtoa_r+0x432>
 800e0a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e0aa:	9308      	str	r3, [sp, #32]
 800e0ac:	4639      	mov	r1, r7
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	4b8b      	ldr	r3, [pc, #556]	; (800e2e0 <_dtoa_r+0x600>)
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f7f2 faaa 	bl	800060c <__aeabi_dmul>
 800e0b8:	e9cd 0100 	strd	r0, r1, [sp]
 800e0bc:	9f02      	ldr	r7, [sp, #8]
 800e0be:	3501      	adds	r5, #1
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	f7f2 fa39 	bl	8000538 <__aeabi_i2d>
 800e0c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0ca:	f7f2 fa9f 	bl	800060c <__aeabi_dmul>
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	4b84      	ldr	r3, [pc, #528]	; (800e2e4 <_dtoa_r+0x604>)
 800e0d2:	f7f2 f8e5 	bl	80002a0 <__adddf3>
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e0dc:	2f00      	cmp	r7, #0
 800e0de:	d15d      	bne.n	800e19c <_dtoa_r+0x4bc>
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	4b81      	ldr	r3, [pc, #516]	; (800e2e8 <_dtoa_r+0x608>)
 800e0e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0e8:	f7f2 f8d8 	bl	800029c <__aeabi_dsub>
 800e0ec:	462a      	mov	r2, r5
 800e0ee:	4633      	mov	r3, r6
 800e0f0:	e9cd 0100 	strd	r0, r1, [sp]
 800e0f4:	f7f2 fd1a 	bl	8000b2c <__aeabi_dcmpgt>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	f040 8288 	bne.w	800e60e <_dtoa_r+0x92e>
 800e0fe:	462a      	mov	r2, r5
 800e100:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e104:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e108:	f7f2 fcf2 	bl	8000af0 <__aeabi_dcmplt>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	f040 827c 	bne.w	800e60a <_dtoa_r+0x92a>
 800e112:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e116:	e9cd 2300 	strd	r2, r3, [sp]
 800e11a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f2c0 8150 	blt.w	800e3c2 <_dtoa_r+0x6e2>
 800e122:	f1ba 0f0e 	cmp.w	sl, #14
 800e126:	f300 814c 	bgt.w	800e3c2 <_dtoa_r+0x6e2>
 800e12a:	4b6a      	ldr	r3, [pc, #424]	; (800e2d4 <_dtoa_r+0x5f4>)
 800e12c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e130:	ed93 7b00 	vldr	d7, [r3]
 800e134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e136:	2b00      	cmp	r3, #0
 800e138:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e13c:	f280 80d8 	bge.w	800e2f0 <_dtoa_r+0x610>
 800e140:	f1b9 0f00 	cmp.w	r9, #0
 800e144:	f300 80d4 	bgt.w	800e2f0 <_dtoa_r+0x610>
 800e148:	f040 825e 	bne.w	800e608 <_dtoa_r+0x928>
 800e14c:	2200      	movs	r2, #0
 800e14e:	4b66      	ldr	r3, [pc, #408]	; (800e2e8 <_dtoa_r+0x608>)
 800e150:	ec51 0b17 	vmov	r0, r1, d7
 800e154:	f7f2 fa5a 	bl	800060c <__aeabi_dmul>
 800e158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e15c:	f7f2 fcdc 	bl	8000b18 <__aeabi_dcmpge>
 800e160:	464f      	mov	r7, r9
 800e162:	464e      	mov	r6, r9
 800e164:	2800      	cmp	r0, #0
 800e166:	f040 8234 	bne.w	800e5d2 <_dtoa_r+0x8f2>
 800e16a:	2331      	movs	r3, #49	; 0x31
 800e16c:	f10b 0501 	add.w	r5, fp, #1
 800e170:	f88b 3000 	strb.w	r3, [fp]
 800e174:	f10a 0a01 	add.w	sl, sl, #1
 800e178:	e22f      	b.n	800e5da <_dtoa_r+0x8fa>
 800e17a:	07f2      	lsls	r2, r6, #31
 800e17c:	d505      	bpl.n	800e18a <_dtoa_r+0x4aa>
 800e17e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e182:	f7f2 fa43 	bl	800060c <__aeabi_dmul>
 800e186:	3501      	adds	r5, #1
 800e188:	2301      	movs	r3, #1
 800e18a:	1076      	asrs	r6, r6, #1
 800e18c:	3708      	adds	r7, #8
 800e18e:	e772      	b.n	800e076 <_dtoa_r+0x396>
 800e190:	2502      	movs	r5, #2
 800e192:	e774      	b.n	800e07e <_dtoa_r+0x39e>
 800e194:	f8cd a020 	str.w	sl, [sp, #32]
 800e198:	464f      	mov	r7, r9
 800e19a:	e791      	b.n	800e0c0 <_dtoa_r+0x3e0>
 800e19c:	4b4d      	ldr	r3, [pc, #308]	; (800e2d4 <_dtoa_r+0x5f4>)
 800e19e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e1a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e1a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d047      	beq.n	800e23c <_dtoa_r+0x55c>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	494e      	ldr	r1, [pc, #312]	; (800e2ec <_dtoa_r+0x60c>)
 800e1b4:	f7f2 fb54 	bl	8000860 <__aeabi_ddiv>
 800e1b8:	462a      	mov	r2, r5
 800e1ba:	4633      	mov	r3, r6
 800e1bc:	f7f2 f86e 	bl	800029c <__aeabi_dsub>
 800e1c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e1c4:	465d      	mov	r5, fp
 800e1c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1ca:	f7f2 fccf 	bl	8000b6c <__aeabi_d2iz>
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	f7f2 f9b2 	bl	8000538 <__aeabi_i2d>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1dc:	f7f2 f85e 	bl	800029c <__aeabi_dsub>
 800e1e0:	3630      	adds	r6, #48	; 0x30
 800e1e2:	f805 6b01 	strb.w	r6, [r5], #1
 800e1e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e1ea:	e9cd 0100 	strd	r0, r1, [sp]
 800e1ee:	f7f2 fc7f 	bl	8000af0 <__aeabi_dcmplt>
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	d163      	bne.n	800e2be <_dtoa_r+0x5de>
 800e1f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1fa:	2000      	movs	r0, #0
 800e1fc:	4937      	ldr	r1, [pc, #220]	; (800e2dc <_dtoa_r+0x5fc>)
 800e1fe:	f7f2 f84d 	bl	800029c <__aeabi_dsub>
 800e202:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e206:	f7f2 fc73 	bl	8000af0 <__aeabi_dcmplt>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	f040 80b7 	bne.w	800e37e <_dtoa_r+0x69e>
 800e210:	eba5 030b 	sub.w	r3, r5, fp
 800e214:	429f      	cmp	r7, r3
 800e216:	f77f af7c 	ble.w	800e112 <_dtoa_r+0x432>
 800e21a:	2200      	movs	r2, #0
 800e21c:	4b30      	ldr	r3, [pc, #192]	; (800e2e0 <_dtoa_r+0x600>)
 800e21e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e222:	f7f2 f9f3 	bl	800060c <__aeabi_dmul>
 800e226:	2200      	movs	r2, #0
 800e228:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e22c:	4b2c      	ldr	r3, [pc, #176]	; (800e2e0 <_dtoa_r+0x600>)
 800e22e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e232:	f7f2 f9eb 	bl	800060c <__aeabi_dmul>
 800e236:	e9cd 0100 	strd	r0, r1, [sp]
 800e23a:	e7c4      	b.n	800e1c6 <_dtoa_r+0x4e6>
 800e23c:	462a      	mov	r2, r5
 800e23e:	4633      	mov	r3, r6
 800e240:	f7f2 f9e4 	bl	800060c <__aeabi_dmul>
 800e244:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e248:	eb0b 0507 	add.w	r5, fp, r7
 800e24c:	465e      	mov	r6, fp
 800e24e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e252:	f7f2 fc8b 	bl	8000b6c <__aeabi_d2iz>
 800e256:	4607      	mov	r7, r0
 800e258:	f7f2 f96e 	bl	8000538 <__aeabi_i2d>
 800e25c:	3730      	adds	r7, #48	; 0x30
 800e25e:	4602      	mov	r2, r0
 800e260:	460b      	mov	r3, r1
 800e262:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e266:	f7f2 f819 	bl	800029c <__aeabi_dsub>
 800e26a:	f806 7b01 	strb.w	r7, [r6], #1
 800e26e:	42ae      	cmp	r6, r5
 800e270:	e9cd 0100 	strd	r0, r1, [sp]
 800e274:	f04f 0200 	mov.w	r2, #0
 800e278:	d126      	bne.n	800e2c8 <_dtoa_r+0x5e8>
 800e27a:	4b1c      	ldr	r3, [pc, #112]	; (800e2ec <_dtoa_r+0x60c>)
 800e27c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e280:	f7f2 f80e 	bl	80002a0 <__adddf3>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e28c:	f7f2 fc4e 	bl	8000b2c <__aeabi_dcmpgt>
 800e290:	2800      	cmp	r0, #0
 800e292:	d174      	bne.n	800e37e <_dtoa_r+0x69e>
 800e294:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e298:	2000      	movs	r0, #0
 800e29a:	4914      	ldr	r1, [pc, #80]	; (800e2ec <_dtoa_r+0x60c>)
 800e29c:	f7f1 fffe 	bl	800029c <__aeabi_dsub>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2a8:	f7f2 fc22 	bl	8000af0 <__aeabi_dcmplt>
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	f43f af30 	beq.w	800e112 <_dtoa_r+0x432>
 800e2b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e2b6:	2b30      	cmp	r3, #48	; 0x30
 800e2b8:	f105 32ff 	add.w	r2, r5, #4294967295
 800e2bc:	d002      	beq.n	800e2c4 <_dtoa_r+0x5e4>
 800e2be:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e2c2:	e04a      	b.n	800e35a <_dtoa_r+0x67a>
 800e2c4:	4615      	mov	r5, r2
 800e2c6:	e7f4      	b.n	800e2b2 <_dtoa_r+0x5d2>
 800e2c8:	4b05      	ldr	r3, [pc, #20]	; (800e2e0 <_dtoa_r+0x600>)
 800e2ca:	f7f2 f99f 	bl	800060c <__aeabi_dmul>
 800e2ce:	e9cd 0100 	strd	r0, r1, [sp]
 800e2d2:	e7bc      	b.n	800e24e <_dtoa_r+0x56e>
 800e2d4:	08010d38 	.word	0x08010d38
 800e2d8:	08010d10 	.word	0x08010d10
 800e2dc:	3ff00000 	.word	0x3ff00000
 800e2e0:	40240000 	.word	0x40240000
 800e2e4:	401c0000 	.word	0x401c0000
 800e2e8:	40140000 	.word	0x40140000
 800e2ec:	3fe00000 	.word	0x3fe00000
 800e2f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e2f4:	465d      	mov	r5, fp
 800e2f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	4639      	mov	r1, r7
 800e2fe:	f7f2 faaf 	bl	8000860 <__aeabi_ddiv>
 800e302:	f7f2 fc33 	bl	8000b6c <__aeabi_d2iz>
 800e306:	4680      	mov	r8, r0
 800e308:	f7f2 f916 	bl	8000538 <__aeabi_i2d>
 800e30c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e310:	f7f2 f97c 	bl	800060c <__aeabi_dmul>
 800e314:	4602      	mov	r2, r0
 800e316:	460b      	mov	r3, r1
 800e318:	4630      	mov	r0, r6
 800e31a:	4639      	mov	r1, r7
 800e31c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e320:	f7f1 ffbc 	bl	800029c <__aeabi_dsub>
 800e324:	f805 6b01 	strb.w	r6, [r5], #1
 800e328:	eba5 060b 	sub.w	r6, r5, fp
 800e32c:	45b1      	cmp	r9, r6
 800e32e:	4602      	mov	r2, r0
 800e330:	460b      	mov	r3, r1
 800e332:	d139      	bne.n	800e3a8 <_dtoa_r+0x6c8>
 800e334:	f7f1 ffb4 	bl	80002a0 <__adddf3>
 800e338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e33c:	4606      	mov	r6, r0
 800e33e:	460f      	mov	r7, r1
 800e340:	f7f2 fbf4 	bl	8000b2c <__aeabi_dcmpgt>
 800e344:	b9c8      	cbnz	r0, 800e37a <_dtoa_r+0x69a>
 800e346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e34a:	4630      	mov	r0, r6
 800e34c:	4639      	mov	r1, r7
 800e34e:	f7f2 fbc5 	bl	8000adc <__aeabi_dcmpeq>
 800e352:	b110      	cbz	r0, 800e35a <_dtoa_r+0x67a>
 800e354:	f018 0f01 	tst.w	r8, #1
 800e358:	d10f      	bne.n	800e37a <_dtoa_r+0x69a>
 800e35a:	9904      	ldr	r1, [sp, #16]
 800e35c:	4620      	mov	r0, r4
 800e35e:	f000 fcec 	bl	800ed3a <_Bfree>
 800e362:	2300      	movs	r3, #0
 800e364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e366:	702b      	strb	r3, [r5, #0]
 800e368:	f10a 0301 	add.w	r3, sl, #1
 800e36c:	6013      	str	r3, [r2, #0]
 800e36e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e370:	2b00      	cmp	r3, #0
 800e372:	f000 8241 	beq.w	800e7f8 <_dtoa_r+0xb18>
 800e376:	601d      	str	r5, [r3, #0]
 800e378:	e23e      	b.n	800e7f8 <_dtoa_r+0xb18>
 800e37a:	f8cd a020 	str.w	sl, [sp, #32]
 800e37e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e382:	2a39      	cmp	r2, #57	; 0x39
 800e384:	f105 33ff 	add.w	r3, r5, #4294967295
 800e388:	d108      	bne.n	800e39c <_dtoa_r+0x6bc>
 800e38a:	459b      	cmp	fp, r3
 800e38c:	d10a      	bne.n	800e3a4 <_dtoa_r+0x6c4>
 800e38e:	9b08      	ldr	r3, [sp, #32]
 800e390:	3301      	adds	r3, #1
 800e392:	9308      	str	r3, [sp, #32]
 800e394:	2330      	movs	r3, #48	; 0x30
 800e396:	f88b 3000 	strb.w	r3, [fp]
 800e39a:	465b      	mov	r3, fp
 800e39c:	781a      	ldrb	r2, [r3, #0]
 800e39e:	3201      	adds	r2, #1
 800e3a0:	701a      	strb	r2, [r3, #0]
 800e3a2:	e78c      	b.n	800e2be <_dtoa_r+0x5de>
 800e3a4:	461d      	mov	r5, r3
 800e3a6:	e7ea      	b.n	800e37e <_dtoa_r+0x69e>
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	4b9b      	ldr	r3, [pc, #620]	; (800e618 <_dtoa_r+0x938>)
 800e3ac:	f7f2 f92e 	bl	800060c <__aeabi_dmul>
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	4606      	mov	r6, r0
 800e3b6:	460f      	mov	r7, r1
 800e3b8:	f7f2 fb90 	bl	8000adc <__aeabi_dcmpeq>
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	d09a      	beq.n	800e2f6 <_dtoa_r+0x616>
 800e3c0:	e7cb      	b.n	800e35a <_dtoa_r+0x67a>
 800e3c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3c4:	2a00      	cmp	r2, #0
 800e3c6:	f000 808b 	beq.w	800e4e0 <_dtoa_r+0x800>
 800e3ca:	9a06      	ldr	r2, [sp, #24]
 800e3cc:	2a01      	cmp	r2, #1
 800e3ce:	dc6e      	bgt.n	800e4ae <_dtoa_r+0x7ce>
 800e3d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e3d2:	2a00      	cmp	r2, #0
 800e3d4:	d067      	beq.n	800e4a6 <_dtoa_r+0x7c6>
 800e3d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e3da:	9f07      	ldr	r7, [sp, #28]
 800e3dc:	9d05      	ldr	r5, [sp, #20]
 800e3de:	9a05      	ldr	r2, [sp, #20]
 800e3e0:	2101      	movs	r1, #1
 800e3e2:	441a      	add	r2, r3
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	9205      	str	r2, [sp, #20]
 800e3e8:	4498      	add	r8, r3
 800e3ea:	f000 fd46 	bl	800ee7a <__i2b>
 800e3ee:	4606      	mov	r6, r0
 800e3f0:	2d00      	cmp	r5, #0
 800e3f2:	dd0c      	ble.n	800e40e <_dtoa_r+0x72e>
 800e3f4:	f1b8 0f00 	cmp.w	r8, #0
 800e3f8:	dd09      	ble.n	800e40e <_dtoa_r+0x72e>
 800e3fa:	4545      	cmp	r5, r8
 800e3fc:	9a05      	ldr	r2, [sp, #20]
 800e3fe:	462b      	mov	r3, r5
 800e400:	bfa8      	it	ge
 800e402:	4643      	movge	r3, r8
 800e404:	1ad2      	subs	r2, r2, r3
 800e406:	9205      	str	r2, [sp, #20]
 800e408:	1aed      	subs	r5, r5, r3
 800e40a:	eba8 0803 	sub.w	r8, r8, r3
 800e40e:	9b07      	ldr	r3, [sp, #28]
 800e410:	b1eb      	cbz	r3, 800e44e <_dtoa_r+0x76e>
 800e412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e414:	2b00      	cmp	r3, #0
 800e416:	d067      	beq.n	800e4e8 <_dtoa_r+0x808>
 800e418:	b18f      	cbz	r7, 800e43e <_dtoa_r+0x75e>
 800e41a:	4631      	mov	r1, r6
 800e41c:	463a      	mov	r2, r7
 800e41e:	4620      	mov	r0, r4
 800e420:	f000 fdca 	bl	800efb8 <__pow5mult>
 800e424:	9a04      	ldr	r2, [sp, #16]
 800e426:	4601      	mov	r1, r0
 800e428:	4606      	mov	r6, r0
 800e42a:	4620      	mov	r0, r4
 800e42c:	f000 fd2e 	bl	800ee8c <__multiply>
 800e430:	9904      	ldr	r1, [sp, #16]
 800e432:	9008      	str	r0, [sp, #32]
 800e434:	4620      	mov	r0, r4
 800e436:	f000 fc80 	bl	800ed3a <_Bfree>
 800e43a:	9b08      	ldr	r3, [sp, #32]
 800e43c:	9304      	str	r3, [sp, #16]
 800e43e:	9b07      	ldr	r3, [sp, #28]
 800e440:	1bda      	subs	r2, r3, r7
 800e442:	d004      	beq.n	800e44e <_dtoa_r+0x76e>
 800e444:	9904      	ldr	r1, [sp, #16]
 800e446:	4620      	mov	r0, r4
 800e448:	f000 fdb6 	bl	800efb8 <__pow5mult>
 800e44c:	9004      	str	r0, [sp, #16]
 800e44e:	2101      	movs	r1, #1
 800e450:	4620      	mov	r0, r4
 800e452:	f000 fd12 	bl	800ee7a <__i2b>
 800e456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e458:	4607      	mov	r7, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f000 81d0 	beq.w	800e800 <_dtoa_r+0xb20>
 800e460:	461a      	mov	r2, r3
 800e462:	4601      	mov	r1, r0
 800e464:	4620      	mov	r0, r4
 800e466:	f000 fda7 	bl	800efb8 <__pow5mult>
 800e46a:	9b06      	ldr	r3, [sp, #24]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	4607      	mov	r7, r0
 800e470:	dc40      	bgt.n	800e4f4 <_dtoa_r+0x814>
 800e472:	9b00      	ldr	r3, [sp, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d139      	bne.n	800e4ec <_dtoa_r+0x80c>
 800e478:	9b01      	ldr	r3, [sp, #4]
 800e47a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d136      	bne.n	800e4f0 <_dtoa_r+0x810>
 800e482:	9b01      	ldr	r3, [sp, #4]
 800e484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e488:	0d1b      	lsrs	r3, r3, #20
 800e48a:	051b      	lsls	r3, r3, #20
 800e48c:	b12b      	cbz	r3, 800e49a <_dtoa_r+0x7ba>
 800e48e:	9b05      	ldr	r3, [sp, #20]
 800e490:	3301      	adds	r3, #1
 800e492:	9305      	str	r3, [sp, #20]
 800e494:	f108 0801 	add.w	r8, r8, #1
 800e498:	2301      	movs	r3, #1
 800e49a:	9307      	str	r3, [sp, #28]
 800e49c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d12a      	bne.n	800e4f8 <_dtoa_r+0x818>
 800e4a2:	2001      	movs	r0, #1
 800e4a4:	e030      	b.n	800e508 <_dtoa_r+0x828>
 800e4a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e4a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e4ac:	e795      	b.n	800e3da <_dtoa_r+0x6fa>
 800e4ae:	9b07      	ldr	r3, [sp, #28]
 800e4b0:	f109 37ff 	add.w	r7, r9, #4294967295
 800e4b4:	42bb      	cmp	r3, r7
 800e4b6:	bfbf      	itttt	lt
 800e4b8:	9b07      	ldrlt	r3, [sp, #28]
 800e4ba:	9707      	strlt	r7, [sp, #28]
 800e4bc:	1afa      	sublt	r2, r7, r3
 800e4be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e4c0:	bfbb      	ittet	lt
 800e4c2:	189b      	addlt	r3, r3, r2
 800e4c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e4c6:	1bdf      	subge	r7, r3, r7
 800e4c8:	2700      	movlt	r7, #0
 800e4ca:	f1b9 0f00 	cmp.w	r9, #0
 800e4ce:	bfb5      	itete	lt
 800e4d0:	9b05      	ldrlt	r3, [sp, #20]
 800e4d2:	9d05      	ldrge	r5, [sp, #20]
 800e4d4:	eba3 0509 	sublt.w	r5, r3, r9
 800e4d8:	464b      	movge	r3, r9
 800e4da:	bfb8      	it	lt
 800e4dc:	2300      	movlt	r3, #0
 800e4de:	e77e      	b.n	800e3de <_dtoa_r+0x6fe>
 800e4e0:	9f07      	ldr	r7, [sp, #28]
 800e4e2:	9d05      	ldr	r5, [sp, #20]
 800e4e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e4e6:	e783      	b.n	800e3f0 <_dtoa_r+0x710>
 800e4e8:	9a07      	ldr	r2, [sp, #28]
 800e4ea:	e7ab      	b.n	800e444 <_dtoa_r+0x764>
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	e7d4      	b.n	800e49a <_dtoa_r+0x7ba>
 800e4f0:	9b00      	ldr	r3, [sp, #0]
 800e4f2:	e7d2      	b.n	800e49a <_dtoa_r+0x7ba>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	9307      	str	r3, [sp, #28]
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e4fe:	6918      	ldr	r0, [r3, #16]
 800e500:	f000 fc6d 	bl	800edde <__hi0bits>
 800e504:	f1c0 0020 	rsb	r0, r0, #32
 800e508:	4440      	add	r0, r8
 800e50a:	f010 001f 	ands.w	r0, r0, #31
 800e50e:	d047      	beq.n	800e5a0 <_dtoa_r+0x8c0>
 800e510:	f1c0 0320 	rsb	r3, r0, #32
 800e514:	2b04      	cmp	r3, #4
 800e516:	dd3b      	ble.n	800e590 <_dtoa_r+0x8b0>
 800e518:	9b05      	ldr	r3, [sp, #20]
 800e51a:	f1c0 001c 	rsb	r0, r0, #28
 800e51e:	4403      	add	r3, r0
 800e520:	9305      	str	r3, [sp, #20]
 800e522:	4405      	add	r5, r0
 800e524:	4480      	add	r8, r0
 800e526:	9b05      	ldr	r3, [sp, #20]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	dd05      	ble.n	800e538 <_dtoa_r+0x858>
 800e52c:	461a      	mov	r2, r3
 800e52e:	9904      	ldr	r1, [sp, #16]
 800e530:	4620      	mov	r0, r4
 800e532:	f000 fd8f 	bl	800f054 <__lshift>
 800e536:	9004      	str	r0, [sp, #16]
 800e538:	f1b8 0f00 	cmp.w	r8, #0
 800e53c:	dd05      	ble.n	800e54a <_dtoa_r+0x86a>
 800e53e:	4639      	mov	r1, r7
 800e540:	4642      	mov	r2, r8
 800e542:	4620      	mov	r0, r4
 800e544:	f000 fd86 	bl	800f054 <__lshift>
 800e548:	4607      	mov	r7, r0
 800e54a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e54c:	b353      	cbz	r3, 800e5a4 <_dtoa_r+0x8c4>
 800e54e:	4639      	mov	r1, r7
 800e550:	9804      	ldr	r0, [sp, #16]
 800e552:	f000 fdd3 	bl	800f0fc <__mcmp>
 800e556:	2800      	cmp	r0, #0
 800e558:	da24      	bge.n	800e5a4 <_dtoa_r+0x8c4>
 800e55a:	2300      	movs	r3, #0
 800e55c:	220a      	movs	r2, #10
 800e55e:	9904      	ldr	r1, [sp, #16]
 800e560:	4620      	mov	r0, r4
 800e562:	f000 fc01 	bl	800ed68 <__multadd>
 800e566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e568:	9004      	str	r0, [sp, #16]
 800e56a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f000 814d 	beq.w	800e80e <_dtoa_r+0xb2e>
 800e574:	2300      	movs	r3, #0
 800e576:	4631      	mov	r1, r6
 800e578:	220a      	movs	r2, #10
 800e57a:	4620      	mov	r0, r4
 800e57c:	f000 fbf4 	bl	800ed68 <__multadd>
 800e580:	9b02      	ldr	r3, [sp, #8]
 800e582:	2b00      	cmp	r3, #0
 800e584:	4606      	mov	r6, r0
 800e586:	dc4f      	bgt.n	800e628 <_dtoa_r+0x948>
 800e588:	9b06      	ldr	r3, [sp, #24]
 800e58a:	2b02      	cmp	r3, #2
 800e58c:	dd4c      	ble.n	800e628 <_dtoa_r+0x948>
 800e58e:	e011      	b.n	800e5b4 <_dtoa_r+0x8d4>
 800e590:	d0c9      	beq.n	800e526 <_dtoa_r+0x846>
 800e592:	9a05      	ldr	r2, [sp, #20]
 800e594:	331c      	adds	r3, #28
 800e596:	441a      	add	r2, r3
 800e598:	9205      	str	r2, [sp, #20]
 800e59a:	441d      	add	r5, r3
 800e59c:	4498      	add	r8, r3
 800e59e:	e7c2      	b.n	800e526 <_dtoa_r+0x846>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	e7f6      	b.n	800e592 <_dtoa_r+0x8b2>
 800e5a4:	f1b9 0f00 	cmp.w	r9, #0
 800e5a8:	dc38      	bgt.n	800e61c <_dtoa_r+0x93c>
 800e5aa:	9b06      	ldr	r3, [sp, #24]
 800e5ac:	2b02      	cmp	r3, #2
 800e5ae:	dd35      	ble.n	800e61c <_dtoa_r+0x93c>
 800e5b0:	f8cd 9008 	str.w	r9, [sp, #8]
 800e5b4:	9b02      	ldr	r3, [sp, #8]
 800e5b6:	b963      	cbnz	r3, 800e5d2 <_dtoa_r+0x8f2>
 800e5b8:	4639      	mov	r1, r7
 800e5ba:	2205      	movs	r2, #5
 800e5bc:	4620      	mov	r0, r4
 800e5be:	f000 fbd3 	bl	800ed68 <__multadd>
 800e5c2:	4601      	mov	r1, r0
 800e5c4:	4607      	mov	r7, r0
 800e5c6:	9804      	ldr	r0, [sp, #16]
 800e5c8:	f000 fd98 	bl	800f0fc <__mcmp>
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	f73f adcc 	bgt.w	800e16a <_dtoa_r+0x48a>
 800e5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5d4:	465d      	mov	r5, fp
 800e5d6:	ea6f 0a03 	mvn.w	sl, r3
 800e5da:	f04f 0900 	mov.w	r9, #0
 800e5de:	4639      	mov	r1, r7
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	f000 fbaa 	bl	800ed3a <_Bfree>
 800e5e6:	2e00      	cmp	r6, #0
 800e5e8:	f43f aeb7 	beq.w	800e35a <_dtoa_r+0x67a>
 800e5ec:	f1b9 0f00 	cmp.w	r9, #0
 800e5f0:	d005      	beq.n	800e5fe <_dtoa_r+0x91e>
 800e5f2:	45b1      	cmp	r9, r6
 800e5f4:	d003      	beq.n	800e5fe <_dtoa_r+0x91e>
 800e5f6:	4649      	mov	r1, r9
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f000 fb9e 	bl	800ed3a <_Bfree>
 800e5fe:	4631      	mov	r1, r6
 800e600:	4620      	mov	r0, r4
 800e602:	f000 fb9a 	bl	800ed3a <_Bfree>
 800e606:	e6a8      	b.n	800e35a <_dtoa_r+0x67a>
 800e608:	2700      	movs	r7, #0
 800e60a:	463e      	mov	r6, r7
 800e60c:	e7e1      	b.n	800e5d2 <_dtoa_r+0x8f2>
 800e60e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e612:	463e      	mov	r6, r7
 800e614:	e5a9      	b.n	800e16a <_dtoa_r+0x48a>
 800e616:	bf00      	nop
 800e618:	40240000 	.word	0x40240000
 800e61c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e61e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e622:	2b00      	cmp	r3, #0
 800e624:	f000 80fa 	beq.w	800e81c <_dtoa_r+0xb3c>
 800e628:	2d00      	cmp	r5, #0
 800e62a:	dd05      	ble.n	800e638 <_dtoa_r+0x958>
 800e62c:	4631      	mov	r1, r6
 800e62e:	462a      	mov	r2, r5
 800e630:	4620      	mov	r0, r4
 800e632:	f000 fd0f 	bl	800f054 <__lshift>
 800e636:	4606      	mov	r6, r0
 800e638:	9b07      	ldr	r3, [sp, #28]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d04c      	beq.n	800e6d8 <_dtoa_r+0x9f8>
 800e63e:	6871      	ldr	r1, [r6, #4]
 800e640:	4620      	mov	r0, r4
 800e642:	f000 fb46 	bl	800ecd2 <_Balloc>
 800e646:	6932      	ldr	r2, [r6, #16]
 800e648:	3202      	adds	r2, #2
 800e64a:	4605      	mov	r5, r0
 800e64c:	0092      	lsls	r2, r2, #2
 800e64e:	f106 010c 	add.w	r1, r6, #12
 800e652:	300c      	adds	r0, #12
 800e654:	f000 fb30 	bl	800ecb8 <memcpy>
 800e658:	2201      	movs	r2, #1
 800e65a:	4629      	mov	r1, r5
 800e65c:	4620      	mov	r0, r4
 800e65e:	f000 fcf9 	bl	800f054 <__lshift>
 800e662:	9b00      	ldr	r3, [sp, #0]
 800e664:	f8cd b014 	str.w	fp, [sp, #20]
 800e668:	f003 0301 	and.w	r3, r3, #1
 800e66c:	46b1      	mov	r9, r6
 800e66e:	9307      	str	r3, [sp, #28]
 800e670:	4606      	mov	r6, r0
 800e672:	4639      	mov	r1, r7
 800e674:	9804      	ldr	r0, [sp, #16]
 800e676:	f7ff faa7 	bl	800dbc8 <quorem>
 800e67a:	4649      	mov	r1, r9
 800e67c:	4605      	mov	r5, r0
 800e67e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e682:	9804      	ldr	r0, [sp, #16]
 800e684:	f000 fd3a 	bl	800f0fc <__mcmp>
 800e688:	4632      	mov	r2, r6
 800e68a:	9000      	str	r0, [sp, #0]
 800e68c:	4639      	mov	r1, r7
 800e68e:	4620      	mov	r0, r4
 800e690:	f000 fd4e 	bl	800f130 <__mdiff>
 800e694:	68c3      	ldr	r3, [r0, #12]
 800e696:	4602      	mov	r2, r0
 800e698:	bb03      	cbnz	r3, 800e6dc <_dtoa_r+0x9fc>
 800e69a:	4601      	mov	r1, r0
 800e69c:	9008      	str	r0, [sp, #32]
 800e69e:	9804      	ldr	r0, [sp, #16]
 800e6a0:	f000 fd2c 	bl	800f0fc <__mcmp>
 800e6a4:	9a08      	ldr	r2, [sp, #32]
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	9308      	str	r3, [sp, #32]
 800e6ae:	f000 fb44 	bl	800ed3a <_Bfree>
 800e6b2:	9b08      	ldr	r3, [sp, #32]
 800e6b4:	b9a3      	cbnz	r3, 800e6e0 <_dtoa_r+0xa00>
 800e6b6:	9a06      	ldr	r2, [sp, #24]
 800e6b8:	b992      	cbnz	r2, 800e6e0 <_dtoa_r+0xa00>
 800e6ba:	9a07      	ldr	r2, [sp, #28]
 800e6bc:	b982      	cbnz	r2, 800e6e0 <_dtoa_r+0xa00>
 800e6be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e6c2:	d029      	beq.n	800e718 <_dtoa_r+0xa38>
 800e6c4:	9b00      	ldr	r3, [sp, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	dd01      	ble.n	800e6ce <_dtoa_r+0x9ee>
 800e6ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e6ce:	9b05      	ldr	r3, [sp, #20]
 800e6d0:	1c5d      	adds	r5, r3, #1
 800e6d2:	f883 8000 	strb.w	r8, [r3]
 800e6d6:	e782      	b.n	800e5de <_dtoa_r+0x8fe>
 800e6d8:	4630      	mov	r0, r6
 800e6da:	e7c2      	b.n	800e662 <_dtoa_r+0x982>
 800e6dc:	2301      	movs	r3, #1
 800e6de:	e7e3      	b.n	800e6a8 <_dtoa_r+0x9c8>
 800e6e0:	9a00      	ldr	r2, [sp, #0]
 800e6e2:	2a00      	cmp	r2, #0
 800e6e4:	db04      	blt.n	800e6f0 <_dtoa_r+0xa10>
 800e6e6:	d125      	bne.n	800e734 <_dtoa_r+0xa54>
 800e6e8:	9a06      	ldr	r2, [sp, #24]
 800e6ea:	bb1a      	cbnz	r2, 800e734 <_dtoa_r+0xa54>
 800e6ec:	9a07      	ldr	r2, [sp, #28]
 800e6ee:	bb0a      	cbnz	r2, 800e734 <_dtoa_r+0xa54>
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	ddec      	ble.n	800e6ce <_dtoa_r+0x9ee>
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	9904      	ldr	r1, [sp, #16]
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	f000 fcab 	bl	800f054 <__lshift>
 800e6fe:	4639      	mov	r1, r7
 800e700:	9004      	str	r0, [sp, #16]
 800e702:	f000 fcfb 	bl	800f0fc <__mcmp>
 800e706:	2800      	cmp	r0, #0
 800e708:	dc03      	bgt.n	800e712 <_dtoa_r+0xa32>
 800e70a:	d1e0      	bne.n	800e6ce <_dtoa_r+0x9ee>
 800e70c:	f018 0f01 	tst.w	r8, #1
 800e710:	d0dd      	beq.n	800e6ce <_dtoa_r+0x9ee>
 800e712:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e716:	d1d8      	bne.n	800e6ca <_dtoa_r+0x9ea>
 800e718:	9b05      	ldr	r3, [sp, #20]
 800e71a:	9a05      	ldr	r2, [sp, #20]
 800e71c:	1c5d      	adds	r5, r3, #1
 800e71e:	2339      	movs	r3, #57	; 0x39
 800e720:	7013      	strb	r3, [r2, #0]
 800e722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e726:	2b39      	cmp	r3, #57	; 0x39
 800e728:	f105 32ff 	add.w	r2, r5, #4294967295
 800e72c:	d04f      	beq.n	800e7ce <_dtoa_r+0xaee>
 800e72e:	3301      	adds	r3, #1
 800e730:	7013      	strb	r3, [r2, #0]
 800e732:	e754      	b.n	800e5de <_dtoa_r+0x8fe>
 800e734:	9a05      	ldr	r2, [sp, #20]
 800e736:	2b00      	cmp	r3, #0
 800e738:	f102 0501 	add.w	r5, r2, #1
 800e73c:	dd06      	ble.n	800e74c <_dtoa_r+0xa6c>
 800e73e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e742:	d0e9      	beq.n	800e718 <_dtoa_r+0xa38>
 800e744:	f108 0801 	add.w	r8, r8, #1
 800e748:	9b05      	ldr	r3, [sp, #20]
 800e74a:	e7c2      	b.n	800e6d2 <_dtoa_r+0x9f2>
 800e74c:	9a02      	ldr	r2, [sp, #8]
 800e74e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e752:	eba5 030b 	sub.w	r3, r5, fp
 800e756:	4293      	cmp	r3, r2
 800e758:	d021      	beq.n	800e79e <_dtoa_r+0xabe>
 800e75a:	2300      	movs	r3, #0
 800e75c:	220a      	movs	r2, #10
 800e75e:	9904      	ldr	r1, [sp, #16]
 800e760:	4620      	mov	r0, r4
 800e762:	f000 fb01 	bl	800ed68 <__multadd>
 800e766:	45b1      	cmp	r9, r6
 800e768:	9004      	str	r0, [sp, #16]
 800e76a:	f04f 0300 	mov.w	r3, #0
 800e76e:	f04f 020a 	mov.w	r2, #10
 800e772:	4649      	mov	r1, r9
 800e774:	4620      	mov	r0, r4
 800e776:	d105      	bne.n	800e784 <_dtoa_r+0xaa4>
 800e778:	f000 faf6 	bl	800ed68 <__multadd>
 800e77c:	4681      	mov	r9, r0
 800e77e:	4606      	mov	r6, r0
 800e780:	9505      	str	r5, [sp, #20]
 800e782:	e776      	b.n	800e672 <_dtoa_r+0x992>
 800e784:	f000 faf0 	bl	800ed68 <__multadd>
 800e788:	4631      	mov	r1, r6
 800e78a:	4681      	mov	r9, r0
 800e78c:	2300      	movs	r3, #0
 800e78e:	220a      	movs	r2, #10
 800e790:	4620      	mov	r0, r4
 800e792:	f000 fae9 	bl	800ed68 <__multadd>
 800e796:	4606      	mov	r6, r0
 800e798:	e7f2      	b.n	800e780 <_dtoa_r+0xaa0>
 800e79a:	f04f 0900 	mov.w	r9, #0
 800e79e:	2201      	movs	r2, #1
 800e7a0:	9904      	ldr	r1, [sp, #16]
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f000 fc56 	bl	800f054 <__lshift>
 800e7a8:	4639      	mov	r1, r7
 800e7aa:	9004      	str	r0, [sp, #16]
 800e7ac:	f000 fca6 	bl	800f0fc <__mcmp>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	dcb6      	bgt.n	800e722 <_dtoa_r+0xa42>
 800e7b4:	d102      	bne.n	800e7bc <_dtoa_r+0xadc>
 800e7b6:	f018 0f01 	tst.w	r8, #1
 800e7ba:	d1b2      	bne.n	800e722 <_dtoa_r+0xa42>
 800e7bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e7c0:	2b30      	cmp	r3, #48	; 0x30
 800e7c2:	f105 32ff 	add.w	r2, r5, #4294967295
 800e7c6:	f47f af0a 	bne.w	800e5de <_dtoa_r+0x8fe>
 800e7ca:	4615      	mov	r5, r2
 800e7cc:	e7f6      	b.n	800e7bc <_dtoa_r+0xadc>
 800e7ce:	4593      	cmp	fp, r2
 800e7d0:	d105      	bne.n	800e7de <_dtoa_r+0xafe>
 800e7d2:	2331      	movs	r3, #49	; 0x31
 800e7d4:	f10a 0a01 	add.w	sl, sl, #1
 800e7d8:	f88b 3000 	strb.w	r3, [fp]
 800e7dc:	e6ff      	b.n	800e5de <_dtoa_r+0x8fe>
 800e7de:	4615      	mov	r5, r2
 800e7e0:	e79f      	b.n	800e722 <_dtoa_r+0xa42>
 800e7e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e848 <_dtoa_r+0xb68>
 800e7e6:	e007      	b.n	800e7f8 <_dtoa_r+0xb18>
 800e7e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e84c <_dtoa_r+0xb6c>
 800e7ee:	b11b      	cbz	r3, 800e7f8 <_dtoa_r+0xb18>
 800e7f0:	f10b 0308 	add.w	r3, fp, #8
 800e7f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7f6:	6013      	str	r3, [r2, #0]
 800e7f8:	4658      	mov	r0, fp
 800e7fa:	b017      	add	sp, #92	; 0x5c
 800e7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e800:	9b06      	ldr	r3, [sp, #24]
 800e802:	2b01      	cmp	r3, #1
 800e804:	f77f ae35 	ble.w	800e472 <_dtoa_r+0x792>
 800e808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e80a:	9307      	str	r3, [sp, #28]
 800e80c:	e649      	b.n	800e4a2 <_dtoa_r+0x7c2>
 800e80e:	9b02      	ldr	r3, [sp, #8]
 800e810:	2b00      	cmp	r3, #0
 800e812:	dc03      	bgt.n	800e81c <_dtoa_r+0xb3c>
 800e814:	9b06      	ldr	r3, [sp, #24]
 800e816:	2b02      	cmp	r3, #2
 800e818:	f73f aecc 	bgt.w	800e5b4 <_dtoa_r+0x8d4>
 800e81c:	465d      	mov	r5, fp
 800e81e:	4639      	mov	r1, r7
 800e820:	9804      	ldr	r0, [sp, #16]
 800e822:	f7ff f9d1 	bl	800dbc8 <quorem>
 800e826:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e82a:	f805 8b01 	strb.w	r8, [r5], #1
 800e82e:	9a02      	ldr	r2, [sp, #8]
 800e830:	eba5 030b 	sub.w	r3, r5, fp
 800e834:	429a      	cmp	r2, r3
 800e836:	ddb0      	ble.n	800e79a <_dtoa_r+0xaba>
 800e838:	2300      	movs	r3, #0
 800e83a:	220a      	movs	r2, #10
 800e83c:	9904      	ldr	r1, [sp, #16]
 800e83e:	4620      	mov	r0, r4
 800e840:	f000 fa92 	bl	800ed68 <__multadd>
 800e844:	9004      	str	r0, [sp, #16]
 800e846:	e7ea      	b.n	800e81e <_dtoa_r+0xb3e>
 800e848:	08010e3d 	.word	0x08010e3d
 800e84c:	08010c3e 	.word	0x08010c3e

0800e850 <__sflush_r>:
 800e850:	898a      	ldrh	r2, [r1, #12]
 800e852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e856:	4605      	mov	r5, r0
 800e858:	0710      	lsls	r0, r2, #28
 800e85a:	460c      	mov	r4, r1
 800e85c:	d458      	bmi.n	800e910 <__sflush_r+0xc0>
 800e85e:	684b      	ldr	r3, [r1, #4]
 800e860:	2b00      	cmp	r3, #0
 800e862:	dc05      	bgt.n	800e870 <__sflush_r+0x20>
 800e864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e866:	2b00      	cmp	r3, #0
 800e868:	dc02      	bgt.n	800e870 <__sflush_r+0x20>
 800e86a:	2000      	movs	r0, #0
 800e86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e872:	2e00      	cmp	r6, #0
 800e874:	d0f9      	beq.n	800e86a <__sflush_r+0x1a>
 800e876:	2300      	movs	r3, #0
 800e878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e87c:	682f      	ldr	r7, [r5, #0]
 800e87e:	6a21      	ldr	r1, [r4, #32]
 800e880:	602b      	str	r3, [r5, #0]
 800e882:	d032      	beq.n	800e8ea <__sflush_r+0x9a>
 800e884:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e886:	89a3      	ldrh	r3, [r4, #12]
 800e888:	075a      	lsls	r2, r3, #29
 800e88a:	d505      	bpl.n	800e898 <__sflush_r+0x48>
 800e88c:	6863      	ldr	r3, [r4, #4]
 800e88e:	1ac0      	subs	r0, r0, r3
 800e890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e892:	b10b      	cbz	r3, 800e898 <__sflush_r+0x48>
 800e894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e896:	1ac0      	subs	r0, r0, r3
 800e898:	2300      	movs	r3, #0
 800e89a:	4602      	mov	r2, r0
 800e89c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e89e:	6a21      	ldr	r1, [r4, #32]
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	47b0      	blx	r6
 800e8a4:	1c43      	adds	r3, r0, #1
 800e8a6:	89a3      	ldrh	r3, [r4, #12]
 800e8a8:	d106      	bne.n	800e8b8 <__sflush_r+0x68>
 800e8aa:	6829      	ldr	r1, [r5, #0]
 800e8ac:	291d      	cmp	r1, #29
 800e8ae:	d848      	bhi.n	800e942 <__sflush_r+0xf2>
 800e8b0:	4a29      	ldr	r2, [pc, #164]	; (800e958 <__sflush_r+0x108>)
 800e8b2:	40ca      	lsrs	r2, r1
 800e8b4:	07d6      	lsls	r6, r2, #31
 800e8b6:	d544      	bpl.n	800e942 <__sflush_r+0xf2>
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	6062      	str	r2, [r4, #4]
 800e8bc:	04d9      	lsls	r1, r3, #19
 800e8be:	6922      	ldr	r2, [r4, #16]
 800e8c0:	6022      	str	r2, [r4, #0]
 800e8c2:	d504      	bpl.n	800e8ce <__sflush_r+0x7e>
 800e8c4:	1c42      	adds	r2, r0, #1
 800e8c6:	d101      	bne.n	800e8cc <__sflush_r+0x7c>
 800e8c8:	682b      	ldr	r3, [r5, #0]
 800e8ca:	b903      	cbnz	r3, 800e8ce <__sflush_r+0x7e>
 800e8cc:	6560      	str	r0, [r4, #84]	; 0x54
 800e8ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8d0:	602f      	str	r7, [r5, #0]
 800e8d2:	2900      	cmp	r1, #0
 800e8d4:	d0c9      	beq.n	800e86a <__sflush_r+0x1a>
 800e8d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8da:	4299      	cmp	r1, r3
 800e8dc:	d002      	beq.n	800e8e4 <__sflush_r+0x94>
 800e8de:	4628      	mov	r0, r5
 800e8e0:	f7fe f8a8 	bl	800ca34 <_free_r>
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	6360      	str	r0, [r4, #52]	; 0x34
 800e8e8:	e7c0      	b.n	800e86c <__sflush_r+0x1c>
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	47b0      	blx	r6
 800e8f0:	1c41      	adds	r1, r0, #1
 800e8f2:	d1c8      	bne.n	800e886 <__sflush_r+0x36>
 800e8f4:	682b      	ldr	r3, [r5, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d0c5      	beq.n	800e886 <__sflush_r+0x36>
 800e8fa:	2b1d      	cmp	r3, #29
 800e8fc:	d001      	beq.n	800e902 <__sflush_r+0xb2>
 800e8fe:	2b16      	cmp	r3, #22
 800e900:	d101      	bne.n	800e906 <__sflush_r+0xb6>
 800e902:	602f      	str	r7, [r5, #0]
 800e904:	e7b1      	b.n	800e86a <__sflush_r+0x1a>
 800e906:	89a3      	ldrh	r3, [r4, #12]
 800e908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e90c:	81a3      	strh	r3, [r4, #12]
 800e90e:	e7ad      	b.n	800e86c <__sflush_r+0x1c>
 800e910:	690f      	ldr	r7, [r1, #16]
 800e912:	2f00      	cmp	r7, #0
 800e914:	d0a9      	beq.n	800e86a <__sflush_r+0x1a>
 800e916:	0793      	lsls	r3, r2, #30
 800e918:	680e      	ldr	r6, [r1, #0]
 800e91a:	bf08      	it	eq
 800e91c:	694b      	ldreq	r3, [r1, #20]
 800e91e:	600f      	str	r7, [r1, #0]
 800e920:	bf18      	it	ne
 800e922:	2300      	movne	r3, #0
 800e924:	eba6 0807 	sub.w	r8, r6, r7
 800e928:	608b      	str	r3, [r1, #8]
 800e92a:	f1b8 0f00 	cmp.w	r8, #0
 800e92e:	dd9c      	ble.n	800e86a <__sflush_r+0x1a>
 800e930:	4643      	mov	r3, r8
 800e932:	463a      	mov	r2, r7
 800e934:	6a21      	ldr	r1, [r4, #32]
 800e936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e938:	4628      	mov	r0, r5
 800e93a:	47b0      	blx	r6
 800e93c:	2800      	cmp	r0, #0
 800e93e:	dc06      	bgt.n	800e94e <__sflush_r+0xfe>
 800e940:	89a3      	ldrh	r3, [r4, #12]
 800e942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e946:	81a3      	strh	r3, [r4, #12]
 800e948:	f04f 30ff 	mov.w	r0, #4294967295
 800e94c:	e78e      	b.n	800e86c <__sflush_r+0x1c>
 800e94e:	4407      	add	r7, r0
 800e950:	eba8 0800 	sub.w	r8, r8, r0
 800e954:	e7e9      	b.n	800e92a <__sflush_r+0xda>
 800e956:	bf00      	nop
 800e958:	20400001 	.word	0x20400001

0800e95c <_fflush_r>:
 800e95c:	b538      	push	{r3, r4, r5, lr}
 800e95e:	690b      	ldr	r3, [r1, #16]
 800e960:	4605      	mov	r5, r0
 800e962:	460c      	mov	r4, r1
 800e964:	b1db      	cbz	r3, 800e99e <_fflush_r+0x42>
 800e966:	b118      	cbz	r0, 800e970 <_fflush_r+0x14>
 800e968:	6983      	ldr	r3, [r0, #24]
 800e96a:	b90b      	cbnz	r3, 800e970 <_fflush_r+0x14>
 800e96c:	f000 f860 	bl	800ea30 <__sinit>
 800e970:	4b0c      	ldr	r3, [pc, #48]	; (800e9a4 <_fflush_r+0x48>)
 800e972:	429c      	cmp	r4, r3
 800e974:	d109      	bne.n	800e98a <_fflush_r+0x2e>
 800e976:	686c      	ldr	r4, [r5, #4]
 800e978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e97c:	b17b      	cbz	r3, 800e99e <_fflush_r+0x42>
 800e97e:	4621      	mov	r1, r4
 800e980:	4628      	mov	r0, r5
 800e982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e986:	f7ff bf63 	b.w	800e850 <__sflush_r>
 800e98a:	4b07      	ldr	r3, [pc, #28]	; (800e9a8 <_fflush_r+0x4c>)
 800e98c:	429c      	cmp	r4, r3
 800e98e:	d101      	bne.n	800e994 <_fflush_r+0x38>
 800e990:	68ac      	ldr	r4, [r5, #8]
 800e992:	e7f1      	b.n	800e978 <_fflush_r+0x1c>
 800e994:	4b05      	ldr	r3, [pc, #20]	; (800e9ac <_fflush_r+0x50>)
 800e996:	429c      	cmp	r4, r3
 800e998:	bf08      	it	eq
 800e99a:	68ec      	ldreq	r4, [r5, #12]
 800e99c:	e7ec      	b.n	800e978 <_fflush_r+0x1c>
 800e99e:	2000      	movs	r0, #0
 800e9a0:	bd38      	pop	{r3, r4, r5, pc}
 800e9a2:	bf00      	nop
 800e9a4:	08010c6c 	.word	0x08010c6c
 800e9a8:	08010c8c 	.word	0x08010c8c
 800e9ac:	08010c4c 	.word	0x08010c4c

0800e9b0 <std>:
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	b510      	push	{r4, lr}
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	e9c0 3300 	strd	r3, r3, [r0]
 800e9ba:	6083      	str	r3, [r0, #8]
 800e9bc:	8181      	strh	r1, [r0, #12]
 800e9be:	6643      	str	r3, [r0, #100]	; 0x64
 800e9c0:	81c2      	strh	r2, [r0, #14]
 800e9c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9c6:	6183      	str	r3, [r0, #24]
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	2208      	movs	r2, #8
 800e9cc:	305c      	adds	r0, #92	; 0x5c
 800e9ce:	f7fd fd95 	bl	800c4fc <memset>
 800e9d2:	4b05      	ldr	r3, [pc, #20]	; (800e9e8 <std+0x38>)
 800e9d4:	6263      	str	r3, [r4, #36]	; 0x24
 800e9d6:	4b05      	ldr	r3, [pc, #20]	; (800e9ec <std+0x3c>)
 800e9d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9da:	4b05      	ldr	r3, [pc, #20]	; (800e9f0 <std+0x40>)
 800e9dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9de:	4b05      	ldr	r3, [pc, #20]	; (800e9f4 <std+0x44>)
 800e9e0:	6224      	str	r4, [r4, #32]
 800e9e2:	6323      	str	r3, [r4, #48]	; 0x30
 800e9e4:	bd10      	pop	{r4, pc}
 800e9e6:	bf00      	nop
 800e9e8:	0800f81d 	.word	0x0800f81d
 800e9ec:	0800f843 	.word	0x0800f843
 800e9f0:	0800f87b 	.word	0x0800f87b
 800e9f4:	0800f89f 	.word	0x0800f89f

0800e9f8 <_cleanup_r>:
 800e9f8:	4901      	ldr	r1, [pc, #4]	; (800ea00 <_cleanup_r+0x8>)
 800e9fa:	f000 b885 	b.w	800eb08 <_fwalk_reent>
 800e9fe:	bf00      	nop
 800ea00:	0800e95d 	.word	0x0800e95d

0800ea04 <__sfmoreglue>:
 800ea04:	b570      	push	{r4, r5, r6, lr}
 800ea06:	1e4a      	subs	r2, r1, #1
 800ea08:	2568      	movs	r5, #104	; 0x68
 800ea0a:	4355      	muls	r5, r2
 800ea0c:	460e      	mov	r6, r1
 800ea0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea12:	f7fe f85d 	bl	800cad0 <_malloc_r>
 800ea16:	4604      	mov	r4, r0
 800ea18:	b140      	cbz	r0, 800ea2c <__sfmoreglue+0x28>
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	e9c0 1600 	strd	r1, r6, [r0]
 800ea20:	300c      	adds	r0, #12
 800ea22:	60a0      	str	r0, [r4, #8]
 800ea24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea28:	f7fd fd68 	bl	800c4fc <memset>
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	bd70      	pop	{r4, r5, r6, pc}

0800ea30 <__sinit>:
 800ea30:	6983      	ldr	r3, [r0, #24]
 800ea32:	b510      	push	{r4, lr}
 800ea34:	4604      	mov	r4, r0
 800ea36:	bb33      	cbnz	r3, 800ea86 <__sinit+0x56>
 800ea38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ea3c:	6503      	str	r3, [r0, #80]	; 0x50
 800ea3e:	4b12      	ldr	r3, [pc, #72]	; (800ea88 <__sinit+0x58>)
 800ea40:	4a12      	ldr	r2, [pc, #72]	; (800ea8c <__sinit+0x5c>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	6282      	str	r2, [r0, #40]	; 0x28
 800ea46:	4298      	cmp	r0, r3
 800ea48:	bf04      	itt	eq
 800ea4a:	2301      	moveq	r3, #1
 800ea4c:	6183      	streq	r3, [r0, #24]
 800ea4e:	f000 f81f 	bl	800ea90 <__sfp>
 800ea52:	6060      	str	r0, [r4, #4]
 800ea54:	4620      	mov	r0, r4
 800ea56:	f000 f81b 	bl	800ea90 <__sfp>
 800ea5a:	60a0      	str	r0, [r4, #8]
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f000 f817 	bl	800ea90 <__sfp>
 800ea62:	2200      	movs	r2, #0
 800ea64:	60e0      	str	r0, [r4, #12]
 800ea66:	2104      	movs	r1, #4
 800ea68:	6860      	ldr	r0, [r4, #4]
 800ea6a:	f7ff ffa1 	bl	800e9b0 <std>
 800ea6e:	2201      	movs	r2, #1
 800ea70:	2109      	movs	r1, #9
 800ea72:	68a0      	ldr	r0, [r4, #8]
 800ea74:	f7ff ff9c 	bl	800e9b0 <std>
 800ea78:	2202      	movs	r2, #2
 800ea7a:	2112      	movs	r1, #18
 800ea7c:	68e0      	ldr	r0, [r4, #12]
 800ea7e:	f7ff ff97 	bl	800e9b0 <std>
 800ea82:	2301      	movs	r3, #1
 800ea84:	61a3      	str	r3, [r4, #24]
 800ea86:	bd10      	pop	{r4, pc}
 800ea88:	08010b6c 	.word	0x08010b6c
 800ea8c:	0800e9f9 	.word	0x0800e9f9

0800ea90 <__sfp>:
 800ea90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea92:	4b1b      	ldr	r3, [pc, #108]	; (800eb00 <__sfp+0x70>)
 800ea94:	681e      	ldr	r6, [r3, #0]
 800ea96:	69b3      	ldr	r3, [r6, #24]
 800ea98:	4607      	mov	r7, r0
 800ea9a:	b913      	cbnz	r3, 800eaa2 <__sfp+0x12>
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	f7ff ffc7 	bl	800ea30 <__sinit>
 800eaa2:	3648      	adds	r6, #72	; 0x48
 800eaa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	d503      	bpl.n	800eab4 <__sfp+0x24>
 800eaac:	6833      	ldr	r3, [r6, #0]
 800eaae:	b133      	cbz	r3, 800eabe <__sfp+0x2e>
 800eab0:	6836      	ldr	r6, [r6, #0]
 800eab2:	e7f7      	b.n	800eaa4 <__sfp+0x14>
 800eab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eab8:	b16d      	cbz	r5, 800ead6 <__sfp+0x46>
 800eaba:	3468      	adds	r4, #104	; 0x68
 800eabc:	e7f4      	b.n	800eaa8 <__sfp+0x18>
 800eabe:	2104      	movs	r1, #4
 800eac0:	4638      	mov	r0, r7
 800eac2:	f7ff ff9f 	bl	800ea04 <__sfmoreglue>
 800eac6:	6030      	str	r0, [r6, #0]
 800eac8:	2800      	cmp	r0, #0
 800eaca:	d1f1      	bne.n	800eab0 <__sfp+0x20>
 800eacc:	230c      	movs	r3, #12
 800eace:	603b      	str	r3, [r7, #0]
 800ead0:	4604      	mov	r4, r0
 800ead2:	4620      	mov	r0, r4
 800ead4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ead6:	4b0b      	ldr	r3, [pc, #44]	; (800eb04 <__sfp+0x74>)
 800ead8:	6665      	str	r5, [r4, #100]	; 0x64
 800eada:	e9c4 5500 	strd	r5, r5, [r4]
 800eade:	60a5      	str	r5, [r4, #8]
 800eae0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800eae4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800eae8:	2208      	movs	r2, #8
 800eaea:	4629      	mov	r1, r5
 800eaec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eaf0:	f7fd fd04 	bl	800c4fc <memset>
 800eaf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eaf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eafc:	e7e9      	b.n	800ead2 <__sfp+0x42>
 800eafe:	bf00      	nop
 800eb00:	08010b6c 	.word	0x08010b6c
 800eb04:	ffff0001 	.word	0xffff0001

0800eb08 <_fwalk_reent>:
 800eb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb0c:	4680      	mov	r8, r0
 800eb0e:	4689      	mov	r9, r1
 800eb10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb14:	2600      	movs	r6, #0
 800eb16:	b914      	cbnz	r4, 800eb1e <_fwalk_reent+0x16>
 800eb18:	4630      	mov	r0, r6
 800eb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800eb22:	3f01      	subs	r7, #1
 800eb24:	d501      	bpl.n	800eb2a <_fwalk_reent+0x22>
 800eb26:	6824      	ldr	r4, [r4, #0]
 800eb28:	e7f5      	b.n	800eb16 <_fwalk_reent+0xe>
 800eb2a:	89ab      	ldrh	r3, [r5, #12]
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d907      	bls.n	800eb40 <_fwalk_reent+0x38>
 800eb30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb34:	3301      	adds	r3, #1
 800eb36:	d003      	beq.n	800eb40 <_fwalk_reent+0x38>
 800eb38:	4629      	mov	r1, r5
 800eb3a:	4640      	mov	r0, r8
 800eb3c:	47c8      	blx	r9
 800eb3e:	4306      	orrs	r6, r0
 800eb40:	3568      	adds	r5, #104	; 0x68
 800eb42:	e7ee      	b.n	800eb22 <_fwalk_reent+0x1a>

0800eb44 <_findenv_r>:
 800eb44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb48:	4607      	mov	r7, r0
 800eb4a:	468b      	mov	fp, r1
 800eb4c:	4690      	mov	r8, r2
 800eb4e:	f000 ff81 	bl	800fa54 <__env_lock>
 800eb52:	4b19      	ldr	r3, [pc, #100]	; (800ebb8 <_findenv_r+0x74>)
 800eb54:	681d      	ldr	r5, [r3, #0]
 800eb56:	469a      	mov	sl, r3
 800eb58:	b13d      	cbz	r5, 800eb6a <_findenv_r+0x26>
 800eb5a:	465c      	mov	r4, fp
 800eb5c:	4623      	mov	r3, r4
 800eb5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb62:	b32a      	cbz	r2, 800ebb0 <_findenv_r+0x6c>
 800eb64:	2a3d      	cmp	r2, #61	; 0x3d
 800eb66:	461c      	mov	r4, r3
 800eb68:	d1f8      	bne.n	800eb5c <_findenv_r+0x18>
 800eb6a:	4638      	mov	r0, r7
 800eb6c:	f000 ff73 	bl	800fa56 <__env_unlock>
 800eb70:	2000      	movs	r0, #0
 800eb72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb76:	464d      	mov	r5, r9
 800eb78:	46a9      	mov	r9, r5
 800eb7a:	f859 0b04 	ldr.w	r0, [r9], #4
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	d0f3      	beq.n	800eb6a <_findenv_r+0x26>
 800eb82:	4622      	mov	r2, r4
 800eb84:	4659      	mov	r1, fp
 800eb86:	f000 fe8e 	bl	800f8a6 <strncmp>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d1f3      	bne.n	800eb76 <_findenv_r+0x32>
 800eb8e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800eb92:	191e      	adds	r6, r3, r4
 800eb94:	5d1b      	ldrb	r3, [r3, r4]
 800eb96:	2b3d      	cmp	r3, #61	; 0x3d
 800eb98:	d1ed      	bne.n	800eb76 <_findenv_r+0x32>
 800eb9a:	f8da 3000 	ldr.w	r3, [sl]
 800eb9e:	1aed      	subs	r5, r5, r3
 800eba0:	10ad      	asrs	r5, r5, #2
 800eba2:	4638      	mov	r0, r7
 800eba4:	f8c8 5000 	str.w	r5, [r8]
 800eba8:	f000 ff55 	bl	800fa56 <__env_unlock>
 800ebac:	1c70      	adds	r0, r6, #1
 800ebae:	e7e0      	b.n	800eb72 <_findenv_r+0x2e>
 800ebb0:	eba4 040b 	sub.w	r4, r4, fp
 800ebb4:	e7e0      	b.n	800eb78 <_findenv_r+0x34>
 800ebb6:	bf00      	nop
 800ebb8:	20000000 	.word	0x20000000

0800ebbc <_getenv_r>:
 800ebbc:	b507      	push	{r0, r1, r2, lr}
 800ebbe:	aa01      	add	r2, sp, #4
 800ebc0:	f7ff ffc0 	bl	800eb44 <_findenv_r>
 800ebc4:	b003      	add	sp, #12
 800ebc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ebcc <__gettzinfo>:
 800ebcc:	4800      	ldr	r0, [pc, #0]	; (800ebd0 <__gettzinfo+0x4>)
 800ebce:	4770      	bx	lr
 800ebd0:	20000080 	.word	0x20000080

0800ebd4 <_localeconv_r>:
 800ebd4:	4b04      	ldr	r3, [pc, #16]	; (800ebe8 <_localeconv_r+0x14>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	6a18      	ldr	r0, [r3, #32]
 800ebda:	4b04      	ldr	r3, [pc, #16]	; (800ebec <_localeconv_r+0x18>)
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	bf08      	it	eq
 800ebe0:	4618      	moveq	r0, r3
 800ebe2:	30f0      	adds	r0, #240	; 0xf0
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop
 800ebe8:	20000010 	.word	0x20000010
 800ebec:	200000d8 	.word	0x200000d8

0800ebf0 <__swhatbuf_r>:
 800ebf0:	b570      	push	{r4, r5, r6, lr}
 800ebf2:	460e      	mov	r6, r1
 800ebf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf8:	2900      	cmp	r1, #0
 800ebfa:	b096      	sub	sp, #88	; 0x58
 800ebfc:	4614      	mov	r4, r2
 800ebfe:	461d      	mov	r5, r3
 800ec00:	da07      	bge.n	800ec12 <__swhatbuf_r+0x22>
 800ec02:	2300      	movs	r3, #0
 800ec04:	602b      	str	r3, [r5, #0]
 800ec06:	89b3      	ldrh	r3, [r6, #12]
 800ec08:	061a      	lsls	r2, r3, #24
 800ec0a:	d410      	bmi.n	800ec2e <__swhatbuf_r+0x3e>
 800ec0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec10:	e00e      	b.n	800ec30 <__swhatbuf_r+0x40>
 800ec12:	466a      	mov	r2, sp
 800ec14:	f000 ff20 	bl	800fa58 <_fstat_r>
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	dbf2      	blt.n	800ec02 <__swhatbuf_r+0x12>
 800ec1c:	9a01      	ldr	r2, [sp, #4]
 800ec1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ec22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ec26:	425a      	negs	r2, r3
 800ec28:	415a      	adcs	r2, r3
 800ec2a:	602a      	str	r2, [r5, #0]
 800ec2c:	e7ee      	b.n	800ec0c <__swhatbuf_r+0x1c>
 800ec2e:	2340      	movs	r3, #64	; 0x40
 800ec30:	2000      	movs	r0, #0
 800ec32:	6023      	str	r3, [r4, #0]
 800ec34:	b016      	add	sp, #88	; 0x58
 800ec36:	bd70      	pop	{r4, r5, r6, pc}

0800ec38 <__smakebuf_r>:
 800ec38:	898b      	ldrh	r3, [r1, #12]
 800ec3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec3c:	079d      	lsls	r5, r3, #30
 800ec3e:	4606      	mov	r6, r0
 800ec40:	460c      	mov	r4, r1
 800ec42:	d507      	bpl.n	800ec54 <__smakebuf_r+0x1c>
 800ec44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec48:	6023      	str	r3, [r4, #0]
 800ec4a:	6123      	str	r3, [r4, #16]
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	6163      	str	r3, [r4, #20]
 800ec50:	b002      	add	sp, #8
 800ec52:	bd70      	pop	{r4, r5, r6, pc}
 800ec54:	ab01      	add	r3, sp, #4
 800ec56:	466a      	mov	r2, sp
 800ec58:	f7ff ffca 	bl	800ebf0 <__swhatbuf_r>
 800ec5c:	9900      	ldr	r1, [sp, #0]
 800ec5e:	4605      	mov	r5, r0
 800ec60:	4630      	mov	r0, r6
 800ec62:	f7fd ff35 	bl	800cad0 <_malloc_r>
 800ec66:	b948      	cbnz	r0, 800ec7c <__smakebuf_r+0x44>
 800ec68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec6c:	059a      	lsls	r2, r3, #22
 800ec6e:	d4ef      	bmi.n	800ec50 <__smakebuf_r+0x18>
 800ec70:	f023 0303 	bic.w	r3, r3, #3
 800ec74:	f043 0302 	orr.w	r3, r3, #2
 800ec78:	81a3      	strh	r3, [r4, #12]
 800ec7a:	e7e3      	b.n	800ec44 <__smakebuf_r+0xc>
 800ec7c:	4b0d      	ldr	r3, [pc, #52]	; (800ecb4 <__smakebuf_r+0x7c>)
 800ec7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	6020      	str	r0, [r4, #0]
 800ec84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec88:	81a3      	strh	r3, [r4, #12]
 800ec8a:	9b00      	ldr	r3, [sp, #0]
 800ec8c:	6163      	str	r3, [r4, #20]
 800ec8e:	9b01      	ldr	r3, [sp, #4]
 800ec90:	6120      	str	r0, [r4, #16]
 800ec92:	b15b      	cbz	r3, 800ecac <__smakebuf_r+0x74>
 800ec94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec98:	4630      	mov	r0, r6
 800ec9a:	f000 feef 	bl	800fa7c <_isatty_r>
 800ec9e:	b128      	cbz	r0, 800ecac <__smakebuf_r+0x74>
 800eca0:	89a3      	ldrh	r3, [r4, #12]
 800eca2:	f023 0303 	bic.w	r3, r3, #3
 800eca6:	f043 0301 	orr.w	r3, r3, #1
 800ecaa:	81a3      	strh	r3, [r4, #12]
 800ecac:	89a3      	ldrh	r3, [r4, #12]
 800ecae:	431d      	orrs	r5, r3
 800ecb0:	81a5      	strh	r5, [r4, #12]
 800ecb2:	e7cd      	b.n	800ec50 <__smakebuf_r+0x18>
 800ecb4:	0800e9f9 	.word	0x0800e9f9

0800ecb8 <memcpy>:
 800ecb8:	b510      	push	{r4, lr}
 800ecba:	1e43      	subs	r3, r0, #1
 800ecbc:	440a      	add	r2, r1
 800ecbe:	4291      	cmp	r1, r2
 800ecc0:	d100      	bne.n	800ecc4 <memcpy+0xc>
 800ecc2:	bd10      	pop	{r4, pc}
 800ecc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eccc:	e7f7      	b.n	800ecbe <memcpy+0x6>

0800ecce <__malloc_lock>:
 800ecce:	4770      	bx	lr

0800ecd0 <__malloc_unlock>:
 800ecd0:	4770      	bx	lr

0800ecd2 <_Balloc>:
 800ecd2:	b570      	push	{r4, r5, r6, lr}
 800ecd4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	460e      	mov	r6, r1
 800ecda:	b93d      	cbnz	r5, 800ecec <_Balloc+0x1a>
 800ecdc:	2010      	movs	r0, #16
 800ecde:	f7fd fbfd 	bl	800c4dc <malloc>
 800ece2:	6260      	str	r0, [r4, #36]	; 0x24
 800ece4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ece8:	6005      	str	r5, [r0, #0]
 800ecea:	60c5      	str	r5, [r0, #12]
 800ecec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ecee:	68eb      	ldr	r3, [r5, #12]
 800ecf0:	b183      	cbz	r3, 800ed14 <_Balloc+0x42>
 800ecf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ecfa:	b9b8      	cbnz	r0, 800ed2c <_Balloc+0x5a>
 800ecfc:	2101      	movs	r1, #1
 800ecfe:	fa01 f506 	lsl.w	r5, r1, r6
 800ed02:	1d6a      	adds	r2, r5, #5
 800ed04:	0092      	lsls	r2, r2, #2
 800ed06:	4620      	mov	r0, r4
 800ed08:	f000 fabe 	bl	800f288 <_calloc_r>
 800ed0c:	b160      	cbz	r0, 800ed28 <_Balloc+0x56>
 800ed0e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ed12:	e00e      	b.n	800ed32 <_Balloc+0x60>
 800ed14:	2221      	movs	r2, #33	; 0x21
 800ed16:	2104      	movs	r1, #4
 800ed18:	4620      	mov	r0, r4
 800ed1a:	f000 fab5 	bl	800f288 <_calloc_r>
 800ed1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed20:	60e8      	str	r0, [r5, #12]
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d1e4      	bne.n	800ecf2 <_Balloc+0x20>
 800ed28:	2000      	movs	r0, #0
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}
 800ed2c:	6802      	ldr	r2, [r0, #0]
 800ed2e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ed32:	2300      	movs	r3, #0
 800ed34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed38:	e7f7      	b.n	800ed2a <_Balloc+0x58>

0800ed3a <_Bfree>:
 800ed3a:	b570      	push	{r4, r5, r6, lr}
 800ed3c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ed3e:	4606      	mov	r6, r0
 800ed40:	460d      	mov	r5, r1
 800ed42:	b93c      	cbnz	r4, 800ed54 <_Bfree+0x1a>
 800ed44:	2010      	movs	r0, #16
 800ed46:	f7fd fbc9 	bl	800c4dc <malloc>
 800ed4a:	6270      	str	r0, [r6, #36]	; 0x24
 800ed4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed50:	6004      	str	r4, [r0, #0]
 800ed52:	60c4      	str	r4, [r0, #12]
 800ed54:	b13d      	cbz	r5, 800ed66 <_Bfree+0x2c>
 800ed56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ed58:	686a      	ldr	r2, [r5, #4]
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed60:	6029      	str	r1, [r5, #0]
 800ed62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ed66:	bd70      	pop	{r4, r5, r6, pc}

0800ed68 <__multadd>:
 800ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed6c:	690d      	ldr	r5, [r1, #16]
 800ed6e:	461f      	mov	r7, r3
 800ed70:	4606      	mov	r6, r0
 800ed72:	460c      	mov	r4, r1
 800ed74:	f101 0c14 	add.w	ip, r1, #20
 800ed78:	2300      	movs	r3, #0
 800ed7a:	f8dc 0000 	ldr.w	r0, [ip]
 800ed7e:	b281      	uxth	r1, r0
 800ed80:	fb02 7101 	mla	r1, r2, r1, r7
 800ed84:	0c0f      	lsrs	r7, r1, #16
 800ed86:	0c00      	lsrs	r0, r0, #16
 800ed88:	fb02 7000 	mla	r0, r2, r0, r7
 800ed8c:	b289      	uxth	r1, r1
 800ed8e:	3301      	adds	r3, #1
 800ed90:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ed94:	429d      	cmp	r5, r3
 800ed96:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ed9a:	f84c 1b04 	str.w	r1, [ip], #4
 800ed9e:	dcec      	bgt.n	800ed7a <__multadd+0x12>
 800eda0:	b1d7      	cbz	r7, 800edd8 <__multadd+0x70>
 800eda2:	68a3      	ldr	r3, [r4, #8]
 800eda4:	42ab      	cmp	r3, r5
 800eda6:	dc12      	bgt.n	800edce <__multadd+0x66>
 800eda8:	6861      	ldr	r1, [r4, #4]
 800edaa:	4630      	mov	r0, r6
 800edac:	3101      	adds	r1, #1
 800edae:	f7ff ff90 	bl	800ecd2 <_Balloc>
 800edb2:	6922      	ldr	r2, [r4, #16]
 800edb4:	3202      	adds	r2, #2
 800edb6:	f104 010c 	add.w	r1, r4, #12
 800edba:	4680      	mov	r8, r0
 800edbc:	0092      	lsls	r2, r2, #2
 800edbe:	300c      	adds	r0, #12
 800edc0:	f7ff ff7a 	bl	800ecb8 <memcpy>
 800edc4:	4621      	mov	r1, r4
 800edc6:	4630      	mov	r0, r6
 800edc8:	f7ff ffb7 	bl	800ed3a <_Bfree>
 800edcc:	4644      	mov	r4, r8
 800edce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800edd2:	3501      	adds	r5, #1
 800edd4:	615f      	str	r7, [r3, #20]
 800edd6:	6125      	str	r5, [r4, #16]
 800edd8:	4620      	mov	r0, r4
 800edda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800edde <__hi0bits>:
 800edde:	0c02      	lsrs	r2, r0, #16
 800ede0:	0412      	lsls	r2, r2, #16
 800ede2:	4603      	mov	r3, r0
 800ede4:	b9b2      	cbnz	r2, 800ee14 <__hi0bits+0x36>
 800ede6:	0403      	lsls	r3, r0, #16
 800ede8:	2010      	movs	r0, #16
 800edea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800edee:	bf04      	itt	eq
 800edf0:	021b      	lsleq	r3, r3, #8
 800edf2:	3008      	addeq	r0, #8
 800edf4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800edf8:	bf04      	itt	eq
 800edfa:	011b      	lsleq	r3, r3, #4
 800edfc:	3004      	addeq	r0, #4
 800edfe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ee02:	bf04      	itt	eq
 800ee04:	009b      	lsleq	r3, r3, #2
 800ee06:	3002      	addeq	r0, #2
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	db06      	blt.n	800ee1a <__hi0bits+0x3c>
 800ee0c:	005b      	lsls	r3, r3, #1
 800ee0e:	d503      	bpl.n	800ee18 <__hi0bits+0x3a>
 800ee10:	3001      	adds	r0, #1
 800ee12:	4770      	bx	lr
 800ee14:	2000      	movs	r0, #0
 800ee16:	e7e8      	b.n	800edea <__hi0bits+0xc>
 800ee18:	2020      	movs	r0, #32
 800ee1a:	4770      	bx	lr

0800ee1c <__lo0bits>:
 800ee1c:	6803      	ldr	r3, [r0, #0]
 800ee1e:	f013 0207 	ands.w	r2, r3, #7
 800ee22:	4601      	mov	r1, r0
 800ee24:	d00b      	beq.n	800ee3e <__lo0bits+0x22>
 800ee26:	07da      	lsls	r2, r3, #31
 800ee28:	d423      	bmi.n	800ee72 <__lo0bits+0x56>
 800ee2a:	0798      	lsls	r0, r3, #30
 800ee2c:	bf49      	itett	mi
 800ee2e:	085b      	lsrmi	r3, r3, #1
 800ee30:	089b      	lsrpl	r3, r3, #2
 800ee32:	2001      	movmi	r0, #1
 800ee34:	600b      	strmi	r3, [r1, #0]
 800ee36:	bf5c      	itt	pl
 800ee38:	600b      	strpl	r3, [r1, #0]
 800ee3a:	2002      	movpl	r0, #2
 800ee3c:	4770      	bx	lr
 800ee3e:	b298      	uxth	r0, r3
 800ee40:	b9a8      	cbnz	r0, 800ee6e <__lo0bits+0x52>
 800ee42:	0c1b      	lsrs	r3, r3, #16
 800ee44:	2010      	movs	r0, #16
 800ee46:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ee4a:	bf04      	itt	eq
 800ee4c:	0a1b      	lsreq	r3, r3, #8
 800ee4e:	3008      	addeq	r0, #8
 800ee50:	071a      	lsls	r2, r3, #28
 800ee52:	bf04      	itt	eq
 800ee54:	091b      	lsreq	r3, r3, #4
 800ee56:	3004      	addeq	r0, #4
 800ee58:	079a      	lsls	r2, r3, #30
 800ee5a:	bf04      	itt	eq
 800ee5c:	089b      	lsreq	r3, r3, #2
 800ee5e:	3002      	addeq	r0, #2
 800ee60:	07da      	lsls	r2, r3, #31
 800ee62:	d402      	bmi.n	800ee6a <__lo0bits+0x4e>
 800ee64:	085b      	lsrs	r3, r3, #1
 800ee66:	d006      	beq.n	800ee76 <__lo0bits+0x5a>
 800ee68:	3001      	adds	r0, #1
 800ee6a:	600b      	str	r3, [r1, #0]
 800ee6c:	4770      	bx	lr
 800ee6e:	4610      	mov	r0, r2
 800ee70:	e7e9      	b.n	800ee46 <__lo0bits+0x2a>
 800ee72:	2000      	movs	r0, #0
 800ee74:	4770      	bx	lr
 800ee76:	2020      	movs	r0, #32
 800ee78:	4770      	bx	lr

0800ee7a <__i2b>:
 800ee7a:	b510      	push	{r4, lr}
 800ee7c:	460c      	mov	r4, r1
 800ee7e:	2101      	movs	r1, #1
 800ee80:	f7ff ff27 	bl	800ecd2 <_Balloc>
 800ee84:	2201      	movs	r2, #1
 800ee86:	6144      	str	r4, [r0, #20]
 800ee88:	6102      	str	r2, [r0, #16]
 800ee8a:	bd10      	pop	{r4, pc}

0800ee8c <__multiply>:
 800ee8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee90:	4614      	mov	r4, r2
 800ee92:	690a      	ldr	r2, [r1, #16]
 800ee94:	6923      	ldr	r3, [r4, #16]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	bfb8      	it	lt
 800ee9a:	460b      	movlt	r3, r1
 800ee9c:	4688      	mov	r8, r1
 800ee9e:	bfbc      	itt	lt
 800eea0:	46a0      	movlt	r8, r4
 800eea2:	461c      	movlt	r4, r3
 800eea4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eea8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800eeac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eeb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eeb4:	eb07 0609 	add.w	r6, r7, r9
 800eeb8:	42b3      	cmp	r3, r6
 800eeba:	bfb8      	it	lt
 800eebc:	3101      	addlt	r1, #1
 800eebe:	f7ff ff08 	bl	800ecd2 <_Balloc>
 800eec2:	f100 0514 	add.w	r5, r0, #20
 800eec6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800eeca:	462b      	mov	r3, r5
 800eecc:	2200      	movs	r2, #0
 800eece:	4573      	cmp	r3, lr
 800eed0:	d316      	bcc.n	800ef00 <__multiply+0x74>
 800eed2:	f104 0214 	add.w	r2, r4, #20
 800eed6:	f108 0114 	add.w	r1, r8, #20
 800eeda:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800eede:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800eee2:	9300      	str	r3, [sp, #0]
 800eee4:	9b00      	ldr	r3, [sp, #0]
 800eee6:	9201      	str	r2, [sp, #4]
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d80c      	bhi.n	800ef06 <__multiply+0x7a>
 800eeec:	2e00      	cmp	r6, #0
 800eeee:	dd03      	ble.n	800eef8 <__multiply+0x6c>
 800eef0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d05d      	beq.n	800efb4 <__multiply+0x128>
 800eef8:	6106      	str	r6, [r0, #16]
 800eefa:	b003      	add	sp, #12
 800eefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef00:	f843 2b04 	str.w	r2, [r3], #4
 800ef04:	e7e3      	b.n	800eece <__multiply+0x42>
 800ef06:	f8b2 b000 	ldrh.w	fp, [r2]
 800ef0a:	f1bb 0f00 	cmp.w	fp, #0
 800ef0e:	d023      	beq.n	800ef58 <__multiply+0xcc>
 800ef10:	4689      	mov	r9, r1
 800ef12:	46ac      	mov	ip, r5
 800ef14:	f04f 0800 	mov.w	r8, #0
 800ef18:	f859 4b04 	ldr.w	r4, [r9], #4
 800ef1c:	f8dc a000 	ldr.w	sl, [ip]
 800ef20:	b2a3      	uxth	r3, r4
 800ef22:	fa1f fa8a 	uxth.w	sl, sl
 800ef26:	fb0b a303 	mla	r3, fp, r3, sl
 800ef2a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ef2e:	f8dc 4000 	ldr.w	r4, [ip]
 800ef32:	4443      	add	r3, r8
 800ef34:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ef38:	fb0b 840a 	mla	r4, fp, sl, r8
 800ef3c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ef40:	46e2      	mov	sl, ip
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ef48:	454f      	cmp	r7, r9
 800ef4a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ef4e:	f84a 3b04 	str.w	r3, [sl], #4
 800ef52:	d82b      	bhi.n	800efac <__multiply+0x120>
 800ef54:	f8cc 8004 	str.w	r8, [ip, #4]
 800ef58:	9b01      	ldr	r3, [sp, #4]
 800ef5a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ef5e:	3204      	adds	r2, #4
 800ef60:	f1ba 0f00 	cmp.w	sl, #0
 800ef64:	d020      	beq.n	800efa8 <__multiply+0x11c>
 800ef66:	682b      	ldr	r3, [r5, #0]
 800ef68:	4689      	mov	r9, r1
 800ef6a:	46a8      	mov	r8, r5
 800ef6c:	f04f 0b00 	mov.w	fp, #0
 800ef70:	f8b9 c000 	ldrh.w	ip, [r9]
 800ef74:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ef78:	fb0a 440c 	mla	r4, sl, ip, r4
 800ef7c:	445c      	add	r4, fp
 800ef7e:	46c4      	mov	ip, r8
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ef86:	f84c 3b04 	str.w	r3, [ip], #4
 800ef8a:	f859 3b04 	ldr.w	r3, [r9], #4
 800ef8e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ef92:	0c1b      	lsrs	r3, r3, #16
 800ef94:	fb0a b303 	mla	r3, sl, r3, fp
 800ef98:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ef9c:	454f      	cmp	r7, r9
 800ef9e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800efa2:	d805      	bhi.n	800efb0 <__multiply+0x124>
 800efa4:	f8c8 3004 	str.w	r3, [r8, #4]
 800efa8:	3504      	adds	r5, #4
 800efaa:	e79b      	b.n	800eee4 <__multiply+0x58>
 800efac:	46d4      	mov	ip, sl
 800efae:	e7b3      	b.n	800ef18 <__multiply+0x8c>
 800efb0:	46e0      	mov	r8, ip
 800efb2:	e7dd      	b.n	800ef70 <__multiply+0xe4>
 800efb4:	3e01      	subs	r6, #1
 800efb6:	e799      	b.n	800eeec <__multiply+0x60>

0800efb8 <__pow5mult>:
 800efb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efbc:	4615      	mov	r5, r2
 800efbe:	f012 0203 	ands.w	r2, r2, #3
 800efc2:	4606      	mov	r6, r0
 800efc4:	460f      	mov	r7, r1
 800efc6:	d007      	beq.n	800efd8 <__pow5mult+0x20>
 800efc8:	3a01      	subs	r2, #1
 800efca:	4c21      	ldr	r4, [pc, #132]	; (800f050 <__pow5mult+0x98>)
 800efcc:	2300      	movs	r3, #0
 800efce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800efd2:	f7ff fec9 	bl	800ed68 <__multadd>
 800efd6:	4607      	mov	r7, r0
 800efd8:	10ad      	asrs	r5, r5, #2
 800efda:	d035      	beq.n	800f048 <__pow5mult+0x90>
 800efdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800efde:	b93c      	cbnz	r4, 800eff0 <__pow5mult+0x38>
 800efe0:	2010      	movs	r0, #16
 800efe2:	f7fd fa7b 	bl	800c4dc <malloc>
 800efe6:	6270      	str	r0, [r6, #36]	; 0x24
 800efe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800efec:	6004      	str	r4, [r0, #0]
 800efee:	60c4      	str	r4, [r0, #12]
 800eff0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eff8:	b94c      	cbnz	r4, 800f00e <__pow5mult+0x56>
 800effa:	f240 2171 	movw	r1, #625	; 0x271
 800effe:	4630      	mov	r0, r6
 800f000:	f7ff ff3b 	bl	800ee7a <__i2b>
 800f004:	2300      	movs	r3, #0
 800f006:	f8c8 0008 	str.w	r0, [r8, #8]
 800f00a:	4604      	mov	r4, r0
 800f00c:	6003      	str	r3, [r0, #0]
 800f00e:	f04f 0800 	mov.w	r8, #0
 800f012:	07eb      	lsls	r3, r5, #31
 800f014:	d50a      	bpl.n	800f02c <__pow5mult+0x74>
 800f016:	4639      	mov	r1, r7
 800f018:	4622      	mov	r2, r4
 800f01a:	4630      	mov	r0, r6
 800f01c:	f7ff ff36 	bl	800ee8c <__multiply>
 800f020:	4639      	mov	r1, r7
 800f022:	4681      	mov	r9, r0
 800f024:	4630      	mov	r0, r6
 800f026:	f7ff fe88 	bl	800ed3a <_Bfree>
 800f02a:	464f      	mov	r7, r9
 800f02c:	106d      	asrs	r5, r5, #1
 800f02e:	d00b      	beq.n	800f048 <__pow5mult+0x90>
 800f030:	6820      	ldr	r0, [r4, #0]
 800f032:	b938      	cbnz	r0, 800f044 <__pow5mult+0x8c>
 800f034:	4622      	mov	r2, r4
 800f036:	4621      	mov	r1, r4
 800f038:	4630      	mov	r0, r6
 800f03a:	f7ff ff27 	bl	800ee8c <__multiply>
 800f03e:	6020      	str	r0, [r4, #0]
 800f040:	f8c0 8000 	str.w	r8, [r0]
 800f044:	4604      	mov	r4, r0
 800f046:	e7e4      	b.n	800f012 <__pow5mult+0x5a>
 800f048:	4638      	mov	r0, r7
 800f04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f04e:	bf00      	nop
 800f050:	08010e00 	.word	0x08010e00

0800f054 <__lshift>:
 800f054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f058:	460c      	mov	r4, r1
 800f05a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f05e:	6923      	ldr	r3, [r4, #16]
 800f060:	6849      	ldr	r1, [r1, #4]
 800f062:	eb0a 0903 	add.w	r9, sl, r3
 800f066:	68a3      	ldr	r3, [r4, #8]
 800f068:	4607      	mov	r7, r0
 800f06a:	4616      	mov	r6, r2
 800f06c:	f109 0501 	add.w	r5, r9, #1
 800f070:	42ab      	cmp	r3, r5
 800f072:	db32      	blt.n	800f0da <__lshift+0x86>
 800f074:	4638      	mov	r0, r7
 800f076:	f7ff fe2c 	bl	800ecd2 <_Balloc>
 800f07a:	2300      	movs	r3, #0
 800f07c:	4680      	mov	r8, r0
 800f07e:	f100 0114 	add.w	r1, r0, #20
 800f082:	461a      	mov	r2, r3
 800f084:	4553      	cmp	r3, sl
 800f086:	db2b      	blt.n	800f0e0 <__lshift+0x8c>
 800f088:	6920      	ldr	r0, [r4, #16]
 800f08a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f08e:	f104 0314 	add.w	r3, r4, #20
 800f092:	f016 021f 	ands.w	r2, r6, #31
 800f096:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f09a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f09e:	d025      	beq.n	800f0ec <__lshift+0x98>
 800f0a0:	f1c2 0e20 	rsb	lr, r2, #32
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	681e      	ldr	r6, [r3, #0]
 800f0a8:	468a      	mov	sl, r1
 800f0aa:	4096      	lsls	r6, r2
 800f0ac:	4330      	orrs	r0, r6
 800f0ae:	f84a 0b04 	str.w	r0, [sl], #4
 800f0b2:	f853 0b04 	ldr.w	r0, [r3], #4
 800f0b6:	459c      	cmp	ip, r3
 800f0b8:	fa20 f00e 	lsr.w	r0, r0, lr
 800f0bc:	d814      	bhi.n	800f0e8 <__lshift+0x94>
 800f0be:	6048      	str	r0, [r1, #4]
 800f0c0:	b108      	cbz	r0, 800f0c6 <__lshift+0x72>
 800f0c2:	f109 0502 	add.w	r5, r9, #2
 800f0c6:	3d01      	subs	r5, #1
 800f0c8:	4638      	mov	r0, r7
 800f0ca:	f8c8 5010 	str.w	r5, [r8, #16]
 800f0ce:	4621      	mov	r1, r4
 800f0d0:	f7ff fe33 	bl	800ed3a <_Bfree>
 800f0d4:	4640      	mov	r0, r8
 800f0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0da:	3101      	adds	r1, #1
 800f0dc:	005b      	lsls	r3, r3, #1
 800f0de:	e7c7      	b.n	800f070 <__lshift+0x1c>
 800f0e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	e7cd      	b.n	800f084 <__lshift+0x30>
 800f0e8:	4651      	mov	r1, sl
 800f0ea:	e7dc      	b.n	800f0a6 <__lshift+0x52>
 800f0ec:	3904      	subs	r1, #4
 800f0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800f0f6:	459c      	cmp	ip, r3
 800f0f8:	d8f9      	bhi.n	800f0ee <__lshift+0x9a>
 800f0fa:	e7e4      	b.n	800f0c6 <__lshift+0x72>

0800f0fc <__mcmp>:
 800f0fc:	6903      	ldr	r3, [r0, #16]
 800f0fe:	690a      	ldr	r2, [r1, #16]
 800f100:	1a9b      	subs	r3, r3, r2
 800f102:	b530      	push	{r4, r5, lr}
 800f104:	d10c      	bne.n	800f120 <__mcmp+0x24>
 800f106:	0092      	lsls	r2, r2, #2
 800f108:	3014      	adds	r0, #20
 800f10a:	3114      	adds	r1, #20
 800f10c:	1884      	adds	r4, r0, r2
 800f10e:	4411      	add	r1, r2
 800f110:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f114:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f118:	4295      	cmp	r5, r2
 800f11a:	d003      	beq.n	800f124 <__mcmp+0x28>
 800f11c:	d305      	bcc.n	800f12a <__mcmp+0x2e>
 800f11e:	2301      	movs	r3, #1
 800f120:	4618      	mov	r0, r3
 800f122:	bd30      	pop	{r4, r5, pc}
 800f124:	42a0      	cmp	r0, r4
 800f126:	d3f3      	bcc.n	800f110 <__mcmp+0x14>
 800f128:	e7fa      	b.n	800f120 <__mcmp+0x24>
 800f12a:	f04f 33ff 	mov.w	r3, #4294967295
 800f12e:	e7f7      	b.n	800f120 <__mcmp+0x24>

0800f130 <__mdiff>:
 800f130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f134:	460d      	mov	r5, r1
 800f136:	4607      	mov	r7, r0
 800f138:	4611      	mov	r1, r2
 800f13a:	4628      	mov	r0, r5
 800f13c:	4614      	mov	r4, r2
 800f13e:	f7ff ffdd 	bl	800f0fc <__mcmp>
 800f142:	1e06      	subs	r6, r0, #0
 800f144:	d108      	bne.n	800f158 <__mdiff+0x28>
 800f146:	4631      	mov	r1, r6
 800f148:	4638      	mov	r0, r7
 800f14a:	f7ff fdc2 	bl	800ecd2 <_Balloc>
 800f14e:	2301      	movs	r3, #1
 800f150:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f158:	bfa4      	itt	ge
 800f15a:	4623      	movge	r3, r4
 800f15c:	462c      	movge	r4, r5
 800f15e:	4638      	mov	r0, r7
 800f160:	6861      	ldr	r1, [r4, #4]
 800f162:	bfa6      	itte	ge
 800f164:	461d      	movge	r5, r3
 800f166:	2600      	movge	r6, #0
 800f168:	2601      	movlt	r6, #1
 800f16a:	f7ff fdb2 	bl	800ecd2 <_Balloc>
 800f16e:	692b      	ldr	r3, [r5, #16]
 800f170:	60c6      	str	r6, [r0, #12]
 800f172:	6926      	ldr	r6, [r4, #16]
 800f174:	f105 0914 	add.w	r9, r5, #20
 800f178:	f104 0214 	add.w	r2, r4, #20
 800f17c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f180:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f184:	f100 0514 	add.w	r5, r0, #20
 800f188:	f04f 0e00 	mov.w	lr, #0
 800f18c:	f852 ab04 	ldr.w	sl, [r2], #4
 800f190:	f859 4b04 	ldr.w	r4, [r9], #4
 800f194:	fa1e f18a 	uxtah	r1, lr, sl
 800f198:	b2a3      	uxth	r3, r4
 800f19a:	1ac9      	subs	r1, r1, r3
 800f19c:	0c23      	lsrs	r3, r4, #16
 800f19e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f1a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f1a6:	b289      	uxth	r1, r1
 800f1a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f1ac:	45c8      	cmp	r8, r9
 800f1ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f1b2:	4694      	mov	ip, r2
 800f1b4:	f845 3b04 	str.w	r3, [r5], #4
 800f1b8:	d8e8      	bhi.n	800f18c <__mdiff+0x5c>
 800f1ba:	45bc      	cmp	ip, r7
 800f1bc:	d304      	bcc.n	800f1c8 <__mdiff+0x98>
 800f1be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f1c2:	b183      	cbz	r3, 800f1e6 <__mdiff+0xb6>
 800f1c4:	6106      	str	r6, [r0, #16]
 800f1c6:	e7c5      	b.n	800f154 <__mdiff+0x24>
 800f1c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f1cc:	fa1e f381 	uxtah	r3, lr, r1
 800f1d0:	141a      	asrs	r2, r3, #16
 800f1d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f1e0:	f845 3b04 	str.w	r3, [r5], #4
 800f1e4:	e7e9      	b.n	800f1ba <__mdiff+0x8a>
 800f1e6:	3e01      	subs	r6, #1
 800f1e8:	e7e9      	b.n	800f1be <__mdiff+0x8e>

0800f1ea <__d2b>:
 800f1ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1ee:	460e      	mov	r6, r1
 800f1f0:	2101      	movs	r1, #1
 800f1f2:	ec59 8b10 	vmov	r8, r9, d0
 800f1f6:	4615      	mov	r5, r2
 800f1f8:	f7ff fd6b 	bl	800ecd2 <_Balloc>
 800f1fc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f200:	4607      	mov	r7, r0
 800f202:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f206:	bb34      	cbnz	r4, 800f256 <__d2b+0x6c>
 800f208:	9301      	str	r3, [sp, #4]
 800f20a:	f1b8 0300 	subs.w	r3, r8, #0
 800f20e:	d027      	beq.n	800f260 <__d2b+0x76>
 800f210:	a802      	add	r0, sp, #8
 800f212:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f216:	f7ff fe01 	bl	800ee1c <__lo0bits>
 800f21a:	9900      	ldr	r1, [sp, #0]
 800f21c:	b1f0      	cbz	r0, 800f25c <__d2b+0x72>
 800f21e:	9a01      	ldr	r2, [sp, #4]
 800f220:	f1c0 0320 	rsb	r3, r0, #32
 800f224:	fa02 f303 	lsl.w	r3, r2, r3
 800f228:	430b      	orrs	r3, r1
 800f22a:	40c2      	lsrs	r2, r0
 800f22c:	617b      	str	r3, [r7, #20]
 800f22e:	9201      	str	r2, [sp, #4]
 800f230:	9b01      	ldr	r3, [sp, #4]
 800f232:	61bb      	str	r3, [r7, #24]
 800f234:	2b00      	cmp	r3, #0
 800f236:	bf14      	ite	ne
 800f238:	2102      	movne	r1, #2
 800f23a:	2101      	moveq	r1, #1
 800f23c:	6139      	str	r1, [r7, #16]
 800f23e:	b1c4      	cbz	r4, 800f272 <__d2b+0x88>
 800f240:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f244:	4404      	add	r4, r0
 800f246:	6034      	str	r4, [r6, #0]
 800f248:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f24c:	6028      	str	r0, [r5, #0]
 800f24e:	4638      	mov	r0, r7
 800f250:	b003      	add	sp, #12
 800f252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f25a:	e7d5      	b.n	800f208 <__d2b+0x1e>
 800f25c:	6179      	str	r1, [r7, #20]
 800f25e:	e7e7      	b.n	800f230 <__d2b+0x46>
 800f260:	a801      	add	r0, sp, #4
 800f262:	f7ff fddb 	bl	800ee1c <__lo0bits>
 800f266:	9b01      	ldr	r3, [sp, #4]
 800f268:	617b      	str	r3, [r7, #20]
 800f26a:	2101      	movs	r1, #1
 800f26c:	6139      	str	r1, [r7, #16]
 800f26e:	3020      	adds	r0, #32
 800f270:	e7e5      	b.n	800f23e <__d2b+0x54>
 800f272:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f276:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f27a:	6030      	str	r0, [r6, #0]
 800f27c:	6918      	ldr	r0, [r3, #16]
 800f27e:	f7ff fdae 	bl	800edde <__hi0bits>
 800f282:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f286:	e7e1      	b.n	800f24c <__d2b+0x62>

0800f288 <_calloc_r>:
 800f288:	b538      	push	{r3, r4, r5, lr}
 800f28a:	fb02 f401 	mul.w	r4, r2, r1
 800f28e:	4621      	mov	r1, r4
 800f290:	f7fd fc1e 	bl	800cad0 <_malloc_r>
 800f294:	4605      	mov	r5, r0
 800f296:	b118      	cbz	r0, 800f2a0 <_calloc_r+0x18>
 800f298:	4622      	mov	r2, r4
 800f29a:	2100      	movs	r1, #0
 800f29c:	f7fd f92e 	bl	800c4fc <memset>
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	bd38      	pop	{r3, r4, r5, pc}

0800f2a4 <__ssputs_r>:
 800f2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2a8:	688e      	ldr	r6, [r1, #8]
 800f2aa:	429e      	cmp	r6, r3
 800f2ac:	4682      	mov	sl, r0
 800f2ae:	460c      	mov	r4, r1
 800f2b0:	4690      	mov	r8, r2
 800f2b2:	4699      	mov	r9, r3
 800f2b4:	d837      	bhi.n	800f326 <__ssputs_r+0x82>
 800f2b6:	898a      	ldrh	r2, [r1, #12]
 800f2b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f2bc:	d031      	beq.n	800f322 <__ssputs_r+0x7e>
 800f2be:	6825      	ldr	r5, [r4, #0]
 800f2c0:	6909      	ldr	r1, [r1, #16]
 800f2c2:	1a6f      	subs	r7, r5, r1
 800f2c4:	6965      	ldr	r5, [r4, #20]
 800f2c6:	2302      	movs	r3, #2
 800f2c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2cc:	fb95 f5f3 	sdiv	r5, r5, r3
 800f2d0:	f109 0301 	add.w	r3, r9, #1
 800f2d4:	443b      	add	r3, r7
 800f2d6:	429d      	cmp	r5, r3
 800f2d8:	bf38      	it	cc
 800f2da:	461d      	movcc	r5, r3
 800f2dc:	0553      	lsls	r3, r2, #21
 800f2de:	d530      	bpl.n	800f342 <__ssputs_r+0x9e>
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f7fd fbf5 	bl	800cad0 <_malloc_r>
 800f2e6:	4606      	mov	r6, r0
 800f2e8:	b950      	cbnz	r0, 800f300 <__ssputs_r+0x5c>
 800f2ea:	230c      	movs	r3, #12
 800f2ec:	f8ca 3000 	str.w	r3, [sl]
 800f2f0:	89a3      	ldrh	r3, [r4, #12]
 800f2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2f6:	81a3      	strh	r3, [r4, #12]
 800f2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f300:	463a      	mov	r2, r7
 800f302:	6921      	ldr	r1, [r4, #16]
 800f304:	f7ff fcd8 	bl	800ecb8 <memcpy>
 800f308:	89a3      	ldrh	r3, [r4, #12]
 800f30a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f30e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f312:	81a3      	strh	r3, [r4, #12]
 800f314:	6126      	str	r6, [r4, #16]
 800f316:	6165      	str	r5, [r4, #20]
 800f318:	443e      	add	r6, r7
 800f31a:	1bed      	subs	r5, r5, r7
 800f31c:	6026      	str	r6, [r4, #0]
 800f31e:	60a5      	str	r5, [r4, #8]
 800f320:	464e      	mov	r6, r9
 800f322:	454e      	cmp	r6, r9
 800f324:	d900      	bls.n	800f328 <__ssputs_r+0x84>
 800f326:	464e      	mov	r6, r9
 800f328:	4632      	mov	r2, r6
 800f32a:	4641      	mov	r1, r8
 800f32c:	6820      	ldr	r0, [r4, #0]
 800f32e:	f000 fbeb 	bl	800fb08 <memmove>
 800f332:	68a3      	ldr	r3, [r4, #8]
 800f334:	1b9b      	subs	r3, r3, r6
 800f336:	60a3      	str	r3, [r4, #8]
 800f338:	6823      	ldr	r3, [r4, #0]
 800f33a:	441e      	add	r6, r3
 800f33c:	6026      	str	r6, [r4, #0]
 800f33e:	2000      	movs	r0, #0
 800f340:	e7dc      	b.n	800f2fc <__ssputs_r+0x58>
 800f342:	462a      	mov	r2, r5
 800f344:	f000 fbf9 	bl	800fb3a <_realloc_r>
 800f348:	4606      	mov	r6, r0
 800f34a:	2800      	cmp	r0, #0
 800f34c:	d1e2      	bne.n	800f314 <__ssputs_r+0x70>
 800f34e:	6921      	ldr	r1, [r4, #16]
 800f350:	4650      	mov	r0, sl
 800f352:	f7fd fb6f 	bl	800ca34 <_free_r>
 800f356:	e7c8      	b.n	800f2ea <__ssputs_r+0x46>

0800f358 <_svfiprintf_r>:
 800f358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f35c:	461d      	mov	r5, r3
 800f35e:	898b      	ldrh	r3, [r1, #12]
 800f360:	061f      	lsls	r7, r3, #24
 800f362:	b09d      	sub	sp, #116	; 0x74
 800f364:	4680      	mov	r8, r0
 800f366:	460c      	mov	r4, r1
 800f368:	4616      	mov	r6, r2
 800f36a:	d50f      	bpl.n	800f38c <_svfiprintf_r+0x34>
 800f36c:	690b      	ldr	r3, [r1, #16]
 800f36e:	b96b      	cbnz	r3, 800f38c <_svfiprintf_r+0x34>
 800f370:	2140      	movs	r1, #64	; 0x40
 800f372:	f7fd fbad 	bl	800cad0 <_malloc_r>
 800f376:	6020      	str	r0, [r4, #0]
 800f378:	6120      	str	r0, [r4, #16]
 800f37a:	b928      	cbnz	r0, 800f388 <_svfiprintf_r+0x30>
 800f37c:	230c      	movs	r3, #12
 800f37e:	f8c8 3000 	str.w	r3, [r8]
 800f382:	f04f 30ff 	mov.w	r0, #4294967295
 800f386:	e0c8      	b.n	800f51a <_svfiprintf_r+0x1c2>
 800f388:	2340      	movs	r3, #64	; 0x40
 800f38a:	6163      	str	r3, [r4, #20]
 800f38c:	2300      	movs	r3, #0
 800f38e:	9309      	str	r3, [sp, #36]	; 0x24
 800f390:	2320      	movs	r3, #32
 800f392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f396:	2330      	movs	r3, #48	; 0x30
 800f398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f39c:	9503      	str	r5, [sp, #12]
 800f39e:	f04f 0b01 	mov.w	fp, #1
 800f3a2:	4637      	mov	r7, r6
 800f3a4:	463d      	mov	r5, r7
 800f3a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f3aa:	b10b      	cbz	r3, 800f3b0 <_svfiprintf_r+0x58>
 800f3ac:	2b25      	cmp	r3, #37	; 0x25
 800f3ae:	d13e      	bne.n	800f42e <_svfiprintf_r+0xd6>
 800f3b0:	ebb7 0a06 	subs.w	sl, r7, r6
 800f3b4:	d00b      	beq.n	800f3ce <_svfiprintf_r+0x76>
 800f3b6:	4653      	mov	r3, sl
 800f3b8:	4632      	mov	r2, r6
 800f3ba:	4621      	mov	r1, r4
 800f3bc:	4640      	mov	r0, r8
 800f3be:	f7ff ff71 	bl	800f2a4 <__ssputs_r>
 800f3c2:	3001      	adds	r0, #1
 800f3c4:	f000 80a4 	beq.w	800f510 <_svfiprintf_r+0x1b8>
 800f3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3ca:	4453      	add	r3, sl
 800f3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ce:	783b      	ldrb	r3, [r7, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	f000 809d 	beq.w	800f510 <_svfiprintf_r+0x1b8>
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f3dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3e0:	9304      	str	r3, [sp, #16]
 800f3e2:	9307      	str	r3, [sp, #28]
 800f3e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3e8:	931a      	str	r3, [sp, #104]	; 0x68
 800f3ea:	462f      	mov	r7, r5
 800f3ec:	2205      	movs	r2, #5
 800f3ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f3f2:	4850      	ldr	r0, [pc, #320]	; (800f534 <_svfiprintf_r+0x1dc>)
 800f3f4:	f7f0 fef4 	bl	80001e0 <memchr>
 800f3f8:	9b04      	ldr	r3, [sp, #16]
 800f3fa:	b9d0      	cbnz	r0, 800f432 <_svfiprintf_r+0xda>
 800f3fc:	06d9      	lsls	r1, r3, #27
 800f3fe:	bf44      	itt	mi
 800f400:	2220      	movmi	r2, #32
 800f402:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f406:	071a      	lsls	r2, r3, #28
 800f408:	bf44      	itt	mi
 800f40a:	222b      	movmi	r2, #43	; 0x2b
 800f40c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f410:	782a      	ldrb	r2, [r5, #0]
 800f412:	2a2a      	cmp	r2, #42	; 0x2a
 800f414:	d015      	beq.n	800f442 <_svfiprintf_r+0xea>
 800f416:	9a07      	ldr	r2, [sp, #28]
 800f418:	462f      	mov	r7, r5
 800f41a:	2000      	movs	r0, #0
 800f41c:	250a      	movs	r5, #10
 800f41e:	4639      	mov	r1, r7
 800f420:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f424:	3b30      	subs	r3, #48	; 0x30
 800f426:	2b09      	cmp	r3, #9
 800f428:	d94d      	bls.n	800f4c6 <_svfiprintf_r+0x16e>
 800f42a:	b1b8      	cbz	r0, 800f45c <_svfiprintf_r+0x104>
 800f42c:	e00f      	b.n	800f44e <_svfiprintf_r+0xf6>
 800f42e:	462f      	mov	r7, r5
 800f430:	e7b8      	b.n	800f3a4 <_svfiprintf_r+0x4c>
 800f432:	4a40      	ldr	r2, [pc, #256]	; (800f534 <_svfiprintf_r+0x1dc>)
 800f434:	1a80      	subs	r0, r0, r2
 800f436:	fa0b f000 	lsl.w	r0, fp, r0
 800f43a:	4318      	orrs	r0, r3
 800f43c:	9004      	str	r0, [sp, #16]
 800f43e:	463d      	mov	r5, r7
 800f440:	e7d3      	b.n	800f3ea <_svfiprintf_r+0x92>
 800f442:	9a03      	ldr	r2, [sp, #12]
 800f444:	1d11      	adds	r1, r2, #4
 800f446:	6812      	ldr	r2, [r2, #0]
 800f448:	9103      	str	r1, [sp, #12]
 800f44a:	2a00      	cmp	r2, #0
 800f44c:	db01      	blt.n	800f452 <_svfiprintf_r+0xfa>
 800f44e:	9207      	str	r2, [sp, #28]
 800f450:	e004      	b.n	800f45c <_svfiprintf_r+0x104>
 800f452:	4252      	negs	r2, r2
 800f454:	f043 0302 	orr.w	r3, r3, #2
 800f458:	9207      	str	r2, [sp, #28]
 800f45a:	9304      	str	r3, [sp, #16]
 800f45c:	783b      	ldrb	r3, [r7, #0]
 800f45e:	2b2e      	cmp	r3, #46	; 0x2e
 800f460:	d10c      	bne.n	800f47c <_svfiprintf_r+0x124>
 800f462:	787b      	ldrb	r3, [r7, #1]
 800f464:	2b2a      	cmp	r3, #42	; 0x2a
 800f466:	d133      	bne.n	800f4d0 <_svfiprintf_r+0x178>
 800f468:	9b03      	ldr	r3, [sp, #12]
 800f46a:	1d1a      	adds	r2, r3, #4
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	9203      	str	r2, [sp, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	bfb8      	it	lt
 800f474:	f04f 33ff 	movlt.w	r3, #4294967295
 800f478:	3702      	adds	r7, #2
 800f47a:	9305      	str	r3, [sp, #20]
 800f47c:	4d2e      	ldr	r5, [pc, #184]	; (800f538 <_svfiprintf_r+0x1e0>)
 800f47e:	7839      	ldrb	r1, [r7, #0]
 800f480:	2203      	movs	r2, #3
 800f482:	4628      	mov	r0, r5
 800f484:	f7f0 feac 	bl	80001e0 <memchr>
 800f488:	b138      	cbz	r0, 800f49a <_svfiprintf_r+0x142>
 800f48a:	2340      	movs	r3, #64	; 0x40
 800f48c:	1b40      	subs	r0, r0, r5
 800f48e:	fa03 f000 	lsl.w	r0, r3, r0
 800f492:	9b04      	ldr	r3, [sp, #16]
 800f494:	4303      	orrs	r3, r0
 800f496:	3701      	adds	r7, #1
 800f498:	9304      	str	r3, [sp, #16]
 800f49a:	7839      	ldrb	r1, [r7, #0]
 800f49c:	4827      	ldr	r0, [pc, #156]	; (800f53c <_svfiprintf_r+0x1e4>)
 800f49e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4a2:	2206      	movs	r2, #6
 800f4a4:	1c7e      	adds	r6, r7, #1
 800f4a6:	f7f0 fe9b 	bl	80001e0 <memchr>
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	d038      	beq.n	800f520 <_svfiprintf_r+0x1c8>
 800f4ae:	4b24      	ldr	r3, [pc, #144]	; (800f540 <_svfiprintf_r+0x1e8>)
 800f4b0:	bb13      	cbnz	r3, 800f4f8 <_svfiprintf_r+0x1a0>
 800f4b2:	9b03      	ldr	r3, [sp, #12]
 800f4b4:	3307      	adds	r3, #7
 800f4b6:	f023 0307 	bic.w	r3, r3, #7
 800f4ba:	3308      	adds	r3, #8
 800f4bc:	9303      	str	r3, [sp, #12]
 800f4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4c0:	444b      	add	r3, r9
 800f4c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f4c4:	e76d      	b.n	800f3a2 <_svfiprintf_r+0x4a>
 800f4c6:	fb05 3202 	mla	r2, r5, r2, r3
 800f4ca:	2001      	movs	r0, #1
 800f4cc:	460f      	mov	r7, r1
 800f4ce:	e7a6      	b.n	800f41e <_svfiprintf_r+0xc6>
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	3701      	adds	r7, #1
 800f4d4:	9305      	str	r3, [sp, #20]
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	250a      	movs	r5, #10
 800f4da:	4638      	mov	r0, r7
 800f4dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4e0:	3a30      	subs	r2, #48	; 0x30
 800f4e2:	2a09      	cmp	r2, #9
 800f4e4:	d903      	bls.n	800f4ee <_svfiprintf_r+0x196>
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d0c8      	beq.n	800f47c <_svfiprintf_r+0x124>
 800f4ea:	9105      	str	r1, [sp, #20]
 800f4ec:	e7c6      	b.n	800f47c <_svfiprintf_r+0x124>
 800f4ee:	fb05 2101 	mla	r1, r5, r1, r2
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	4607      	mov	r7, r0
 800f4f6:	e7f0      	b.n	800f4da <_svfiprintf_r+0x182>
 800f4f8:	ab03      	add	r3, sp, #12
 800f4fa:	9300      	str	r3, [sp, #0]
 800f4fc:	4622      	mov	r2, r4
 800f4fe:	4b11      	ldr	r3, [pc, #68]	; (800f544 <_svfiprintf_r+0x1ec>)
 800f500:	a904      	add	r1, sp, #16
 800f502:	4640      	mov	r0, r8
 800f504:	f7fd fbd2 	bl	800ccac <_printf_float>
 800f508:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f50c:	4681      	mov	r9, r0
 800f50e:	d1d6      	bne.n	800f4be <_svfiprintf_r+0x166>
 800f510:	89a3      	ldrh	r3, [r4, #12]
 800f512:	065b      	lsls	r3, r3, #25
 800f514:	f53f af35 	bmi.w	800f382 <_svfiprintf_r+0x2a>
 800f518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f51a:	b01d      	add	sp, #116	; 0x74
 800f51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f520:	ab03      	add	r3, sp, #12
 800f522:	9300      	str	r3, [sp, #0]
 800f524:	4622      	mov	r2, r4
 800f526:	4b07      	ldr	r3, [pc, #28]	; (800f544 <_svfiprintf_r+0x1ec>)
 800f528:	a904      	add	r1, sp, #16
 800f52a:	4640      	mov	r0, r8
 800f52c:	f7fd fe74 	bl	800d218 <_printf_i>
 800f530:	e7ea      	b.n	800f508 <_svfiprintf_r+0x1b0>
 800f532:	bf00      	nop
 800f534:	08010e0c 	.word	0x08010e0c
 800f538:	08010e12 	.word	0x08010e12
 800f53c:	08010e16 	.word	0x08010e16
 800f540:	0800ccad 	.word	0x0800ccad
 800f544:	0800f2a5 	.word	0x0800f2a5

0800f548 <__sfputc_r>:
 800f548:	6893      	ldr	r3, [r2, #8]
 800f54a:	3b01      	subs	r3, #1
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	b410      	push	{r4}
 800f550:	6093      	str	r3, [r2, #8]
 800f552:	da08      	bge.n	800f566 <__sfputc_r+0x1e>
 800f554:	6994      	ldr	r4, [r2, #24]
 800f556:	42a3      	cmp	r3, r4
 800f558:	db01      	blt.n	800f55e <__sfputc_r+0x16>
 800f55a:	290a      	cmp	r1, #10
 800f55c:	d103      	bne.n	800f566 <__sfputc_r+0x1e>
 800f55e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f562:	f7fe ba5d 	b.w	800da20 <__swbuf_r>
 800f566:	6813      	ldr	r3, [r2, #0]
 800f568:	1c58      	adds	r0, r3, #1
 800f56a:	6010      	str	r0, [r2, #0]
 800f56c:	7019      	strb	r1, [r3, #0]
 800f56e:	4608      	mov	r0, r1
 800f570:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <__sfputs_r>:
 800f576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f578:	4606      	mov	r6, r0
 800f57a:	460f      	mov	r7, r1
 800f57c:	4614      	mov	r4, r2
 800f57e:	18d5      	adds	r5, r2, r3
 800f580:	42ac      	cmp	r4, r5
 800f582:	d101      	bne.n	800f588 <__sfputs_r+0x12>
 800f584:	2000      	movs	r0, #0
 800f586:	e007      	b.n	800f598 <__sfputs_r+0x22>
 800f588:	463a      	mov	r2, r7
 800f58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f58e:	4630      	mov	r0, r6
 800f590:	f7ff ffda 	bl	800f548 <__sfputc_r>
 800f594:	1c43      	adds	r3, r0, #1
 800f596:	d1f3      	bne.n	800f580 <__sfputs_r+0xa>
 800f598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f59c <_vfiprintf_r>:
 800f59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a0:	460c      	mov	r4, r1
 800f5a2:	b09d      	sub	sp, #116	; 0x74
 800f5a4:	4617      	mov	r7, r2
 800f5a6:	461d      	mov	r5, r3
 800f5a8:	4606      	mov	r6, r0
 800f5aa:	b118      	cbz	r0, 800f5b4 <_vfiprintf_r+0x18>
 800f5ac:	6983      	ldr	r3, [r0, #24]
 800f5ae:	b90b      	cbnz	r3, 800f5b4 <_vfiprintf_r+0x18>
 800f5b0:	f7ff fa3e 	bl	800ea30 <__sinit>
 800f5b4:	4b7c      	ldr	r3, [pc, #496]	; (800f7a8 <_vfiprintf_r+0x20c>)
 800f5b6:	429c      	cmp	r4, r3
 800f5b8:	d158      	bne.n	800f66c <_vfiprintf_r+0xd0>
 800f5ba:	6874      	ldr	r4, [r6, #4]
 800f5bc:	89a3      	ldrh	r3, [r4, #12]
 800f5be:	0718      	lsls	r0, r3, #28
 800f5c0:	d55e      	bpl.n	800f680 <_vfiprintf_r+0xe4>
 800f5c2:	6923      	ldr	r3, [r4, #16]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d05b      	beq.n	800f680 <_vfiprintf_r+0xe4>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800f5cc:	2320      	movs	r3, #32
 800f5ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5d2:	2330      	movs	r3, #48	; 0x30
 800f5d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5d8:	9503      	str	r5, [sp, #12]
 800f5da:	f04f 0b01 	mov.w	fp, #1
 800f5de:	46b8      	mov	r8, r7
 800f5e0:	4645      	mov	r5, r8
 800f5e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f5e6:	b10b      	cbz	r3, 800f5ec <_vfiprintf_r+0x50>
 800f5e8:	2b25      	cmp	r3, #37	; 0x25
 800f5ea:	d154      	bne.n	800f696 <_vfiprintf_r+0xfa>
 800f5ec:	ebb8 0a07 	subs.w	sl, r8, r7
 800f5f0:	d00b      	beq.n	800f60a <_vfiprintf_r+0x6e>
 800f5f2:	4653      	mov	r3, sl
 800f5f4:	463a      	mov	r2, r7
 800f5f6:	4621      	mov	r1, r4
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	f7ff ffbc 	bl	800f576 <__sfputs_r>
 800f5fe:	3001      	adds	r0, #1
 800f600:	f000 80c2 	beq.w	800f788 <_vfiprintf_r+0x1ec>
 800f604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f606:	4453      	add	r3, sl
 800f608:	9309      	str	r3, [sp, #36]	; 0x24
 800f60a:	f898 3000 	ldrb.w	r3, [r8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	f000 80ba 	beq.w	800f788 <_vfiprintf_r+0x1ec>
 800f614:	2300      	movs	r3, #0
 800f616:	f04f 32ff 	mov.w	r2, #4294967295
 800f61a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f61e:	9304      	str	r3, [sp, #16]
 800f620:	9307      	str	r3, [sp, #28]
 800f622:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f626:	931a      	str	r3, [sp, #104]	; 0x68
 800f628:	46a8      	mov	r8, r5
 800f62a:	2205      	movs	r2, #5
 800f62c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f630:	485e      	ldr	r0, [pc, #376]	; (800f7ac <_vfiprintf_r+0x210>)
 800f632:	f7f0 fdd5 	bl	80001e0 <memchr>
 800f636:	9b04      	ldr	r3, [sp, #16]
 800f638:	bb78      	cbnz	r0, 800f69a <_vfiprintf_r+0xfe>
 800f63a:	06d9      	lsls	r1, r3, #27
 800f63c:	bf44      	itt	mi
 800f63e:	2220      	movmi	r2, #32
 800f640:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f644:	071a      	lsls	r2, r3, #28
 800f646:	bf44      	itt	mi
 800f648:	222b      	movmi	r2, #43	; 0x2b
 800f64a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f64e:	782a      	ldrb	r2, [r5, #0]
 800f650:	2a2a      	cmp	r2, #42	; 0x2a
 800f652:	d02a      	beq.n	800f6aa <_vfiprintf_r+0x10e>
 800f654:	9a07      	ldr	r2, [sp, #28]
 800f656:	46a8      	mov	r8, r5
 800f658:	2000      	movs	r0, #0
 800f65a:	250a      	movs	r5, #10
 800f65c:	4641      	mov	r1, r8
 800f65e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f662:	3b30      	subs	r3, #48	; 0x30
 800f664:	2b09      	cmp	r3, #9
 800f666:	d969      	bls.n	800f73c <_vfiprintf_r+0x1a0>
 800f668:	b360      	cbz	r0, 800f6c4 <_vfiprintf_r+0x128>
 800f66a:	e024      	b.n	800f6b6 <_vfiprintf_r+0x11a>
 800f66c:	4b50      	ldr	r3, [pc, #320]	; (800f7b0 <_vfiprintf_r+0x214>)
 800f66e:	429c      	cmp	r4, r3
 800f670:	d101      	bne.n	800f676 <_vfiprintf_r+0xda>
 800f672:	68b4      	ldr	r4, [r6, #8]
 800f674:	e7a2      	b.n	800f5bc <_vfiprintf_r+0x20>
 800f676:	4b4f      	ldr	r3, [pc, #316]	; (800f7b4 <_vfiprintf_r+0x218>)
 800f678:	429c      	cmp	r4, r3
 800f67a:	bf08      	it	eq
 800f67c:	68f4      	ldreq	r4, [r6, #12]
 800f67e:	e79d      	b.n	800f5bc <_vfiprintf_r+0x20>
 800f680:	4621      	mov	r1, r4
 800f682:	4630      	mov	r0, r6
 800f684:	f7fe fa1e 	bl	800dac4 <__swsetup_r>
 800f688:	2800      	cmp	r0, #0
 800f68a:	d09d      	beq.n	800f5c8 <_vfiprintf_r+0x2c>
 800f68c:	f04f 30ff 	mov.w	r0, #4294967295
 800f690:	b01d      	add	sp, #116	; 0x74
 800f692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f696:	46a8      	mov	r8, r5
 800f698:	e7a2      	b.n	800f5e0 <_vfiprintf_r+0x44>
 800f69a:	4a44      	ldr	r2, [pc, #272]	; (800f7ac <_vfiprintf_r+0x210>)
 800f69c:	1a80      	subs	r0, r0, r2
 800f69e:	fa0b f000 	lsl.w	r0, fp, r0
 800f6a2:	4318      	orrs	r0, r3
 800f6a4:	9004      	str	r0, [sp, #16]
 800f6a6:	4645      	mov	r5, r8
 800f6a8:	e7be      	b.n	800f628 <_vfiprintf_r+0x8c>
 800f6aa:	9a03      	ldr	r2, [sp, #12]
 800f6ac:	1d11      	adds	r1, r2, #4
 800f6ae:	6812      	ldr	r2, [r2, #0]
 800f6b0:	9103      	str	r1, [sp, #12]
 800f6b2:	2a00      	cmp	r2, #0
 800f6b4:	db01      	blt.n	800f6ba <_vfiprintf_r+0x11e>
 800f6b6:	9207      	str	r2, [sp, #28]
 800f6b8:	e004      	b.n	800f6c4 <_vfiprintf_r+0x128>
 800f6ba:	4252      	negs	r2, r2
 800f6bc:	f043 0302 	orr.w	r3, r3, #2
 800f6c0:	9207      	str	r2, [sp, #28]
 800f6c2:	9304      	str	r3, [sp, #16]
 800f6c4:	f898 3000 	ldrb.w	r3, [r8]
 800f6c8:	2b2e      	cmp	r3, #46	; 0x2e
 800f6ca:	d10e      	bne.n	800f6ea <_vfiprintf_r+0x14e>
 800f6cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800f6d2:	d138      	bne.n	800f746 <_vfiprintf_r+0x1aa>
 800f6d4:	9b03      	ldr	r3, [sp, #12]
 800f6d6:	1d1a      	adds	r2, r3, #4
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	9203      	str	r2, [sp, #12]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	bfb8      	it	lt
 800f6e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6e4:	f108 0802 	add.w	r8, r8, #2
 800f6e8:	9305      	str	r3, [sp, #20]
 800f6ea:	4d33      	ldr	r5, [pc, #204]	; (800f7b8 <_vfiprintf_r+0x21c>)
 800f6ec:	f898 1000 	ldrb.w	r1, [r8]
 800f6f0:	2203      	movs	r2, #3
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	f7f0 fd74 	bl	80001e0 <memchr>
 800f6f8:	b140      	cbz	r0, 800f70c <_vfiprintf_r+0x170>
 800f6fa:	2340      	movs	r3, #64	; 0x40
 800f6fc:	1b40      	subs	r0, r0, r5
 800f6fe:	fa03 f000 	lsl.w	r0, r3, r0
 800f702:	9b04      	ldr	r3, [sp, #16]
 800f704:	4303      	orrs	r3, r0
 800f706:	f108 0801 	add.w	r8, r8, #1
 800f70a:	9304      	str	r3, [sp, #16]
 800f70c:	f898 1000 	ldrb.w	r1, [r8]
 800f710:	482a      	ldr	r0, [pc, #168]	; (800f7bc <_vfiprintf_r+0x220>)
 800f712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f716:	2206      	movs	r2, #6
 800f718:	f108 0701 	add.w	r7, r8, #1
 800f71c:	f7f0 fd60 	bl	80001e0 <memchr>
 800f720:	2800      	cmp	r0, #0
 800f722:	d037      	beq.n	800f794 <_vfiprintf_r+0x1f8>
 800f724:	4b26      	ldr	r3, [pc, #152]	; (800f7c0 <_vfiprintf_r+0x224>)
 800f726:	bb1b      	cbnz	r3, 800f770 <_vfiprintf_r+0x1d4>
 800f728:	9b03      	ldr	r3, [sp, #12]
 800f72a:	3307      	adds	r3, #7
 800f72c:	f023 0307 	bic.w	r3, r3, #7
 800f730:	3308      	adds	r3, #8
 800f732:	9303      	str	r3, [sp, #12]
 800f734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f736:	444b      	add	r3, r9
 800f738:	9309      	str	r3, [sp, #36]	; 0x24
 800f73a:	e750      	b.n	800f5de <_vfiprintf_r+0x42>
 800f73c:	fb05 3202 	mla	r2, r5, r2, r3
 800f740:	2001      	movs	r0, #1
 800f742:	4688      	mov	r8, r1
 800f744:	e78a      	b.n	800f65c <_vfiprintf_r+0xc0>
 800f746:	2300      	movs	r3, #0
 800f748:	f108 0801 	add.w	r8, r8, #1
 800f74c:	9305      	str	r3, [sp, #20]
 800f74e:	4619      	mov	r1, r3
 800f750:	250a      	movs	r5, #10
 800f752:	4640      	mov	r0, r8
 800f754:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f758:	3a30      	subs	r2, #48	; 0x30
 800f75a:	2a09      	cmp	r2, #9
 800f75c:	d903      	bls.n	800f766 <_vfiprintf_r+0x1ca>
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d0c3      	beq.n	800f6ea <_vfiprintf_r+0x14e>
 800f762:	9105      	str	r1, [sp, #20]
 800f764:	e7c1      	b.n	800f6ea <_vfiprintf_r+0x14e>
 800f766:	fb05 2101 	mla	r1, r5, r1, r2
 800f76a:	2301      	movs	r3, #1
 800f76c:	4680      	mov	r8, r0
 800f76e:	e7f0      	b.n	800f752 <_vfiprintf_r+0x1b6>
 800f770:	ab03      	add	r3, sp, #12
 800f772:	9300      	str	r3, [sp, #0]
 800f774:	4622      	mov	r2, r4
 800f776:	4b13      	ldr	r3, [pc, #76]	; (800f7c4 <_vfiprintf_r+0x228>)
 800f778:	a904      	add	r1, sp, #16
 800f77a:	4630      	mov	r0, r6
 800f77c:	f7fd fa96 	bl	800ccac <_printf_float>
 800f780:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f784:	4681      	mov	r9, r0
 800f786:	d1d5      	bne.n	800f734 <_vfiprintf_r+0x198>
 800f788:	89a3      	ldrh	r3, [r4, #12]
 800f78a:	065b      	lsls	r3, r3, #25
 800f78c:	f53f af7e 	bmi.w	800f68c <_vfiprintf_r+0xf0>
 800f790:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f792:	e77d      	b.n	800f690 <_vfiprintf_r+0xf4>
 800f794:	ab03      	add	r3, sp, #12
 800f796:	9300      	str	r3, [sp, #0]
 800f798:	4622      	mov	r2, r4
 800f79a:	4b0a      	ldr	r3, [pc, #40]	; (800f7c4 <_vfiprintf_r+0x228>)
 800f79c:	a904      	add	r1, sp, #16
 800f79e:	4630      	mov	r0, r6
 800f7a0:	f7fd fd3a 	bl	800d218 <_printf_i>
 800f7a4:	e7ec      	b.n	800f780 <_vfiprintf_r+0x1e4>
 800f7a6:	bf00      	nop
 800f7a8:	08010c6c 	.word	0x08010c6c
 800f7ac:	08010e0c 	.word	0x08010e0c
 800f7b0:	08010c8c 	.word	0x08010c8c
 800f7b4:	08010c4c 	.word	0x08010c4c
 800f7b8:	08010e12 	.word	0x08010e12
 800f7bc:	08010e16 	.word	0x08010e16
 800f7c0:	0800ccad 	.word	0x0800ccad
 800f7c4:	0800f577 	.word	0x0800f577

0800f7c8 <siscanf>:
 800f7c8:	b40e      	push	{r1, r2, r3}
 800f7ca:	b530      	push	{r4, r5, lr}
 800f7cc:	b09c      	sub	sp, #112	; 0x70
 800f7ce:	ac1f      	add	r4, sp, #124	; 0x7c
 800f7d0:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f7d4:	f854 5b04 	ldr.w	r5, [r4], #4
 800f7d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f7dc:	9002      	str	r0, [sp, #8]
 800f7de:	9006      	str	r0, [sp, #24]
 800f7e0:	f7f0 fcf6 	bl	80001d0 <strlen>
 800f7e4:	4b0b      	ldr	r3, [pc, #44]	; (800f814 <siscanf+0x4c>)
 800f7e6:	9003      	str	r0, [sp, #12]
 800f7e8:	9007      	str	r0, [sp, #28]
 800f7ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7ec:	480a      	ldr	r0, [pc, #40]	; (800f818 <siscanf+0x50>)
 800f7ee:	9401      	str	r4, [sp, #4]
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7f4:	9314      	str	r3, [sp, #80]	; 0x50
 800f7f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f7fe:	462a      	mov	r2, r5
 800f800:	4623      	mov	r3, r4
 800f802:	a902      	add	r1, sp, #8
 800f804:	6800      	ldr	r0, [r0, #0]
 800f806:	f000 fa19 	bl	800fc3c <__ssvfiscanf_r>
 800f80a:	b01c      	add	sp, #112	; 0x70
 800f80c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f810:	b003      	add	sp, #12
 800f812:	4770      	bx	lr
 800f814:	0800f83f 	.word	0x0800f83f
 800f818:	20000010 	.word	0x20000010

0800f81c <__sread>:
 800f81c:	b510      	push	{r4, lr}
 800f81e:	460c      	mov	r4, r1
 800f820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f824:	f000 fcb2 	bl	801018c <_read_r>
 800f828:	2800      	cmp	r0, #0
 800f82a:	bfab      	itete	ge
 800f82c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f82e:	89a3      	ldrhlt	r3, [r4, #12]
 800f830:	181b      	addge	r3, r3, r0
 800f832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f836:	bfac      	ite	ge
 800f838:	6563      	strge	r3, [r4, #84]	; 0x54
 800f83a:	81a3      	strhlt	r3, [r4, #12]
 800f83c:	bd10      	pop	{r4, pc}

0800f83e <__seofread>:
 800f83e:	2000      	movs	r0, #0
 800f840:	4770      	bx	lr

0800f842 <__swrite>:
 800f842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f846:	461f      	mov	r7, r3
 800f848:	898b      	ldrh	r3, [r1, #12]
 800f84a:	05db      	lsls	r3, r3, #23
 800f84c:	4605      	mov	r5, r0
 800f84e:	460c      	mov	r4, r1
 800f850:	4616      	mov	r6, r2
 800f852:	d505      	bpl.n	800f860 <__swrite+0x1e>
 800f854:	2302      	movs	r3, #2
 800f856:	2200      	movs	r2, #0
 800f858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f85c:	f000 f930 	bl	800fac0 <_lseek_r>
 800f860:	89a3      	ldrh	r3, [r4, #12]
 800f862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f86a:	81a3      	strh	r3, [r4, #12]
 800f86c:	4632      	mov	r2, r6
 800f86e:	463b      	mov	r3, r7
 800f870:	4628      	mov	r0, r5
 800f872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f876:	f000 b8cb 	b.w	800fa10 <_write_r>

0800f87a <__sseek>:
 800f87a:	b510      	push	{r4, lr}
 800f87c:	460c      	mov	r4, r1
 800f87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f882:	f000 f91d 	bl	800fac0 <_lseek_r>
 800f886:	1c43      	adds	r3, r0, #1
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	bf15      	itete	ne
 800f88c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f88e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f896:	81a3      	strheq	r3, [r4, #12]
 800f898:	bf18      	it	ne
 800f89a:	81a3      	strhne	r3, [r4, #12]
 800f89c:	bd10      	pop	{r4, pc}

0800f89e <__sclose>:
 800f89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8a2:	f000 b8c7 	b.w	800fa34 <_close_r>

0800f8a6 <strncmp>:
 800f8a6:	b510      	push	{r4, lr}
 800f8a8:	b16a      	cbz	r2, 800f8c6 <strncmp+0x20>
 800f8aa:	3901      	subs	r1, #1
 800f8ac:	1884      	adds	r4, r0, r2
 800f8ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f8b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d103      	bne.n	800f8c2 <strncmp+0x1c>
 800f8ba:	42a0      	cmp	r0, r4
 800f8bc:	d001      	beq.n	800f8c2 <strncmp+0x1c>
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1f5      	bne.n	800f8ae <strncmp+0x8>
 800f8c2:	1a98      	subs	r0, r3, r2
 800f8c4:	bd10      	pop	{r4, pc}
 800f8c6:	4610      	mov	r0, r2
 800f8c8:	e7fc      	b.n	800f8c4 <strncmp+0x1e>

0800f8ca <_strtoul_l.isra.0>:
 800f8ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8ce:	4680      	mov	r8, r0
 800f8d0:	4689      	mov	r9, r1
 800f8d2:	4692      	mov	sl, r2
 800f8d4:	461e      	mov	r6, r3
 800f8d6:	460f      	mov	r7, r1
 800f8d8:	463d      	mov	r5, r7
 800f8da:	9808      	ldr	r0, [sp, #32]
 800f8dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8e0:	f000 f8dc 	bl	800fa9c <__locale_ctype_ptr_l>
 800f8e4:	4420      	add	r0, r4
 800f8e6:	7843      	ldrb	r3, [r0, #1]
 800f8e8:	f013 0308 	ands.w	r3, r3, #8
 800f8ec:	d130      	bne.n	800f950 <_strtoul_l.isra.0+0x86>
 800f8ee:	2c2d      	cmp	r4, #45	; 0x2d
 800f8f0:	d130      	bne.n	800f954 <_strtoul_l.isra.0+0x8a>
 800f8f2:	787c      	ldrb	r4, [r7, #1]
 800f8f4:	1cbd      	adds	r5, r7, #2
 800f8f6:	2101      	movs	r1, #1
 800f8f8:	2e00      	cmp	r6, #0
 800f8fa:	d05c      	beq.n	800f9b6 <_strtoul_l.isra.0+0xec>
 800f8fc:	2e10      	cmp	r6, #16
 800f8fe:	d109      	bne.n	800f914 <_strtoul_l.isra.0+0x4a>
 800f900:	2c30      	cmp	r4, #48	; 0x30
 800f902:	d107      	bne.n	800f914 <_strtoul_l.isra.0+0x4a>
 800f904:	782b      	ldrb	r3, [r5, #0]
 800f906:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f90a:	2b58      	cmp	r3, #88	; 0x58
 800f90c:	d14e      	bne.n	800f9ac <_strtoul_l.isra.0+0xe2>
 800f90e:	786c      	ldrb	r4, [r5, #1]
 800f910:	2610      	movs	r6, #16
 800f912:	3502      	adds	r5, #2
 800f914:	f04f 32ff 	mov.w	r2, #4294967295
 800f918:	2300      	movs	r3, #0
 800f91a:	fbb2 f2f6 	udiv	r2, r2, r6
 800f91e:	fb06 fc02 	mul.w	ip, r6, r2
 800f922:	ea6f 0c0c 	mvn.w	ip, ip
 800f926:	4618      	mov	r0, r3
 800f928:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f92c:	2f09      	cmp	r7, #9
 800f92e:	d817      	bhi.n	800f960 <_strtoul_l.isra.0+0x96>
 800f930:	463c      	mov	r4, r7
 800f932:	42a6      	cmp	r6, r4
 800f934:	dd23      	ble.n	800f97e <_strtoul_l.isra.0+0xb4>
 800f936:	2b00      	cmp	r3, #0
 800f938:	db1e      	blt.n	800f978 <_strtoul_l.isra.0+0xae>
 800f93a:	4282      	cmp	r2, r0
 800f93c:	d31c      	bcc.n	800f978 <_strtoul_l.isra.0+0xae>
 800f93e:	d101      	bne.n	800f944 <_strtoul_l.isra.0+0x7a>
 800f940:	45a4      	cmp	ip, r4
 800f942:	db19      	blt.n	800f978 <_strtoul_l.isra.0+0xae>
 800f944:	fb00 4006 	mla	r0, r0, r6, r4
 800f948:	2301      	movs	r3, #1
 800f94a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f94e:	e7eb      	b.n	800f928 <_strtoul_l.isra.0+0x5e>
 800f950:	462f      	mov	r7, r5
 800f952:	e7c1      	b.n	800f8d8 <_strtoul_l.isra.0+0xe>
 800f954:	2c2b      	cmp	r4, #43	; 0x2b
 800f956:	bf04      	itt	eq
 800f958:	1cbd      	addeq	r5, r7, #2
 800f95a:	787c      	ldrbeq	r4, [r7, #1]
 800f95c:	4619      	mov	r1, r3
 800f95e:	e7cb      	b.n	800f8f8 <_strtoul_l.isra.0+0x2e>
 800f960:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f964:	2f19      	cmp	r7, #25
 800f966:	d801      	bhi.n	800f96c <_strtoul_l.isra.0+0xa2>
 800f968:	3c37      	subs	r4, #55	; 0x37
 800f96a:	e7e2      	b.n	800f932 <_strtoul_l.isra.0+0x68>
 800f96c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f970:	2f19      	cmp	r7, #25
 800f972:	d804      	bhi.n	800f97e <_strtoul_l.isra.0+0xb4>
 800f974:	3c57      	subs	r4, #87	; 0x57
 800f976:	e7dc      	b.n	800f932 <_strtoul_l.isra.0+0x68>
 800f978:	f04f 33ff 	mov.w	r3, #4294967295
 800f97c:	e7e5      	b.n	800f94a <_strtoul_l.isra.0+0x80>
 800f97e:	2b00      	cmp	r3, #0
 800f980:	da09      	bge.n	800f996 <_strtoul_l.isra.0+0xcc>
 800f982:	2322      	movs	r3, #34	; 0x22
 800f984:	f8c8 3000 	str.w	r3, [r8]
 800f988:	f04f 30ff 	mov.w	r0, #4294967295
 800f98c:	f1ba 0f00 	cmp.w	sl, #0
 800f990:	d107      	bne.n	800f9a2 <_strtoul_l.isra.0+0xd8>
 800f992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f996:	b101      	cbz	r1, 800f99a <_strtoul_l.isra.0+0xd0>
 800f998:	4240      	negs	r0, r0
 800f99a:	f1ba 0f00 	cmp.w	sl, #0
 800f99e:	d0f8      	beq.n	800f992 <_strtoul_l.isra.0+0xc8>
 800f9a0:	b10b      	cbz	r3, 800f9a6 <_strtoul_l.isra.0+0xdc>
 800f9a2:	f105 39ff 	add.w	r9, r5, #4294967295
 800f9a6:	f8ca 9000 	str.w	r9, [sl]
 800f9aa:	e7f2      	b.n	800f992 <_strtoul_l.isra.0+0xc8>
 800f9ac:	2430      	movs	r4, #48	; 0x30
 800f9ae:	2e00      	cmp	r6, #0
 800f9b0:	d1b0      	bne.n	800f914 <_strtoul_l.isra.0+0x4a>
 800f9b2:	2608      	movs	r6, #8
 800f9b4:	e7ae      	b.n	800f914 <_strtoul_l.isra.0+0x4a>
 800f9b6:	2c30      	cmp	r4, #48	; 0x30
 800f9b8:	d0a4      	beq.n	800f904 <_strtoul_l.isra.0+0x3a>
 800f9ba:	260a      	movs	r6, #10
 800f9bc:	e7aa      	b.n	800f914 <_strtoul_l.isra.0+0x4a>
	...

0800f9c0 <_strtoul_r>:
 800f9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9c2:	4c06      	ldr	r4, [pc, #24]	; (800f9dc <_strtoul_r+0x1c>)
 800f9c4:	4d06      	ldr	r5, [pc, #24]	; (800f9e0 <_strtoul_r+0x20>)
 800f9c6:	6824      	ldr	r4, [r4, #0]
 800f9c8:	6a24      	ldr	r4, [r4, #32]
 800f9ca:	2c00      	cmp	r4, #0
 800f9cc:	bf08      	it	eq
 800f9ce:	462c      	moveq	r4, r5
 800f9d0:	9400      	str	r4, [sp, #0]
 800f9d2:	f7ff ff7a 	bl	800f8ca <_strtoul_l.isra.0>
 800f9d6:	b003      	add	sp, #12
 800f9d8:	bd30      	pop	{r4, r5, pc}
 800f9da:	bf00      	nop
 800f9dc:	20000010 	.word	0x20000010
 800f9e0:	200000d8 	.word	0x200000d8

0800f9e4 <strtoul>:
 800f9e4:	4b08      	ldr	r3, [pc, #32]	; (800fa08 <strtoul+0x24>)
 800f9e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9e8:	681c      	ldr	r4, [r3, #0]
 800f9ea:	4d08      	ldr	r5, [pc, #32]	; (800fa0c <strtoul+0x28>)
 800f9ec:	6a23      	ldr	r3, [r4, #32]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	bf08      	it	eq
 800f9f2:	462b      	moveq	r3, r5
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	4613      	mov	r3, r2
 800f9f8:	460a      	mov	r2, r1
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	f7ff ff64 	bl	800f8ca <_strtoul_l.isra.0>
 800fa02:	b003      	add	sp, #12
 800fa04:	bd30      	pop	{r4, r5, pc}
 800fa06:	bf00      	nop
 800fa08:	20000010 	.word	0x20000010
 800fa0c:	200000d8 	.word	0x200000d8

0800fa10 <_write_r>:
 800fa10:	b538      	push	{r3, r4, r5, lr}
 800fa12:	4c07      	ldr	r4, [pc, #28]	; (800fa30 <_write_r+0x20>)
 800fa14:	4605      	mov	r5, r0
 800fa16:	4608      	mov	r0, r1
 800fa18:	4611      	mov	r1, r2
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	6022      	str	r2, [r4, #0]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	f7f2 fd13 	bl	800244a <_write>
 800fa24:	1c43      	adds	r3, r0, #1
 800fa26:	d102      	bne.n	800fa2e <_write_r+0x1e>
 800fa28:	6823      	ldr	r3, [r4, #0]
 800fa2a:	b103      	cbz	r3, 800fa2e <_write_r+0x1e>
 800fa2c:	602b      	str	r3, [r5, #0]
 800fa2e:	bd38      	pop	{r3, r4, r5, pc}
 800fa30:	20006b20 	.word	0x20006b20

0800fa34 <_close_r>:
 800fa34:	b538      	push	{r3, r4, r5, lr}
 800fa36:	4c06      	ldr	r4, [pc, #24]	; (800fa50 <_close_r+0x1c>)
 800fa38:	2300      	movs	r3, #0
 800fa3a:	4605      	mov	r5, r0
 800fa3c:	4608      	mov	r0, r1
 800fa3e:	6023      	str	r3, [r4, #0]
 800fa40:	f7f3 f84f 	bl	8002ae2 <_close>
 800fa44:	1c43      	adds	r3, r0, #1
 800fa46:	d102      	bne.n	800fa4e <_close_r+0x1a>
 800fa48:	6823      	ldr	r3, [r4, #0]
 800fa4a:	b103      	cbz	r3, 800fa4e <_close_r+0x1a>
 800fa4c:	602b      	str	r3, [r5, #0]
 800fa4e:	bd38      	pop	{r3, r4, r5, pc}
 800fa50:	20006b20 	.word	0x20006b20

0800fa54 <__env_lock>:
 800fa54:	4770      	bx	lr

0800fa56 <__env_unlock>:
 800fa56:	4770      	bx	lr

0800fa58 <_fstat_r>:
 800fa58:	b538      	push	{r3, r4, r5, lr}
 800fa5a:	4c07      	ldr	r4, [pc, #28]	; (800fa78 <_fstat_r+0x20>)
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	4605      	mov	r5, r0
 800fa60:	4608      	mov	r0, r1
 800fa62:	4611      	mov	r1, r2
 800fa64:	6023      	str	r3, [r4, #0]
 800fa66:	f7f3 f848 	bl	8002afa <_fstat>
 800fa6a:	1c43      	adds	r3, r0, #1
 800fa6c:	d102      	bne.n	800fa74 <_fstat_r+0x1c>
 800fa6e:	6823      	ldr	r3, [r4, #0]
 800fa70:	b103      	cbz	r3, 800fa74 <_fstat_r+0x1c>
 800fa72:	602b      	str	r3, [r5, #0]
 800fa74:	bd38      	pop	{r3, r4, r5, pc}
 800fa76:	bf00      	nop
 800fa78:	20006b20 	.word	0x20006b20

0800fa7c <_isatty_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4c06      	ldr	r4, [pc, #24]	; (800fa98 <_isatty_r+0x1c>)
 800fa80:	2300      	movs	r3, #0
 800fa82:	4605      	mov	r5, r0
 800fa84:	4608      	mov	r0, r1
 800fa86:	6023      	str	r3, [r4, #0]
 800fa88:	f7f3 f847 	bl	8002b1a <_isatty>
 800fa8c:	1c43      	adds	r3, r0, #1
 800fa8e:	d102      	bne.n	800fa96 <_isatty_r+0x1a>
 800fa90:	6823      	ldr	r3, [r4, #0]
 800fa92:	b103      	cbz	r3, 800fa96 <_isatty_r+0x1a>
 800fa94:	602b      	str	r3, [r5, #0]
 800fa96:	bd38      	pop	{r3, r4, r5, pc}
 800fa98:	20006b20 	.word	0x20006b20

0800fa9c <__locale_ctype_ptr_l>:
 800fa9c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800faa0:	4770      	bx	lr
	...

0800faa4 <__locale_ctype_ptr>:
 800faa4:	4b04      	ldr	r3, [pc, #16]	; (800fab8 <__locale_ctype_ptr+0x14>)
 800faa6:	4a05      	ldr	r2, [pc, #20]	; (800fabc <__locale_ctype_ptr+0x18>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	6a1b      	ldr	r3, [r3, #32]
 800faac:	2b00      	cmp	r3, #0
 800faae:	bf08      	it	eq
 800fab0:	4613      	moveq	r3, r2
 800fab2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800fab6:	4770      	bx	lr
 800fab8:	20000010 	.word	0x20000010
 800fabc:	200000d8 	.word	0x200000d8

0800fac0 <_lseek_r>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4c07      	ldr	r4, [pc, #28]	; (800fae0 <_lseek_r+0x20>)
 800fac4:	4605      	mov	r5, r0
 800fac6:	4608      	mov	r0, r1
 800fac8:	4611      	mov	r1, r2
 800faca:	2200      	movs	r2, #0
 800facc:	6022      	str	r2, [r4, #0]
 800face:	461a      	mov	r2, r3
 800fad0:	f7f3 f82e 	bl	8002b30 <_lseek>
 800fad4:	1c43      	adds	r3, r0, #1
 800fad6:	d102      	bne.n	800fade <_lseek_r+0x1e>
 800fad8:	6823      	ldr	r3, [r4, #0]
 800fada:	b103      	cbz	r3, 800fade <_lseek_r+0x1e>
 800fadc:	602b      	str	r3, [r5, #0]
 800fade:	bd38      	pop	{r3, r4, r5, pc}
 800fae0:	20006b20 	.word	0x20006b20

0800fae4 <__ascii_mbtowc>:
 800fae4:	b082      	sub	sp, #8
 800fae6:	b901      	cbnz	r1, 800faea <__ascii_mbtowc+0x6>
 800fae8:	a901      	add	r1, sp, #4
 800faea:	b142      	cbz	r2, 800fafe <__ascii_mbtowc+0x1a>
 800faec:	b14b      	cbz	r3, 800fb02 <__ascii_mbtowc+0x1e>
 800faee:	7813      	ldrb	r3, [r2, #0]
 800faf0:	600b      	str	r3, [r1, #0]
 800faf2:	7812      	ldrb	r2, [r2, #0]
 800faf4:	1c10      	adds	r0, r2, #0
 800faf6:	bf18      	it	ne
 800faf8:	2001      	movne	r0, #1
 800fafa:	b002      	add	sp, #8
 800fafc:	4770      	bx	lr
 800fafe:	4610      	mov	r0, r2
 800fb00:	e7fb      	b.n	800fafa <__ascii_mbtowc+0x16>
 800fb02:	f06f 0001 	mvn.w	r0, #1
 800fb06:	e7f8      	b.n	800fafa <__ascii_mbtowc+0x16>

0800fb08 <memmove>:
 800fb08:	4288      	cmp	r0, r1
 800fb0a:	b510      	push	{r4, lr}
 800fb0c:	eb01 0302 	add.w	r3, r1, r2
 800fb10:	d807      	bhi.n	800fb22 <memmove+0x1a>
 800fb12:	1e42      	subs	r2, r0, #1
 800fb14:	4299      	cmp	r1, r3
 800fb16:	d00a      	beq.n	800fb2e <memmove+0x26>
 800fb18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb1c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fb20:	e7f8      	b.n	800fb14 <memmove+0xc>
 800fb22:	4283      	cmp	r3, r0
 800fb24:	d9f5      	bls.n	800fb12 <memmove+0xa>
 800fb26:	1881      	adds	r1, r0, r2
 800fb28:	1ad2      	subs	r2, r2, r3
 800fb2a:	42d3      	cmn	r3, r2
 800fb2c:	d100      	bne.n	800fb30 <memmove+0x28>
 800fb2e:	bd10      	pop	{r4, pc}
 800fb30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb34:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fb38:	e7f7      	b.n	800fb2a <memmove+0x22>

0800fb3a <_realloc_r>:
 800fb3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3c:	4607      	mov	r7, r0
 800fb3e:	4614      	mov	r4, r2
 800fb40:	460e      	mov	r6, r1
 800fb42:	b921      	cbnz	r1, 800fb4e <_realloc_r+0x14>
 800fb44:	4611      	mov	r1, r2
 800fb46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fb4a:	f7fc bfc1 	b.w	800cad0 <_malloc_r>
 800fb4e:	b922      	cbnz	r2, 800fb5a <_realloc_r+0x20>
 800fb50:	f7fc ff70 	bl	800ca34 <_free_r>
 800fb54:	4625      	mov	r5, r4
 800fb56:	4628      	mov	r0, r5
 800fb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb5a:	f000 fc30 	bl	80103be <_malloc_usable_size_r>
 800fb5e:	42a0      	cmp	r0, r4
 800fb60:	d20f      	bcs.n	800fb82 <_realloc_r+0x48>
 800fb62:	4621      	mov	r1, r4
 800fb64:	4638      	mov	r0, r7
 800fb66:	f7fc ffb3 	bl	800cad0 <_malloc_r>
 800fb6a:	4605      	mov	r5, r0
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	d0f2      	beq.n	800fb56 <_realloc_r+0x1c>
 800fb70:	4631      	mov	r1, r6
 800fb72:	4622      	mov	r2, r4
 800fb74:	f7ff f8a0 	bl	800ecb8 <memcpy>
 800fb78:	4631      	mov	r1, r6
 800fb7a:	4638      	mov	r0, r7
 800fb7c:	f7fc ff5a 	bl	800ca34 <_free_r>
 800fb80:	e7e9      	b.n	800fb56 <_realloc_r+0x1c>
 800fb82:	4635      	mov	r5, r6
 800fb84:	e7e7      	b.n	800fb56 <_realloc_r+0x1c>

0800fb86 <_sungetc_r>:
 800fb86:	b538      	push	{r3, r4, r5, lr}
 800fb88:	1c4b      	adds	r3, r1, #1
 800fb8a:	4614      	mov	r4, r2
 800fb8c:	d103      	bne.n	800fb96 <_sungetc_r+0x10>
 800fb8e:	f04f 35ff 	mov.w	r5, #4294967295
 800fb92:	4628      	mov	r0, r5
 800fb94:	bd38      	pop	{r3, r4, r5, pc}
 800fb96:	8993      	ldrh	r3, [r2, #12]
 800fb98:	f023 0320 	bic.w	r3, r3, #32
 800fb9c:	8193      	strh	r3, [r2, #12]
 800fb9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fba0:	6852      	ldr	r2, [r2, #4]
 800fba2:	b2cd      	uxtb	r5, r1
 800fba4:	b18b      	cbz	r3, 800fbca <_sungetc_r+0x44>
 800fba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	dd08      	ble.n	800fbbe <_sungetc_r+0x38>
 800fbac:	6823      	ldr	r3, [r4, #0]
 800fbae:	1e5a      	subs	r2, r3, #1
 800fbb0:	6022      	str	r2, [r4, #0]
 800fbb2:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fbb6:	6863      	ldr	r3, [r4, #4]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	6063      	str	r3, [r4, #4]
 800fbbc:	e7e9      	b.n	800fb92 <_sungetc_r+0xc>
 800fbbe:	4621      	mov	r1, r4
 800fbc0:	f000 fbb6 	bl	8010330 <__submore>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d0f1      	beq.n	800fbac <_sungetc_r+0x26>
 800fbc8:	e7e1      	b.n	800fb8e <_sungetc_r+0x8>
 800fbca:	6921      	ldr	r1, [r4, #16]
 800fbcc:	6823      	ldr	r3, [r4, #0]
 800fbce:	b151      	cbz	r1, 800fbe6 <_sungetc_r+0x60>
 800fbd0:	4299      	cmp	r1, r3
 800fbd2:	d208      	bcs.n	800fbe6 <_sungetc_r+0x60>
 800fbd4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800fbd8:	42a9      	cmp	r1, r5
 800fbda:	d104      	bne.n	800fbe6 <_sungetc_r+0x60>
 800fbdc:	3b01      	subs	r3, #1
 800fbde:	3201      	adds	r2, #1
 800fbe0:	6023      	str	r3, [r4, #0]
 800fbe2:	6062      	str	r2, [r4, #4]
 800fbe4:	e7d5      	b.n	800fb92 <_sungetc_r+0xc>
 800fbe6:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800fbea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbee:	6363      	str	r3, [r4, #52]	; 0x34
 800fbf0:	2303      	movs	r3, #3
 800fbf2:	63a3      	str	r3, [r4, #56]	; 0x38
 800fbf4:	4623      	mov	r3, r4
 800fbf6:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fbfa:	6023      	str	r3, [r4, #0]
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	e7dc      	b.n	800fbba <_sungetc_r+0x34>

0800fc00 <__ssrefill_r>:
 800fc00:	b510      	push	{r4, lr}
 800fc02:	460c      	mov	r4, r1
 800fc04:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fc06:	b169      	cbz	r1, 800fc24 <__ssrefill_r+0x24>
 800fc08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc0c:	4299      	cmp	r1, r3
 800fc0e:	d001      	beq.n	800fc14 <__ssrefill_r+0x14>
 800fc10:	f7fc ff10 	bl	800ca34 <_free_r>
 800fc14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc16:	6063      	str	r3, [r4, #4]
 800fc18:	2000      	movs	r0, #0
 800fc1a:	6360      	str	r0, [r4, #52]	; 0x34
 800fc1c:	b113      	cbz	r3, 800fc24 <__ssrefill_r+0x24>
 800fc1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	bd10      	pop	{r4, pc}
 800fc24:	6923      	ldr	r3, [r4, #16]
 800fc26:	6023      	str	r3, [r4, #0]
 800fc28:	2300      	movs	r3, #0
 800fc2a:	6063      	str	r3, [r4, #4]
 800fc2c:	89a3      	ldrh	r3, [r4, #12]
 800fc2e:	f043 0320 	orr.w	r3, r3, #32
 800fc32:	81a3      	strh	r3, [r4, #12]
 800fc34:	f04f 30ff 	mov.w	r0, #4294967295
 800fc38:	e7f3      	b.n	800fc22 <__ssrefill_r+0x22>
	...

0800fc3c <__ssvfiscanf_r>:
 800fc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc40:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800fc44:	460c      	mov	r4, r1
 800fc46:	2100      	movs	r1, #0
 800fc48:	9144      	str	r1, [sp, #272]	; 0x110
 800fc4a:	9145      	str	r1, [sp, #276]	; 0x114
 800fc4c:	499f      	ldr	r1, [pc, #636]	; (800fecc <__ssvfiscanf_r+0x290>)
 800fc4e:	91a0      	str	r1, [sp, #640]	; 0x280
 800fc50:	f10d 0804 	add.w	r8, sp, #4
 800fc54:	499e      	ldr	r1, [pc, #632]	; (800fed0 <__ssvfiscanf_r+0x294>)
 800fc56:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800fed4 <__ssvfiscanf_r+0x298>
 800fc5a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800fc5e:	4606      	mov	r6, r0
 800fc60:	4692      	mov	sl, r2
 800fc62:	91a1      	str	r1, [sp, #644]	; 0x284
 800fc64:	9300      	str	r3, [sp, #0]
 800fc66:	270a      	movs	r7, #10
 800fc68:	f89a 3000 	ldrb.w	r3, [sl]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	f000 812a 	beq.w	800fec6 <__ssvfiscanf_r+0x28a>
 800fc72:	4655      	mov	r5, sl
 800fc74:	f7ff ff16 	bl	800faa4 <__locale_ctype_ptr>
 800fc78:	f815 bb01 	ldrb.w	fp, [r5], #1
 800fc7c:	4458      	add	r0, fp
 800fc7e:	7843      	ldrb	r3, [r0, #1]
 800fc80:	f013 0308 	ands.w	r3, r3, #8
 800fc84:	d01c      	beq.n	800fcc0 <__ssvfiscanf_r+0x84>
 800fc86:	6863      	ldr	r3, [r4, #4]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	dd12      	ble.n	800fcb2 <__ssvfiscanf_r+0x76>
 800fc8c:	f7ff ff0a 	bl	800faa4 <__locale_ctype_ptr>
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	781a      	ldrb	r2, [r3, #0]
 800fc94:	4410      	add	r0, r2
 800fc96:	7842      	ldrb	r2, [r0, #1]
 800fc98:	0712      	lsls	r2, r2, #28
 800fc9a:	d401      	bmi.n	800fca0 <__ssvfiscanf_r+0x64>
 800fc9c:	46aa      	mov	sl, r5
 800fc9e:	e7e3      	b.n	800fc68 <__ssvfiscanf_r+0x2c>
 800fca0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fca2:	3201      	adds	r2, #1
 800fca4:	9245      	str	r2, [sp, #276]	; 0x114
 800fca6:	6862      	ldr	r2, [r4, #4]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	3a01      	subs	r2, #1
 800fcac:	6062      	str	r2, [r4, #4]
 800fcae:	6023      	str	r3, [r4, #0]
 800fcb0:	e7e9      	b.n	800fc86 <__ssvfiscanf_r+0x4a>
 800fcb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	4798      	blx	r3
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	d0e6      	beq.n	800fc8c <__ssvfiscanf_r+0x50>
 800fcbe:	e7ed      	b.n	800fc9c <__ssvfiscanf_r+0x60>
 800fcc0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800fcc4:	f040 8082 	bne.w	800fdcc <__ssvfiscanf_r+0x190>
 800fcc8:	9343      	str	r3, [sp, #268]	; 0x10c
 800fcca:	9341      	str	r3, [sp, #260]	; 0x104
 800fccc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800fcd0:	2b2a      	cmp	r3, #42	; 0x2a
 800fcd2:	d103      	bne.n	800fcdc <__ssvfiscanf_r+0xa0>
 800fcd4:	2310      	movs	r3, #16
 800fcd6:	9341      	str	r3, [sp, #260]	; 0x104
 800fcd8:	f10a 0502 	add.w	r5, sl, #2
 800fcdc:	46aa      	mov	sl, r5
 800fcde:	f815 1b01 	ldrb.w	r1, [r5], #1
 800fce2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800fce6:	2a09      	cmp	r2, #9
 800fce8:	d922      	bls.n	800fd30 <__ssvfiscanf_r+0xf4>
 800fcea:	2203      	movs	r2, #3
 800fcec:	4879      	ldr	r0, [pc, #484]	; (800fed4 <__ssvfiscanf_r+0x298>)
 800fcee:	f7f0 fa77 	bl	80001e0 <memchr>
 800fcf2:	b138      	cbz	r0, 800fd04 <__ssvfiscanf_r+0xc8>
 800fcf4:	eba0 0309 	sub.w	r3, r0, r9
 800fcf8:	2001      	movs	r0, #1
 800fcfa:	4098      	lsls	r0, r3
 800fcfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fcfe:	4318      	orrs	r0, r3
 800fd00:	9041      	str	r0, [sp, #260]	; 0x104
 800fd02:	46aa      	mov	sl, r5
 800fd04:	f89a 3000 	ldrb.w	r3, [sl]
 800fd08:	2b67      	cmp	r3, #103	; 0x67
 800fd0a:	f10a 0501 	add.w	r5, sl, #1
 800fd0e:	d82b      	bhi.n	800fd68 <__ssvfiscanf_r+0x12c>
 800fd10:	2b65      	cmp	r3, #101	; 0x65
 800fd12:	f080 809f 	bcs.w	800fe54 <__ssvfiscanf_r+0x218>
 800fd16:	2b47      	cmp	r3, #71	; 0x47
 800fd18:	d810      	bhi.n	800fd3c <__ssvfiscanf_r+0x100>
 800fd1a:	2b45      	cmp	r3, #69	; 0x45
 800fd1c:	f080 809a 	bcs.w	800fe54 <__ssvfiscanf_r+0x218>
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d06c      	beq.n	800fdfe <__ssvfiscanf_r+0x1c2>
 800fd24:	2b25      	cmp	r3, #37	; 0x25
 800fd26:	d051      	beq.n	800fdcc <__ssvfiscanf_r+0x190>
 800fd28:	2303      	movs	r3, #3
 800fd2a:	9347      	str	r3, [sp, #284]	; 0x11c
 800fd2c:	9742      	str	r7, [sp, #264]	; 0x108
 800fd2e:	e027      	b.n	800fd80 <__ssvfiscanf_r+0x144>
 800fd30:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fd32:	fb07 1303 	mla	r3, r7, r3, r1
 800fd36:	3b30      	subs	r3, #48	; 0x30
 800fd38:	9343      	str	r3, [sp, #268]	; 0x10c
 800fd3a:	e7cf      	b.n	800fcdc <__ssvfiscanf_r+0xa0>
 800fd3c:	2b5b      	cmp	r3, #91	; 0x5b
 800fd3e:	d06a      	beq.n	800fe16 <__ssvfiscanf_r+0x1da>
 800fd40:	d80c      	bhi.n	800fd5c <__ssvfiscanf_r+0x120>
 800fd42:	2b58      	cmp	r3, #88	; 0x58
 800fd44:	d1f0      	bne.n	800fd28 <__ssvfiscanf_r+0xec>
 800fd46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fd48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd4c:	9241      	str	r2, [sp, #260]	; 0x104
 800fd4e:	2210      	movs	r2, #16
 800fd50:	9242      	str	r2, [sp, #264]	; 0x108
 800fd52:	2b6e      	cmp	r3, #110	; 0x6e
 800fd54:	bf8c      	ite	hi
 800fd56:	2304      	movhi	r3, #4
 800fd58:	2303      	movls	r3, #3
 800fd5a:	e010      	b.n	800fd7e <__ssvfiscanf_r+0x142>
 800fd5c:	2b63      	cmp	r3, #99	; 0x63
 800fd5e:	d065      	beq.n	800fe2c <__ssvfiscanf_r+0x1f0>
 800fd60:	2b64      	cmp	r3, #100	; 0x64
 800fd62:	d1e1      	bne.n	800fd28 <__ssvfiscanf_r+0xec>
 800fd64:	9742      	str	r7, [sp, #264]	; 0x108
 800fd66:	e7f4      	b.n	800fd52 <__ssvfiscanf_r+0x116>
 800fd68:	2b70      	cmp	r3, #112	; 0x70
 800fd6a:	d04b      	beq.n	800fe04 <__ssvfiscanf_r+0x1c8>
 800fd6c:	d826      	bhi.n	800fdbc <__ssvfiscanf_r+0x180>
 800fd6e:	2b6e      	cmp	r3, #110	; 0x6e
 800fd70:	d062      	beq.n	800fe38 <__ssvfiscanf_r+0x1fc>
 800fd72:	d84c      	bhi.n	800fe0e <__ssvfiscanf_r+0x1d2>
 800fd74:	2b69      	cmp	r3, #105	; 0x69
 800fd76:	d1d7      	bne.n	800fd28 <__ssvfiscanf_r+0xec>
 800fd78:	2300      	movs	r3, #0
 800fd7a:	9342      	str	r3, [sp, #264]	; 0x108
 800fd7c:	2303      	movs	r3, #3
 800fd7e:	9347      	str	r3, [sp, #284]	; 0x11c
 800fd80:	6863      	ldr	r3, [r4, #4]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	dd68      	ble.n	800fe58 <__ssvfiscanf_r+0x21c>
 800fd86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fd88:	0659      	lsls	r1, r3, #25
 800fd8a:	d407      	bmi.n	800fd9c <__ssvfiscanf_r+0x160>
 800fd8c:	f7ff fe8a 	bl	800faa4 <__locale_ctype_ptr>
 800fd90:	6823      	ldr	r3, [r4, #0]
 800fd92:	781a      	ldrb	r2, [r3, #0]
 800fd94:	4410      	add	r0, r2
 800fd96:	7842      	ldrb	r2, [r0, #1]
 800fd98:	0712      	lsls	r2, r2, #28
 800fd9a:	d464      	bmi.n	800fe66 <__ssvfiscanf_r+0x22a>
 800fd9c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fd9e:	2b02      	cmp	r3, #2
 800fda0:	dc73      	bgt.n	800fe8a <__ssvfiscanf_r+0x24e>
 800fda2:	466b      	mov	r3, sp
 800fda4:	4622      	mov	r2, r4
 800fda6:	a941      	add	r1, sp, #260	; 0x104
 800fda8:	4630      	mov	r0, r6
 800fdaa:	f000 f897 	bl	800fedc <_scanf_chars>
 800fdae:	2801      	cmp	r0, #1
 800fdb0:	f000 8089 	beq.w	800fec6 <__ssvfiscanf_r+0x28a>
 800fdb4:	2802      	cmp	r0, #2
 800fdb6:	f47f af71 	bne.w	800fc9c <__ssvfiscanf_r+0x60>
 800fdba:	e01d      	b.n	800fdf8 <__ssvfiscanf_r+0x1bc>
 800fdbc:	2b75      	cmp	r3, #117	; 0x75
 800fdbe:	d0d1      	beq.n	800fd64 <__ssvfiscanf_r+0x128>
 800fdc0:	2b78      	cmp	r3, #120	; 0x78
 800fdc2:	d0c0      	beq.n	800fd46 <__ssvfiscanf_r+0x10a>
 800fdc4:	2b73      	cmp	r3, #115	; 0x73
 800fdc6:	d1af      	bne.n	800fd28 <__ssvfiscanf_r+0xec>
 800fdc8:	2302      	movs	r3, #2
 800fdca:	e7d8      	b.n	800fd7e <__ssvfiscanf_r+0x142>
 800fdcc:	6863      	ldr	r3, [r4, #4]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	dd0c      	ble.n	800fdec <__ssvfiscanf_r+0x1b0>
 800fdd2:	6823      	ldr	r3, [r4, #0]
 800fdd4:	781a      	ldrb	r2, [r3, #0]
 800fdd6:	455a      	cmp	r2, fp
 800fdd8:	d175      	bne.n	800fec6 <__ssvfiscanf_r+0x28a>
 800fdda:	3301      	adds	r3, #1
 800fddc:	6862      	ldr	r2, [r4, #4]
 800fdde:	6023      	str	r3, [r4, #0]
 800fde0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fde2:	3a01      	subs	r2, #1
 800fde4:	3301      	adds	r3, #1
 800fde6:	6062      	str	r2, [r4, #4]
 800fde8:	9345      	str	r3, [sp, #276]	; 0x114
 800fdea:	e757      	b.n	800fc9c <__ssvfiscanf_r+0x60>
 800fdec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fdee:	4621      	mov	r1, r4
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	4798      	blx	r3
 800fdf4:	2800      	cmp	r0, #0
 800fdf6:	d0ec      	beq.n	800fdd2 <__ssvfiscanf_r+0x196>
 800fdf8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	d159      	bne.n	800feb2 <__ssvfiscanf_r+0x276>
 800fdfe:	f04f 30ff 	mov.w	r0, #4294967295
 800fe02:	e05c      	b.n	800febe <__ssvfiscanf_r+0x282>
 800fe04:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fe06:	f042 0220 	orr.w	r2, r2, #32
 800fe0a:	9241      	str	r2, [sp, #260]	; 0x104
 800fe0c:	e79b      	b.n	800fd46 <__ssvfiscanf_r+0x10a>
 800fe0e:	2308      	movs	r3, #8
 800fe10:	9342      	str	r3, [sp, #264]	; 0x108
 800fe12:	2304      	movs	r3, #4
 800fe14:	e7b3      	b.n	800fd7e <__ssvfiscanf_r+0x142>
 800fe16:	4629      	mov	r1, r5
 800fe18:	4640      	mov	r0, r8
 800fe1a:	f000 f9c9 	bl	80101b0 <__sccl>
 800fe1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fe20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe24:	9341      	str	r3, [sp, #260]	; 0x104
 800fe26:	4605      	mov	r5, r0
 800fe28:	2301      	movs	r3, #1
 800fe2a:	e7a8      	b.n	800fd7e <__ssvfiscanf_r+0x142>
 800fe2c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fe2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe32:	9341      	str	r3, [sp, #260]	; 0x104
 800fe34:	2300      	movs	r3, #0
 800fe36:	e7a2      	b.n	800fd7e <__ssvfiscanf_r+0x142>
 800fe38:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fe3a:	06c3      	lsls	r3, r0, #27
 800fe3c:	f53f af2e 	bmi.w	800fc9c <__ssvfiscanf_r+0x60>
 800fe40:	9b00      	ldr	r3, [sp, #0]
 800fe42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fe44:	1d19      	adds	r1, r3, #4
 800fe46:	9100      	str	r1, [sp, #0]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	07c0      	lsls	r0, r0, #31
 800fe4c:	bf4c      	ite	mi
 800fe4e:	801a      	strhmi	r2, [r3, #0]
 800fe50:	601a      	strpl	r2, [r3, #0]
 800fe52:	e723      	b.n	800fc9c <__ssvfiscanf_r+0x60>
 800fe54:	2305      	movs	r3, #5
 800fe56:	e792      	b.n	800fd7e <__ssvfiscanf_r+0x142>
 800fe58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fe5a:	4621      	mov	r1, r4
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	4798      	blx	r3
 800fe60:	2800      	cmp	r0, #0
 800fe62:	d090      	beq.n	800fd86 <__ssvfiscanf_r+0x14a>
 800fe64:	e7c8      	b.n	800fdf8 <__ssvfiscanf_r+0x1bc>
 800fe66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fe68:	3201      	adds	r2, #1
 800fe6a:	9245      	str	r2, [sp, #276]	; 0x114
 800fe6c:	6862      	ldr	r2, [r4, #4]
 800fe6e:	3a01      	subs	r2, #1
 800fe70:	2a00      	cmp	r2, #0
 800fe72:	6062      	str	r2, [r4, #4]
 800fe74:	dd02      	ble.n	800fe7c <__ssvfiscanf_r+0x240>
 800fe76:	3301      	adds	r3, #1
 800fe78:	6023      	str	r3, [r4, #0]
 800fe7a:	e787      	b.n	800fd8c <__ssvfiscanf_r+0x150>
 800fe7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fe7e:	4621      	mov	r1, r4
 800fe80:	4630      	mov	r0, r6
 800fe82:	4798      	blx	r3
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d081      	beq.n	800fd8c <__ssvfiscanf_r+0x150>
 800fe88:	e7b6      	b.n	800fdf8 <__ssvfiscanf_r+0x1bc>
 800fe8a:	2b04      	cmp	r3, #4
 800fe8c:	dc06      	bgt.n	800fe9c <__ssvfiscanf_r+0x260>
 800fe8e:	466b      	mov	r3, sp
 800fe90:	4622      	mov	r2, r4
 800fe92:	a941      	add	r1, sp, #260	; 0x104
 800fe94:	4630      	mov	r0, r6
 800fe96:	f000 f885 	bl	800ffa4 <_scanf_i>
 800fe9a:	e788      	b.n	800fdae <__ssvfiscanf_r+0x172>
 800fe9c:	4b0e      	ldr	r3, [pc, #56]	; (800fed8 <__ssvfiscanf_r+0x29c>)
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f43f aefc 	beq.w	800fc9c <__ssvfiscanf_r+0x60>
 800fea4:	466b      	mov	r3, sp
 800fea6:	4622      	mov	r2, r4
 800fea8:	a941      	add	r1, sp, #260	; 0x104
 800feaa:	4630      	mov	r0, r6
 800feac:	f3af 8000 	nop.w
 800feb0:	e77d      	b.n	800fdae <__ssvfiscanf_r+0x172>
 800feb2:	89a3      	ldrh	r3, [r4, #12]
 800feb4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800feb8:	bf18      	it	ne
 800feba:	f04f 30ff 	movne.w	r0, #4294967295
 800febe:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800fec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fec8:	e7f9      	b.n	800febe <__ssvfiscanf_r+0x282>
 800feca:	bf00      	nop
 800fecc:	0800fb87 	.word	0x0800fb87
 800fed0:	0800fc01 	.word	0x0800fc01
 800fed4:	08010e12 	.word	0x08010e12
 800fed8:	00000000 	.word	0x00000000

0800fedc <_scanf_chars>:
 800fedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee0:	4615      	mov	r5, r2
 800fee2:	688a      	ldr	r2, [r1, #8]
 800fee4:	4680      	mov	r8, r0
 800fee6:	460c      	mov	r4, r1
 800fee8:	b932      	cbnz	r2, 800fef8 <_scanf_chars+0x1c>
 800feea:	698a      	ldr	r2, [r1, #24]
 800feec:	2a00      	cmp	r2, #0
 800feee:	bf14      	ite	ne
 800fef0:	f04f 32ff 	movne.w	r2, #4294967295
 800fef4:	2201      	moveq	r2, #1
 800fef6:	608a      	str	r2, [r1, #8]
 800fef8:	6822      	ldr	r2, [r4, #0]
 800fefa:	06d1      	lsls	r1, r2, #27
 800fefc:	bf5f      	itttt	pl
 800fefe:	681a      	ldrpl	r2, [r3, #0]
 800ff00:	1d11      	addpl	r1, r2, #4
 800ff02:	6019      	strpl	r1, [r3, #0]
 800ff04:	6817      	ldrpl	r7, [r2, #0]
 800ff06:	2600      	movs	r6, #0
 800ff08:	69a3      	ldr	r3, [r4, #24]
 800ff0a:	b1db      	cbz	r3, 800ff44 <_scanf_chars+0x68>
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d107      	bne.n	800ff20 <_scanf_chars+0x44>
 800ff10:	682b      	ldr	r3, [r5, #0]
 800ff12:	6962      	ldr	r2, [r4, #20]
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	5cd3      	ldrb	r3, [r2, r3]
 800ff18:	b9a3      	cbnz	r3, 800ff44 <_scanf_chars+0x68>
 800ff1a:	2e00      	cmp	r6, #0
 800ff1c:	d132      	bne.n	800ff84 <_scanf_chars+0xa8>
 800ff1e:	e006      	b.n	800ff2e <_scanf_chars+0x52>
 800ff20:	2b02      	cmp	r3, #2
 800ff22:	d007      	beq.n	800ff34 <_scanf_chars+0x58>
 800ff24:	2e00      	cmp	r6, #0
 800ff26:	d12d      	bne.n	800ff84 <_scanf_chars+0xa8>
 800ff28:	69a3      	ldr	r3, [r4, #24]
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	d12a      	bne.n	800ff84 <_scanf_chars+0xa8>
 800ff2e:	2001      	movs	r0, #1
 800ff30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff34:	f7ff fdb6 	bl	800faa4 <__locale_ctype_ptr>
 800ff38:	682b      	ldr	r3, [r5, #0]
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	4418      	add	r0, r3
 800ff3e:	7843      	ldrb	r3, [r0, #1]
 800ff40:	071b      	lsls	r3, r3, #28
 800ff42:	d4ef      	bmi.n	800ff24 <_scanf_chars+0x48>
 800ff44:	6823      	ldr	r3, [r4, #0]
 800ff46:	06da      	lsls	r2, r3, #27
 800ff48:	bf5e      	ittt	pl
 800ff4a:	682b      	ldrpl	r3, [r5, #0]
 800ff4c:	781b      	ldrbpl	r3, [r3, #0]
 800ff4e:	703b      	strbpl	r3, [r7, #0]
 800ff50:	682a      	ldr	r2, [r5, #0]
 800ff52:	686b      	ldr	r3, [r5, #4]
 800ff54:	f102 0201 	add.w	r2, r2, #1
 800ff58:	602a      	str	r2, [r5, #0]
 800ff5a:	68a2      	ldr	r2, [r4, #8]
 800ff5c:	f103 33ff 	add.w	r3, r3, #4294967295
 800ff60:	f102 32ff 	add.w	r2, r2, #4294967295
 800ff64:	606b      	str	r3, [r5, #4]
 800ff66:	f106 0601 	add.w	r6, r6, #1
 800ff6a:	bf58      	it	pl
 800ff6c:	3701      	addpl	r7, #1
 800ff6e:	60a2      	str	r2, [r4, #8]
 800ff70:	b142      	cbz	r2, 800ff84 <_scanf_chars+0xa8>
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	dcc8      	bgt.n	800ff08 <_scanf_chars+0x2c>
 800ff76:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ff7a:	4629      	mov	r1, r5
 800ff7c:	4640      	mov	r0, r8
 800ff7e:	4798      	blx	r3
 800ff80:	2800      	cmp	r0, #0
 800ff82:	d0c1      	beq.n	800ff08 <_scanf_chars+0x2c>
 800ff84:	6823      	ldr	r3, [r4, #0]
 800ff86:	f013 0310 	ands.w	r3, r3, #16
 800ff8a:	d105      	bne.n	800ff98 <_scanf_chars+0xbc>
 800ff8c:	68e2      	ldr	r2, [r4, #12]
 800ff8e:	3201      	adds	r2, #1
 800ff90:	60e2      	str	r2, [r4, #12]
 800ff92:	69a2      	ldr	r2, [r4, #24]
 800ff94:	b102      	cbz	r2, 800ff98 <_scanf_chars+0xbc>
 800ff96:	703b      	strb	r3, [r7, #0]
 800ff98:	6923      	ldr	r3, [r4, #16]
 800ff9a:	441e      	add	r6, r3
 800ff9c:	6126      	str	r6, [r4, #16]
 800ff9e:	2000      	movs	r0, #0
 800ffa0:	e7c6      	b.n	800ff30 <_scanf_chars+0x54>
	...

0800ffa4 <_scanf_i>:
 800ffa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa8:	469a      	mov	sl, r3
 800ffaa:	4b74      	ldr	r3, [pc, #464]	; (801017c <_scanf_i+0x1d8>)
 800ffac:	460c      	mov	r4, r1
 800ffae:	4683      	mov	fp, r0
 800ffb0:	4616      	mov	r6, r2
 800ffb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ffb6:	b087      	sub	sp, #28
 800ffb8:	ab03      	add	r3, sp, #12
 800ffba:	68a7      	ldr	r7, [r4, #8]
 800ffbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ffc0:	4b6f      	ldr	r3, [pc, #444]	; (8010180 <_scanf_i+0x1dc>)
 800ffc2:	69a1      	ldr	r1, [r4, #24]
 800ffc4:	4a6f      	ldr	r2, [pc, #444]	; (8010184 <_scanf_i+0x1e0>)
 800ffc6:	2903      	cmp	r1, #3
 800ffc8:	bf08      	it	eq
 800ffca:	461a      	moveq	r2, r3
 800ffcc:	1e7b      	subs	r3, r7, #1
 800ffce:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800ffd2:	bf84      	itt	hi
 800ffd4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ffd8:	60a3      	strhi	r3, [r4, #8]
 800ffda:	6823      	ldr	r3, [r4, #0]
 800ffdc:	9200      	str	r2, [sp, #0]
 800ffde:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ffe2:	bf88      	it	hi
 800ffe4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ffe8:	f104 091c 	add.w	r9, r4, #28
 800ffec:	6023      	str	r3, [r4, #0]
 800ffee:	bf8c      	ite	hi
 800fff0:	197f      	addhi	r7, r7, r5
 800fff2:	2700      	movls	r7, #0
 800fff4:	464b      	mov	r3, r9
 800fff6:	f04f 0800 	mov.w	r8, #0
 800fffa:	9301      	str	r3, [sp, #4]
 800fffc:	6831      	ldr	r1, [r6, #0]
 800fffe:	ab03      	add	r3, sp, #12
 8010000:	2202      	movs	r2, #2
 8010002:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010006:	7809      	ldrb	r1, [r1, #0]
 8010008:	f7f0 f8ea 	bl	80001e0 <memchr>
 801000c:	9b01      	ldr	r3, [sp, #4]
 801000e:	b330      	cbz	r0, 801005e <_scanf_i+0xba>
 8010010:	f1b8 0f01 	cmp.w	r8, #1
 8010014:	d15a      	bne.n	80100cc <_scanf_i+0x128>
 8010016:	6862      	ldr	r2, [r4, #4]
 8010018:	b92a      	cbnz	r2, 8010026 <_scanf_i+0x82>
 801001a:	6822      	ldr	r2, [r4, #0]
 801001c:	2108      	movs	r1, #8
 801001e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010022:	6061      	str	r1, [r4, #4]
 8010024:	6022      	str	r2, [r4, #0]
 8010026:	6822      	ldr	r2, [r4, #0]
 8010028:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801002c:	6022      	str	r2, [r4, #0]
 801002e:	68a2      	ldr	r2, [r4, #8]
 8010030:	1e51      	subs	r1, r2, #1
 8010032:	60a1      	str	r1, [r4, #8]
 8010034:	b19a      	cbz	r2, 801005e <_scanf_i+0xba>
 8010036:	6832      	ldr	r2, [r6, #0]
 8010038:	1c51      	adds	r1, r2, #1
 801003a:	6031      	str	r1, [r6, #0]
 801003c:	7812      	ldrb	r2, [r2, #0]
 801003e:	701a      	strb	r2, [r3, #0]
 8010040:	1c5d      	adds	r5, r3, #1
 8010042:	6873      	ldr	r3, [r6, #4]
 8010044:	3b01      	subs	r3, #1
 8010046:	2b00      	cmp	r3, #0
 8010048:	6073      	str	r3, [r6, #4]
 801004a:	dc07      	bgt.n	801005c <_scanf_i+0xb8>
 801004c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010050:	4631      	mov	r1, r6
 8010052:	4658      	mov	r0, fp
 8010054:	4798      	blx	r3
 8010056:	2800      	cmp	r0, #0
 8010058:	f040 8086 	bne.w	8010168 <_scanf_i+0x1c4>
 801005c:	462b      	mov	r3, r5
 801005e:	f108 0801 	add.w	r8, r8, #1
 8010062:	f1b8 0f03 	cmp.w	r8, #3
 8010066:	d1c8      	bne.n	800fffa <_scanf_i+0x56>
 8010068:	6862      	ldr	r2, [r4, #4]
 801006a:	b90a      	cbnz	r2, 8010070 <_scanf_i+0xcc>
 801006c:	220a      	movs	r2, #10
 801006e:	6062      	str	r2, [r4, #4]
 8010070:	6862      	ldr	r2, [r4, #4]
 8010072:	4945      	ldr	r1, [pc, #276]	; (8010188 <_scanf_i+0x1e4>)
 8010074:	6960      	ldr	r0, [r4, #20]
 8010076:	9301      	str	r3, [sp, #4]
 8010078:	1a89      	subs	r1, r1, r2
 801007a:	f000 f899 	bl	80101b0 <__sccl>
 801007e:	9b01      	ldr	r3, [sp, #4]
 8010080:	f04f 0800 	mov.w	r8, #0
 8010084:	461d      	mov	r5, r3
 8010086:	68a3      	ldr	r3, [r4, #8]
 8010088:	6822      	ldr	r2, [r4, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d03a      	beq.n	8010104 <_scanf_i+0x160>
 801008e:	6831      	ldr	r1, [r6, #0]
 8010090:	6960      	ldr	r0, [r4, #20]
 8010092:	f891 c000 	ldrb.w	ip, [r1]
 8010096:	f810 000c 	ldrb.w	r0, [r0, ip]
 801009a:	2800      	cmp	r0, #0
 801009c:	d032      	beq.n	8010104 <_scanf_i+0x160>
 801009e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80100a2:	d121      	bne.n	80100e8 <_scanf_i+0x144>
 80100a4:	0510      	lsls	r0, r2, #20
 80100a6:	d51f      	bpl.n	80100e8 <_scanf_i+0x144>
 80100a8:	f108 0801 	add.w	r8, r8, #1
 80100ac:	b117      	cbz	r7, 80100b4 <_scanf_i+0x110>
 80100ae:	3301      	adds	r3, #1
 80100b0:	3f01      	subs	r7, #1
 80100b2:	60a3      	str	r3, [r4, #8]
 80100b4:	6873      	ldr	r3, [r6, #4]
 80100b6:	3b01      	subs	r3, #1
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	6073      	str	r3, [r6, #4]
 80100bc:	dd1b      	ble.n	80100f6 <_scanf_i+0x152>
 80100be:	6833      	ldr	r3, [r6, #0]
 80100c0:	3301      	adds	r3, #1
 80100c2:	6033      	str	r3, [r6, #0]
 80100c4:	68a3      	ldr	r3, [r4, #8]
 80100c6:	3b01      	subs	r3, #1
 80100c8:	60a3      	str	r3, [r4, #8]
 80100ca:	e7dc      	b.n	8010086 <_scanf_i+0xe2>
 80100cc:	f1b8 0f02 	cmp.w	r8, #2
 80100d0:	d1ad      	bne.n	801002e <_scanf_i+0x8a>
 80100d2:	6822      	ldr	r2, [r4, #0]
 80100d4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80100d8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80100dc:	d1bf      	bne.n	801005e <_scanf_i+0xba>
 80100de:	2110      	movs	r1, #16
 80100e0:	6061      	str	r1, [r4, #4]
 80100e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80100e6:	e7a1      	b.n	801002c <_scanf_i+0x88>
 80100e8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80100ec:	6022      	str	r2, [r4, #0]
 80100ee:	780b      	ldrb	r3, [r1, #0]
 80100f0:	702b      	strb	r3, [r5, #0]
 80100f2:	3501      	adds	r5, #1
 80100f4:	e7de      	b.n	80100b4 <_scanf_i+0x110>
 80100f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80100fa:	4631      	mov	r1, r6
 80100fc:	4658      	mov	r0, fp
 80100fe:	4798      	blx	r3
 8010100:	2800      	cmp	r0, #0
 8010102:	d0df      	beq.n	80100c4 <_scanf_i+0x120>
 8010104:	6823      	ldr	r3, [r4, #0]
 8010106:	05d9      	lsls	r1, r3, #23
 8010108:	d50c      	bpl.n	8010124 <_scanf_i+0x180>
 801010a:	454d      	cmp	r5, r9
 801010c:	d908      	bls.n	8010120 <_scanf_i+0x17c>
 801010e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010112:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010116:	4632      	mov	r2, r6
 8010118:	4658      	mov	r0, fp
 801011a:	4798      	blx	r3
 801011c:	1e6f      	subs	r7, r5, #1
 801011e:	463d      	mov	r5, r7
 8010120:	454d      	cmp	r5, r9
 8010122:	d029      	beq.n	8010178 <_scanf_i+0x1d4>
 8010124:	6822      	ldr	r2, [r4, #0]
 8010126:	f012 0210 	ands.w	r2, r2, #16
 801012a:	d113      	bne.n	8010154 <_scanf_i+0x1b0>
 801012c:	702a      	strb	r2, [r5, #0]
 801012e:	6863      	ldr	r3, [r4, #4]
 8010130:	9e00      	ldr	r6, [sp, #0]
 8010132:	4649      	mov	r1, r9
 8010134:	4658      	mov	r0, fp
 8010136:	47b0      	blx	r6
 8010138:	f8da 3000 	ldr.w	r3, [sl]
 801013c:	6821      	ldr	r1, [r4, #0]
 801013e:	1d1a      	adds	r2, r3, #4
 8010140:	f8ca 2000 	str.w	r2, [sl]
 8010144:	f011 0f20 	tst.w	r1, #32
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	d010      	beq.n	801016e <_scanf_i+0x1ca>
 801014c:	6018      	str	r0, [r3, #0]
 801014e:	68e3      	ldr	r3, [r4, #12]
 8010150:	3301      	adds	r3, #1
 8010152:	60e3      	str	r3, [r4, #12]
 8010154:	eba5 0509 	sub.w	r5, r5, r9
 8010158:	44a8      	add	r8, r5
 801015a:	6925      	ldr	r5, [r4, #16]
 801015c:	4445      	add	r5, r8
 801015e:	6125      	str	r5, [r4, #16]
 8010160:	2000      	movs	r0, #0
 8010162:	b007      	add	sp, #28
 8010164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010168:	f04f 0800 	mov.w	r8, #0
 801016c:	e7ca      	b.n	8010104 <_scanf_i+0x160>
 801016e:	07ca      	lsls	r2, r1, #31
 8010170:	bf4c      	ite	mi
 8010172:	8018      	strhmi	r0, [r3, #0]
 8010174:	6018      	strpl	r0, [r3, #0]
 8010176:	e7ea      	b.n	801014e <_scanf_i+0x1aa>
 8010178:	2001      	movs	r0, #1
 801017a:	e7f2      	b.n	8010162 <_scanf_i+0x1be>
 801017c:	08010698 	.word	0x08010698
 8010180:	0801030d 	.word	0x0801030d
 8010184:	0800f9c1 	.word	0x0800f9c1
 8010188:	08010e37 	.word	0x08010e37

0801018c <_read_r>:
 801018c:	b538      	push	{r3, r4, r5, lr}
 801018e:	4c07      	ldr	r4, [pc, #28]	; (80101ac <_read_r+0x20>)
 8010190:	4605      	mov	r5, r0
 8010192:	4608      	mov	r0, r1
 8010194:	4611      	mov	r1, r2
 8010196:	2200      	movs	r2, #0
 8010198:	6022      	str	r2, [r4, #0]
 801019a:	461a      	mov	r2, r3
 801019c:	f7f2 fc84 	bl	8002aa8 <_read>
 80101a0:	1c43      	adds	r3, r0, #1
 80101a2:	d102      	bne.n	80101aa <_read_r+0x1e>
 80101a4:	6823      	ldr	r3, [r4, #0]
 80101a6:	b103      	cbz	r3, 80101aa <_read_r+0x1e>
 80101a8:	602b      	str	r3, [r5, #0]
 80101aa:	bd38      	pop	{r3, r4, r5, pc}
 80101ac:	20006b20 	.word	0x20006b20

080101b0 <__sccl>:
 80101b0:	b570      	push	{r4, r5, r6, lr}
 80101b2:	780b      	ldrb	r3, [r1, #0]
 80101b4:	2b5e      	cmp	r3, #94	; 0x5e
 80101b6:	bf13      	iteet	ne
 80101b8:	1c4a      	addne	r2, r1, #1
 80101ba:	1c8a      	addeq	r2, r1, #2
 80101bc:	784b      	ldrbeq	r3, [r1, #1]
 80101be:	2100      	movne	r1, #0
 80101c0:	bf08      	it	eq
 80101c2:	2101      	moveq	r1, #1
 80101c4:	1e44      	subs	r4, r0, #1
 80101c6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80101ca:	f804 1f01 	strb.w	r1, [r4, #1]!
 80101ce:	42ac      	cmp	r4, r5
 80101d0:	d1fb      	bne.n	80101ca <__sccl+0x1a>
 80101d2:	b913      	cbnz	r3, 80101da <__sccl+0x2a>
 80101d4:	3a01      	subs	r2, #1
 80101d6:	4610      	mov	r0, r2
 80101d8:	bd70      	pop	{r4, r5, r6, pc}
 80101da:	f081 0401 	eor.w	r4, r1, #1
 80101de:	54c4      	strb	r4, [r0, r3]
 80101e0:	1c51      	adds	r1, r2, #1
 80101e2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80101e6:	2d2d      	cmp	r5, #45	; 0x2d
 80101e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80101ec:	460a      	mov	r2, r1
 80101ee:	d006      	beq.n	80101fe <__sccl+0x4e>
 80101f0:	2d5d      	cmp	r5, #93	; 0x5d
 80101f2:	d0f0      	beq.n	80101d6 <__sccl+0x26>
 80101f4:	b90d      	cbnz	r5, 80101fa <__sccl+0x4a>
 80101f6:	4632      	mov	r2, r6
 80101f8:	e7ed      	b.n	80101d6 <__sccl+0x26>
 80101fa:	462b      	mov	r3, r5
 80101fc:	e7ef      	b.n	80101de <__sccl+0x2e>
 80101fe:	780e      	ldrb	r6, [r1, #0]
 8010200:	2e5d      	cmp	r6, #93	; 0x5d
 8010202:	d0fa      	beq.n	80101fa <__sccl+0x4a>
 8010204:	42b3      	cmp	r3, r6
 8010206:	dcf8      	bgt.n	80101fa <__sccl+0x4a>
 8010208:	3301      	adds	r3, #1
 801020a:	429e      	cmp	r6, r3
 801020c:	54c4      	strb	r4, [r0, r3]
 801020e:	dcfb      	bgt.n	8010208 <__sccl+0x58>
 8010210:	3102      	adds	r1, #2
 8010212:	e7e6      	b.n	80101e2 <__sccl+0x32>

08010214 <_strtol_l.isra.0>:
 8010214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010218:	4680      	mov	r8, r0
 801021a:	4689      	mov	r9, r1
 801021c:	4692      	mov	sl, r2
 801021e:	461e      	mov	r6, r3
 8010220:	460f      	mov	r7, r1
 8010222:	463d      	mov	r5, r7
 8010224:	9808      	ldr	r0, [sp, #32]
 8010226:	f815 4b01 	ldrb.w	r4, [r5], #1
 801022a:	f7ff fc37 	bl	800fa9c <__locale_ctype_ptr_l>
 801022e:	4420      	add	r0, r4
 8010230:	7843      	ldrb	r3, [r0, #1]
 8010232:	f013 0308 	ands.w	r3, r3, #8
 8010236:	d132      	bne.n	801029e <_strtol_l.isra.0+0x8a>
 8010238:	2c2d      	cmp	r4, #45	; 0x2d
 801023a:	d132      	bne.n	80102a2 <_strtol_l.isra.0+0x8e>
 801023c:	787c      	ldrb	r4, [r7, #1]
 801023e:	1cbd      	adds	r5, r7, #2
 8010240:	2201      	movs	r2, #1
 8010242:	2e00      	cmp	r6, #0
 8010244:	d05d      	beq.n	8010302 <_strtol_l.isra.0+0xee>
 8010246:	2e10      	cmp	r6, #16
 8010248:	d109      	bne.n	801025e <_strtol_l.isra.0+0x4a>
 801024a:	2c30      	cmp	r4, #48	; 0x30
 801024c:	d107      	bne.n	801025e <_strtol_l.isra.0+0x4a>
 801024e:	782b      	ldrb	r3, [r5, #0]
 8010250:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010254:	2b58      	cmp	r3, #88	; 0x58
 8010256:	d14f      	bne.n	80102f8 <_strtol_l.isra.0+0xe4>
 8010258:	786c      	ldrb	r4, [r5, #1]
 801025a:	2610      	movs	r6, #16
 801025c:	3502      	adds	r5, #2
 801025e:	2a00      	cmp	r2, #0
 8010260:	bf14      	ite	ne
 8010262:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8010266:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801026a:	2700      	movs	r7, #0
 801026c:	fbb1 fcf6 	udiv	ip, r1, r6
 8010270:	4638      	mov	r0, r7
 8010272:	fb06 1e1c 	mls	lr, r6, ip, r1
 8010276:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801027a:	2b09      	cmp	r3, #9
 801027c:	d817      	bhi.n	80102ae <_strtol_l.isra.0+0x9a>
 801027e:	461c      	mov	r4, r3
 8010280:	42a6      	cmp	r6, r4
 8010282:	dd23      	ble.n	80102cc <_strtol_l.isra.0+0xb8>
 8010284:	1c7b      	adds	r3, r7, #1
 8010286:	d007      	beq.n	8010298 <_strtol_l.isra.0+0x84>
 8010288:	4584      	cmp	ip, r0
 801028a:	d31c      	bcc.n	80102c6 <_strtol_l.isra.0+0xb2>
 801028c:	d101      	bne.n	8010292 <_strtol_l.isra.0+0x7e>
 801028e:	45a6      	cmp	lr, r4
 8010290:	db19      	blt.n	80102c6 <_strtol_l.isra.0+0xb2>
 8010292:	fb00 4006 	mla	r0, r0, r6, r4
 8010296:	2701      	movs	r7, #1
 8010298:	f815 4b01 	ldrb.w	r4, [r5], #1
 801029c:	e7eb      	b.n	8010276 <_strtol_l.isra.0+0x62>
 801029e:	462f      	mov	r7, r5
 80102a0:	e7bf      	b.n	8010222 <_strtol_l.isra.0+0xe>
 80102a2:	2c2b      	cmp	r4, #43	; 0x2b
 80102a4:	bf04      	itt	eq
 80102a6:	1cbd      	addeq	r5, r7, #2
 80102a8:	787c      	ldrbeq	r4, [r7, #1]
 80102aa:	461a      	mov	r2, r3
 80102ac:	e7c9      	b.n	8010242 <_strtol_l.isra.0+0x2e>
 80102ae:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80102b2:	2b19      	cmp	r3, #25
 80102b4:	d801      	bhi.n	80102ba <_strtol_l.isra.0+0xa6>
 80102b6:	3c37      	subs	r4, #55	; 0x37
 80102b8:	e7e2      	b.n	8010280 <_strtol_l.isra.0+0x6c>
 80102ba:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80102be:	2b19      	cmp	r3, #25
 80102c0:	d804      	bhi.n	80102cc <_strtol_l.isra.0+0xb8>
 80102c2:	3c57      	subs	r4, #87	; 0x57
 80102c4:	e7dc      	b.n	8010280 <_strtol_l.isra.0+0x6c>
 80102c6:	f04f 37ff 	mov.w	r7, #4294967295
 80102ca:	e7e5      	b.n	8010298 <_strtol_l.isra.0+0x84>
 80102cc:	1c7b      	adds	r3, r7, #1
 80102ce:	d108      	bne.n	80102e2 <_strtol_l.isra.0+0xce>
 80102d0:	2322      	movs	r3, #34	; 0x22
 80102d2:	f8c8 3000 	str.w	r3, [r8]
 80102d6:	4608      	mov	r0, r1
 80102d8:	f1ba 0f00 	cmp.w	sl, #0
 80102dc:	d107      	bne.n	80102ee <_strtol_l.isra.0+0xda>
 80102de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102e2:	b102      	cbz	r2, 80102e6 <_strtol_l.isra.0+0xd2>
 80102e4:	4240      	negs	r0, r0
 80102e6:	f1ba 0f00 	cmp.w	sl, #0
 80102ea:	d0f8      	beq.n	80102de <_strtol_l.isra.0+0xca>
 80102ec:	b10f      	cbz	r7, 80102f2 <_strtol_l.isra.0+0xde>
 80102ee:	f105 39ff 	add.w	r9, r5, #4294967295
 80102f2:	f8ca 9000 	str.w	r9, [sl]
 80102f6:	e7f2      	b.n	80102de <_strtol_l.isra.0+0xca>
 80102f8:	2430      	movs	r4, #48	; 0x30
 80102fa:	2e00      	cmp	r6, #0
 80102fc:	d1af      	bne.n	801025e <_strtol_l.isra.0+0x4a>
 80102fe:	2608      	movs	r6, #8
 8010300:	e7ad      	b.n	801025e <_strtol_l.isra.0+0x4a>
 8010302:	2c30      	cmp	r4, #48	; 0x30
 8010304:	d0a3      	beq.n	801024e <_strtol_l.isra.0+0x3a>
 8010306:	260a      	movs	r6, #10
 8010308:	e7a9      	b.n	801025e <_strtol_l.isra.0+0x4a>
	...

0801030c <_strtol_r>:
 801030c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801030e:	4c06      	ldr	r4, [pc, #24]	; (8010328 <_strtol_r+0x1c>)
 8010310:	4d06      	ldr	r5, [pc, #24]	; (801032c <_strtol_r+0x20>)
 8010312:	6824      	ldr	r4, [r4, #0]
 8010314:	6a24      	ldr	r4, [r4, #32]
 8010316:	2c00      	cmp	r4, #0
 8010318:	bf08      	it	eq
 801031a:	462c      	moveq	r4, r5
 801031c:	9400      	str	r4, [sp, #0]
 801031e:	f7ff ff79 	bl	8010214 <_strtol_l.isra.0>
 8010322:	b003      	add	sp, #12
 8010324:	bd30      	pop	{r4, r5, pc}
 8010326:	bf00      	nop
 8010328:	20000010 	.word	0x20000010
 801032c:	200000d8 	.word	0x200000d8

08010330 <__submore>:
 8010330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010334:	460c      	mov	r4, r1
 8010336:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801033c:	4299      	cmp	r1, r3
 801033e:	d11d      	bne.n	801037c <__submore+0x4c>
 8010340:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010344:	f7fc fbc4 	bl	800cad0 <_malloc_r>
 8010348:	b918      	cbnz	r0, 8010352 <__submore+0x22>
 801034a:	f04f 30ff 	mov.w	r0, #4294967295
 801034e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010356:	63a3      	str	r3, [r4, #56]	; 0x38
 8010358:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801035c:	6360      	str	r0, [r4, #52]	; 0x34
 801035e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010362:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010366:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801036a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801036e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010372:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010376:	6020      	str	r0, [r4, #0]
 8010378:	2000      	movs	r0, #0
 801037a:	e7e8      	b.n	801034e <__submore+0x1e>
 801037c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801037e:	0077      	lsls	r7, r6, #1
 8010380:	463a      	mov	r2, r7
 8010382:	f7ff fbda 	bl	800fb3a <_realloc_r>
 8010386:	4605      	mov	r5, r0
 8010388:	2800      	cmp	r0, #0
 801038a:	d0de      	beq.n	801034a <__submore+0x1a>
 801038c:	eb00 0806 	add.w	r8, r0, r6
 8010390:	4601      	mov	r1, r0
 8010392:	4632      	mov	r2, r6
 8010394:	4640      	mov	r0, r8
 8010396:	f7fe fc8f 	bl	800ecb8 <memcpy>
 801039a:	f8c4 8000 	str.w	r8, [r4]
 801039e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80103a2:	e7e9      	b.n	8010378 <__submore+0x48>

080103a4 <__ascii_wctomb>:
 80103a4:	b149      	cbz	r1, 80103ba <__ascii_wctomb+0x16>
 80103a6:	2aff      	cmp	r2, #255	; 0xff
 80103a8:	bf85      	ittet	hi
 80103aa:	238a      	movhi	r3, #138	; 0x8a
 80103ac:	6003      	strhi	r3, [r0, #0]
 80103ae:	700a      	strbls	r2, [r1, #0]
 80103b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80103b4:	bf98      	it	ls
 80103b6:	2001      	movls	r0, #1
 80103b8:	4770      	bx	lr
 80103ba:	4608      	mov	r0, r1
 80103bc:	4770      	bx	lr

080103be <_malloc_usable_size_r>:
 80103be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103c2:	1f18      	subs	r0, r3, #4
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	bfbc      	itt	lt
 80103c8:	580b      	ldrlt	r3, [r1, r0]
 80103ca:	18c0      	addlt	r0, r0, r3
 80103cc:	4770      	bx	lr
	...

080103d0 <_init>:
 80103d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103d2:	bf00      	nop
 80103d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103d6:	bc08      	pop	{r3}
 80103d8:	469e      	mov	lr, r3
 80103da:	4770      	bx	lr

080103dc <_fini>:
 80103dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103de:	bf00      	nop
 80103e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103e2:	bc08      	pop	{r3}
 80103e4:	469e      	mov	lr, r3
 80103e6:	4770      	bx	lr
