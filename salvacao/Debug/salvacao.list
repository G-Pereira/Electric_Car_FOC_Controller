
salvacao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e154  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  0800e2e8  0800e2e8  0001e2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb40  0800eb40  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb40  0800eb40  0001eb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb48  0800eb48  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb48  0800eb48  0001eb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb4c  0800eb4c  0001eb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800eb50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006bac  20000254  0800eda4  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  20006e00  0800eda4  00026e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d039  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e4a  00000000  00000000  0003d2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001650  00000000  00000000  00041108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001468  00000000  00000000  00042758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002515c  00000000  00000000  00043bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014c2e  00000000  00000000  00068d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdffb  00000000  00000000  0007d94a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b945  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc0  00000000  00000000  0014b9c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000254 	.word	0x20000254
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e2cc 	.word	0x0800e2cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000258 	.word	0x20000258
 80001cc:	0800e2cc 	.word	0x0800e2cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <TMC_get_data>:

// use TMC4671 API

//tamanho dos datagramas do ic 5 bytes para escrever MSB é 1

void TMC_get_data(uint8_t *data, uint32_t w_data){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	data[0]=(uint8_t)(w_data>>3);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	08db      	lsrs	r3, r3, #3
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	701a      	strb	r2, [r3, #0]
	data[1]=(uint8_t)(w_data>>2);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	089a      	lsrs	r2, r3, #2
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3301      	adds	r3, #1
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	701a      	strb	r2, [r3, #0]
	data[2]=(uint8_t)(w_data>>1);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	085a      	lsrs	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	701a      	strb	r2, [r3, #0]
	data[3]=(uint8_t)(w_data);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3303      	adds	r3, #3
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	701a      	strb	r2, [r3, #0]

}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <foc_ic_send_torque>:
	TMC_write(hspi, TMC4671_UQ_UD_EXT, 0x00000000);

}


void foc_ic_send_torque(SPI_HandleTypeDef *hspi, int torque, float pos){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	ed87 0a01 	vstr	s0, [r7, #4]


	uint8_t data[4];

	if (pos!=-1){
 8000f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fa2:	eef4 7a47 	vcmp.f32	s15, s14
 8000fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000faa:	d008      	beq.n	8000fbe <foc_ic_send_torque+0x32>
		torque_convertion(torque, &data, pos);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	68b8      	ldr	r0, [r7, #8]
 8000fb8:	f000 f822 	bl	8001000 <torque_convertion>
 8000fbc:	e006      	b.n	8000fcc <foc_ic_send_torque+0x40>
	} else {
		memset(data, 0, 4);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00a fc2d 	bl	800b826 <memset>
	}

	HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd2:	480a      	ldr	r0, [pc, #40]	; (8000ffc <foc_ic_send_torque+0x70>)
 8000fd4:	f003 f92c 	bl	8004230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, data, 2, 200);
 8000fd8:	f107 0114 	add.w	r1, r7, #20
 8000fdc:	23c8      	movs	r3, #200	; 0xc8
 8000fde:	2202      	movs	r2, #2
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f005 f911 	bl	8006208 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <foc_ic_send_torque+0x70>)
 8000fee:	f003 f91f 	bl	8004230 <HAL_GPIO_WritePin>


}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020400 	.word	0x40020400

08001000 <torque_convertion>:

void torque_convertion(int torque, uint8_t* torque_ref, float pos){
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	ed87 0a01 	vstr	s0, [r7, #4]

	//uint8_t torque_ref[4];

	int max_ref = 120;
 800100e:	2378      	movs	r3, #120	; 0x78
 8001010:	617b      	str	r3, [r7, #20]

	uint32_t aux = (pos/100)*max_ref;
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001048 <torque_convertion+0x48>
 800101a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001030:	ee17 3a90 	vmov	r3, s15
 8001034:	613b      	str	r3, [r7, #16]
	TMC_get_data(torque_ref, aux);
 8001036:	6939      	ldr	r1, [r7, #16]
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	f7ff ff85 	bl	8000f48 <TMC_get_data>


}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	42c80000 	.word	0x42c80000

0800104c <IMU_config>:
//includes
#include "main.h"
#include "IMU_read.h"


void IMU_config(SPI_HandleTypeDef *hspi){
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

	uint8_t write_words[10];

	//accelerometer config
	write_words[0]=BMX055_RESET_REG;
 8001054:	2314      	movs	r3, #20
 8001056:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET; //accelerometer soft reset
 8001058:	23b6      	movs	r3, #182	; 0xb6
 800105a:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_ACC_PMU_RANGE_REG;
 800105c:	230f      	movs	r3, #15
 800105e:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_ACC_RANGE_2;
 8001060:	2303      	movs	r3, #3
 8001062:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_ACC_PMU_BW_REG;
 8001064:	2310      	movs	r3, #16
 8001066:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_ACC_PMU_BW_7_81;
 8001068:	2308      	movs	r3, #8
 800106a:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_ACC_PMU_LPW_REG;
 800106c:	2311      	movs	r3, #17
 800106e:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_ACC_PMU_LPW_MODE_NOMAL|BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 8001070:	2300      	movs	r3, #0
 8001072:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4833      	ldr	r0, [pc, #204]	; (8001148 <IMU_config+0xfc>)
 800107a:	f003 f8d9 	bl	8004230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 800107e:	f107 010c 	add.w	r1, r7, #12
 8001082:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001086:	2208      	movs	r2, #8
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f005 f8bd 	bl	8006208 <HAL_SPI_Transmit>
	HAL_Delay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f001 fe62 	bl	8002d58 <HAL_Delay>
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	482b      	ldr	r0, [pc, #172]	; (8001148 <IMU_config+0xfc>)
 800109a:	f003 f8c9 	bl	8004230 <HAL_GPIO_WritePin>

	// gyroscope config
	write_words[0]=BMX055_RESET_REG;
 800109e:	2314      	movs	r3, #20
 80010a0:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 80010a2:	23b6      	movs	r3, #182	; 0xb6
 80010a4:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_GYRO_RANGE_REG;
 80010a6:	230f      	movs	r3, #15
 80010a8:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_GYRO_RANGE_262_4; // Select Gyro Range(262.4 LSB/°/s)
 80010aa:	2304      	movs	r3, #4
 80010ac:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_GYRO_BW_REG;
 80010ae:	2310      	movs	r3, #16
 80010b0:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_GYRO_BW_64; // Select Gyro BW   (32Hz)
 80010b2:	2306      	movs	r3, #6
 80010b4:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_GYRO_LPM1_REG;
 80010b6:	2311      	movs	r3, #17
 80010b8:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_GYRO_LPM1_MODE_NOMAL|BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 80010ba:	2300      	movs	r3, #0
 80010bc:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2104      	movs	r1, #4
 80010c2:	4822      	ldr	r0, [pc, #136]	; (800114c <IMU_config+0x100>)
 80010c4:	f003 f8b4 	bl	8004230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 80010c8:	f107 010c 	add.w	r1, r7, #12
 80010cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010d0:	2208      	movs	r2, #8
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f005 f898 	bl	8006208 <HAL_SPI_Transmit>
	HAL_Delay(100);
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f001 fe3d 	bl	8002d58 <HAL_Delay>
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	2104      	movs	r1, #4
 80010e2:	481a      	ldr	r0, [pc, #104]	; (800114c <IMU_config+0x100>)
 80010e4:	f003 f8a4 	bl	8004230 <HAL_GPIO_WritePin>

	// magnetometer config
	write_words[0]=BMX055_RESET_REG;
 80010e8:	2314      	movs	r3, #20
 80010ea:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 80010ec:	23b6      	movs	r3, #182	; 0xb6
 80010ee:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_MAG_POW_CTL_REG;
 80010f0:	234b      	movs	r3, #75	; 0x4b
 80010f2:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_MAG_POW_CTL_SLEEP_MODE; // Select Sleep mode
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_MAG_ADV_OP_OUTPUT_REG;
 80010f8:	234c      	movs	r3, #76	; 0x4c
 80010fa:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_MAG_DATA_RATE_10; // (NomalMode, ODR 10Hz)
 80010fc:	2300      	movs	r3, #0
 80010fe:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_MAG_REP_XY_REG;
 8001100:	2351      	movs	r3, #81	; 0x51
 8001102:	74bb      	strb	r3, [r7, #18]
	write_words[7]=0x04; // Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
 8001104:	2304      	movs	r3, #4
 8001106:	74fb      	strb	r3, [r7, #19]
	write_words[8]=BMX055_MAG_REP_Z_REG;
 8001108:	2352      	movs	r3, #82	; 0x52
 800110a:	753b      	strb	r3, [r7, #20]
	write_words[9]= 0x0F; // Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
 800110c:	230f      	movs	r3, #15
 800110e:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <IMU_config+0x100>)
 8001118:	f003 f88a 	bl	8004230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 10, 2000);
 800111c:	f107 010c 	add.w	r1, r7, #12
 8001120:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001124:	220a      	movs	r2, #10
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f005 f86e 	bl	8006208 <HAL_SPI_Transmit>
	HAL_Delay(100);
 800112c:	2064      	movs	r0, #100	; 0x64
 800112e:	f001 fe13 	bl	8002d58 <HAL_Delay>
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <IMU_config+0x100>)
 800113a:	f003 f879 	bl	8004230 <HAL_GPIO_WritePin>

}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400

08001150 <IMU_acc_read>:

void IMU_acc_read(SPI_HandleTypeDef *hspi, int *accel_data){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_ACC_DATA_START_REG;
 800115a:	2382      	movs	r3, #130	; 0x82
 800115c:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET); //read acceloremeter data
 800115e:	2200      	movs	r2, #0
 8001160:	2110      	movs	r1, #16
 8001162:	4835      	ldr	r0, [pc, #212]	; (8001238 <IMU_acc_read+0xe8>)
 8001164:	f003 f864 	bl	8004230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001168:	f107 0113 	add.w	r1, r7, #19
 800116c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001170:	2201      	movs	r2, #1
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f005 f848 	bl	8006208 <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	e00c      	b.n	8001198 <IMU_acc_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f107 020c 	add.w	r2, r7, #12
 8001184:	18d1      	adds	r1, r2, r3
 8001186:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800118a:	2201      	movs	r2, #1
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f005 f96f 	bl	8006470 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2b05      	cmp	r3, #5
 800119c:	ddef      	ble.n	800117e <IMU_acc_read+0x2e>
	}
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	2110      	movs	r1, #16
 80011a2:	4825      	ldr	r0, [pc, #148]	; (8001238 <IMU_acc_read+0xe8>)
 80011a4:	f003 f844 	bl	8004230 <HAL_GPIO_WritePin>
	accel_data[0]=((store_data[1]<<4)+(store_data[0]>>4));
 80011a8:	7b7b      	ldrb	r3, [r7, #13]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	7b3a      	ldrb	r2, [r7, #12]
 80011ae:	0912      	lsrs	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	441a      	add	r2, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	601a      	str	r2, [r3, #0]
	accel_data[1]=((store_data[3]<<4)+(store_data[2]>>4));
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	011a      	lsls	r2, r3, #4
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4619      	mov	r1, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	3304      	adds	r3, #4
 80011c8:	440a      	add	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
	accel_data[2]=((store_data[5]<<4)+(store_data[4]>>4));
 80011cc:	7c7b      	ldrb	r3, [r7, #17]
 80011ce:	011a      	lsls	r2, r3, #4
 80011d0:	7c3b      	ldrb	r3, [r7, #16]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4619      	mov	r1, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3308      	adds	r3, #8
 80011dc:	440a      	add	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
	//HAL_Delay(100);

	if (accel_data[0] > 2047)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011e8:	db05      	blt.n	80011f6 <IMU_acc_read+0xa6>
	{
		accel_data[0] -= 4096;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (accel_data[1]> 2047)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001200:	db07      	blt.n	8001212 <IMU_acc_read+0xc2>
	{
		accel_data[1] -= 4096;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3304      	adds	r3, #4
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	3304      	adds	r3, #4
 800120c:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8001210:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (accel_data[2] > 2047)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	3308      	adds	r3, #8
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800121c:	db07      	blt.n	800122e <IMU_acc_read+0xde>
	{
		accel_data[2] -= 4096;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3308      	adds	r3, #8
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	3308      	adds	r3, #8
 8001228:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 800122c:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020000 	.word	0x40020000

0800123c <IMU_gyro_read>:

void IMU_gyro_read(SPI_HandleTypeDef *hspi, int *gyro_data){
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_GYRO_DATA_START_REG;
 8001246:	2382      	movs	r3, #130	; 0x82
 8001248:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET); //read gyroscope data
 800124a:	2200      	movs	r2, #0
 800124c:	2104      	movs	r1, #4
 800124e:	4832      	ldr	r0, [pc, #200]	; (8001318 <IMU_gyro_read+0xdc>)
 8001250:	f002 ffee 	bl	8004230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001254:	f107 0113 	add.w	r1, r7, #19
 8001258:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800125c:	2201      	movs	r2, #1
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f004 ffd2 	bl	8006208 <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e00c      	b.n	8001284 <IMU_gyro_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f107 020c 	add.w	r2, r7, #12
 8001270:	18d1      	adds	r1, r2, r3
 8001272:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001276:	2201      	movs	r2, #1
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f005 f8f9 	bl	8006470 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b05      	cmp	r3, #5
 8001288:	ddef      	ble.n	800126a <IMU_gyro_read+0x2e>
	}
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2104      	movs	r1, #4
 800128e:	4822      	ldr	r0, [pc, #136]	; (8001318 <IMU_gyro_read+0xdc>)
 8001290:	f002 ffce 	bl	8004230 <HAL_GPIO_WritePin>
	gyro_data[0]=((store_data[1]<<8)+(store_data[0]));
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	7b3a      	ldrb	r2, [r7, #12]
 800129a:	441a      	add	r2, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	601a      	str	r2, [r3, #0]
	gyro_data[1]=((store_data[3]<<8)+(store_data[2]));
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	021a      	lsls	r2, r3, #8
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	4619      	mov	r1, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	3304      	adds	r3, #4
 80012ac:	440a      	add	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
	gyro_data[2]=((store_data[5]<<8)+(store_data[4]));
 80012b0:	7c7b      	ldrb	r3, [r7, #17]
 80012b2:	021a      	lsls	r2, r3, #8
 80012b4:	7c3b      	ldrb	r3, [r7, #16]
 80012b6:	4619      	mov	r1, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3308      	adds	r3, #8
 80012bc:	440a      	add	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
	//HAL_Delay(100);

	if (gyro_data[0] > 32767)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012c8:	db05      	blt.n	80012d6 <IMU_gyro_read+0x9a>
	{
		gyro_data[0] -= 65536;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (gyro_data[1]> 32767)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	3304      	adds	r3, #4
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012e0:	db07      	blt.n	80012f2 <IMU_gyro_read+0xb6>
	{
		gyro_data[1] -= 65536;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	3304      	adds	r3, #4
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	3304      	adds	r3, #4
 80012ec:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80012f0:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (gyro_data[2] > 32767)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	3308      	adds	r3, #8
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012fc:	db07      	blt.n	800130e <IMU_gyro_read+0xd2>
	{
		gyro_data[2] -= 65536;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3308      	adds	r3, #8
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	3308      	adds	r3, #8
 8001308:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800130c:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020400 	.word	0x40020400
 800131c:	00000000 	.word	0x00000000

08001320 <adcInt2Volt>:
#include "adcUnitConversion.h"
#include "stdio.h"
#include "math.h"
#include "main.h"

float adcInt2Volt (unsigned long int ADCReading){
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

	//ADCVREF reference voltage = ?
	return ((float)ADCReading/(1 << 12 ))*ADCVREF;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001332:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001370 <adcInt2Volt+0x50>
 8001336:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800133a:	ee16 0a90 	vmov	r0, s13
 800133e:	f7ff f903 	bl	8000548 <__aeabi_f2d>
 8001342:	a309      	add	r3, pc, #36	; (adr r3, 8001368 <adcInt2Volt+0x48>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f956 	bl	80005f8 <__aeabi_dmul>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	4618      	mov	r0, r3
 8001352:	4621      	mov	r1, r4
 8001354:	f7ff fc28 	bl	8000ba8 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	ee07 3a90 	vmov	s15, r3
}
 800135e:	eeb0 0a67 	vmov.f32	s0, s15
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	66666666 	.word	0x66666666
 800136c:	400a6666 	.word	0x400a6666
 8001370:	45800000 	.word	0x45800000
 8001374:	00000000 	.word	0x00000000

08001378 <motorCurrent>:


float motorCurrent (int adcReading){
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	//0.0066 sensor's scale factor
	return (adcInt2Volt(adcReading) - BIASSENSOR)/0.0066;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ffcc 	bl	8001320 <adcInt2Volt>
 8001388:	ee10 3a10 	vmov	r3, s0
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8db 	bl	8000548 <__aeabi_f2d>
 8001392:	a30f      	add	r3, pc, #60	; (adr r3, 80013d0 <motorCurrent+0x58>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7fe ff76 	bl	8000288 <__aeabi_dsub>
 800139c:	4603      	mov	r3, r0
 800139e:	460c      	mov	r4, r1
 80013a0:	4618      	mov	r0, r3
 80013a2:	4621      	mov	r1, r4
 80013a4:	a30c      	add	r3, pc, #48	; (adr r3, 80013d8 <motorCurrent+0x60>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff fa4f 	bl	800084c <__aeabi_ddiv>
 80013ae:	4603      	mov	r3, r0
 80013b0:	460c      	mov	r4, r1
 80013b2:	4618      	mov	r0, r3
 80013b4:	4621      	mov	r1, r4
 80013b6:	f7ff fbf7 	bl	8000ba8 <__aeabi_d2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	ee07 3a90 	vmov	s15, r3
}
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd90      	pop	{r4, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	f3af 8000 	nop.w
 80013d0:	66666666 	.word	0x66666666
 80013d4:	3ffa6666 	.word	0x3ffa6666
 80013d8:	02752546 	.word	0x02752546
 80013dc:	3f7b089a 	.word	0x3f7b089a

080013e0 <igbtTemp>:

float igbtTemp (int adcReading){
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	//int Rmin = 160, Rmax = 16100;
	//float Vmin = 0.05, Vmax = 3.25;
	//int Tmin = 0, Tmax = 150;

	float m, b, T;
	m = b = T = 0;
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	60fb      	str	r3, [r7, #12]

	m = 53.085;//(Tmin-Tmax)/(Vmax-Vmin);
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <igbtTemp+0x98>)
 80013f8:	60fb      	str	r3, [r7, #12]
	b = 22.025;//Tmin - m*Vmax;
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <igbtTemp+0x9c>)
 80013fc:	613b      	str	r3, [r7, #16]

	T = m*(adcInt2Volt(adcReading)/3.3)+b;
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff f8a2 	bl	8000548 <__aeabi_f2d>
 8001404:	4604      	mov	r4, r0
 8001406:	460d      	mov	r5, r1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff88 	bl	8001320 <adcInt2Volt>
 8001410:	ee10 3a10 	vmov	r3, s0
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f897 	bl	8000548 <__aeabi_f2d>
 800141a:	a315      	add	r3, pc, #84	; (adr r3, 8001470 <igbtTemp+0x90>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff fa14 	bl	800084c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7ff f8e4 	bl	80005f8 <__aeabi_dmul>
 8001430:	4603      	mov	r3, r0
 8001432:	460c      	mov	r4, r1
 8001434:	4625      	mov	r5, r4
 8001436:	461c      	mov	r4, r3
 8001438:	6938      	ldr	r0, [r7, #16]
 800143a:	f7ff f885 	bl	8000548 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7fe ff21 	bl	800028c <__adddf3>
 800144a:	4603      	mov	r3, r0
 800144c:	460c      	mov	r4, r1
 800144e:	4618      	mov	r0, r3
 8001450:	4621      	mov	r1, r4
 8001452:	f7ff fba9 	bl	8000ba8 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	617b      	str	r3, [r7, #20]

	return T;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	ee07 3a90 	vmov	s15, r3
}
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bdb0      	pop	{r4, r5, r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	66666666 	.word	0x66666666
 8001474:	400a6666 	.word	0x400a6666
 8001478:	4254570a 	.word	0x4254570a
 800147c:	41b03333 	.word	0x41b03333

08001480 <motorTemp>:

float motorTemp (unsigned long int adcReading){
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	//int Rmin = 1600, Rmax = 4000;   //resistance
	//float Vmin = 0.05, Vmax = 3.25; //voltage
	//int Tmin=0, Tmax=150;			//temperature

	float m, b, Rt, T;
	m = b = Rt = T = 0;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	60bb      	str	r3, [r7, #8]

	/*m = (Tmin-Tmax)/(Vmin-Vmax);
	b = Tmin-Vmin*m; */
	m = -119.81;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <motorTemp+0x50>)
 800149c:	60bb      	str	r3, [r7, #8]
	b = 365.61;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <motorTemp+0x54>)
 80014a0:	60fb      	str	r3, [r7, #12]

	T = m*(adcInt2Volt(adcReading))+b;
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff3c 	bl	8001320 <adcInt2Volt>
 80014a8:	eeb0 7a40 	vmov.f32	s14, s0
 80014ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80014b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	edc7 7a05 	vstr	s15, [r7, #20]

	return T;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	ee07 3a90 	vmov	s15, r3

}
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	c2ef9eb8 	.word	0xc2ef9eb8
 80014d4:	43b6ce14 	.word	0x43b6ce14

080014d8 <voltageAC>:

float voltageAC (int adcReading){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

	/*
	 * R1 = R28 = 75k
	 * R2 = R30 = 10k
	 */
	int R1 = 1800000;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <voltageAC+0x50>)
 80014e2:	617b      	str	r3, [r7, #20]
	int R2 = 10000;
 80014e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80014e8:	613b      	str	r3, [r7, #16]

	float Vout = adcInt2Volt(adcReading);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff17 	bl	8001320 <adcInt2Volt>
 80014f2:	ed87 0a03 	vstr	s0, [r7, #12]

	float Vin = ((R1+R2)/R2)*Vout;
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	441a      	add	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150a:	ed97 7a03 	vldr	s14, [r7, #12]
 800150e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001512:	edc7 7a02 	vstr	s15, [r7, #8]

	return Vin;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	ee07 3a90 	vmov	s15, r3

}
 800151c:	eeb0 0a67 	vmov.f32	s0, s15
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	001b7740 	.word	0x001b7740

0800152c <voltageDC>:

float voltageDC (int adcReading){
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	 * R1 = R9 = 300k
	 * R2 = R12 = 2k
	 * R3 = R10 = 39  <- negligenciar?
	 */

	int R1 = 300000;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <voltageDC+0x50>)
 8001536:	617b      	str	r3, [r7, #20]
	int R2 = 2000;
 8001538:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800153c:	613b      	str	r3, [r7, #16]
	//int R3 = 39;

	float Vout = adcInt2Volt(adcReading);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff feed 	bl	8001320 <adcInt2Volt>
 8001546:	ed87 0a03 	vstr	s0, [r7, #12]

	float Vin = ((R1+R2)/R2)*Vout;
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	441a      	add	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	fb92 f3f3 	sdiv	r3, r2, r3
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001566:	edc7 7a02 	vstr	s15, [r7, #8]

	return Vin;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	ee07 3a90 	vmov	s15, r3

}
 8001570:	eeb0 0a67 	vmov.f32	s0, s15
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	000493e0 	.word	0x000493e0

08001580 <pedalPos>:


float pedalPos (int adcReading){
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

	float pos = (adcInt2Volt(adcReading)/ADCVREF)*100;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fec8 	bl	8001320 <adcInt2Volt>
 8001590:	ee10 3a10 	vmov	r3, s0
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffd7 	bl	8000548 <__aeabi_f2d>
 800159a:	a310      	add	r3, pc, #64	; (adr r3, 80015dc <pedalPos+0x5c>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f954 	bl	800084c <__aeabi_ddiv>
 80015a4:	4603      	mov	r3, r0
 80015a6:	460c      	mov	r4, r1
 80015a8:	4618      	mov	r0, r3
 80015aa:	4621      	mov	r1, r4
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <pedalPos+0x58>)
 80015b2:	f7ff f821 	bl	80005f8 <__aeabi_dmul>
 80015b6:	4603      	mov	r3, r0
 80015b8:	460c      	mov	r4, r1
 80015ba:	4618      	mov	r0, r3
 80015bc:	4621      	mov	r1, r4
 80015be:	f7ff faf3 	bl	8000ba8 <__aeabi_d2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	60fb      	str	r3, [r7, #12]

	return pos;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	ee07 3a90 	vmov	s15, r3

}
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40590000 	.word	0x40590000
 80015dc:	66666666 	.word	0x66666666
 80015e0:	400a6666 	.word	0x400a6666

080015e4 <motorSpeed>:
 */

#include "main.h"
#include "encoderMode.h"

int motorSpeed (uint32_t *cnt1, uint32_t *tick, TIM_HandleTypeDef htim2){
 80015e4:	b082      	sub	sp, #8
 80015e6:	b590      	push	{r4, r7, lr}
 80015e8:	b087      	sub	sp, #28
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
 80015f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015f4:	e881 000c 	stmia.w	r1, {r2, r3}

	int diff = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
	uint32_t cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	613b      	str	r3, [r7, #16]
	//uint32_t time1 = (HAL_GetTick() - *tick)*0.001;
	//printf("time = %lu\n", time1);

	printf("cnt1 = %lu counter2 = %lu\n",*cnt1,cnt2);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4619      	mov	r1, r3
 800160a:	4831      	ldr	r0, [pc, #196]	; (80016d0 <motorSpeed+0xec>)
 800160c:	f00a fd70 	bl	800c0f0 <iprintf>

	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b10      	cmp	r3, #16
 800161a:	d113      	bne.n	8001644 <motorSpeed+0x60>
		if(cnt2 < *cnt1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	429a      	cmp	r2, r3
 8001624:	d205      	bcs.n	8001632 <motorSpeed+0x4e>
			diff = *cnt1 - cnt2;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e01b      	b.n	800166a <motorSpeed+0x86>
		else
			diff = (65535 - cnt2) + *cnt1;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800163e:	33ff      	adds	r3, #255	; 0xff
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	e012      	b.n	800166a <motorSpeed+0x86>
	} else {
		if(cnt2 > *cnt1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	429a      	cmp	r2, r3
 800164c:	d905      	bls.n	800165a <motorSpeed+0x76>
			diff = cnt2 - *cnt1;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e007      	b.n	800166a <motorSpeed+0x86>
		else
			diff = (65535 - *cnt1) + cnt2;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001666:	33ff      	adds	r3, #255	; 0xff
 8001668:	617b      	str	r3, [r7, #20]
	}



	printf("diff = %d\n", diff);
 800166a:	6979      	ldr	r1, [r7, #20]
 800166c:	4819      	ldr	r0, [pc, #100]	; (80016d4 <motorSpeed+0xf0>)
 800166e:	f00a fd3f 	bl	800c0f0 <iprintf>
	//float speed = (((float)(diff)/8)*60)*2;  //((diff/8)*60)/0.02;  // change when sysTimer configured
	float speed = (((float)(diff)/8)*60);//  /(time1);
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001680:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001684:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80016d8 <motorSpeed+0xf4>
 8001688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168c:	edc7 7a03 	vstr	s15, [r7, #12]


	*tick = HAL_GetTick();
 8001690:	f001 fb56 	bl	8002d40 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	601a      	str	r2, [r3, #0]
	*cnt1 = cnt2;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	601a      	str	r2, [r3, #0]
	printf("speed = %f\n",speed);
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f7fe ff51 	bl	8000548 <__aeabi_f2d>
 80016a6:	4603      	mov	r3, r0
 80016a8:	460c      	mov	r4, r1
 80016aa:	461a      	mov	r2, r3
 80016ac:	4623      	mov	r3, r4
 80016ae:	480b      	ldr	r0, [pc, #44]	; (80016dc <motorSpeed+0xf8>)
 80016b0:	f00a fd1e 	bl	800c0f0 <iprintf>
	return speed;
 80016b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016bc:	ee17 3a90 	vmov	r3, s15
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80016ca:	b002      	add	sp, #8
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	0800e2e8 	.word	0x0800e2e8
 80016d4:	0800e304 	.word	0x0800e304
 80016d8:	42700000 	.word	0x42700000
 80016dc:	0800e310 	.word	0x0800e310

080016e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d013      	beq.n	8001720 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001700:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00b      	beq.n	8001720 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001708:	e000      	b.n	800170c <ITM_SendChar+0x2c>
    {
      __NOP();
 800170a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800170c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f9      	beq.n	800170a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001716:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	//printf("dma timer = %lu\n", HAL_GetTick()-time2);
	if(hadc->Instance == ADC1){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_ADC_ConvCpltCallback+0x40>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d110      	bne.n	8001764 <HAL_ADC_ConvCpltCallback+0x34>
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e00a      	b.n	800175e <HAL_ADC_ConvCpltCallback+0x2e>
			{
				adc_dma[i]=buffer_dma[i];
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_ADC_ConvCpltCallback+0x44>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001750:	4909      	ldr	r1, [pc, #36]	; (8001778 <HAL_ADC_ConvCpltCallback+0x48>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3301      	adds	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b0b      	cmp	r3, #11
 8001762:	ddf1      	ble.n	8001748 <HAL_ADC_ConvCpltCallback+0x18>
			}
	}
	//time2 = HAL_GetTick();
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40012000 	.word	0x40012000
 8001774:	20001ad0 	.word	0x20001ad0
 8001778:	200017d0 	.word	0x200017d0

0800177c <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	b091      	sub	sp, #68	; 0x44
 8001780:	af0e      	add	r7, sp, #56	; 0x38
 8001782:	6078      	str	r0, [r7, #4]

	//UNUSED(htim); será preciso?

	//counter2 = __HAL_TIM_GET_COUNTER(&htim2);
	//printf("%lu\n", HAL_GetTick());
	if(htim->Instance== TIM6){
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d11d      	bne.n	80017ca <HAL_TIM_PeriodElapsedCallback+0x4e>
		printf("kay\n");
 800178e:	4812      	ldr	r0, [pc, #72]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001790:	f00a fd22 	bl	800c1d8 <puts>
		speed = motorSpeed(&counter1, &tick, htim2);
 8001794:	4e11      	ldr	r6, [pc, #68]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001796:	466d      	mov	r5, sp
 8001798:	f106 0408 	add.w	r4, r6, #8
 800179c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80017b0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80017b4:	490a      	ldr	r1, [pc, #40]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017b6:	480b      	ldr	r0, [pc, #44]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80017b8:	f7ff ff14 	bl	80015e4 <motorSpeed>
 80017bc:	ee07 0a90 	vmov	s15, r0
 80017c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80017c6:	edc3 7a00 	vstr	s15, [r3]

	/*float T = 0.25; //assumindo que periodo é 250ms
	speed = ((pulses/8)*60)/T;
	pulses = 0;*/

}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40001000 	.word	0x40001000
 80017d8:	0800e31c 	.word	0x0800e31c
 80017dc:	20002c7c 	.word	0x20002c7c
 80017e0:	20000280 	.word	0x20000280
 80017e4:	2000027c 	.word	0x2000027c
 80017e8:	20000284 	.word	0x20000284

080017ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b097      	sub	sp, #92	; 0x5c
 80017f0:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f2:	f001 fa3f 	bl	8002c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f6:	f000 fae7 	bl	8001dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017fa:	f000 fd51 	bl	80022a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80017fe:	f000 fd1f 	bl	8002240 <MX_DMA_Init>
  MX_SPI2_Init();
 8001802:	f000 fc5d 	bl	80020c0 <MX_SPI2_Init>
  MX_ADC1_Init();
 8001806:	f000 fb4f 	bl	8001ea8 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 800180a:	f000 fc39 	bl	8002080 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800180e:	f006 faed 	bl	8007dec <MX_FATFS_Init>
  MX_TIM6_Init();
 8001812:	f000 fcdf 	bl	80021d4 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001816:	f000 fc89 	bl	800212c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 800181a:	2201      	movs	r2, #1
 800181c:	2110      	movs	r1, #16
 800181e:	481a      	ldr	r0, [pc, #104]	; (8001888 <main+0x9c>)
 8001820:	f002 fd06 	bl	8004230 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 8001824:	2201      	movs	r2, #1
 8001826:	2104      	movs	r1, #4
 8001828:	4818      	ldr	r0, [pc, #96]	; (800188c <main+0xa0>)
 800182a:	f002 fd01 	bl	8004230 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 800182e:	2201      	movs	r2, #1
 8001830:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001834:	4815      	ldr	r0, [pc, #84]	; (800188c <main+0xa0>)
 8001836:	f002 fcfb 	bl	8004230 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001840:	4812      	ldr	r0, [pc, #72]	; (800188c <main+0xa0>)
 8001842:	f002 fcf5 	bl	8004230 <HAL_GPIO_WritePin>
  fresult = f_printf(&fil, "kay\n");
  if(fresult != FR_OK){
	  Error_Handler();
  }
  f_close(&fil);*/
  fresult=mount_card(&fs);
 8001846:	4812      	ldr	r0, [pc, #72]	; (8001890 <main+0xa4>)
 8001848:	f000 fdfc 	bl	8002444 <mount_card>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <main+0xa8>)
 8001852:	701a      	strb	r2, [r3, #0]

  char str2[30];

  IMU_config(&hspi2);
 8001854:	4810      	ldr	r0, [pc, #64]	; (8001898 <main+0xac>)
 8001856:	f7ff fbf9 	bl	800104c <IMU_config>

  HAL_TIM_Base_Start_IT(&htim6);
 800185a:	4810      	ldr	r0, [pc, #64]	; (800189c <main+0xb0>)
 800185c:	f005 f9ef 	bl	8006c3e <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim7);

  //Initialize encoder mode
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001860:	213c      	movs	r1, #60	; 0x3c
 8001862:	480f      	ldr	r0, [pc, #60]	; (80018a0 <main+0xb4>)
 8001864:	f005 faa1 	bl	8006daa <HAL_TIM_Encoder_Start>
  tick = HAL_GetTick();
 8001868:	f001 fa6a 	bl	8002d40 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <main+0xb8>)
 8001870:	601a      	str	r2, [r3, #0]
  counter1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <main+0xb4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <main+0xbc>)
 800187a:	6013      	str	r3, [r2, #0]

  uint8_t aux[5], aux2[1], aux3[1], str3[4], str[5];
  //uint8_t ref[5];
    aux[0]=0b10000001;
 800187c:	2381      	movs	r3, #129	; 0x81
 800187e:	753b      	strb	r3, [r7, #20]
    for(int i=1; i<=4; i++){
 8001880:	2301      	movs	r3, #1
 8001882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001884:	e01b      	b.n	80018be <main+0xd2>
 8001886:	bf00      	nop
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400
 8001890:	20000798 	.word	0x20000798
 8001894:	20001c48 	.word	0x20001c48
 8001898:	2000073c 	.word	0x2000073c
 800189c:	20001b60 	.word	0x20001b60
 80018a0:	20002c7c 	.word	0x20002c7c
 80018a4:	20000280 	.word	0x20000280
 80018a8:	2000027c 	.word	0x2000027c
  	  aux[i]=0b00000000;
 80018ac:	f107 0214 	add.w	r2, r7, #20
 80018b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b2:	4413      	add	r3, r2
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
    for(int i=1; i<=4; i++){
 80018b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ba:	3301      	adds	r3, #1
 80018bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	ddf3      	ble.n	80018ac <main+0xc0>
    }
    aux2[0]=0b00000000;
 80018c4:	2300      	movs	r3, #0
 80018c6:	743b      	strb	r3, [r7, #16]

    time2 = HAL_GetTick();
 80018c8:	f001 fa3a 	bl	8002d40 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4bc4      	ldr	r3, [pc, #784]	; (8001be0 <main+0x3f4>)
 80018d0:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, buffer_dma, NR_ADC_CHANNELS);
 80018d2:	220c      	movs	r2, #12
 80018d4:	49c3      	ldr	r1, [pc, #780]	; (8001be4 <main+0x3f8>)
 80018d6:	48c4      	ldr	r0, [pc, #784]	; (8001be8 <main+0x3fc>)
 80018d8:	f001 faa4 	bl	8002e24 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(acc_pedal > 50){
 80018dc:	4bc3      	ldr	r3, [pc, #780]	; (8001bec <main+0x400>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001bf0 <main+0x404>
 80018e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ee:	dd0d      	ble.n	800190c <main+0x120>
		  foc_ic_send_torque(&hspi2, 30000, acc_pedal);
 80018f0:	4bbe      	ldr	r3, [pc, #760]	; (8001bec <main+0x400>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe27 	bl	8000548 <__aeabi_f2d>
 80018fa:	4603      	mov	r3, r0
 80018fc:	460c      	mov	r4, r1
 80018fe:	ec44 3b10 	vmov	d0, r3, r4
 8001902:	f247 5130 	movw	r1, #30000	; 0x7530
 8001906:	48bb      	ldr	r0, [pc, #748]	; (8001bf4 <main+0x408>)
 8001908:	f7ff fb40 	bl	8000f8c <foc_ic_send_torque>
	  }
	  if(brk_pedal > 50){
 800190c:	4bba      	ldr	r3, [pc, #744]	; (8001bf8 <main+0x40c>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001bf0 <main+0x404>
 8001916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191e:	dd05      	ble.n	800192c <main+0x140>
		  foc_ic_send_torque(&hspi2, 0, -1);
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	2100      	movs	r1, #0
 8001926:	48b3      	ldr	r0, [pc, #716]	; (8001bf4 <main+0x408>)
 8001928:	f7ff fb30 	bl	8000f8c <foc_ic_send_torque>
	  }




	  uint32_t time1 = HAL_GetTick();
 800192c:	f001 fa08 	bl	8002d40 <HAL_GetTick>
 8001930:	6438      	str	r0, [r7, #64]	; 0x40

	  //printf("Microssegundos = %lu\n", seg);
	  uint32_t read=adc_dma[0];
 8001932:	4bb2      	ldr	r3, [pc, #712]	; (8001bfc <main+0x410>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
	  motor_temp = motorTemp(read);
 8001938:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800193a:	f7ff fda1 	bl	8001480 <motorTemp>
 800193e:	eef0 7a40 	vmov.f32	s15, s0
 8001942:	4baf      	ldr	r3, [pc, #700]	; (8001c00 <main+0x414>)
 8001944:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[1];
 8001948:	4bac      	ldr	r3, [pc, #688]	; (8001bfc <main+0x410>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  brk_pedal = pedalPos(read);
 800194e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fe15 	bl	8001580 <pedalPos>
 8001956:	eef0 7a40 	vmov.f32	s15, s0
 800195a:	4ba7      	ldr	r3, [pc, #668]	; (8001bf8 <main+0x40c>)
 800195c:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[2];
 8001960:	4ba6      	ldr	r3, [pc, #664]	; (8001bfc <main+0x410>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	63fb      	str	r3, [r7, #60]	; 0x3c
	  acc_pedal = pedalPos(read);
 8001966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fe09 	bl	8001580 <pedalPos>
 800196e:	eef0 7a40 	vmov.f32	s15, s0
 8001972:	4b9e      	ldr	r3, [pc, #632]	; (8001bec <main+0x400>)
 8001974:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[3];
 8001978:	4ba0      	ldr	r3, [pc, #640]	; (8001bfc <main+0x410>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph1 = motorCurrent(read);
 800197e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fcf9 	bl	8001378 <motorCurrent>
 8001986:	eef0 7a40 	vmov.f32	s15, s0
 800198a:	4b9e      	ldr	r3, [pc, #632]	; (8001c04 <main+0x418>)
 800198c:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph1[f] = current_ph1*current_ph1;
 8001990:	4b9c      	ldr	r3, [pc, #624]	; (8001c04 <main+0x418>)
 8001992:	ed93 7a00 	vldr	s14, [r3]
 8001996:	4b9b      	ldr	r3, [pc, #620]	; (8001c04 <main+0x418>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	4b9a      	ldr	r3, [pc, #616]	; (8001c08 <main+0x41c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a4:	4a99      	ldr	r2, [pc, #612]	; (8001c0c <main+0x420>)
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[4];
 80019ae:	4b93      	ldr	r3, [pc, #588]	; (8001bfc <main+0x410>)
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph2 = motorCurrent(read);
 80019b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fcde 	bl	8001378 <motorCurrent>
 80019bc:	eef0 7a40 	vmov.f32	s15, s0
 80019c0:	4b93      	ldr	r3, [pc, #588]	; (8001c10 <main+0x424>)
 80019c2:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph2[f] = current_ph2*current_ph2;
 80019c6:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <main+0x424>)
 80019c8:	ed93 7a00 	vldr	s14, [r3]
 80019cc:	4b90      	ldr	r3, [pc, #576]	; (8001c10 <main+0x424>)
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	4b8d      	ldr	r3, [pc, #564]	; (8001c08 <main+0x41c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019da:	4a8e      	ldr	r2, [pc, #568]	; (8001c14 <main+0x428>)
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[5];
 80019e4:	4b85      	ldr	r3, [pc, #532]	; (8001bfc <main+0x410>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph3 = motorCurrent(read);
 80019ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fcc3 	bl	8001378 <motorCurrent>
 80019f2:	eef0 7a40 	vmov.f32	s15, s0
 80019f6:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <main+0x42c>)
 80019f8:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph3[f] = current_ph3*current_ph3;
 80019fc:	4b86      	ldr	r3, [pc, #536]	; (8001c18 <main+0x42c>)
 80019fe:	ed93 7a00 	vldr	s14, [r3]
 8001a02:	4b85      	ldr	r3, [pc, #532]	; (8001c18 <main+0x42c>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	4b7f      	ldr	r3, [pc, #508]	; (8001c08 <main+0x41c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a10:	4a82      	ldr	r2, [pc, #520]	; (8001c1c <main+0x430>)
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[6];
 8001a1a:	4b78      	ldr	r3, [pc, #480]	; (8001bfc <main+0x410>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  conv_temp = igbtTemp(read);
 8001a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fcdc 	bl	80013e0 <igbtTemp>
 8001a28:	eef0 7a40 	vmov.f32	s15, s0
 8001a2c:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <main+0x434>)
 8001a2e:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[7];
 8001a32:	4b72      	ldr	r3, [pc, #456]	; (8001bfc <main+0x410>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	63fb      	str	r3, [r7, #60]	; 0x3c
	  dc_voltage=voltageDC(read);
 8001a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fd76 	bl	800152c <voltageDC>
 8001a40:	eef0 7a40 	vmov.f32	s15, s0
 8001a44:	4b77      	ldr	r3, [pc, #476]	; (8001c24 <main+0x438>)
 8001a46:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[8];
 8001a4a:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <main+0x410>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  dc_current=motorCurrent(read); //função corrente dc?
 8001a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fc90 	bl	8001378 <motorCurrent>
 8001a58:	eef0 7a40 	vmov.f32	s15, s0
 8001a5c:	4b72      	ldr	r3, [pc, #456]	; (8001c28 <main+0x43c>)
 8001a5e:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[9];
 8001a62:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <main+0x410>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph1=voltageAC(read);
 8001a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fd34 	bl	80014d8 <voltageAC>
 8001a70:	eef0 7a40 	vmov.f32	s15, s0
 8001a74:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <main+0x440>)
 8001a76:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[10];
 8001a7a:	4b60      	ldr	r3, [pc, #384]	; (8001bfc <main+0x410>)
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph2=voltageAC(read);
 8001a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fd28 	bl	80014d8 <voltageAC>
 8001a88:	eef0 7a40 	vmov.f32	s15, s0
 8001a8c:	4b68      	ldr	r3, [pc, #416]	; (8001c30 <main+0x444>)
 8001a8e:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[11];
 8001a92:	4b5a      	ldr	r3, [pc, #360]	; (8001bfc <main+0x410>)
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph3=voltageAC(read);
 8001a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fd1c 	bl	80014d8 <voltageAC>
 8001aa0:	eef0 7a40 	vmov.f32	s15, s0
 8001aa4:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <main+0x448>)
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
		  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
	  }
	  else if(brk>50)*/


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab0:	4861      	ldr	r0, [pc, #388]	; (8001c38 <main+0x44c>)
 8001ab2:	f002 fbbd 	bl	8004230 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux, 5, 1000);
 8001ab6:	f107 0114 	add.w	r1, r7, #20
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	2205      	movs	r2, #5
 8001ac0:	484c      	ldr	r0, [pc, #304]	; (8001bf4 <main+0x408>)
 8001ac2:	f004 fba1 	bl	8006208 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001acc:	485a      	ldr	r0, [pc, #360]	; (8001c38 <main+0x44c>)
 8001ace:	f002 fbaf 	bl	8004230 <HAL_GPIO_WritePin>


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad8:	4857      	ldr	r0, [pc, #348]	; (8001c38 <main+0x44c>)
 8001ada:	f002 fba9 	bl	8004230 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux2, 1, 1000);
 8001ade:	f107 0110 	add.w	r1, r7, #16
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4842      	ldr	r0, [pc, #264]	; (8001bf4 <main+0x408>)
 8001aea:	f004 fb8d 	bl	8006208 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str, 4, 1000);
 8001aee:	4639      	mov	r1, r7
 8001af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af4:	2204      	movs	r2, #4
 8001af6:	483f      	ldr	r0, [pc, #252]	; (8001bf4 <main+0x408>)
 8001af8:	f004 fcba 	bl	8006470 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b02:	484d      	ldr	r0, [pc, #308]	; (8001c38 <main+0x44c>)
 8001b04:	f002 fb94 	bl	8004230 <HAL_GPIO_WritePin>
	  //printf("%d %d %d %d\n", str[0], str[1], str[2], str[3]);


	  //ler velocidades do tmc
	  aux3[0]=0x6A;
 8001b08:	236a      	movs	r3, #106	; 0x6a
 8001b0a:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b12:	4849      	ldr	r0, [pc, #292]	; (8001c38 <main+0x44c>)
 8001b14:	f002 fb8c 	bl	8004230 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001b18:	f107 010c 	add.w	r1, r7, #12
 8001b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b20:	2201      	movs	r2, #1
 8001b22:	4834      	ldr	r0, [pc, #208]	; (8001bf4 <main+0x408>)
 8001b24:	f004 fb70 	bl	8006208 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001b28:	f107 0108 	add.w	r1, r7, #8
 8001b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b30:	2204      	movs	r2, #4
 8001b32:	4830      	ldr	r0, [pc, #192]	; (8001bf4 <main+0x408>)
 8001b34:	f004 fc9c 	bl	8006470 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3e:	483e      	ldr	r0, [pc, #248]	; (8001c38 <main+0x44c>)
 8001b40:	f002 fb76 	bl	8004230 <HAL_GPIO_WritePin>
	  //printf("PID VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);

	  aux3[0]=0x22;
 8001b44:	2322      	movs	r3, #34	; 0x22
 8001b46:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4e:	483a      	ldr	r0, [pc, #232]	; (8001c38 <main+0x44c>)
 8001b50:	f002 fb6e 	bl	8004230 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001b54:	f107 010c 	add.w	r1, r7, #12
 8001b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4825      	ldr	r0, [pc, #148]	; (8001bf4 <main+0x408>)
 8001b60:	f004 fb52 	bl	8006208 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001b64:	f107 0108 	add.w	r1, r7, #8
 8001b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	4821      	ldr	r0, [pc, #132]	; (8001bf4 <main+0x408>)
 8001b70:	f004 fc7e 	bl	8006470 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7a:	482f      	ldr	r0, [pc, #188]	; (8001c38 <main+0x44c>)
 8001b7c:	f002 fb58 	bl	8004230 <HAL_GPIO_WritePin>
	  //printf("OPENLOOP VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);

	  aux3[0]=0x41;
 8001b80:	2341      	movs	r3, #65	; 0x41
 8001b82:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8a:	482b      	ldr	r0, [pc, #172]	; (8001c38 <main+0x44c>)
 8001b8c:	f002 fb50 	bl	8004230 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001b90:	f107 010c 	add.w	r1, r7, #12
 8001b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4816      	ldr	r0, [pc, #88]	; (8001bf4 <main+0x408>)
 8001b9c:	f004 fb34 	bl	8006208 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001ba0:	f107 0108 	add.w	r1, r7, #8
 8001ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba8:	2204      	movs	r2, #4
 8001baa:	4812      	ldr	r0, [pc, #72]	; (8001bf4 <main+0x408>)
 8001bac:	f004 fc60 	bl	8006470 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb6:	4820      	ldr	r0, [pc, #128]	; (8001c38 <main+0x44c>)
 8001bb8:	f002 fb3a 	bl	8004230 <HAL_GPIO_WritePin>
	  //printf("AENC DECODER COUNT: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);	   */

	  sprintf(str2,"%f ", brk_pedal);
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <main+0x40c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fcc1 	bl	8000548 <__aeabi_f2d>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	f107 001c 	add.w	r0, r7, #28
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4623      	mov	r3, r4
 8001bd2:	491a      	ldr	r1, [pc, #104]	; (8001c3c <main+0x450>)
 8001bd4:	f00a fb08 	bl	800c1e8 <siprintf>
	  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <main+0x454>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	e032      	b.n	8001c44 <main+0x458>
 8001bde:	bf00      	nop
 8001be0:	20003d54 	.word	0x20003d54
 8001be4:	20001ad0 	.word	0x20001ad0
 8001be8:	20001820 	.word	0x20001820
 8001bec:	20000738 	.word	0x20000738
 8001bf0:	42480000 	.word	0x42480000
 8001bf4:	2000073c 	.word	0x2000073c
 8001bf8:	20001804 	.word	0x20001804
 8001bfc:	200017d0 	.word	0x200017d0
 8001c00:	200006d4 	.word	0x200006d4
 8001c04:	20001800 	.word	0x20001800
 8001c08:	20000288 	.word	0x20000288
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20001810 	.word	0x20001810
 8001c14:	20000028 	.word	0x20000028
 8001c18:	2000181c 	.word	0x2000181c
 8001c1c:	20000050 	.word	0x20000050
 8001c20:	2000180c 	.word	0x2000180c
 8001c24:	20001c44 	.word	0x20001c44
 8001c28:	20001bac 	.word	0x20001bac
 8001c2c:	20000794 	.word	0x20000794
 8001c30:	20001818 	.word	0x20001818
 8001c34:	20001814 	.word	0x20001814
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	0800e320 	.word	0x0800e320
 8001c40:	20000278 	.word	0x20000278
 8001c44:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <main+0x590>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	494d      	ldr	r1, [pc, #308]	; (8001d80 <main+0x594>)
 8001c4a:	484e      	ldr	r0, [pc, #312]	; (8001d84 <main+0x598>)
 8001c4c:	f00a facc 	bl	800c1e8 <siprintf>
	  update_file("brake.txt", str2, stamp, "", &fil2, &bw);
 8001c50:	f107 011c 	add.w	r1, r7, #28
 8001c54:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <main+0x59c>)
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <main+0x5a0>)
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <main+0x5a4>)
 8001c5e:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <main+0x598>)
 8001c60:	484c      	ldr	r0, [pc, #304]	; (8001d94 <main+0x5a8>)
 8001c62:	f000 fbff 	bl	8002464 <update_file>
	  stamp[0]='\0';
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <main+0x598>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]

	  sprintf(str2,"%f ", acc_pedal);
 8001c6c:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <main+0x5ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc69 	bl	8000548 <__aeabi_f2d>
 8001c76:	4603      	mov	r3, r0
 8001c78:	460c      	mov	r4, r1
 8001c7a:	f107 001c 	add.w	r0, r7, #28
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4623      	mov	r3, r4
 8001c82:	4946      	ldr	r1, [pc, #280]	; (8001d9c <main+0x5b0>)
 8001c84:	f00a fab0 	bl	800c1e8 <siprintf>
	  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001c88:	4b45      	ldr	r3, [pc, #276]	; (8001da0 <main+0x5b4>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <main+0x590>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	493b      	ldr	r1, [pc, #236]	; (8001d80 <main+0x594>)
 8001c92:	483c      	ldr	r0, [pc, #240]	; (8001d84 <main+0x598>)
 8001c94:	f00a faa8 	bl	800c1e8 <siprintf>
	  update_file("throttle.txt", str2, stamp, "", &fil2, &bw);
 8001c98:	f107 011c 	add.w	r1, r7, #28
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <main+0x59c>)
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <main+0x5a0>)
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <main+0x5a4>)
 8001ca6:	4a37      	ldr	r2, [pc, #220]	; (8001d84 <main+0x598>)
 8001ca8:	483e      	ldr	r0, [pc, #248]	; (8001da4 <main+0x5b8>)
 8001caa:	f000 fbdb 	bl	8002464 <update_file>
	  stamp[0]='\0';
 8001cae:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <main+0x598>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]

	  IMU_acc_read(&hspi2, accel_data);
 8001cb4:	493c      	ldr	r1, [pc, #240]	; (8001da8 <main+0x5bc>)
 8001cb6:	483d      	ldr	r0, [pc, #244]	; (8001dac <main+0x5c0>)
 8001cb8:	f7ff fa4a 	bl	8001150 <IMU_acc_read>
	  for(int i=0; i<=2; i++){
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cc0:	e022      	b.n	8001d08 <main+0x51c>
		  sprintf(str2, "accel[%d] - %d ", i, accel_data[i]);
 8001cc2:	4a39      	ldr	r2, [pc, #228]	; (8001da8 <main+0x5bc>)
 8001cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	f107 001c 	add.w	r0, r7, #28
 8001cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cd0:	4937      	ldr	r1, [pc, #220]	; (8001db0 <main+0x5c4>)
 8001cd2:	f00a fa89 	bl	800c1e8 <siprintf>
		  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001cd6:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <main+0x5b4>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <main+0x590>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4928      	ldr	r1, [pc, #160]	; (8001d80 <main+0x594>)
 8001ce0:	4828      	ldr	r0, [pc, #160]	; (8001d84 <main+0x598>)
 8001ce2:	f00a fa81 	bl	800c1e8 <siprintf>
		  update_file("acc.txt", str2, stamp, "", &fil2, &bw);
 8001ce6:	f107 011c 	add.w	r1, r7, #28
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <main+0x59c>)
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <main+0x5a0>)
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <main+0x5a4>)
 8001cf4:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <main+0x598>)
 8001cf6:	482f      	ldr	r0, [pc, #188]	; (8001db4 <main+0x5c8>)
 8001cf8:	f000 fbb4 	bl	8002464 <update_file>
		  stamp[0]='\0';
 8001cfc:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <main+0x598>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<=2; i++){
 8001d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d04:	3301      	adds	r3, #1
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	ddd9      	ble.n	8001cc2 <main+0x4d6>
	  }

	  IMU_gyro_read(&hspi2, gyro_data);
 8001d0e:	492a      	ldr	r1, [pc, #168]	; (8001db8 <main+0x5cc>)
 8001d10:	4826      	ldr	r0, [pc, #152]	; (8001dac <main+0x5c0>)
 8001d12:	f7ff fa93 	bl	800123c <IMU_gyro_read>
	  for(int i=0; i<=2; i++){
 8001d16:	2300      	movs	r3, #0
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
 8001d1a:	e022      	b.n	8001d62 <main+0x576>
		  sprintf(str2, "gyro[%d] - %d ", i, gyro_data[i]);
 8001d1c:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <main+0x5cc>)
 8001d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d24:	f107 001c 	add.w	r0, r7, #28
 8001d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d2a:	4924      	ldr	r1, [pc, #144]	; (8001dbc <main+0x5d0>)
 8001d2c:	f00a fa5c 	bl	800c1e8 <siprintf>
		  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <main+0x5b4>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <main+0x590>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4911      	ldr	r1, [pc, #68]	; (8001d80 <main+0x594>)
 8001d3a:	4812      	ldr	r0, [pc, #72]	; (8001d84 <main+0x598>)
 8001d3c:	f00a fa54 	bl	800c1e8 <siprintf>
		  update_file("gyro.txt", str2, stamp, "", &fil2, &bw);
 8001d40:	f107 011c 	add.w	r1, r7, #28
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <main+0x59c>)
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <main+0x5a0>)
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <main+0x5a4>)
 8001d4e:	4a0d      	ldr	r2, [pc, #52]	; (8001d84 <main+0x598>)
 8001d50:	481b      	ldr	r0, [pc, #108]	; (8001dc0 <main+0x5d4>)
 8001d52:	f000 fb87 	bl	8002464 <update_file>
		  stamp[0]='\0';
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <main+0x598>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<=2; i++){
 8001d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d5e:	3301      	adds	r3, #1
 8001d60:	647b      	str	r3, [r7, #68]	; 0x44
 8001d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	ddd9      	ble.n	8001d1c <main+0x530>
	  }

	  printf("tempo de ciclo = %lu\n", (HAL_GetTick() - time1));
 8001d68:	f000 ffea 	bl	8002d40 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	4619      	mov	r1, r3
 8001d74:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <main+0x5d8>)
 8001d76:	f00a f9bb 	bl	800c0f0 <iprintf>
  {
 8001d7a:	e5af      	b.n	80018dc <main+0xf0>
 8001d7c:	20000274 	.word	0x20000274
 8001d80:	0800e324 	.word	0x0800e324
 8001d84:	20002cc0 	.word	0x20002cc0
 8001d88:	20001bbc 	.word	0x20001bbc
 8001d8c:	20003d58 	.word	0x20003d58
 8001d90:	0800e32c 	.word	0x0800e32c
 8001d94:	0800e330 	.word	0x0800e330
 8001d98:	20000738 	.word	0x20000738
 8001d9c:	0800e320 	.word	0x0800e320
 8001da0:	20000278 	.word	0x20000278
 8001da4:	0800e33c 	.word	0x0800e33c
 8001da8:	20001ba0 	.word	0x20001ba0
 8001dac:	2000073c 	.word	0x2000073c
 8001db0:	0800e34c 	.word	0x0800e34c
 8001db4:	0800e35c 	.word	0x0800e35c
 8001db8:	20001bb0 	.word	0x20001bb0
 8001dbc:	0800e364 	.word	0x0800e364
 8001dc0:	0800e374 	.word	0x0800e374
 8001dc4:	0800e380 	.word	0x0800e380

08001dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b094      	sub	sp, #80	; 0x50
 8001dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	2230      	movs	r2, #48	; 0x30
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f009 fd25 	bl	800b826 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <SystemClock_Config+0xd8>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <SystemClock_Config+0xd8>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <SystemClock_Config+0xd8>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <SystemClock_Config+0xdc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <SystemClock_Config+0xdc>)
 8001e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <SystemClock_Config+0xdc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e24:	2301      	movs	r3, #1
 8001e26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e38:	2319      	movs	r3, #25
 8001e3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e42:	2302      	movs	r3, #2
 8001e44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e46:	2307      	movs	r3, #7
 8001e48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e4a:	f107 0320 	add.w	r3, r7, #32
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 fa08 	bl	8004264 <HAL_RCC_OscConfig>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e5a:	f000 faec 	bl	8002436 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5e:	230f      	movs	r3, #15
 8001e60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e62:	2302      	movs	r3, #2
 8001e64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	2105      	movs	r1, #5
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 fc61 	bl	8004744 <HAL_RCC_ClockConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e88:	f000 fad5 	bl	8002436 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e92:	2000      	movs	r0, #0
 8001e94:	f002 fd3c 	bl	8004910 <HAL_RCC_MCOConfig>
}
 8001e98:	bf00      	nop
 8001e9a:	3750      	adds	r7, #80	; 0x50
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40007000 	.word	0x40007000

08001ea8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eae:	463b      	mov	r3, r7
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001eba:	4b6e      	ldr	r3, [pc, #440]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001ebc:	4a6e      	ldr	r2, [pc, #440]	; (8002078 <MX_ADC1_Init+0x1d0>)
 8001ebe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ec0:	4b6c      	ldr	r3, [pc, #432]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001ec2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ec6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ece:	4b69      	ldr	r3, [pc, #420]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ed4:	4b67      	ldr	r3, [pc, #412]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eda:	4b66      	ldr	r3, [pc, #408]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ee2:	4b64      	ldr	r3, [pc, #400]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ee8:	4b62      	ldr	r3, [pc, #392]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001eea:	4a64      	ldr	r2, [pc, #400]	; (800207c <MX_ADC1_Init+0x1d4>)
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001eee:	4b61      	ldr	r3, [pc, #388]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001ef4:	4b5f      	ldr	r3, [pc, #380]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001efa:	4b5e      	ldr	r3, [pc, #376]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f02:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f08:	485a      	ldr	r0, [pc, #360]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001f0a:	f000 ff47 	bl	8002d9c <HAL_ADC_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f14:	f000 fa8f 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f24:	463b      	mov	r3, r7
 8001f26:	4619      	mov	r1, r3
 8001f28:	4852      	ldr	r0, [pc, #328]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001f2a:	f001 f881 	bl	8003030 <HAL_ADC_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f34:	f000 fa7f 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001f38:	230c      	movs	r3, #12
 8001f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	4619      	mov	r1, r3
 8001f44:	484b      	ldr	r0, [pc, #300]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001f46:	f001 f873 	bl	8003030 <HAL_ADC_ConfigChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f50:	f000 fa71 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001f54:	230d      	movs	r3, #13
 8001f56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4844      	ldr	r0, [pc, #272]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001f62:	f001 f865 	bl	8003030 <HAL_ADC_ConfigChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001f6c:	f000 fa63 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f70:	2302      	movs	r3, #2
 8001f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001f74:	2304      	movs	r3, #4
 8001f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f78:	463b      	mov	r3, r7
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	483d      	ldr	r0, [pc, #244]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001f7e:	f001 f857 	bl	8003030 <HAL_ADC_ConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001f88:	f000 fa55 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001f8c:	230a      	movs	r3, #10
 8001f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f90:	2305      	movs	r3, #5
 8001f92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f94:	463b      	mov	r3, r7
 8001f96:	4619      	mov	r1, r3
 8001f98:	4836      	ldr	r0, [pc, #216]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001f9a:	f001 f849 	bl	8003030 <HAL_ADC_ConfigChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001fa4:	f000 fa47 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001fa8:	230b      	movs	r3, #11
 8001faa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001fac:	2306      	movs	r3, #6
 8001fae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	482f      	ldr	r0, [pc, #188]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001fb6:	f001 f83b 	bl	8003030 <HAL_ADC_ConfigChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001fc0:	f000 fa39 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001fc4:	2309      	movs	r3, #9
 8001fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001fc8:	2307      	movs	r3, #7
 8001fca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fcc:	463b      	mov	r3, r7
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4828      	ldr	r0, [pc, #160]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001fd2:	f001 f82d 	bl	8003030 <HAL_ADC_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001fdc:	f000 fa2b 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fe8:	463b      	mov	r3, r7
 8001fea:	4619      	mov	r1, r3
 8001fec:	4821      	ldr	r0, [pc, #132]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8001fee:	f001 f81f 	bl	8003030 <HAL_ADC_ConfigChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001ff8:	f000 fa1d 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ffc:	2306      	movs	r3, #6
 8001ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002000:	2309      	movs	r3, #9
 8002002:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002004:	463b      	mov	r3, r7
 8002006:	4619      	mov	r1, r3
 8002008:	481a      	ldr	r0, [pc, #104]	; (8002074 <MX_ADC1_Init+0x1cc>)
 800200a:	f001 f811 	bl	8003030 <HAL_ADC_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002014:	f000 fa0f 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002018:	2307      	movs	r3, #7
 800201a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800201c:	230a      	movs	r3, #10
 800201e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002020:	463b      	mov	r3, r7
 8002022:	4619      	mov	r1, r3
 8002024:	4813      	ldr	r0, [pc, #76]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8002026:	f001 f803 	bl	8003030 <HAL_ADC_ConfigChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002030:	f000 fa01 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002034:	230e      	movs	r3, #14
 8002036:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002038:	230b      	movs	r3, #11
 800203a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800203c:	463b      	mov	r3, r7
 800203e:	4619      	mov	r1, r3
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <MX_ADC1_Init+0x1cc>)
 8002042:	f000 fff5 	bl	8003030 <HAL_ADC_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800204c:	f000 f9f3 	bl	8002436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002050:	230f      	movs	r3, #15
 8002052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002054:	230c      	movs	r3, #12
 8002056:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002058:	463b      	mov	r3, r7
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_ADC1_Init+0x1cc>)
 800205e:	f000 ffe7 	bl	8003030 <HAL_ADC_ConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002068:	f000 f9e5 	bl	8002436 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20001820 	.word	0x20001820
 8002078:	40012000 	.word	0x40012000
 800207c:	0f000001 	.word	0x0f000001

08002080 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_SDIO_SD_Init+0x38>)
 8002086:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <MX_SDIO_SD_Init+0x3c>)
 8002088:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_SDIO_SD_Init+0x38>)
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_SDIO_SD_Init+0x38>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_SDIO_SD_Init+0x38>)
 8002098:	2200      	movs	r2, #0
 800209a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_SDIO_SD_Init+0x38>)
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <MX_SDIO_SD_Init+0x38>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 1;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <MX_SDIO_SD_Init+0x38>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	20001bc0 	.word	0x20001bc0
 80020bc:	40012c00 	.word	0x40012c00

080020c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <MX_SPI2_Init+0x64>)
 80020c6:	4a18      	ldr	r2, [pc, #96]	; (8002128 <MX_SPI2_Init+0x68>)
 80020c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <MX_SPI2_Init+0x64>)
 80020cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <MX_SPI2_Init+0x64>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <MX_SPI2_Init+0x64>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_SPI2_Init+0x64>)
 80020e0:	2202      	movs	r2, #2
 80020e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <MX_SPI2_Init+0x64>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <MX_SPI2_Init+0x64>)
 80020ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MX_SPI2_Init+0x64>)
 80020f4:	2228      	movs	r2, #40	; 0x28
 80020f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <MX_SPI2_Init+0x64>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <MX_SPI2_Init+0x64>)
 8002100:	2200      	movs	r2, #0
 8002102:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <MX_SPI2_Init+0x64>)
 8002106:	2200      	movs	r2, #0
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <MX_SPI2_Init+0x64>)
 800210c:	220a      	movs	r2, #10
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002110:	4804      	ldr	r0, [pc, #16]	; (8002124 <MX_SPI2_Init+0x64>)
 8002112:	f004 f815 	bl	8006140 <HAL_SPI_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800211c:	f000 f98b 	bl	8002436 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	2000073c 	.word	0x2000073c
 8002128:	40003800 	.word	0x40003800

0800212c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	; 0x30
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f009 fb73 	bl	800b826 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <MX_TIM2_Init+0xa4>)
 800214a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800214e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <MX_TIM2_Init+0xa4>)
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <MX_TIM2_Init+0xa4>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <MX_TIM2_Init+0xa4>)
 800215e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002162:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_TIM2_Init+0xa4>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <MX_TIM2_Init+0xa4>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002170:	2303      	movs	r3, #3
 8002172:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002178:	2301      	movs	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002188:	2301      	movs	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800218c:	2300      	movs	r3, #0
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	4619      	mov	r1, r3
 800219a:	480d      	ldr	r0, [pc, #52]	; (80021d0 <MX_TIM2_Init+0xa4>)
 800219c:	f004 fd73 	bl	8006c86 <HAL_TIM_Encoder_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80021a6:	f000 f946 	bl	8002436 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <MX_TIM2_Init+0xa4>)
 80021b8:	f005 f824 	bl	8007204 <HAL_TIMEx_MasterConfigSynchronization>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80021c2:	f000 f938 	bl	8002436 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	3730      	adds	r7, #48	; 0x30
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20002c7c 	.word	0x20002c7c

080021d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021da:	463b      	mov	r3, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <MX_TIM6_Init+0x64>)
 80021e4:	4a15      	ldr	r2, [pc, #84]	; (800223c <MX_TIM6_Init+0x68>)
 80021e6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000;
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <MX_TIM6_Init+0x64>)
 80021ea:	f24a 4210 	movw	r2, #42000	; 0xa410
 80021ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <MX_TIM6_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <MX_TIM6_Init+0x64>)
 80021f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <MX_TIM6_Init+0x64>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <MX_TIM6_Init+0x64>)
 8002206:	f004 fcef 	bl	8006be8 <HAL_TIM_Base_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002210:	f000 f911 	bl	8002436 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002214:	2320      	movs	r3, #32
 8002216:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800221c:	463b      	mov	r3, r7
 800221e:	4619      	mov	r1, r3
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <MX_TIM6_Init+0x64>)
 8002222:	f004 ffef 	bl	8007204 <HAL_TIMEx_MasterConfigSynchronization>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800222c:	f000 f903 	bl	8002436 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20001b60 	.word	0x20001b60
 800223c:	40001000 	.word	0x40001000

08002240 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_DMA_Init+0x5c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a13      	ldr	r2, [pc, #76]	; (800229c <MX_DMA_Init+0x5c>)
 8002250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_DMA_Init+0x5c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	2038      	movs	r0, #56	; 0x38
 8002268:	f001 fa5d 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800226c:	2038      	movs	r0, #56	; 0x38
 800226e:	f001 fa76 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	203b      	movs	r0, #59	; 0x3b
 8002278:	f001 fa55 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800227c:	203b      	movs	r0, #59	; 0x3b
 800227e:	f001 fa6e 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2045      	movs	r0, #69	; 0x45
 8002288:	f001 fa4d 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800228c:	2045      	movs	r0, #69	; 0x45
 800228e:	f001 fa66 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800

080022a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a45      	ldr	r2, [pc, #276]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a3e      	ldr	r2, [pc, #248]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a37      	ldr	r2, [pc, #220]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <MX_GPIO_Init+0x134>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <MX_GPIO_Init+0x134>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a30      	ldr	r2, [pc, #192]	; (80023d4 <MX_GPIO_Init+0x134>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b2e      	ldr	r3, [pc, #184]	; (80023d4 <MX_GPIO_Init+0x134>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <MX_GPIO_Init+0x134>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <MX_GPIO_Init+0x134>)
 8002330:	f043 0308 	orr.w	r3, r3, #8
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <MX_GPIO_Init+0x134>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	2110      	movs	r1, #16
 8002346:	4824      	ldr	r0, [pc, #144]	; (80023d8 <MX_GPIO_Init+0x138>)
 8002348:	f001 ff72 	bl	8004230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	f241 4104 	movw	r1, #5124	; 0x1404
 8002352:	4822      	ldr	r0, [pc, #136]	; (80023dc <MX_GPIO_Init+0x13c>)
 8002354:	f001 ff6c 	bl	8004230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Accel_CS_Pin */
  GPIO_InitStruct.Pin = Accel_CS_Pin;
 8002358:	2310      	movs	r3, #16
 800235a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235c:	2301      	movs	r3, #1
 800235e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Accel_CS_GPIO_Port, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	481a      	ldr	r0, [pc, #104]	; (80023d8 <MX_GPIO_Init+0x138>)
 8002370:	f001 fdac 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : Gyro_CS_Pin Magnet_CS_Pin SPI_CS_FOC_Pin */
  GPIO_InitStruct.Pin = Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin;
 8002374:	f241 4304 	movw	r3, #5124	; 0x1404
 8002378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237a:	2301      	movs	r3, #1
 800237c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	4813      	ldr	r0, [pc, #76]	; (80023dc <MX_GPIO_Init+0x13c>)
 800238e:	f001 fd9d 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Det_Pin */
  GPIO_InitStruct.Pin = SD_Det_Pin;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Det_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	480e      	ldr	r0, [pc, #56]	; (80023e0 <MX_GPIO_Init+0x140>)
 80023a6:	f001 fd91 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	4804      	ldr	r0, [pc, #16]	; (80023d8 <MX_GPIO_Init+0x138>)
 80023c8:	f001 fd80 	bl	8003ecc <HAL_GPIO_Init>

}
 80023cc:	bf00      	nop
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020800 	.word	0x40020800

080023e4 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f976 	bl	80016e0 <ITM_SendChar>
	return ch;
 80023f4:	687b      	ldr	r3, [r7, #4]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <_write>:

int _write(int file, char *ptr, int len){
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e009      	b.n	8002424 <_write+0x26>
		__io_putchar(*ptr++);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	60ba      	str	r2, [r7, #8]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ffe3 	bl	80023e4 <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	dbf1      	blt.n	8002410 <_write+0x12>
	}
	return len;
 800242c:	687b      	ldr	r3, [r7, #4]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <mount_card>:
	}
}

/* Mount SD Card */
FRESULT mount_card (FATFS *fs)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	//printf("mount\n");
	return f_mount(fs, "", 0);
 800244c:	2200      	movs	r2, #0
 800244e:	4904      	ldr	r1, [pc, #16]	; (8002460 <mount_card+0x1c>)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f008 f9ab 	bl	800a7ac <f_mount>
 8002456:	4603      	mov	r3, r0
      //if fresult <>
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	0800e398 	.word	0x0800e398

08002464 <update_file>:
	return fresult;
}

/*********************UPDATING an existing file ***************************/
FRESULT update_file(char *filename, char *data, char *timestamp, char *msec_stamp, FIL *fil, UINT *bw)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
	FRESULT fresult;

	strcat(data,timestamp);
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	68b8      	ldr	r0, [r7, #8]
 8002476:	f009 fed7 	bl	800c228 <strcat>
	strcat(data,msec_stamp);
 800247a:	6839      	ldr	r1, [r7, #0]
 800247c:	68b8      	ldr	r0, [r7, #8]
 800247e:	f009 fed3 	bl	800c228 <strcat>
	strcat(data,"\n");
 8002482:	68b8      	ldr	r0, [r7, #8]
 8002484:	f7fd fea4 	bl	80001d0 <strlen>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4413      	add	r3, r2
 8002490:	4910      	ldr	r1, [pc, #64]	; (80024d4 <update_file+0x70>)
 8002492:	461a      	mov	r2, r3
 8002494:	460b      	mov	r3, r1
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	8013      	strh	r3, [r2, #0]

	//printf("lib\n");
	/* Open the file with write access */
	fresult = f_open(fil, filename, FA_OPEN_APPEND | FA_WRITE);// FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 800249a:	2232      	movs	r2, #50	; 0x32
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	6a38      	ldr	r0, [r7, #32]
 80024a0:	f008 f9ca 	bl	800a838 <f_open>
 80024a4:	4603      	mov	r3, r0
 80024a6:	75fb      	strb	r3, [r7, #23]
	if (fresult!=FR_OK){
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <update_file+0x50>
		printf("update_file - f_open fodeu\n " );
 80024ae:	480a      	ldr	r0, [pc, #40]	; (80024d8 <update_file+0x74>)
 80024b0:	f009 fe1e 	bl	800c0f0 <iprintf>

	/* Move to offset to the end of the file */
	//fresult = f_lseek(fil, fil->fptr);

	/* write the string to the file */
	fresult = f_printf(fil, data); //pode precisar de um "\n"
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6a38      	ldr	r0, [r7, #32]
 80024b8:	f008 fe3e 	bl	800b138 <f_printf>
 80024bc:	4603      	mov	r3, r0
 80024be:	75fb      	strb	r3, [r7, #23]
	/*if (fresult!=FR_OK){
		printf("update_file - f_printf fodeu\n " );
	}*/
	fresult = f_close (fil);
 80024c0:	6a38      	ldr	r0, [r7, #32]
 80024c2:	f008 fd97 	bl	800aff4 <f_close>
 80024c6:	4603      	mov	r3, r0
 80024c8:	75fb      	strb	r3, [r7, #23]
	/*if(fresult != FR_OK){
		printf("update_file - f_close fodeu\n " );
	}*/
	return fresult;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	0800e3a8 	.word	0x0800e3a8
 80024d8:	0800e3ac 	.word	0x0800e3ac

080024dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_MspInit+0x4c>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_MspInit+0x4c>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f0:	6453      	str	r3, [r2, #68]	; 0x44
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_MspInit+0x4c>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_MspInit+0x4c>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <HAL_MspInit+0x4c>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_MspInit+0x4c>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	; 0x30
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a49      	ldr	r2, [pc, #292]	; (8002670 <HAL_ADC_MspInit+0x144>)
 800254a:	4293      	cmp	r3, r2
 800254c:	f040 808c 	bne.w	8002668 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002550:	2300      	movs	r3, #0
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_ADC_MspInit+0x148>)
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	4a46      	ldr	r2, [pc, #280]	; (8002674 <HAL_ADC_MspInit+0x148>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6453      	str	r3, [r2, #68]	; 0x44
 8002560:	4b44      	ldr	r3, [pc, #272]	; (8002674 <HAL_ADC_MspInit+0x148>)
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	4b40      	ldr	r3, [pc, #256]	; (8002674 <HAL_ADC_MspInit+0x148>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	4a3f      	ldr	r2, [pc, #252]	; (8002674 <HAL_ADC_MspInit+0x148>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	6313      	str	r3, [r2, #48]	; 0x30
 800257c:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <HAL_ADC_MspInit+0x148>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	4b39      	ldr	r3, [pc, #228]	; (8002674 <HAL_ADC_MspInit+0x148>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	4a38      	ldr	r2, [pc, #224]	; (8002674 <HAL_ADC_MspInit+0x148>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6313      	str	r3, [r2, #48]	; 0x30
 8002598:	4b36      	ldr	r3, [pc, #216]	; (8002674 <HAL_ADC_MspInit+0x148>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	4b32      	ldr	r3, [pc, #200]	; (8002674 <HAL_ADC_MspInit+0x148>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	4a31      	ldr	r2, [pc, #196]	; (8002674 <HAL_ADC_MspInit+0x148>)
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	6313      	str	r3, [r2, #48]	; 0x30
 80025b4:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <HAL_ADC_MspInit+0x148>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = curr_u_Pin|curr_v_Pin|brk_pedal_Pin|acc_pedal_Pin 
 80025c0:	233f      	movs	r3, #63	; 0x3f
 80025c2:	61fb      	str	r3, [r7, #28]
                          |motor_voltage_v_Pin|motor_voltage_w_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025c4:	2303      	movs	r3, #3
 80025c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025cc:	f107 031c 	add.w	r3, r7, #28
 80025d0:	4619      	mov	r1, r3
 80025d2:	4829      	ldr	r0, [pc, #164]	; (8002678 <HAL_ADC_MspInit+0x14c>)
 80025d4:	f001 fc7a 	bl	8003ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = curr_w_Pin|DC_Bus_Voltage_Pin|DC_Current_Pin|motor_voltage_u_Pin;
 80025d8:	23cc      	movs	r3, #204	; 0xcc
 80025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025dc:	2303      	movs	r3, #3
 80025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	f107 031c 	add.w	r3, r7, #28
 80025e8:	4619      	mov	r1, r3
 80025ea:	4824      	ldr	r0, [pc, #144]	; (800267c <HAL_ADC_MspInit+0x150>)
 80025ec:	f001 fc6e 	bl	8003ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025f0:	2303      	movs	r3, #3
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f4:	2303      	movs	r3, #3
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	4619      	mov	r1, r3
 8002602:	481f      	ldr	r0, [pc, #124]	; (8002680 <HAL_ADC_MspInit+0x154>)
 8002604:	f001 fc62 	bl	8003ecc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <HAL_ADC_MspInit+0x158>)
 800260a:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_ADC_MspInit+0x15c>)
 800260c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800260e:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_ADC_MspInit+0x158>)
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_ADC_MspInit+0x158>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_ADC_MspInit+0x158>)
 800261c:	2200      	movs	r2, #0
 800261e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <HAL_ADC_MspInit+0x158>)
 8002622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002626:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_ADC_MspInit+0x158>)
 800262a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800262e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_ADC_MspInit+0x158>)
 8002632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002636:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_ADC_MspInit+0x158>)
 800263a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800263e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_ADC_MspInit+0x158>)
 8002642:	2200      	movs	r2, #0
 8002644:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_ADC_MspInit+0x158>)
 8002648:	2200      	movs	r2, #0
 800264a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800264c:	480d      	ldr	r0, [pc, #52]	; (8002684 <HAL_ADC_MspInit+0x158>)
 800264e:	f001 f8a1 	bl	8003794 <HAL_DMA_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002658:	f7ff feed 	bl	8002436 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_ADC_MspInit+0x158>)
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
 8002662:	4a08      	ldr	r2, [pc, #32]	; (8002684 <HAL_ADC_MspInit+0x158>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002668:	bf00      	nop
 800266a:	3730      	adds	r7, #48	; 0x30
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40012000 	.word	0x40012000
 8002674:	40023800 	.word	0x40023800
 8002678:	40020800 	.word	0x40020800
 800267c:	40020000 	.word	0x40020000
 8002680:	40020400 	.word	0x40020400
 8002684:	20001a70 	.word	0x20001a70
 8002688:	40026410 	.word	0x40026410

0800268c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	; 0x28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a70      	ldr	r2, [pc, #448]	; (800286c <HAL_SD_MspInit+0x1e0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	f040 80da 	bne.w	8002864 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	4b6e      	ldr	r3, [pc, #440]	; (8002870 <HAL_SD_MspInit+0x1e4>)
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	4a6d      	ldr	r2, [pc, #436]	; (8002870 <HAL_SD_MspInit+0x1e4>)
 80026ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026be:	6453      	str	r3, [r2, #68]	; 0x44
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <HAL_SD_MspInit+0x1e4>)
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	4b67      	ldr	r3, [pc, #412]	; (8002870 <HAL_SD_MspInit+0x1e4>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4a66      	ldr	r2, [pc, #408]	; (8002870 <HAL_SD_MspInit+0x1e4>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	6313      	str	r3, [r2, #48]	; 0x30
 80026dc:	4b64      	ldr	r3, [pc, #400]	; (8002870 <HAL_SD_MspInit+0x1e4>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	4b60      	ldr	r3, [pc, #384]	; (8002870 <HAL_SD_MspInit+0x1e4>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	4a5f      	ldr	r2, [pc, #380]	; (8002870 <HAL_SD_MspInit+0x1e4>)
 80026f2:	f043 0308 	orr.w	r3, r3, #8
 80026f6:	6313      	str	r3, [r2, #48]	; 0x30
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_SD_MspInit+0x1e4>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800270e:	2301      	movs	r3, #1
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002716:	230c      	movs	r3, #12
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	4854      	ldr	r0, [pc, #336]	; (8002874 <HAL_SD_MspInit+0x1e8>)
 8002722:	f001 fbd3 	bl	8003ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002726:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002734:	2303      	movs	r3, #3
 8002736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002738:	230c      	movs	r3, #12
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4619      	mov	r1, r3
 8002742:	484c      	ldr	r0, [pc, #304]	; (8002874 <HAL_SD_MspInit+0x1e8>)
 8002744:	f001 fbc2 	bl	8003ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002748:	2304      	movs	r3, #4
 800274a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002750:	2301      	movs	r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002754:	2303      	movs	r3, #3
 8002756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002758:	230c      	movs	r3, #12
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	4845      	ldr	r0, [pc, #276]	; (8002878 <HAL_SD_MspInit+0x1ec>)
 8002764:	f001 fbb2 	bl	8003ecc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002768:	4b44      	ldr	r3, [pc, #272]	; (800287c <HAL_SD_MspInit+0x1f0>)
 800276a:	4a45      	ldr	r2, [pc, #276]	; (8002880 <HAL_SD_MspInit+0x1f4>)
 800276c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800276e:	4b43      	ldr	r3, [pc, #268]	; (800287c <HAL_SD_MspInit+0x1f0>)
 8002770:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002774:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_SD_MspInit+0x1f0>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277c:	4b3f      	ldr	r3, [pc, #252]	; (800287c <HAL_SD_MspInit+0x1f0>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_SD_MspInit+0x1f0>)
 8002784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002788:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800278a:	4b3c      	ldr	r3, [pc, #240]	; (800287c <HAL_SD_MspInit+0x1f0>)
 800278c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002790:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002792:	4b3a      	ldr	r3, [pc, #232]	; (800287c <HAL_SD_MspInit+0x1f0>)
 8002794:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002798:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800279a:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_SD_MspInit+0x1f0>)
 800279c:	2220      	movs	r2, #32
 800279e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <HAL_SD_MspInit+0x1f0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80027a6:	4b35      	ldr	r3, [pc, #212]	; (800287c <HAL_SD_MspInit+0x1f0>)
 80027a8:	2204      	movs	r2, #4
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80027ac:	4b33      	ldr	r3, [pc, #204]	; (800287c <HAL_SD_MspInit+0x1f0>)
 80027ae:	2203      	movs	r2, #3
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80027b2:	4b32      	ldr	r3, [pc, #200]	; (800287c <HAL_SD_MspInit+0x1f0>)
 80027b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80027ba:	4b30      	ldr	r3, [pc, #192]	; (800287c <HAL_SD_MspInit+0x1f0>)
 80027bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80027c2:	482e      	ldr	r0, [pc, #184]	; (800287c <HAL_SD_MspInit+0x1f0>)
 80027c4:	f000 ffe6 	bl	8003794 <HAL_DMA_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80027ce:	f7ff fe32 	bl	8002436 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a29      	ldr	r2, [pc, #164]	; (800287c <HAL_SD_MspInit+0x1f0>)
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
 80027d8:	4a28      	ldr	r2, [pc, #160]	; (800287c <HAL_SD_MspInit+0x1f0>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80027de:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 80027e0:	4a29      	ldr	r2, [pc, #164]	; (8002888 <HAL_SD_MspInit+0x1fc>)
 80027e2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 80027e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027ea:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 80027ee:	2240      	movs	r2, #64	; 0x40
 80027f0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027f8:	4b22      	ldr	r3, [pc, #136]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 80027fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027fe:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 8002802:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002806:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 800280a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800280e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 8002812:	2220      	movs	r2, #32
 8002814:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 8002818:	2200      	movs	r2, #0
 800281a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 800281e:	2204      	movs	r2, #4
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 8002824:	2203      	movs	r2, #3
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 800282a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 8002832:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002838:	4812      	ldr	r0, [pc, #72]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 800283a:	f000 ffab 	bl	8003794 <HAL_DMA_Init>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002844:	f7ff fdf7 	bl	8002436 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c
 800284e:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <HAL_SD_MspInit+0x1f8>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	2031      	movs	r0, #49	; 0x31
 800285a:	f000 ff64 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800285e:	2031      	movs	r0, #49	; 0x31
 8002860:	f000 ff7d 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002864:	bf00      	nop
 8002866:	3728      	adds	r7, #40	; 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40023800 	.word	0x40023800
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	200006d8 	.word	0x200006d8
 8002880:	40026458 	.word	0x40026458
 8002884:	20001b00 	.word	0x20001b00
 8002888:	400264a0 	.word	0x400264a0

0800288c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <HAL_SPI_MspInit+0x84>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d12c      	bne.n	8002908 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_SPI_MspInit+0x88>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a17      	ldr	r2, [pc, #92]	; (8002914 <HAL_SPI_MspInit+0x88>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_SPI_MspInit+0x88>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_SPI_MspInit+0x88>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_SPI_MspInit+0x88>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_SPI_MspInit+0x88>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028e6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80028ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028f8:	2305      	movs	r3, #5
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4619      	mov	r1, r3
 8002902:	4805      	ldr	r0, [pc, #20]	; (8002918 <HAL_SPI_MspInit+0x8c>)
 8002904:	f001 fae2 	bl	8003ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002908:	bf00      	nop
 800290a:	3728      	adds	r7, #40	; 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40003800 	.word	0x40003800
 8002914:	40023800 	.word	0x40023800
 8002918:	40020400 	.word	0x40020400

0800291c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293c:	d12b      	bne.n	8002996 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_TIM_Encoder_MspInit+0x84>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin;
 8002976:	2303      	movs	r3, #3
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002986:	2301      	movs	r3, #1
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	4804      	ldr	r0, [pc, #16]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002992:	f001 fa9b 	bl	8003ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3728      	adds	r7, #40	; 0x28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020000 	.word	0x40020000

080029a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <HAL_TIM_Base_MspInit+0x48>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d115      	bne.n	80029e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <HAL_TIM_Base_MspInit+0x4c>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4a0c      	ldr	r2, [pc, #48]	; (80029f4 <HAL_TIM_Base_MspInit+0x4c>)
 80029c4:	f043 0310 	orr.w	r3, r3, #16
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_TIM_Base_MspInit+0x4c>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	2036      	movs	r0, #54	; 0x36
 80029dc:	f000 fea3 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029e0:	2036      	movs	r0, #54	; 0x36
 80029e2:	f000 febc 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40001000 	.word	0x40001000
 80029f4:	40023800 	.word	0x40023800

080029f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a0a:	e7fe      	b.n	8002a0a <HardFault_Handler+0x4>

08002a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <MemManage_Handler+0x4>

08002a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a16:	e7fe      	b.n	8002a16 <BusFault_Handler+0x4>

08002a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <UsageFault_Handler+0x4>

08002a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


	SystemTick += TICK_RATE; // 1 ms tick count
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <SysTick_Handler+0x40>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <SysTick_Handler+0x40>)
 8002a54:	6013      	str	r3, [r2, #0]

			  __unix_ms += TICK_RATE;
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <SysTick_Handler+0x44>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <SysTick_Handler+0x44>)
 8002a5e:	6013      	str	r3, [r2, #0]

			  if (__unix_ms >= 1000)
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <SysTick_Handler+0x44>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a68:	d30a      	bcc.n	8002a80 <SysTick_Handler+0x38>
			  {
			    __unix_ms -= 1000;
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <SysTick_Handler+0x44>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002a72:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <SysTick_Handler+0x44>)
 8002a74:	6013      	str	r3, [r2, #0]
			    __unix_sec++;
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <SysTick_Handler+0x48>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <SysTick_Handler+0x48>)
 8002a7e:	6013      	str	r3, [r2, #0]
			  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a80:	f000 f94a 	bl	8002d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000270 	.word	0x20000270
 8002a8c:	20000274 	.word	0x20000274
 8002a90:	20000278 	.word	0x20000278

08002a94 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <SDIO_IRQHandler+0x10>)
 8002a9a:	f002 fabd 	bl	8005018 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20001bc0 	.word	0x20001bc0

08002aa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <TIM6_DAC_IRQHandler+0x10>)
 8002aae:	f004 f9b3 	bl	8006e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20001b60 	.word	0x20001b60

08002abc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <DMA2_Stream0_IRQHandler+0x10>)
 8002ac2:	f000 ff8f 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20001a70 	.word	0x20001a70

08002ad0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <DMA2_Stream3_IRQHandler+0x10>)
 8002ad6:	f000 ff85 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200006d8 	.word	0x200006d8

08002ae4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <DMA2_Stream6_IRQHandler+0x10>)
 8002aea:	f000 ff7b 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20001b00 	.word	0x20001b00

08002af8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e00a      	b.n	8002b20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b0a:	f3af 8000 	nop.w
 8002b0e:	4601      	mov	r1, r0
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	60ba      	str	r2, [r7, #8]
 8002b16:	b2ca      	uxtb	r2, r1
 8002b18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	dbf0      	blt.n	8002b0a <_read+0x12>
	}

return len;
 8002b28:	687b      	ldr	r3, [r7, #4]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
	return -1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <_isatty>:

int _isatty(int file)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
	return 1;
 8002b72:	2301      	movs	r3, #1
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <_sbrk+0x50>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <_sbrk+0x16>
		heap_end = &end;
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <_sbrk+0x50>)
 8002bae:	4a10      	ldr	r2, [pc, #64]	; (8002bf0 <_sbrk+0x54>)
 8002bb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <_sbrk+0x50>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <_sbrk+0x50>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	466a      	mov	r2, sp
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d907      	bls.n	8002bd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bc6:	f008 fdf9 	bl	800b7bc <__errno>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	230c      	movs	r3, #12
 8002bce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd4:	e006      	b.n	8002be4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <_sbrk+0x50>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	4a03      	ldr	r2, [pc, #12]	; (8002bec <_sbrk+0x50>)
 8002be0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002be2:	68fb      	ldr	r3, [r7, #12]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	2000028c 	.word	0x2000028c
 8002bf0:	20006e00 	.word	0x20006e00

08002bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <SystemInit+0x28>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <SystemInit+0x28>)
 8002c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <SystemInit+0x28>)
 8002c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c0e:	609a      	str	r2, [r3, #8]
#endif
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c26:	e003      	b.n	8002c30 <LoopCopyDataInit>

08002c28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c2e:	3104      	adds	r1, #4

08002c30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c30:	480b      	ldr	r0, [pc, #44]	; (8002c60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c38:	d3f6      	bcc.n	8002c28 <CopyDataInit>
  ldr  r2, =_sbss
 8002c3a:	4a0b      	ldr	r2, [pc, #44]	; (8002c68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c3c:	e002      	b.n	8002c44 <LoopFillZerobss>

08002c3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c40:	f842 3b04 	str.w	r3, [r2], #4

08002c44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c48:	d3f9      	bcc.n	8002c3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c4a:	f7ff ffd3 	bl	8002bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c4e:	f008 fdbb 	bl	800b7c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c52:	f7fe fdcb 	bl	80017ec <main>
  bx  lr    
 8002c56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c5c:	0800eb50 	.word	0x0800eb50
  ldr  r0, =_sdata
 8002c60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c64:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 8002c68:	20000254 	.word	0x20000254
  ldr  r3, = _ebss
 8002c6c:	20006e00 	.word	0x20006e00

08002c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c70:	e7fe      	b.n	8002c70 <ADC_IRQHandler>
	...

08002c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_Init+0x40>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <HAL_Init+0x40>)
 8002c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_Init+0x40>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <HAL_Init+0x40>)
 8002c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_Init+0x40>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <HAL_Init+0x40>)
 8002c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c9c:	2003      	movs	r0, #3
 8002c9e:	f000 fd37 	bl	8003710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f000 f808 	bl	8002cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ca8:	f7ff fc18 	bl	80024dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00

08002cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_InitTick+0x54>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_InitTick+0x58>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fd4f 	bl	800377a <HAL_SYSTICK_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00e      	b.n	8002d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b0f      	cmp	r3, #15
 8002cea:	d80a      	bhi.n	8002d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cec:	2200      	movs	r2, #0
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f000 fd17 	bl	8003726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cf8:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <HAL_InitTick+0x5c>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e000      	b.n	8002d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000078 	.word	0x20000078
 8002d10:	20000080 	.word	0x20000080
 8002d14:	2000007c 	.word	0x2000007c

08002d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_IncTick+0x20>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x24>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <HAL_IncTick+0x24>)
 8002d2a:	6013      	str	r3, [r2, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000080 	.word	0x20000080
 8002d3c:	20004d88 	.word	0x20004d88

08002d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return uwTick;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_GetTick+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20004d88 	.word	0x20004d88

08002d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d60:	f7ff ffee 	bl	8002d40 <HAL_GetTick>
 8002d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d005      	beq.n	8002d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_Delay+0x40>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d7e:	bf00      	nop
 8002d80:	f7ff ffde 	bl	8002d40 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d8f7      	bhi.n	8002d80 <HAL_Delay+0x28>
  {
  }
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000080 	.word	0x20000080

08002d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e033      	b.n	8002e1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fbb6 	bl	800252c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d118      	bne.n	8002e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002de2:	f023 0302 	bic.w	r3, r3, #2
 8002de6:	f043 0202 	orr.w	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa40 	bl	8003274 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
 8002e0a:	e001      	b.n	8002e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_Start_DMA+0x1e>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e0cc      	b.n	8002fdc <HAL_ADC_Start_DMA+0x1b8>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d018      	beq.n	8002e8a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e68:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <HAL_ADC_Start_DMA+0x1c0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5e      	ldr	r2, [pc, #376]	; (8002fe8 <HAL_ADC_Start_DMA+0x1c4>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0c9a      	lsrs	r2, r3, #18
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e7c:	e002      	b.n	8002e84 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f9      	bne.n	8002e7e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	f040 80a0 	bne.w	8002fda <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ec4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	d106      	bne.n	8002ee8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f023 0206 	bic.w	r2, r3, #6
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	645a      	str	r2, [r3, #68]	; 0x44
 8002ee6:	e002      	b.n	8002eee <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef6:	4b3d      	ldr	r3, [pc, #244]	; (8002fec <HAL_ADC_Start_DMA+0x1c8>)
 8002ef8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	4a3c      	ldr	r2, [pc, #240]	; (8002ff0 <HAL_ADC_Start_DMA+0x1cc>)
 8002f00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <HAL_ADC_Start_DMA+0x1d0>)
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <HAL_ADC_Start_DMA+0x1d4>)
 8002f10:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f2a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	334c      	adds	r3, #76	; 0x4c
 8002f46:	4619      	mov	r1, r3
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f000 fcd0 	bl	80038f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d12a      	bne.n	8002fb2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a26      	ldr	r2, [pc, #152]	; (8002ffc <HAL_ADC_Start_DMA+0x1d8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d015      	beq.n	8002f92 <HAL_ADC_Start_DMA+0x16e>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a25      	ldr	r2, [pc, #148]	; (8003000 <HAL_ADC_Start_DMA+0x1dc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d105      	bne.n	8002f7c <HAL_ADC_Start_DMA+0x158>
 8002f70:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <HAL_ADC_Start_DMA+0x1c8>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a20      	ldr	r2, [pc, #128]	; (8003004 <HAL_ADC_Start_DMA+0x1e0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d129      	bne.n	8002fda <HAL_ADC_Start_DMA+0x1b6>
 8002f86:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_ADC_Start_DMA+0x1c8>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	d823      	bhi.n	8002fda <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d11c      	bne.n	8002fda <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	e013      	b.n	8002fda <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <HAL_ADC_Start_DMA+0x1d8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d10e      	bne.n	8002fda <HAL_ADC_Start_DMA+0x1b6>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fd8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000078 	.word	0x20000078
 8002fe8:	431bde83 	.word	0x431bde83
 8002fec:	40012300 	.word	0x40012300
 8002ff0:	0800346d 	.word	0x0800346d
 8002ff4:	08003527 	.word	0x08003527
 8002ff8:	08003543 	.word	0x08003543
 8002ffc:	40012000 	.word	0x40012000
 8003000:	40012100 	.word	0x40012100
 8003004:	40012200 	.word	0x40012200

08003008 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1c>
 8003048:	2302      	movs	r3, #2
 800304a:	e105      	b.n	8003258 <HAL_ADC_ConfigChannel+0x228>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b09      	cmp	r3, #9
 800305a:	d925      	bls.n	80030a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68d9      	ldr	r1, [r3, #12]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	3b1e      	subs	r3, #30
 8003072:	2207      	movs	r2, #7
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43da      	mvns	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	400a      	ands	r2, r1
 8003080:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68d9      	ldr	r1, [r3, #12]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	4618      	mov	r0, r3
 8003094:	4603      	mov	r3, r0
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4403      	add	r3, r0
 800309a:	3b1e      	subs	r3, #30
 800309c:	409a      	lsls	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	e022      	b.n	80030ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6919      	ldr	r1, [r3, #16]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	2207      	movs	r2, #7
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	400a      	ands	r2, r1
 80030ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6919      	ldr	r1, [r3, #16]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4618      	mov	r0, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4403      	add	r3, r0
 80030e4:	409a      	lsls	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d824      	bhi.n	8003140 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	3b05      	subs	r3, #5
 8003108:	221f      	movs	r2, #31
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43da      	mvns	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	400a      	ands	r2, r1
 8003116:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	4618      	mov	r0, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	3b05      	subs	r3, #5
 8003132:	fa00 f203 	lsl.w	r2, r0, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	635a      	str	r2, [r3, #52]	; 0x34
 800313e:	e04c      	b.n	80031da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d824      	bhi.n	8003192 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	3b23      	subs	r3, #35	; 0x23
 800315a:	221f      	movs	r2, #31
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43da      	mvns	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	400a      	ands	r2, r1
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	4618      	mov	r0, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	3b23      	subs	r3, #35	; 0x23
 8003184:	fa00 f203 	lsl.w	r2, r0, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
 8003190:	e023      	b.n	80031da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	3b41      	subs	r3, #65	; 0x41
 80031a4:	221f      	movs	r2, #31
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	400a      	ands	r2, r1
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4618      	mov	r0, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b41      	subs	r3, #65	; 0x41
 80031ce:	fa00 f203 	lsl.w	r2, r0, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031da:	4b22      	ldr	r3, [pc, #136]	; (8003264 <HAL_ADC_ConfigChannel+0x234>)
 80031dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a21      	ldr	r2, [pc, #132]	; (8003268 <HAL_ADC_ConfigChannel+0x238>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d109      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1cc>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b12      	cmp	r3, #18
 80031ee:	d105      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <HAL_ADC_ConfigChannel+0x238>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d123      	bne.n	800324e <HAL_ADC_ConfigChannel+0x21e>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b10      	cmp	r3, #16
 800320c:	d003      	beq.n	8003216 <HAL_ADC_ConfigChannel+0x1e6>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b11      	cmp	r3, #17
 8003214:	d11b      	bne.n	800324e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b10      	cmp	r3, #16
 8003228:	d111      	bne.n	800324e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <HAL_ADC_ConfigChannel+0x23c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a10      	ldr	r2, [pc, #64]	; (8003270 <HAL_ADC_ConfigChannel+0x240>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	0c9a      	lsrs	r2, r3, #18
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003240:	e002      	b.n	8003248 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3b01      	subs	r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f9      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40012300 	.word	0x40012300
 8003268:	40012000 	.word	0x40012000
 800326c:	20000078 	.word	0x20000078
 8003270:	431bde83 	.word	0x431bde83

08003274 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800327c:	4b79      	ldr	r3, [pc, #484]	; (8003464 <ADC_Init+0x1f0>)
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	431a      	orrs	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	021a      	lsls	r2, r3, #8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6899      	ldr	r1, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	4a58      	ldr	r2, [pc, #352]	; (8003468 <ADC_Init+0x1f4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d022      	beq.n	8003352 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800331a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800333c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	e00f      	b.n	8003372 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003370:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0202 	bic.w	r2, r2, #2
 8003380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6899      	ldr	r1, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7e1b      	ldrb	r3, [r3, #24]
 800338c:	005a      	lsls	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	3b01      	subs	r3, #1
 80033cc:	035a      	lsls	r2, r3, #13
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	e007      	b.n	80033e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	3b01      	subs	r3, #1
 8003404:	051a      	lsls	r2, r3, #20
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800341c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6899      	ldr	r1, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800342a:	025a      	lsls	r2, r3, #9
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003442:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6899      	ldr	r1, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	029a      	lsls	r2, r3, #10
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40012300 	.word	0x40012300
 8003468:	0f000001 	.word	0x0f000001

0800346c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003482:	2b00      	cmp	r3, #0
 8003484:	d13c      	bne.n	8003500 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d12b      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d127      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d119      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0220 	bic.w	r2, r2, #32
 80034d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7fe f919 	bl	8001730 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034fe:	e00e      	b.n	800351e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7ff fd85 	bl	800301c <HAL_ADC_ErrorCallback>
}
 8003512:	e004      	b.n	800351e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f7ff fd67 	bl	8003008 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2240      	movs	r2, #64	; 0x40
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f043 0204 	orr.w	r2, r3, #4
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff fd5a 	bl	800301c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <__NVIC_SetPriorityGrouping>:
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800359c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a2:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_GetPriorityGrouping>:
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <__NVIC_GetPriorityGrouping+0x18>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	f003 0307 	and.w	r3, r3, #7
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <__NVIC_EnableIRQ>:
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	db0b      	blt.n	80035fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	4907      	ldr	r1, [pc, #28]	; (800360c <__NVIC_EnableIRQ+0x38>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2001      	movs	r0, #1
 80035f6:	fa00 f202 	lsl.w	r2, r0, r2
 80035fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000e100 	.word	0xe000e100

08003610 <__NVIC_SetPriority>:
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	2b00      	cmp	r3, #0
 8003622:	db0a      	blt.n	800363a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	b2da      	uxtb	r2, r3
 8003628:	490c      	ldr	r1, [pc, #48]	; (800365c <__NVIC_SetPriority+0x4c>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	440b      	add	r3, r1
 8003634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003638:	e00a      	b.n	8003650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4908      	ldr	r1, [pc, #32]	; (8003660 <__NVIC_SetPriority+0x50>)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	3b04      	subs	r3, #4
 8003648:	0112      	lsls	r2, r2, #4
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	440b      	add	r3, r1
 800364e:	761a      	strb	r2, [r3, #24]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000e100 	.word	0xe000e100
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <NVIC_EncodePriority>:
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f1c3 0307 	rsb	r3, r3, #7
 800367e:	2b04      	cmp	r3, #4
 8003680:	bf28      	it	cs
 8003682:	2304      	movcs	r3, #4
 8003684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3304      	adds	r3, #4
 800368a:	2b06      	cmp	r3, #6
 800368c:	d902      	bls.n	8003694 <NVIC_EncodePriority+0x30>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3b03      	subs	r3, #3
 8003692:	e000      	b.n	8003696 <NVIC_EncodePriority+0x32>
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	401a      	ands	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ac:	f04f 31ff 	mov.w	r1, #4294967295
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	43d9      	mvns	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	4313      	orrs	r3, r2
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3724      	adds	r7, #36	; 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <SysTick_Config>:
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036dc:	d301      	bcc.n	80036e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80036de:	2301      	movs	r3, #1
 80036e0:	e00f      	b.n	8003702 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <SysTick_Config+0x40>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ea:	210f      	movs	r1, #15
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f7ff ff8e 	bl	8003610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <SysTick_Config+0x40>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <SysTick_Config+0x40>)
 80036fc:	2207      	movs	r2, #7
 80036fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	e000e010 	.word	0xe000e010

08003710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff29 	bl	8003570 <__NVIC_SetPriorityGrouping>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003738:	f7ff ff3e 	bl	80035b8 <__NVIC_GetPriorityGrouping>
 800373c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7ff ff8e 	bl	8003664 <NVIC_EncodePriority>
 8003748:	4602      	mov	r2, r0
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff5d 	bl	8003610 <__NVIC_SetPriority>
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff31 	bl	80035d4 <__NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffa2 	bl	80036cc <SysTick_Config>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037a0:	f7ff face 	bl	8002d40 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e099      	b.n	80038e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d0:	e00f      	b.n	80037f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037d2:	f7ff fab5 	bl	8002d40 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d908      	bls.n	80037f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2203      	movs	r2, #3
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e078      	b.n	80038e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e8      	bne.n	80037d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4b38      	ldr	r3, [pc, #224]	; (80038ec <HAL_DMA_Init+0x158>)
 800380c:	4013      	ands	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800381e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2b04      	cmp	r3, #4
 800384a:	d107      	bne.n	800385c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	4313      	orrs	r3, r2
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	2b04      	cmp	r3, #4
 8003884:	d117      	bne.n	80038b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fa9d 	bl	8003dd8 <DMA_CheckFifoParam>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038b2:	2301      	movs	r3, #1
 80038b4:	e016      	b.n	80038e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fa54 	bl	8003d6c <DMA_CalcBaseAndBitshift>
 80038c4:	4603      	mov	r3, r0
 80038c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	223f      	movs	r2, #63	; 0x3f
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	f010803f 	.word	0xf010803f

080038f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003906:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_DMA_Start_IT+0x26>
 8003912:	2302      	movs	r3, #2
 8003914:	e040      	b.n	8003998 <HAL_DMA_Start_IT+0xa8>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d12f      	bne.n	800398a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f9e6 	bl	8003d10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	223f      	movs	r2, #63	; 0x3f
 800394a:	409a      	lsls	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0216 	orr.w	r2, r2, #22
 800395e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0208 	orr.w	r2, r2, #8
 8003976:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e005      	b.n	8003996 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d004      	beq.n	80039be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e00c      	b.n	80039d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2205      	movs	r2, #5
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039f0:	4b92      	ldr	r3, [pc, #584]	; (8003c3c <HAL_DMA_IRQHandler+0x258>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a92      	ldr	r2, [pc, #584]	; (8003c40 <HAL_DMA_IRQHandler+0x25c>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0a9b      	lsrs	r3, r3, #10
 80039fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	2208      	movs	r2, #8
 8003a10:	409a      	lsls	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01a      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0204 	bic.w	r2, r2, #4
 8003a36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	2201      	movs	r2, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d012      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2201      	movs	r2, #1
 8003a74:	409a      	lsls	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d012      	beq.n	8003abc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	f043 0204 	orr.w	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d043      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d03c      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	2210      	movs	r2, #16
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d018      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d108      	bne.n	8003b14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d024      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
 8003b12:	e01f      	b.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01b      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	4798      	blx	r3
 8003b24:	e016      	b.n	8003b54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d107      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0208 	bic.w	r2, r2, #8
 8003b42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	2220      	movs	r2, #32
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 808e 	beq.w	8003c82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8086 	beq.w	8003c82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d136      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0216 	bic.w	r2, r2, #22
 8003b9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x1da>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0208 	bic.w	r2, r2, #8
 8003bcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	223f      	movs	r2, #63	; 0x3f
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d07d      	beq.n	8003cee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
        }
        return;
 8003bfa:	e078      	b.n	8003cee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d01c      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d108      	bne.n	8003c2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d030      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
 8003c28:	e02b      	b.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d027      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
 8003c3a:	e022      	b.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
 8003c3c:	20000078 	.word	0x20000078
 8003c40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0210 	bic.w	r2, r2, #16
 8003c60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d032      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d022      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2205      	movs	r2, #5
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d307      	bcc.n	8003cca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f2      	bne.n	8003cae <HAL_DMA_IRQHandler+0x2ca>
 8003cc8:	e000      	b.n	8003ccc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003cca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
 8003cec:	e000      	b.n	8003cf0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003cee:	bf00      	nop
    }
  }
}
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop

08003cf8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d108      	bne.n	8003d50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d4e:	e007      	b.n	8003d60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	60da      	str	r2, [r3, #12]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	3b10      	subs	r3, #16
 8003d7c:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d86:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d909      	bls.n	8003dae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003da2:	f023 0303 	bic.w	r3, r3, #3
 8003da6:	1d1a      	adds	r2, r3, #4
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	659a      	str	r2, [r3, #88]	; 0x58
 8003dac:	e007      	b.n	8003dbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	aaaaaaab 	.word	0xaaaaaaab
 8003dd4:	0800e424 	.word	0x0800e424

08003dd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d11f      	bne.n	8003e32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d855      	bhi.n	8003ea4 <DMA_CheckFifoParam+0xcc>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <DMA_CheckFifoParam+0x28>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003e23 	.word	0x08003e23
 8003e08:	08003e11 	.word	0x08003e11
 8003e0c:	08003ea5 	.word	0x08003ea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d045      	beq.n	8003ea8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e20:	e042      	b.n	8003ea8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e2a:	d13f      	bne.n	8003eac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e30:	e03c      	b.n	8003eac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3a:	d121      	bne.n	8003e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d836      	bhi.n	8003eb0 <DMA_CheckFifoParam+0xd8>
 8003e42:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <DMA_CheckFifoParam+0x70>)
 8003e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e48:	08003e59 	.word	0x08003e59
 8003e4c:	08003e5f 	.word	0x08003e5f
 8003e50:	08003e59 	.word	0x08003e59
 8003e54:	08003e71 	.word	0x08003e71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5c:	e02f      	b.n	8003ebe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d024      	beq.n	8003eb4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e6e:	e021      	b.n	8003eb4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e78:	d11e      	bne.n	8003eb8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e7e:	e01b      	b.n	8003eb8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d902      	bls.n	8003e8c <DMA_CheckFifoParam+0xb4>
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d003      	beq.n	8003e92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e8a:	e018      	b.n	8003ebe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e90:	e015      	b.n	8003ebe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00e      	beq.n	8003ebc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea2:	e00b      	b.n	8003ebc <DMA_CheckFifoParam+0xe4>
      break;
 8003ea4:	bf00      	nop
 8003ea6:	e00a      	b.n	8003ebe <DMA_CheckFifoParam+0xe6>
      break;
 8003ea8:	bf00      	nop
 8003eaa:	e008      	b.n	8003ebe <DMA_CheckFifoParam+0xe6>
      break;
 8003eac:	bf00      	nop
 8003eae:	e006      	b.n	8003ebe <DMA_CheckFifoParam+0xe6>
      break;
 8003eb0:	bf00      	nop
 8003eb2:	e004      	b.n	8003ebe <DMA_CheckFifoParam+0xe6>
      break;
 8003eb4:	bf00      	nop
 8003eb6:	e002      	b.n	8003ebe <DMA_CheckFifoParam+0xe6>
      break;   
 8003eb8:	bf00      	nop
 8003eba:	e000      	b.n	8003ebe <DMA_CheckFifoParam+0xe6>
      break;
 8003ebc:	bf00      	nop
    }
  } 
  
  return status; 
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	; 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	e16b      	b.n	80041c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	f040 815a 	bne.w	80041ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d00b      	beq.n	8003f26 <HAL_GPIO_Init+0x5a>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d007      	beq.n	8003f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f1a:	2b11      	cmp	r3, #17
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b12      	cmp	r3, #18
 8003f24:	d130      	bne.n	8003f88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	2203      	movs	r2, #3
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 0201 	and.w	r2, r3, #1
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	2203      	movs	r2, #3
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d003      	beq.n	8003fc8 <HAL_GPIO_Init+0xfc>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b12      	cmp	r3, #18
 8003fc6:	d123      	bne.n	8004010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	08da      	lsrs	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3208      	adds	r2, #8
 8003fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	220f      	movs	r2, #15
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	08da      	lsrs	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3208      	adds	r2, #8
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	2203      	movs	r2, #3
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 0203 	and.w	r2, r3, #3
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80b4 	beq.w	80041ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <HAL_GPIO_Init+0x308>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	4a5e      	ldr	r2, [pc, #376]	; (80041d4 <HAL_GPIO_Init+0x308>)
 800405c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004060:	6453      	str	r3, [r2, #68]	; 0x44
 8004062:	4b5c      	ldr	r3, [pc, #368]	; (80041d4 <HAL_GPIO_Init+0x308>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800406e:	4a5a      	ldr	r2, [pc, #360]	; (80041d8 <HAL_GPIO_Init+0x30c>)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	089b      	lsrs	r3, r3, #2
 8004074:	3302      	adds	r3, #2
 8004076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	220f      	movs	r2, #15
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4013      	ands	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a51      	ldr	r2, [pc, #324]	; (80041dc <HAL_GPIO_Init+0x310>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02b      	beq.n	80040f2 <HAL_GPIO_Init+0x226>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a50      	ldr	r2, [pc, #320]	; (80041e0 <HAL_GPIO_Init+0x314>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d025      	beq.n	80040ee <HAL_GPIO_Init+0x222>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a4f      	ldr	r2, [pc, #316]	; (80041e4 <HAL_GPIO_Init+0x318>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01f      	beq.n	80040ea <HAL_GPIO_Init+0x21e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a4e      	ldr	r2, [pc, #312]	; (80041e8 <HAL_GPIO_Init+0x31c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d019      	beq.n	80040e6 <HAL_GPIO_Init+0x21a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a4d      	ldr	r2, [pc, #308]	; (80041ec <HAL_GPIO_Init+0x320>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_GPIO_Init+0x216>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a4c      	ldr	r2, [pc, #304]	; (80041f0 <HAL_GPIO_Init+0x324>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00d      	beq.n	80040de <HAL_GPIO_Init+0x212>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a4b      	ldr	r2, [pc, #300]	; (80041f4 <HAL_GPIO_Init+0x328>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d007      	beq.n	80040da <HAL_GPIO_Init+0x20e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a4a      	ldr	r2, [pc, #296]	; (80041f8 <HAL_GPIO_Init+0x32c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d101      	bne.n	80040d6 <HAL_GPIO_Init+0x20a>
 80040d2:	2307      	movs	r3, #7
 80040d4:	e00e      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040d6:	2308      	movs	r3, #8
 80040d8:	e00c      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040da:	2306      	movs	r3, #6
 80040dc:	e00a      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040de:	2305      	movs	r3, #5
 80040e0:	e008      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040e2:	2304      	movs	r3, #4
 80040e4:	e006      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040e6:	2303      	movs	r3, #3
 80040e8:	e004      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e002      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040f2:	2300      	movs	r3, #0
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	f002 0203 	and.w	r2, r2, #3
 80040fa:	0092      	lsls	r2, r2, #2
 80040fc:	4093      	lsls	r3, r2
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004104:	4934      	ldr	r1, [pc, #208]	; (80041d8 <HAL_GPIO_Init+0x30c>)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	3302      	adds	r3, #2
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004112:	4b3a      	ldr	r3, [pc, #232]	; (80041fc <HAL_GPIO_Init+0x330>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004136:	4a31      	ldr	r2, [pc, #196]	; (80041fc <HAL_GPIO_Init+0x330>)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800413c:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <HAL_GPIO_Init+0x330>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004160:	4a26      	ldr	r2, [pc, #152]	; (80041fc <HAL_GPIO_Init+0x330>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004166:	4b25      	ldr	r3, [pc, #148]	; (80041fc <HAL_GPIO_Init+0x330>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800418a:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <HAL_GPIO_Init+0x330>)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004190:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <HAL_GPIO_Init+0x330>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041b4:	4a11      	ldr	r2, [pc, #68]	; (80041fc <HAL_GPIO_Init+0x330>)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3301      	adds	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	f67f ae90 	bls.w	8003ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041c8:	bf00      	nop
 80041ca:	3724      	adds	r7, #36	; 0x24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40013800 	.word	0x40013800
 80041dc:	40020000 	.word	0x40020000
 80041e0:	40020400 	.word	0x40020400
 80041e4:	40020800 	.word	0x40020800
 80041e8:	40020c00 	.word	0x40020c00
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40021400 	.word	0x40021400
 80041f4:	40021800 	.word	0x40021800
 80041f8:	40021c00 	.word	0x40021c00
 80041fc:	40013c00 	.word	0x40013c00

08004200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	887b      	ldrh	r3, [r7, #2]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	e001      	b.n	8004222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004222:	7bfb      	ldrb	r3, [r7, #15]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
 800423c:	4613      	mov	r3, r2
 800423e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004240:	787b      	ldrb	r3, [r7, #1]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004246:	887a      	ldrh	r2, [r7, #2]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800424c:	e003      	b.n	8004256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800424e:	887b      	ldrh	r3, [r7, #2]
 8004250:	041a      	lsls	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	619a      	str	r2, [r3, #24]
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e25b      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d075      	beq.n	800436e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004282:	4ba3      	ldr	r3, [pc, #652]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b04      	cmp	r3, #4
 800428c:	d00c      	beq.n	80042a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800428e:	4ba0      	ldr	r3, [pc, #640]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004296:	2b08      	cmp	r3, #8
 8004298:	d112      	bne.n	80042c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429a:	4b9d      	ldr	r3, [pc, #628]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a6:	d10b      	bne.n	80042c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	4b99      	ldr	r3, [pc, #612]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d05b      	beq.n	800436c <HAL_RCC_OscConfig+0x108>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d157      	bne.n	800436c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e236      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c8:	d106      	bne.n	80042d8 <HAL_RCC_OscConfig+0x74>
 80042ca:	4b91      	ldr	r3, [pc, #580]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a90      	ldr	r2, [pc, #576]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e01d      	b.n	8004314 <HAL_RCC_OscConfig+0xb0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0x98>
 80042e2:	4b8b      	ldr	r3, [pc, #556]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a8a      	ldr	r2, [pc, #552]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b88      	ldr	r3, [pc, #544]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a87      	ldr	r2, [pc, #540]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e00b      	b.n	8004314 <HAL_RCC_OscConfig+0xb0>
 80042fc:	4b84      	ldr	r3, [pc, #528]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a83      	ldr	r2, [pc, #524]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 8004302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	4b81      	ldr	r3, [pc, #516]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a80      	ldr	r2, [pc, #512]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 800430e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d013      	beq.n	8004344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fe fd10 	bl	8002d40 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004324:	f7fe fd0c 	bl	8002d40 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	; 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e1fb      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b76      	ldr	r3, [pc, #472]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0xc0>
 8004342:	e014      	b.n	800436e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fe fcfc 	bl	8002d40 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800434c:	f7fe fcf8 	bl	8002d40 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	; 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1e7      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435e:	4b6c      	ldr	r3, [pc, #432]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0xe8>
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d063      	beq.n	8004442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800437a:	4b65      	ldr	r3, [pc, #404]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004386:	4b62      	ldr	r3, [pc, #392]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800438e:	2b08      	cmp	r3, #8
 8004390:	d11c      	bne.n	80043cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004392:	4b5f      	ldr	r3, [pc, #380]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d116      	bne.n	80043cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	4b5c      	ldr	r3, [pc, #368]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_RCC_OscConfig+0x152>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e1bb      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b6:	4b56      	ldr	r3, [pc, #344]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4952      	ldr	r1, [pc, #328]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	e03a      	b.n	8004442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d020      	beq.n	8004416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d4:	4b4f      	ldr	r3, [pc, #316]	; (8004514 <HAL_RCC_OscConfig+0x2b0>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fe fcb1 	bl	8002d40 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e2:	f7fe fcad 	bl	8002d40 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e19c      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f4:	4b46      	ldr	r3, [pc, #280]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004400:	4b43      	ldr	r3, [pc, #268]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4940      	ldr	r1, [pc, #256]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]
 8004414:	e015      	b.n	8004442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004416:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <HAL_RCC_OscConfig+0x2b0>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fe fc90 	bl	8002d40 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004424:	f7fe fc8c 	bl	8002d40 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e17b      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004436:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d030      	beq.n	80044b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d016      	beq.n	8004484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004456:	4b30      	ldr	r3, [pc, #192]	; (8004518 <HAL_RCC_OscConfig+0x2b4>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fe fc70 	bl	8002d40 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004464:	f7fe fc6c 	bl	8002d40 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e15b      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004476:	4b26      	ldr	r3, [pc, #152]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x200>
 8004482:	e015      	b.n	80044b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004484:	4b24      	ldr	r3, [pc, #144]	; (8004518 <HAL_RCC_OscConfig+0x2b4>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448a:	f7fe fc59 	bl	8002d40 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004492:	f7fe fc55 	bl	8002d40 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e144      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a4:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a0 	beq.w	80045fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10f      	bne.n	80044ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044dc:	6413      	str	r3, [r2, #64]	; 0x40
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ee:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_RCC_OscConfig+0x2b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d121      	bne.n	800453e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044fa:	4b08      	ldr	r3, [pc, #32]	; (800451c <HAL_RCC_OscConfig+0x2b8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a07      	ldr	r2, [pc, #28]	; (800451c <HAL_RCC_OscConfig+0x2b8>)
 8004500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004506:	f7fe fc1b 	bl	8002d40 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	e011      	b.n	8004532 <HAL_RCC_OscConfig+0x2ce>
 800450e:	bf00      	nop
 8004510:	40023800 	.word	0x40023800
 8004514:	42470000 	.word	0x42470000
 8004518:	42470e80 	.word	0x42470e80
 800451c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004520:	f7fe fc0e 	bl	8002d40 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0fd      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004532:	4b81      	ldr	r3, [pc, #516]	; (8004738 <HAL_RCC_OscConfig+0x4d4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d106      	bne.n	8004554 <HAL_RCC_OscConfig+0x2f0>
 8004546:	4b7d      	ldr	r3, [pc, #500]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	4a7c      	ldr	r2, [pc, #496]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	6713      	str	r3, [r2, #112]	; 0x70
 8004552:	e01c      	b.n	800458e <HAL_RCC_OscConfig+0x32a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b05      	cmp	r3, #5
 800455a:	d10c      	bne.n	8004576 <HAL_RCC_OscConfig+0x312>
 800455c:	4b77      	ldr	r3, [pc, #476]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	4a76      	ldr	r2, [pc, #472]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 8004562:	f043 0304 	orr.w	r3, r3, #4
 8004566:	6713      	str	r3, [r2, #112]	; 0x70
 8004568:	4b74      	ldr	r3, [pc, #464]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a73      	ldr	r2, [pc, #460]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
 8004574:	e00b      	b.n	800458e <HAL_RCC_OscConfig+0x32a>
 8004576:	4b71      	ldr	r3, [pc, #452]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	4a70      	ldr	r2, [pc, #448]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	6713      	str	r3, [r2, #112]	; 0x70
 8004582:	4b6e      	ldr	r3, [pc, #440]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a6d      	ldr	r2, [pc, #436]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 8004588:	f023 0304 	bic.w	r3, r3, #4
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d015      	beq.n	80045c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004596:	f7fe fbd3 	bl	8002d40 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459c:	e00a      	b.n	80045b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800459e:	f7fe fbcf 	bl	8002d40 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e0bc      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b4:	4b61      	ldr	r3, [pc, #388]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ee      	beq.n	800459e <HAL_RCC_OscConfig+0x33a>
 80045c0:	e014      	b.n	80045ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fe fbbd 	bl	8002d40 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fe fbb9 	bl	8002d40 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e0a6      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e0:	4b56      	ldr	r3, [pc, #344]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ee      	bne.n	80045ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d105      	bne.n	80045fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f2:	4b52      	ldr	r3, [pc, #328]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	4a51      	ldr	r2, [pc, #324]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 80045f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8092 	beq.w	800472c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004608:	4b4c      	ldr	r3, [pc, #304]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b08      	cmp	r3, #8
 8004612:	d05c      	beq.n	80046ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d141      	bne.n	80046a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461c:	4b48      	ldr	r3, [pc, #288]	; (8004740 <HAL_RCC_OscConfig+0x4dc>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004622:	f7fe fb8d 	bl	8002d40 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800462a:	f7fe fb89 	bl	8002d40 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e078      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463c:	4b3f      	ldr	r3, [pc, #252]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	019b      	lsls	r3, r3, #6
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	3b01      	subs	r3, #1
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	061b      	lsls	r3, r3, #24
 800466c:	4933      	ldr	r1, [pc, #204]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004672:	4b33      	ldr	r3, [pc, #204]	; (8004740 <HAL_RCC_OscConfig+0x4dc>)
 8004674:	2201      	movs	r2, #1
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fe fb62 	bl	8002d40 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004680:	f7fe fb5e 	bl	8002d40 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e04d      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004692:	4b2a      	ldr	r3, [pc, #168]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x41c>
 800469e:	e045      	b.n	800472c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <HAL_RCC_OscConfig+0x4dc>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a6:	f7fe fb4b 	bl	8002d40 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ae:	f7fe fb47 	bl	8002d40 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e036      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c0:	4b1e      	ldr	r3, [pc, #120]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f0      	bne.n	80046ae <HAL_RCC_OscConfig+0x44a>
 80046cc:	e02e      	b.n	800472c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e029      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046da:	4b18      	ldr	r3, [pc, #96]	; (800473c <HAL_RCC_OscConfig+0x4d8>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d11c      	bne.n	8004728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d115      	bne.n	8004728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004702:	4013      	ands	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004708:	4293      	cmp	r3, r2
 800470a:	d10d      	bne.n	8004728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d106      	bne.n	8004728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40007000 	.word	0x40007000
 800473c:	40023800 	.word	0x40023800
 8004740:	42470060 	.word	0x42470060

08004744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0cc      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004758:	4b68      	ldr	r3, [pc, #416]	; (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d90c      	bls.n	8004780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b65      	ldr	r3, [pc, #404]	; (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	4b63      	ldr	r3, [pc, #396]	; (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0b8      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004798:	4b59      	ldr	r3, [pc, #356]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	4a58      	ldr	r2, [pc, #352]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b0:	4b53      	ldr	r3, [pc, #332]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4a52      	ldr	r2, [pc, #328]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047bc:	4b50      	ldr	r3, [pc, #320]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	494d      	ldr	r1, [pc, #308]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d044      	beq.n	8004864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e2:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d119      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e07f      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d003      	beq.n	8004802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d107      	bne.n	8004812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004802:	4b3f      	ldr	r3, [pc, #252]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e06f      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004812:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e067      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004822:	4b37      	ldr	r3, [pc, #220]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f023 0203 	bic.w	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4934      	ldr	r1, [pc, #208]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	4313      	orrs	r3, r2
 8004832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004834:	f7fe fa84 	bl	8002d40 <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483a:	e00a      	b.n	8004852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800483c:	f7fe fa80 	bl	8002d40 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f241 3288 	movw	r2, #5000	; 0x1388
 800484a:	4293      	cmp	r3, r2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e04f      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004852:	4b2b      	ldr	r3, [pc, #172]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 020c 	and.w	r2, r3, #12
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	429a      	cmp	r2, r3
 8004862:	d1eb      	bne.n	800483c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d20c      	bcs.n	800488c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b22      	ldr	r3, [pc, #136]	; (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b20      	ldr	r3, [pc, #128]	; (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e032      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004898:	4b19      	ldr	r3, [pc, #100]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4916      	ldr	r1, [pc, #88]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b6:	4b12      	ldr	r3, [pc, #72]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	490e      	ldr	r1, [pc, #56]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048ca:	f000 f889 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 80048ce:	4601      	mov	r1, r0
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	5cd3      	ldrb	r3, [r2, r3]
 80048de:	fa21 f303 	lsr.w	r3, r1, r3
 80048e2:	4a09      	ldr	r2, [pc, #36]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_RCC_ClockConfig+0x1c8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe f9e4 	bl	8002cb8 <HAL_InitTick>

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023c00 	.word	0x40023c00
 8004900:	40023800 	.word	0x40023800
 8004904:	0800e414 	.word	0x0800e414
 8004908:	20000078 	.word	0x20000078
 800490c:	2000007c 	.word	0x2000007c

08004910 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08c      	sub	sp, #48	; 0x30
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d129      	bne.n	8004976 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCC_MCOConfig+0xc4>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <HAL_RCC_MCOConfig+0xc4>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6313      	str	r3, [r2, #48]	; 0x30
 8004932:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <HAL_RCC_MCOConfig+0xc4>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800493e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004944:	2302      	movs	r3, #2
 8004946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004948:	2303      	movs	r3, #3
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494c:	2300      	movs	r3, #0
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004950:	2300      	movs	r3, #0
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004954:	f107 031c 	add.w	r3, r7, #28
 8004958:	4619      	mov	r1, r3
 800495a:	481f      	ldr	r0, [pc, #124]	; (80049d8 <HAL_RCC_MCOConfig+0xc8>)
 800495c:	f7ff fab6 	bl	8003ecc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004960:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <HAL_RCC_MCOConfig+0xc4>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	430b      	orrs	r3, r1
 800496e:	4919      	ldr	r1, [pc, #100]	; (80049d4 <HAL_RCC_MCOConfig+0xc4>)
 8004970:	4313      	orrs	r3, r2
 8004972:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004974:	e029      	b.n	80049ca <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	4b16      	ldr	r3, [pc, #88]	; (80049d4 <HAL_RCC_MCOConfig+0xc4>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <HAL_RCC_MCOConfig+0xc4>)
 8004980:	f043 0304 	orr.w	r3, r3, #4
 8004984:	6313      	str	r3, [r2, #48]	; 0x30
 8004986:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <HAL_RCC_MCOConfig+0xc4>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004998:	2302      	movs	r3, #2
 800499a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800499c:	2303      	movs	r3, #3
 800499e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80049a4:	2300      	movs	r3, #0
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80049a8:	f107 031c 	add.w	r3, r7, #28
 80049ac:	4619      	mov	r1, r3
 80049ae:	480b      	ldr	r0, [pc, #44]	; (80049dc <HAL_RCC_MCOConfig+0xcc>)
 80049b0:	f7ff fa8c 	bl	8003ecc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <HAL_RCC_MCOConfig+0xc4>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	00d9      	lsls	r1, r3, #3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	430b      	orrs	r3, r1
 80049c4:	4903      	ldr	r1, [pc, #12]	; (80049d4 <HAL_RCC_MCOConfig+0xc4>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
}
 80049ca:	bf00      	nop
 80049cc:	3730      	adds	r7, #48	; 0x30
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40020000 	.word	0x40020000
 80049dc:	40020800 	.word	0x40020800

080049e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	2300      	movs	r3, #0
 80049f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f6:	4b50      	ldr	r3, [pc, #320]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x158>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d007      	beq.n	8004a12 <HAL_RCC_GetSysClockFreq+0x32>
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d008      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x38>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 808d 	bne.w	8004b26 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a0c:	4b4b      	ldr	r3, [pc, #300]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a0e:	60bb      	str	r3, [r7, #8]
       break;
 8004a10:	e08c      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a12:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a14:	60bb      	str	r3, [r7, #8]
      break;
 8004a16:	e089      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a18:	4b47      	ldr	r3, [pc, #284]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a22:	4b45      	ldr	r3, [pc, #276]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d023      	beq.n	8004a76 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2e:	4b42      	ldr	r3, [pc, #264]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	f04f 0400 	mov.w	r4, #0
 8004a38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	ea03 0501 	and.w	r5, r3, r1
 8004a44:	ea04 0602 	and.w	r6, r4, r2
 8004a48:	4a3d      	ldr	r2, [pc, #244]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a4a:	fb02 f106 	mul.w	r1, r2, r6
 8004a4e:	2200      	movs	r2, #0
 8004a50:	fb02 f205 	mul.w	r2, r2, r5
 8004a54:	440a      	add	r2, r1
 8004a56:	493a      	ldr	r1, [pc, #232]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a58:	fba5 0101 	umull	r0, r1, r5, r1
 8004a5c:	1853      	adds	r3, r2, r1
 8004a5e:	4619      	mov	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f04f 0400 	mov.w	r4, #0
 8004a66:	461a      	mov	r2, r3
 8004a68:	4623      	mov	r3, r4
 8004a6a:	f7fc f8ed 	bl	8000c48 <__aeabi_uldivmod>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	460c      	mov	r4, r1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	e049      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a76:	4b30      	ldr	r3, [pc, #192]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	099b      	lsrs	r3, r3, #6
 8004a7c:	f04f 0400 	mov.w	r4, #0
 8004a80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	ea03 0501 	and.w	r5, r3, r1
 8004a8c:	ea04 0602 	and.w	r6, r4, r2
 8004a90:	4629      	mov	r1, r5
 8004a92:	4632      	mov	r2, r6
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	f04f 0400 	mov.w	r4, #0
 8004a9c:	0154      	lsls	r4, r2, #5
 8004a9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aa2:	014b      	lsls	r3, r1, #5
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4622      	mov	r2, r4
 8004aa8:	1b49      	subs	r1, r1, r5
 8004aaa:	eb62 0206 	sbc.w	r2, r2, r6
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	f04f 0400 	mov.w	r4, #0
 8004ab6:	0194      	lsls	r4, r2, #6
 8004ab8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004abc:	018b      	lsls	r3, r1, #6
 8004abe:	1a5b      	subs	r3, r3, r1
 8004ac0:	eb64 0402 	sbc.w	r4, r4, r2
 8004ac4:	f04f 0100 	mov.w	r1, #0
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	00e2      	lsls	r2, r4, #3
 8004ace:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ad2:	00d9      	lsls	r1, r3, #3
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4614      	mov	r4, r2
 8004ad8:	195b      	adds	r3, r3, r5
 8004ada:	eb44 0406 	adc.w	r4, r4, r6
 8004ade:	f04f 0100 	mov.w	r1, #0
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	02a2      	lsls	r2, r4, #10
 8004ae8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004aec:	0299      	lsls	r1, r3, #10
 8004aee:	460b      	mov	r3, r1
 8004af0:	4614      	mov	r4, r2
 8004af2:	4618      	mov	r0, r3
 8004af4:	4621      	mov	r1, r4
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f04f 0400 	mov.w	r4, #0
 8004afc:	461a      	mov	r2, r3
 8004afe:	4623      	mov	r3, r4
 8004b00:	f7fc f8a2 	bl	8000c48 <__aeabi_uldivmod>
 8004b04:	4603      	mov	r3, r0
 8004b06:	460c      	mov	r4, r1
 8004b08:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b0a:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	0c1b      	lsrs	r3, r3, #16
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	3301      	adds	r3, #1
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	60bb      	str	r3, [r7, #8]
      break;
 8004b24:	e002      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004b28:	60bb      	str	r3, [r7, #8]
      break;
 8004b2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	017d7840 	.word	0x017d7840

08004b44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e022      	b.n	8004b9c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7fd fd8f 	bl	800268c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2203      	movs	r2, #3
 8004b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f814 	bl	8004ba4 <HAL_SD_InitCard>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e00a      	b.n	8004b9c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004ba4:	b5b0      	push	{r4, r5, r7, lr}
 8004ba6:	b08e      	sub	sp, #56	; 0x38
 8004ba8:	af04      	add	r7, sp, #16
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004bc0:	2376      	movs	r3, #118	; 0x76
 8004bc2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681d      	ldr	r5, [r3, #0]
 8004bc8:	466c      	mov	r4, sp
 8004bca:	f107 0314 	add.w	r3, r7, #20
 8004bce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004bd6:	f107 0308 	add.w	r3, r7, #8
 8004bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f002 fba1 	bl	8007324 <SDIO_Init>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e031      	b.n	8004c58 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <HAL_SD_InitCard+0xbc>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f002 fbd9 	bl	80073b6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004c04:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <HAL_SD_InitCard+0xbc>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 ffdc 	bl	8005bc8 <SD_PowerON>
 8004c10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00b      	beq.n	8004c30 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e013      	b.n	8004c58 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fefb 	bl	8005a2c <SD_InitCard>
 8004c36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3728      	adds	r7, #40	; 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c60:	422580a0 	.word	0x422580a0

08004c64 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	; 0x30
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d107      	bne.n	8004c8c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0c9      	b.n	8004e20 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	f040 80c2 	bne.w	8004e1e <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d907      	bls.n	8004cbe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0b0      	b.n	8004e20 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004cdc:	f043 0302 	orr.w	r3, r3, #2
 8004ce0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	4a50      	ldr	r2, [pc, #320]	; (8004e28 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8004ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	4a4f      	ldr	r2, [pc, #316]	; (8004e2c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8004cf0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3380      	adds	r3, #128	; 0x80
 8004d04:	4619      	mov	r1, r3
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	025b      	lsls	r3, r3, #9
 8004d0c:	089b      	lsrs	r3, r3, #2
 8004d0e:	f7fe fdef 	bl	80038f0 <HAL_DMA_Start_IT>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d017      	beq.n	8004d48 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004d26:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a40      	ldr	r2, [pc, #256]	; (8004e30 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e06b      	b.n	8004e20 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004d48:	4b3a      	ldr	r3, [pc, #232]	; (8004e34 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d002      	beq.n	8004d5c <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	025b      	lsls	r3, r3, #9
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d64:	4618      	mov	r0, r3
 8004d66:	f002 fbb9 	bl	80074dc <SDMMC_CmdBlockLength>
 8004d6a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00f      	beq.n	8004d92 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a2e      	ldr	r2, [pc, #184]	; (8004e30 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e046      	b.n	8004e20 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d92:	f04f 33ff 	mov.w	r3, #4294967295
 8004d96:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	025b      	lsls	r3, r3, #9
 8004d9c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004d9e:	2390      	movs	r3, #144	; 0x90
 8004da0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004da2:	2302      	movs	r3, #2
 8004da4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004daa:	2301      	movs	r3, #1
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f107 0210 	add.w	r2, r7, #16
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f002 fb63 	bl	8007484 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d90a      	bls.n	8004dda <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2282      	movs	r2, #130	; 0x82
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f002 fbc7 	bl	8007564 <SDMMC_CmdReadMultiBlock>
 8004dd6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004dd8:	e009      	b.n	8004dee <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2281      	movs	r2, #129	; 0x81
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de6:	4618      	mov	r0, r3
 8004de8:	f002 fb9a 	bl	8007520 <SDMMC_CmdReadSingleBlock>
 8004dec:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d012      	beq.n	8004e1a <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a0d      	ldr	r2, [pc, #52]	; (8004e30 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	431a      	orrs	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e002      	b.n	8004e20 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e000      	b.n	8004e20 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8004e1e:	2302      	movs	r3, #2
  }
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3730      	adds	r7, #48	; 0x30
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	0800583b 	.word	0x0800583b
 8004e2c:	080058ad 	.word	0x080058ad
 8004e30:	004005ff 	.word	0x004005ff
 8004e34:	4225858c 	.word	0x4225858c

08004e38 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08c      	sub	sp, #48	; 0x30
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d107      	bne.n	8004e60 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0ce      	b.n	8004ffe <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f040 80c7 	bne.w	8004ffc <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	441a      	add	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d907      	bls.n	8004e92 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e0b5      	b.n	8004ffe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2203      	movs	r2, #3
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eba:	4a53      	ldr	r2, [pc, #332]	; (8005008 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8004ebc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec2:	4a52      	ldr	r2, [pc, #328]	; (800500c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8004ec4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eca:	2200      	movs	r2, #0
 8004ecc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d002      	beq.n	8004edc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	025b      	lsls	r3, r3, #9
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f002 faf9 	bl	80074dc <SDMMC_CmdBlockLength>
 8004eea:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00f      	beq.n	8004f12 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a46      	ldr	r2, [pc, #280]	; (8005010 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004ef8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e075      	b.n	8004ffe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d90a      	bls.n	8004f2e <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	22a0      	movs	r2, #160	; 0xa0
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f24:	4618      	mov	r0, r3
 8004f26:	f002 fb61 	bl	80075ec <SDMMC_CmdWriteMultiBlock>
 8004f2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004f2c:	e009      	b.n	8004f42 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2290      	movs	r2, #144	; 0x90
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f002 fb34 	bl	80075a8 <SDMMC_CmdWriteSingleBlock>
 8004f40:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d012      	beq.n	8004f6e <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a30      	ldr	r2, [pc, #192]	; (8005010 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	431a      	orrs	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e047      	b.n	8004ffe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004f6e:	4b29      	ldr	r3, [pc, #164]	; (8005014 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3380      	adds	r3, #128	; 0x80
 8004f80:	461a      	mov	r2, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	025b      	lsls	r3, r3, #9
 8004f86:	089b      	lsrs	r3, r3, #2
 8004f88:	f7fe fcb2 	bl	80038f0 <HAL_DMA_Start_IT>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01c      	beq.n	8004fcc <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004fa0:	f023 0302 	bic.w	r3, r3, #2
 8004fa4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a19      	ldr	r2, [pc, #100]	; (8005010 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004fac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e018      	b.n	8004ffe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	025b      	lsls	r3, r3, #9
 8004fd6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004fd8:	2390      	movs	r3, #144	; 0x90
 8004fda:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f107 0210 	add.w	r2, r7, #16
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f002 fa46 	bl	8007484 <SDIO_ConfigData>

      return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3730      	adds	r7, #48	; 0x30
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	08005811 	.word	0x08005811
 800500c:	080058ad 	.word	0x080058ad
 8005010:	004005ff 	.word	0x004005ff
 8005014:	4225858c 	.word	0x4225858c

08005018 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d008      	beq.n	8005046 <HAL_SD_IRQHandler+0x2e>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 ffd8 	bl	8005ff4 <SD_Read_IT>
 8005044:	e165      	b.n	8005312 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 808f 	beq.w	8005174 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800505e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800506e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005072:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0201 	bic.w	r2, r2, #1
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d039      	beq.n	8005102 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d104      	bne.n	80050a2 <HAL_SD_IRQHandler+0x8a>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d011      	beq.n	80050c6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f002 fac2 	bl	8007630 <SDMMC_CmdStopTransfer>
 80050ac:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f92f 	bl	8005324 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f240 523a 	movw	r2, #1338	; 0x53a
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <HAL_SD_IRQHandler+0xda>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f002 ff20 	bl	8007f38 <HAL_SD_RxCpltCallback>
 80050f8:	e10b      	b.n	8005312 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f002 ff12 	bl	8007f24 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005100:	e107      	b.n	8005312 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8102 	beq.w	8005312 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d011      	beq.n	800513c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f002 fa87 	bl	8007630 <SDMMC_CmdStopTransfer>
 8005122:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d008      	beq.n	800513c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8f4 	bl	8005324 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 80e5 	bne.w	8005312 <HAL_SD_IRQHandler+0x2fa>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	f040 80df 	bne.w	8005312 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0208 	bic.w	r2, r2, #8
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f002 fed9 	bl	8007f24 <HAL_SD_TxCpltCallback>
}
 8005172:	e0ce      	b.n	8005312 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <HAL_SD_IRQHandler+0x17c>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 ff82 	bl	8006096 <SD_Write_IT>
 8005192:	e0be      	b.n	8005312 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800519a:	f240 233a 	movw	r3, #570	; 0x23a
 800519e:	4013      	ands	r3, r2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 80b6 	beq.w	8005312 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	f043 0202 	orr.w	r2, r3, #2
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	f043 0208 	orr.w	r2, r3, #8
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	f043 0210 	orr.w	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	f043 0208 	orr.w	r2, r3, #8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f240 723a 	movw	r2, #1850	; 0x73a
 8005230:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005240:	f023 0302 	bic.w	r3, r3, #2
 8005244:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f002 f9f0 	bl	8007630 <SDMMC_CmdStopTransfer>
 8005250:	4602      	mov	r2, r0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f855 	bl	8005324 <HAL_SD_ErrorCallback>
}
 800527a:	e04a      	b.n	8005312 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005282:	2b00      	cmp	r3, #0
 8005284:	d045      	beq.n	8005312 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <HAL_SD_IRQHandler+0x282>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d011      	beq.n	80052be <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529e:	4a1f      	ldr	r2, [pc, #124]	; (800531c <HAL_SD_IRQHandler+0x304>)
 80052a0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe fb7a 	bl	80039a0 <HAL_DMA_Abort_IT>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d02f      	beq.n	8005312 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fb4a 	bl	8005950 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80052bc:	e029      	b.n	8005312 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <HAL_SD_IRQHandler+0x2ba>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d011      	beq.n	80052f6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4a12      	ldr	r2, [pc, #72]	; (8005320 <HAL_SD_IRQHandler+0x308>)
 80052d8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe fb5e 	bl	80039a0 <HAL_DMA_Abort_IT>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d013      	beq.n	8005312 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fb65 	bl	80059be <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80052f4:	e00d      	b.n	8005312 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f002 fe00 	bl	8007f10 <HAL_SD_AbortCallback>
}
 8005310:	e7ff      	b.n	8005312 <HAL_SD_IRQHandler+0x2fa>
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	08005951 	.word	0x08005951
 8005320:	080059bf 	.word	0x080059bf

08005324 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005346:	0f9b      	lsrs	r3, r3, #30
 8005348:	b2da      	uxtb	r2, r3
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005352:	0e9b      	lsrs	r3, r3, #26
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	b2da      	uxtb	r2, r3
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005364:	0e1b      	lsrs	r3, r3, #24
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	b2da      	uxtb	r2, r3
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005376:	0c1b      	lsrs	r3, r3, #16
 8005378:	b2da      	uxtb	r2, r3
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005382:	0a1b      	lsrs	r3, r3, #8
 8005384:	b2da      	uxtb	r2, r3
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538e:	b2da      	uxtb	r2, r3
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005398:	0d1b      	lsrs	r3, r3, #20
 800539a:	b29a      	uxth	r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053b6:	0bdb      	lsrs	r3, r3, #15
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053c8:	0b9b      	lsrs	r3, r3, #14
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053da:	0b5b      	lsrs	r3, r3, #13
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ec:	0b1b      	lsrs	r3, r3, #12
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2200      	movs	r2, #0
 80053fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	2b00      	cmp	r3, #0
 8005406:	d163      	bne.n	80054d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800540c:	009a      	lsls	r2, r3, #2
 800540e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005412:	4013      	ands	r3, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005418:	0f92      	lsrs	r2, r2, #30
 800541a:	431a      	orrs	r2, r3
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005424:	0edb      	lsrs	r3, r3, #27
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	b2da      	uxtb	r2, r3
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005436:	0e1b      	lsrs	r3, r3, #24
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	b2da      	uxtb	r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005448:	0d5b      	lsrs	r3, r3, #21
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	b2da      	uxtb	r2, r3
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800545a:	0c9b      	lsrs	r3, r3, #18
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	b2da      	uxtb	r2, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546c:	0bdb      	lsrs	r3, r3, #15
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	b2da      	uxtb	r2, r3
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	7e1b      	ldrb	r3, [r3, #24]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	3302      	adds	r3, #2
 8005490:	2201      	movs	r2, #1
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800549a:	fb02 f203 	mul.w	r2, r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	7a1b      	ldrb	r3, [r3, #8]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	2201      	movs	r2, #1
 80054ae:	409a      	lsls	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80054bc:	0a52      	lsrs	r2, r2, #9
 80054be:	fb02 f203 	mul.w	r2, r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054cc:	661a      	str	r2, [r3, #96]	; 0x60
 80054ce:	e031      	b.n	8005534 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d11d      	bne.n	8005514 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e6:	0c1b      	lsrs	r3, r3, #16
 80054e8:	431a      	orrs	r2, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	3301      	adds	r3, #1
 80054f4:	029a      	lsls	r2, r3, #10
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005508:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	661a      	str	r2, [r3, #96]	; 0x60
 8005512:	e00f      	b.n	8005534 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a58      	ldr	r2, [pc, #352]	; (800567c <HAL_SD_GetCardCSD+0x344>)
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e09d      	b.n	8005670 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005538:	0b9b      	lsrs	r3, r3, #14
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	b2da      	uxtb	r2, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554a:	09db      	lsrs	r3, r3, #7
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005552:	b2da      	uxtb	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005562:	b2da      	uxtb	r2, r3
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	0fdb      	lsrs	r3, r3, #31
 800556e:	b2da      	uxtb	r2, r3
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	0f5b      	lsrs	r3, r3, #29
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	b2da      	uxtb	r2, r3
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558a:	0e9b      	lsrs	r3, r3, #26
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	b2da      	uxtb	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	0d9b      	lsrs	r3, r3, #22
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ae:	0d5b      	lsrs	r3, r3, #21
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	0c1b      	lsrs	r3, r3, #16
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	0bdb      	lsrs	r3, r3, #15
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f2:	0b9b      	lsrs	r3, r3, #14
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	0b5b      	lsrs	r3, r3, #13
 8005608:	b2db      	uxtb	r3, r3
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	b2da      	uxtb	r2, r3
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561a:	0b1b      	lsrs	r3, r3, #12
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	b2da      	uxtb	r2, r3
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	0a9b      	lsrs	r3, r3, #10
 8005630:	b2db      	uxtb	r3, r3
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	b2da      	uxtb	r2, r3
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	b2da      	uxtb	r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005656:	085b      	lsrs	r3, r3, #1
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565e:	b2da      	uxtb	r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	004005ff 	.word	0x004005ff

08005680 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80056d8:	b5b0      	push	{r4, r5, r7, lr}
 80056da:	b08e      	sub	sp, #56	; 0x38
 80056dc:	af04      	add	r7, sp, #16
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2203      	movs	r2, #3
 80056e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d02e      	beq.n	8005750 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f8:	d106      	bne.n	8005708 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
 8005706:	e029      	b.n	800575c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800570e:	d10a      	bne.n	8005726 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fb0f 	bl	8005d34 <SD_WideBus_Enable>
 8005716:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
 8005724:	e01a      	b.n	800575c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fb4c 	bl	8005dca <SD_WideBus_Disable>
 8005732:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
 8005740:	e00c      	b.n	800575c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	639a      	str	r2, [r3, #56]	; 0x38
 800574e:	e005      	b.n	800575c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a18      	ldr	r2, [pc, #96]	; (80057cc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800576a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e024      	b.n	80057c2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681d      	ldr	r5, [r3, #0]
 800579e:	466c      	mov	r4, sp
 80057a0:	f107 0318 	add.w	r3, r7, #24
 80057a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80057ac:	f107 030c 	add.w	r3, r7, #12
 80057b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057b2:	4628      	mov	r0, r5
 80057b4:	f001 fdb6 	bl	8007324 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3728      	adds	r7, #40	; 0x28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bdb0      	pop	{r4, r5, r7, pc}
 80057ca:	bf00      	nop
 80057cc:	004005ff 	.word	0x004005ff

080057d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80057dc:	f107 030c 	add.w	r3, r7, #12
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fa7e 	bl	8005ce4 <SD_SendStatus>
 80057e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	0a5b      	lsrs	r3, r3, #9
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005806:	693b      	ldr	r3, [r7, #16]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800582c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	2b82      	cmp	r3, #130	; 0x82
 800584e:	d111      	bne.n	8005874 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f001 feeb 	bl	8007630 <SDMMC_CmdStopTransfer>
 800585a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f7ff fd58 	bl	8005324 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0208 	bic.w	r2, r2, #8
 8005882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f240 523a 	movw	r2, #1338	; 0x53a
 800588c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f002 fb4b 	bl	8007f38 <HAL_SD_RxCpltCallback>
#endif
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fe fa1c 	bl	8003cf8 <HAL_DMA_GetError>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d03e      	beq.n	8005944 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058cc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d002      	beq.n	80058e2 <SD_DMAError+0x36>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d12d      	bne.n	800593e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a19      	ldr	r2, [pc, #100]	; (800594c <SD_DMAError+0xa0>)
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80058f8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005906:	6978      	ldr	r0, [r7, #20]
 8005908:	f7ff ff62 	bl	80057d0 <HAL_SD_GetCardState>
 800590c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b06      	cmp	r3, #6
 8005912:	d002      	beq.n	800591a <SD_DMAError+0x6e>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b05      	cmp	r3, #5
 8005918:	d10a      	bne.n	8005930 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f001 fe86 	bl	8007630 <SDMMC_CmdStopTransfer>
 8005924:	4602      	mov	r2, r0
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	431a      	orrs	r2, r3
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2200      	movs	r2, #0
 800593c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800593e:	6978      	ldr	r0, [r7, #20]
 8005940:	f7ff fcf0 	bl	8005324 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005944:	bf00      	nop
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	004005ff 	.word	0x004005ff

08005950 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f240 523a 	movw	r2, #1338	; 0x53a
 8005966:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f7ff ff31 	bl	80057d0 <HAL_SD_GetCardState>
 800596e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b06      	cmp	r3, #6
 8005982:	d002      	beq.n	800598a <SD_DMATxAbort+0x3a>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b05      	cmp	r3, #5
 8005988:	d10a      	bne.n	80059a0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f001 fe4e 	bl	8007630 <SDMMC_CmdStopTransfer>
 8005994:	4602      	mov	r2, r0
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	431a      	orrs	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d103      	bne.n	80059b0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f002 fab1 	bl	8007f10 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80059ae:	e002      	b.n	80059b6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f7ff fcb7 	bl	8005324 <HAL_SD_ErrorCallback>
}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f7ff fefa 	bl	80057d0 <HAL_SD_GetCardState>
 80059dc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b06      	cmp	r3, #6
 80059f0:	d002      	beq.n	80059f8 <SD_DMARxAbort+0x3a>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b05      	cmp	r3, #5
 80059f6:	d10a      	bne.n	8005a0e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f001 fe17 	bl	8007630 <SDMMC_CmdStopTransfer>
 8005a02:	4602      	mov	r2, r0
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d103      	bne.n	8005a1e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f002 fa7a 	bl	8007f10 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005a1c:	e002      	b.n	8005a24 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff fc80 	bl	8005324 <HAL_SD_ErrorCallback>
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005a2c:	b5b0      	push	{r4, r5, r7, lr}
 8005a2e:	b094      	sub	sp, #80	; 0x50
 8005a30:	af04      	add	r7, sp, #16
 8005a32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005a34:	2301      	movs	r3, #1
 8005a36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 fcc9 	bl	80073d4 <SDIO_GetPowerState>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005a4c:	e0b7      	b.n	8005bbe <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d02f      	beq.n	8005ab6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 fef2 	bl	8007844 <SDMMC_CmdSendCID>
 8005a60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <SD_InitCard+0x40>
    {
      return errorstate;
 8005a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6a:	e0a8      	b.n	8005bbe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fcf3 	bl	800745e <SDIO_GetResponse>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2104      	movs	r1, #4
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 fcea 	bl	800745e <SDIO_GetResponse>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2108      	movs	r1, #8
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 fce1 	bl	800745e <SDIO_GetResponse>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	210c      	movs	r1, #12
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 fcd8 	bl	800745e <SDIO_GetResponse>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d00d      	beq.n	8005ada <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f107 020e 	add.w	r2, r7, #14
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 fef8 	bl	80078be <SDMMC_CmdSetRelAdd>
 8005ace:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <SD_InitCard+0xae>
    {
      return errorstate;
 8005ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad8:	e071      	b.n	8005bbe <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d036      	beq.n	8005b50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005ae2:	89fb      	ldrh	r3, [r7, #14]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af2:	041b      	lsls	r3, r3, #16
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f001 fec2 	bl	8007880 <SDMMC_CmdSendCSD>
 8005afc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b06:	e05a      	b.n	8005bbe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f001 fca5 	bl	800745e <SDIO_GetResponse>
 8005b14:	4602      	mov	r2, r0
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2104      	movs	r1, #4
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 fc9c 	bl	800745e <SDIO_GetResponse>
 8005b26:	4602      	mov	r2, r0
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2108      	movs	r1, #8
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 fc93 	bl	800745e <SDIO_GetResponse>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	210c      	movs	r1, #12
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fc8a 	bl	800745e <SDIO_GetResponse>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2104      	movs	r1, #4
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 fc81 	bl	800745e <SDIO_GetResponse>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	0d1a      	lsrs	r2, r3, #20
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005b64:	f107 0310 	add.w	r3, r7, #16
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff fbe4 	bl	8005338 <HAL_SD_GetCardCSD>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b7a:	e020      	b.n	8005bbe <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6819      	ldr	r1, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b84:	041b      	lsls	r3, r3, #16
 8005b86:	f04f 0400 	mov.w	r4, #0
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	4623      	mov	r3, r4
 8005b8e:	4608      	mov	r0, r1
 8005b90:	f001 fd70 	bl	8007674 <SDMMC_CmdSelDesel>
 8005b94:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <SD_InitCard+0x174>
  {
    return errorstate;
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9e:	e00e      	b.n	8005bbe <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681d      	ldr	r5, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	466c      	mov	r4, sp
 8005ba8:	f103 0210 	add.w	r2, r3, #16
 8005bac:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f001 fbb4 	bl	8007324 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3740      	adds	r7, #64	; 0x40
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005bc8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f001 fd6a 	bl	80076ba <SDMMC_CmdGoIdleState>
 8005be6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	e072      	b.n	8005cd8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 fd7d 	bl	80076f6 <SDMMC_CmdOperCond>
 8005bfc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00d      	beq.n	8005c20 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 fd53 	bl	80076ba <SDMMC_CmdGoIdleState>
 8005c14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	e05b      	b.n	8005cd8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d137      	bne.n	8005c9e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 fd7d 	bl	8007734 <SDMMC_CmdAppCommand>
 8005c3a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d02d      	beq.n	8005c9e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005c46:	e047      	b.n	8005cd8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 fd70 	bl	8007734 <SDMMC_CmdAppCommand>
 8005c54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <SD_PowerON+0x98>
    {
      return errorstate;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	e03b      	b.n	8005cd8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	491e      	ldr	r1, [pc, #120]	; (8005ce0 <SD_PowerON+0x118>)
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 fd86 	bl	8007778 <SDMMC_CmdAppOperCommand>
 8005c6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005c78:	e02e      	b.n	8005cd8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 fbec 	bl	800745e <SDIO_GetResponse>
 8005c86:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	0fdb      	lsrs	r3, r3, #31
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <SD_PowerON+0xcc>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <SD_PowerON+0xce>
 8005c94:	2300      	movs	r3, #0
 8005c96:	613b      	str	r3, [r7, #16]

    count++;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d802      	bhi.n	8005cae <SD_PowerON+0xe6>
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0cc      	beq.n	8005c48 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d902      	bls.n	8005cbe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cbc:	e00c      	b.n	8005cd8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	645a      	str	r2, [r3, #68]	; 0x44
 8005cce:	e002      	b.n	8005cd6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	c1100000 	.word	0xc1100000

08005ce4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005cf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cf8:	e018      	b.n	8005d2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f001 fdfa 	bl	8007900 <SDMMC_CmdSendStatus>
 8005d0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	e009      	b.n	8005d2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 fb9d 	bl	800745e <SDIO_GetResponse>
 8005d24:	4602      	mov	r2, r0
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	2300      	movs	r3, #0
 8005d42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 fb87 	bl	800745e <SDIO_GetResponse>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d5a:	d102      	bne.n	8005d62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d60:	e02f      	b.n	8005dc2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005d62:	f107 030c 	add.w	r3, r7, #12
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f879 	bl	8005e60 <SD_FindSCR>
 8005d6e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	e023      	b.n	8005dc2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01c      	beq.n	8005dbe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8c:	041b      	lsls	r3, r3, #16
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4610      	mov	r0, r2
 8005d92:	f001 fccf 	bl	8007734 <SDMMC_CmdAppCommand>
 8005d96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	e00f      	b.n	8005dc2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2102      	movs	r1, #2
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 fd08 	bl	80077be <SDMMC_CmdBusWidth>
 8005dae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	e003      	b.n	8005dc2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e001      	b.n	8005dc2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005dbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b086      	sub	sp, #24
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2100      	movs	r1, #0
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 fb3c 	bl	800745e <SDIO_GetResponse>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005df0:	d102      	bne.n	8005df8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005df2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005df6:	e02f      	b.n	8005e58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005df8:	f107 030c 	add.w	r3, r7, #12
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f82e 	bl	8005e60 <SD_FindSCR>
 8005e04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	e023      	b.n	8005e58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01c      	beq.n	8005e54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e22:	041b      	lsls	r3, r3, #16
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f001 fc84 	bl	8007734 <SDMMC_CmdAppCommand>
 8005e2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	e00f      	b.n	8005e58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 fcbd 	bl	80077be <SDMMC_CmdBusWidth>
 8005e44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	e003      	b.n	8005e58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e001      	b.n	8005e58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005e54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005e60:	b590      	push	{r4, r7, lr}
 8005e62:	b08f      	sub	sp, #60	; 0x3c
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e6a:	f7fc ff69 	bl	8002d40 <HAL_GetTick>
 8005e6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2108      	movs	r1, #8
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 fb28 	bl	80074dc <SDMMC_CmdBlockLength>
 8005e8c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	e0a9      	b.n	8005fec <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f001 fc45 	bl	8007734 <SDMMC_CmdAppCommand>
 8005eaa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	e09a      	b.n	8005fec <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005ec0:	2330      	movs	r3, #48	; 0x30
 8005ec2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f107 0210 	add.w	r2, r7, #16
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fad2 	bl	8007484 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 fc8c 	bl	8007802 <SDMMC_CmdSendSCR>
 8005eea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d022      	beq.n	8005f38 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	e07a      	b.n	8005fec <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00e      	beq.n	8005f22 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6819      	ldr	r1, [r3, #0]
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	f107 0208 	add.w	r2, r7, #8
 8005f10:	18d4      	adds	r4, r2, r3
 8005f12:	4608      	mov	r0, r1
 8005f14:	f001 fa31 	bl	800737a <SDIO_ReadFIFO>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	6023      	str	r3, [r4, #0]
      index++;
 8005f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1e:	3301      	adds	r3, #1
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005f22:	f7fc ff0d 	bl	8002d40 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d102      	bne.n	8005f38 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005f32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f36:	e059      	b.n	8005fec <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3e:	f240 432a 	movw	r3, #1066	; 0x42a
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0d6      	beq.n	8005ef6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2208      	movs	r2, #8
 8005f5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005f5e:	2308      	movs	r3, #8
 8005f60:	e044      	b.n	8005fec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2202      	movs	r2, #2
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e037      	b.n	8005fec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005f92:	2320      	movs	r3, #32
 8005f94:	e02a      	b.n	8005fec <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	061a      	lsls	r2, r3, #24
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	0a1b      	lsrs	r3, r3, #8
 8005fb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005fb6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	0e1b      	lsrs	r3, r3, #24
 8005fbc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	601a      	str	r2, [r3, #0]
    scr++;
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	061a      	lsls	r2, r3, #24
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fd4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	0a1b      	lsrs	r3, r3, #8
 8005fda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005fde:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	0e1b      	lsrs	r3, r3, #24
 8005fe4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	373c      	adds	r7, #60	; 0x3c
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd90      	pop	{r4, r7, pc}

08005ff4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d03f      	beq.n	800608e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e033      	b.n	800607c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f001 f9ae 	bl	800737a <SDIO_ReadFIFO>
 800601e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3301      	adds	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	3b01      	subs	r3, #1
 8006032:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	b2da      	uxtb	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	3b01      	subs	r3, #1
 8006048:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	b2da      	uxtb	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3b01      	subs	r3, #1
 800605e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	0e1b      	lsrs	r3, r3, #24
 8006064:	b2da      	uxtb	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	701a      	strb	r2, [r3, #0]
      tmp++;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3301      	adds	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	3b01      	subs	r3, #1
 8006074:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	3301      	adds	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b07      	cmp	r3, #7
 8006080:	d9c8      	bls.n	8006014 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800608e:	bf00      	nop
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d043      	beq.n	8006138 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	e037      	b.n	8006126 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3301      	adds	r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	021a      	lsls	r2, r3, #8
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	3b01      	subs	r3, #1
 80060de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	041a      	lsls	r2, r3, #16
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3301      	adds	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	061a      	lsls	r2, r3, #24
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	4313      	orrs	r3, r2
 8006102:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3301      	adds	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	3b01      	subs	r3, #1
 800610e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f107 0208 	add.w	r2, r7, #8
 8006118:	4611      	mov	r1, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f001 f93a 	bl	8007394 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	3301      	adds	r3, #1
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b07      	cmp	r3, #7
 800612a:	d9c4      	bls.n	80060b6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006138:	bf00      	nop
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e056      	b.n	8006200 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fc fb8d 	bl	800288c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2202      	movs	r2, #2
 8006176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006188:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	ea42 0103 	orr.w	r1, r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	0c1b      	lsrs	r3, r3, #16
 80061d0:	f003 0104 	and.w	r1, r3, #4
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69da      	ldr	r2, [r3, #28]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4613      	mov	r3, r2
 8006216:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_SPI_Transmit+0x22>
 8006226:	2302      	movs	r3, #2
 8006228:	e11e      	b.n	8006468 <HAL_SPI_Transmit+0x260>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006232:	f7fc fd85 	bl	8002d40 <HAL_GetTick>
 8006236:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b01      	cmp	r3, #1
 8006246:	d002      	beq.n	800624e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006248:	2302      	movs	r3, #2
 800624a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800624c:	e103      	b.n	8006456 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_SPI_Transmit+0x52>
 8006254:	88fb      	ldrh	r3, [r7, #6]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d102      	bne.n	8006260 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800625e:	e0fa      	b.n	8006456 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2203      	movs	r2, #3
 8006264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	88fa      	ldrh	r2, [r7, #6]
 8006278:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	88fa      	ldrh	r2, [r7, #6]
 800627e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a6:	d107      	bne.n	80062b8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d007      	beq.n	80062d6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062de:	d14b      	bne.n	8006378 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <HAL_SPI_Transmit+0xe6>
 80062e8:	8afb      	ldrh	r3, [r7, #22]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d13e      	bne.n	800636c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	881a      	ldrh	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	1c9a      	adds	r2, r3, #2
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006312:	e02b      	b.n	800636c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b02      	cmp	r3, #2
 8006320:	d112      	bne.n	8006348 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	881a      	ldrh	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	1c9a      	adds	r2, r3, #2
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	86da      	strh	r2, [r3, #54]	; 0x36
 8006346:	e011      	b.n	800636c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006348:	f7fc fcfa 	bl	8002d40 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d803      	bhi.n	8006360 <HAL_SPI_Transmit+0x158>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d102      	bne.n	8006366 <HAL_SPI_Transmit+0x15e>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d102      	bne.n	800636c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	77fb      	strb	r3, [r7, #31]
          goto error;
 800636a:	e074      	b.n	8006456 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1ce      	bne.n	8006314 <HAL_SPI_Transmit+0x10c>
 8006376:	e04c      	b.n	8006412 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_SPI_Transmit+0x17e>
 8006380:	8afb      	ldrh	r3, [r7, #22]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d140      	bne.n	8006408 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	7812      	ldrb	r2, [r2, #0]
 8006392:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063ac:	e02c      	b.n	8006408 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d113      	bne.n	80063e4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80063e2:	e011      	b.n	8006408 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063e4:	f7fc fcac 	bl	8002d40 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d803      	bhi.n	80063fc <HAL_SPI_Transmit+0x1f4>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	d102      	bne.n	8006402 <HAL_SPI_Transmit+0x1fa>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006406:	e026      	b.n	8006456 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1cd      	bne.n	80063ae <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fba4 	bl	8006b64 <SPI_EndRxTxTransaction>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	77fb      	strb	r3, [r7, #31]
 8006452:	e000      	b.n	8006456 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006454:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006466:	7ffb      	ldrb	r3, [r7, #31]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800648c:	d112      	bne.n	80064b4 <HAL_SPI_Receive+0x44>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10e      	bne.n	80064b4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2204      	movs	r2, #4
 800649a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800649e:	88fa      	ldrh	r2, [r7, #6]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	4613      	mov	r3, r2
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f8e9 	bl	8006682 <HAL_SPI_TransmitReceive>
 80064b0:	4603      	mov	r3, r0
 80064b2:	e0e2      	b.n	800667a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_SPI_Receive+0x52>
 80064be:	2302      	movs	r3, #2
 80064c0:	e0db      	b.n	800667a <HAL_SPI_Receive+0x20a>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ca:	f7fc fc39 	bl	8002d40 <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d002      	beq.n	80064e2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80064dc:	2302      	movs	r3, #2
 80064de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064e0:	e0c2      	b.n	8006668 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <HAL_SPI_Receive+0x7e>
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064f2:	e0b9      	b.n	8006668 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2204      	movs	r2, #4
 80064f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	88fa      	ldrh	r2, [r7, #6]
 8006512:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800653a:	d107      	bne.n	800654c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800654a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	d007      	beq.n	800656a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006568:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d162      	bne.n	8006638 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006572:	e02e      	b.n	80065d2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b01      	cmp	r3, #1
 8006580:	d115      	bne.n	80065ae <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f103 020c 	add.w	r2, r3, #12
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	7812      	ldrb	r2, [r2, #0]
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065ac:	e011      	b.n	80065d2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ae:	f7fc fbc7 	bl	8002d40 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d803      	bhi.n	80065c6 <HAL_SPI_Receive+0x156>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d102      	bne.n	80065cc <HAL_SPI_Receive+0x15c>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80065d0:	e04a      	b.n	8006668 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1cb      	bne.n	8006574 <HAL_SPI_Receive+0x104>
 80065dc:	e031      	b.n	8006642 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d113      	bne.n	8006614 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	b292      	uxth	r2, r2
 80065f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	1c9a      	adds	r2, r3, #2
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006612:	e011      	b.n	8006638 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006614:	f7fc fb94 	bl	8002d40 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d803      	bhi.n	800662c <HAL_SPI_Receive+0x1bc>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	d102      	bne.n	8006632 <HAL_SPI_Receive+0x1c2>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d102      	bne.n	8006638 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006636:	e017      	b.n	8006668 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1cd      	bne.n	80065de <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fa27 	bl	8006a9a <SPI_EndRxTransaction>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	75fb      	strb	r3, [r7, #23]
 8006664:	e000      	b.n	8006668 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006666:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b08c      	sub	sp, #48	; 0x30
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
 800668e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006690:	2301      	movs	r3, #1
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_SPI_TransmitReceive+0x26>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e18a      	b.n	80069be <HAL_SPI_TransmitReceive+0x33c>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066b0:	f7fc fb46 	bl	8002d40 <HAL_GetTick>
 80066b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80066c6:	887b      	ldrh	r3, [r7, #2]
 80066c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d00f      	beq.n	80066f2 <HAL_SPI_TransmitReceive+0x70>
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d8:	d107      	bne.n	80066ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d103      	bne.n	80066ea <HAL_SPI_TransmitReceive+0x68>
 80066e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d003      	beq.n	80066f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80066ea:	2302      	movs	r3, #2
 80066ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066f0:	e15b      	b.n	80069aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <HAL_SPI_TransmitReceive+0x82>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <HAL_SPI_TransmitReceive+0x82>
 80066fe:	887b      	ldrh	r3, [r7, #2]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d103      	bne.n	800670c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800670a:	e14e      	b.n	80069aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b04      	cmp	r3, #4
 8006716:	d003      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2205      	movs	r2, #5
 800671c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	887a      	ldrh	r2, [r7, #2]
 8006730:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	887a      	ldrh	r2, [r7, #2]
 8006736:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	887a      	ldrh	r2, [r7, #2]
 8006742:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	887a      	ldrh	r2, [r7, #2]
 8006748:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d007      	beq.n	8006774 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800677c:	d178      	bne.n	8006870 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <HAL_SPI_TransmitReceive+0x10a>
 8006786:	8b7b      	ldrh	r3, [r7, #26]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d166      	bne.n	800685a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	881a      	ldrh	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067b0:	e053      	b.n	800685a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d11b      	bne.n	80067f8 <HAL_SPI_TransmitReceive+0x176>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d016      	beq.n	80067f8 <HAL_SPI_TransmitReceive+0x176>
 80067ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d113      	bne.n	80067f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d4:	881a      	ldrh	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	1c9a      	adds	r2, r3, #2
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b01      	cmp	r3, #1
 8006804:	d119      	bne.n	800683a <HAL_SPI_TransmitReceive+0x1b8>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680a:	b29b      	uxth	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d014      	beq.n	800683a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	b292      	uxth	r2, r2
 800681c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	1c9a      	adds	r2, r3, #2
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006836:	2301      	movs	r3, #1
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800683a:	f7fc fa81 	bl	8002d40 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006846:	429a      	cmp	r2, r3
 8006848:	d807      	bhi.n	800685a <HAL_SPI_TransmitReceive+0x1d8>
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d003      	beq.n	800685a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006858:	e0a7      	b.n	80069aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800685e:	b29b      	uxth	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1a6      	bne.n	80067b2 <HAL_SPI_TransmitReceive+0x130>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1a1      	bne.n	80067b2 <HAL_SPI_TransmitReceive+0x130>
 800686e:	e07c      	b.n	800696a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_SPI_TransmitReceive+0x1fc>
 8006878:	8b7b      	ldrh	r3, [r7, #26]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d16b      	bne.n	8006956 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	330c      	adds	r3, #12
 8006888:	7812      	ldrb	r2, [r2, #0]
 800688a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068a4:	e057      	b.n	8006956 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d11c      	bne.n	80068ee <HAL_SPI_TransmitReceive+0x26c>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d017      	beq.n	80068ee <HAL_SPI_TransmitReceive+0x26c>
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d114      	bne.n	80068ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	7812      	ldrb	r2, [r2, #0]
 80068d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d119      	bne.n	8006930 <HAL_SPI_TransmitReceive+0x2ae>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d014      	beq.n	8006930 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800692c:	2301      	movs	r3, #1
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006930:	f7fc fa06 	bl	8002d40 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800693c:	429a      	cmp	r2, r3
 800693e:	d803      	bhi.n	8006948 <HAL_SPI_TransmitReceive+0x2c6>
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006946:	d102      	bne.n	800694e <HAL_SPI_TransmitReceive+0x2cc>
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006954:	e029      	b.n	80069aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800695a:	b29b      	uxth	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1a2      	bne.n	80068a6 <HAL_SPI_TransmitReceive+0x224>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d19d      	bne.n	80068a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800696a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f8f8 	bl	8006b64 <SPI_EndRxTxTransaction>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d006      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006986:	e010      	b.n	80069aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10b      	bne.n	80069a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	e000      	b.n	80069aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80069a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3730      	adds	r7, #48	; 0x30
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069d6:	e04c      	b.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	d048      	beq.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80069e0:	f7fc f9ae 	bl	8002d40 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d902      	bls.n	80069f6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d13d      	bne.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a0e:	d111      	bne.n	8006a34 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a18:	d004      	beq.n	8006a24 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a22:	d107      	bne.n	8006a34 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a3c:	d10f      	bne.n	8006a5e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e00f      	b.n	8006a92 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	bf0c      	ite	eq
 8006a82:	2301      	moveq	r3, #1
 8006a84:	2300      	movne	r3, #0
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d1a3      	bne.n	80069d8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b086      	sub	sp, #24
 8006a9e:	af02      	add	r7, sp, #8
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aae:	d111      	bne.n	8006ad4 <SPI_EndRxTransaction+0x3a>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab8:	d004      	beq.n	8006ac4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac2:	d107      	bne.n	8006ad4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ad2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006adc:	d12a      	bne.n	8006b34 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae6:	d012      	beq.n	8006b0e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2200      	movs	r2, #0
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff ff67 	bl	80069c6 <SPI_WaitFlagStateUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d02d      	beq.n	8006b5a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b02:	f043 0220 	orr.w	r2, r3, #32
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e026      	b.n	8006b5c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2200      	movs	r2, #0
 8006b16:	2101      	movs	r1, #1
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff ff54 	bl	80069c6 <SPI_WaitFlagStateUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01a      	beq.n	8006b5a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b28:	f043 0220 	orr.w	r2, r3, #32
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e013      	b.n	8006b5c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7ff ff41 	bl	80069c6 <SPI_WaitFlagStateUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	f043 0220 	orr.w	r2, r3, #32
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e000      	b.n	8006b5c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b70:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <SPI_EndRxTxTransaction+0x7c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1b      	ldr	r2, [pc, #108]	; (8006be4 <SPI_EndRxTxTransaction+0x80>)
 8006b76:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7a:	0d5b      	lsrs	r3, r3, #21
 8006b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b80:	fb02 f303 	mul.w	r3, r2, r3
 8006b84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b8e:	d112      	bne.n	8006bb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2200      	movs	r2, #0
 8006b98:	2180      	movs	r1, #128	; 0x80
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff ff13 	bl	80069c6 <SPI_WaitFlagStateUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d016      	beq.n	8006bd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006baa:	f043 0220 	orr.w	r2, r3, #32
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e00f      	b.n	8006bd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bcc:	2b80      	cmp	r3, #128	; 0x80
 8006bce:	d0f2      	beq.n	8006bb6 <SPI_EndRxTxTransaction+0x52>
 8006bd0:	e000      	b.n	8006bd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006bd2:	bf00      	nop
  }

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000078 	.word	0x20000078
 8006be4:	165e9f81 	.word	0x165e9f81

08006be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e01d      	b.n	8006c36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fb feca 	bl	80029a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3304      	adds	r3, #4
 8006c24:	4619      	mov	r1, r3
 8006c26:	4610      	mov	r0, r2
 8006c28:	f000 fa26 	bl	8007078 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0201 	orr.w	r2, r2, #1
 8006c54:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b06      	cmp	r3, #6
 8006c66:	d007      	beq.n	8006c78 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b086      	sub	sp, #24
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e083      	b.n	8006da2 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7fb fe34 	bl	800291c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6812      	ldr	r2, [r2, #0]
 8006cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cca:	f023 0307 	bic.w	r3, r3, #7
 8006cce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f000 f9cc 	bl	8007078 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d08:	f023 0303 	bic.w	r3, r3, #3
 8006d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006d26:	f023 030c 	bic.w	r3, r3, #12
 8006d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	4313      	orrs	r3, r2
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	011a      	lsls	r2, r3, #4
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	031b      	lsls	r3, r3, #12
 8006d56:	4313      	orrs	r3, r2
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006d64:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006d6c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <HAL_TIM_Encoder_Start+0x16>
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d008      	beq.n	8006dd0 <HAL_TIM_Encoder_Start+0x26>
 8006dbe:	e00f      	b.n	8006de0 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 f9f5 	bl	80071b8 <TIM_CCxChannelCmd>
      break;
 8006dce:	e016      	b.n	8006dfe <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	2104      	movs	r1, #4
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 f9ed 	bl	80071b8 <TIM_CCxChannelCmd>
      break;
 8006dde:	e00e      	b.n	8006dfe <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2201      	movs	r2, #1
 8006de6:	2100      	movs	r1, #0
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 f9e5 	bl	80071b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2201      	movs	r2, #1
 8006df4:	2104      	movs	r1, #4
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f9de 	bl	80071b8 <TIM_CCxChannelCmd>
      break;
 8006dfc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0201 	orr.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d122      	bne.n	8006e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d11b      	bne.n	8006e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f06f 0202 	mvn.w	r2, #2
 8006e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f8ee 	bl	800703c <HAL_TIM_IC_CaptureCallback>
 8006e60:	e005      	b.n	8006e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f8e0 	bl	8007028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f8f1 	bl	8007050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0304 	and.w	r3, r3, #4
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d122      	bne.n	8006ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d11b      	bne.n	8006ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f06f 0204 	mvn.w	r2, #4
 8006e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f8c4 	bl	800703c <HAL_TIM_IC_CaptureCallback>
 8006eb4:	e005      	b.n	8006ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f8b6 	bl	8007028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f8c7 	bl	8007050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b08      	cmp	r3, #8
 8006ed4:	d122      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d11b      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f06f 0208 	mvn.w	r2, #8
 8006eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f89a 	bl	800703c <HAL_TIM_IC_CaptureCallback>
 8006f08:	e005      	b.n	8006f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f88c 	bl	8007028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f89d 	bl	8007050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b10      	cmp	r3, #16
 8006f28:	d122      	bne.n	8006f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d11b      	bne.n	8006f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f06f 0210 	mvn.w	r2, #16
 8006f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2208      	movs	r2, #8
 8006f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f870 	bl	800703c <HAL_TIM_IC_CaptureCallback>
 8006f5c:	e005      	b.n	8006f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f862 	bl	8007028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f873 	bl	8007050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d10e      	bne.n	8006f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d107      	bne.n	8006f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f06f 0201 	mvn.w	r2, #1
 8006f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fa fbf0 	bl	800177c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa6:	2b80      	cmp	r3, #128	; 0x80
 8006fa8:	d10e      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb4:	2b80      	cmp	r3, #128	; 0x80
 8006fb6:	d107      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f9a4 	bl	8007310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	d10e      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b40      	cmp	r3, #64	; 0x40
 8006fe2:	d107      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f838 	bl	8007064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b20      	cmp	r3, #32
 8007000:	d10e      	bne.n	8007020 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0320 	and.w	r3, r3, #32
 800700c:	2b20      	cmp	r3, #32
 800700e:	d107      	bne.n	8007020 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0220 	mvn.w	r2, #32
 8007018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f96e 	bl	80072fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a40      	ldr	r2, [pc, #256]	; (800718c <TIM_Base_SetConfig+0x114>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d013      	beq.n	80070b8 <TIM_Base_SetConfig+0x40>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007096:	d00f      	beq.n	80070b8 <TIM_Base_SetConfig+0x40>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a3d      	ldr	r2, [pc, #244]	; (8007190 <TIM_Base_SetConfig+0x118>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00b      	beq.n	80070b8 <TIM_Base_SetConfig+0x40>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a3c      	ldr	r2, [pc, #240]	; (8007194 <TIM_Base_SetConfig+0x11c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d007      	beq.n	80070b8 <TIM_Base_SetConfig+0x40>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a3b      	ldr	r2, [pc, #236]	; (8007198 <TIM_Base_SetConfig+0x120>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d003      	beq.n	80070b8 <TIM_Base_SetConfig+0x40>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a3a      	ldr	r2, [pc, #232]	; (800719c <TIM_Base_SetConfig+0x124>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d108      	bne.n	80070ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a2f      	ldr	r2, [pc, #188]	; (800718c <TIM_Base_SetConfig+0x114>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d02b      	beq.n	800712a <TIM_Base_SetConfig+0xb2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d8:	d027      	beq.n	800712a <TIM_Base_SetConfig+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a2c      	ldr	r2, [pc, #176]	; (8007190 <TIM_Base_SetConfig+0x118>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d023      	beq.n	800712a <TIM_Base_SetConfig+0xb2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a2b      	ldr	r2, [pc, #172]	; (8007194 <TIM_Base_SetConfig+0x11c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d01f      	beq.n	800712a <TIM_Base_SetConfig+0xb2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a2a      	ldr	r2, [pc, #168]	; (8007198 <TIM_Base_SetConfig+0x120>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d01b      	beq.n	800712a <TIM_Base_SetConfig+0xb2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a29      	ldr	r2, [pc, #164]	; (800719c <TIM_Base_SetConfig+0x124>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d017      	beq.n	800712a <TIM_Base_SetConfig+0xb2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a28      	ldr	r2, [pc, #160]	; (80071a0 <TIM_Base_SetConfig+0x128>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d013      	beq.n	800712a <TIM_Base_SetConfig+0xb2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a27      	ldr	r2, [pc, #156]	; (80071a4 <TIM_Base_SetConfig+0x12c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00f      	beq.n	800712a <TIM_Base_SetConfig+0xb2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a26      	ldr	r2, [pc, #152]	; (80071a8 <TIM_Base_SetConfig+0x130>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00b      	beq.n	800712a <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a25      	ldr	r2, [pc, #148]	; (80071ac <TIM_Base_SetConfig+0x134>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d007      	beq.n	800712a <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a24      	ldr	r2, [pc, #144]	; (80071b0 <TIM_Base_SetConfig+0x138>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d003      	beq.n	800712a <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a23      	ldr	r2, [pc, #140]	; (80071b4 <TIM_Base_SetConfig+0x13c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d108      	bne.n	800713c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a0a      	ldr	r2, [pc, #40]	; (800718c <TIM_Base_SetConfig+0x114>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d003      	beq.n	8007170 <TIM_Base_SetConfig+0xf8>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a0c      	ldr	r2, [pc, #48]	; (800719c <TIM_Base_SetConfig+0x124>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d103      	bne.n	8007178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	691a      	ldr	r2, [r3, #16]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	615a      	str	r2, [r3, #20]
}
 800717e:	bf00      	nop
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40010000 	.word	0x40010000
 8007190:	40000400 	.word	0x40000400
 8007194:	40000800 	.word	0x40000800
 8007198:	40000c00 	.word	0x40000c00
 800719c:	40010400 	.word	0x40010400
 80071a0:	40014000 	.word	0x40014000
 80071a4:	40014400 	.word	0x40014400
 80071a8:	40014800 	.word	0x40014800
 80071ac:	40001800 	.word	0x40001800
 80071b0:	40001c00 	.word	0x40001c00
 80071b4:	40002000 	.word	0x40002000

080071b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f003 031f 	and.w	r3, r3, #31
 80071ca:	2201      	movs	r2, #1
 80071cc:	fa02 f303 	lsl.w	r3, r2, r3
 80071d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a1a      	ldr	r2, [r3, #32]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	43db      	mvns	r3, r3
 80071da:	401a      	ands	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1a      	ldr	r2, [r3, #32]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f003 031f 	and.w	r3, r3, #31
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	fa01 f303 	lsl.w	r3, r1, r3
 80071f0:	431a      	orrs	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
	...

08007204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007218:	2302      	movs	r3, #2
 800721a:	e05a      	b.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a21      	ldr	r2, [pc, #132]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d022      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007268:	d01d      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a1d      	ldr	r2, [pc, #116]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d018      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1b      	ldr	r2, [pc, #108]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1a      	ldr	r2, [pc, #104]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00e      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d10c      	bne.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800
 80072ec:	40000c00 	.word	0x40000c00
 80072f0:	40010400 	.word	0x40010400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40001800 	.word	0x40001800

080072fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007324:	b084      	sub	sp, #16
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	f107 001c 	add.w	r0, r7, #28
 8007332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800733a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800733c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800733e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007342:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007346:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800734a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800734e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800735e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	431a      	orrs	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	b004      	add	sp, #16
 8007378:	4770      	bx	lr

0800737a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2203      	movs	r2, #3
 80073c2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80073c4:	2002      	movs	r0, #2
 80073c6:	f7fb fcc7 	bl	8002d58 <HAL_Delay>
  
  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0303 	and.w	r3, r3, #3
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800740e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007414:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800741a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800742a:	f023 030f 	bic.w	r3, r3, #15
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	431a      	orrs	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	b2db      	uxtb	r3, r3
}
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3314      	adds	r3, #20
 800746c:	461a      	mov	r2, r3
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	4413      	add	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
}  
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80074aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80074b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80074b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0

}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80074ea:	2310      	movs	r3, #16
 80074ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074ee:	2340      	movs	r3, #64	; 0x40
 80074f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074fc:	f107 0308 	add.w	r3, r7, #8
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff ff74 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007508:	f241 3288 	movw	r2, #5000	; 0x1388
 800750c:	2110      	movs	r1, #16
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fa40 	bl	8007994 <SDMMC_GetCmdResp1>
 8007514:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007516:	69fb      	ldr	r3, [r7, #28]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3720      	adds	r7, #32
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800752e:	2311      	movs	r3, #17
 8007530:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007532:	2340      	movs	r3, #64	; 0x40
 8007534:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800753a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800753e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007540:	f107 0308 	add.w	r3, r7, #8
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff ff52 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800754c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007550:	2111      	movs	r1, #17
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fa1e 	bl	8007994 <SDMMC_GetCmdResp1>
 8007558:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800755a:	69fb      	ldr	r3, [r7, #28]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3720      	adds	r7, #32
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007572:	2312      	movs	r3, #18
 8007574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007576:	2340      	movs	r3, #64	; 0x40
 8007578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800757a:	2300      	movs	r3, #0
 800757c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800757e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007582:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007584:	f107 0308 	add.w	r3, r7, #8
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff ff30 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007590:	f241 3288 	movw	r2, #5000	; 0x1388
 8007594:	2112      	movs	r1, #18
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f9fc 	bl	8007994 <SDMMC_GetCmdResp1>
 800759c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800759e:	69fb      	ldr	r3, [r7, #28]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80075b6:	2318      	movs	r3, #24
 80075b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075ba:	2340      	movs	r3, #64	; 0x40
 80075bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075c8:	f107 0308 	add.w	r3, r7, #8
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff ff0e 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80075d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d8:	2118      	movs	r1, #24
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f9da 	bl	8007994 <SDMMC_GetCmdResp1>
 80075e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075e2:	69fb      	ldr	r3, [r7, #28]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3720      	adds	r7, #32
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80075fa:	2319      	movs	r3, #25
 80075fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075fe:	2340      	movs	r3, #64	; 0x40
 8007600:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007602:	2300      	movs	r3, #0
 8007604:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800760a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800760c:	f107 0308 	add.w	r3, r7, #8
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff feec 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007618:	f241 3288 	movw	r2, #5000	; 0x1388
 800761c:	2119      	movs	r1, #25
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9b8 	bl	8007994 <SDMMC_GetCmdResp1>
 8007624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007626:	69fb      	ldr	r3, [r7, #28]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3720      	adds	r7, #32
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800763c:	230c      	movs	r3, #12
 800763e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007640:	2340      	movs	r3, #64	; 0x40
 8007642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007644:	2300      	movs	r3, #0
 8007646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800764c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800764e:	f107 0308 	add.w	r3, r7, #8
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff fecb 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800765a:	4a05      	ldr	r2, [pc, #20]	; (8007670 <SDMMC_CmdStopTransfer+0x40>)
 800765c:	210c      	movs	r1, #12
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f998 	bl	8007994 <SDMMC_GetCmdResp1>
 8007664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007666:	69fb      	ldr	r3, [r7, #28]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3720      	adds	r7, #32
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	05f5e100 	.word	0x05f5e100

08007674 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007684:	2307      	movs	r3, #7
 8007686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007688:	2340      	movs	r3, #64	; 0x40
 800768a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800768c:	2300      	movs	r3, #0
 800768e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007694:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007696:	f107 0310 	add.w	r3, r7, #16
 800769a:	4619      	mov	r1, r3
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7ff fea7 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80076a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a6:	2107      	movs	r1, #7
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f973 	bl	8007994 <SDMMC_GetCmdResp1>
 80076ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3728      	adds	r7, #40	; 0x28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b088      	sub	sp, #32
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076d8:	f107 0308 	add.w	r3, r7, #8
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7ff fe86 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f92d 	bl	8007944 <SDMMC_GetCmdError>
 80076ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076ec:	69fb      	ldr	r3, [r7, #28]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b088      	sub	sp, #32
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80076fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007704:	2308      	movs	r3, #8
 8007706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007708:	2340      	movs	r3, #64	; 0x40
 800770a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800770c:	2300      	movs	r3, #0
 800770e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007714:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007716:	f107 0308 	add.w	r3, r7, #8
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff fe67 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fb16 	bl	8007d54 <SDMMC_GetCmdResp7>
 8007728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800772a:	69fb      	ldr	r3, [r7, #28]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3720      	adds	r7, #32
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007742:	2337      	movs	r3, #55	; 0x37
 8007744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007746:	2340      	movs	r3, #64	; 0x40
 8007748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800774e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007752:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007754:	f107 0308 	add.w	r3, r7, #8
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff fe48 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007760:	f241 3288 	movw	r2, #5000	; 0x1388
 8007764:	2137      	movs	r1, #55	; 0x37
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f914 	bl	8007994 <SDMMC_GetCmdResp1>
 800776c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800776e:	69fb      	ldr	r3, [r7, #28]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3720      	adds	r7, #32
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800778c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800778e:	2329      	movs	r3, #41	; 0x29
 8007790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007792:	2340      	movs	r3, #64	; 0x40
 8007794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800779a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800779e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077a0:	f107 0308 	add.w	r3, r7, #8
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff fe22 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fa23 	bl	8007bf8 <SDMMC_GetCmdResp3>
 80077b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077b4:	69fb      	ldr	r3, [r7, #28]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b088      	sub	sp, #32
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80077cc:	2306      	movs	r3, #6
 80077ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077d0:	2340      	movs	r3, #64	; 0x40
 80077d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077de:	f107 0308 	add.w	r3, r7, #8
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff fe03 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80077ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ee:	2106      	movs	r1, #6
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f8cf 	bl	8007994 <SDMMC_GetCmdResp1>
 80077f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077f8:	69fb      	ldr	r3, [r7, #28]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3720      	adds	r7, #32
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b088      	sub	sp, #32
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800780e:	2333      	movs	r3, #51	; 0x33
 8007810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007812:	2340      	movs	r3, #64	; 0x40
 8007814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800781a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800781e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007820:	f107 0308 	add.w	r3, r7, #8
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff fde2 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800782c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007830:	2133      	movs	r1, #51	; 0x33
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f8ae 	bl	8007994 <SDMMC_GetCmdResp1>
 8007838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800783a:	69fb      	ldr	r3, [r7, #28]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3720      	adds	r7, #32
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007850:	2302      	movs	r3, #2
 8007852:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007854:	23c0      	movs	r3, #192	; 0xc0
 8007856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007858:	2300      	movs	r3, #0
 800785a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800785c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007860:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007862:	f107 0308 	add.w	r3, r7, #8
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff fdc1 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f97c 	bl	8007b6c <SDMMC_GetCmdResp2>
 8007874:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007876:	69fb      	ldr	r3, [r7, #28]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3720      	adds	r7, #32
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800788e:	2309      	movs	r3, #9
 8007890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007892:	23c0      	movs	r3, #192	; 0xc0
 8007894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800789a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800789e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078a0:	f107 0308 	add.w	r3, r7, #8
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7ff fda2 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f95d 	bl	8007b6c <SDMMC_GetCmdResp2>
 80078b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078b4:	69fb      	ldr	r3, [r7, #28]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3720      	adds	r7, #32
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b088      	sub	sp, #32
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80078cc:	2303      	movs	r3, #3
 80078ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078d0:	2340      	movs	r3, #64	; 0x40
 80078d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078d4:	2300      	movs	r3, #0
 80078d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078de:	f107 0308 	add.w	r3, r7, #8
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7ff fd83 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	2103      	movs	r1, #3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f9bc 	bl	8007c6c <SDMMC_GetCmdResp6>
 80078f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078f6:	69fb      	ldr	r3, [r7, #28]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800790e:	230d      	movs	r3, #13
 8007910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007912:	2340      	movs	r3, #64	; 0x40
 8007914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800791a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800791e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007920:	f107 0308 	add.w	r3, r7, #8
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff fd62 	bl	80073f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800792c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007930:	210d      	movs	r1, #13
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f82e 	bl	8007994 <SDMMC_GetCmdResp1>
 8007938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800793a:	69fb      	ldr	r3, [r7, #28]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3720      	adds	r7, #32
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007944:	b490      	push	{r4, r7}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800794c:	4b0f      	ldr	r3, [pc, #60]	; (800798c <SDMMC_GetCmdError+0x48>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a0f      	ldr	r2, [pc, #60]	; (8007990 <SDMMC_GetCmdError+0x4c>)
 8007952:	fba2 2303 	umull	r2, r3, r2, r3
 8007956:	0a5b      	lsrs	r3, r3, #9
 8007958:	f241 3288 	movw	r2, #5000	; 0x1388
 800795c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007960:	4623      	mov	r3, r4
 8007962:	1e5c      	subs	r4, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d102      	bne.n	800796e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800796c:	e009      	b.n	8007982 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0f2      	beq.n	8007960 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	22c5      	movs	r2, #197	; 0xc5
 800797e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bc90      	pop	{r4, r7}
 800798a:	4770      	bx	lr
 800798c:	20000078 	.word	0x20000078
 8007990:	10624dd3 	.word	0x10624dd3

08007994 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007994:	b590      	push	{r4, r7, lr}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	460b      	mov	r3, r1
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80079a2:	4b6f      	ldr	r3, [pc, #444]	; (8007b60 <SDMMC_GetCmdResp1+0x1cc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a6f      	ldr	r2, [pc, #444]	; (8007b64 <SDMMC_GetCmdResp1+0x1d0>)
 80079a8:	fba2 2303 	umull	r2, r3, r2, r3
 80079ac:	0a5b      	lsrs	r3, r3, #9
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80079b4:	4623      	mov	r3, r4
 80079b6:	1e5c      	subs	r4, r3, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079c0:	e0c9      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0f0      	beq.n	80079b4 <SDMMC_GetCmdResp1+0x20>
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1eb      	bne.n	80079b4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2204      	movs	r2, #4
 80079ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079ee:	2304      	movs	r3, #4
 80079f0:	e0b1      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d004      	beq.n	8007a08 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0a6      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	22c5      	movs	r2, #197	; 0xc5
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f7ff fd18 	bl	8007444 <SDIO_GetCommandResponse>
 8007a14:	4603      	mov	r3, r0
 8007a16:	461a      	mov	r2, r3
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d001      	beq.n	8007a22 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e099      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007a22:	2100      	movs	r1, #0
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f7ff fd1a 	bl	800745e <SDIO_GetResponse>
 8007a2a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	4b4e      	ldr	r3, [pc, #312]	; (8007b68 <SDMMC_GetCmdResp1+0x1d4>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e08d      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	da02      	bge.n	8007a46 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a44:	e087      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007a50:	2340      	movs	r3, #64	; 0x40
 8007a52:	e080      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007a5e:	2380      	movs	r3, #128	; 0x80
 8007a60:	e079      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a70:	e071      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a80:	e069      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a90:	e061      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007aa0:	e059      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ab0:	e051      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ac0:	e049      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ad0:	e041      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ae0:	e039      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007af0:	e031      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007afc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b00:	e029      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007b0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b10:	e021      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007b1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b20:	e019      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007b2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b30:	e011      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007b3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b40:	e009      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007b4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b50:	e001      	b.n	8007b56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd90      	pop	{r4, r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000078 	.word	0x20000078
 8007b64:	10624dd3 	.word	0x10624dd3
 8007b68:	fdffe008 	.word	0xfdffe008

08007b6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007b6c:	b490      	push	{r4, r7}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b74:	4b1e      	ldr	r3, [pc, #120]	; (8007bf0 <SDMMC_GetCmdResp2+0x84>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a1e      	ldr	r2, [pc, #120]	; (8007bf4 <SDMMC_GetCmdResp2+0x88>)
 8007b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7e:	0a5b      	lsrs	r3, r3, #9
 8007b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007b88:	4623      	mov	r3, r4
 8007b8a:	1e5c      	subs	r4, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b94:	e026      	b.n	8007be4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f0      	beq.n	8007b88 <SDMMC_GetCmdResp2+0x1c>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1eb      	bne.n	8007b88 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d004      	beq.n	8007bc6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2204      	movs	r2, #4
 8007bc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bc2:	2304      	movs	r3, #4
 8007bc4:	e00e      	b.n	8007be4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d004      	beq.n	8007bdc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e003      	b.n	8007be4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	22c5      	movs	r2, #197	; 0xc5
 8007be0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc90      	pop	{r4, r7}
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	20000078 	.word	0x20000078
 8007bf4:	10624dd3 	.word	0x10624dd3

08007bf8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007bf8:	b490      	push	{r4, r7}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c00:	4b18      	ldr	r3, [pc, #96]	; (8007c64 <SDMMC_GetCmdResp3+0x6c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a18      	ldr	r2, [pc, #96]	; (8007c68 <SDMMC_GetCmdResp3+0x70>)
 8007c06:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0a:	0a5b      	lsrs	r3, r3, #9
 8007c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007c14:	4623      	mov	r3, r4
 8007c16:	1e5c      	subs	r4, r3, #1
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d102      	bne.n	8007c22 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c20:	e01b      	b.n	8007c5a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0f0      	beq.n	8007c14 <SDMMC_GetCmdResp3+0x1c>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1eb      	bne.n	8007c14 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d004      	beq.n	8007c52 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c4e:	2304      	movs	r3, #4
 8007c50:	e003      	b.n	8007c5a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	22c5      	movs	r2, #197	; 0xc5
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc90      	pop	{r4, r7}
 8007c62:	4770      	bx	lr
 8007c64:	20000078 	.word	0x20000078
 8007c68:	10624dd3 	.word	0x10624dd3

08007c6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007c6c:	b590      	push	{r4, r7, lr}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	460b      	mov	r3, r1
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c7a:	4b34      	ldr	r3, [pc, #208]	; (8007d4c <SDMMC_GetCmdResp6+0xe0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a34      	ldr	r2, [pc, #208]	; (8007d50 <SDMMC_GetCmdResp6+0xe4>)
 8007c80:	fba2 2303 	umull	r2, r3, r2, r3
 8007c84:	0a5b      	lsrs	r3, r3, #9
 8007c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007c8e:	4623      	mov	r3, r4
 8007c90:	1e5c      	subs	r4, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d102      	bne.n	8007c9c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c9a:	e052      	b.n	8007d42 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0f0      	beq.n	8007c8e <SDMMC_GetCmdResp6+0x22>
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1eb      	bne.n	8007c8e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cba:	f003 0304 	and.w	r3, r3, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2204      	movs	r2, #4
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cc8:	2304      	movs	r3, #4
 8007cca:	e03a      	b.n	8007d42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d004      	beq.n	8007ce2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e02f      	b.n	8007d42 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff fbae 	bl	8007444 <SDIO_GetCommandResponse>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	461a      	mov	r2, r3
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d001      	beq.n	8007cf6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e025      	b.n	8007d42 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	22c5      	movs	r2, #197	; 0xc5
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff fbad 	bl	800745e <SDIO_GetResponse>
 8007d04:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	0c1b      	lsrs	r3, r3, #16
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e011      	b.n	8007d42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d2c:	e009      	b.n	8007d42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d3c:	e001      	b.n	8007d42 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd90      	pop	{r4, r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20000078 	.word	0x20000078
 8007d50:	10624dd3 	.word	0x10624dd3

08007d54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007d54:	b490      	push	{r4, r7}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d5c:	4b21      	ldr	r3, [pc, #132]	; (8007de4 <SDMMC_GetCmdResp7+0x90>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a21      	ldr	r2, [pc, #132]	; (8007de8 <SDMMC_GetCmdResp7+0x94>)
 8007d62:	fba2 2303 	umull	r2, r3, r2, r3
 8007d66:	0a5b      	lsrs	r3, r3, #9
 8007d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d70:	4623      	mov	r3, r4
 8007d72:	1e5c      	subs	r4, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d102      	bne.n	8007d7e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d7c:	e02c      	b.n	8007dd8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d82:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0f0      	beq.n	8007d70 <SDMMC_GetCmdResp7+0x1c>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1eb      	bne.n	8007d70 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d004      	beq.n	8007dae <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2204      	movs	r2, #4
 8007da8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007daa:	2304      	movs	r3, #4
 8007dac:	e014      	b.n	8007dd8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d004      	beq.n	8007dc4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e009      	b.n	8007dd8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2240      	movs	r2, #64	; 0x40
 8007dd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007dd6:	2300      	movs	r3, #0
  
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc90      	pop	{r4, r7}
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000078 	.word	0x20000078
 8007de8:	10624dd3 	.word	0x10624dd3

08007dec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007df0:	4904      	ldr	r1, [pc, #16]	; (8007e04 <MX_FATFS_Init+0x18>)
 8007df2:	4805      	ldr	r0, [pc, #20]	; (8007e08 <MX_FATFS_Init+0x1c>)
 8007df4:	f003 fc0c 	bl	800b610 <FATFS_LinkDriver>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	4b03      	ldr	r3, [pc, #12]	; (8007e0c <MX_FATFS_Init+0x20>)
 8007dfe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007e00:	bf00      	nop
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20004d90 	.word	0x20004d90
 8007e08:	0800e42c 	.word	0x0800e42c
 8007e0c:	20004d8c 	.word	0x20004d8c

08007e10 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007e14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007e2a:	f000 f896 	bl	8007f5a <BSP_SD_IsDetected>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d001      	beq.n	8007e38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e012      	b.n	8007e5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007e38:	480b      	ldr	r0, [pc, #44]	; (8007e68 <BSP_SD_Init+0x48>)
 8007e3a:	f7fc fe83 	bl	8004b44 <HAL_SD_Init>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d109      	bne.n	8007e5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007e48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e4c:	4806      	ldr	r0, [pc, #24]	; (8007e68 <BSP_SD_Init+0x48>)
 8007e4e:	f7fd fc43 	bl	80056d8 <HAL_SD_ConfigWideBusOperation>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007e5c:	79fb      	ldrb	r3, [r7, #7]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20001bc0 	.word	0x20001bc0

08007e6c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	68f9      	ldr	r1, [r7, #12]
 8007e82:	4806      	ldr	r0, [pc, #24]	; (8007e9c <BSP_SD_ReadBlocks_DMA+0x30>)
 8007e84:	f7fc feee 	bl	8004c64 <HAL_SD_ReadBlocks_DMA>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20001bc0 	.word	0x20001bc0

08007ea0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	68f9      	ldr	r1, [r7, #12]
 8007eb6:	4806      	ldr	r0, [pc, #24]	; (8007ed0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007eb8:	f7fc ffbe 	bl	8004e38 <HAL_SD_WriteBlocks_DMA>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20001bc0 	.word	0x20001bc0

08007ed4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007ed8:	4805      	ldr	r0, [pc, #20]	; (8007ef0 <BSP_SD_GetCardState+0x1c>)
 8007eda:	f7fd fc79 	bl	80057d0 <HAL_SD_GetCardState>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	bf14      	ite	ne
 8007ee4:	2301      	movne	r3, #1
 8007ee6:	2300      	moveq	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20001bc0 	.word	0x20001bc0

08007ef4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	4803      	ldr	r0, [pc, #12]	; (8007f0c <BSP_SD_GetCardInfo+0x18>)
 8007f00:	f7fd fbbe 	bl	8005680 <HAL_SD_GetCardInfo>
}
 8007f04:	bf00      	nop
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20001bc0 	.word	0x20001bc0

08007f10 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007f18:	f000 f818 	bl	8007f4c <BSP_SD_AbortCallback>
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007f2c:	f000 fa54 	bl	80083d8 <BSP_SD_WriteCpltCallback>
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007f40:	f000 fa56 	bl	80083f0 <BSP_SD_ReadCpltCallback>
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	af00      	add	r7, sp, #0

}
 8007f50:	bf00      	nop
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007f60:	2301      	movs	r3, #1
 8007f62:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007f64:	f000 f80c 	bl	8007f80 <BSP_PlatformIsDetected>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	b2db      	uxtb	r3, r3
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007f86:	2301      	movs	r3, #1
 8007f88:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007f8a:	2180      	movs	r1, #128	; 0x80
 8007f8c:	480a      	ldr	r0, [pc, #40]	; (8007fb8 <BSP_PlatformIsDetected+0x38>)
 8007f8e:	f7fc f937 	bl	8004200 <HAL_GPIO_ReadPin>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    //printf("s - %u\n", status);
    if(status == SD_PRESENT) status = SD_NOT_PRESENT;
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d102      	bne.n	8007fa8 <BSP_PlatformIsDetected+0x28>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	71fb      	strb	r3, [r7, #7]
 8007fa6:	e001      	b.n	8007fac <BSP_PlatformIsDetected+0x2c>
    else status = SD_PRESENT;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	71fb      	strb	r3, [r7, #7]
    //printf("s - %u\n", status);
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8007fac:	79fb      	ldrb	r3, [r7, #7]
}  
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	40020800 	.word	0x40020800

08007fbc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007fc4:	f7fa febc 	bl	8002d40 <HAL_GetTick>
 8007fc8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007fca:	e006      	b.n	8007fda <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007fcc:	f7ff ff82 	bl	8007ed4 <BSP_SD_GetCardState>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e009      	b.n	8007fee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007fda:	f7fa feb1 	bl	8002d40 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d8f0      	bhi.n	8007fcc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008002:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <SD_CheckStatus+0x38>)
 8008004:	2201      	movs	r2, #1
 8008006:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008008:	f7ff ff64 	bl	8007ed4 <BSP_SD_GetCardState>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d107      	bne.n	8008022 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008012:	4b07      	ldr	r3, [pc, #28]	; (8008030 <SD_CheckStatus+0x38>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	f023 0301 	bic.w	r3, r3, #1
 800801c:	b2da      	uxtb	r2, r3
 800801e:	4b04      	ldr	r3, [pc, #16]	; (8008030 <SD_CheckStatus+0x38>)
 8008020:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008022:	4b03      	ldr	r3, [pc, #12]	; (8008030 <SD_CheckStatus+0x38>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	b2db      	uxtb	r3, r3
}
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20000081 	.word	0x20000081

08008034 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800803e:	f7ff feef 	bl	8007e20 <BSP_SD_Init>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d107      	bne.n	8008058 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff ffd4 	bl	8007ff8 <SD_CheckStatus>
 8008050:	4603      	mov	r3, r0
 8008052:	461a      	mov	r2, r3
 8008054:	4b04      	ldr	r3, [pc, #16]	; (8008068 <SD_initialize+0x34>)
 8008056:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8008058:	4b03      	ldr	r3, [pc, #12]	; (8008068 <SD_initialize+0x34>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	b2db      	uxtb	r3, r3
}
 800805e:	4618      	mov	r0, r3
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20000081 	.word	0x20000081

0800806c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff ffbd 	bl	8007ff8 <SD_CheckStatus>
 800807e:	4603      	mov	r3, r0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af00      	add	r7, sp, #0
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	607a      	str	r2, [r7, #4]
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	4603      	mov	r3, r0
 8008096:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800809c:	f247 5030 	movw	r0, #30000	; 0x7530
 80080a0:	f7ff ff8c 	bl	8007fbc <SD_CheckStatusWithTimeout>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da01      	bge.n	80080ae <SD_read+0x26>
  {
    return res;
 80080aa:	7ffb      	ldrb	r3, [r7, #31]
 80080ac:	e08b      	b.n	80081c6 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f003 0303 	and.w	r3, r3, #3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f040 8085 	bne.w	80081c4 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	68b8      	ldr	r0, [r7, #8]
 80080c0:	f7ff fed4 	bl	8007e6c <BSP_SD_ReadBlocks_DMA>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d133      	bne.n	8008132 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80080ca:	4b41      	ldr	r3, [pc, #260]	; (80081d0 <SD_read+0x148>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80080d0:	f7fa fe36 	bl	8002d40 <HAL_GetTick>
 80080d4:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80080d6:	bf00      	nop
 80080d8:	4b3d      	ldr	r3, [pc, #244]	; (80081d0 <SD_read+0x148>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d108      	bne.n	80080f2 <SD_read+0x6a>
 80080e0:	f7fa fe2e 	bl	8002d40 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	f247 522f 	movw	r2, #29999	; 0x752f
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d9f2      	bls.n	80080d8 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80080f2:	4b37      	ldr	r3, [pc, #220]	; (80081d0 <SD_read+0x148>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d102      	bne.n	8008100 <SD_read+0x78>
      {
        res = RES_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	77fb      	strb	r3, [r7, #31]
 80080fe:	e061      	b.n	80081c4 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8008100:	4b33      	ldr	r3, [pc, #204]	; (80081d0 <SD_read+0x148>)
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008106:	f7fa fe1b 	bl	8002d40 <HAL_GetTick>
 800810a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800810c:	e007      	b.n	800811e <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800810e:	f7ff fee1 	bl	8007ed4 <BSP_SD_GetCardState>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d102      	bne.n	800811e <SD_read+0x96>
          {
            res = RES_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800811c:	e052      	b.n	80081c4 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800811e:	f7fa fe0f 	bl	8002d40 <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	f247 522f 	movw	r2, #29999	; 0x752f
 800812c:	4293      	cmp	r3, r2
 800812e:	d9ee      	bls.n	800810e <SD_read+0x86>
 8008130:	e048      	b.n	80081c4 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8008132:	2300      	movs	r3, #0
 8008134:	61bb      	str	r3, [r7, #24]
 8008136:	e034      	b.n	80081a2 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	607a      	str	r2, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	4619      	mov	r1, r3
 8008142:	4824      	ldr	r0, [pc, #144]	; (80081d4 <SD_read+0x14c>)
 8008144:	f7ff fe92 	bl	8007e6c <BSP_SD_ReadBlocks_DMA>
 8008148:	4603      	mov	r3, r0
 800814a:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800814c:	7fbb      	ldrb	r3, [r7, #30]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d12c      	bne.n	80081ac <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8008152:	4b1f      	ldr	r3, [pc, #124]	; (80081d0 <SD_read+0x148>)
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8008158:	f7fa fdf2 	bl	8002d40 <HAL_GetTick>
 800815c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800815e:	bf00      	nop
 8008160:	4b1b      	ldr	r3, [pc, #108]	; (80081d0 <SD_read+0x148>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d108      	bne.n	800817a <SD_read+0xf2>
 8008168:	f7fa fdea 	bl	8002d40 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	f247 522f 	movw	r2, #29999	; 0x752f
 8008176:	4293      	cmp	r3, r2
 8008178:	d9f2      	bls.n	8008160 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800817a:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <SD_read+0x148>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d016      	beq.n	80081b0 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	4a13      	ldr	r2, [pc, #76]	; (80081d4 <SD_read+0x14c>)
 8008186:	4618      	mov	r0, r3
 8008188:	4611      	mov	r1, r2
 800818a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800818e:	461a      	mov	r2, r3
 8008190:	f003 fb3e 	bl	800b810 <memcpy>
          buff += BLOCKSIZE;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800819a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	3301      	adds	r3, #1
 80081a0:	61bb      	str	r3, [r7, #24]
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d8c6      	bhi.n	8008138 <SD_read+0xb0>
 80081aa:	e002      	b.n	80081b2 <SD_read+0x12a>
        }
        else
        {
          break;
 80081ac:	bf00      	nop
 80081ae:	e000      	b.n	80081b2 <SD_read+0x12a>
            break;
 80081b0:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d104      	bne.n	80081c4 <SD_read+0x13c>
 80081ba:	7fbb      	ldrb	r3, [r7, #30]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <SD_read+0x13c>
        res = RES_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 80081c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3720      	adds	r7, #32
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000494 	.word	0x20000494
 80081d4:	20000290 	.word	0x20000290

080081d8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	607a      	str	r2, [r7, #4]
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	4603      	mov	r3, r0
 80081e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 80081ec:	4b4c      	ldr	r3, [pc, #304]	; (8008320 <SD_write+0x148>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80081f2:	f247 5030 	movw	r0, #30000	; 0x7530
 80081f6:	f7ff fee1 	bl	8007fbc <SD_CheckStatusWithTimeout>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	da01      	bge.n	8008204 <SD_write+0x2c>
  {
    return res;
 8008200:	7ffb      	ldrb	r3, [r7, #31]
 8008202:	e088      	b.n	8008316 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	2b00      	cmp	r3, #0
 800820c:	f040 8082 	bne.w	8008314 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	68b8      	ldr	r0, [r7, #8]
 8008216:	f7ff fe43 	bl	8007ea0 <BSP_SD_WriteBlocks_DMA>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d130      	bne.n	8008282 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008220:	f7fa fd8e 	bl	8002d40 <HAL_GetTick>
 8008224:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008226:	bf00      	nop
 8008228:	4b3d      	ldr	r3, [pc, #244]	; (8008320 <SD_write+0x148>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d108      	bne.n	8008242 <SD_write+0x6a>
 8008230:	f7fa fd86 	bl	8002d40 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	f247 522f 	movw	r2, #29999	; 0x752f
 800823e:	4293      	cmp	r3, r2
 8008240:	d9f2      	bls.n	8008228 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8008242:	4b37      	ldr	r3, [pc, #220]	; (8008320 <SD_write+0x148>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <SD_write+0x78>
      {
        res = RES_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	77fb      	strb	r3, [r7, #31]
 800824e:	e061      	b.n	8008314 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8008250:	4b33      	ldr	r3, [pc, #204]	; (8008320 <SD_write+0x148>)
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008256:	f7fa fd73 	bl	8002d40 <HAL_GetTick>
 800825a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800825c:	e007      	b.n	800826e <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800825e:	f7ff fe39 	bl	8007ed4 <BSP_SD_GetCardState>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <SD_write+0x96>
          {
            res = RES_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	77fb      	strb	r3, [r7, #31]
            break;
 800826c:	e052      	b.n	8008314 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800826e:	f7fa fd67 	bl	8002d40 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	f247 522f 	movw	r2, #29999	; 0x752f
 800827c:	4293      	cmp	r3, r2
 800827e:	d9ee      	bls.n	800825e <SD_write+0x86>
 8008280:	e048      	b.n	8008314 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8008282:	2300      	movs	r3, #0
 8008284:	61bb      	str	r3, [r7, #24]
 8008286:	e034      	b.n	80082f2 <SD_write+0x11a>
      {
        WriteStatus = 0;
 8008288:	4b25      	ldr	r3, [pc, #148]	; (8008320 <SD_write+0x148>)
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	4619      	mov	r1, r3
 8008298:	4822      	ldr	r0, [pc, #136]	; (8008324 <SD_write+0x14c>)
 800829a:	f7ff fe01 	bl	8007ea0 <BSP_SD_WriteBlocks_DMA>
 800829e:	4603      	mov	r3, r0
 80082a0:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80082a2:	7fbb      	ldrb	r3, [r7, #30]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d129      	bne.n	80082fc <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 80082a8:	f7fa fd4a 	bl	8002d40 <HAL_GetTick>
 80082ac:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80082ae:	bf00      	nop
 80082b0:	4b1b      	ldr	r3, [pc, #108]	; (8008320 <SD_write+0x148>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d108      	bne.n	80082ca <SD_write+0xf2>
 80082b8:	f7fa fd42 	bl	8002d40 <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	f247 522f 	movw	r2, #29999	; 0x752f
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d9f2      	bls.n	80082b0 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 80082ca:	4b15      	ldr	r3, [pc, #84]	; (8008320 <SD_write+0x148>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d016      	beq.n	8008300 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	4a13      	ldr	r2, [pc, #76]	; (8008324 <SD_write+0x14c>)
 80082d6:	4618      	mov	r0, r3
 80082d8:	4611      	mov	r1, r2
 80082da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082de:	461a      	mov	r2, r3
 80082e0:	f003 fa96 	bl	800b810 <memcpy>
          buff += BLOCKSIZE;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80082ea:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	3301      	adds	r3, #1
 80082f0:	61bb      	str	r3, [r7, #24]
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d8c6      	bhi.n	8008288 <SD_write+0xb0>
 80082fa:	e002      	b.n	8008302 <SD_write+0x12a>
        }
        else
        {
          break;
 80082fc:	bf00      	nop
 80082fe:	e000      	b.n	8008302 <SD_write+0x12a>
            break;
 8008300:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d104      	bne.n	8008314 <SD_write+0x13c>
 800830a:	7fbb      	ldrb	r3, [r7, #30]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <SD_write+0x13c>
        res = RES_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8008314:	7ffb      	ldrb	r3, [r7, #31]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3720      	adds	r7, #32
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000490 	.word	0x20000490
 8008324:	20000290 	.word	0x20000290

08008328 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08c      	sub	sp, #48	; 0x30
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	603a      	str	r2, [r7, #0]
 8008332:	71fb      	strb	r3, [r7, #7]
 8008334:	460b      	mov	r3, r1
 8008336:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800833e:	4b25      	ldr	r3, [pc, #148]	; (80083d4 <SD_ioctl+0xac>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	b2db      	uxtb	r3, r3
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <SD_ioctl+0x28>
 800834c:	2303      	movs	r3, #3
 800834e:	e03c      	b.n	80083ca <SD_ioctl+0xa2>

  switch (cmd)
 8008350:	79bb      	ldrb	r3, [r7, #6]
 8008352:	2b03      	cmp	r3, #3
 8008354:	d834      	bhi.n	80083c0 <SD_ioctl+0x98>
 8008356:	a201      	add	r2, pc, #4	; (adr r2, 800835c <SD_ioctl+0x34>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	0800836d 	.word	0x0800836d
 8008360:	08008375 	.word	0x08008375
 8008364:	0800838d 	.word	0x0800838d
 8008368:	080083a7 	.word	0x080083a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008372:	e028      	b.n	80083c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008374:	f107 030c 	add.w	r3, r7, #12
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff fdbb 	bl	8007ef4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800837e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800838a:	e01c      	b.n	80083c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800838c:	f107 030c 	add.w	r3, r7, #12
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff fdaf 	bl	8007ef4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	b29a      	uxth	r2, r3
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80083a4:	e00f      	b.n	80083c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80083a6:	f107 030c 	add.w	r3, r7, #12
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7ff fda2 	bl	8007ef4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	0a5a      	lsrs	r2, r3, #9
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80083be:	e002      	b.n	80083c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80083c0:	2304      	movs	r3, #4
 80083c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80083c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3730      	adds	r7, #48	; 0x30
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000081 	.word	0x20000081

080083d8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 80083dc:	4b03      	ldr	r3, [pc, #12]	; (80083ec <BSP_SD_WriteCpltCallback+0x14>)
 80083de:	2201      	movs	r2, #1
 80083e0:	601a      	str	r2, [r3, #0]
}
 80083e2:	bf00      	nop
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	20000490 	.word	0x20000490

080083f0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80083f4:	4b03      	ldr	r3, [pc, #12]	; (8008404 <BSP_SD_ReadCpltCallback+0x14>)
 80083f6:	2201      	movs	r2, #1
 80083f8:	601a      	str	r2, [r3, #0]
}
 80083fa:	bf00      	nop
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	20000494 	.word	0x20000494

08008408 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	4a08      	ldr	r2, [pc, #32]	; (8008438 <disk_status+0x30>)
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	79fa      	ldrb	r2, [r7, #7]
 8008420:	4905      	ldr	r1, [pc, #20]	; (8008438 <disk_status+0x30>)
 8008422:	440a      	add	r2, r1
 8008424:	7a12      	ldrb	r2, [r2, #8]
 8008426:	4610      	mov	r0, r2
 8008428:	4798      	blx	r3
 800842a:	4603      	mov	r3, r0
 800842c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	200006c0 	.word	0x200006c0

0800843c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	4a0d      	ldr	r2, [pc, #52]	; (8008484 <disk_initialize+0x48>)
 800844e:	5cd3      	ldrb	r3, [r2, r3]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d111      	bne.n	8008478 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	4a0b      	ldr	r2, [pc, #44]	; (8008484 <disk_initialize+0x48>)
 8008458:	2101      	movs	r1, #1
 800845a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	4a09      	ldr	r2, [pc, #36]	; (8008484 <disk_initialize+0x48>)
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	79fa      	ldrb	r2, [r7, #7]
 800846a:	4906      	ldr	r1, [pc, #24]	; (8008484 <disk_initialize+0x48>)
 800846c:	440a      	add	r2, r1
 800846e:	7a12      	ldrb	r2, [r2, #8]
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	200006c0 	.word	0x200006c0

08008488 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008488:	b590      	push	{r4, r7, lr}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	607a      	str	r2, [r7, #4]
 8008492:	603b      	str	r3, [r7, #0]
 8008494:	4603      	mov	r3, r0
 8008496:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	4a0a      	ldr	r2, [pc, #40]	; (80084c4 <disk_read+0x3c>)
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	689c      	ldr	r4, [r3, #8]
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	4a07      	ldr	r2, [pc, #28]	; (80084c4 <disk_read+0x3c>)
 80084a8:	4413      	add	r3, r2
 80084aa:	7a18      	ldrb	r0, [r3, #8]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	68b9      	ldr	r1, [r7, #8]
 80084b2:	47a0      	blx	r4
 80084b4:	4603      	mov	r3, r0
 80084b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	371c      	adds	r7, #28
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd90      	pop	{r4, r7, pc}
 80084c2:	bf00      	nop
 80084c4:	200006c0 	.word	0x200006c0

080084c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80084c8:	b590      	push	{r4, r7, lr}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	4603      	mov	r3, r0
 80084d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	4a0a      	ldr	r2, [pc, #40]	; (8008504 <disk_write+0x3c>)
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	68dc      	ldr	r4, [r3, #12]
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	4a07      	ldr	r2, [pc, #28]	; (8008504 <disk_write+0x3c>)
 80084e8:	4413      	add	r3, r2
 80084ea:	7a18      	ldrb	r0, [r3, #8]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	47a0      	blx	r4
 80084f4:	4603      	mov	r3, r0
 80084f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd90      	pop	{r4, r7, pc}
 8008502:	bf00      	nop
 8008504:	200006c0 	.word	0x200006c0

08008508 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	603a      	str	r2, [r7, #0]
 8008512:	71fb      	strb	r3, [r7, #7]
 8008514:	460b      	mov	r3, r1
 8008516:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	4a09      	ldr	r2, [pc, #36]	; (8008540 <disk_ioctl+0x38>)
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	79fa      	ldrb	r2, [r7, #7]
 8008526:	4906      	ldr	r1, [pc, #24]	; (8008540 <disk_ioctl+0x38>)
 8008528:	440a      	add	r2, r1
 800852a:	7a10      	ldrb	r0, [r2, #8]
 800852c:	79b9      	ldrb	r1, [r7, #6]
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	4798      	blx	r3
 8008532:	4603      	mov	r3, r0
 8008534:	73fb      	strb	r3, [r7, #15]
  return res;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	200006c0 	.word	0x200006c0

08008544 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3301      	adds	r3, #1
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008554:	89fb      	ldrh	r3, [r7, #14]
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	b21a      	sxth	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	b21b      	sxth	r3, r3
 8008560:	4313      	orrs	r3, r2
 8008562:	b21b      	sxth	r3, r3
 8008564:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008566:	89fb      	ldrh	r3, [r7, #14]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3303      	adds	r3, #3
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	3202      	adds	r2, #2
 800858c:	7812      	ldrb	r2, [r2, #0]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	021b      	lsls	r3, r3, #8
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	3201      	adds	r2, #1
 800859a:	7812      	ldrb	r2, [r2, #0]
 800859c:	4313      	orrs	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	021b      	lsls	r3, r3, #8
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	7812      	ldrb	r2, [r2, #0]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80085ac:	68fb      	ldr	r3, [r7, #12]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	887a      	ldrh	r2, [r7, #2]
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	887b      	ldrh	r3, [r7, #2]
 80085d4:	0a1b      	lsrs	r3, r3, #8
 80085d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	607a      	str	r2, [r7, #4]
 80085de:	887a      	ldrh	r2, [r7, #2]
 80085e0:	b2d2      	uxtb	r2, r2
 80085e2:	701a      	strb	r2, [r3, #0]
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	b2d2      	uxtb	r2, r2
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	0a1b      	lsrs	r3, r3, #8
 800860a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	b2d2      	uxtb	r2, r2
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	0a1b      	lsrs	r3, r3, #8
 800861c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	b2d2      	uxtb	r2, r2
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	0a1b      	lsrs	r3, r3, #8
 800862e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	607a      	str	r2, [r7, #4]
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	b2d2      	uxtb	r2, r2
 800863a:	701a      	strb	r2, [r3, #0]
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00d      	beq.n	800867e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	1c53      	adds	r3, r2, #1
 8008666:	613b      	str	r3, [r7, #16]
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	1c59      	adds	r1, r3, #1
 800866c:	6179      	str	r1, [r7, #20]
 800866e:	7812      	ldrb	r2, [r2, #0]
 8008670:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3b01      	subs	r3, #1
 8008676:	607b      	str	r3, [r7, #4]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f1      	bne.n	8008662 <mem_cpy+0x1a>
	}
}
 800867e:	bf00      	nop
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800868a:	b480      	push	{r7}
 800868c:	b087      	sub	sp, #28
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	617a      	str	r2, [r7, #20]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	b2d2      	uxtb	r2, r2
 80086a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	607b      	str	r3, [r7, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f3      	bne.n	800869a <mem_set+0x10>
}
 80086b2:	bf00      	nop
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80086be:	b480      	push	{r7}
 80086c0:	b089      	sub	sp, #36	; 0x24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	61fb      	str	r3, [r7, #28]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	1c5a      	adds	r2, r3, #1
 80086da:	61fa      	str	r2, [r7, #28]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	4619      	mov	r1, r3
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	61ba      	str	r2, [r7, #24]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	1acb      	subs	r3, r1, r3
 80086ea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	607b      	str	r3, [r7, #4]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <mem_cmp+0x40>
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0eb      	beq.n	80086d6 <mem_cmp+0x18>

	return r;
 80086fe:	697b      	ldr	r3, [r7, #20]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3724      	adds	r7, #36	; 0x24
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008716:	e002      	b.n	800871e <chk_chr+0x12>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3301      	adds	r3, #1
 800871c:	607b      	str	r3, [r7, #4]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <chk_chr+0x26>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	4293      	cmp	r3, r2
 8008730:	d1f2      	bne.n	8008718 <chk_chr+0xc>
	return *str;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	781b      	ldrb	r3, [r3, #0]
}
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800874e:	2300      	movs	r3, #0
 8008750:	60bb      	str	r3, [r7, #8]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	e029      	b.n	80087ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008758:	4a27      	ldr	r2, [pc, #156]	; (80087f8 <chk_lock+0xb4>)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	011b      	lsls	r3, r3, #4
 800875e:	4413      	add	r3, r2
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d01d      	beq.n	80087a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008766:	4a24      	ldr	r2, [pc, #144]	; (80087f8 <chk_lock+0xb4>)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	011b      	lsls	r3, r3, #4
 800876c:	4413      	add	r3, r2
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d116      	bne.n	80087a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008778:	4a1f      	ldr	r2, [pc, #124]	; (80087f8 <chk_lock+0xb4>)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	011b      	lsls	r3, r3, #4
 800877e:	4413      	add	r3, r2
 8008780:	3304      	adds	r3, #4
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008788:	429a      	cmp	r2, r3
 800878a:	d10c      	bne.n	80087a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800878c:	4a1a      	ldr	r2, [pc, #104]	; (80087f8 <chk_lock+0xb4>)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	011b      	lsls	r3, r3, #4
 8008792:	4413      	add	r3, r2
 8008794:	3308      	adds	r3, #8
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800879c:	429a      	cmp	r2, r3
 800879e:	d102      	bne.n	80087a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80087a0:	e007      	b.n	80087b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80087a2:	2301      	movs	r3, #1
 80087a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3301      	adds	r3, #1
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d9d2      	bls.n	8008758 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d109      	bne.n	80087cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d102      	bne.n	80087c4 <chk_lock+0x80>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d101      	bne.n	80087c8 <chk_lock+0x84>
 80087c4:	2300      	movs	r3, #0
 80087c6:	e010      	b.n	80087ea <chk_lock+0xa6>
 80087c8:	2312      	movs	r3, #18
 80087ca:	e00e      	b.n	80087ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d108      	bne.n	80087e4 <chk_lock+0xa0>
 80087d2:	4a09      	ldr	r2, [pc, #36]	; (80087f8 <chk_lock+0xb4>)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	011b      	lsls	r3, r3, #4
 80087d8:	4413      	add	r3, r2
 80087da:	330c      	adds	r3, #12
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e2:	d101      	bne.n	80087e8 <chk_lock+0xa4>
 80087e4:	2310      	movs	r3, #16
 80087e6:	e000      	b.n	80087ea <chk_lock+0xa6>
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	200004a0 	.word	0x200004a0

080087fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008802:	2300      	movs	r3, #0
 8008804:	607b      	str	r3, [r7, #4]
 8008806:	e002      	b.n	800880e <enq_lock+0x12>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3301      	adds	r3, #1
 800880c:	607b      	str	r3, [r7, #4]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d806      	bhi.n	8008822 <enq_lock+0x26>
 8008814:	4a09      	ldr	r2, [pc, #36]	; (800883c <enq_lock+0x40>)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	4413      	add	r3, r2
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1f2      	bne.n	8008808 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b02      	cmp	r3, #2
 8008826:	bf14      	ite	ne
 8008828:	2301      	movne	r3, #1
 800882a:	2300      	moveq	r3, #0
 800882c:	b2db      	uxtb	r3, r3
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	200004a0 	.word	0x200004a0

08008840 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	e01f      	b.n	8008890 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008850:	4a41      	ldr	r2, [pc, #260]	; (8008958 <inc_lock+0x118>)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	011b      	lsls	r3, r3, #4
 8008856:	4413      	add	r3, r2
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	429a      	cmp	r2, r3
 8008860:	d113      	bne.n	800888a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008862:	4a3d      	ldr	r2, [pc, #244]	; (8008958 <inc_lock+0x118>)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	4413      	add	r3, r2
 800886a:	3304      	adds	r3, #4
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008872:	429a      	cmp	r2, r3
 8008874:	d109      	bne.n	800888a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008876:	4a38      	ldr	r2, [pc, #224]	; (8008958 <inc_lock+0x118>)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	4413      	add	r3, r2
 800887e:	3308      	adds	r3, #8
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008886:	429a      	cmp	r2, r3
 8008888:	d006      	beq.n	8008898 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3301      	adds	r3, #1
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d9dc      	bls.n	8008850 <inc_lock+0x10>
 8008896:	e000      	b.n	800889a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008898:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d132      	bne.n	8008906 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e002      	b.n	80088ac <inc_lock+0x6c>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3301      	adds	r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d806      	bhi.n	80088c0 <inc_lock+0x80>
 80088b2:	4a29      	ldr	r2, [pc, #164]	; (8008958 <inc_lock+0x118>)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	4413      	add	r3, r2
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1f2      	bne.n	80088a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d101      	bne.n	80088ca <inc_lock+0x8a>
 80088c6:	2300      	movs	r3, #0
 80088c8:	e040      	b.n	800894c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	4922      	ldr	r1, [pc, #136]	; (8008958 <inc_lock+0x118>)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	011b      	lsls	r3, r3, #4
 80088d4:	440b      	add	r3, r1
 80088d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	491e      	ldr	r1, [pc, #120]	; (8008958 <inc_lock+0x118>)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	011b      	lsls	r3, r3, #4
 80088e2:	440b      	add	r3, r1
 80088e4:	3304      	adds	r3, #4
 80088e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695a      	ldr	r2, [r3, #20]
 80088ec:	491a      	ldr	r1, [pc, #104]	; (8008958 <inc_lock+0x118>)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	011b      	lsls	r3, r3, #4
 80088f2:	440b      	add	r3, r1
 80088f4:	3308      	adds	r3, #8
 80088f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80088f8:	4a17      	ldr	r2, [pc, #92]	; (8008958 <inc_lock+0x118>)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	4413      	add	r3, r2
 8008900:	330c      	adds	r3, #12
 8008902:	2200      	movs	r2, #0
 8008904:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d009      	beq.n	8008920 <inc_lock+0xe0>
 800890c:	4a12      	ldr	r2, [pc, #72]	; (8008958 <inc_lock+0x118>)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	4413      	add	r3, r2
 8008914:	330c      	adds	r3, #12
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <inc_lock+0xe0>
 800891c:	2300      	movs	r3, #0
 800891e:	e015      	b.n	800894c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d108      	bne.n	8008938 <inc_lock+0xf8>
 8008926:	4a0c      	ldr	r2, [pc, #48]	; (8008958 <inc_lock+0x118>)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	4413      	add	r3, r2
 800892e:	330c      	adds	r3, #12
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	3301      	adds	r3, #1
 8008934:	b29a      	uxth	r2, r3
 8008936:	e001      	b.n	800893c <inc_lock+0xfc>
 8008938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800893c:	4906      	ldr	r1, [pc, #24]	; (8008958 <inc_lock+0x118>)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	011b      	lsls	r3, r3, #4
 8008942:	440b      	add	r3, r1
 8008944:	330c      	adds	r3, #12
 8008946:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3301      	adds	r3, #1
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	200004a0 	.word	0x200004a0

0800895c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3b01      	subs	r3, #1
 8008968:	607b      	str	r3, [r7, #4]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d825      	bhi.n	80089bc <dec_lock+0x60>
		n = Files[i].ctr;
 8008970:	4a17      	ldr	r2, [pc, #92]	; (80089d0 <dec_lock+0x74>)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	011b      	lsls	r3, r3, #4
 8008976:	4413      	add	r3, r2
 8008978:	330c      	adds	r3, #12
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800897e:	89fb      	ldrh	r3, [r7, #14]
 8008980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008984:	d101      	bne.n	800898a <dec_lock+0x2e>
 8008986:	2300      	movs	r3, #0
 8008988:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800898a:	89fb      	ldrh	r3, [r7, #14]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <dec_lock+0x3a>
 8008990:	89fb      	ldrh	r3, [r7, #14]
 8008992:	3b01      	subs	r3, #1
 8008994:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008996:	4a0e      	ldr	r2, [pc, #56]	; (80089d0 <dec_lock+0x74>)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	4413      	add	r3, r2
 800899e:	330c      	adds	r3, #12
 80089a0:	89fa      	ldrh	r2, [r7, #14]
 80089a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089a4:	89fb      	ldrh	r3, [r7, #14]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d105      	bne.n	80089b6 <dec_lock+0x5a>
 80089aa:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <dec_lock+0x74>)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	4413      	add	r3, r2
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	737b      	strb	r3, [r7, #13]
 80089ba:	e001      	b.n	80089c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80089bc:	2302      	movs	r3, #2
 80089be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80089c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	200004a0 	.word	0x200004a0

080089d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	e010      	b.n	8008a04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80089e2:	4a0d      	ldr	r2, [pc, #52]	; (8008a18 <clear_lock+0x44>)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	4413      	add	r3, r2
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d105      	bne.n	80089fe <clear_lock+0x2a>
 80089f2:	4a09      	ldr	r2, [pc, #36]	; (8008a18 <clear_lock+0x44>)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	011b      	lsls	r3, r3, #4
 80089f8:	4413      	add	r3, r2
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	3301      	adds	r3, #1
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d9eb      	bls.n	80089e2 <clear_lock+0xe>
	}
}
 8008a0a:	bf00      	nop
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	200004a0 	.word	0x200004a0

08008a1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	78db      	ldrb	r3, [r3, #3]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d034      	beq.n	8008a9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	7858      	ldrb	r0, [r3, #1]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a40:	2301      	movs	r3, #1
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	f7ff fd40 	bl	80084c8 <disk_write>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	73fb      	strb	r3, [r7, #15]
 8008a52:	e022      	b.n	8008a9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	1ad2      	subs	r2, r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d217      	bcs.n	8008a9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	789b      	ldrb	r3, [r3, #2]
 8008a6e:	613b      	str	r3, [r7, #16]
 8008a70:	e010      	b.n	8008a94 <sync_window+0x78>
					wsect += fs->fsize;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	4413      	add	r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	7858      	ldrb	r0, [r3, #1]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a86:	2301      	movs	r3, #1
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	f7ff fd1d 	bl	80084c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d8eb      	bhi.n	8008a72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d01b      	beq.n	8008af4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff ffad 	bl	8008a1c <sync_window>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d113      	bne.n	8008af4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	7858      	ldrb	r0, [r3, #1]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	f7ff fcd5 	bl	8008488 <disk_read>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d004      	beq.n	8008aee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
	...

08008b00 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff ff87 	bl	8008a1c <sync_window>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d159      	bne.n	8008bcc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d149      	bne.n	8008bb4 <sync_fs+0xb4>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	791b      	ldrb	r3, [r3, #4]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d145      	bne.n	8008bb4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	899b      	ldrh	r3, [r3, #12]
 8008b32:	461a      	mov	r2, r3
 8008b34:	2100      	movs	r1, #0
 8008b36:	f7ff fda8 	bl	800868a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3338      	adds	r3, #56	; 0x38
 8008b3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b42:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff fd37 	bl	80085ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3338      	adds	r3, #56	; 0x38
 8008b50:	4921      	ldr	r1, [pc, #132]	; (8008bd8 <sync_fs+0xd8>)
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7ff fd4c 	bl	80085f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3338      	adds	r3, #56	; 0x38
 8008b5c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b60:	491e      	ldr	r1, [pc, #120]	; (8008bdc <sync_fs+0xdc>)
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7ff fd44 	bl	80085f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3338      	adds	r3, #56	; 0x38
 8008b6c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	4619      	mov	r1, r3
 8008b76:	4610      	mov	r0, r2
 8008b78:	f7ff fd3a 	bl	80085f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3338      	adds	r3, #56	; 0x38
 8008b80:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	f7ff fd30 	bl	80085f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	1c5a      	adds	r2, r3, #1
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	7858      	ldrb	r0, [r3, #1]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ba8:	2301      	movs	r3, #1
 8008baa:	f7ff fc8d 	bl	80084c8 <disk_write>
			fs->fsi_flag = 0;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	785b      	ldrb	r3, [r3, #1]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fca3 	bl	8008508 <disk_ioctl>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <sync_fs+0xcc>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	41615252 	.word	0x41615252
 8008bdc:	61417272 	.word	0x61417272

08008be0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	3b02      	subs	r3, #2
 8008bee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	3b02      	subs	r3, #2
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d301      	bcc.n	8008c00 <clust2sect+0x20>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e008      	b.n	8008c12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	895b      	ldrh	r3, [r3, #10]
 8008c04:	461a      	mov	r2, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	fb03 f202 	mul.w	r2, r3, r2
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c10:	4413      	add	r3, r2
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b086      	sub	sp, #24
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d904      	bls.n	8008c3e <get_fat+0x20>
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d302      	bcc.n	8008c44 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008c3e:	2301      	movs	r3, #1
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	e0b7      	b.n	8008db4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008c44:	f04f 33ff 	mov.w	r3, #4294967295
 8008c48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d05a      	beq.n	8008d08 <get_fat+0xea>
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d07d      	beq.n	8008d52 <get_fat+0x134>
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	f040 80a2 	bne.w	8008da0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	085b      	lsrs	r3, r3, #1
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	899b      	ldrh	r3, [r3, #12]
 8008c72:	4619      	mov	r1, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c7a:	4413      	add	r3, r2
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6938      	ldr	r0, [r7, #16]
 8008c80:	f7ff ff10 	bl	8008aa4 <move_window>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f040 808d 	bne.w	8008da6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	60fa      	str	r2, [r7, #12]
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	8992      	ldrh	r2, [r2, #12]
 8008c96:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c9a:	fb02 f201 	mul.w	r2, r2, r1
 8008c9e:	1a9b      	subs	r3, r3, r2
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ca8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	899b      	ldrh	r3, [r3, #12]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cba:	4413      	add	r3, r2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6938      	ldr	r0, [r7, #16]
 8008cc0:	f7ff fef0 	bl	8008aa4 <move_window>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d16f      	bne.n	8008daa <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	899b      	ldrh	r3, [r3, #12]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cd6:	fb02 f201 	mul.w	r2, r2, r1
 8008cda:	1a9b      	subs	r3, r3, r2
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ce4:	021b      	lsls	r3, r3, #8
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <get_fat+0xe0>
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	091b      	lsrs	r3, r3, #4
 8008cfc:	e002      	b.n	8008d04 <get_fat+0xe6>
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d04:	617b      	str	r3, [r7, #20]
			break;
 8008d06:	e055      	b.n	8008db4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	899b      	ldrh	r3, [r3, #12]
 8008d10:	085b      	lsrs	r3, r3, #1
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	4619      	mov	r1, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d1c:	4413      	add	r3, r2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6938      	ldr	r0, [r7, #16]
 8008d22:	f7ff febf 	bl	8008aa4 <move_window>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d140      	bne.n	8008dae <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	005b      	lsls	r3, r3, #1
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	8992      	ldrh	r2, [r2, #12]
 8008d3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d3e:	fb02 f200 	mul.w	r2, r2, r0
 8008d42:	1a9b      	subs	r3, r3, r2
 8008d44:	440b      	add	r3, r1
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff fbfc 	bl	8008544 <ld_word>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	617b      	str	r3, [r7, #20]
			break;
 8008d50:	e030      	b.n	8008db4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	899b      	ldrh	r3, [r3, #12]
 8008d5a:	089b      	lsrs	r3, r3, #2
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	4619      	mov	r1, r3
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d66:	4413      	add	r3, r2
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6938      	ldr	r0, [r7, #16]
 8008d6c:	f7ff fe9a 	bl	8008aa4 <move_window>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d11d      	bne.n	8008db2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	8992      	ldrh	r2, [r2, #12]
 8008d84:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d88:	fb02 f200 	mul.w	r2, r2, r0
 8008d8c:	1a9b      	subs	r3, r3, r2
 8008d8e:	440b      	add	r3, r1
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7ff fbef 	bl	8008574 <ld_dword>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008d9c:	617b      	str	r3, [r7, #20]
			break;
 8008d9e:	e009      	b.n	8008db4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008da0:	2301      	movs	r3, #1
 8008da2:	617b      	str	r3, [r7, #20]
 8008da4:	e006      	b.n	8008db4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008da6:	bf00      	nop
 8008da8:	e004      	b.n	8008db4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008daa:	bf00      	nop
 8008dac:	e002      	b.n	8008db4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008dae:	bf00      	nop
 8008db0:	e000      	b.n	8008db4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008db2:	bf00      	nop
		}
	}

	return val;
 8008db4:	697b      	ldr	r3, [r7, #20]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008dbe:	b590      	push	{r4, r7, lr}
 8008dc0:	b089      	sub	sp, #36	; 0x24
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	f240 8106 	bls.w	8008fe2 <put_fat+0x224>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	f080 8100 	bcs.w	8008fe2 <put_fat+0x224>
		switch (fs->fs_type) {
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	f000 8088 	beq.w	8008efc <put_fat+0x13e>
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	f000 80b0 	beq.w	8008f52 <put_fat+0x194>
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	f040 80f5 	bne.w	8008fe2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	61bb      	str	r3, [r7, #24]
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	085b      	lsrs	r3, r3, #1
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	4413      	add	r3, r2
 8008e04:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	899b      	ldrh	r3, [r3, #12]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e16:	4413      	add	r3, r2
 8008e18:	4619      	mov	r1, r3
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f7ff fe42 	bl	8008aa4 <move_window>
 8008e20:	4603      	mov	r3, r0
 8008e22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e24:	7ffb      	ldrb	r3, [r7, #31]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f040 80d4 	bne.w	8008fd4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	61ba      	str	r2, [r7, #24]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	8992      	ldrh	r2, [r2, #12]
 8008e3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e40:	fb02 f200 	mul.w	r2, r2, r0
 8008e44:	1a9b      	subs	r3, r3, r2
 8008e46:	440b      	add	r3, r1
 8008e48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00d      	beq.n	8008e70 <put_fat+0xb2>
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	b25b      	sxtb	r3, r3
 8008e5a:	f003 030f 	and.w	r3, r3, #15
 8008e5e:	b25a      	sxtb	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	011b      	lsls	r3, r3, #4
 8008e66:	b25b      	sxtb	r3, r3
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	b25b      	sxtb	r3, r3
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	e001      	b.n	8008e74 <put_fat+0xb6>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	899b      	ldrh	r3, [r3, #12]
 8008e86:	4619      	mov	r1, r3
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e8e:	4413      	add	r3, r2
 8008e90:	4619      	mov	r1, r3
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f7ff fe06 	bl	8008aa4 <move_window>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e9c:	7ffb      	ldrb	r3, [r7, #31]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f040 809a 	bne.w	8008fd8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	899b      	ldrh	r3, [r3, #12]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008eb6:	fb02 f200 	mul.w	r2, r2, r0
 8008eba:	1a9b      	subs	r3, r3, r2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <put_fat+0x114>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	091b      	lsrs	r3, r3, #4
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	e00e      	b.n	8008ef0 <put_fat+0x132>
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	b25b      	sxtb	r3, r3
 8008ed8:	f023 030f 	bic.w	r3, r3, #15
 8008edc:	b25a      	sxtb	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	0a1b      	lsrs	r3, r3, #8
 8008ee2:	b25b      	sxtb	r3, r3
 8008ee4:	f003 030f 	and.w	r3, r3, #15
 8008ee8:	b25b      	sxtb	r3, r3
 8008eea:	4313      	orrs	r3, r2
 8008eec:	b25b      	sxtb	r3, r3
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	70da      	strb	r2, [r3, #3]
			break;
 8008efa:	e072      	b.n	8008fe2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	899b      	ldrh	r3, [r3, #12]
 8008f04:	085b      	lsrs	r3, r3, #1
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	4619      	mov	r1, r3
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f10:	4413      	add	r3, r2
 8008f12:	4619      	mov	r1, r3
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f7ff fdc5 	bl	8008aa4 <move_window>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f1e:	7ffb      	ldrb	r3, [r7, #31]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d15b      	bne.n	8008fdc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	8992      	ldrh	r2, [r2, #12]
 8008f32:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f36:	fb02 f200 	mul.w	r2, r2, r0
 8008f3a:	1a9b      	subs	r3, r3, r2
 8008f3c:	440b      	add	r3, r1
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	b292      	uxth	r2, r2
 8008f42:	4611      	mov	r1, r2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7ff fb38 	bl	80085ba <st_word>
			fs->wflag = 1;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	70da      	strb	r2, [r3, #3]
			break;
 8008f50:	e047      	b.n	8008fe2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	899b      	ldrh	r3, [r3, #12]
 8008f5a:	089b      	lsrs	r3, r3, #2
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	4619      	mov	r1, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f66:	4413      	add	r3, r2
 8008f68:	4619      	mov	r1, r3
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff fd9a 	bl	8008aa4 <move_window>
 8008f70:	4603      	mov	r3, r0
 8008f72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f74:	7ffb      	ldrb	r3, [r7, #31]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d132      	bne.n	8008fe0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	8992      	ldrh	r2, [r2, #12]
 8008f8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f92:	fb02 f200 	mul.w	r2, r2, r0
 8008f96:	1a9b      	subs	r3, r3, r2
 8008f98:	440b      	add	r3, r1
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7ff faea 	bl	8008574 <ld_dword>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008fa6:	4323      	orrs	r3, r4
 8008fa8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	8992      	ldrh	r2, [r2, #12]
 8008fb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fbc:	fb02 f200 	mul.w	r2, r2, r0
 8008fc0:	1a9b      	subs	r3, r3, r2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff fb12 	bl	80085f0 <st_dword>
			fs->wflag = 1;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	70da      	strb	r2, [r3, #3]
			break;
 8008fd2:	e006      	b.n	8008fe2 <put_fat+0x224>
			if (res != FR_OK) break;
 8008fd4:	bf00      	nop
 8008fd6:	e004      	b.n	8008fe2 <put_fat+0x224>
			if (res != FR_OK) break;
 8008fd8:	bf00      	nop
 8008fda:	e002      	b.n	8008fe2 <put_fat+0x224>
			if (res != FR_OK) break;
 8008fdc:	bf00      	nop
 8008fde:	e000      	b.n	8008fe2 <put_fat+0x224>
			if (res != FR_OK) break;
 8008fe0:	bf00      	nop
		}
	}
	return res;
 8008fe2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3724      	adds	r7, #36	; 0x24
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd90      	pop	{r4, r7, pc}

08008fec <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d904      	bls.n	8009012 <remove_chain+0x26>
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	429a      	cmp	r2, r3
 8009010:	d301      	bcc.n	8009016 <remove_chain+0x2a>
 8009012:	2302      	movs	r3, #2
 8009014:	e04b      	b.n	80090ae <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00c      	beq.n	8009036 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800901c:	f04f 32ff 	mov.w	r2, #4294967295
 8009020:	6879      	ldr	r1, [r7, #4]
 8009022:	69b8      	ldr	r0, [r7, #24]
 8009024:	f7ff fecb 	bl	8008dbe <put_fat>
 8009028:	4603      	mov	r3, r0
 800902a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800902c:	7ffb      	ldrb	r3, [r7, #31]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <remove_chain+0x4a>
 8009032:	7ffb      	ldrb	r3, [r7, #31]
 8009034:	e03b      	b.n	80090ae <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009036:	68b9      	ldr	r1, [r7, #8]
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f7ff fdf0 	bl	8008c1e <get_fat>
 800903e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d031      	beq.n	80090aa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d101      	bne.n	8009050 <remove_chain+0x64>
 800904c:	2302      	movs	r3, #2
 800904e:	e02e      	b.n	80090ae <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009056:	d101      	bne.n	800905c <remove_chain+0x70>
 8009058:	2301      	movs	r3, #1
 800905a:	e028      	b.n	80090ae <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800905c:	2200      	movs	r2, #0
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	69b8      	ldr	r0, [r7, #24]
 8009062:	f7ff feac 	bl	8008dbe <put_fat>
 8009066:	4603      	mov	r3, r0
 8009068:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800906a:	7ffb      	ldrb	r3, [r7, #31]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <remove_chain+0x88>
 8009070:	7ffb      	ldrb	r3, [r7, #31]
 8009072:	e01c      	b.n	80090ae <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	699a      	ldr	r2, [r3, #24]
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	3b02      	subs	r3, #2
 800907e:	429a      	cmp	r2, r3
 8009080:	d20b      	bcs.n	800909a <remove_chain+0xae>
			fs->free_clst++;
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	791b      	ldrb	r3, [r3, #4]
 8009090:	f043 0301 	orr.w	r3, r3, #1
 8009094:	b2da      	uxtb	r2, r3
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d3c6      	bcc.n	8009036 <remove_chain+0x4a>
 80090a8:	e000      	b.n	80090ac <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80090aa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3720      	adds	r7, #32
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b088      	sub	sp, #32
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10d      	bne.n	80090e8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d004      	beq.n	80090e2 <create_chain+0x2c>
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d31b      	bcc.n	800911a <create_chain+0x64>
 80090e2:	2301      	movs	r3, #1
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	e018      	b.n	800911a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff fd97 	bl	8008c1e <get_fat>
 80090f0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d801      	bhi.n	80090fc <create_chain+0x46>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e070      	b.n	80091de <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009102:	d101      	bne.n	8009108 <create_chain+0x52>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	e06a      	b.n	80091de <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	429a      	cmp	r2, r3
 8009110:	d201      	bcs.n	8009116 <create_chain+0x60>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	e063      	b.n	80091de <create_chain+0x128>
		scl = clst;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	3301      	adds	r3, #1
 8009122:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	69fa      	ldr	r2, [r7, #28]
 800912a:	429a      	cmp	r2, r3
 800912c:	d307      	bcc.n	800913e <create_chain+0x88>
				ncl = 2;
 800912e:	2302      	movs	r3, #2
 8009130:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009132:	69fa      	ldr	r2, [r7, #28]
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	429a      	cmp	r2, r3
 8009138:	d901      	bls.n	800913e <create_chain+0x88>
 800913a:	2300      	movs	r3, #0
 800913c:	e04f      	b.n	80091de <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800913e:	69f9      	ldr	r1, [r7, #28]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff fd6c 	bl	8008c1e <get_fat>
 8009146:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00e      	beq.n	800916c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d003      	beq.n	800915c <create_chain+0xa6>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915a:	d101      	bne.n	8009160 <create_chain+0xaa>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	e03e      	b.n	80091de <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	429a      	cmp	r2, r3
 8009166:	d1da      	bne.n	800911e <create_chain+0x68>
 8009168:	2300      	movs	r3, #0
 800916a:	e038      	b.n	80091de <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800916c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800916e:	f04f 32ff 	mov.w	r2, #4294967295
 8009172:	69f9      	ldr	r1, [r7, #28]
 8009174:	6938      	ldr	r0, [r7, #16]
 8009176:	f7ff fe22 	bl	8008dbe <put_fat>
 800917a:	4603      	mov	r3, r0
 800917c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d109      	bne.n	8009198 <create_chain+0xe2>
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d006      	beq.n	8009198 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6938      	ldr	r0, [r7, #16]
 8009190:	f7ff fe15 	bl	8008dbe <put_fat>
 8009194:	4603      	mov	r3, r0
 8009196:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009198:	7dfb      	ldrb	r3, [r7, #23]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d116      	bne.n	80091cc <create_chain+0x116>
		fs->last_clst = ncl;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	69fa      	ldr	r2, [r7, #28]
 80091a2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	699a      	ldr	r2, [r3, #24]
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	3b02      	subs	r3, #2
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d804      	bhi.n	80091bc <create_chain+0x106>
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	1e5a      	subs	r2, r3, #1
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	791b      	ldrb	r3, [r3, #4]
 80091c0:	f043 0301 	orr.w	r3, r3, #1
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	711a      	strb	r2, [r3, #4]
 80091ca:	e007      	b.n	80091dc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d102      	bne.n	80091d8 <create_chain+0x122>
 80091d2:	f04f 33ff 	mov.w	r3, #4294967295
 80091d6:	e000      	b.n	80091da <create_chain+0x124>
 80091d8:	2301      	movs	r3, #1
 80091da:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80091dc:	69fb      	ldr	r3, [r7, #28]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3720      	adds	r7, #32
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b087      	sub	sp, #28
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	3304      	adds	r3, #4
 80091fc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	899b      	ldrh	r3, [r3, #12]
 8009202:	461a      	mov	r2, r3
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	fbb3 f3f2 	udiv	r3, r3, r2
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	8952      	ldrh	r2, [r2, #10]
 800920e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009212:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	1d1a      	adds	r2, r3, #4
 8009218:	613a      	str	r2, [r7, #16]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <clmt_clust+0x42>
 8009224:	2300      	movs	r3, #0
 8009226:	e010      	b.n	800924a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	429a      	cmp	r2, r3
 800922e:	d307      	bcc.n	8009240 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	617b      	str	r3, [r7, #20]
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	3304      	adds	r3, #4
 800923c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800923e:	e7e9      	b.n	8009214 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009240:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	4413      	add	r3, r2
}
 800924a:	4618      	mov	r0, r3
 800924c:	371c      	adds	r7, #28
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b086      	sub	sp, #24
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800926c:	d204      	bcs.n	8009278 <dir_sdi+0x22>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	f003 031f 	and.w	r3, r3, #31
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <dir_sdi+0x26>
		return FR_INT_ERR;
 8009278:	2302      	movs	r3, #2
 800927a:	e071      	b.n	8009360 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d106      	bne.n	800929c <dir_sdi+0x46>
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d902      	bls.n	800929c <dir_sdi+0x46>
		clst = fs->dirbase;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10c      	bne.n	80092bc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	095b      	lsrs	r3, r3, #5
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	8912      	ldrh	r2, [r2, #8]
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d301      	bcc.n	80092b2 <dir_sdi+0x5c>
 80092ae:	2302      	movs	r3, #2
 80092b0:	e056      	b.n	8009360 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	61da      	str	r2, [r3, #28]
 80092ba:	e02d      	b.n	8009318 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	895b      	ldrh	r3, [r3, #10]
 80092c0:	461a      	mov	r2, r3
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	899b      	ldrh	r3, [r3, #12]
 80092c6:	fb03 f302 	mul.w	r3, r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092cc:	e019      	b.n	8009302 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6979      	ldr	r1, [r7, #20]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff fca3 	bl	8008c1e <get_fat>
 80092d8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e0:	d101      	bne.n	80092e6 <dir_sdi+0x90>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e03c      	b.n	8009360 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d904      	bls.n	80092f6 <dir_sdi+0xa0>
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d301      	bcc.n	80092fa <dir_sdi+0xa4>
 80092f6:	2302      	movs	r3, #2
 80092f8:	e032      	b.n	8009360 <dir_sdi+0x10a>
			ofs -= csz;
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	429a      	cmp	r2, r3
 8009308:	d2e1      	bcs.n	80092ce <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800930a:	6979      	ldr	r1, [r7, #20]
 800930c:	6938      	ldr	r0, [r7, #16]
 800930e:	f7ff fc67 	bl	8008be0 <clust2sect>
 8009312:	4602      	mov	r2, r0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d101      	bne.n	800932a <dir_sdi+0xd4>
 8009326:	2302      	movs	r3, #2
 8009328:	e01a      	b.n	8009360 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	69da      	ldr	r2, [r3, #28]
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	899b      	ldrh	r3, [r3, #12]
 8009332:	4619      	mov	r1, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	fbb3 f3f1 	udiv	r3, r3, r1
 800933a:	441a      	add	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	899b      	ldrh	r3, [r3, #12]
 800934a:	461a      	mov	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009352:	fb02 f200 	mul.w	r2, r2, r0
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	18ca      	adds	r2, r1, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	3320      	adds	r3, #32
 800937e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <dir_next+0x28>
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800938e:	d301      	bcc.n	8009394 <dir_next+0x2c>
 8009390:	2304      	movs	r3, #4
 8009392:	e0bb      	b.n	800950c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	899b      	ldrh	r3, [r3, #12]
 8009398:	461a      	mov	r2, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	fbb3 f1f2 	udiv	r1, r3, r2
 80093a0:	fb02 f201 	mul.w	r2, r2, r1
 80093a4:	1a9b      	subs	r3, r3, r2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f040 809d 	bne.w	80094e6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10b      	bne.n	80093d6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	095b      	lsrs	r3, r3, #5
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	8912      	ldrh	r2, [r2, #8]
 80093c6:	4293      	cmp	r3, r2
 80093c8:	f0c0 808d 	bcc.w	80094e6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	61da      	str	r2, [r3, #28]
 80093d2:	2304      	movs	r3, #4
 80093d4:	e09a      	b.n	800950c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	899b      	ldrh	r3, [r3, #12]
 80093da:	461a      	mov	r2, r3
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	fbb3 f3f2 	udiv	r3, r3, r2
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	8952      	ldrh	r2, [r2, #10]
 80093e6:	3a01      	subs	r2, #1
 80093e8:	4013      	ands	r3, r2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d17b      	bne.n	80094e6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	4619      	mov	r1, r3
 80093f6:	4610      	mov	r0, r2
 80093f8:	f7ff fc11 	bl	8008c1e <get_fat>
 80093fc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d801      	bhi.n	8009408 <dir_next+0xa0>
 8009404:	2302      	movs	r3, #2
 8009406:	e081      	b.n	800950c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940e:	d101      	bne.n	8009414 <dir_next+0xac>
 8009410:	2301      	movs	r3, #1
 8009412:	e07b      	b.n	800950c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	69db      	ldr	r3, [r3, #28]
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	429a      	cmp	r2, r3
 800941c:	d359      	bcc.n	80094d2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d104      	bne.n	800942e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	61da      	str	r2, [r3, #28]
 800942a:	2304      	movs	r3, #4
 800942c:	e06e      	b.n	800950c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	4619      	mov	r1, r3
 8009436:	4610      	mov	r0, r2
 8009438:	f7ff fe3d 	bl	80090b6 <create_chain>
 800943c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <dir_next+0xe0>
 8009444:	2307      	movs	r3, #7
 8009446:	e061      	b.n	800950c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d101      	bne.n	8009452 <dir_next+0xea>
 800944e:	2302      	movs	r3, #2
 8009450:	e05c      	b.n	800950c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009458:	d101      	bne.n	800945e <dir_next+0xf6>
 800945a:	2301      	movs	r3, #1
 800945c:	e056      	b.n	800950c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f7ff fadc 	bl	8008a1c <sync_window>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <dir_next+0x106>
 800946a:	2301      	movs	r3, #1
 800946c:	e04e      	b.n	800950c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	899b      	ldrh	r3, [r3, #12]
 8009478:	461a      	mov	r2, r3
 800947a:	2100      	movs	r1, #0
 800947c:	f7ff f905 	bl	800868a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009480:	2300      	movs	r3, #0
 8009482:	613b      	str	r3, [r7, #16]
 8009484:	6979      	ldr	r1, [r7, #20]
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f7ff fbaa 	bl	8008be0 <clust2sect>
 800948c:	4602      	mov	r2, r0
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	635a      	str	r2, [r3, #52]	; 0x34
 8009492:	e012      	b.n	80094ba <dir_next+0x152>
						fs->wflag = 1;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2201      	movs	r2, #1
 8009498:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff fabe 	bl	8008a1c <sync_window>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <dir_next+0x142>
 80094a6:	2301      	movs	r3, #1
 80094a8:	e030      	b.n	800950c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	3301      	adds	r3, #1
 80094ae:	613b      	str	r3, [r7, #16]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	635a      	str	r2, [r3, #52]	; 0x34
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	895b      	ldrh	r3, [r3, #10]
 80094be:	461a      	mov	r2, r3
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d3e6      	bcc.n	8009494 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	1ad2      	subs	r2, r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80094d8:	6979      	ldr	r1, [r7, #20]
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f7ff fb80 	bl	8008be0 <clust2sect>
 80094e0:	4602      	mov	r2, r0
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	899b      	ldrh	r3, [r3, #12]
 80094f6:	461a      	mov	r2, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80094fe:	fb02 f200 	mul.w	r2, r2, r0
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	18ca      	adds	r2, r1, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009524:	2100      	movs	r1, #0
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7ff fe95 	bl	8009256 <dir_sdi>
 800952c:	4603      	mov	r3, r0
 800952e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d12b      	bne.n	800958e <dir_alloc+0x7a>
		n = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	4619      	mov	r1, r3
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7ff faaf 	bl	8008aa4 <move_window>
 8009546:	4603      	mov	r3, r0
 8009548:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d11d      	bne.n	800958c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	2be5      	cmp	r3, #229	; 0xe5
 8009558:	d004      	beq.n	8009564 <dir_alloc+0x50>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d107      	bne.n	8009574 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	3301      	adds	r3, #1
 8009568:	613b      	str	r3, [r7, #16]
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	429a      	cmp	r2, r3
 8009570:	d102      	bne.n	8009578 <dir_alloc+0x64>
 8009572:	e00c      	b.n	800958e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009574:	2300      	movs	r3, #0
 8009576:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009578:	2101      	movs	r1, #1
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff fef4 	bl	8009368 <dir_next>
 8009580:	4603      	mov	r3, r0
 8009582:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d0d7      	beq.n	800953a <dir_alloc+0x26>
 800958a:	e000      	b.n	800958e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800958c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	2b04      	cmp	r3, #4
 8009592:	d101      	bne.n	8009598 <dir_alloc+0x84>
 8009594:	2307      	movs	r3, #7
 8009596:	75fb      	strb	r3, [r7, #23]
	return res;
 8009598:	7dfb      	ldrb	r3, [r7, #23]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	331a      	adds	r3, #26
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fe ffc7 	bl	8008544 <ld_word>
 80095b6:	4603      	mov	r3, r0
 80095b8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d109      	bne.n	80095d6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	3314      	adds	r3, #20
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe ffbc 	bl	8008544 <ld_word>
 80095cc:	4603      	mov	r3, r0
 80095ce:	041b      	lsls	r3, r3, #16
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80095d6:	68fb      	ldr	r3, [r7, #12]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	331a      	adds	r3, #26
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	b292      	uxth	r2, r2
 80095f4:	4611      	mov	r1, r2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe ffdf 	bl	80085ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b03      	cmp	r3, #3
 8009602:	d109      	bne.n	8009618 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f103 0214 	add.w	r2, r3, #20
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	0c1b      	lsrs	r3, r3, #16
 800960e:	b29b      	uxth	r3, r3
 8009610:	4619      	mov	r1, r3
 8009612:	4610      	mov	r0, r2
 8009614:	f7fe ffd1 	bl	80085ba <st_word>
	}
}
 8009618:	bf00      	nop
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009620:	b590      	push	{r4, r7, lr}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	331a      	adds	r3, #26
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe ff88 	bl	8008544 <ld_word>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <cmp_lfn+0x1e>
 800963a:	2300      	movs	r3, #0
 800963c:	e059      	b.n	80096f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009646:	1e5a      	subs	r2, r3, #1
 8009648:	4613      	mov	r3, r2
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009654:	2301      	movs	r3, #1
 8009656:	81fb      	strh	r3, [r7, #14]
 8009658:	2300      	movs	r3, #0
 800965a:	613b      	str	r3, [r7, #16]
 800965c:	e033      	b.n	80096c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800965e:	4a27      	ldr	r2, [pc, #156]	; (80096fc <cmp_lfn+0xdc>)
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	4413      	add	r3, r2
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	4413      	add	r3, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f7fe ff69 	bl	8008544 <ld_word>
 8009672:	4603      	mov	r3, r0
 8009674:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009676:	89fb      	ldrh	r3, [r7, #14]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d01a      	beq.n	80096b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2bfe      	cmp	r3, #254	; 0xfe
 8009680:	d812      	bhi.n	80096a8 <cmp_lfn+0x88>
 8009682:	89bb      	ldrh	r3, [r7, #12]
 8009684:	4618      	mov	r0, r3
 8009686:	f002 f80f 	bl	800b6a8 <ff_wtoupper>
 800968a:	4603      	mov	r3, r0
 800968c:	461c      	mov	r4, r3
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	617a      	str	r2, [r7, #20]
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	4413      	add	r3, r2
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f002 f803 	bl	800b6a8 <ff_wtoupper>
 80096a2:	4603      	mov	r3, r0
 80096a4:	429c      	cmp	r4, r3
 80096a6:	d001      	beq.n	80096ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80096a8:	2300      	movs	r3, #0
 80096aa:	e022      	b.n	80096f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 80096ac:	89bb      	ldrh	r3, [r7, #12]
 80096ae:	81fb      	strh	r3, [r7, #14]
 80096b0:	e006      	b.n	80096c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80096b2:	89bb      	ldrh	r3, [r7, #12]
 80096b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d001      	beq.n	80096c0 <cmp_lfn+0xa0>
 80096bc:	2300      	movs	r3, #0
 80096be:	e018      	b.n	80096f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	3301      	adds	r3, #1
 80096c4:	613b      	str	r3, [r7, #16]
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	2b0c      	cmp	r3, #12
 80096ca:	d9c8      	bls.n	800965e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <cmp_lfn+0xd0>
 80096d8:	89fb      	ldrh	r3, [r7, #14]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d008      	beq.n	80096f0 <cmp_lfn+0xd0>
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	4413      	add	r3, r2
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <cmp_lfn+0xd0>
 80096ec:	2300      	movs	r3, #0
 80096ee:	e000      	b.n	80096f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80096f0:	2301      	movs	r3, #1
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	371c      	adds	r7, #28
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd90      	pop	{r4, r7, pc}
 80096fa:	bf00      	nop
 80096fc:	0800e4c0 	.word	0x0800e4c0

08009700 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b088      	sub	sp, #32
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	4611      	mov	r1, r2
 800970c:	461a      	mov	r2, r3
 800970e:	460b      	mov	r3, r1
 8009710:	71fb      	strb	r3, [r7, #7]
 8009712:	4613      	mov	r3, r2
 8009714:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	330d      	adds	r3, #13
 800971a:	79ba      	ldrb	r2, [r7, #6]
 800971c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	330b      	adds	r3, #11
 8009722:	220f      	movs	r2, #15
 8009724:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	330c      	adds	r3, #12
 800972a:	2200      	movs	r2, #0
 800972c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	331a      	adds	r3, #26
 8009732:	2100      	movs	r1, #0
 8009734:	4618      	mov	r0, r3
 8009736:	f7fe ff40 	bl	80085ba <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800973a:	79fb      	ldrb	r3, [r7, #7]
 800973c:	1e5a      	subs	r2, r3, #1
 800973e:	4613      	mov	r3, r2
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	82fb      	strh	r3, [r7, #22]
 800974e:	2300      	movs	r3, #0
 8009750:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009752:	8afb      	ldrh	r3, [r7, #22]
 8009754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009758:	4293      	cmp	r3, r2
 800975a:	d007      	beq.n	800976c <put_lfn+0x6c>
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	61fa      	str	r2, [r7, #28]
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800976c:	4a17      	ldr	r2, [pc, #92]	; (80097cc <put_lfn+0xcc>)
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	4413      	add	r3, r2
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	4413      	add	r3, r2
 800977a:	8afa      	ldrh	r2, [r7, #22]
 800977c:	4611      	mov	r1, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe ff1b 	bl	80085ba <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009784:	8afb      	ldrh	r3, [r7, #22]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d102      	bne.n	8009790 <put_lfn+0x90>
 800978a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800978e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	3301      	adds	r3, #1
 8009794:	61bb      	str	r3, [r7, #24]
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	2b0c      	cmp	r3, #12
 800979a:	d9da      	bls.n	8009752 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800979c:	8afb      	ldrh	r3, [r7, #22]
 800979e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d006      	beq.n	80097b4 <put_lfn+0xb4>
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	4413      	add	r3, r2
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d103      	bne.n	80097bc <put_lfn+0xbc>
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	79fa      	ldrb	r2, [r7, #7]
 80097c0:	701a      	strb	r2, [r3, #0]
}
 80097c2:	bf00      	nop
 80097c4:	3720      	adds	r7, #32
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	0800e4c0 	.word	0x0800e4c0

080097d0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08c      	sub	sp, #48	; 0x30
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80097de:	220b      	movs	r2, #11
 80097e0:	68b9      	ldr	r1, [r7, #8]
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f7fe ff30 	bl	8008648 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b05      	cmp	r3, #5
 80097ec:	d92b      	bls.n	8009846 <gen_numname+0x76>
		sr = seq;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80097f2:	e022      	b.n	800983a <gen_numname+0x6a>
			wc = *lfn++;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	1c9a      	adds	r2, r3, #2
 80097f8:	607a      	str	r2, [r7, #4]
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80097fe:	2300      	movs	r3, #0
 8009800:	62bb      	str	r3, [r7, #40]	; 0x28
 8009802:	e017      	b.n	8009834 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	005a      	lsls	r2, r3, #1
 8009808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	4413      	add	r3, r2
 8009810:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009814:	085b      	lsrs	r3, r3, #1
 8009816:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <gen_numname+0x5e>
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009828:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800982c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009830:	3301      	adds	r3, #1
 8009832:	62bb      	str	r3, [r7, #40]	; 0x28
 8009834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009836:	2b0f      	cmp	r3, #15
 8009838:	d9e4      	bls.n	8009804 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1d8      	bne.n	80097f4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009846:	2307      	movs	r3, #7
 8009848:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	b2db      	uxtb	r3, r3
 800984e:	f003 030f 	and.w	r3, r3, #15
 8009852:	b2db      	uxtb	r3, r3
 8009854:	3330      	adds	r3, #48	; 0x30
 8009856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800985a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800985e:	2b39      	cmp	r3, #57	; 0x39
 8009860:	d904      	bls.n	800986c <gen_numname+0x9c>
 8009862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009866:	3307      	adds	r3, #7
 8009868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986e:	1e5a      	subs	r2, r3, #1
 8009870:	62ba      	str	r2, [r7, #40]	; 0x28
 8009872:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009876:	4413      	add	r3, r2
 8009878:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800987c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	091b      	lsrs	r3, r3, #4
 8009884:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1de      	bne.n	800984a <gen_numname+0x7a>
	ns[i] = '~';
 800988c:	f107 0214 	add.w	r2, r7, #20
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	4413      	add	r3, r2
 8009894:	227e      	movs	r2, #126	; 0x7e
 8009896:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009898:	2300      	movs	r3, #0
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
 800989c:	e002      	b.n	80098a4 <gen_numname+0xd4>
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	3301      	adds	r3, #1
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
 80098a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d205      	bcs.n	80098b8 <gen_numname+0xe8>
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	4413      	add	r3, r2
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	2b20      	cmp	r3, #32
 80098b6:	d1f2      	bne.n	800989e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	2b07      	cmp	r3, #7
 80098bc:	d808      	bhi.n	80098d0 <gen_numname+0x100>
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80098c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80098c8:	4413      	add	r3, r2
 80098ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80098ce:	e000      	b.n	80098d2 <gen_numname+0x102>
 80098d0:	2120      	movs	r1, #32
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	627a      	str	r2, [r7, #36]	; 0x24
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	460a      	mov	r2, r1
 80098de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	2b07      	cmp	r3, #7
 80098e4:	d9e8      	bls.n	80098b8 <gen_numname+0xe8>
}
 80098e6:	bf00      	nop
 80098e8:	3730      	adds	r7, #48	; 0x30
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b085      	sub	sp, #20
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80098fa:	230b      	movs	r3, #11
 80098fc:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	b2da      	uxtb	r2, r3
 8009902:	0852      	lsrs	r2, r2, #1
 8009904:	01db      	lsls	r3, r3, #7
 8009906:	4313      	orrs	r3, r2
 8009908:	b2da      	uxtb	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	1c59      	adds	r1, r3, #1
 800990e:	6079      	str	r1, [r7, #4]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	4413      	add	r3, r2
 8009914:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	3b01      	subs	r3, #1
 800991a:	60bb      	str	r3, [r7, #8]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1ed      	bne.n	80098fe <sum_sfn+0x10>
	return sum;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800993e:	2100      	movs	r1, #0
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff fc88 	bl	8009256 <dir_sdi>
 8009946:	4603      	mov	r3, r0
 8009948:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <dir_find+0x24>
 8009950:	7dfb      	ldrb	r3, [r7, #23]
 8009952:	e0a9      	b.n	8009aa8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009954:	23ff      	movs	r3, #255	; 0xff
 8009956:	753b      	strb	r3, [r7, #20]
 8009958:	7d3b      	ldrb	r3, [r7, #20]
 800995a:	757b      	strb	r3, [r7, #21]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f04f 32ff 	mov.w	r2, #4294967295
 8009962:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	4619      	mov	r1, r3
 800996a:	6938      	ldr	r0, [r7, #16]
 800996c:	f7ff f89a 	bl	8008aa4 <move_window>
 8009970:	4603      	mov	r3, r0
 8009972:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	2b00      	cmp	r3, #0
 8009978:	f040 8090 	bne.w	8009a9c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009984:	7dbb      	ldrb	r3, [r7, #22]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d102      	bne.n	8009990 <dir_find+0x60>
 800998a:	2304      	movs	r3, #4
 800998c:	75fb      	strb	r3, [r7, #23]
 800998e:	e08a      	b.n	8009aa6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	330b      	adds	r3, #11
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800999c:	73fb      	strb	r3, [r7, #15]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	7bfa      	ldrb	r2, [r7, #15]
 80099a2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80099a4:	7dbb      	ldrb	r3, [r7, #22]
 80099a6:	2be5      	cmp	r3, #229	; 0xe5
 80099a8:	d007      	beq.n	80099ba <dir_find+0x8a>
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
 80099ac:	f003 0308 	and.w	r3, r3, #8
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d009      	beq.n	80099c8 <dir_find+0x98>
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	2b0f      	cmp	r3, #15
 80099b8:	d006      	beq.n	80099c8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80099ba:	23ff      	movs	r3, #255	; 0xff
 80099bc:	757b      	strb	r3, [r7, #21]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f04f 32ff 	mov.w	r2, #4294967295
 80099c4:	631a      	str	r2, [r3, #48]	; 0x30
 80099c6:	e05e      	b.n	8009a86 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	2b0f      	cmp	r3, #15
 80099cc:	d136      	bne.n	8009a3c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80099d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d154      	bne.n	8009a86 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80099dc:	7dbb      	ldrb	r3, [r7, #22]
 80099de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00d      	beq.n	8009a02 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	7b5b      	ldrb	r3, [r3, #13]
 80099ec:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80099ee:	7dbb      	ldrb	r3, [r7, #22]
 80099f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099f4:	75bb      	strb	r3, [r7, #22]
 80099f6:	7dbb      	ldrb	r3, [r7, #22]
 80099f8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	695a      	ldr	r2, [r3, #20]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009a02:	7dba      	ldrb	r2, [r7, #22]
 8009a04:	7d7b      	ldrb	r3, [r7, #21]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d115      	bne.n	8009a36 <dir_find+0x106>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	330d      	adds	r3, #13
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	7d3a      	ldrb	r2, [r7, #20]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d10e      	bne.n	8009a36 <dir_find+0x106>
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	691a      	ldr	r2, [r3, #16]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a1b      	ldr	r3, [r3, #32]
 8009a20:	4619      	mov	r1, r3
 8009a22:	4610      	mov	r0, r2
 8009a24:	f7ff fdfc 	bl	8009620 <cmp_lfn>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <dir_find+0x106>
 8009a2e:	7d7b      	ldrb	r3, [r7, #21]
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	e000      	b.n	8009a38 <dir_find+0x108>
 8009a36:	23ff      	movs	r3, #255	; 0xff
 8009a38:	757b      	strb	r3, [r7, #21]
 8009a3a:	e024      	b.n	8009a86 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009a3c:	7d7b      	ldrb	r3, [r7, #21]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d109      	bne.n	8009a56 <dir_find+0x126>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7ff ff51 	bl	80098ee <sum_sfn>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	461a      	mov	r2, r3
 8009a50:	7d3b      	ldrb	r3, [r7, #20]
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d024      	beq.n	8009aa0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a5c:	f003 0301 	and.w	r3, r3, #1
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <dir_find+0x14a>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a18      	ldr	r0, [r3, #32]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	3324      	adds	r3, #36	; 0x24
 8009a6c:	220b      	movs	r2, #11
 8009a6e:	4619      	mov	r1, r3
 8009a70:	f7fe fe25 	bl	80086be <mem_cmp>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d014      	beq.n	8009aa4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009a7a:	23ff      	movs	r3, #255	; 0xff
 8009a7c:	757b      	strb	r3, [r7, #21]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f04f 32ff 	mov.w	r2, #4294967295
 8009a84:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009a86:	2100      	movs	r1, #0
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7ff fc6d 	bl	8009368 <dir_next>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f43f af65 	beq.w	8009964 <dir_find+0x34>
 8009a9a:	e004      	b.n	8009aa6 <dir_find+0x176>
		if (res != FR_OK) break;
 8009a9c:	bf00      	nop
 8009a9e:	e002      	b.n	8009aa6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009aa0:	bf00      	nop
 8009aa2:	e000      	b.n	8009aa6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009aa4:	bf00      	nop

	return res;
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08c      	sub	sp, #48	; 0x30
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ac4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <dir_register+0x20>
 8009acc:	2306      	movs	r3, #6
 8009ace:	e0e0      	b.n	8009c92 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad4:	e002      	b.n	8009adc <dir_register+0x2c>
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	3301      	adds	r3, #1
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	691a      	ldr	r2, [r3, #16]
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	4413      	add	r3, r2
 8009ae6:	881b      	ldrh	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1f4      	bne.n	8009ad6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009af2:	f107 030c 	add.w	r3, r7, #12
 8009af6:	220c      	movs	r2, #12
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fe fda5 	bl	8008648 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d032      	beq.n	8009b6e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2240      	movs	r2, #64	; 0x40
 8009b0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009b10:	2301      	movs	r3, #1
 8009b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b14:	e016      	b.n	8009b44 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	691a      	ldr	r2, [r3, #16]
 8009b20:	f107 010c 	add.w	r1, r7, #12
 8009b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b26:	f7ff fe53 	bl	80097d0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff ff00 	bl	8009930 <dir_find>
 8009b30:	4603      	mov	r3, r0
 8009b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d106      	bne.n	8009b4c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	3301      	adds	r3, #1
 8009b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b46:	2b63      	cmp	r3, #99	; 0x63
 8009b48:	d9e5      	bls.n	8009b16 <dir_register+0x66>
 8009b4a:	e000      	b.n	8009b4e <dir_register+0x9e>
			if (res != FR_OK) break;
 8009b4c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b50:	2b64      	cmp	r3, #100	; 0x64
 8009b52:	d101      	bne.n	8009b58 <dir_register+0xa8>
 8009b54:	2307      	movs	r3, #7
 8009b56:	e09c      	b.n	8009c92 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009b58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	d002      	beq.n	8009b66 <dir_register+0xb6>
 8009b60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b64:	e095      	b.n	8009c92 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009b66:	7dfa      	ldrb	r2, [r7, #23]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
 8009b70:	f003 0302 	and.w	r3, r3, #2
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d007      	beq.n	8009b88 <dir_register+0xd8>
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	330c      	adds	r3, #12
 8009b7c:	4a47      	ldr	r2, [pc, #284]	; (8009c9c <dir_register+0x1ec>)
 8009b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b82:	089b      	lsrs	r3, r3, #2
 8009b84:	3301      	adds	r3, #1
 8009b86:	e000      	b.n	8009b8a <dir_register+0xda>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009b8c:	6a39      	ldr	r1, [r7, #32]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7ff fcc0 	bl	8009514 <dir_alloc>
 8009b94:	4603      	mov	r3, r0
 8009b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d148      	bne.n	8009c34 <dir_register+0x184>
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	623b      	str	r3, [r7, #32]
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d042      	beq.n	8009c34 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	695a      	ldr	r2, [r3, #20]
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	015b      	lsls	r3, r3, #5
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff fb4b 	bl	8009256 <dir_sdi>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d132      	bne.n	8009c34 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3324      	adds	r3, #36	; 0x24
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7ff fe8b 	bl	80098ee <sum_sfn>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	4619      	mov	r1, r3
 8009be2:	69f8      	ldr	r0, [r7, #28]
 8009be4:	f7fe ff5e 	bl	8008aa4 <move_window>
 8009be8:	4603      	mov	r3, r0
 8009bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d11d      	bne.n	8009c32 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	6918      	ldr	r0, [r3, #16]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a19      	ldr	r1, [r3, #32]
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	7efb      	ldrb	r3, [r7, #27]
 8009c04:	f7ff fd7c 	bl	8009700 <put_lfn>
				fs->wflag = 1;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009c0e:	2100      	movs	r1, #0
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff fba9 	bl	8009368 <dir_next>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d107      	bne.n	8009c34 <dir_register+0x184>
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	623b      	str	r3, [r7, #32]
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1d5      	bne.n	8009bdc <dir_register+0x12c>
 8009c30:	e000      	b.n	8009c34 <dir_register+0x184>
				if (res != FR_OK) break;
 8009c32:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009c34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d128      	bne.n	8009c8e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	4619      	mov	r1, r3
 8009c42:	69f8      	ldr	r0, [r7, #28]
 8009c44:	f7fe ff2e 	bl	8008aa4 <move_window>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d11b      	bne.n	8009c8e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe fd13 	bl	800868a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a18      	ldr	r0, [r3, #32]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3324      	adds	r3, #36	; 0x24
 8009c6c:	220b      	movs	r2, #11
 8009c6e:	4619      	mov	r1, r3
 8009c70:	f7fe fcea 	bl	8008648 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	330c      	adds	r3, #12
 8009c80:	f002 0218 	and.w	r2, r2, #24
 8009c84:	b2d2      	uxtb	r2, r2
 8009c86:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3730      	adds	r7, #48	; 0x30
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	4ec4ec4f 	.word	0x4ec4ec4f

08009ca0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08a      	sub	sp, #40	; 0x28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	613b      	str	r3, [r7, #16]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	61ba      	str	r2, [r7, #24]
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	4413      	add	r3, r2
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cd0:	2b1f      	cmp	r3, #31
 8009cd2:	d940      	bls.n	8009d56 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009cd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cd6:	2b2f      	cmp	r3, #47	; 0x2f
 8009cd8:	d006      	beq.n	8009ce8 <create_name+0x48>
 8009cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cdc:	2b5c      	cmp	r3, #92	; 0x5c
 8009cde:	d110      	bne.n	8009d02 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009ce0:	e002      	b.n	8009ce8 <create_name+0x48>
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	61bb      	str	r3, [r7, #24]
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	4413      	add	r3, r2
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	2b2f      	cmp	r3, #47	; 0x2f
 8009cf2:	d0f6      	beq.n	8009ce2 <create_name+0x42>
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	2b5c      	cmp	r3, #92	; 0x5c
 8009cfe:	d0f0      	beq.n	8009ce2 <create_name+0x42>
			break;
 8009d00:	e02a      	b.n	8009d58 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2bfe      	cmp	r3, #254	; 0xfe
 8009d06:	d901      	bls.n	8009d0c <create_name+0x6c>
 8009d08:	2306      	movs	r3, #6
 8009d0a:	e177      	b.n	8009ffc <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009d0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d14:	2101      	movs	r1, #1
 8009d16:	4618      	mov	r0, r3
 8009d18:	f001 fc8a 	bl	800b630 <ff_convert>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d101      	bne.n	8009d2a <create_name+0x8a>
 8009d26:	2306      	movs	r3, #6
 8009d28:	e168      	b.n	8009ffc <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8009d2e:	d809      	bhi.n	8009d44 <create_name+0xa4>
 8009d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d32:	4619      	mov	r1, r3
 8009d34:	48b3      	ldr	r0, [pc, #716]	; (800a004 <create_name+0x364>)
 8009d36:	f7fe fce9 	bl	800870c <chk_chr>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <create_name+0xa4>
 8009d40:	2306      	movs	r3, #6
 8009d42:	e15b      	b.n	8009ffc <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	617a      	str	r2, [r7, #20]
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4413      	add	r3, r2
 8009d50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d52:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009d54:	e7b4      	b.n	8009cc0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009d56:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	441a      	add	r2, r3
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d64:	2b1f      	cmp	r3, #31
 8009d66:	d801      	bhi.n	8009d6c <create_name+0xcc>
 8009d68:	2304      	movs	r3, #4
 8009d6a:	e000      	b.n	8009d6e <create_name+0xce>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009d72:	e011      	b.n	8009d98 <create_name+0xf8>
		w = lfn[di - 1];
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	4413      	add	r3, r2
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	d002      	beq.n	8009d92 <create_name+0xf2>
 8009d8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8009d90:	d106      	bne.n	8009da0 <create_name+0x100>
		di--;
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	3b01      	subs	r3, #1
 8009d96:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1ea      	bne.n	8009d74 <create_name+0xd4>
 8009d9e:	e000      	b.n	8009da2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009da0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	4413      	add	r3, r2
 8009daa:	2200      	movs	r2, #0
 8009dac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <create_name+0x118>
 8009db4:	2306      	movs	r3, #6
 8009db6:	e121      	b.n	8009ffc <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3324      	adds	r3, #36	; 0x24
 8009dbc:	220b      	movs	r2, #11
 8009dbe:	2120      	movs	r1, #32
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fe fc62 	bl	800868a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61bb      	str	r3, [r7, #24]
 8009dca:	e002      	b.n	8009dd2 <create_name+0x132>
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	61bb      	str	r3, [r7, #24]
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4413      	add	r3, r2
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	2b20      	cmp	r3, #32
 8009dde:	d0f5      	beq.n	8009dcc <create_name+0x12c>
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	005b      	lsls	r3, r3, #1
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4413      	add	r3, r2
 8009de8:	881b      	ldrh	r3, [r3, #0]
 8009dea:	2b2e      	cmp	r3, #46	; 0x2e
 8009dec:	d0ee      	beq.n	8009dcc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d009      	beq.n	8009e08 <create_name+0x168>
 8009df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009df8:	f043 0303 	orr.w	r3, r3, #3
 8009dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009e00:	e002      	b.n	8009e08 <create_name+0x168>
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	617b      	str	r3, [r7, #20]
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d009      	beq.n	8009e22 <create_name+0x182>
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e14:	3b01      	subs	r3, #1
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e20:	d1ef      	bne.n	8009e02 <create_name+0x162>

	i = b = 0; ni = 8;
 8009e22:	2300      	movs	r3, #0
 8009e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e28:	2300      	movs	r3, #0
 8009e2a:	623b      	str	r3, [r7, #32]
 8009e2c:	2308      	movs	r3, #8
 8009e2e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	1c5a      	adds	r2, r3, #1
 8009e34:	61ba      	str	r2, [r7, #24]
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f000 8090 	beq.w	8009f68 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e4a:	2b20      	cmp	r3, #32
 8009e4c:	d006      	beq.n	8009e5c <create_name+0x1bc>
 8009e4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e50:	2b2e      	cmp	r3, #46	; 0x2e
 8009e52:	d10a      	bne.n	8009e6a <create_name+0x1ca>
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d006      	beq.n	8009e6a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e60:	f043 0303 	orr.w	r3, r3, #3
 8009e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e68:	e07d      	b.n	8009f66 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009e6a:	6a3a      	ldr	r2, [r7, #32]
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d203      	bcs.n	8009e7a <create_name+0x1da>
 8009e72:	69ba      	ldr	r2, [r7, #24]
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d123      	bne.n	8009ec2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	2b0b      	cmp	r3, #11
 8009e7e:	d106      	bne.n	8009e8e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e84:	f043 0303 	orr.w	r3, r3, #3
 8009e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e8c:	e06f      	b.n	8009f6e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d005      	beq.n	8009ea2 <create_name+0x202>
 8009e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e9a:	f043 0303 	orr.w	r3, r3, #3
 8009e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009ea2:	69ba      	ldr	r2, [r7, #24]
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d860      	bhi.n	8009f6c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	61bb      	str	r3, [r7, #24]
 8009eae:	2308      	movs	r3, #8
 8009eb0:	623b      	str	r3, [r7, #32]
 8009eb2:	230b      	movs	r3, #11
 8009eb4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009eb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ec0:	e051      	b.n	8009f66 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009ec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8009ec6:	d914      	bls.n	8009ef2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eca:	2100      	movs	r1, #0
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f001 fbaf 	bl	800b630 <ff_convert>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d004      	beq.n	8009ee6 <create_name+0x246>
 8009edc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ede:	3b80      	subs	r3, #128	; 0x80
 8009ee0:	4a49      	ldr	r2, [pc, #292]	; (800a008 <create_name+0x368>)
 8009ee2:	5cd3      	ldrb	r3, [r2, r3]
 8009ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eea:	f043 0302 	orr.w	r3, r3, #2
 8009eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d007      	beq.n	8009f08 <create_name+0x268>
 8009ef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009efa:	4619      	mov	r1, r3
 8009efc:	4843      	ldr	r0, [pc, #268]	; (800a00c <create_name+0x36c>)
 8009efe:	f7fe fc05 	bl	800870c <chk_chr>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d008      	beq.n	8009f1a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009f08:	235f      	movs	r3, #95	; 0x5f
 8009f0a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f10:	f043 0303 	orr.w	r3, r3, #3
 8009f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f18:	e01b      	b.n	8009f52 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f1c:	2b40      	cmp	r3, #64	; 0x40
 8009f1e:	d909      	bls.n	8009f34 <create_name+0x294>
 8009f20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f22:	2b5a      	cmp	r3, #90	; 0x5a
 8009f24:	d806      	bhi.n	8009f34 <create_name+0x294>
					b |= 2;
 8009f26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f2a:	f043 0302 	orr.w	r3, r3, #2
 8009f2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f32:	e00e      	b.n	8009f52 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009f34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f36:	2b60      	cmp	r3, #96	; 0x60
 8009f38:	d90b      	bls.n	8009f52 <create_name+0x2b2>
 8009f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f3c:	2b7a      	cmp	r3, #122	; 0x7a
 8009f3e:	d808      	bhi.n	8009f52 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009f40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f44:	f043 0301 	orr.w	r3, r3, #1
 8009f48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f4e:	3b20      	subs	r3, #32
 8009f50:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	1c5a      	adds	r2, r3, #1
 8009f56:	623a      	str	r2, [r7, #32]
 8009f58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f5a:	b2d1      	uxtb	r1, r2
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	4413      	add	r3, r2
 8009f60:	460a      	mov	r2, r1
 8009f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009f66:	e763      	b.n	8009e30 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009f68:	bf00      	nop
 8009f6a:	e000      	b.n	8009f6e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009f6c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f74:	2be5      	cmp	r3, #229	; 0xe5
 8009f76:	d103      	bne.n	8009f80 <create_name+0x2e0>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2205      	movs	r2, #5
 8009f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	2b08      	cmp	r3, #8
 8009f84:	d104      	bne.n	8009f90 <create_name+0x2f0>
 8009f86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009f90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f94:	f003 030c 	and.w	r3, r3, #12
 8009f98:	2b0c      	cmp	r3, #12
 8009f9a:	d005      	beq.n	8009fa8 <create_name+0x308>
 8009f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	2b03      	cmp	r3, #3
 8009fa6:	d105      	bne.n	8009fb4 <create_name+0x314>
 8009fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fac:	f043 0302 	orr.w	r3, r3, #2
 8009fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d117      	bne.n	8009ff0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fc4:	f003 0303 	and.w	r3, r3, #3
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d105      	bne.n	8009fd8 <create_name+0x338>
 8009fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd0:	f043 0310 	orr.w	r3, r3, #16
 8009fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009fd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fdc:	f003 030c 	and.w	r3, r3, #12
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d105      	bne.n	8009ff0 <create_name+0x350>
 8009fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fe8:	f043 0308 	orr.w	r3, r3, #8
 8009fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009ff6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009ffa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3728      	adds	r7, #40	; 0x28
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	0800e3cc 	.word	0x0800e3cc
 800a008:	0800e440 	.word	0x0800e440
 800a00c:	0800e3d8 	.word	0x0800e3d8

0800a010 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a024:	e002      	b.n	800a02c <follow_path+0x1c>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	3301      	adds	r3, #1
 800a02a:	603b      	str	r3, [r7, #0]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b2f      	cmp	r3, #47	; 0x2f
 800a032:	d0f8      	beq.n	800a026 <follow_path+0x16>
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b5c      	cmp	r3, #92	; 0x5c
 800a03a:	d0f4      	beq.n	800a026 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	2200      	movs	r2, #0
 800a040:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2b1f      	cmp	r3, #31
 800a048:	d80a      	bhi.n	800a060 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2280      	movs	r2, #128	; 0x80
 800a04e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a052:	2100      	movs	r1, #0
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff f8fe 	bl	8009256 <dir_sdi>
 800a05a:	4603      	mov	r3, r0
 800a05c:	75fb      	strb	r3, [r7, #23]
 800a05e:	e048      	b.n	800a0f2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a060:	463b      	mov	r3, r7
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7ff fe1b 	bl	8009ca0 <create_name>
 800a06a:	4603      	mov	r3, r0
 800a06c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d139      	bne.n	800a0e8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f7ff fc5b 	bl	8009930 <dir_find>
 800a07a:	4603      	mov	r3, r0
 800a07c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a084:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00a      	beq.n	800a0a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
 800a08e:	2b04      	cmp	r3, #4
 800a090:	d12c      	bne.n	800a0ec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d127      	bne.n	800a0ec <follow_path+0xdc>
 800a09c:	2305      	movs	r3, #5
 800a09e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a0a0:	e024      	b.n	800a0ec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0a2:	7afb      	ldrb	r3, [r7, #11]
 800a0a4:	f003 0304 	and.w	r3, r3, #4
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d121      	bne.n	800a0f0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	799b      	ldrb	r3, [r3, #6]
 800a0b0:	f003 0310 	and.w	r3, r3, #16
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d102      	bne.n	800a0be <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a0b8:	2305      	movs	r3, #5
 800a0ba:	75fb      	strb	r3, [r7, #23]
 800a0bc:	e019      	b.n	800a0f2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	8992      	ldrh	r2, [r2, #12]
 800a0cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0d0:	fb02 f200 	mul.w	r2, r2, r0
 800a0d4:	1a9b      	subs	r3, r3, r2
 800a0d6:	440b      	add	r3, r1
 800a0d8:	4619      	mov	r1, r3
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7ff fa61 	bl	80095a2 <ld_clust>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a0e6:	e7bb      	b.n	800a060 <follow_path+0x50>
			if (res != FR_OK) break;
 800a0e8:	bf00      	nop
 800a0ea:	e002      	b.n	800a0f2 <follow_path+0xe2>
				break;
 800a0ec:	bf00      	nop
 800a0ee:	e000      	b.n	800a0f2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0f0:	bf00      	nop
			}
		}
	}

	return res;
 800a0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b087      	sub	sp, #28
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a104:	f04f 33ff 	mov.w	r3, #4294967295
 800a108:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d031      	beq.n	800a176 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	e002      	b.n	800a120 <get_ldnumber+0x24>
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	3301      	adds	r3, #1
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	2b1f      	cmp	r3, #31
 800a126:	d903      	bls.n	800a130 <get_ldnumber+0x34>
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b3a      	cmp	r3, #58	; 0x3a
 800a12e:	d1f4      	bne.n	800a11a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	2b3a      	cmp	r3, #58	; 0x3a
 800a136:	d11c      	bne.n	800a172 <get_ldnumber+0x76>
			tp = *path;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	1c5a      	adds	r2, r3, #1
 800a142:	60fa      	str	r2, [r7, #12]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	3b30      	subs	r3, #48	; 0x30
 800a148:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2b09      	cmp	r3, #9
 800a14e:	d80e      	bhi.n	800a16e <get_ldnumber+0x72>
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	429a      	cmp	r2, r3
 800a156:	d10a      	bne.n	800a16e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d107      	bne.n	800a16e <get_ldnumber+0x72>
					vol = (int)i;
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	3301      	adds	r3, #1
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	e002      	b.n	800a178 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a172:	2300      	movs	r3, #0
 800a174:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a176:	693b      	ldr	r3, [r7, #16]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	371c      	adds	r7, #28
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	70da      	strb	r2, [r3, #3]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f04f 32ff 	mov.w	r2, #4294967295
 800a19a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7fe fc80 	bl	8008aa4 <move_window>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <check_fs+0x2a>
 800a1aa:	2304      	movs	r3, #4
 800a1ac:	e038      	b.n	800a220 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	3338      	adds	r3, #56	; 0x38
 800a1b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fe f9c4 	bl	8008544 <ld_word>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	461a      	mov	r2, r3
 800a1c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d001      	beq.n	800a1cc <check_fs+0x48>
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e029      	b.n	800a220 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a1d2:	2be9      	cmp	r3, #233	; 0xe9
 800a1d4:	d009      	beq.n	800a1ea <check_fs+0x66>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a1dc:	2beb      	cmp	r3, #235	; 0xeb
 800a1de:	d11e      	bne.n	800a21e <check_fs+0x9a>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a1e6:	2b90      	cmp	r3, #144	; 0x90
 800a1e8:	d119      	bne.n	800a21e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3338      	adds	r3, #56	; 0x38
 800a1ee:	3336      	adds	r3, #54	; 0x36
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe f9bf 	bl	8008574 <ld_dword>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a1fc:	4a0a      	ldr	r2, [pc, #40]	; (800a228 <check_fs+0xa4>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d101      	bne.n	800a206 <check_fs+0x82>
 800a202:	2300      	movs	r3, #0
 800a204:	e00c      	b.n	800a220 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3338      	adds	r3, #56	; 0x38
 800a20a:	3352      	adds	r3, #82	; 0x52
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fe f9b1 	bl	8008574 <ld_dword>
 800a212:	4602      	mov	r2, r0
 800a214:	4b05      	ldr	r3, [pc, #20]	; (800a22c <check_fs+0xa8>)
 800a216:	429a      	cmp	r2, r3
 800a218:	d101      	bne.n	800a21e <check_fs+0x9a>
 800a21a:	2300      	movs	r3, #0
 800a21c:	e000      	b.n	800a220 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a21e:	2302      	movs	r3, #2
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	00544146 	.word	0x00544146
 800a22c:	33544146 	.word	0x33544146

0800a230 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b096      	sub	sp, #88	; 0x58
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	4613      	mov	r3, r2
 800a23c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2200      	movs	r2, #0
 800a242:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7ff ff59 	bl	800a0fc <get_ldnumber>
 800a24a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	da01      	bge.n	800a256 <find_volume+0x26>
 800a252:	230b      	movs	r3, #11
 800a254:	e268      	b.n	800a728 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a256:	4ab0      	ldr	r2, [pc, #704]	; (800a518 <find_volume+0x2e8>)
 800a258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a25e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <find_volume+0x3a>
 800a266:	230c      	movs	r3, #12
 800a268:	e25e      	b.n	800a728 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a26e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a270:	79fb      	ldrb	r3, [r7, #7]
 800a272:	f023 0301 	bic.w	r3, r3, #1
 800a276:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d01a      	beq.n	800a2b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	785b      	ldrb	r3, [r3, #1]
 800a284:	4618      	mov	r0, r3
 800a286:	f7fe f8bf 	bl	8008408 <disk_status>
 800a28a:	4603      	mov	r3, r0
 800a28c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a290:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a294:	f003 0301 	and.w	r3, r3, #1
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10c      	bne.n	800a2b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a29c:	79fb      	ldrb	r3, [r7, #7]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d007      	beq.n	800a2b2 <find_volume+0x82>
 800a2a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2a6:	f003 0304 	and.w	r3, r3, #4
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a2ae:	230a      	movs	r3, #10
 800a2b0:	e23a      	b.n	800a728 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	e238      	b.n	800a728 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	785b      	ldrb	r3, [r3, #1]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fe f8b7 	bl	800843c <disk_initialize>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a2d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e221      	b.n	800a728 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a2e4:	79fb      	ldrb	r3, [r7, #7]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d007      	beq.n	800a2fa <find_volume+0xca>
 800a2ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2ee:	f003 0304 	and.w	r3, r3, #4
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a2f6:	230a      	movs	r3, #10
 800a2f8:	e216      	b.n	800a728 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fc:	7858      	ldrb	r0, [r3, #1]
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	330c      	adds	r3, #12
 800a302:	461a      	mov	r2, r3
 800a304:	2102      	movs	r1, #2
 800a306:	f7fe f8ff 	bl	8008508 <disk_ioctl>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <find_volume+0xe4>
 800a310:	2301      	movs	r3, #1
 800a312:	e209      	b.n	800a728 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	899b      	ldrh	r3, [r3, #12]
 800a318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a31c:	d80d      	bhi.n	800a33a <find_volume+0x10a>
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	899b      	ldrh	r3, [r3, #12]
 800a322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a326:	d308      	bcc.n	800a33a <find_volume+0x10a>
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	899b      	ldrh	r3, [r3, #12]
 800a32c:	461a      	mov	r2, r3
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	899b      	ldrh	r3, [r3, #12]
 800a332:	3b01      	subs	r3, #1
 800a334:	4013      	ands	r3, r2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <find_volume+0x10e>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e1f4      	b.n	800a728 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a342:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a346:	f7ff ff1d 	bl	800a184 <check_fs>
 800a34a:	4603      	mov	r3, r0
 800a34c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a354:	2b02      	cmp	r3, #2
 800a356:	d14b      	bne.n	800a3f0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a358:	2300      	movs	r3, #0
 800a35a:	643b      	str	r3, [r7, #64]	; 0x40
 800a35c:	e01f      	b.n	800a39e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a360:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a366:	011b      	lsls	r3, r3, #4
 800a368:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a36c:	4413      	add	r3, r2
 800a36e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	3304      	adds	r3, #4
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d006      	beq.n	800a388 <find_volume+0x158>
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	3308      	adds	r3, #8
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe f8f8 	bl	8008574 <ld_dword>
 800a384:	4602      	mov	r2, r0
 800a386:	e000      	b.n	800a38a <find_volume+0x15a>
 800a388:	2200      	movs	r2, #0
 800a38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a392:	440b      	add	r3, r1
 800a394:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a39a:	3301      	adds	r3, #1
 800a39c:	643b      	str	r3, [r7, #64]	; 0x40
 800a39e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	d9dc      	bls.n	800a35e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a3a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <find_volume+0x184>
 800a3ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a3b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a3bc:	4413      	add	r3, r2
 800a3be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a3c2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a3c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d005      	beq.n	800a3d6 <find_volume+0x1a6>
 800a3ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3ce:	f7ff fed9 	bl	800a184 <check_fs>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	e000      	b.n	800a3d8 <find_volume+0x1a8>
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a3dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d905      	bls.n	800a3f0 <find_volume+0x1c0>
 800a3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	643b      	str	r3, [r7, #64]	; 0x40
 800a3ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ec:	2b03      	cmp	r3, #3
 800a3ee:	d9e1      	bls.n	800a3b4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a3f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d101      	bne.n	800a3fc <find_volume+0x1cc>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e195      	b.n	800a728 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a3fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a400:	2b01      	cmp	r3, #1
 800a402:	d901      	bls.n	800a408 <find_volume+0x1d8>
 800a404:	230d      	movs	r3, #13
 800a406:	e18f      	b.n	800a728 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	3338      	adds	r3, #56	; 0x38
 800a40c:	330b      	adds	r3, #11
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe f898 	bl	8008544 <ld_word>
 800a414:	4603      	mov	r3, r0
 800a416:	461a      	mov	r2, r3
 800a418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41a:	899b      	ldrh	r3, [r3, #12]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d001      	beq.n	800a424 <find_volume+0x1f4>
 800a420:	230d      	movs	r3, #13
 800a422:	e181      	b.n	800a728 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	3338      	adds	r3, #56	; 0x38
 800a428:	3316      	adds	r3, #22
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe f88a 	bl	8008544 <ld_word>
 800a430:	4603      	mov	r3, r0
 800a432:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d106      	bne.n	800a448 <find_volume+0x218>
 800a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43c:	3338      	adds	r3, #56	; 0x38
 800a43e:	3324      	adds	r3, #36	; 0x24
 800a440:	4618      	mov	r0, r3
 800a442:	f7fe f897 	bl	8008574 <ld_dword>
 800a446:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a44c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	789b      	ldrb	r3, [r3, #2]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d005      	beq.n	800a46c <find_volume+0x23c>
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	789b      	ldrb	r3, [r3, #2]
 800a464:	2b02      	cmp	r3, #2
 800a466:	d001      	beq.n	800a46c <find_volume+0x23c>
 800a468:	230d      	movs	r3, #13
 800a46a:	e15d      	b.n	800a728 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	789b      	ldrb	r3, [r3, #2]
 800a470:	461a      	mov	r2, r3
 800a472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a474:	fb02 f303 	mul.w	r3, r2, r3
 800a478:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a480:	b29a      	uxth	r2, r3
 800a482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a484:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a488:	895b      	ldrh	r3, [r3, #10]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d008      	beq.n	800a4a0 <find_volume+0x270>
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	895b      	ldrh	r3, [r3, #10]
 800a492:	461a      	mov	r2, r3
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	895b      	ldrh	r3, [r3, #10]
 800a498:	3b01      	subs	r3, #1
 800a49a:	4013      	ands	r3, r2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <find_volume+0x274>
 800a4a0:	230d      	movs	r3, #13
 800a4a2:	e141      	b.n	800a728 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a6:	3338      	adds	r3, #56	; 0x38
 800a4a8:	3311      	adds	r3, #17
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe f84a 	bl	8008544 <ld_word>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	891b      	ldrh	r3, [r3, #8]
 800a4bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4be:	8992      	ldrh	r2, [r2, #12]
 800a4c0:	0952      	lsrs	r2, r2, #5
 800a4c2:	b292      	uxth	r2, r2
 800a4c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4c8:	fb02 f201 	mul.w	r2, r2, r1
 800a4cc:	1a9b      	subs	r3, r3, r2
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <find_volume+0x2a8>
 800a4d4:	230d      	movs	r3, #13
 800a4d6:	e127      	b.n	800a728 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	3338      	adds	r3, #56	; 0x38
 800a4dc:	3313      	adds	r3, #19
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fe f830 	bl	8008544 <ld_word>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a4e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <find_volume+0x2cc>
 800a4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f0:	3338      	adds	r3, #56	; 0x38
 800a4f2:	3320      	adds	r3, #32
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fe f83d 	bl	8008574 <ld_dword>
 800a4fa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	3338      	adds	r3, #56	; 0x38
 800a500:	330e      	adds	r3, #14
 800a502:	4618      	mov	r0, r3
 800a504:	f7fe f81e 	bl	8008544 <ld_word>
 800a508:	4603      	mov	r3, r0
 800a50a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a50c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d104      	bne.n	800a51c <find_volume+0x2ec>
 800a512:	230d      	movs	r3, #13
 800a514:	e108      	b.n	800a728 <find_volume+0x4f8>
 800a516:	bf00      	nop
 800a518:	20000498 	.word	0x20000498

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a51c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a520:	4413      	add	r3, r2
 800a522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a524:	8911      	ldrh	r1, [r2, #8]
 800a526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a528:	8992      	ldrh	r2, [r2, #12]
 800a52a:	0952      	lsrs	r2, r2, #5
 800a52c:	b292      	uxth	r2, r2
 800a52e:	fbb1 f2f2 	udiv	r2, r1, r2
 800a532:	b292      	uxth	r2, r2
 800a534:	4413      	add	r3, r2
 800a536:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a538:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d201      	bcs.n	800a544 <find_volume+0x314>
 800a540:	230d      	movs	r3, #13
 800a542:	e0f1      	b.n	800a728 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a54c:	8952      	ldrh	r2, [r2, #10]
 800a54e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a552:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <find_volume+0x32e>
 800a55a:	230d      	movs	r3, #13
 800a55c:	e0e4      	b.n	800a728 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a55e:	2303      	movs	r3, #3
 800a560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d802      	bhi.n	800a574 <find_volume+0x344>
 800a56e:	2302      	movs	r3, #2
 800a570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a576:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d802      	bhi.n	800a584 <find_volume+0x354>
 800a57e:	2301      	movs	r3, #1
 800a580:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	1c9a      	adds	r2, r3, #2
 800a588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a590:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a592:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a596:	441a      	add	r2, r3
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a59c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	441a      	add	r2, r3
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a5a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d11e      	bne.n	800a5ec <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	3338      	adds	r3, #56	; 0x38
 800a5b2:	332a      	adds	r3, #42	; 0x2a
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fd ffc5 	bl	8008544 <ld_word>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <find_volume+0x394>
 800a5c0:	230d      	movs	r3, #13
 800a5c2:	e0b1      	b.n	800a728 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c6:	891b      	ldrh	r3, [r3, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <find_volume+0x3a0>
 800a5cc:	230d      	movs	r3, #13
 800a5ce:	e0ab      	b.n	800a728 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	3338      	adds	r3, #56	; 0x38
 800a5d4:	332c      	adds	r3, #44	; 0x2c
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fd ffcc 	bl	8008574 <ld_dword>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	647b      	str	r3, [r7, #68]	; 0x44
 800a5ea:	e01f      	b.n	800a62c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	891b      	ldrh	r3, [r3, #8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <find_volume+0x3c8>
 800a5f4:	230d      	movs	r3, #13
 800a5f6:	e097      	b.n	800a728 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5fe:	441a      	add	r2, r3
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a604:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d103      	bne.n	800a614 <find_volume+0x3e4>
 800a60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60e:	69db      	ldr	r3, [r3, #28]
 800a610:	005b      	lsls	r3, r3, #1
 800a612:	e00a      	b.n	800a62a <find_volume+0x3fa>
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	69da      	ldr	r2, [r3, #28]
 800a618:	4613      	mov	r3, r2
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	4413      	add	r3, r2
 800a61e:	085a      	lsrs	r2, r3, #1
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	69db      	ldr	r3, [r3, #28]
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a62a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	6a1a      	ldr	r2, [r3, #32]
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	899b      	ldrh	r3, [r3, #12]
 800a634:	4619      	mov	r1, r3
 800a636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a638:	440b      	add	r3, r1
 800a63a:	3b01      	subs	r3, #1
 800a63c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a63e:	8989      	ldrh	r1, [r1, #12]
 800a640:	fbb3 f3f1 	udiv	r3, r3, r1
 800a644:	429a      	cmp	r2, r3
 800a646:	d201      	bcs.n	800a64c <find_volume+0x41c>
 800a648:	230d      	movs	r3, #13
 800a64a:	e06d      	b.n	800a728 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64e:	f04f 32ff 	mov.w	r2, #4294967295
 800a652:	619a      	str	r2, [r3, #24]
 800a654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a656:	699a      	ldr	r2, [r3, #24]
 800a658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65e:	2280      	movs	r2, #128	; 0x80
 800a660:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a666:	2b03      	cmp	r3, #3
 800a668:	d149      	bne.n	800a6fe <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66c:	3338      	adds	r3, #56	; 0x38
 800a66e:	3330      	adds	r3, #48	; 0x30
 800a670:	4618      	mov	r0, r3
 800a672:	f7fd ff67 	bl	8008544 <ld_word>
 800a676:	4603      	mov	r3, r0
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d140      	bne.n	800a6fe <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a67c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a67e:	3301      	adds	r3, #1
 800a680:	4619      	mov	r1, r3
 800a682:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a684:	f7fe fa0e 	bl	8008aa4 <move_window>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d137      	bne.n	800a6fe <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	2200      	movs	r2, #0
 800a692:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a696:	3338      	adds	r3, #56	; 0x38
 800a698:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fd ff51 	bl	8008544 <ld_word>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d127      	bne.n	800a6fe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	3338      	adds	r3, #56	; 0x38
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fd ff5e 	bl	8008574 <ld_dword>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	4b1d      	ldr	r3, [pc, #116]	; (800a730 <find_volume+0x500>)
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d11e      	bne.n	800a6fe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	3338      	adds	r3, #56	; 0x38
 800a6c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fd ff53 	bl	8008574 <ld_dword>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	4b18      	ldr	r3, [pc, #96]	; (800a734 <find_volume+0x504>)
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d113      	bne.n	800a6fe <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d8:	3338      	adds	r3, #56	; 0x38
 800a6da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fd ff48 	bl	8008574 <ld_dword>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ec:	3338      	adds	r3, #56	; 0x38
 800a6ee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fd ff3e 	bl	8008574 <ld_dword>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fc:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a704:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a706:	4b0c      	ldr	r3, [pc, #48]	; (800a738 <find_volume+0x508>)
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	3301      	adds	r3, #1
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	4b0a      	ldr	r3, [pc, #40]	; (800a738 <find_volume+0x508>)
 800a710:	801a      	strh	r2, [r3, #0]
 800a712:	4b09      	ldr	r3, [pc, #36]	; (800a738 <find_volume+0x508>)
 800a714:	881a      	ldrh	r2, [r3, #0]
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71c:	4a07      	ldr	r2, [pc, #28]	; (800a73c <find_volume+0x50c>)
 800a71e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a722:	f7fe f957 	bl	80089d4 <clear_lock>
#endif
	return FR_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3758      	adds	r7, #88	; 0x58
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	41615252 	.word	0x41615252
 800a734:	61417272 	.word	0x61417272
 800a738:	2000049c 	.word	0x2000049c
 800a73c:	200004c0 	.word	0x200004c0

0800a740 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a74a:	2309      	movs	r3, #9
 800a74c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d01c      	beq.n	800a78e <validate+0x4e>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d018      	beq.n	800a78e <validate+0x4e>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d013      	beq.n	800a78e <validate+0x4e>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	889a      	ldrh	r2, [r3, #4]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	88db      	ldrh	r3, [r3, #6]
 800a770:	429a      	cmp	r2, r3
 800a772:	d10c      	bne.n	800a78e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	785b      	ldrb	r3, [r3, #1]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fd fe44 	bl	8008408 <disk_status>
 800a780:	4603      	mov	r3, r0
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <validate+0x4e>
			res = FR_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d102      	bne.n	800a79a <validate+0x5a>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	e000      	b.n	800a79c <validate+0x5c>
 800a79a:	2300      	movs	r3, #0
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	6013      	str	r3, [r2, #0]
	return res;
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
	...

0800a7ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a7be:	f107 0310 	add.w	r3, r7, #16
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7ff fc9a 	bl	800a0fc <get_ldnumber>
 800a7c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	da01      	bge.n	800a7d4 <f_mount+0x28>
 800a7d0:	230b      	movs	r3, #11
 800a7d2:	e02b      	b.n	800a82c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a7d4:	4a17      	ldr	r2, [pc, #92]	; (800a834 <f_mount+0x88>)
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d005      	beq.n	800a7f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a7e4:	69b8      	ldr	r0, [r7, #24]
 800a7e6:	f7fe f8f5 	bl	80089d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d002      	beq.n	800a7fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	490d      	ldr	r1, [pc, #52]	; (800a834 <f_mount+0x88>)
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d002      	beq.n	800a812 <f_mount+0x66>
 800a80c:	79fb      	ldrb	r3, [r7, #7]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d001      	beq.n	800a816 <f_mount+0x6a>
 800a812:	2300      	movs	r3, #0
 800a814:	e00a      	b.n	800a82c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a816:	f107 010c 	add.w	r1, r7, #12
 800a81a:	f107 0308 	add.w	r3, r7, #8
 800a81e:	2200      	movs	r2, #0
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff fd05 	bl	800a230 <find_volume>
 800a826:	4603      	mov	r3, r0
 800a828:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3720      	adds	r7, #32
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	20000498 	.word	0x20000498

0800a838 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b09a      	sub	sp, #104	; 0x68
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	4613      	mov	r3, r2
 800a844:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <f_open+0x18>
 800a84c:	2309      	movs	r3, #9
 800a84e:	e1bb      	b.n	800abc8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a850:	79fb      	ldrb	r3, [r7, #7]
 800a852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a856:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a858:	79fa      	ldrb	r2, [r7, #7]
 800a85a:	f107 0114 	add.w	r1, r7, #20
 800a85e:	f107 0308 	add.w	r3, r7, #8
 800a862:	4618      	mov	r0, r3
 800a864:	f7ff fce4 	bl	800a230 <find_volume>
 800a868:	4603      	mov	r3, r0
 800a86a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a86e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a872:	2b00      	cmp	r3, #0
 800a874:	f040 819f 	bne.w	800abb6 <f_open+0x37e>
		dj.obj.fs = fs;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	f107 0318 	add.w	r3, r7, #24
 800a882:	4611      	mov	r1, r2
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff fbc3 	bl	800a010 <follow_path>
 800a88a:	4603      	mov	r3, r0
 800a88c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a890:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a894:	2b00      	cmp	r3, #0
 800a896:	d11a      	bne.n	800a8ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a898:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a89c:	b25b      	sxtb	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	da03      	bge.n	800a8aa <f_open+0x72>
				res = FR_INVALID_NAME;
 800a8a2:	2306      	movs	r3, #6
 800a8a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a8a8:	e011      	b.n	800a8ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a8aa:	79fb      	ldrb	r3, [r7, #7]
 800a8ac:	f023 0301 	bic.w	r3, r3, #1
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	bf14      	ite	ne
 800a8b4:	2301      	movne	r3, #1
 800a8b6:	2300      	moveq	r3, #0
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	f107 0318 	add.w	r3, r7, #24
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fd ff3e 	bl	8008744 <chk_lock>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	f003 031c 	and.w	r3, r3, #28
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d07f      	beq.n	800a9d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a8d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d017      	beq.n	800a910 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a8e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d10e      	bne.n	800a906 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a8e8:	f7fd ff88 	bl	80087fc <enq_lock>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d006      	beq.n	800a900 <f_open+0xc8>
 800a8f2:	f107 0318 	add.w	r3, r7, #24
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff f8da 	bl	8009ab0 <dir_register>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	e000      	b.n	800a902 <f_open+0xca>
 800a900:	2312      	movs	r3, #18
 800a902:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a906:	79fb      	ldrb	r3, [r7, #7]
 800a908:	f043 0308 	orr.w	r3, r3, #8
 800a90c:	71fb      	strb	r3, [r7, #7]
 800a90e:	e010      	b.n	800a932 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a910:	7fbb      	ldrb	r3, [r7, #30]
 800a912:	f003 0311 	and.w	r3, r3, #17
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <f_open+0xea>
					res = FR_DENIED;
 800a91a:	2307      	movs	r3, #7
 800a91c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a920:	e007      	b.n	800a932 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a922:	79fb      	ldrb	r3, [r7, #7]
 800a924:	f003 0304 	and.w	r3, r3, #4
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d002      	beq.n	800a932 <f_open+0xfa>
 800a92c:	2308      	movs	r3, #8
 800a92e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a932:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a936:	2b00      	cmp	r3, #0
 800a938:	d168      	bne.n	800aa0c <f_open+0x1d4>
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	f003 0308 	and.w	r3, r3, #8
 800a940:	2b00      	cmp	r3, #0
 800a942:	d063      	beq.n	800aa0c <f_open+0x1d4>
				dw = GET_FATTIME();
 800a944:	f7fd fa64 	bl	8007e10 <get_fattime>
 800a948:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	330e      	adds	r3, #14
 800a94e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a950:	4618      	mov	r0, r3
 800a952:	f7fd fe4d 	bl	80085f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	3316      	adds	r3, #22
 800a95a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fd fe47 	bl	80085f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a964:	330b      	adds	r3, #11
 800a966:	2220      	movs	r2, #32
 800a968:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a96e:	4611      	mov	r1, r2
 800a970:	4618      	mov	r0, r3
 800a972:	f7fe fe16 	bl	80095a2 <ld_clust>
 800a976:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a97c:	2200      	movs	r2, #0
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fe fe2e 	bl	80095e0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	331c      	adds	r3, #28
 800a988:	2100      	movs	r1, #0
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fd fe30 	bl	80085f0 <st_dword>
					fs->wflag = 1;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2201      	movs	r2, #1
 800a994:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d037      	beq.n	800aa0c <f_open+0x1d4>
						dw = fs->winsect;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a9a2:	f107 0318 	add.w	r3, r7, #24
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fe fb1e 	bl	8008fec <remove_chain>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a9b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d126      	bne.n	800aa0c <f_open+0x1d4>
							res = move_window(fs, dw);
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fe f86e 	bl	8008aa4 <move_window>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9d2:	3a01      	subs	r2, #1
 800a9d4:	615a      	str	r2, [r3, #20]
 800a9d6:	e019      	b.n	800aa0c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a9d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d115      	bne.n	800aa0c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a9e0:	7fbb      	ldrb	r3, [r7, #30]
 800a9e2:	f003 0310 	and.w	r3, r3, #16
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a9ea:	2304      	movs	r3, #4
 800a9ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a9f0:	e00c      	b.n	800aa0c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a9f2:	79fb      	ldrb	r3, [r7, #7]
 800a9f4:	f003 0302 	and.w	r3, r3, #2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d007      	beq.n	800aa0c <f_open+0x1d4>
 800a9fc:	7fbb      	ldrb	r3, [r7, #30]
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d002      	beq.n	800aa0c <f_open+0x1d4>
						res = FR_DENIED;
 800aa06:	2307      	movs	r3, #7
 800aa08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800aa0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d128      	bne.n	800aa66 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aa14:	79fb      	ldrb	r3, [r7, #7]
 800aa16:	f003 0308 	and.w	r3, r3, #8
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa24:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800aa2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa34:	79fb      	ldrb	r3, [r7, #7]
 800aa36:	f023 0301 	bic.w	r3, r3, #1
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	bf14      	ite	ne
 800aa3e:	2301      	movne	r3, #1
 800aa40:	2300      	moveq	r3, #0
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	461a      	mov	r2, r3
 800aa46:	f107 0318 	add.w	r3, r7, #24
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fd fef7 	bl	8008840 <inc_lock>
 800aa52:	4602      	mov	r2, r0
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <f_open+0x22e>
 800aa60:	2302      	movs	r3, #2
 800aa62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aa66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f040 80a3 	bne.w	800abb6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa74:	4611      	mov	r1, r2
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fe fd93 	bl	80095a2 <ld_clust>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	331c      	adds	r3, #28
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fd fd74 	bl	8008574 <ld_dword>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	88da      	ldrh	r2, [r3, #6]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	79fa      	ldrb	r2, [r7, #7]
 800aaaa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3330      	adds	r3, #48	; 0x30
 800aac2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aac6:	2100      	movs	r1, #0
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fd fdde 	bl	800868a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aace:	79fb      	ldrb	r3, [r7, #7]
 800aad0:	f003 0320 	and.w	r3, r3, #32
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d06e      	beq.n	800abb6 <f_open+0x37e>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d06a      	beq.n	800abb6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	68da      	ldr	r2, [r3, #12]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	895b      	ldrh	r3, [r3, #10]
 800aaec:	461a      	mov	r2, r3
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	899b      	ldrh	r3, [r3, #12]
 800aaf2:	fb03 f302 	mul.w	r3, r3, r2
 800aaf6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab04:	e016      	b.n	800ab34 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe f887 	bl	8008c1e <get_fat>
 800ab10:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ab12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d802      	bhi.n	800ab1e <f_open+0x2e6>
 800ab18:	2302      	movs	r3, #2
 800ab1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ab1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab24:	d102      	bne.n	800ab2c <f_open+0x2f4>
 800ab26:	2301      	movs	r3, #1
 800ab28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d103      	bne.n	800ab44 <f_open+0x30c>
 800ab3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d8e0      	bhi.n	800ab06 <f_open+0x2ce>
				}
				fp->clust = clst;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ab4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d131      	bne.n	800abb6 <f_open+0x37e>
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	899b      	ldrh	r3, [r3, #12]
 800ab56:	461a      	mov	r2, r3
 800ab58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab5e:	fb02 f201 	mul.w	r2, r2, r1
 800ab62:	1a9b      	subs	r3, r3, r2
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d026      	beq.n	800abb6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fe f837 	bl	8008be0 <clust2sect>
 800ab72:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ab74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d103      	bne.n	800ab82 <f_open+0x34a>
						res = FR_INT_ERR;
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ab80:	e019      	b.n	800abb6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	899b      	ldrh	r3, [r3, #12]
 800ab86:	461a      	mov	r2, r3
 800ab88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab90:	441a      	add	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	7858      	ldrb	r0, [r3, #1]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6a1a      	ldr	r2, [r3, #32]
 800aba4:	2301      	movs	r3, #1
 800aba6:	f7fd fc6f 	bl	8008488 <disk_read>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <f_open+0x37e>
 800abb0:	2301      	movs	r3, #1
 800abb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800abb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d002      	beq.n	800abc4 <f_open+0x38c>
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800abc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3768      	adds	r7, #104	; 0x68
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08c      	sub	sp, #48	; 0x30
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
 800abdc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	2200      	movs	r2, #0
 800abe6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f107 0210 	add.w	r2, r7, #16
 800abee:	4611      	mov	r1, r2
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7ff fda5 	bl	800a740 <validate>
 800abf6:	4603      	mov	r3, r0
 800abf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800abfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d107      	bne.n	800ac14 <f_write+0x44>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	7d5b      	ldrb	r3, [r3, #21]
 800ac08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <f_write+0x4a>
 800ac14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac18:	e16a      	b.n	800aef0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	7d1b      	ldrb	r3, [r3, #20]
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <f_write+0x5a>
 800ac26:	2307      	movs	r3, #7
 800ac28:	e162      	b.n	800aef0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	699a      	ldr	r2, [r3, #24]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	441a      	add	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	f080 814c 	bcs.w	800aed4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	43db      	mvns	r3, r3
 800ac42:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ac44:	e146      	b.n	800aed4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	8992      	ldrh	r2, [r2, #12]
 800ac4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac52:	fb02 f201 	mul.w	r2, r2, r1
 800ac56:	1a9b      	subs	r3, r3, r2
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f040 80f1 	bne.w	800ae40 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	693a      	ldr	r2, [r7, #16]
 800ac64:	8992      	ldrh	r2, [r2, #12]
 800ac66:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	8952      	ldrh	r2, [r2, #10]
 800ac6e:	3a01      	subs	r2, #1
 800ac70:	4013      	ands	r3, r2
 800ac72:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d143      	bne.n	800ad02 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10c      	bne.n	800ac9c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ac88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d11a      	bne.n	800acc4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2100      	movs	r1, #0
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fe fa0f 	bl	80090b6 <create_chain>
 800ac98:	62b8      	str	r0, [r7, #40]	; 0x28
 800ac9a:	e013      	b.n	800acc4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d007      	beq.n	800acb4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	699b      	ldr	r3, [r3, #24]
 800aca8:	4619      	mov	r1, r3
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f7fe fa9b 	bl	80091e6 <clmt_clust>
 800acb0:	62b8      	str	r0, [r7, #40]	; 0x28
 800acb2:	e007      	b.n	800acc4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	4619      	mov	r1, r3
 800acbc:	4610      	mov	r0, r2
 800acbe:	f7fe f9fa 	bl	80090b6 <create_chain>
 800acc2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f000 8109 	beq.w	800aede <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800accc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d104      	bne.n	800acdc <f_write+0x10c>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2202      	movs	r2, #2
 800acd6:	755a      	strb	r2, [r3, #21]
 800acd8:	2302      	movs	r3, #2
 800acda:	e109      	b.n	800aef0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace2:	d104      	bne.n	800acee <f_write+0x11e>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2201      	movs	r2, #1
 800ace8:	755a      	strb	r2, [r3, #21]
 800acea:	2301      	movs	r3, #1
 800acec:	e100      	b.n	800aef0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acf2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d102      	bne.n	800ad02 <f_write+0x132>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad00:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	7d1b      	ldrb	r3, [r3, #20]
 800ad06:	b25b      	sxtb	r3, r3
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	da18      	bge.n	800ad3e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	7858      	ldrb	r0, [r3, #1]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a1a      	ldr	r2, [r3, #32]
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	f7fd fbd4 	bl	80084c8 <disk_write>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d004      	beq.n	800ad30 <f_write+0x160>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	755a      	strb	r2, [r3, #21]
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e0df      	b.n	800aef0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	7d1b      	ldrb	r3, [r3, #20]
 800ad34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad3e:	693a      	ldr	r2, [r7, #16]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	4619      	mov	r1, r3
 800ad46:	4610      	mov	r0, r2
 800ad48:	f7fd ff4a 	bl	8008be0 <clust2sect>
 800ad4c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d104      	bne.n	800ad5e <f_write+0x18e>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2202      	movs	r2, #2
 800ad58:	755a      	strb	r2, [r3, #21]
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	e0c8      	b.n	800aef0 <f_write+0x320>
			sect += csect;
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	4413      	add	r3, r2
 800ad64:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	899b      	ldrh	r3, [r3, #12]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad72:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ad74:	6a3b      	ldr	r3, [r7, #32]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d043      	beq.n	800ae02 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad7a:	69ba      	ldr	r2, [r7, #24]
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	4413      	add	r3, r2
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	8952      	ldrh	r2, [r2, #10]
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d905      	bls.n	800ad94 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	895b      	ldrh	r3, [r3, #10]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	7858      	ldrb	r0, [r3, #1]
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	69f9      	ldr	r1, [r7, #28]
 800ad9e:	f7fd fb93 	bl	80084c8 <disk_write>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d004      	beq.n	800adb2 <f_write+0x1e2>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2201      	movs	r2, #1
 800adac:	755a      	strb	r2, [r3, #21]
 800adae:	2301      	movs	r3, #1
 800adb0:	e09e      	b.n	800aef0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6a1a      	ldr	r2, [r3, #32]
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	6a3a      	ldr	r2, [r7, #32]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d918      	bls.n	800adf2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6a1a      	ldr	r2, [r3, #32]
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	8992      	ldrh	r2, [r2, #12]
 800add2:	fb02 f303 	mul.w	r3, r2, r3
 800add6:	69fa      	ldr	r2, [r7, #28]
 800add8:	18d1      	adds	r1, r2, r3
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	899b      	ldrh	r3, [r3, #12]
 800adde:	461a      	mov	r2, r3
 800ade0:	f7fd fc32 	bl	8008648 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	7d1b      	ldrb	r3, [r3, #20]
 800ade8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adec:	b2da      	uxtb	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	899b      	ldrh	r3, [r3, #12]
 800adf6:	461a      	mov	r2, r3
 800adf8:	6a3b      	ldr	r3, [r7, #32]
 800adfa:	fb02 f303 	mul.w	r3, r2, r3
 800adfe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ae00:	e04b      	b.n	800ae9a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6a1b      	ldr	r3, [r3, #32]
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d016      	beq.n	800ae3a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	699a      	ldr	r2, [r3, #24]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d210      	bcs.n	800ae3a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	7858      	ldrb	r0, [r3, #1]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae22:	2301      	movs	r3, #1
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	f7fd fb2f 	bl	8008488 <disk_read>
 800ae2a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d004      	beq.n	800ae3a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	755a      	strb	r2, [r3, #21]
 800ae36:	2301      	movs	r3, #1
 800ae38:	e05a      	b.n	800aef0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	899b      	ldrh	r3, [r3, #12]
 800ae44:	4618      	mov	r0, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	8992      	ldrh	r2, [r2, #12]
 800ae4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae52:	fb02 f201 	mul.w	r2, r2, r1
 800ae56:	1a9b      	subs	r3, r3, r2
 800ae58:	1ac3      	subs	r3, r0, r3
 800ae5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ae5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d901      	bls.n	800ae68 <f_write+0x298>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	8992      	ldrh	r2, [r2, #12]
 800ae76:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae7a:	fb02 f200 	mul.w	r2, r2, r0
 800ae7e:	1a9b      	subs	r3, r3, r2
 800ae80:	440b      	add	r3, r1
 800ae82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae84:	69f9      	ldr	r1, [r7, #28]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fd fbde 	bl	8008648 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	7d1b      	ldrb	r3, [r3, #20]
 800ae90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ae9a:	69fa      	ldr	r2, [r7, #28]
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	4413      	add	r3, r2
 800aea0:	61fb      	str	r3, [r7, #28]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	699a      	ldr	r2, [r3, #24]
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	441a      	add	r2, r3
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	619a      	str	r2, [r3, #24]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	68da      	ldr	r2, [r3, #12]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	bf38      	it	cc
 800aeba:	461a      	movcc	r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	60da      	str	r2, [r3, #12]
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	441a      	add	r2, r3
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	601a      	str	r2, [r3, #0]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f47f aeb5 	bne.w	800ac46 <f_write+0x76>
 800aedc:	e000      	b.n	800aee0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aede:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	7d1b      	ldrb	r3, [r3, #20]
 800aee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3730      	adds	r7, #48	; 0x30
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f107 0208 	add.w	r2, r7, #8
 800af06:	4611      	mov	r1, r2
 800af08:	4618      	mov	r0, r3
 800af0a:	f7ff fc19 	bl	800a740 <validate>
 800af0e:	4603      	mov	r3, r0
 800af10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af12:	7dfb      	ldrb	r3, [r7, #23]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d168      	bne.n	800afea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	7d1b      	ldrb	r3, [r3, #20]
 800af1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af20:	2b00      	cmp	r3, #0
 800af22:	d062      	beq.n	800afea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	7d1b      	ldrb	r3, [r3, #20]
 800af28:	b25b      	sxtb	r3, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	da15      	bge.n	800af5a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	7858      	ldrb	r0, [r3, #1]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a1a      	ldr	r2, [r3, #32]
 800af3c:	2301      	movs	r3, #1
 800af3e:	f7fd fac3 	bl	80084c8 <disk_write>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <f_sync+0x54>
 800af48:	2301      	movs	r3, #1
 800af4a:	e04f      	b.n	800afec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	7d1b      	ldrb	r3, [r3, #20]
 800af50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af54:	b2da      	uxtb	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800af5a:	f7fc ff59 	bl	8007e10 <get_fattime>
 800af5e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af66:	4619      	mov	r1, r3
 800af68:	4610      	mov	r0, r2
 800af6a:	f7fd fd9b 	bl	8008aa4 <move_window>
 800af6e:	4603      	mov	r3, r0
 800af70:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d138      	bne.n	800afea <f_sync+0xf2>
					dir = fp->dir_ptr;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	330b      	adds	r3, #11
 800af82:	781a      	ldrb	r2, [r3, #0]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	330b      	adds	r3, #11
 800af88:	f042 0220 	orr.w	r2, r2, #32
 800af8c:	b2d2      	uxtb	r2, r2
 800af8e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6818      	ldr	r0, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	461a      	mov	r2, r3
 800af9a:	68f9      	ldr	r1, [r7, #12]
 800af9c:	f7fe fb20 	bl	80095e0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f103 021c 	add.w	r2, r3, #28
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	4619      	mov	r1, r3
 800afac:	4610      	mov	r0, r2
 800afae:	f7fd fb1f 	bl	80085f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3316      	adds	r3, #22
 800afb6:	6939      	ldr	r1, [r7, #16]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fd fb19 	bl	80085f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	3312      	adds	r3, #18
 800afc2:	2100      	movs	r1, #0
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fd faf8 	bl	80085ba <st_word>
					fs->wflag = 1;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2201      	movs	r2, #1
 800afce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fd fd94 	bl	8008b00 <sync_fs>
 800afd8:	4603      	mov	r3, r0
 800afda:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	7d1b      	ldrb	r3, [r3, #20]
 800afe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800afea:	7dfb      	ldrb	r3, [r7, #23]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3718      	adds	r7, #24
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff ff7b 	bl	800aef8 <f_sync>
 800b002:	4603      	mov	r3, r0
 800b004:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d118      	bne.n	800b03e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f107 0208 	add.w	r2, r7, #8
 800b012:	4611      	mov	r1, r2
 800b014:	4618      	mov	r0, r3
 800b016:	f7ff fb93 	bl	800a740 <validate>
 800b01a:	4603      	mov	r3, r0
 800b01c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10c      	bne.n	800b03e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fd fc97 	bl	800895c <dec_lock>
 800b02e:	4603      	mov	r3, r0
 800b030:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b032:	7bfb      	ldrb	r3, [r7, #15]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d102      	bne.n	800b03e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b054:	78fb      	ldrb	r3, [r7, #3]
 800b056:	2b0a      	cmp	r3, #10
 800b058:	d103      	bne.n	800b062 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b05a:	210d      	movs	r1, #13
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff fff3 	bl	800b048 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	db25      	blt.n	800b0ba <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	1c5a      	adds	r2, r3, #1
 800b072:	60fa      	str	r2, [r7, #12]
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	4413      	add	r3, r2
 800b078:	78fa      	ldrb	r2, [r7, #3]
 800b07a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2b3c      	cmp	r3, #60	; 0x3c
 800b080:	dd12      	ble.n	800b0a8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f103 010c 	add.w	r1, r3, #12
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	f107 0308 	add.w	r3, r7, #8
 800b092:	f7ff fd9d 	bl	800abd0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d101      	bne.n	800b0a2 <putc_bfd+0x5a>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	e001      	b.n	800b0a6 <putc_bfd+0x5e>
 800b0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	609a      	str	r2, [r3, #8]
 800b0b8:	e000      	b.n	800b0bc <putc_bfd+0x74>
	if (i < 0) return;
 800b0ba:	bf00      	nop
}
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b084      	sub	sp, #16
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	db17      	blt.n	800b102 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f103 010c 	add.w	r1, r3, #12
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	f107 030c 	add.w	r3, r7, #12
 800b0e6:	f7ff fd73 	bl	800abd0 <f_write>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d108      	bne.n	800b102 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d102      	bne.n	800b102 <putc_flush+0x40>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	e001      	b.n	800b106 <putc_flush+0x44>
	return EOF;
 800b102:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b10e:	b480      	push	{r7}
 800b110:	b083      	sub	sp, #12
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	605a      	str	r2, [r3, #4]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	609a      	str	r2, [r3, #8]
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b138:	b40e      	push	{r1, r2, r3}
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b0a7      	sub	sp, #156	; 0x9c
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff ffe0 	bl	800b10e <putc_init>

	va_start(arp, fmt);
 800b14e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b152:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b154:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b158:	1c5a      	adds	r2, r3, #1
 800b15a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b164:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 81f4 	beq.w	800b556 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800b16e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b172:	2b25      	cmp	r3, #37	; 0x25
 800b174:	d008      	beq.n	800b188 <f_printf+0x50>
			putc_bfd(&pb, c);
 800b176:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b17a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b17e:	4611      	mov	r1, r2
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff ff61 	bl	800b048 <putc_bfd>
			continue;
 800b186:	e1e5      	b.n	800b554 <f_printf+0x41c>
		}
		w = f = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b18e:	2300      	movs	r3, #0
 800b190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b194:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b1a4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b1a8:	2b30      	cmp	r3, #48	; 0x30
 800b1aa:	d10b      	bne.n	800b1c4 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b1b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b1c2:	e024      	b.n	800b20e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b1c4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b1c8:	2b2d      	cmp	r3, #45	; 0x2d
 800b1ca:	d120      	bne.n	800b20e <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b1d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b1e2:	e014      	b.n	800b20e <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b1e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	005b      	lsls	r3, r3, #1
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b1f6:	4413      	add	r3, r2
 800b1f8:	3b30      	subs	r3, #48	; 0x30
 800b1fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b1fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b202:	1c5a      	adds	r2, r3, #1
 800b204:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b20e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b212:	2b2f      	cmp	r3, #47	; 0x2f
 800b214:	d903      	bls.n	800b21e <f_printf+0xe6>
 800b216:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b21a:	2b39      	cmp	r3, #57	; 0x39
 800b21c:	d9e2      	bls.n	800b1e4 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b21e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b222:	2b6c      	cmp	r3, #108	; 0x6c
 800b224:	d003      	beq.n	800b22e <f_printf+0xf6>
 800b226:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b22a:	2b4c      	cmp	r3, #76	; 0x4c
 800b22c:	d10d      	bne.n	800b24a <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b22e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b232:	f043 0304 	orr.w	r3, r3, #4
 800b236:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b23a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b23e:	1c5a      	adds	r2, r3, #1
 800b240:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b24a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f000 8183 	beq.w	800b55a <f_printf+0x422>
		d = c;
 800b254:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b258:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b25c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b260:	2b60      	cmp	r3, #96	; 0x60
 800b262:	d908      	bls.n	800b276 <f_printf+0x13e>
 800b264:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b268:	2b7a      	cmp	r3, #122	; 0x7a
 800b26a:	d804      	bhi.n	800b276 <f_printf+0x13e>
 800b26c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b270:	3b20      	subs	r3, #32
 800b272:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b276:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b27a:	3b42      	subs	r3, #66	; 0x42
 800b27c:	2b16      	cmp	r3, #22
 800b27e:	f200 8098 	bhi.w	800b3b2 <f_printf+0x27a>
 800b282:	a201      	add	r2, pc, #4	; (adr r2, 800b288 <f_printf+0x150>)
 800b284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b288:	0800b393 	.word	0x0800b393
 800b28c:	0800b37b 	.word	0x0800b37b
 800b290:	0800b3a3 	.word	0x0800b3a3
 800b294:	0800b3b3 	.word	0x0800b3b3
 800b298:	0800b3b3 	.word	0x0800b3b3
 800b29c:	0800b3b3 	.word	0x0800b3b3
 800b2a0:	0800b3b3 	.word	0x0800b3b3
 800b2a4:	0800b3b3 	.word	0x0800b3b3
 800b2a8:	0800b3b3 	.word	0x0800b3b3
 800b2ac:	0800b3b3 	.word	0x0800b3b3
 800b2b0:	0800b3b3 	.word	0x0800b3b3
 800b2b4:	0800b3b3 	.word	0x0800b3b3
 800b2b8:	0800b3b3 	.word	0x0800b3b3
 800b2bc:	0800b39b 	.word	0x0800b39b
 800b2c0:	0800b3b3 	.word	0x0800b3b3
 800b2c4:	0800b3b3 	.word	0x0800b3b3
 800b2c8:	0800b3b3 	.word	0x0800b3b3
 800b2cc:	0800b2e5 	.word	0x0800b2e5
 800b2d0:	0800b3b3 	.word	0x0800b3b3
 800b2d4:	0800b3a3 	.word	0x0800b3a3
 800b2d8:	0800b3b3 	.word	0x0800b3b3
 800b2dc:	0800b3b3 	.word	0x0800b3b3
 800b2e0:	0800b3ab 	.word	0x0800b3ab
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b2e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2e6:	1d1a      	adds	r2, r3, #4
 800b2e8:	67ba      	str	r2, [r7, #120]	; 0x78
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b2f4:	e004      	b.n	800b300 <f_printf+0x1c8>
 800b2f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b300:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b306:	4413      	add	r3, r2
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1f3      	bne.n	800b2f6 <f_printf+0x1be>
			if (!(f & 2)) {
 800b30e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b312:	f003 0302 	and.w	r3, r3, #2
 800b316:	2b00      	cmp	r3, #0
 800b318:	d11a      	bne.n	800b350 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b31a:	e005      	b.n	800b328 <f_printf+0x1f0>
 800b31c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b320:	2120      	movs	r1, #32
 800b322:	4618      	mov	r0, r3
 800b324:	f7ff fe90 	bl	800b048 <putc_bfd>
 800b328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b332:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b336:	429a      	cmp	r2, r3
 800b338:	d8f0      	bhi.n	800b31c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b33a:	e009      	b.n	800b350 <f_printf+0x218>
 800b33c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b33e:	1c5a      	adds	r2, r3, #1
 800b340:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b342:	781a      	ldrb	r2, [r3, #0]
 800b344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b348:	4611      	mov	r1, r2
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff fe7c 	bl	800b048 <putc_bfd>
 800b350:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1f1      	bne.n	800b33c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b358:	e005      	b.n	800b366 <f_printf+0x22e>
 800b35a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b35e:	2120      	movs	r1, #32
 800b360:	4618      	mov	r0, r3
 800b362:	f7ff fe71 	bl	800b048 <putc_bfd>
 800b366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b370:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b374:	429a      	cmp	r2, r3
 800b376:	d8f0      	bhi.n	800b35a <f_printf+0x222>
			continue;
 800b378:	e0ec      	b.n	800b554 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b37a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b37c:	1d1a      	adds	r2, r3, #4
 800b37e:	67ba      	str	r2, [r7, #120]	; 0x78
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	b2da      	uxtb	r2, r3
 800b384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b388:	4611      	mov	r1, r2
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff fe5c 	bl	800b048 <putc_bfd>
 800b390:	e0e0      	b.n	800b554 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800b392:	2302      	movs	r3, #2
 800b394:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b398:	e014      	b.n	800b3c4 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b39a:	2308      	movs	r3, #8
 800b39c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b3a0:	e010      	b.n	800b3c4 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b3a2:	230a      	movs	r3, #10
 800b3a4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b3a8:	e00c      	b.n	800b3c4 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b3aa:	2310      	movs	r3, #16
 800b3ac:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b3b0:	e008      	b.n	800b3c4 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b3b2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b3b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7ff fe43 	bl	800b048 <putc_bfd>
 800b3c2:	e0c7      	b.n	800b554 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b3c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b3c8:	f003 0304 	and.w	r3, r3, #4
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d004      	beq.n	800b3da <f_printf+0x2a2>
 800b3d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3d2:	1d1a      	adds	r2, r3, #4
 800b3d4:	67ba      	str	r2, [r7, #120]	; 0x78
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	e00c      	b.n	800b3f4 <f_printf+0x2bc>
 800b3da:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b3de:	2b44      	cmp	r3, #68	; 0x44
 800b3e0:	d104      	bne.n	800b3ec <f_printf+0x2b4>
 800b3e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3e4:	1d1a      	adds	r2, r3, #4
 800b3e6:	67ba      	str	r2, [r7, #120]	; 0x78
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	e003      	b.n	800b3f4 <f_printf+0x2bc>
 800b3ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3ee:	1d1a      	adds	r2, r3, #4
 800b3f0:	67ba      	str	r2, [r7, #120]	; 0x78
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b3f8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b3fc:	2b44      	cmp	r3, #68	; 0x44
 800b3fe:	d10e      	bne.n	800b41e <f_printf+0x2e6>
 800b400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b404:	2b00      	cmp	r3, #0
 800b406:	da0a      	bge.n	800b41e <f_printf+0x2e6>
			v = 0 - v;
 800b408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b40c:	425b      	negs	r3, r3
 800b40e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b412:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b416:	f043 0308 	orr.w	r3, r3, #8
 800b41a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b41e:	2300      	movs	r3, #0
 800b420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b424:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b42c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b430:	fb02 f201 	mul.w	r2, r2, r1
 800b434:	1a9b      	subs	r3, r3, r2
 800b436:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b43a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b43e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b442:	fbb2 f3f3 	udiv	r3, r2, r3
 800b446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b44a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b44e:	2b09      	cmp	r3, #9
 800b450:	d90b      	bls.n	800b46a <f_printf+0x332>
 800b452:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b456:	2b78      	cmp	r3, #120	; 0x78
 800b458:	d101      	bne.n	800b45e <f_printf+0x326>
 800b45a:	2227      	movs	r2, #39	; 0x27
 800b45c:	e000      	b.n	800b460 <f_printf+0x328>
 800b45e:	2207      	movs	r2, #7
 800b460:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b464:	4413      	add	r3, r2
 800b466:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b46a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b46e:	1c5a      	adds	r2, r3, #1
 800b470:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b474:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b478:	3230      	adds	r2, #48	; 0x30
 800b47a:	b2d2      	uxtb	r2, r2
 800b47c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800b480:	440b      	add	r3, r1
 800b482:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <f_printf+0x35e>
 800b48e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b492:	2b1f      	cmp	r3, #31
 800b494:	d9c6      	bls.n	800b424 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b496:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b49a:	f003 0308 	and.w	r3, r3, #8
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00a      	beq.n	800b4b8 <f_printf+0x380>
 800b4a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4a6:	1c5a      	adds	r2, r3, #1
 800b4a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b4ac:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b4b0:	4413      	add	r3, r2
 800b4b2:	222d      	movs	r2, #45	; 0x2d
 800b4b4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b4b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <f_printf+0x398>
 800b4cc:	2330      	movs	r3, #48	; 0x30
 800b4ce:	e000      	b.n	800b4d2 <f_printf+0x39a>
 800b4d0:	2320      	movs	r3, #32
 800b4d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b4d6:	e007      	b.n	800b4e8 <f_printf+0x3b0>
 800b4d8:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b4dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff fdb0 	bl	800b048 <putc_bfd>
 800b4e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b4ec:	f003 0302 	and.w	r3, r3, #2
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d108      	bne.n	800b506 <f_printf+0x3ce>
 800b4f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4f8:	1c5a      	adds	r2, r3, #1
 800b4fa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b4fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b502:	429a      	cmp	r2, r3
 800b504:	d8e8      	bhi.n	800b4d8 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800b506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b50a:	3b01      	subs	r3, #1
 800b50c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b510:	f107 020c 	add.w	r2, r7, #12
 800b514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b518:	4413      	add	r3, r2
 800b51a:	781a      	ldrb	r2, [r3, #0]
 800b51c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b520:	4611      	mov	r1, r2
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff fd90 	bl	800b048 <putc_bfd>
		} while (i);
 800b528:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1ea      	bne.n	800b506 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800b530:	e007      	b.n	800b542 <f_printf+0x40a>
 800b532:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b53a:	4611      	mov	r1, r2
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff fd83 	bl	800b048 <putc_bfd>
 800b542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b54c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b550:	429a      	cmp	r2, r3
 800b552:	d8ee      	bhi.n	800b532 <f_printf+0x3fa>
		c = *fmt++;
 800b554:	e5fe      	b.n	800b154 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b556:	bf00      	nop
 800b558:	e000      	b.n	800b55c <f_printf+0x424>
		if (!c) break;
 800b55a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b55c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff fdae 	bl	800b0c2 <putc_flush>
 800b566:	4603      	mov	r3, r0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	379c      	adds	r7, #156	; 0x9c
 800b56c:	46bd      	mov	sp, r7
 800b56e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b572:	b003      	add	sp, #12
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop

0800b578 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b578:	b480      	push	{r7}
 800b57a:	b087      	sub	sp, #28
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	4613      	mov	r3, r2
 800b584:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b586:	2301      	movs	r3, #1
 800b588:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b58e:	4b1f      	ldr	r3, [pc, #124]	; (800b60c <FATFS_LinkDriverEx+0x94>)
 800b590:	7a5b      	ldrb	r3, [r3, #9]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b00      	cmp	r3, #0
 800b596:	d131      	bne.n	800b5fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b598:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <FATFS_LinkDriverEx+0x94>)
 800b59a:	7a5b      	ldrb	r3, [r3, #9]
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	461a      	mov	r2, r3
 800b5a0:	4b1a      	ldr	r3, [pc, #104]	; (800b60c <FATFS_LinkDriverEx+0x94>)
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b5a6:	4b19      	ldr	r3, [pc, #100]	; (800b60c <FATFS_LinkDriverEx+0x94>)
 800b5a8:	7a5b      	ldrb	r3, [r3, #9]
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	4a17      	ldr	r2, [pc, #92]	; (800b60c <FATFS_LinkDriverEx+0x94>)
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b5b6:	4b15      	ldr	r3, [pc, #84]	; (800b60c <FATFS_LinkDriverEx+0x94>)
 800b5b8:	7a5b      	ldrb	r3, [r3, #9]
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4b13      	ldr	r3, [pc, #76]	; (800b60c <FATFS_LinkDriverEx+0x94>)
 800b5c0:	4413      	add	r3, r2
 800b5c2:	79fa      	ldrb	r2, [r7, #7]
 800b5c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b5c6:	4b11      	ldr	r3, [pc, #68]	; (800b60c <FATFS_LinkDriverEx+0x94>)
 800b5c8:	7a5b      	ldrb	r3, [r3, #9]
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	1c5a      	adds	r2, r3, #1
 800b5ce:	b2d1      	uxtb	r1, r2
 800b5d0:	4a0e      	ldr	r2, [pc, #56]	; (800b60c <FATFS_LinkDriverEx+0x94>)
 800b5d2:	7251      	strb	r1, [r2, #9]
 800b5d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b5d6:	7dbb      	ldrb	r3, [r7, #22]
 800b5d8:	3330      	adds	r3, #48	; 0x30
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	223a      	movs	r2, #58	; 0x3a
 800b5e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	3302      	adds	r3, #2
 800b5ec:	222f      	movs	r2, #47	; 0x2f
 800b5ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	3303      	adds	r3, #3
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	371c      	adds	r7, #28
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	200006c0 	.word	0x200006c0

0800b610 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b61a:	2200      	movs	r2, #0
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7ff ffaa 	bl	800b578 <FATFS_LinkDriverEx>
 800b624:	4603      	mov	r3, r0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
	...

0800b630 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b63c:	88fb      	ldrh	r3, [r7, #6]
 800b63e:	2b7f      	cmp	r3, #127	; 0x7f
 800b640:	d802      	bhi.n	800b648 <ff_convert+0x18>
		c = chr;
 800b642:	88fb      	ldrh	r3, [r7, #6]
 800b644:	81fb      	strh	r3, [r7, #14]
 800b646:	e025      	b.n	800b694 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00b      	beq.n	800b666 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b64e:	88fb      	ldrh	r3, [r7, #6]
 800b650:	2bff      	cmp	r3, #255	; 0xff
 800b652:	d805      	bhi.n	800b660 <ff_convert+0x30>
 800b654:	88fb      	ldrh	r3, [r7, #6]
 800b656:	3b80      	subs	r3, #128	; 0x80
 800b658:	4a12      	ldr	r2, [pc, #72]	; (800b6a4 <ff_convert+0x74>)
 800b65a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b65e:	e000      	b.n	800b662 <ff_convert+0x32>
 800b660:	2300      	movs	r3, #0
 800b662:	81fb      	strh	r3, [r7, #14]
 800b664:	e016      	b.n	800b694 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b666:	2300      	movs	r3, #0
 800b668:	81fb      	strh	r3, [r7, #14]
 800b66a:	e009      	b.n	800b680 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b66c:	89fb      	ldrh	r3, [r7, #14]
 800b66e:	4a0d      	ldr	r2, [pc, #52]	; (800b6a4 <ff_convert+0x74>)
 800b670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b674:	88fa      	ldrh	r2, [r7, #6]
 800b676:	429a      	cmp	r2, r3
 800b678:	d006      	beq.n	800b688 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b67a:	89fb      	ldrh	r3, [r7, #14]
 800b67c:	3301      	adds	r3, #1
 800b67e:	81fb      	strh	r3, [r7, #14]
 800b680:	89fb      	ldrh	r3, [r7, #14]
 800b682:	2b7f      	cmp	r3, #127	; 0x7f
 800b684:	d9f2      	bls.n	800b66c <ff_convert+0x3c>
 800b686:	e000      	b.n	800b68a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b688:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b68a:	89fb      	ldrh	r3, [r7, #14]
 800b68c:	3380      	adds	r3, #128	; 0x80
 800b68e:	b29b      	uxth	r3, r3
 800b690:	b2db      	uxtb	r3, r3
 800b692:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b694:	89fb      	ldrh	r3, [r7, #14]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	0800e4d0 	.word	0x0800e4d0

0800b6a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b087      	sub	sp, #28
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b6b2:	88fb      	ldrh	r3, [r7, #6]
 800b6b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6b8:	d201      	bcs.n	800b6be <ff_wtoupper+0x16>
 800b6ba:	4b3e      	ldr	r3, [pc, #248]	; (800b7b4 <ff_wtoupper+0x10c>)
 800b6bc:	e000      	b.n	800b6c0 <ff_wtoupper+0x18>
 800b6be:	4b3e      	ldr	r3, [pc, #248]	; (800b7b8 <ff_wtoupper+0x110>)
 800b6c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	1c9a      	adds	r2, r3, #2
 800b6c6:	617a      	str	r2, [r7, #20]
 800b6c8:	881b      	ldrh	r3, [r3, #0]
 800b6ca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b6cc:	8a7b      	ldrh	r3, [r7, #18]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d068      	beq.n	800b7a4 <ff_wtoupper+0xfc>
 800b6d2:	88fa      	ldrh	r2, [r7, #6]
 800b6d4:	8a7b      	ldrh	r3, [r7, #18]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d364      	bcc.n	800b7a4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	1c9a      	adds	r2, r3, #2
 800b6de:	617a      	str	r2, [r7, #20]
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	823b      	strh	r3, [r7, #16]
 800b6e4:	8a3b      	ldrh	r3, [r7, #16]
 800b6e6:	0a1b      	lsrs	r3, r3, #8
 800b6e8:	81fb      	strh	r3, [r7, #14]
 800b6ea:	8a3b      	ldrh	r3, [r7, #16]
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b6f0:	88fa      	ldrh	r2, [r7, #6]
 800b6f2:	8a79      	ldrh	r1, [r7, #18]
 800b6f4:	8a3b      	ldrh	r3, [r7, #16]
 800b6f6:	440b      	add	r3, r1
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	da49      	bge.n	800b790 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b6fc:	89fb      	ldrh	r3, [r7, #14]
 800b6fe:	2b08      	cmp	r3, #8
 800b700:	d84f      	bhi.n	800b7a2 <ff_wtoupper+0xfa>
 800b702:	a201      	add	r2, pc, #4	; (adr r2, 800b708 <ff_wtoupper+0x60>)
 800b704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b708:	0800b72d 	.word	0x0800b72d
 800b70c:	0800b73f 	.word	0x0800b73f
 800b710:	0800b755 	.word	0x0800b755
 800b714:	0800b75d 	.word	0x0800b75d
 800b718:	0800b765 	.word	0x0800b765
 800b71c:	0800b76d 	.word	0x0800b76d
 800b720:	0800b775 	.word	0x0800b775
 800b724:	0800b77d 	.word	0x0800b77d
 800b728:	0800b785 	.word	0x0800b785
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b72c:	88fa      	ldrh	r2, [r7, #6]
 800b72e:	8a7b      	ldrh	r3, [r7, #18]
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	005b      	lsls	r3, r3, #1
 800b734:	697a      	ldr	r2, [r7, #20]
 800b736:	4413      	add	r3, r2
 800b738:	881b      	ldrh	r3, [r3, #0]
 800b73a:	80fb      	strh	r3, [r7, #6]
 800b73c:	e027      	b.n	800b78e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b73e:	88fa      	ldrh	r2, [r7, #6]
 800b740:	8a7b      	ldrh	r3, [r7, #18]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	b29b      	uxth	r3, r3
 800b746:	f003 0301 	and.w	r3, r3, #1
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	88fa      	ldrh	r2, [r7, #6]
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	80fb      	strh	r3, [r7, #6]
 800b752:	e01c      	b.n	800b78e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	3b10      	subs	r3, #16
 800b758:	80fb      	strh	r3, [r7, #6]
 800b75a:	e018      	b.n	800b78e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b75c:	88fb      	ldrh	r3, [r7, #6]
 800b75e:	3b20      	subs	r3, #32
 800b760:	80fb      	strh	r3, [r7, #6]
 800b762:	e014      	b.n	800b78e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b764:	88fb      	ldrh	r3, [r7, #6]
 800b766:	3b30      	subs	r3, #48	; 0x30
 800b768:	80fb      	strh	r3, [r7, #6]
 800b76a:	e010      	b.n	800b78e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b76c:	88fb      	ldrh	r3, [r7, #6]
 800b76e:	3b1a      	subs	r3, #26
 800b770:	80fb      	strh	r3, [r7, #6]
 800b772:	e00c      	b.n	800b78e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b774:	88fb      	ldrh	r3, [r7, #6]
 800b776:	3308      	adds	r3, #8
 800b778:	80fb      	strh	r3, [r7, #6]
 800b77a:	e008      	b.n	800b78e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b77c:	88fb      	ldrh	r3, [r7, #6]
 800b77e:	3b50      	subs	r3, #80	; 0x50
 800b780:	80fb      	strh	r3, [r7, #6]
 800b782:	e004      	b.n	800b78e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b784:	88fb      	ldrh	r3, [r7, #6]
 800b786:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b78a:	80fb      	strh	r3, [r7, #6]
 800b78c:	bf00      	nop
			}
			break;
 800b78e:	e008      	b.n	800b7a2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b790:	89fb      	ldrh	r3, [r7, #14]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d195      	bne.n	800b6c2 <ff_wtoupper+0x1a>
 800b796:	8a3b      	ldrh	r3, [r7, #16]
 800b798:	005b      	lsls	r3, r3, #1
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	4413      	add	r3, r2
 800b79e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b7a0:	e78f      	b.n	800b6c2 <ff_wtoupper+0x1a>
			break;
 800b7a2:	bf00      	nop
	}

	return chr;
 800b7a4:	88fb      	ldrh	r3, [r7, #6]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	371c      	adds	r7, #28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	0800e5d0 	.word	0x0800e5d0
 800b7b8:	0800e7c4 	.word	0x0800e7c4

0800b7bc <__errno>:
 800b7bc:	4b01      	ldr	r3, [pc, #4]	; (800b7c4 <__errno+0x8>)
 800b7be:	6818      	ldr	r0, [r3, #0]
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	20000084 	.word	0x20000084

0800b7c8 <__libc_init_array>:
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	4e0d      	ldr	r6, [pc, #52]	; (800b800 <__libc_init_array+0x38>)
 800b7cc:	4c0d      	ldr	r4, [pc, #52]	; (800b804 <__libc_init_array+0x3c>)
 800b7ce:	1ba4      	subs	r4, r4, r6
 800b7d0:	10a4      	asrs	r4, r4, #2
 800b7d2:	2500      	movs	r5, #0
 800b7d4:	42a5      	cmp	r5, r4
 800b7d6:	d109      	bne.n	800b7ec <__libc_init_array+0x24>
 800b7d8:	4e0b      	ldr	r6, [pc, #44]	; (800b808 <__libc_init_array+0x40>)
 800b7da:	4c0c      	ldr	r4, [pc, #48]	; (800b80c <__libc_init_array+0x44>)
 800b7dc:	f002 fd76 	bl	800e2cc <_init>
 800b7e0:	1ba4      	subs	r4, r4, r6
 800b7e2:	10a4      	asrs	r4, r4, #2
 800b7e4:	2500      	movs	r5, #0
 800b7e6:	42a5      	cmp	r5, r4
 800b7e8:	d105      	bne.n	800b7f6 <__libc_init_array+0x2e>
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}
 800b7ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7f0:	4798      	blx	r3
 800b7f2:	3501      	adds	r5, #1
 800b7f4:	e7ee      	b.n	800b7d4 <__libc_init_array+0xc>
 800b7f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7fa:	4798      	blx	r3
 800b7fc:	3501      	adds	r5, #1
 800b7fe:	e7f2      	b.n	800b7e6 <__libc_init_array+0x1e>
 800b800:	0800eb48 	.word	0x0800eb48
 800b804:	0800eb48 	.word	0x0800eb48
 800b808:	0800eb48 	.word	0x0800eb48
 800b80c:	0800eb4c 	.word	0x0800eb4c

0800b810 <memcpy>:
 800b810:	b510      	push	{r4, lr}
 800b812:	1e43      	subs	r3, r0, #1
 800b814:	440a      	add	r2, r1
 800b816:	4291      	cmp	r1, r2
 800b818:	d100      	bne.n	800b81c <memcpy+0xc>
 800b81a:	bd10      	pop	{r4, pc}
 800b81c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b820:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b824:	e7f7      	b.n	800b816 <memcpy+0x6>

0800b826 <memset>:
 800b826:	4402      	add	r2, r0
 800b828:	4603      	mov	r3, r0
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d100      	bne.n	800b830 <memset+0xa>
 800b82e:	4770      	bx	lr
 800b830:	f803 1b01 	strb.w	r1, [r3], #1
 800b834:	e7f9      	b.n	800b82a <memset+0x4>

0800b836 <__cvt>:
 800b836:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b83a:	ec55 4b10 	vmov	r4, r5, d0
 800b83e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b840:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b844:	2d00      	cmp	r5, #0
 800b846:	460e      	mov	r6, r1
 800b848:	4691      	mov	r9, r2
 800b84a:	4619      	mov	r1, r3
 800b84c:	bfb8      	it	lt
 800b84e:	4622      	movlt	r2, r4
 800b850:	462b      	mov	r3, r5
 800b852:	f027 0720 	bic.w	r7, r7, #32
 800b856:	bfbb      	ittet	lt
 800b858:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b85c:	461d      	movlt	r5, r3
 800b85e:	2300      	movge	r3, #0
 800b860:	232d      	movlt	r3, #45	; 0x2d
 800b862:	bfb8      	it	lt
 800b864:	4614      	movlt	r4, r2
 800b866:	2f46      	cmp	r7, #70	; 0x46
 800b868:	700b      	strb	r3, [r1, #0]
 800b86a:	d004      	beq.n	800b876 <__cvt+0x40>
 800b86c:	2f45      	cmp	r7, #69	; 0x45
 800b86e:	d100      	bne.n	800b872 <__cvt+0x3c>
 800b870:	3601      	adds	r6, #1
 800b872:	2102      	movs	r1, #2
 800b874:	e000      	b.n	800b878 <__cvt+0x42>
 800b876:	2103      	movs	r1, #3
 800b878:	ab03      	add	r3, sp, #12
 800b87a:	9301      	str	r3, [sp, #4]
 800b87c:	ab02      	add	r3, sp, #8
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	4632      	mov	r2, r6
 800b882:	4653      	mov	r3, sl
 800b884:	ec45 4b10 	vmov	d0, r4, r5
 800b888:	f000 fe2a 	bl	800c4e0 <_dtoa_r>
 800b88c:	2f47      	cmp	r7, #71	; 0x47
 800b88e:	4680      	mov	r8, r0
 800b890:	d102      	bne.n	800b898 <__cvt+0x62>
 800b892:	f019 0f01 	tst.w	r9, #1
 800b896:	d026      	beq.n	800b8e6 <__cvt+0xb0>
 800b898:	2f46      	cmp	r7, #70	; 0x46
 800b89a:	eb08 0906 	add.w	r9, r8, r6
 800b89e:	d111      	bne.n	800b8c4 <__cvt+0x8e>
 800b8a0:	f898 3000 	ldrb.w	r3, [r8]
 800b8a4:	2b30      	cmp	r3, #48	; 0x30
 800b8a6:	d10a      	bne.n	800b8be <__cvt+0x88>
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	f7f5 f90a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8b4:	b918      	cbnz	r0, 800b8be <__cvt+0x88>
 800b8b6:	f1c6 0601 	rsb	r6, r6, #1
 800b8ba:	f8ca 6000 	str.w	r6, [sl]
 800b8be:	f8da 3000 	ldr.w	r3, [sl]
 800b8c2:	4499      	add	r9, r3
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	f7f5 f8fc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8d0:	b938      	cbnz	r0, 800b8e2 <__cvt+0xac>
 800b8d2:	2230      	movs	r2, #48	; 0x30
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	454b      	cmp	r3, r9
 800b8d8:	d205      	bcs.n	800b8e6 <__cvt+0xb0>
 800b8da:	1c59      	adds	r1, r3, #1
 800b8dc:	9103      	str	r1, [sp, #12]
 800b8de:	701a      	strb	r2, [r3, #0]
 800b8e0:	e7f8      	b.n	800b8d4 <__cvt+0x9e>
 800b8e2:	f8cd 900c 	str.w	r9, [sp, #12]
 800b8e6:	9b03      	ldr	r3, [sp, #12]
 800b8e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8ea:	eba3 0308 	sub.w	r3, r3, r8
 800b8ee:	4640      	mov	r0, r8
 800b8f0:	6013      	str	r3, [r2, #0]
 800b8f2:	b004      	add	sp, #16
 800b8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b8f8 <__exponent>:
 800b8f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8fa:	2900      	cmp	r1, #0
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	bfba      	itte	lt
 800b900:	4249      	neglt	r1, r1
 800b902:	232d      	movlt	r3, #45	; 0x2d
 800b904:	232b      	movge	r3, #43	; 0x2b
 800b906:	2909      	cmp	r1, #9
 800b908:	f804 2b02 	strb.w	r2, [r4], #2
 800b90c:	7043      	strb	r3, [r0, #1]
 800b90e:	dd20      	ble.n	800b952 <__exponent+0x5a>
 800b910:	f10d 0307 	add.w	r3, sp, #7
 800b914:	461f      	mov	r7, r3
 800b916:	260a      	movs	r6, #10
 800b918:	fb91 f5f6 	sdiv	r5, r1, r6
 800b91c:	fb06 1115 	mls	r1, r6, r5, r1
 800b920:	3130      	adds	r1, #48	; 0x30
 800b922:	2d09      	cmp	r5, #9
 800b924:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b928:	f103 32ff 	add.w	r2, r3, #4294967295
 800b92c:	4629      	mov	r1, r5
 800b92e:	dc09      	bgt.n	800b944 <__exponent+0x4c>
 800b930:	3130      	adds	r1, #48	; 0x30
 800b932:	3b02      	subs	r3, #2
 800b934:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b938:	42bb      	cmp	r3, r7
 800b93a:	4622      	mov	r2, r4
 800b93c:	d304      	bcc.n	800b948 <__exponent+0x50>
 800b93e:	1a10      	subs	r0, r2, r0
 800b940:	b003      	add	sp, #12
 800b942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b944:	4613      	mov	r3, r2
 800b946:	e7e7      	b.n	800b918 <__exponent+0x20>
 800b948:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b94c:	f804 2b01 	strb.w	r2, [r4], #1
 800b950:	e7f2      	b.n	800b938 <__exponent+0x40>
 800b952:	2330      	movs	r3, #48	; 0x30
 800b954:	4419      	add	r1, r3
 800b956:	7083      	strb	r3, [r0, #2]
 800b958:	1d02      	adds	r2, r0, #4
 800b95a:	70c1      	strb	r1, [r0, #3]
 800b95c:	e7ef      	b.n	800b93e <__exponent+0x46>
	...

0800b960 <_printf_float>:
 800b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	b08d      	sub	sp, #52	; 0x34
 800b966:	460c      	mov	r4, r1
 800b968:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b96c:	4616      	mov	r6, r2
 800b96e:	461f      	mov	r7, r3
 800b970:	4605      	mov	r5, r0
 800b972:	f001 fce7 	bl	800d344 <_localeconv_r>
 800b976:	6803      	ldr	r3, [r0, #0]
 800b978:	9304      	str	r3, [sp, #16]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7f4 fc28 	bl	80001d0 <strlen>
 800b980:	2300      	movs	r3, #0
 800b982:	930a      	str	r3, [sp, #40]	; 0x28
 800b984:	f8d8 3000 	ldr.w	r3, [r8]
 800b988:	9005      	str	r0, [sp, #20]
 800b98a:	3307      	adds	r3, #7
 800b98c:	f023 0307 	bic.w	r3, r3, #7
 800b990:	f103 0208 	add.w	r2, r3, #8
 800b994:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b998:	f8d4 b000 	ldr.w	fp, [r4]
 800b99c:	f8c8 2000 	str.w	r2, [r8]
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b9a8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b9ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b9b0:	9307      	str	r3, [sp, #28]
 800b9b2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ba:	4ba7      	ldr	r3, [pc, #668]	; (800bc58 <_printf_float+0x2f8>)
 800b9bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9c0:	f7f5 f8b4 	bl	8000b2c <__aeabi_dcmpun>
 800b9c4:	bb70      	cbnz	r0, 800ba24 <_printf_float+0xc4>
 800b9c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ca:	4ba3      	ldr	r3, [pc, #652]	; (800bc58 <_printf_float+0x2f8>)
 800b9cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9d0:	f7f5 f88e 	bl	8000af0 <__aeabi_dcmple>
 800b9d4:	bb30      	cbnz	r0, 800ba24 <_printf_float+0xc4>
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	2300      	movs	r3, #0
 800b9da:	4640      	mov	r0, r8
 800b9dc:	4649      	mov	r1, r9
 800b9de:	f7f5 f87d 	bl	8000adc <__aeabi_dcmplt>
 800b9e2:	b110      	cbz	r0, 800b9ea <_printf_float+0x8a>
 800b9e4:	232d      	movs	r3, #45	; 0x2d
 800b9e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9ea:	4a9c      	ldr	r2, [pc, #624]	; (800bc5c <_printf_float+0x2fc>)
 800b9ec:	4b9c      	ldr	r3, [pc, #624]	; (800bc60 <_printf_float+0x300>)
 800b9ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b9f2:	bf8c      	ite	hi
 800b9f4:	4690      	movhi	r8, r2
 800b9f6:	4698      	movls	r8, r3
 800b9f8:	2303      	movs	r3, #3
 800b9fa:	f02b 0204 	bic.w	r2, fp, #4
 800b9fe:	6123      	str	r3, [r4, #16]
 800ba00:	6022      	str	r2, [r4, #0]
 800ba02:	f04f 0900 	mov.w	r9, #0
 800ba06:	9700      	str	r7, [sp, #0]
 800ba08:	4633      	mov	r3, r6
 800ba0a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f000 f9e6 	bl	800bde0 <_printf_common>
 800ba14:	3001      	adds	r0, #1
 800ba16:	f040 808d 	bne.w	800bb34 <_printf_float+0x1d4>
 800ba1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba1e:	b00d      	add	sp, #52	; 0x34
 800ba20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba24:	4642      	mov	r2, r8
 800ba26:	464b      	mov	r3, r9
 800ba28:	4640      	mov	r0, r8
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	f7f5 f87e 	bl	8000b2c <__aeabi_dcmpun>
 800ba30:	b110      	cbz	r0, 800ba38 <_printf_float+0xd8>
 800ba32:	4a8c      	ldr	r2, [pc, #560]	; (800bc64 <_printf_float+0x304>)
 800ba34:	4b8c      	ldr	r3, [pc, #560]	; (800bc68 <_printf_float+0x308>)
 800ba36:	e7da      	b.n	800b9ee <_printf_float+0x8e>
 800ba38:	6861      	ldr	r1, [r4, #4]
 800ba3a:	1c4b      	adds	r3, r1, #1
 800ba3c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ba40:	a80a      	add	r0, sp, #40	; 0x28
 800ba42:	d13e      	bne.n	800bac2 <_printf_float+0x162>
 800ba44:	2306      	movs	r3, #6
 800ba46:	6063      	str	r3, [r4, #4]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ba4e:	ab09      	add	r3, sp, #36	; 0x24
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	ec49 8b10 	vmov	d0, r8, r9
 800ba56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba5a:	6022      	str	r2, [r4, #0]
 800ba5c:	f8cd a004 	str.w	sl, [sp, #4]
 800ba60:	6861      	ldr	r1, [r4, #4]
 800ba62:	4628      	mov	r0, r5
 800ba64:	f7ff fee7 	bl	800b836 <__cvt>
 800ba68:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ba6c:	2b47      	cmp	r3, #71	; 0x47
 800ba6e:	4680      	mov	r8, r0
 800ba70:	d109      	bne.n	800ba86 <_printf_float+0x126>
 800ba72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba74:	1cd8      	adds	r0, r3, #3
 800ba76:	db02      	blt.n	800ba7e <_printf_float+0x11e>
 800ba78:	6862      	ldr	r2, [r4, #4]
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	dd47      	ble.n	800bb0e <_printf_float+0x1ae>
 800ba7e:	f1aa 0a02 	sub.w	sl, sl, #2
 800ba82:	fa5f fa8a 	uxtb.w	sl, sl
 800ba86:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ba8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba8c:	d824      	bhi.n	800bad8 <_printf_float+0x178>
 800ba8e:	3901      	subs	r1, #1
 800ba90:	4652      	mov	r2, sl
 800ba92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba96:	9109      	str	r1, [sp, #36]	; 0x24
 800ba98:	f7ff ff2e 	bl	800b8f8 <__exponent>
 800ba9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba9e:	1813      	adds	r3, r2, r0
 800baa0:	2a01      	cmp	r2, #1
 800baa2:	4681      	mov	r9, r0
 800baa4:	6123      	str	r3, [r4, #16]
 800baa6:	dc02      	bgt.n	800baae <_printf_float+0x14e>
 800baa8:	6822      	ldr	r2, [r4, #0]
 800baaa:	07d1      	lsls	r1, r2, #31
 800baac:	d501      	bpl.n	800bab2 <_printf_float+0x152>
 800baae:	3301      	adds	r3, #1
 800bab0:	6123      	str	r3, [r4, #16]
 800bab2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d0a5      	beq.n	800ba06 <_printf_float+0xa6>
 800baba:	232d      	movs	r3, #45	; 0x2d
 800babc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bac0:	e7a1      	b.n	800ba06 <_printf_float+0xa6>
 800bac2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bac6:	f000 8177 	beq.w	800bdb8 <_printf_float+0x458>
 800baca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bace:	d1bb      	bne.n	800ba48 <_printf_float+0xe8>
 800bad0:	2900      	cmp	r1, #0
 800bad2:	d1b9      	bne.n	800ba48 <_printf_float+0xe8>
 800bad4:	2301      	movs	r3, #1
 800bad6:	e7b6      	b.n	800ba46 <_printf_float+0xe6>
 800bad8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800badc:	d119      	bne.n	800bb12 <_printf_float+0x1b2>
 800bade:	2900      	cmp	r1, #0
 800bae0:	6863      	ldr	r3, [r4, #4]
 800bae2:	dd0c      	ble.n	800bafe <_printf_float+0x19e>
 800bae4:	6121      	str	r1, [r4, #16]
 800bae6:	b913      	cbnz	r3, 800baee <_printf_float+0x18e>
 800bae8:	6822      	ldr	r2, [r4, #0]
 800baea:	07d2      	lsls	r2, r2, #31
 800baec:	d502      	bpl.n	800baf4 <_printf_float+0x194>
 800baee:	3301      	adds	r3, #1
 800baf0:	440b      	add	r3, r1
 800baf2:	6123      	str	r3, [r4, #16]
 800baf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf6:	65a3      	str	r3, [r4, #88]	; 0x58
 800baf8:	f04f 0900 	mov.w	r9, #0
 800bafc:	e7d9      	b.n	800bab2 <_printf_float+0x152>
 800bafe:	b913      	cbnz	r3, 800bb06 <_printf_float+0x1a6>
 800bb00:	6822      	ldr	r2, [r4, #0]
 800bb02:	07d0      	lsls	r0, r2, #31
 800bb04:	d501      	bpl.n	800bb0a <_printf_float+0x1aa>
 800bb06:	3302      	adds	r3, #2
 800bb08:	e7f3      	b.n	800baf2 <_printf_float+0x192>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e7f1      	b.n	800baf2 <_printf_float+0x192>
 800bb0e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bb12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bb16:	4293      	cmp	r3, r2
 800bb18:	db05      	blt.n	800bb26 <_printf_float+0x1c6>
 800bb1a:	6822      	ldr	r2, [r4, #0]
 800bb1c:	6123      	str	r3, [r4, #16]
 800bb1e:	07d1      	lsls	r1, r2, #31
 800bb20:	d5e8      	bpl.n	800baf4 <_printf_float+0x194>
 800bb22:	3301      	adds	r3, #1
 800bb24:	e7e5      	b.n	800baf2 <_printf_float+0x192>
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bfd4      	ite	le
 800bb2a:	f1c3 0302 	rsble	r3, r3, #2
 800bb2e:	2301      	movgt	r3, #1
 800bb30:	4413      	add	r3, r2
 800bb32:	e7de      	b.n	800baf2 <_printf_float+0x192>
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	055a      	lsls	r2, r3, #21
 800bb38:	d407      	bmi.n	800bb4a <_printf_float+0x1ea>
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	4642      	mov	r2, r8
 800bb3e:	4631      	mov	r1, r6
 800bb40:	4628      	mov	r0, r5
 800bb42:	47b8      	blx	r7
 800bb44:	3001      	adds	r0, #1
 800bb46:	d12b      	bne.n	800bba0 <_printf_float+0x240>
 800bb48:	e767      	b.n	800ba1a <_printf_float+0xba>
 800bb4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bb4e:	f240 80dc 	bls.w	800bd0a <_printf_float+0x3aa>
 800bb52:	2200      	movs	r2, #0
 800bb54:	2300      	movs	r3, #0
 800bb56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb5a:	f7f4 ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d033      	beq.n	800bbca <_printf_float+0x26a>
 800bb62:	2301      	movs	r3, #1
 800bb64:	4a41      	ldr	r2, [pc, #260]	; (800bc6c <_printf_float+0x30c>)
 800bb66:	4631      	mov	r1, r6
 800bb68:	4628      	mov	r0, r5
 800bb6a:	47b8      	blx	r7
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	f43f af54 	beq.w	800ba1a <_printf_float+0xba>
 800bb72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb76:	429a      	cmp	r2, r3
 800bb78:	db02      	blt.n	800bb80 <_printf_float+0x220>
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	07d8      	lsls	r0, r3, #31
 800bb7e:	d50f      	bpl.n	800bba0 <_printf_float+0x240>
 800bb80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb84:	4631      	mov	r1, r6
 800bb86:	4628      	mov	r0, r5
 800bb88:	47b8      	blx	r7
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	f43f af45 	beq.w	800ba1a <_printf_float+0xba>
 800bb90:	f04f 0800 	mov.w	r8, #0
 800bb94:	f104 091a 	add.w	r9, r4, #26
 800bb98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	4543      	cmp	r3, r8
 800bb9e:	dc09      	bgt.n	800bbb4 <_printf_float+0x254>
 800bba0:	6823      	ldr	r3, [r4, #0]
 800bba2:	079b      	lsls	r3, r3, #30
 800bba4:	f100 8103 	bmi.w	800bdae <_printf_float+0x44e>
 800bba8:	68e0      	ldr	r0, [r4, #12]
 800bbaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbac:	4298      	cmp	r0, r3
 800bbae:	bfb8      	it	lt
 800bbb0:	4618      	movlt	r0, r3
 800bbb2:	e734      	b.n	800ba1e <_printf_float+0xbe>
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	464a      	mov	r2, r9
 800bbb8:	4631      	mov	r1, r6
 800bbba:	4628      	mov	r0, r5
 800bbbc:	47b8      	blx	r7
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	f43f af2b 	beq.w	800ba1a <_printf_float+0xba>
 800bbc4:	f108 0801 	add.w	r8, r8, #1
 800bbc8:	e7e6      	b.n	800bb98 <_printf_float+0x238>
 800bbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	dc2b      	bgt.n	800bc28 <_printf_float+0x2c8>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	4a26      	ldr	r2, [pc, #152]	; (800bc6c <_printf_float+0x30c>)
 800bbd4:	4631      	mov	r1, r6
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	47b8      	blx	r7
 800bbda:	3001      	adds	r0, #1
 800bbdc:	f43f af1d 	beq.w	800ba1a <_printf_float+0xba>
 800bbe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe2:	b923      	cbnz	r3, 800bbee <_printf_float+0x28e>
 800bbe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe6:	b913      	cbnz	r3, 800bbee <_printf_float+0x28e>
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	07d9      	lsls	r1, r3, #31
 800bbec:	d5d8      	bpl.n	800bba0 <_printf_float+0x240>
 800bbee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	47b8      	blx	r7
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	f43f af0e 	beq.w	800ba1a <_printf_float+0xba>
 800bbfe:	f04f 0900 	mov.w	r9, #0
 800bc02:	f104 0a1a 	add.w	sl, r4, #26
 800bc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc08:	425b      	negs	r3, r3
 800bc0a:	454b      	cmp	r3, r9
 800bc0c:	dc01      	bgt.n	800bc12 <_printf_float+0x2b2>
 800bc0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc10:	e794      	b.n	800bb3c <_printf_float+0x1dc>
 800bc12:	2301      	movs	r3, #1
 800bc14:	4652      	mov	r2, sl
 800bc16:	4631      	mov	r1, r6
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b8      	blx	r7
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	f43f aefc 	beq.w	800ba1a <_printf_float+0xba>
 800bc22:	f109 0901 	add.w	r9, r9, #1
 800bc26:	e7ee      	b.n	800bc06 <_printf_float+0x2a6>
 800bc28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	bfa8      	it	ge
 800bc30:	461a      	movge	r2, r3
 800bc32:	2a00      	cmp	r2, #0
 800bc34:	4691      	mov	r9, r2
 800bc36:	dd07      	ble.n	800bc48 <_printf_float+0x2e8>
 800bc38:	4613      	mov	r3, r2
 800bc3a:	4631      	mov	r1, r6
 800bc3c:	4642      	mov	r2, r8
 800bc3e:	4628      	mov	r0, r5
 800bc40:	47b8      	blx	r7
 800bc42:	3001      	adds	r0, #1
 800bc44:	f43f aee9 	beq.w	800ba1a <_printf_float+0xba>
 800bc48:	f104 031a 	add.w	r3, r4, #26
 800bc4c:	f04f 0b00 	mov.w	fp, #0
 800bc50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc54:	9306      	str	r3, [sp, #24]
 800bc56:	e015      	b.n	800bc84 <_printf_float+0x324>
 800bc58:	7fefffff 	.word	0x7fefffff
 800bc5c:	0800e888 	.word	0x0800e888
 800bc60:	0800e884 	.word	0x0800e884
 800bc64:	0800e890 	.word	0x0800e890
 800bc68:	0800e88c 	.word	0x0800e88c
 800bc6c:	0800e894 	.word	0x0800e894
 800bc70:	2301      	movs	r3, #1
 800bc72:	9a06      	ldr	r2, [sp, #24]
 800bc74:	4631      	mov	r1, r6
 800bc76:	4628      	mov	r0, r5
 800bc78:	47b8      	blx	r7
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	f43f aecd 	beq.w	800ba1a <_printf_float+0xba>
 800bc80:	f10b 0b01 	add.w	fp, fp, #1
 800bc84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bc88:	ebaa 0309 	sub.w	r3, sl, r9
 800bc8c:	455b      	cmp	r3, fp
 800bc8e:	dcef      	bgt.n	800bc70 <_printf_float+0x310>
 800bc90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc94:	429a      	cmp	r2, r3
 800bc96:	44d0      	add	r8, sl
 800bc98:	db15      	blt.n	800bcc6 <_printf_float+0x366>
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	07da      	lsls	r2, r3, #31
 800bc9e:	d412      	bmi.n	800bcc6 <_printf_float+0x366>
 800bca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bca4:	eba3 020a 	sub.w	r2, r3, sl
 800bca8:	eba3 0a01 	sub.w	sl, r3, r1
 800bcac:	4592      	cmp	sl, r2
 800bcae:	bfa8      	it	ge
 800bcb0:	4692      	movge	sl, r2
 800bcb2:	f1ba 0f00 	cmp.w	sl, #0
 800bcb6:	dc0e      	bgt.n	800bcd6 <_printf_float+0x376>
 800bcb8:	f04f 0800 	mov.w	r8, #0
 800bcbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcc0:	f104 091a 	add.w	r9, r4, #26
 800bcc4:	e019      	b.n	800bcfa <_printf_float+0x39a>
 800bcc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcca:	4631      	mov	r1, r6
 800bccc:	4628      	mov	r0, r5
 800bcce:	47b8      	blx	r7
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d1e5      	bne.n	800bca0 <_printf_float+0x340>
 800bcd4:	e6a1      	b.n	800ba1a <_printf_float+0xba>
 800bcd6:	4653      	mov	r3, sl
 800bcd8:	4642      	mov	r2, r8
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b8      	blx	r7
 800bce0:	3001      	adds	r0, #1
 800bce2:	d1e9      	bne.n	800bcb8 <_printf_float+0x358>
 800bce4:	e699      	b.n	800ba1a <_printf_float+0xba>
 800bce6:	2301      	movs	r3, #1
 800bce8:	464a      	mov	r2, r9
 800bcea:	4631      	mov	r1, r6
 800bcec:	4628      	mov	r0, r5
 800bcee:	47b8      	blx	r7
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	f43f ae92 	beq.w	800ba1a <_printf_float+0xba>
 800bcf6:	f108 0801 	add.w	r8, r8, #1
 800bcfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcfe:	1a9b      	subs	r3, r3, r2
 800bd00:	eba3 030a 	sub.w	r3, r3, sl
 800bd04:	4543      	cmp	r3, r8
 800bd06:	dcee      	bgt.n	800bce6 <_printf_float+0x386>
 800bd08:	e74a      	b.n	800bba0 <_printf_float+0x240>
 800bd0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd0c:	2a01      	cmp	r2, #1
 800bd0e:	dc01      	bgt.n	800bd14 <_printf_float+0x3b4>
 800bd10:	07db      	lsls	r3, r3, #31
 800bd12:	d53a      	bpl.n	800bd8a <_printf_float+0x42a>
 800bd14:	2301      	movs	r3, #1
 800bd16:	4642      	mov	r2, r8
 800bd18:	4631      	mov	r1, r6
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	47b8      	blx	r7
 800bd1e:	3001      	adds	r0, #1
 800bd20:	f43f ae7b 	beq.w	800ba1a <_printf_float+0xba>
 800bd24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd28:	4631      	mov	r1, r6
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	47b8      	blx	r7
 800bd2e:	3001      	adds	r0, #1
 800bd30:	f108 0801 	add.w	r8, r8, #1
 800bd34:	f43f ae71 	beq.w	800ba1a <_printf_float+0xba>
 800bd38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f103 3aff 	add.w	sl, r3, #4294967295
 800bd40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd44:	2300      	movs	r3, #0
 800bd46:	f7f4 febf 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd4a:	b9c8      	cbnz	r0, 800bd80 <_printf_float+0x420>
 800bd4c:	4653      	mov	r3, sl
 800bd4e:	4642      	mov	r2, r8
 800bd50:	4631      	mov	r1, r6
 800bd52:	4628      	mov	r0, r5
 800bd54:	47b8      	blx	r7
 800bd56:	3001      	adds	r0, #1
 800bd58:	d10e      	bne.n	800bd78 <_printf_float+0x418>
 800bd5a:	e65e      	b.n	800ba1a <_printf_float+0xba>
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	4652      	mov	r2, sl
 800bd60:	4631      	mov	r1, r6
 800bd62:	4628      	mov	r0, r5
 800bd64:	47b8      	blx	r7
 800bd66:	3001      	adds	r0, #1
 800bd68:	f43f ae57 	beq.w	800ba1a <_printf_float+0xba>
 800bd6c:	f108 0801 	add.w	r8, r8, #1
 800bd70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd72:	3b01      	subs	r3, #1
 800bd74:	4543      	cmp	r3, r8
 800bd76:	dcf1      	bgt.n	800bd5c <_printf_float+0x3fc>
 800bd78:	464b      	mov	r3, r9
 800bd7a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd7e:	e6de      	b.n	800bb3e <_printf_float+0x1de>
 800bd80:	f04f 0800 	mov.w	r8, #0
 800bd84:	f104 0a1a 	add.w	sl, r4, #26
 800bd88:	e7f2      	b.n	800bd70 <_printf_float+0x410>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e7df      	b.n	800bd4e <_printf_float+0x3ee>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	464a      	mov	r2, r9
 800bd92:	4631      	mov	r1, r6
 800bd94:	4628      	mov	r0, r5
 800bd96:	47b8      	blx	r7
 800bd98:	3001      	adds	r0, #1
 800bd9a:	f43f ae3e 	beq.w	800ba1a <_printf_float+0xba>
 800bd9e:	f108 0801 	add.w	r8, r8, #1
 800bda2:	68e3      	ldr	r3, [r4, #12]
 800bda4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bda6:	1a9b      	subs	r3, r3, r2
 800bda8:	4543      	cmp	r3, r8
 800bdaa:	dcf0      	bgt.n	800bd8e <_printf_float+0x42e>
 800bdac:	e6fc      	b.n	800bba8 <_printf_float+0x248>
 800bdae:	f04f 0800 	mov.w	r8, #0
 800bdb2:	f104 0919 	add.w	r9, r4, #25
 800bdb6:	e7f4      	b.n	800bda2 <_printf_float+0x442>
 800bdb8:	2900      	cmp	r1, #0
 800bdba:	f43f ae8b 	beq.w	800bad4 <_printf_float+0x174>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bdc4:	ab09      	add	r3, sp, #36	; 0x24
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	ec49 8b10 	vmov	d0, r8, r9
 800bdcc:	6022      	str	r2, [r4, #0]
 800bdce:	f8cd a004 	str.w	sl, [sp, #4]
 800bdd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f7ff fd2d 	bl	800b836 <__cvt>
 800bddc:	4680      	mov	r8, r0
 800bdde:	e648      	b.n	800ba72 <_printf_float+0x112>

0800bde0 <_printf_common>:
 800bde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde4:	4691      	mov	r9, r2
 800bde6:	461f      	mov	r7, r3
 800bde8:	688a      	ldr	r2, [r1, #8]
 800bdea:	690b      	ldr	r3, [r1, #16]
 800bdec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	bfb8      	it	lt
 800bdf4:	4613      	movlt	r3, r2
 800bdf6:	f8c9 3000 	str.w	r3, [r9]
 800bdfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bdfe:	4606      	mov	r6, r0
 800be00:	460c      	mov	r4, r1
 800be02:	b112      	cbz	r2, 800be0a <_printf_common+0x2a>
 800be04:	3301      	adds	r3, #1
 800be06:	f8c9 3000 	str.w	r3, [r9]
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	0699      	lsls	r1, r3, #26
 800be0e:	bf42      	ittt	mi
 800be10:	f8d9 3000 	ldrmi.w	r3, [r9]
 800be14:	3302      	addmi	r3, #2
 800be16:	f8c9 3000 	strmi.w	r3, [r9]
 800be1a:	6825      	ldr	r5, [r4, #0]
 800be1c:	f015 0506 	ands.w	r5, r5, #6
 800be20:	d107      	bne.n	800be32 <_printf_common+0x52>
 800be22:	f104 0a19 	add.w	sl, r4, #25
 800be26:	68e3      	ldr	r3, [r4, #12]
 800be28:	f8d9 2000 	ldr.w	r2, [r9]
 800be2c:	1a9b      	subs	r3, r3, r2
 800be2e:	42ab      	cmp	r3, r5
 800be30:	dc28      	bgt.n	800be84 <_printf_common+0xa4>
 800be32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800be36:	6822      	ldr	r2, [r4, #0]
 800be38:	3300      	adds	r3, #0
 800be3a:	bf18      	it	ne
 800be3c:	2301      	movne	r3, #1
 800be3e:	0692      	lsls	r2, r2, #26
 800be40:	d42d      	bmi.n	800be9e <_printf_common+0xbe>
 800be42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be46:	4639      	mov	r1, r7
 800be48:	4630      	mov	r0, r6
 800be4a:	47c0      	blx	r8
 800be4c:	3001      	adds	r0, #1
 800be4e:	d020      	beq.n	800be92 <_printf_common+0xb2>
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	68e5      	ldr	r5, [r4, #12]
 800be54:	f8d9 2000 	ldr.w	r2, [r9]
 800be58:	f003 0306 	and.w	r3, r3, #6
 800be5c:	2b04      	cmp	r3, #4
 800be5e:	bf08      	it	eq
 800be60:	1aad      	subeq	r5, r5, r2
 800be62:	68a3      	ldr	r3, [r4, #8]
 800be64:	6922      	ldr	r2, [r4, #16]
 800be66:	bf0c      	ite	eq
 800be68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be6c:	2500      	movne	r5, #0
 800be6e:	4293      	cmp	r3, r2
 800be70:	bfc4      	itt	gt
 800be72:	1a9b      	subgt	r3, r3, r2
 800be74:	18ed      	addgt	r5, r5, r3
 800be76:	f04f 0900 	mov.w	r9, #0
 800be7a:	341a      	adds	r4, #26
 800be7c:	454d      	cmp	r5, r9
 800be7e:	d11a      	bne.n	800beb6 <_printf_common+0xd6>
 800be80:	2000      	movs	r0, #0
 800be82:	e008      	b.n	800be96 <_printf_common+0xb6>
 800be84:	2301      	movs	r3, #1
 800be86:	4652      	mov	r2, sl
 800be88:	4639      	mov	r1, r7
 800be8a:	4630      	mov	r0, r6
 800be8c:	47c0      	blx	r8
 800be8e:	3001      	adds	r0, #1
 800be90:	d103      	bne.n	800be9a <_printf_common+0xba>
 800be92:	f04f 30ff 	mov.w	r0, #4294967295
 800be96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be9a:	3501      	adds	r5, #1
 800be9c:	e7c3      	b.n	800be26 <_printf_common+0x46>
 800be9e:	18e1      	adds	r1, r4, r3
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	2030      	movs	r0, #48	; 0x30
 800bea4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bea8:	4422      	add	r2, r4
 800beaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800beae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800beb2:	3302      	adds	r3, #2
 800beb4:	e7c5      	b.n	800be42 <_printf_common+0x62>
 800beb6:	2301      	movs	r3, #1
 800beb8:	4622      	mov	r2, r4
 800beba:	4639      	mov	r1, r7
 800bebc:	4630      	mov	r0, r6
 800bebe:	47c0      	blx	r8
 800bec0:	3001      	adds	r0, #1
 800bec2:	d0e6      	beq.n	800be92 <_printf_common+0xb2>
 800bec4:	f109 0901 	add.w	r9, r9, #1
 800bec8:	e7d8      	b.n	800be7c <_printf_common+0x9c>
	...

0800becc <_printf_i>:
 800becc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bed0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bed4:	460c      	mov	r4, r1
 800bed6:	7e09      	ldrb	r1, [r1, #24]
 800bed8:	b085      	sub	sp, #20
 800beda:	296e      	cmp	r1, #110	; 0x6e
 800bedc:	4617      	mov	r7, r2
 800bede:	4606      	mov	r6, r0
 800bee0:	4698      	mov	r8, r3
 800bee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bee4:	f000 80b3 	beq.w	800c04e <_printf_i+0x182>
 800bee8:	d822      	bhi.n	800bf30 <_printf_i+0x64>
 800beea:	2963      	cmp	r1, #99	; 0x63
 800beec:	d036      	beq.n	800bf5c <_printf_i+0x90>
 800beee:	d80a      	bhi.n	800bf06 <_printf_i+0x3a>
 800bef0:	2900      	cmp	r1, #0
 800bef2:	f000 80b9 	beq.w	800c068 <_printf_i+0x19c>
 800bef6:	2958      	cmp	r1, #88	; 0x58
 800bef8:	f000 8083 	beq.w	800c002 <_printf_i+0x136>
 800befc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bf04:	e032      	b.n	800bf6c <_printf_i+0xa0>
 800bf06:	2964      	cmp	r1, #100	; 0x64
 800bf08:	d001      	beq.n	800bf0e <_printf_i+0x42>
 800bf0a:	2969      	cmp	r1, #105	; 0x69
 800bf0c:	d1f6      	bne.n	800befc <_printf_i+0x30>
 800bf0e:	6820      	ldr	r0, [r4, #0]
 800bf10:	6813      	ldr	r3, [r2, #0]
 800bf12:	0605      	lsls	r5, r0, #24
 800bf14:	f103 0104 	add.w	r1, r3, #4
 800bf18:	d52a      	bpl.n	800bf70 <_printf_i+0xa4>
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6011      	str	r1, [r2, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	da03      	bge.n	800bf2a <_printf_i+0x5e>
 800bf22:	222d      	movs	r2, #45	; 0x2d
 800bf24:	425b      	negs	r3, r3
 800bf26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bf2a:	486f      	ldr	r0, [pc, #444]	; (800c0e8 <_printf_i+0x21c>)
 800bf2c:	220a      	movs	r2, #10
 800bf2e:	e039      	b.n	800bfa4 <_printf_i+0xd8>
 800bf30:	2973      	cmp	r1, #115	; 0x73
 800bf32:	f000 809d 	beq.w	800c070 <_printf_i+0x1a4>
 800bf36:	d808      	bhi.n	800bf4a <_printf_i+0x7e>
 800bf38:	296f      	cmp	r1, #111	; 0x6f
 800bf3a:	d020      	beq.n	800bf7e <_printf_i+0xb2>
 800bf3c:	2970      	cmp	r1, #112	; 0x70
 800bf3e:	d1dd      	bne.n	800befc <_printf_i+0x30>
 800bf40:	6823      	ldr	r3, [r4, #0]
 800bf42:	f043 0320 	orr.w	r3, r3, #32
 800bf46:	6023      	str	r3, [r4, #0]
 800bf48:	e003      	b.n	800bf52 <_printf_i+0x86>
 800bf4a:	2975      	cmp	r1, #117	; 0x75
 800bf4c:	d017      	beq.n	800bf7e <_printf_i+0xb2>
 800bf4e:	2978      	cmp	r1, #120	; 0x78
 800bf50:	d1d4      	bne.n	800befc <_printf_i+0x30>
 800bf52:	2378      	movs	r3, #120	; 0x78
 800bf54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf58:	4864      	ldr	r0, [pc, #400]	; (800c0ec <_printf_i+0x220>)
 800bf5a:	e055      	b.n	800c008 <_printf_i+0x13c>
 800bf5c:	6813      	ldr	r3, [r2, #0]
 800bf5e:	1d19      	adds	r1, r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6011      	str	r1, [r2, #0]
 800bf64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e08c      	b.n	800c08a <_printf_i+0x1be>
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	6011      	str	r1, [r2, #0]
 800bf74:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf78:	bf18      	it	ne
 800bf7a:	b21b      	sxthne	r3, r3
 800bf7c:	e7cf      	b.n	800bf1e <_printf_i+0x52>
 800bf7e:	6813      	ldr	r3, [r2, #0]
 800bf80:	6825      	ldr	r5, [r4, #0]
 800bf82:	1d18      	adds	r0, r3, #4
 800bf84:	6010      	str	r0, [r2, #0]
 800bf86:	0628      	lsls	r0, r5, #24
 800bf88:	d501      	bpl.n	800bf8e <_printf_i+0xc2>
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	e002      	b.n	800bf94 <_printf_i+0xc8>
 800bf8e:	0668      	lsls	r0, r5, #25
 800bf90:	d5fb      	bpl.n	800bf8a <_printf_i+0xbe>
 800bf92:	881b      	ldrh	r3, [r3, #0]
 800bf94:	4854      	ldr	r0, [pc, #336]	; (800c0e8 <_printf_i+0x21c>)
 800bf96:	296f      	cmp	r1, #111	; 0x6f
 800bf98:	bf14      	ite	ne
 800bf9a:	220a      	movne	r2, #10
 800bf9c:	2208      	moveq	r2, #8
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfa4:	6865      	ldr	r5, [r4, #4]
 800bfa6:	60a5      	str	r5, [r4, #8]
 800bfa8:	2d00      	cmp	r5, #0
 800bfaa:	f2c0 8095 	blt.w	800c0d8 <_printf_i+0x20c>
 800bfae:	6821      	ldr	r1, [r4, #0]
 800bfb0:	f021 0104 	bic.w	r1, r1, #4
 800bfb4:	6021      	str	r1, [r4, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d13d      	bne.n	800c036 <_printf_i+0x16a>
 800bfba:	2d00      	cmp	r5, #0
 800bfbc:	f040 808e 	bne.w	800c0dc <_printf_i+0x210>
 800bfc0:	4665      	mov	r5, ip
 800bfc2:	2a08      	cmp	r2, #8
 800bfc4:	d10b      	bne.n	800bfde <_printf_i+0x112>
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	07db      	lsls	r3, r3, #31
 800bfca:	d508      	bpl.n	800bfde <_printf_i+0x112>
 800bfcc:	6923      	ldr	r3, [r4, #16]
 800bfce:	6862      	ldr	r2, [r4, #4]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	bfde      	ittt	le
 800bfd4:	2330      	movle	r3, #48	; 0x30
 800bfd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bfda:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bfde:	ebac 0305 	sub.w	r3, ip, r5
 800bfe2:	6123      	str	r3, [r4, #16]
 800bfe4:	f8cd 8000 	str.w	r8, [sp]
 800bfe8:	463b      	mov	r3, r7
 800bfea:	aa03      	add	r2, sp, #12
 800bfec:	4621      	mov	r1, r4
 800bfee:	4630      	mov	r0, r6
 800bff0:	f7ff fef6 	bl	800bde0 <_printf_common>
 800bff4:	3001      	adds	r0, #1
 800bff6:	d14d      	bne.n	800c094 <_printf_i+0x1c8>
 800bff8:	f04f 30ff 	mov.w	r0, #4294967295
 800bffc:	b005      	add	sp, #20
 800bffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c002:	4839      	ldr	r0, [pc, #228]	; (800c0e8 <_printf_i+0x21c>)
 800c004:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c008:	6813      	ldr	r3, [r2, #0]
 800c00a:	6821      	ldr	r1, [r4, #0]
 800c00c:	1d1d      	adds	r5, r3, #4
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6015      	str	r5, [r2, #0]
 800c012:	060a      	lsls	r2, r1, #24
 800c014:	d50b      	bpl.n	800c02e <_printf_i+0x162>
 800c016:	07ca      	lsls	r2, r1, #31
 800c018:	bf44      	itt	mi
 800c01a:	f041 0120 	orrmi.w	r1, r1, #32
 800c01e:	6021      	strmi	r1, [r4, #0]
 800c020:	b91b      	cbnz	r3, 800c02a <_printf_i+0x15e>
 800c022:	6822      	ldr	r2, [r4, #0]
 800c024:	f022 0220 	bic.w	r2, r2, #32
 800c028:	6022      	str	r2, [r4, #0]
 800c02a:	2210      	movs	r2, #16
 800c02c:	e7b7      	b.n	800bf9e <_printf_i+0xd2>
 800c02e:	064d      	lsls	r5, r1, #25
 800c030:	bf48      	it	mi
 800c032:	b29b      	uxthmi	r3, r3
 800c034:	e7ef      	b.n	800c016 <_printf_i+0x14a>
 800c036:	4665      	mov	r5, ip
 800c038:	fbb3 f1f2 	udiv	r1, r3, r2
 800c03c:	fb02 3311 	mls	r3, r2, r1, r3
 800c040:	5cc3      	ldrb	r3, [r0, r3]
 800c042:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c046:	460b      	mov	r3, r1
 800c048:	2900      	cmp	r1, #0
 800c04a:	d1f5      	bne.n	800c038 <_printf_i+0x16c>
 800c04c:	e7b9      	b.n	800bfc2 <_printf_i+0xf6>
 800c04e:	6813      	ldr	r3, [r2, #0]
 800c050:	6825      	ldr	r5, [r4, #0]
 800c052:	6961      	ldr	r1, [r4, #20]
 800c054:	1d18      	adds	r0, r3, #4
 800c056:	6010      	str	r0, [r2, #0]
 800c058:	0628      	lsls	r0, r5, #24
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	d501      	bpl.n	800c062 <_printf_i+0x196>
 800c05e:	6019      	str	r1, [r3, #0]
 800c060:	e002      	b.n	800c068 <_printf_i+0x19c>
 800c062:	066a      	lsls	r2, r5, #25
 800c064:	d5fb      	bpl.n	800c05e <_printf_i+0x192>
 800c066:	8019      	strh	r1, [r3, #0]
 800c068:	2300      	movs	r3, #0
 800c06a:	6123      	str	r3, [r4, #16]
 800c06c:	4665      	mov	r5, ip
 800c06e:	e7b9      	b.n	800bfe4 <_printf_i+0x118>
 800c070:	6813      	ldr	r3, [r2, #0]
 800c072:	1d19      	adds	r1, r3, #4
 800c074:	6011      	str	r1, [r2, #0]
 800c076:	681d      	ldr	r5, [r3, #0]
 800c078:	6862      	ldr	r2, [r4, #4]
 800c07a:	2100      	movs	r1, #0
 800c07c:	4628      	mov	r0, r5
 800c07e:	f7f4 f8af 	bl	80001e0 <memchr>
 800c082:	b108      	cbz	r0, 800c088 <_printf_i+0x1bc>
 800c084:	1b40      	subs	r0, r0, r5
 800c086:	6060      	str	r0, [r4, #4]
 800c088:	6863      	ldr	r3, [r4, #4]
 800c08a:	6123      	str	r3, [r4, #16]
 800c08c:	2300      	movs	r3, #0
 800c08e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c092:	e7a7      	b.n	800bfe4 <_printf_i+0x118>
 800c094:	6923      	ldr	r3, [r4, #16]
 800c096:	462a      	mov	r2, r5
 800c098:	4639      	mov	r1, r7
 800c09a:	4630      	mov	r0, r6
 800c09c:	47c0      	blx	r8
 800c09e:	3001      	adds	r0, #1
 800c0a0:	d0aa      	beq.n	800bff8 <_printf_i+0x12c>
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	079b      	lsls	r3, r3, #30
 800c0a6:	d413      	bmi.n	800c0d0 <_printf_i+0x204>
 800c0a8:	68e0      	ldr	r0, [r4, #12]
 800c0aa:	9b03      	ldr	r3, [sp, #12]
 800c0ac:	4298      	cmp	r0, r3
 800c0ae:	bfb8      	it	lt
 800c0b0:	4618      	movlt	r0, r3
 800c0b2:	e7a3      	b.n	800bffc <_printf_i+0x130>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	464a      	mov	r2, r9
 800c0b8:	4639      	mov	r1, r7
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	47c0      	blx	r8
 800c0be:	3001      	adds	r0, #1
 800c0c0:	d09a      	beq.n	800bff8 <_printf_i+0x12c>
 800c0c2:	3501      	adds	r5, #1
 800c0c4:	68e3      	ldr	r3, [r4, #12]
 800c0c6:	9a03      	ldr	r2, [sp, #12]
 800c0c8:	1a9b      	subs	r3, r3, r2
 800c0ca:	42ab      	cmp	r3, r5
 800c0cc:	dcf2      	bgt.n	800c0b4 <_printf_i+0x1e8>
 800c0ce:	e7eb      	b.n	800c0a8 <_printf_i+0x1dc>
 800c0d0:	2500      	movs	r5, #0
 800c0d2:	f104 0919 	add.w	r9, r4, #25
 800c0d6:	e7f5      	b.n	800c0c4 <_printf_i+0x1f8>
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1ac      	bne.n	800c036 <_printf_i+0x16a>
 800c0dc:	7803      	ldrb	r3, [r0, #0]
 800c0de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0e6:	e76c      	b.n	800bfc2 <_printf_i+0xf6>
 800c0e8:	0800e896 	.word	0x0800e896
 800c0ec:	0800e8a7 	.word	0x0800e8a7

0800c0f0 <iprintf>:
 800c0f0:	b40f      	push	{r0, r1, r2, r3}
 800c0f2:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <iprintf+0x2c>)
 800c0f4:	b513      	push	{r0, r1, r4, lr}
 800c0f6:	681c      	ldr	r4, [r3, #0]
 800c0f8:	b124      	cbz	r4, 800c104 <iprintf+0x14>
 800c0fa:	69a3      	ldr	r3, [r4, #24]
 800c0fc:	b913      	cbnz	r3, 800c104 <iprintf+0x14>
 800c0fe:	4620      	mov	r0, r4
 800c100:	f001 f896 	bl	800d230 <__sinit>
 800c104:	ab05      	add	r3, sp, #20
 800c106:	9a04      	ldr	r2, [sp, #16]
 800c108:	68a1      	ldr	r1, [r4, #8]
 800c10a:	9301      	str	r3, [sp, #4]
 800c10c:	4620      	mov	r0, r4
 800c10e:	f001 fea1 	bl	800de54 <_vfiprintf_r>
 800c112:	b002      	add	sp, #8
 800c114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c118:	b004      	add	sp, #16
 800c11a:	4770      	bx	lr
 800c11c:	20000084 	.word	0x20000084

0800c120 <_puts_r>:
 800c120:	b570      	push	{r4, r5, r6, lr}
 800c122:	460e      	mov	r6, r1
 800c124:	4605      	mov	r5, r0
 800c126:	b118      	cbz	r0, 800c130 <_puts_r+0x10>
 800c128:	6983      	ldr	r3, [r0, #24]
 800c12a:	b90b      	cbnz	r3, 800c130 <_puts_r+0x10>
 800c12c:	f001 f880 	bl	800d230 <__sinit>
 800c130:	69ab      	ldr	r3, [r5, #24]
 800c132:	68ac      	ldr	r4, [r5, #8]
 800c134:	b913      	cbnz	r3, 800c13c <_puts_r+0x1c>
 800c136:	4628      	mov	r0, r5
 800c138:	f001 f87a 	bl	800d230 <__sinit>
 800c13c:	4b23      	ldr	r3, [pc, #140]	; (800c1cc <_puts_r+0xac>)
 800c13e:	429c      	cmp	r4, r3
 800c140:	d117      	bne.n	800c172 <_puts_r+0x52>
 800c142:	686c      	ldr	r4, [r5, #4]
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	071b      	lsls	r3, r3, #28
 800c148:	d51d      	bpl.n	800c186 <_puts_r+0x66>
 800c14a:	6923      	ldr	r3, [r4, #16]
 800c14c:	b1db      	cbz	r3, 800c186 <_puts_r+0x66>
 800c14e:	3e01      	subs	r6, #1
 800c150:	68a3      	ldr	r3, [r4, #8]
 800c152:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c156:	3b01      	subs	r3, #1
 800c158:	60a3      	str	r3, [r4, #8]
 800c15a:	b9e9      	cbnz	r1, 800c198 <_puts_r+0x78>
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	da2e      	bge.n	800c1be <_puts_r+0x9e>
 800c160:	4622      	mov	r2, r4
 800c162:	210a      	movs	r1, #10
 800c164:	4628      	mov	r0, r5
 800c166:	f000 f86f 	bl	800c248 <__swbuf_r>
 800c16a:	3001      	adds	r0, #1
 800c16c:	d011      	beq.n	800c192 <_puts_r+0x72>
 800c16e:	200a      	movs	r0, #10
 800c170:	e011      	b.n	800c196 <_puts_r+0x76>
 800c172:	4b17      	ldr	r3, [pc, #92]	; (800c1d0 <_puts_r+0xb0>)
 800c174:	429c      	cmp	r4, r3
 800c176:	d101      	bne.n	800c17c <_puts_r+0x5c>
 800c178:	68ac      	ldr	r4, [r5, #8]
 800c17a:	e7e3      	b.n	800c144 <_puts_r+0x24>
 800c17c:	4b15      	ldr	r3, [pc, #84]	; (800c1d4 <_puts_r+0xb4>)
 800c17e:	429c      	cmp	r4, r3
 800c180:	bf08      	it	eq
 800c182:	68ec      	ldreq	r4, [r5, #12]
 800c184:	e7de      	b.n	800c144 <_puts_r+0x24>
 800c186:	4621      	mov	r1, r4
 800c188:	4628      	mov	r0, r5
 800c18a:	f000 f8af 	bl	800c2ec <__swsetup_r>
 800c18e:	2800      	cmp	r0, #0
 800c190:	d0dd      	beq.n	800c14e <_puts_r+0x2e>
 800c192:	f04f 30ff 	mov.w	r0, #4294967295
 800c196:	bd70      	pop	{r4, r5, r6, pc}
 800c198:	2b00      	cmp	r3, #0
 800c19a:	da04      	bge.n	800c1a6 <_puts_r+0x86>
 800c19c:	69a2      	ldr	r2, [r4, #24]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	dc06      	bgt.n	800c1b0 <_puts_r+0x90>
 800c1a2:	290a      	cmp	r1, #10
 800c1a4:	d004      	beq.n	800c1b0 <_puts_r+0x90>
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	1c5a      	adds	r2, r3, #1
 800c1aa:	6022      	str	r2, [r4, #0]
 800c1ac:	7019      	strb	r1, [r3, #0]
 800c1ae:	e7cf      	b.n	800c150 <_puts_r+0x30>
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f000 f848 	bl	800c248 <__swbuf_r>
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	d1c9      	bne.n	800c150 <_puts_r+0x30>
 800c1bc:	e7e9      	b.n	800c192 <_puts_r+0x72>
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	200a      	movs	r0, #10
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	6022      	str	r2, [r4, #0]
 800c1c6:	7018      	strb	r0, [r3, #0]
 800c1c8:	e7e5      	b.n	800c196 <_puts_r+0x76>
 800c1ca:	bf00      	nop
 800c1cc:	0800e8e8 	.word	0x0800e8e8
 800c1d0:	0800e908 	.word	0x0800e908
 800c1d4:	0800e8c8 	.word	0x0800e8c8

0800c1d8 <puts>:
 800c1d8:	4b02      	ldr	r3, [pc, #8]	; (800c1e4 <puts+0xc>)
 800c1da:	4601      	mov	r1, r0
 800c1dc:	6818      	ldr	r0, [r3, #0]
 800c1de:	f7ff bf9f 	b.w	800c120 <_puts_r>
 800c1e2:	bf00      	nop
 800c1e4:	20000084 	.word	0x20000084

0800c1e8 <siprintf>:
 800c1e8:	b40e      	push	{r1, r2, r3}
 800c1ea:	b500      	push	{lr}
 800c1ec:	b09c      	sub	sp, #112	; 0x70
 800c1ee:	ab1d      	add	r3, sp, #116	; 0x74
 800c1f0:	9002      	str	r0, [sp, #8]
 800c1f2:	9006      	str	r0, [sp, #24]
 800c1f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1f8:	4809      	ldr	r0, [pc, #36]	; (800c220 <siprintf+0x38>)
 800c1fa:	9107      	str	r1, [sp, #28]
 800c1fc:	9104      	str	r1, [sp, #16]
 800c1fe:	4909      	ldr	r1, [pc, #36]	; (800c224 <siprintf+0x3c>)
 800c200:	f853 2b04 	ldr.w	r2, [r3], #4
 800c204:	9105      	str	r1, [sp, #20]
 800c206:	6800      	ldr	r0, [r0, #0]
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	a902      	add	r1, sp, #8
 800c20c:	f001 fd00 	bl	800dc10 <_svfiprintf_r>
 800c210:	9b02      	ldr	r3, [sp, #8]
 800c212:	2200      	movs	r2, #0
 800c214:	701a      	strb	r2, [r3, #0]
 800c216:	b01c      	add	sp, #112	; 0x70
 800c218:	f85d eb04 	ldr.w	lr, [sp], #4
 800c21c:	b003      	add	sp, #12
 800c21e:	4770      	bx	lr
 800c220:	20000084 	.word	0x20000084
 800c224:	ffff0208 	.word	0xffff0208

0800c228 <strcat>:
 800c228:	b510      	push	{r4, lr}
 800c22a:	4603      	mov	r3, r0
 800c22c:	781a      	ldrb	r2, [r3, #0]
 800c22e:	1c5c      	adds	r4, r3, #1
 800c230:	b93a      	cbnz	r2, 800c242 <strcat+0x1a>
 800c232:	3b01      	subs	r3, #1
 800c234:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c238:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c23c:	2a00      	cmp	r2, #0
 800c23e:	d1f9      	bne.n	800c234 <strcat+0xc>
 800c240:	bd10      	pop	{r4, pc}
 800c242:	4623      	mov	r3, r4
 800c244:	e7f2      	b.n	800c22c <strcat+0x4>
	...

0800c248 <__swbuf_r>:
 800c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24a:	460e      	mov	r6, r1
 800c24c:	4614      	mov	r4, r2
 800c24e:	4605      	mov	r5, r0
 800c250:	b118      	cbz	r0, 800c25a <__swbuf_r+0x12>
 800c252:	6983      	ldr	r3, [r0, #24]
 800c254:	b90b      	cbnz	r3, 800c25a <__swbuf_r+0x12>
 800c256:	f000 ffeb 	bl	800d230 <__sinit>
 800c25a:	4b21      	ldr	r3, [pc, #132]	; (800c2e0 <__swbuf_r+0x98>)
 800c25c:	429c      	cmp	r4, r3
 800c25e:	d12a      	bne.n	800c2b6 <__swbuf_r+0x6e>
 800c260:	686c      	ldr	r4, [r5, #4]
 800c262:	69a3      	ldr	r3, [r4, #24]
 800c264:	60a3      	str	r3, [r4, #8]
 800c266:	89a3      	ldrh	r3, [r4, #12]
 800c268:	071a      	lsls	r2, r3, #28
 800c26a:	d52e      	bpl.n	800c2ca <__swbuf_r+0x82>
 800c26c:	6923      	ldr	r3, [r4, #16]
 800c26e:	b363      	cbz	r3, 800c2ca <__swbuf_r+0x82>
 800c270:	6923      	ldr	r3, [r4, #16]
 800c272:	6820      	ldr	r0, [r4, #0]
 800c274:	1ac0      	subs	r0, r0, r3
 800c276:	6963      	ldr	r3, [r4, #20]
 800c278:	b2f6      	uxtb	r6, r6
 800c27a:	4283      	cmp	r3, r0
 800c27c:	4637      	mov	r7, r6
 800c27e:	dc04      	bgt.n	800c28a <__swbuf_r+0x42>
 800c280:	4621      	mov	r1, r4
 800c282:	4628      	mov	r0, r5
 800c284:	f000 ff6a 	bl	800d15c <_fflush_r>
 800c288:	bb28      	cbnz	r0, 800c2d6 <__swbuf_r+0x8e>
 800c28a:	68a3      	ldr	r3, [r4, #8]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	60a3      	str	r3, [r4, #8]
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	1c5a      	adds	r2, r3, #1
 800c294:	6022      	str	r2, [r4, #0]
 800c296:	701e      	strb	r6, [r3, #0]
 800c298:	6963      	ldr	r3, [r4, #20]
 800c29a:	3001      	adds	r0, #1
 800c29c:	4283      	cmp	r3, r0
 800c29e:	d004      	beq.n	800c2aa <__swbuf_r+0x62>
 800c2a0:	89a3      	ldrh	r3, [r4, #12]
 800c2a2:	07db      	lsls	r3, r3, #31
 800c2a4:	d519      	bpl.n	800c2da <__swbuf_r+0x92>
 800c2a6:	2e0a      	cmp	r6, #10
 800c2a8:	d117      	bne.n	800c2da <__swbuf_r+0x92>
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f000 ff55 	bl	800d15c <_fflush_r>
 800c2b2:	b190      	cbz	r0, 800c2da <__swbuf_r+0x92>
 800c2b4:	e00f      	b.n	800c2d6 <__swbuf_r+0x8e>
 800c2b6:	4b0b      	ldr	r3, [pc, #44]	; (800c2e4 <__swbuf_r+0x9c>)
 800c2b8:	429c      	cmp	r4, r3
 800c2ba:	d101      	bne.n	800c2c0 <__swbuf_r+0x78>
 800c2bc:	68ac      	ldr	r4, [r5, #8]
 800c2be:	e7d0      	b.n	800c262 <__swbuf_r+0x1a>
 800c2c0:	4b09      	ldr	r3, [pc, #36]	; (800c2e8 <__swbuf_r+0xa0>)
 800c2c2:	429c      	cmp	r4, r3
 800c2c4:	bf08      	it	eq
 800c2c6:	68ec      	ldreq	r4, [r5, #12]
 800c2c8:	e7cb      	b.n	800c262 <__swbuf_r+0x1a>
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	f000 f80d 	bl	800c2ec <__swsetup_r>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d0cc      	beq.n	800c270 <__swbuf_r+0x28>
 800c2d6:	f04f 37ff 	mov.w	r7, #4294967295
 800c2da:	4638      	mov	r0, r7
 800c2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	0800e8e8 	.word	0x0800e8e8
 800c2e4:	0800e908 	.word	0x0800e908
 800c2e8:	0800e8c8 	.word	0x0800e8c8

0800c2ec <__swsetup_r>:
 800c2ec:	4b32      	ldr	r3, [pc, #200]	; (800c3b8 <__swsetup_r+0xcc>)
 800c2ee:	b570      	push	{r4, r5, r6, lr}
 800c2f0:	681d      	ldr	r5, [r3, #0]
 800c2f2:	4606      	mov	r6, r0
 800c2f4:	460c      	mov	r4, r1
 800c2f6:	b125      	cbz	r5, 800c302 <__swsetup_r+0x16>
 800c2f8:	69ab      	ldr	r3, [r5, #24]
 800c2fa:	b913      	cbnz	r3, 800c302 <__swsetup_r+0x16>
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f000 ff97 	bl	800d230 <__sinit>
 800c302:	4b2e      	ldr	r3, [pc, #184]	; (800c3bc <__swsetup_r+0xd0>)
 800c304:	429c      	cmp	r4, r3
 800c306:	d10f      	bne.n	800c328 <__swsetup_r+0x3c>
 800c308:	686c      	ldr	r4, [r5, #4]
 800c30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c30e:	b29a      	uxth	r2, r3
 800c310:	0715      	lsls	r5, r2, #28
 800c312:	d42c      	bmi.n	800c36e <__swsetup_r+0x82>
 800c314:	06d0      	lsls	r0, r2, #27
 800c316:	d411      	bmi.n	800c33c <__swsetup_r+0x50>
 800c318:	2209      	movs	r2, #9
 800c31a:	6032      	str	r2, [r6, #0]
 800c31c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c320:	81a3      	strh	r3, [r4, #12]
 800c322:	f04f 30ff 	mov.w	r0, #4294967295
 800c326:	e03e      	b.n	800c3a6 <__swsetup_r+0xba>
 800c328:	4b25      	ldr	r3, [pc, #148]	; (800c3c0 <__swsetup_r+0xd4>)
 800c32a:	429c      	cmp	r4, r3
 800c32c:	d101      	bne.n	800c332 <__swsetup_r+0x46>
 800c32e:	68ac      	ldr	r4, [r5, #8]
 800c330:	e7eb      	b.n	800c30a <__swsetup_r+0x1e>
 800c332:	4b24      	ldr	r3, [pc, #144]	; (800c3c4 <__swsetup_r+0xd8>)
 800c334:	429c      	cmp	r4, r3
 800c336:	bf08      	it	eq
 800c338:	68ec      	ldreq	r4, [r5, #12]
 800c33a:	e7e6      	b.n	800c30a <__swsetup_r+0x1e>
 800c33c:	0751      	lsls	r1, r2, #29
 800c33e:	d512      	bpl.n	800c366 <__swsetup_r+0x7a>
 800c340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c342:	b141      	cbz	r1, 800c356 <__swsetup_r+0x6a>
 800c344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c348:	4299      	cmp	r1, r3
 800c34a:	d002      	beq.n	800c352 <__swsetup_r+0x66>
 800c34c:	4630      	mov	r0, r6
 800c34e:	f001 fb5d 	bl	800da0c <_free_r>
 800c352:	2300      	movs	r3, #0
 800c354:	6363      	str	r3, [r4, #52]	; 0x34
 800c356:	89a3      	ldrh	r3, [r4, #12]
 800c358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c35c:	81a3      	strh	r3, [r4, #12]
 800c35e:	2300      	movs	r3, #0
 800c360:	6063      	str	r3, [r4, #4]
 800c362:	6923      	ldr	r3, [r4, #16]
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	89a3      	ldrh	r3, [r4, #12]
 800c368:	f043 0308 	orr.w	r3, r3, #8
 800c36c:	81a3      	strh	r3, [r4, #12]
 800c36e:	6923      	ldr	r3, [r4, #16]
 800c370:	b94b      	cbnz	r3, 800c386 <__swsetup_r+0x9a>
 800c372:	89a3      	ldrh	r3, [r4, #12]
 800c374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c37c:	d003      	beq.n	800c386 <__swsetup_r+0x9a>
 800c37e:	4621      	mov	r1, r4
 800c380:	4630      	mov	r0, r6
 800c382:	f001 f811 	bl	800d3a8 <__smakebuf_r>
 800c386:	89a2      	ldrh	r2, [r4, #12]
 800c388:	f012 0301 	ands.w	r3, r2, #1
 800c38c:	d00c      	beq.n	800c3a8 <__swsetup_r+0xbc>
 800c38e:	2300      	movs	r3, #0
 800c390:	60a3      	str	r3, [r4, #8]
 800c392:	6963      	ldr	r3, [r4, #20]
 800c394:	425b      	negs	r3, r3
 800c396:	61a3      	str	r3, [r4, #24]
 800c398:	6923      	ldr	r3, [r4, #16]
 800c39a:	b953      	cbnz	r3, 800c3b2 <__swsetup_r+0xc6>
 800c39c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c3a4:	d1ba      	bne.n	800c31c <__swsetup_r+0x30>
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}
 800c3a8:	0792      	lsls	r2, r2, #30
 800c3aa:	bf58      	it	pl
 800c3ac:	6963      	ldrpl	r3, [r4, #20]
 800c3ae:	60a3      	str	r3, [r4, #8]
 800c3b0:	e7f2      	b.n	800c398 <__swsetup_r+0xac>
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	e7f7      	b.n	800c3a6 <__swsetup_r+0xba>
 800c3b6:	bf00      	nop
 800c3b8:	20000084 	.word	0x20000084
 800c3bc:	0800e8e8 	.word	0x0800e8e8
 800c3c0:	0800e908 	.word	0x0800e908
 800c3c4:	0800e8c8 	.word	0x0800e8c8

0800c3c8 <quorem>:
 800c3c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	6903      	ldr	r3, [r0, #16]
 800c3ce:	690c      	ldr	r4, [r1, #16]
 800c3d0:	42a3      	cmp	r3, r4
 800c3d2:	4680      	mov	r8, r0
 800c3d4:	f2c0 8082 	blt.w	800c4dc <quorem+0x114>
 800c3d8:	3c01      	subs	r4, #1
 800c3da:	f101 0714 	add.w	r7, r1, #20
 800c3de:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c3e2:	f100 0614 	add.w	r6, r0, #20
 800c3e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c3ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c3ee:	eb06 030c 	add.w	r3, r6, ip
 800c3f2:	3501      	adds	r5, #1
 800c3f4:	eb07 090c 	add.w	r9, r7, ip
 800c3f8:	9301      	str	r3, [sp, #4]
 800c3fa:	fbb0 f5f5 	udiv	r5, r0, r5
 800c3fe:	b395      	cbz	r5, 800c466 <quorem+0x9e>
 800c400:	f04f 0a00 	mov.w	sl, #0
 800c404:	4638      	mov	r0, r7
 800c406:	46b6      	mov	lr, r6
 800c408:	46d3      	mov	fp, sl
 800c40a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c40e:	b293      	uxth	r3, r2
 800c410:	fb05 a303 	mla	r3, r5, r3, sl
 800c414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c418:	b29b      	uxth	r3, r3
 800c41a:	ebab 0303 	sub.w	r3, fp, r3
 800c41e:	0c12      	lsrs	r2, r2, #16
 800c420:	f8de b000 	ldr.w	fp, [lr]
 800c424:	fb05 a202 	mla	r2, r5, r2, sl
 800c428:	fa13 f38b 	uxtah	r3, r3, fp
 800c42c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c430:	fa1f fb82 	uxth.w	fp, r2
 800c434:	f8de 2000 	ldr.w	r2, [lr]
 800c438:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c43c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c440:	b29b      	uxth	r3, r3
 800c442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c446:	4581      	cmp	r9, r0
 800c448:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c44c:	f84e 3b04 	str.w	r3, [lr], #4
 800c450:	d2db      	bcs.n	800c40a <quorem+0x42>
 800c452:	f856 300c 	ldr.w	r3, [r6, ip]
 800c456:	b933      	cbnz	r3, 800c466 <quorem+0x9e>
 800c458:	9b01      	ldr	r3, [sp, #4]
 800c45a:	3b04      	subs	r3, #4
 800c45c:	429e      	cmp	r6, r3
 800c45e:	461a      	mov	r2, r3
 800c460:	d330      	bcc.n	800c4c4 <quorem+0xfc>
 800c462:	f8c8 4010 	str.w	r4, [r8, #16]
 800c466:	4640      	mov	r0, r8
 800c468:	f001 f9fc 	bl	800d864 <__mcmp>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	db25      	blt.n	800c4bc <quorem+0xf4>
 800c470:	3501      	adds	r5, #1
 800c472:	4630      	mov	r0, r6
 800c474:	f04f 0c00 	mov.w	ip, #0
 800c478:	f857 2b04 	ldr.w	r2, [r7], #4
 800c47c:	f8d0 e000 	ldr.w	lr, [r0]
 800c480:	b293      	uxth	r3, r2
 800c482:	ebac 0303 	sub.w	r3, ip, r3
 800c486:	0c12      	lsrs	r2, r2, #16
 800c488:	fa13 f38e 	uxtah	r3, r3, lr
 800c48c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c494:	b29b      	uxth	r3, r3
 800c496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c49a:	45b9      	cmp	r9, r7
 800c49c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c4a0:	f840 3b04 	str.w	r3, [r0], #4
 800c4a4:	d2e8      	bcs.n	800c478 <quorem+0xb0>
 800c4a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c4aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c4ae:	b92a      	cbnz	r2, 800c4bc <quorem+0xf4>
 800c4b0:	3b04      	subs	r3, #4
 800c4b2:	429e      	cmp	r6, r3
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	d30b      	bcc.n	800c4d0 <quorem+0x108>
 800c4b8:	f8c8 4010 	str.w	r4, [r8, #16]
 800c4bc:	4628      	mov	r0, r5
 800c4be:	b003      	add	sp, #12
 800c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c4:	6812      	ldr	r2, [r2, #0]
 800c4c6:	3b04      	subs	r3, #4
 800c4c8:	2a00      	cmp	r2, #0
 800c4ca:	d1ca      	bne.n	800c462 <quorem+0x9a>
 800c4cc:	3c01      	subs	r4, #1
 800c4ce:	e7c5      	b.n	800c45c <quorem+0x94>
 800c4d0:	6812      	ldr	r2, [r2, #0]
 800c4d2:	3b04      	subs	r3, #4
 800c4d4:	2a00      	cmp	r2, #0
 800c4d6:	d1ef      	bne.n	800c4b8 <quorem+0xf0>
 800c4d8:	3c01      	subs	r4, #1
 800c4da:	e7ea      	b.n	800c4b2 <quorem+0xea>
 800c4dc:	2000      	movs	r0, #0
 800c4de:	e7ee      	b.n	800c4be <quorem+0xf6>

0800c4e0 <_dtoa_r>:
 800c4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e4:	ec57 6b10 	vmov	r6, r7, d0
 800c4e8:	b097      	sub	sp, #92	; 0x5c
 800c4ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c4ec:	9106      	str	r1, [sp, #24]
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	920b      	str	r2, [sp, #44]	; 0x2c
 800c4f2:	9312      	str	r3, [sp, #72]	; 0x48
 800c4f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c4f8:	e9cd 6700 	strd	r6, r7, [sp]
 800c4fc:	b93d      	cbnz	r5, 800c50e <_dtoa_r+0x2e>
 800c4fe:	2010      	movs	r0, #16
 800c500:	f000 ff92 	bl	800d428 <malloc>
 800c504:	6260      	str	r0, [r4, #36]	; 0x24
 800c506:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c50a:	6005      	str	r5, [r0, #0]
 800c50c:	60c5      	str	r5, [r0, #12]
 800c50e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c510:	6819      	ldr	r1, [r3, #0]
 800c512:	b151      	cbz	r1, 800c52a <_dtoa_r+0x4a>
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	604a      	str	r2, [r1, #4]
 800c518:	2301      	movs	r3, #1
 800c51a:	4093      	lsls	r3, r2
 800c51c:	608b      	str	r3, [r1, #8]
 800c51e:	4620      	mov	r0, r4
 800c520:	f000 ffbe 	bl	800d4a0 <_Bfree>
 800c524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c526:	2200      	movs	r2, #0
 800c528:	601a      	str	r2, [r3, #0]
 800c52a:	1e3b      	subs	r3, r7, #0
 800c52c:	bfbb      	ittet	lt
 800c52e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c532:	9301      	strlt	r3, [sp, #4]
 800c534:	2300      	movge	r3, #0
 800c536:	2201      	movlt	r2, #1
 800c538:	bfac      	ite	ge
 800c53a:	f8c8 3000 	strge.w	r3, [r8]
 800c53e:	f8c8 2000 	strlt.w	r2, [r8]
 800c542:	4baf      	ldr	r3, [pc, #700]	; (800c800 <_dtoa_r+0x320>)
 800c544:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c548:	ea33 0308 	bics.w	r3, r3, r8
 800c54c:	d114      	bne.n	800c578 <_dtoa_r+0x98>
 800c54e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c550:	f242 730f 	movw	r3, #9999	; 0x270f
 800c554:	6013      	str	r3, [r2, #0]
 800c556:	9b00      	ldr	r3, [sp, #0]
 800c558:	b923      	cbnz	r3, 800c564 <_dtoa_r+0x84>
 800c55a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c55e:	2800      	cmp	r0, #0
 800c560:	f000 8542 	beq.w	800cfe8 <_dtoa_r+0xb08>
 800c564:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c566:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c814 <_dtoa_r+0x334>
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f000 8544 	beq.w	800cff8 <_dtoa_r+0xb18>
 800c570:	f10b 0303 	add.w	r3, fp, #3
 800c574:	f000 bd3e 	b.w	800cff4 <_dtoa_r+0xb14>
 800c578:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c57c:	2200      	movs	r2, #0
 800c57e:	2300      	movs	r3, #0
 800c580:	4630      	mov	r0, r6
 800c582:	4639      	mov	r1, r7
 800c584:	f7f4 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c588:	4681      	mov	r9, r0
 800c58a:	b168      	cbz	r0, 800c5a8 <_dtoa_r+0xc8>
 800c58c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c58e:	2301      	movs	r3, #1
 800c590:	6013      	str	r3, [r2, #0]
 800c592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c594:	2b00      	cmp	r3, #0
 800c596:	f000 8524 	beq.w	800cfe2 <_dtoa_r+0xb02>
 800c59a:	4b9a      	ldr	r3, [pc, #616]	; (800c804 <_dtoa_r+0x324>)
 800c59c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c59e:	f103 3bff 	add.w	fp, r3, #4294967295
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	f000 bd28 	b.w	800cff8 <_dtoa_r+0xb18>
 800c5a8:	aa14      	add	r2, sp, #80	; 0x50
 800c5aa:	a915      	add	r1, sp, #84	; 0x54
 800c5ac:	ec47 6b10 	vmov	d0, r6, r7
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f001 f9ce 	bl	800d952 <__d2b>
 800c5b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c5ba:	9004      	str	r0, [sp, #16]
 800c5bc:	2d00      	cmp	r5, #0
 800c5be:	d07c      	beq.n	800c6ba <_dtoa_r+0x1da>
 800c5c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c5c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c5c8:	46b2      	mov	sl, r6
 800c5ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c5ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c5d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	4b8b      	ldr	r3, [pc, #556]	; (800c808 <_dtoa_r+0x328>)
 800c5da:	4650      	mov	r0, sl
 800c5dc:	4659      	mov	r1, fp
 800c5de:	f7f3 fe53 	bl	8000288 <__aeabi_dsub>
 800c5e2:	a381      	add	r3, pc, #516	; (adr r3, 800c7e8 <_dtoa_r+0x308>)
 800c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e8:	f7f4 f806 	bl	80005f8 <__aeabi_dmul>
 800c5ec:	a380      	add	r3, pc, #512	; (adr r3, 800c7f0 <_dtoa_r+0x310>)
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	f7f3 fe4b 	bl	800028c <__adddf3>
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	460f      	mov	r7, r1
 800c5fc:	f7f3 ff92 	bl	8000524 <__aeabi_i2d>
 800c600:	a37d      	add	r3, pc, #500	; (adr r3, 800c7f8 <_dtoa_r+0x318>)
 800c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c606:	f7f3 fff7 	bl	80005f8 <__aeabi_dmul>
 800c60a:	4602      	mov	r2, r0
 800c60c:	460b      	mov	r3, r1
 800c60e:	4630      	mov	r0, r6
 800c610:	4639      	mov	r1, r7
 800c612:	f7f3 fe3b 	bl	800028c <__adddf3>
 800c616:	4606      	mov	r6, r0
 800c618:	460f      	mov	r7, r1
 800c61a:	f7f4 fa9d 	bl	8000b58 <__aeabi_d2iz>
 800c61e:	2200      	movs	r2, #0
 800c620:	4682      	mov	sl, r0
 800c622:	2300      	movs	r3, #0
 800c624:	4630      	mov	r0, r6
 800c626:	4639      	mov	r1, r7
 800c628:	f7f4 fa58 	bl	8000adc <__aeabi_dcmplt>
 800c62c:	b148      	cbz	r0, 800c642 <_dtoa_r+0x162>
 800c62e:	4650      	mov	r0, sl
 800c630:	f7f3 ff78 	bl	8000524 <__aeabi_i2d>
 800c634:	4632      	mov	r2, r6
 800c636:	463b      	mov	r3, r7
 800c638:	f7f4 fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 800c63c:	b908      	cbnz	r0, 800c642 <_dtoa_r+0x162>
 800c63e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c642:	f1ba 0f16 	cmp.w	sl, #22
 800c646:	d859      	bhi.n	800c6fc <_dtoa_r+0x21c>
 800c648:	4970      	ldr	r1, [pc, #448]	; (800c80c <_dtoa_r+0x32c>)
 800c64a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c64e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c652:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c656:	f7f4 fa5f 	bl	8000b18 <__aeabi_dcmpgt>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d050      	beq.n	800c700 <_dtoa_r+0x220>
 800c65e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c662:	2300      	movs	r3, #0
 800c664:	930f      	str	r3, [sp, #60]	; 0x3c
 800c666:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c668:	1b5d      	subs	r5, r3, r5
 800c66a:	f1b5 0801 	subs.w	r8, r5, #1
 800c66e:	bf49      	itett	mi
 800c670:	f1c5 0301 	rsbmi	r3, r5, #1
 800c674:	2300      	movpl	r3, #0
 800c676:	9305      	strmi	r3, [sp, #20]
 800c678:	f04f 0800 	movmi.w	r8, #0
 800c67c:	bf58      	it	pl
 800c67e:	9305      	strpl	r3, [sp, #20]
 800c680:	f1ba 0f00 	cmp.w	sl, #0
 800c684:	db3e      	blt.n	800c704 <_dtoa_r+0x224>
 800c686:	2300      	movs	r3, #0
 800c688:	44d0      	add	r8, sl
 800c68a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c68e:	9307      	str	r3, [sp, #28]
 800c690:	9b06      	ldr	r3, [sp, #24]
 800c692:	2b09      	cmp	r3, #9
 800c694:	f200 8090 	bhi.w	800c7b8 <_dtoa_r+0x2d8>
 800c698:	2b05      	cmp	r3, #5
 800c69a:	bfc4      	itt	gt
 800c69c:	3b04      	subgt	r3, #4
 800c69e:	9306      	strgt	r3, [sp, #24]
 800c6a0:	9b06      	ldr	r3, [sp, #24]
 800c6a2:	f1a3 0302 	sub.w	r3, r3, #2
 800c6a6:	bfcc      	ite	gt
 800c6a8:	2500      	movgt	r5, #0
 800c6aa:	2501      	movle	r5, #1
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	f200 808f 	bhi.w	800c7d0 <_dtoa_r+0x2f0>
 800c6b2:	e8df f003 	tbb	[pc, r3]
 800c6b6:	7f7d      	.short	0x7f7d
 800c6b8:	7131      	.short	0x7131
 800c6ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c6be:	441d      	add	r5, r3
 800c6c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c6c4:	2820      	cmp	r0, #32
 800c6c6:	dd13      	ble.n	800c6f0 <_dtoa_r+0x210>
 800c6c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c6cc:	9b00      	ldr	r3, [sp, #0]
 800c6ce:	fa08 f800 	lsl.w	r8, r8, r0
 800c6d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c6d6:	fa23 f000 	lsr.w	r0, r3, r0
 800c6da:	ea48 0000 	orr.w	r0, r8, r0
 800c6de:	f7f3 ff11 	bl	8000504 <__aeabi_ui2d>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	4682      	mov	sl, r0
 800c6e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c6ea:	3d01      	subs	r5, #1
 800c6ec:	9313      	str	r3, [sp, #76]	; 0x4c
 800c6ee:	e772      	b.n	800c5d6 <_dtoa_r+0xf6>
 800c6f0:	9b00      	ldr	r3, [sp, #0]
 800c6f2:	f1c0 0020 	rsb	r0, r0, #32
 800c6f6:	fa03 f000 	lsl.w	r0, r3, r0
 800c6fa:	e7f0      	b.n	800c6de <_dtoa_r+0x1fe>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e7b1      	b.n	800c664 <_dtoa_r+0x184>
 800c700:	900f      	str	r0, [sp, #60]	; 0x3c
 800c702:	e7b0      	b.n	800c666 <_dtoa_r+0x186>
 800c704:	9b05      	ldr	r3, [sp, #20]
 800c706:	eba3 030a 	sub.w	r3, r3, sl
 800c70a:	9305      	str	r3, [sp, #20]
 800c70c:	f1ca 0300 	rsb	r3, sl, #0
 800c710:	9307      	str	r3, [sp, #28]
 800c712:	2300      	movs	r3, #0
 800c714:	930e      	str	r3, [sp, #56]	; 0x38
 800c716:	e7bb      	b.n	800c690 <_dtoa_r+0x1b0>
 800c718:	2301      	movs	r3, #1
 800c71a:	930a      	str	r3, [sp, #40]	; 0x28
 800c71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c71e:	2b00      	cmp	r3, #0
 800c720:	dd59      	ble.n	800c7d6 <_dtoa_r+0x2f6>
 800c722:	9302      	str	r3, [sp, #8]
 800c724:	4699      	mov	r9, r3
 800c726:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c728:	2200      	movs	r2, #0
 800c72a:	6072      	str	r2, [r6, #4]
 800c72c:	2204      	movs	r2, #4
 800c72e:	f102 0014 	add.w	r0, r2, #20
 800c732:	4298      	cmp	r0, r3
 800c734:	6871      	ldr	r1, [r6, #4]
 800c736:	d953      	bls.n	800c7e0 <_dtoa_r+0x300>
 800c738:	4620      	mov	r0, r4
 800c73a:	f000 fe7d 	bl	800d438 <_Balloc>
 800c73e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c740:	6030      	str	r0, [r6, #0]
 800c742:	f1b9 0f0e 	cmp.w	r9, #14
 800c746:	f8d3 b000 	ldr.w	fp, [r3]
 800c74a:	f200 80e6 	bhi.w	800c91a <_dtoa_r+0x43a>
 800c74e:	2d00      	cmp	r5, #0
 800c750:	f000 80e3 	beq.w	800c91a <_dtoa_r+0x43a>
 800c754:	ed9d 7b00 	vldr	d7, [sp]
 800c758:	f1ba 0f00 	cmp.w	sl, #0
 800c75c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c760:	dd74      	ble.n	800c84c <_dtoa_r+0x36c>
 800c762:	4a2a      	ldr	r2, [pc, #168]	; (800c80c <_dtoa_r+0x32c>)
 800c764:	f00a 030f 	and.w	r3, sl, #15
 800c768:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c76c:	ed93 7b00 	vldr	d7, [r3]
 800c770:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c774:	06f0      	lsls	r0, r6, #27
 800c776:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c77a:	d565      	bpl.n	800c848 <_dtoa_r+0x368>
 800c77c:	4b24      	ldr	r3, [pc, #144]	; (800c810 <_dtoa_r+0x330>)
 800c77e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c782:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c786:	f7f4 f861 	bl	800084c <__aeabi_ddiv>
 800c78a:	e9cd 0100 	strd	r0, r1, [sp]
 800c78e:	f006 060f 	and.w	r6, r6, #15
 800c792:	2503      	movs	r5, #3
 800c794:	4f1e      	ldr	r7, [pc, #120]	; (800c810 <_dtoa_r+0x330>)
 800c796:	e04c      	b.n	800c832 <_dtoa_r+0x352>
 800c798:	2301      	movs	r3, #1
 800c79a:	930a      	str	r3, [sp, #40]	; 0x28
 800c79c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c79e:	4453      	add	r3, sl
 800c7a0:	f103 0901 	add.w	r9, r3, #1
 800c7a4:	9302      	str	r3, [sp, #8]
 800c7a6:	464b      	mov	r3, r9
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	bfb8      	it	lt
 800c7ac:	2301      	movlt	r3, #1
 800c7ae:	e7ba      	b.n	800c726 <_dtoa_r+0x246>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	e7b2      	b.n	800c71a <_dtoa_r+0x23a>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	e7f0      	b.n	800c79a <_dtoa_r+0x2ba>
 800c7b8:	2501      	movs	r5, #1
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	9306      	str	r3, [sp, #24]
 800c7be:	950a      	str	r5, [sp, #40]	; 0x28
 800c7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c4:	9302      	str	r3, [sp, #8]
 800c7c6:	4699      	mov	r9, r3
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	2312      	movs	r3, #18
 800c7cc:	920b      	str	r2, [sp, #44]	; 0x2c
 800c7ce:	e7aa      	b.n	800c726 <_dtoa_r+0x246>
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c7d4:	e7f4      	b.n	800c7c0 <_dtoa_r+0x2e0>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	9302      	str	r3, [sp, #8]
 800c7da:	4699      	mov	r9, r3
 800c7dc:	461a      	mov	r2, r3
 800c7de:	e7f5      	b.n	800c7cc <_dtoa_r+0x2ec>
 800c7e0:	3101      	adds	r1, #1
 800c7e2:	6071      	str	r1, [r6, #4]
 800c7e4:	0052      	lsls	r2, r2, #1
 800c7e6:	e7a2      	b.n	800c72e <_dtoa_r+0x24e>
 800c7e8:	636f4361 	.word	0x636f4361
 800c7ec:	3fd287a7 	.word	0x3fd287a7
 800c7f0:	8b60c8b3 	.word	0x8b60c8b3
 800c7f4:	3fc68a28 	.word	0x3fc68a28
 800c7f8:	509f79fb 	.word	0x509f79fb
 800c7fc:	3fd34413 	.word	0x3fd34413
 800c800:	7ff00000 	.word	0x7ff00000
 800c804:	0800e895 	.word	0x0800e895
 800c808:	3ff80000 	.word	0x3ff80000
 800c80c:	0800e950 	.word	0x0800e950
 800c810:	0800e928 	.word	0x0800e928
 800c814:	0800e8c1 	.word	0x0800e8c1
 800c818:	07f1      	lsls	r1, r6, #31
 800c81a:	d508      	bpl.n	800c82e <_dtoa_r+0x34e>
 800c81c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c820:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c824:	f7f3 fee8 	bl	80005f8 <__aeabi_dmul>
 800c828:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c82c:	3501      	adds	r5, #1
 800c82e:	1076      	asrs	r6, r6, #1
 800c830:	3708      	adds	r7, #8
 800c832:	2e00      	cmp	r6, #0
 800c834:	d1f0      	bne.n	800c818 <_dtoa_r+0x338>
 800c836:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c83a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c83e:	f7f4 f805 	bl	800084c <__aeabi_ddiv>
 800c842:	e9cd 0100 	strd	r0, r1, [sp]
 800c846:	e01a      	b.n	800c87e <_dtoa_r+0x39e>
 800c848:	2502      	movs	r5, #2
 800c84a:	e7a3      	b.n	800c794 <_dtoa_r+0x2b4>
 800c84c:	f000 80a0 	beq.w	800c990 <_dtoa_r+0x4b0>
 800c850:	f1ca 0600 	rsb	r6, sl, #0
 800c854:	4b9f      	ldr	r3, [pc, #636]	; (800cad4 <_dtoa_r+0x5f4>)
 800c856:	4fa0      	ldr	r7, [pc, #640]	; (800cad8 <_dtoa_r+0x5f8>)
 800c858:	f006 020f 	and.w	r2, r6, #15
 800c85c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c864:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c868:	f7f3 fec6 	bl	80005f8 <__aeabi_dmul>
 800c86c:	e9cd 0100 	strd	r0, r1, [sp]
 800c870:	1136      	asrs	r6, r6, #4
 800c872:	2300      	movs	r3, #0
 800c874:	2502      	movs	r5, #2
 800c876:	2e00      	cmp	r6, #0
 800c878:	d17f      	bne.n	800c97a <_dtoa_r+0x49a>
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1e1      	bne.n	800c842 <_dtoa_r+0x362>
 800c87e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 8087 	beq.w	800c994 <_dtoa_r+0x4b4>
 800c886:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c88a:	2200      	movs	r2, #0
 800c88c:	4b93      	ldr	r3, [pc, #588]	; (800cadc <_dtoa_r+0x5fc>)
 800c88e:	4630      	mov	r0, r6
 800c890:	4639      	mov	r1, r7
 800c892:	f7f4 f923 	bl	8000adc <__aeabi_dcmplt>
 800c896:	2800      	cmp	r0, #0
 800c898:	d07c      	beq.n	800c994 <_dtoa_r+0x4b4>
 800c89a:	f1b9 0f00 	cmp.w	r9, #0
 800c89e:	d079      	beq.n	800c994 <_dtoa_r+0x4b4>
 800c8a0:	9b02      	ldr	r3, [sp, #8]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	dd35      	ble.n	800c912 <_dtoa_r+0x432>
 800c8a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c8aa:	9308      	str	r3, [sp, #32]
 800c8ac:	4639      	mov	r1, r7
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	4b8b      	ldr	r3, [pc, #556]	; (800cae0 <_dtoa_r+0x600>)
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f7f3 fea0 	bl	80005f8 <__aeabi_dmul>
 800c8b8:	e9cd 0100 	strd	r0, r1, [sp]
 800c8bc:	9f02      	ldr	r7, [sp, #8]
 800c8be:	3501      	adds	r5, #1
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	f7f3 fe2f 	bl	8000524 <__aeabi_i2d>
 800c8c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ca:	f7f3 fe95 	bl	80005f8 <__aeabi_dmul>
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	4b84      	ldr	r3, [pc, #528]	; (800cae4 <_dtoa_r+0x604>)
 800c8d2:	f7f3 fcdb 	bl	800028c <__adddf3>
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c8dc:	2f00      	cmp	r7, #0
 800c8de:	d15d      	bne.n	800c99c <_dtoa_r+0x4bc>
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	4b81      	ldr	r3, [pc, #516]	; (800cae8 <_dtoa_r+0x608>)
 800c8e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8e8:	f7f3 fcce 	bl	8000288 <__aeabi_dsub>
 800c8ec:	462a      	mov	r2, r5
 800c8ee:	4633      	mov	r3, r6
 800c8f0:	e9cd 0100 	strd	r0, r1, [sp]
 800c8f4:	f7f4 f910 	bl	8000b18 <__aeabi_dcmpgt>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	f040 8288 	bne.w	800ce0e <_dtoa_r+0x92e>
 800c8fe:	462a      	mov	r2, r5
 800c900:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c904:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c908:	f7f4 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	f040 827c 	bne.w	800ce0a <_dtoa_r+0x92a>
 800c912:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c916:	e9cd 2300 	strd	r2, r3, [sp]
 800c91a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f2c0 8150 	blt.w	800cbc2 <_dtoa_r+0x6e2>
 800c922:	f1ba 0f0e 	cmp.w	sl, #14
 800c926:	f300 814c 	bgt.w	800cbc2 <_dtoa_r+0x6e2>
 800c92a:	4b6a      	ldr	r3, [pc, #424]	; (800cad4 <_dtoa_r+0x5f4>)
 800c92c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c930:	ed93 7b00 	vldr	d7, [r3]
 800c934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c936:	2b00      	cmp	r3, #0
 800c938:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c93c:	f280 80d8 	bge.w	800caf0 <_dtoa_r+0x610>
 800c940:	f1b9 0f00 	cmp.w	r9, #0
 800c944:	f300 80d4 	bgt.w	800caf0 <_dtoa_r+0x610>
 800c948:	f040 825e 	bne.w	800ce08 <_dtoa_r+0x928>
 800c94c:	2200      	movs	r2, #0
 800c94e:	4b66      	ldr	r3, [pc, #408]	; (800cae8 <_dtoa_r+0x608>)
 800c950:	ec51 0b17 	vmov	r0, r1, d7
 800c954:	f7f3 fe50 	bl	80005f8 <__aeabi_dmul>
 800c958:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c95c:	f7f4 f8d2 	bl	8000b04 <__aeabi_dcmpge>
 800c960:	464f      	mov	r7, r9
 800c962:	464e      	mov	r6, r9
 800c964:	2800      	cmp	r0, #0
 800c966:	f040 8234 	bne.w	800cdd2 <_dtoa_r+0x8f2>
 800c96a:	2331      	movs	r3, #49	; 0x31
 800c96c:	f10b 0501 	add.w	r5, fp, #1
 800c970:	f88b 3000 	strb.w	r3, [fp]
 800c974:	f10a 0a01 	add.w	sl, sl, #1
 800c978:	e22f      	b.n	800cdda <_dtoa_r+0x8fa>
 800c97a:	07f2      	lsls	r2, r6, #31
 800c97c:	d505      	bpl.n	800c98a <_dtoa_r+0x4aa>
 800c97e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c982:	f7f3 fe39 	bl	80005f8 <__aeabi_dmul>
 800c986:	3501      	adds	r5, #1
 800c988:	2301      	movs	r3, #1
 800c98a:	1076      	asrs	r6, r6, #1
 800c98c:	3708      	adds	r7, #8
 800c98e:	e772      	b.n	800c876 <_dtoa_r+0x396>
 800c990:	2502      	movs	r5, #2
 800c992:	e774      	b.n	800c87e <_dtoa_r+0x39e>
 800c994:	f8cd a020 	str.w	sl, [sp, #32]
 800c998:	464f      	mov	r7, r9
 800c99a:	e791      	b.n	800c8c0 <_dtoa_r+0x3e0>
 800c99c:	4b4d      	ldr	r3, [pc, #308]	; (800cad4 <_dtoa_r+0x5f4>)
 800c99e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c9a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d047      	beq.n	800ca3c <_dtoa_r+0x55c>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	494e      	ldr	r1, [pc, #312]	; (800caec <_dtoa_r+0x60c>)
 800c9b4:	f7f3 ff4a 	bl	800084c <__aeabi_ddiv>
 800c9b8:	462a      	mov	r2, r5
 800c9ba:	4633      	mov	r3, r6
 800c9bc:	f7f3 fc64 	bl	8000288 <__aeabi_dsub>
 800c9c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c9c4:	465d      	mov	r5, fp
 800c9c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9ca:	f7f4 f8c5 	bl	8000b58 <__aeabi_d2iz>
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	f7f3 fda8 	bl	8000524 <__aeabi_i2d>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9dc:	f7f3 fc54 	bl	8000288 <__aeabi_dsub>
 800c9e0:	3630      	adds	r6, #48	; 0x30
 800c9e2:	f805 6b01 	strb.w	r6, [r5], #1
 800c9e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c9ea:	e9cd 0100 	strd	r0, r1, [sp]
 800c9ee:	f7f4 f875 	bl	8000adc <__aeabi_dcmplt>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d163      	bne.n	800cabe <_dtoa_r+0x5de>
 800c9f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	4937      	ldr	r1, [pc, #220]	; (800cadc <_dtoa_r+0x5fc>)
 800c9fe:	f7f3 fc43 	bl	8000288 <__aeabi_dsub>
 800ca02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ca06:	f7f4 f869 	bl	8000adc <__aeabi_dcmplt>
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	f040 80b7 	bne.w	800cb7e <_dtoa_r+0x69e>
 800ca10:	eba5 030b 	sub.w	r3, r5, fp
 800ca14:	429f      	cmp	r7, r3
 800ca16:	f77f af7c 	ble.w	800c912 <_dtoa_r+0x432>
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	4b30      	ldr	r3, [pc, #192]	; (800cae0 <_dtoa_r+0x600>)
 800ca1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca22:	f7f3 fde9 	bl	80005f8 <__aeabi_dmul>
 800ca26:	2200      	movs	r2, #0
 800ca28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ca2c:	4b2c      	ldr	r3, [pc, #176]	; (800cae0 <_dtoa_r+0x600>)
 800ca2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca32:	f7f3 fde1 	bl	80005f8 <__aeabi_dmul>
 800ca36:	e9cd 0100 	strd	r0, r1, [sp]
 800ca3a:	e7c4      	b.n	800c9c6 <_dtoa_r+0x4e6>
 800ca3c:	462a      	mov	r2, r5
 800ca3e:	4633      	mov	r3, r6
 800ca40:	f7f3 fdda 	bl	80005f8 <__aeabi_dmul>
 800ca44:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ca48:	eb0b 0507 	add.w	r5, fp, r7
 800ca4c:	465e      	mov	r6, fp
 800ca4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca52:	f7f4 f881 	bl	8000b58 <__aeabi_d2iz>
 800ca56:	4607      	mov	r7, r0
 800ca58:	f7f3 fd64 	bl	8000524 <__aeabi_i2d>
 800ca5c:	3730      	adds	r7, #48	; 0x30
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca66:	f7f3 fc0f 	bl	8000288 <__aeabi_dsub>
 800ca6a:	f806 7b01 	strb.w	r7, [r6], #1
 800ca6e:	42ae      	cmp	r6, r5
 800ca70:	e9cd 0100 	strd	r0, r1, [sp]
 800ca74:	f04f 0200 	mov.w	r2, #0
 800ca78:	d126      	bne.n	800cac8 <_dtoa_r+0x5e8>
 800ca7a:	4b1c      	ldr	r3, [pc, #112]	; (800caec <_dtoa_r+0x60c>)
 800ca7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca80:	f7f3 fc04 	bl	800028c <__adddf3>
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca8c:	f7f4 f844 	bl	8000b18 <__aeabi_dcmpgt>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d174      	bne.n	800cb7e <_dtoa_r+0x69e>
 800ca94:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ca98:	2000      	movs	r0, #0
 800ca9a:	4914      	ldr	r1, [pc, #80]	; (800caec <_dtoa_r+0x60c>)
 800ca9c:	f7f3 fbf4 	bl	8000288 <__aeabi_dsub>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caa8:	f7f4 f818 	bl	8000adc <__aeabi_dcmplt>
 800caac:	2800      	cmp	r0, #0
 800caae:	f43f af30 	beq.w	800c912 <_dtoa_r+0x432>
 800cab2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cab6:	2b30      	cmp	r3, #48	; 0x30
 800cab8:	f105 32ff 	add.w	r2, r5, #4294967295
 800cabc:	d002      	beq.n	800cac4 <_dtoa_r+0x5e4>
 800cabe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cac2:	e04a      	b.n	800cb5a <_dtoa_r+0x67a>
 800cac4:	4615      	mov	r5, r2
 800cac6:	e7f4      	b.n	800cab2 <_dtoa_r+0x5d2>
 800cac8:	4b05      	ldr	r3, [pc, #20]	; (800cae0 <_dtoa_r+0x600>)
 800caca:	f7f3 fd95 	bl	80005f8 <__aeabi_dmul>
 800cace:	e9cd 0100 	strd	r0, r1, [sp]
 800cad2:	e7bc      	b.n	800ca4e <_dtoa_r+0x56e>
 800cad4:	0800e950 	.word	0x0800e950
 800cad8:	0800e928 	.word	0x0800e928
 800cadc:	3ff00000 	.word	0x3ff00000
 800cae0:	40240000 	.word	0x40240000
 800cae4:	401c0000 	.word	0x401c0000
 800cae8:	40140000 	.word	0x40140000
 800caec:	3fe00000 	.word	0x3fe00000
 800caf0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800caf4:	465d      	mov	r5, fp
 800caf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cafa:	4630      	mov	r0, r6
 800cafc:	4639      	mov	r1, r7
 800cafe:	f7f3 fea5 	bl	800084c <__aeabi_ddiv>
 800cb02:	f7f4 f829 	bl	8000b58 <__aeabi_d2iz>
 800cb06:	4680      	mov	r8, r0
 800cb08:	f7f3 fd0c 	bl	8000524 <__aeabi_i2d>
 800cb0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb10:	f7f3 fd72 	bl	80005f8 <__aeabi_dmul>
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	4630      	mov	r0, r6
 800cb1a:	4639      	mov	r1, r7
 800cb1c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cb20:	f7f3 fbb2 	bl	8000288 <__aeabi_dsub>
 800cb24:	f805 6b01 	strb.w	r6, [r5], #1
 800cb28:	eba5 060b 	sub.w	r6, r5, fp
 800cb2c:	45b1      	cmp	r9, r6
 800cb2e:	4602      	mov	r2, r0
 800cb30:	460b      	mov	r3, r1
 800cb32:	d139      	bne.n	800cba8 <_dtoa_r+0x6c8>
 800cb34:	f7f3 fbaa 	bl	800028c <__adddf3>
 800cb38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb3c:	4606      	mov	r6, r0
 800cb3e:	460f      	mov	r7, r1
 800cb40:	f7f3 ffea 	bl	8000b18 <__aeabi_dcmpgt>
 800cb44:	b9c8      	cbnz	r0, 800cb7a <_dtoa_r+0x69a>
 800cb46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	4639      	mov	r1, r7
 800cb4e:	f7f3 ffbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb52:	b110      	cbz	r0, 800cb5a <_dtoa_r+0x67a>
 800cb54:	f018 0f01 	tst.w	r8, #1
 800cb58:	d10f      	bne.n	800cb7a <_dtoa_r+0x69a>
 800cb5a:	9904      	ldr	r1, [sp, #16]
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f000 fc9f 	bl	800d4a0 <_Bfree>
 800cb62:	2300      	movs	r3, #0
 800cb64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb66:	702b      	strb	r3, [r5, #0]
 800cb68:	f10a 0301 	add.w	r3, sl, #1
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f000 8241 	beq.w	800cff8 <_dtoa_r+0xb18>
 800cb76:	601d      	str	r5, [r3, #0]
 800cb78:	e23e      	b.n	800cff8 <_dtoa_r+0xb18>
 800cb7a:	f8cd a020 	str.w	sl, [sp, #32]
 800cb7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cb82:	2a39      	cmp	r2, #57	; 0x39
 800cb84:	f105 33ff 	add.w	r3, r5, #4294967295
 800cb88:	d108      	bne.n	800cb9c <_dtoa_r+0x6bc>
 800cb8a:	459b      	cmp	fp, r3
 800cb8c:	d10a      	bne.n	800cba4 <_dtoa_r+0x6c4>
 800cb8e:	9b08      	ldr	r3, [sp, #32]
 800cb90:	3301      	adds	r3, #1
 800cb92:	9308      	str	r3, [sp, #32]
 800cb94:	2330      	movs	r3, #48	; 0x30
 800cb96:	f88b 3000 	strb.w	r3, [fp]
 800cb9a:	465b      	mov	r3, fp
 800cb9c:	781a      	ldrb	r2, [r3, #0]
 800cb9e:	3201      	adds	r2, #1
 800cba0:	701a      	strb	r2, [r3, #0]
 800cba2:	e78c      	b.n	800cabe <_dtoa_r+0x5de>
 800cba4:	461d      	mov	r5, r3
 800cba6:	e7ea      	b.n	800cb7e <_dtoa_r+0x69e>
 800cba8:	2200      	movs	r2, #0
 800cbaa:	4b9b      	ldr	r3, [pc, #620]	; (800ce18 <_dtoa_r+0x938>)
 800cbac:	f7f3 fd24 	bl	80005f8 <__aeabi_dmul>
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	460f      	mov	r7, r1
 800cbb8:	f7f3 ff86 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d09a      	beq.n	800caf6 <_dtoa_r+0x616>
 800cbc0:	e7cb      	b.n	800cb5a <_dtoa_r+0x67a>
 800cbc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbc4:	2a00      	cmp	r2, #0
 800cbc6:	f000 808b 	beq.w	800cce0 <_dtoa_r+0x800>
 800cbca:	9a06      	ldr	r2, [sp, #24]
 800cbcc:	2a01      	cmp	r2, #1
 800cbce:	dc6e      	bgt.n	800ccae <_dtoa_r+0x7ce>
 800cbd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cbd2:	2a00      	cmp	r2, #0
 800cbd4:	d067      	beq.n	800cca6 <_dtoa_r+0x7c6>
 800cbd6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cbda:	9f07      	ldr	r7, [sp, #28]
 800cbdc:	9d05      	ldr	r5, [sp, #20]
 800cbde:	9a05      	ldr	r2, [sp, #20]
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	441a      	add	r2, r3
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	9205      	str	r2, [sp, #20]
 800cbe8:	4498      	add	r8, r3
 800cbea:	f000 fcf9 	bl	800d5e0 <__i2b>
 800cbee:	4606      	mov	r6, r0
 800cbf0:	2d00      	cmp	r5, #0
 800cbf2:	dd0c      	ble.n	800cc0e <_dtoa_r+0x72e>
 800cbf4:	f1b8 0f00 	cmp.w	r8, #0
 800cbf8:	dd09      	ble.n	800cc0e <_dtoa_r+0x72e>
 800cbfa:	4545      	cmp	r5, r8
 800cbfc:	9a05      	ldr	r2, [sp, #20]
 800cbfe:	462b      	mov	r3, r5
 800cc00:	bfa8      	it	ge
 800cc02:	4643      	movge	r3, r8
 800cc04:	1ad2      	subs	r2, r2, r3
 800cc06:	9205      	str	r2, [sp, #20]
 800cc08:	1aed      	subs	r5, r5, r3
 800cc0a:	eba8 0803 	sub.w	r8, r8, r3
 800cc0e:	9b07      	ldr	r3, [sp, #28]
 800cc10:	b1eb      	cbz	r3, 800cc4e <_dtoa_r+0x76e>
 800cc12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d067      	beq.n	800cce8 <_dtoa_r+0x808>
 800cc18:	b18f      	cbz	r7, 800cc3e <_dtoa_r+0x75e>
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	463a      	mov	r2, r7
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f000 fd7e 	bl	800d720 <__pow5mult>
 800cc24:	9a04      	ldr	r2, [sp, #16]
 800cc26:	4601      	mov	r1, r0
 800cc28:	4606      	mov	r6, r0
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 fce1 	bl	800d5f2 <__multiply>
 800cc30:	9904      	ldr	r1, [sp, #16]
 800cc32:	9008      	str	r0, [sp, #32]
 800cc34:	4620      	mov	r0, r4
 800cc36:	f000 fc33 	bl	800d4a0 <_Bfree>
 800cc3a:	9b08      	ldr	r3, [sp, #32]
 800cc3c:	9304      	str	r3, [sp, #16]
 800cc3e:	9b07      	ldr	r3, [sp, #28]
 800cc40:	1bda      	subs	r2, r3, r7
 800cc42:	d004      	beq.n	800cc4e <_dtoa_r+0x76e>
 800cc44:	9904      	ldr	r1, [sp, #16]
 800cc46:	4620      	mov	r0, r4
 800cc48:	f000 fd6a 	bl	800d720 <__pow5mult>
 800cc4c:	9004      	str	r0, [sp, #16]
 800cc4e:	2101      	movs	r1, #1
 800cc50:	4620      	mov	r0, r4
 800cc52:	f000 fcc5 	bl	800d5e0 <__i2b>
 800cc56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc58:	4607      	mov	r7, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 81d0 	beq.w	800d000 <_dtoa_r+0xb20>
 800cc60:	461a      	mov	r2, r3
 800cc62:	4601      	mov	r1, r0
 800cc64:	4620      	mov	r0, r4
 800cc66:	f000 fd5b 	bl	800d720 <__pow5mult>
 800cc6a:	9b06      	ldr	r3, [sp, #24]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	4607      	mov	r7, r0
 800cc70:	dc40      	bgt.n	800ccf4 <_dtoa_r+0x814>
 800cc72:	9b00      	ldr	r3, [sp, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d139      	bne.n	800ccec <_dtoa_r+0x80c>
 800cc78:	9b01      	ldr	r3, [sp, #4]
 800cc7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d136      	bne.n	800ccf0 <_dtoa_r+0x810>
 800cc82:	9b01      	ldr	r3, [sp, #4]
 800cc84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc88:	0d1b      	lsrs	r3, r3, #20
 800cc8a:	051b      	lsls	r3, r3, #20
 800cc8c:	b12b      	cbz	r3, 800cc9a <_dtoa_r+0x7ba>
 800cc8e:	9b05      	ldr	r3, [sp, #20]
 800cc90:	3301      	adds	r3, #1
 800cc92:	9305      	str	r3, [sp, #20]
 800cc94:	f108 0801 	add.w	r8, r8, #1
 800cc98:	2301      	movs	r3, #1
 800cc9a:	9307      	str	r3, [sp, #28]
 800cc9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d12a      	bne.n	800ccf8 <_dtoa_r+0x818>
 800cca2:	2001      	movs	r0, #1
 800cca4:	e030      	b.n	800cd08 <_dtoa_r+0x828>
 800cca6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cca8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ccac:	e795      	b.n	800cbda <_dtoa_r+0x6fa>
 800ccae:	9b07      	ldr	r3, [sp, #28]
 800ccb0:	f109 37ff 	add.w	r7, r9, #4294967295
 800ccb4:	42bb      	cmp	r3, r7
 800ccb6:	bfbf      	itttt	lt
 800ccb8:	9b07      	ldrlt	r3, [sp, #28]
 800ccba:	9707      	strlt	r7, [sp, #28]
 800ccbc:	1afa      	sublt	r2, r7, r3
 800ccbe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ccc0:	bfbb      	ittet	lt
 800ccc2:	189b      	addlt	r3, r3, r2
 800ccc4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ccc6:	1bdf      	subge	r7, r3, r7
 800ccc8:	2700      	movlt	r7, #0
 800ccca:	f1b9 0f00 	cmp.w	r9, #0
 800ccce:	bfb5      	itete	lt
 800ccd0:	9b05      	ldrlt	r3, [sp, #20]
 800ccd2:	9d05      	ldrge	r5, [sp, #20]
 800ccd4:	eba3 0509 	sublt.w	r5, r3, r9
 800ccd8:	464b      	movge	r3, r9
 800ccda:	bfb8      	it	lt
 800ccdc:	2300      	movlt	r3, #0
 800ccde:	e77e      	b.n	800cbde <_dtoa_r+0x6fe>
 800cce0:	9f07      	ldr	r7, [sp, #28]
 800cce2:	9d05      	ldr	r5, [sp, #20]
 800cce4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cce6:	e783      	b.n	800cbf0 <_dtoa_r+0x710>
 800cce8:	9a07      	ldr	r2, [sp, #28]
 800ccea:	e7ab      	b.n	800cc44 <_dtoa_r+0x764>
 800ccec:	2300      	movs	r3, #0
 800ccee:	e7d4      	b.n	800cc9a <_dtoa_r+0x7ba>
 800ccf0:	9b00      	ldr	r3, [sp, #0]
 800ccf2:	e7d2      	b.n	800cc9a <_dtoa_r+0x7ba>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	9307      	str	r3, [sp, #28]
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ccfe:	6918      	ldr	r0, [r3, #16]
 800cd00:	f000 fc20 	bl	800d544 <__hi0bits>
 800cd04:	f1c0 0020 	rsb	r0, r0, #32
 800cd08:	4440      	add	r0, r8
 800cd0a:	f010 001f 	ands.w	r0, r0, #31
 800cd0e:	d047      	beq.n	800cda0 <_dtoa_r+0x8c0>
 800cd10:	f1c0 0320 	rsb	r3, r0, #32
 800cd14:	2b04      	cmp	r3, #4
 800cd16:	dd3b      	ble.n	800cd90 <_dtoa_r+0x8b0>
 800cd18:	9b05      	ldr	r3, [sp, #20]
 800cd1a:	f1c0 001c 	rsb	r0, r0, #28
 800cd1e:	4403      	add	r3, r0
 800cd20:	9305      	str	r3, [sp, #20]
 800cd22:	4405      	add	r5, r0
 800cd24:	4480      	add	r8, r0
 800cd26:	9b05      	ldr	r3, [sp, #20]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	dd05      	ble.n	800cd38 <_dtoa_r+0x858>
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	9904      	ldr	r1, [sp, #16]
 800cd30:	4620      	mov	r0, r4
 800cd32:	f000 fd43 	bl	800d7bc <__lshift>
 800cd36:	9004      	str	r0, [sp, #16]
 800cd38:	f1b8 0f00 	cmp.w	r8, #0
 800cd3c:	dd05      	ble.n	800cd4a <_dtoa_r+0x86a>
 800cd3e:	4639      	mov	r1, r7
 800cd40:	4642      	mov	r2, r8
 800cd42:	4620      	mov	r0, r4
 800cd44:	f000 fd3a 	bl	800d7bc <__lshift>
 800cd48:	4607      	mov	r7, r0
 800cd4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd4c:	b353      	cbz	r3, 800cda4 <_dtoa_r+0x8c4>
 800cd4e:	4639      	mov	r1, r7
 800cd50:	9804      	ldr	r0, [sp, #16]
 800cd52:	f000 fd87 	bl	800d864 <__mcmp>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	da24      	bge.n	800cda4 <_dtoa_r+0x8c4>
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	220a      	movs	r2, #10
 800cd5e:	9904      	ldr	r1, [sp, #16]
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 fbb4 	bl	800d4ce <__multadd>
 800cd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd68:	9004      	str	r0, [sp, #16]
 800cd6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f000 814d 	beq.w	800d00e <_dtoa_r+0xb2e>
 800cd74:	2300      	movs	r3, #0
 800cd76:	4631      	mov	r1, r6
 800cd78:	220a      	movs	r2, #10
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f000 fba7 	bl	800d4ce <__multadd>
 800cd80:	9b02      	ldr	r3, [sp, #8]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	4606      	mov	r6, r0
 800cd86:	dc4f      	bgt.n	800ce28 <_dtoa_r+0x948>
 800cd88:	9b06      	ldr	r3, [sp, #24]
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	dd4c      	ble.n	800ce28 <_dtoa_r+0x948>
 800cd8e:	e011      	b.n	800cdb4 <_dtoa_r+0x8d4>
 800cd90:	d0c9      	beq.n	800cd26 <_dtoa_r+0x846>
 800cd92:	9a05      	ldr	r2, [sp, #20]
 800cd94:	331c      	adds	r3, #28
 800cd96:	441a      	add	r2, r3
 800cd98:	9205      	str	r2, [sp, #20]
 800cd9a:	441d      	add	r5, r3
 800cd9c:	4498      	add	r8, r3
 800cd9e:	e7c2      	b.n	800cd26 <_dtoa_r+0x846>
 800cda0:	4603      	mov	r3, r0
 800cda2:	e7f6      	b.n	800cd92 <_dtoa_r+0x8b2>
 800cda4:	f1b9 0f00 	cmp.w	r9, #0
 800cda8:	dc38      	bgt.n	800ce1c <_dtoa_r+0x93c>
 800cdaa:	9b06      	ldr	r3, [sp, #24]
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	dd35      	ble.n	800ce1c <_dtoa_r+0x93c>
 800cdb0:	f8cd 9008 	str.w	r9, [sp, #8]
 800cdb4:	9b02      	ldr	r3, [sp, #8]
 800cdb6:	b963      	cbnz	r3, 800cdd2 <_dtoa_r+0x8f2>
 800cdb8:	4639      	mov	r1, r7
 800cdba:	2205      	movs	r2, #5
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f000 fb86 	bl	800d4ce <__multadd>
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	9804      	ldr	r0, [sp, #16]
 800cdc8:	f000 fd4c 	bl	800d864 <__mcmp>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	f73f adcc 	bgt.w	800c96a <_dtoa_r+0x48a>
 800cdd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdd4:	465d      	mov	r5, fp
 800cdd6:	ea6f 0a03 	mvn.w	sl, r3
 800cdda:	f04f 0900 	mov.w	r9, #0
 800cdde:	4639      	mov	r1, r7
 800cde0:	4620      	mov	r0, r4
 800cde2:	f000 fb5d 	bl	800d4a0 <_Bfree>
 800cde6:	2e00      	cmp	r6, #0
 800cde8:	f43f aeb7 	beq.w	800cb5a <_dtoa_r+0x67a>
 800cdec:	f1b9 0f00 	cmp.w	r9, #0
 800cdf0:	d005      	beq.n	800cdfe <_dtoa_r+0x91e>
 800cdf2:	45b1      	cmp	r9, r6
 800cdf4:	d003      	beq.n	800cdfe <_dtoa_r+0x91e>
 800cdf6:	4649      	mov	r1, r9
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f000 fb51 	bl	800d4a0 <_Bfree>
 800cdfe:	4631      	mov	r1, r6
 800ce00:	4620      	mov	r0, r4
 800ce02:	f000 fb4d 	bl	800d4a0 <_Bfree>
 800ce06:	e6a8      	b.n	800cb5a <_dtoa_r+0x67a>
 800ce08:	2700      	movs	r7, #0
 800ce0a:	463e      	mov	r6, r7
 800ce0c:	e7e1      	b.n	800cdd2 <_dtoa_r+0x8f2>
 800ce0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ce12:	463e      	mov	r6, r7
 800ce14:	e5a9      	b.n	800c96a <_dtoa_r+0x48a>
 800ce16:	bf00      	nop
 800ce18:	40240000 	.word	0x40240000
 800ce1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce1e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 80fa 	beq.w	800d01c <_dtoa_r+0xb3c>
 800ce28:	2d00      	cmp	r5, #0
 800ce2a:	dd05      	ble.n	800ce38 <_dtoa_r+0x958>
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	462a      	mov	r2, r5
 800ce30:	4620      	mov	r0, r4
 800ce32:	f000 fcc3 	bl	800d7bc <__lshift>
 800ce36:	4606      	mov	r6, r0
 800ce38:	9b07      	ldr	r3, [sp, #28]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d04c      	beq.n	800ced8 <_dtoa_r+0x9f8>
 800ce3e:	6871      	ldr	r1, [r6, #4]
 800ce40:	4620      	mov	r0, r4
 800ce42:	f000 faf9 	bl	800d438 <_Balloc>
 800ce46:	6932      	ldr	r2, [r6, #16]
 800ce48:	3202      	adds	r2, #2
 800ce4a:	4605      	mov	r5, r0
 800ce4c:	0092      	lsls	r2, r2, #2
 800ce4e:	f106 010c 	add.w	r1, r6, #12
 800ce52:	300c      	adds	r0, #12
 800ce54:	f7fe fcdc 	bl	800b810 <memcpy>
 800ce58:	2201      	movs	r2, #1
 800ce5a:	4629      	mov	r1, r5
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	f000 fcad 	bl	800d7bc <__lshift>
 800ce62:	9b00      	ldr	r3, [sp, #0]
 800ce64:	f8cd b014 	str.w	fp, [sp, #20]
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	46b1      	mov	r9, r6
 800ce6e:	9307      	str	r3, [sp, #28]
 800ce70:	4606      	mov	r6, r0
 800ce72:	4639      	mov	r1, r7
 800ce74:	9804      	ldr	r0, [sp, #16]
 800ce76:	f7ff faa7 	bl	800c3c8 <quorem>
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ce82:	9804      	ldr	r0, [sp, #16]
 800ce84:	f000 fcee 	bl	800d864 <__mcmp>
 800ce88:	4632      	mov	r2, r6
 800ce8a:	9000      	str	r0, [sp, #0]
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 fd02 	bl	800d898 <__mdiff>
 800ce94:	68c3      	ldr	r3, [r0, #12]
 800ce96:	4602      	mov	r2, r0
 800ce98:	bb03      	cbnz	r3, 800cedc <_dtoa_r+0x9fc>
 800ce9a:	4601      	mov	r1, r0
 800ce9c:	9008      	str	r0, [sp, #32]
 800ce9e:	9804      	ldr	r0, [sp, #16]
 800cea0:	f000 fce0 	bl	800d864 <__mcmp>
 800cea4:	9a08      	ldr	r2, [sp, #32]
 800cea6:	4603      	mov	r3, r0
 800cea8:	4611      	mov	r1, r2
 800ceaa:	4620      	mov	r0, r4
 800ceac:	9308      	str	r3, [sp, #32]
 800ceae:	f000 faf7 	bl	800d4a0 <_Bfree>
 800ceb2:	9b08      	ldr	r3, [sp, #32]
 800ceb4:	b9a3      	cbnz	r3, 800cee0 <_dtoa_r+0xa00>
 800ceb6:	9a06      	ldr	r2, [sp, #24]
 800ceb8:	b992      	cbnz	r2, 800cee0 <_dtoa_r+0xa00>
 800ceba:	9a07      	ldr	r2, [sp, #28]
 800cebc:	b982      	cbnz	r2, 800cee0 <_dtoa_r+0xa00>
 800cebe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cec2:	d029      	beq.n	800cf18 <_dtoa_r+0xa38>
 800cec4:	9b00      	ldr	r3, [sp, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	dd01      	ble.n	800cece <_dtoa_r+0x9ee>
 800ceca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cece:	9b05      	ldr	r3, [sp, #20]
 800ced0:	1c5d      	adds	r5, r3, #1
 800ced2:	f883 8000 	strb.w	r8, [r3]
 800ced6:	e782      	b.n	800cdde <_dtoa_r+0x8fe>
 800ced8:	4630      	mov	r0, r6
 800ceda:	e7c2      	b.n	800ce62 <_dtoa_r+0x982>
 800cedc:	2301      	movs	r3, #1
 800cede:	e7e3      	b.n	800cea8 <_dtoa_r+0x9c8>
 800cee0:	9a00      	ldr	r2, [sp, #0]
 800cee2:	2a00      	cmp	r2, #0
 800cee4:	db04      	blt.n	800cef0 <_dtoa_r+0xa10>
 800cee6:	d125      	bne.n	800cf34 <_dtoa_r+0xa54>
 800cee8:	9a06      	ldr	r2, [sp, #24]
 800ceea:	bb1a      	cbnz	r2, 800cf34 <_dtoa_r+0xa54>
 800ceec:	9a07      	ldr	r2, [sp, #28]
 800ceee:	bb0a      	cbnz	r2, 800cf34 <_dtoa_r+0xa54>
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	ddec      	ble.n	800cece <_dtoa_r+0x9ee>
 800cef4:	2201      	movs	r2, #1
 800cef6:	9904      	ldr	r1, [sp, #16]
 800cef8:	4620      	mov	r0, r4
 800cefa:	f000 fc5f 	bl	800d7bc <__lshift>
 800cefe:	4639      	mov	r1, r7
 800cf00:	9004      	str	r0, [sp, #16]
 800cf02:	f000 fcaf 	bl	800d864 <__mcmp>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	dc03      	bgt.n	800cf12 <_dtoa_r+0xa32>
 800cf0a:	d1e0      	bne.n	800cece <_dtoa_r+0x9ee>
 800cf0c:	f018 0f01 	tst.w	r8, #1
 800cf10:	d0dd      	beq.n	800cece <_dtoa_r+0x9ee>
 800cf12:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cf16:	d1d8      	bne.n	800ceca <_dtoa_r+0x9ea>
 800cf18:	9b05      	ldr	r3, [sp, #20]
 800cf1a:	9a05      	ldr	r2, [sp, #20]
 800cf1c:	1c5d      	adds	r5, r3, #1
 800cf1e:	2339      	movs	r3, #57	; 0x39
 800cf20:	7013      	strb	r3, [r2, #0]
 800cf22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cf26:	2b39      	cmp	r3, #57	; 0x39
 800cf28:	f105 32ff 	add.w	r2, r5, #4294967295
 800cf2c:	d04f      	beq.n	800cfce <_dtoa_r+0xaee>
 800cf2e:	3301      	adds	r3, #1
 800cf30:	7013      	strb	r3, [r2, #0]
 800cf32:	e754      	b.n	800cdde <_dtoa_r+0x8fe>
 800cf34:	9a05      	ldr	r2, [sp, #20]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f102 0501 	add.w	r5, r2, #1
 800cf3c:	dd06      	ble.n	800cf4c <_dtoa_r+0xa6c>
 800cf3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cf42:	d0e9      	beq.n	800cf18 <_dtoa_r+0xa38>
 800cf44:	f108 0801 	add.w	r8, r8, #1
 800cf48:	9b05      	ldr	r3, [sp, #20]
 800cf4a:	e7c2      	b.n	800ced2 <_dtoa_r+0x9f2>
 800cf4c:	9a02      	ldr	r2, [sp, #8]
 800cf4e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800cf52:	eba5 030b 	sub.w	r3, r5, fp
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d021      	beq.n	800cf9e <_dtoa_r+0xabe>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	220a      	movs	r2, #10
 800cf5e:	9904      	ldr	r1, [sp, #16]
 800cf60:	4620      	mov	r0, r4
 800cf62:	f000 fab4 	bl	800d4ce <__multadd>
 800cf66:	45b1      	cmp	r9, r6
 800cf68:	9004      	str	r0, [sp, #16]
 800cf6a:	f04f 0300 	mov.w	r3, #0
 800cf6e:	f04f 020a 	mov.w	r2, #10
 800cf72:	4649      	mov	r1, r9
 800cf74:	4620      	mov	r0, r4
 800cf76:	d105      	bne.n	800cf84 <_dtoa_r+0xaa4>
 800cf78:	f000 faa9 	bl	800d4ce <__multadd>
 800cf7c:	4681      	mov	r9, r0
 800cf7e:	4606      	mov	r6, r0
 800cf80:	9505      	str	r5, [sp, #20]
 800cf82:	e776      	b.n	800ce72 <_dtoa_r+0x992>
 800cf84:	f000 faa3 	bl	800d4ce <__multadd>
 800cf88:	4631      	mov	r1, r6
 800cf8a:	4681      	mov	r9, r0
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	220a      	movs	r2, #10
 800cf90:	4620      	mov	r0, r4
 800cf92:	f000 fa9c 	bl	800d4ce <__multadd>
 800cf96:	4606      	mov	r6, r0
 800cf98:	e7f2      	b.n	800cf80 <_dtoa_r+0xaa0>
 800cf9a:	f04f 0900 	mov.w	r9, #0
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	9904      	ldr	r1, [sp, #16]
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f000 fc0a 	bl	800d7bc <__lshift>
 800cfa8:	4639      	mov	r1, r7
 800cfaa:	9004      	str	r0, [sp, #16]
 800cfac:	f000 fc5a 	bl	800d864 <__mcmp>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	dcb6      	bgt.n	800cf22 <_dtoa_r+0xa42>
 800cfb4:	d102      	bne.n	800cfbc <_dtoa_r+0xadc>
 800cfb6:	f018 0f01 	tst.w	r8, #1
 800cfba:	d1b2      	bne.n	800cf22 <_dtoa_r+0xa42>
 800cfbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cfc0:	2b30      	cmp	r3, #48	; 0x30
 800cfc2:	f105 32ff 	add.w	r2, r5, #4294967295
 800cfc6:	f47f af0a 	bne.w	800cdde <_dtoa_r+0x8fe>
 800cfca:	4615      	mov	r5, r2
 800cfcc:	e7f6      	b.n	800cfbc <_dtoa_r+0xadc>
 800cfce:	4593      	cmp	fp, r2
 800cfd0:	d105      	bne.n	800cfde <_dtoa_r+0xafe>
 800cfd2:	2331      	movs	r3, #49	; 0x31
 800cfd4:	f10a 0a01 	add.w	sl, sl, #1
 800cfd8:	f88b 3000 	strb.w	r3, [fp]
 800cfdc:	e6ff      	b.n	800cdde <_dtoa_r+0x8fe>
 800cfde:	4615      	mov	r5, r2
 800cfe0:	e79f      	b.n	800cf22 <_dtoa_r+0xa42>
 800cfe2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d048 <_dtoa_r+0xb68>
 800cfe6:	e007      	b.n	800cff8 <_dtoa_r+0xb18>
 800cfe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d04c <_dtoa_r+0xb6c>
 800cfee:	b11b      	cbz	r3, 800cff8 <_dtoa_r+0xb18>
 800cff0:	f10b 0308 	add.w	r3, fp, #8
 800cff4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cff6:	6013      	str	r3, [r2, #0]
 800cff8:	4658      	mov	r0, fp
 800cffa:	b017      	add	sp, #92	; 0x5c
 800cffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d000:	9b06      	ldr	r3, [sp, #24]
 800d002:	2b01      	cmp	r3, #1
 800d004:	f77f ae35 	ble.w	800cc72 <_dtoa_r+0x792>
 800d008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d00a:	9307      	str	r3, [sp, #28]
 800d00c:	e649      	b.n	800cca2 <_dtoa_r+0x7c2>
 800d00e:	9b02      	ldr	r3, [sp, #8]
 800d010:	2b00      	cmp	r3, #0
 800d012:	dc03      	bgt.n	800d01c <_dtoa_r+0xb3c>
 800d014:	9b06      	ldr	r3, [sp, #24]
 800d016:	2b02      	cmp	r3, #2
 800d018:	f73f aecc 	bgt.w	800cdb4 <_dtoa_r+0x8d4>
 800d01c:	465d      	mov	r5, fp
 800d01e:	4639      	mov	r1, r7
 800d020:	9804      	ldr	r0, [sp, #16]
 800d022:	f7ff f9d1 	bl	800c3c8 <quorem>
 800d026:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d02a:	f805 8b01 	strb.w	r8, [r5], #1
 800d02e:	9a02      	ldr	r2, [sp, #8]
 800d030:	eba5 030b 	sub.w	r3, r5, fp
 800d034:	429a      	cmp	r2, r3
 800d036:	ddb0      	ble.n	800cf9a <_dtoa_r+0xaba>
 800d038:	2300      	movs	r3, #0
 800d03a:	220a      	movs	r2, #10
 800d03c:	9904      	ldr	r1, [sp, #16]
 800d03e:	4620      	mov	r0, r4
 800d040:	f000 fa45 	bl	800d4ce <__multadd>
 800d044:	9004      	str	r0, [sp, #16]
 800d046:	e7ea      	b.n	800d01e <_dtoa_r+0xb3e>
 800d048:	0800e894 	.word	0x0800e894
 800d04c:	0800e8b8 	.word	0x0800e8b8

0800d050 <__sflush_r>:
 800d050:	898a      	ldrh	r2, [r1, #12]
 800d052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d056:	4605      	mov	r5, r0
 800d058:	0710      	lsls	r0, r2, #28
 800d05a:	460c      	mov	r4, r1
 800d05c:	d458      	bmi.n	800d110 <__sflush_r+0xc0>
 800d05e:	684b      	ldr	r3, [r1, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	dc05      	bgt.n	800d070 <__sflush_r+0x20>
 800d064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d066:	2b00      	cmp	r3, #0
 800d068:	dc02      	bgt.n	800d070 <__sflush_r+0x20>
 800d06a:	2000      	movs	r0, #0
 800d06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d072:	2e00      	cmp	r6, #0
 800d074:	d0f9      	beq.n	800d06a <__sflush_r+0x1a>
 800d076:	2300      	movs	r3, #0
 800d078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d07c:	682f      	ldr	r7, [r5, #0]
 800d07e:	6a21      	ldr	r1, [r4, #32]
 800d080:	602b      	str	r3, [r5, #0]
 800d082:	d032      	beq.n	800d0ea <__sflush_r+0x9a>
 800d084:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d086:	89a3      	ldrh	r3, [r4, #12]
 800d088:	075a      	lsls	r2, r3, #29
 800d08a:	d505      	bpl.n	800d098 <__sflush_r+0x48>
 800d08c:	6863      	ldr	r3, [r4, #4]
 800d08e:	1ac0      	subs	r0, r0, r3
 800d090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d092:	b10b      	cbz	r3, 800d098 <__sflush_r+0x48>
 800d094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d096:	1ac0      	subs	r0, r0, r3
 800d098:	2300      	movs	r3, #0
 800d09a:	4602      	mov	r2, r0
 800d09c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d09e:	6a21      	ldr	r1, [r4, #32]
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	47b0      	blx	r6
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	89a3      	ldrh	r3, [r4, #12]
 800d0a8:	d106      	bne.n	800d0b8 <__sflush_r+0x68>
 800d0aa:	6829      	ldr	r1, [r5, #0]
 800d0ac:	291d      	cmp	r1, #29
 800d0ae:	d848      	bhi.n	800d142 <__sflush_r+0xf2>
 800d0b0:	4a29      	ldr	r2, [pc, #164]	; (800d158 <__sflush_r+0x108>)
 800d0b2:	40ca      	lsrs	r2, r1
 800d0b4:	07d6      	lsls	r6, r2, #31
 800d0b6:	d544      	bpl.n	800d142 <__sflush_r+0xf2>
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	6062      	str	r2, [r4, #4]
 800d0bc:	04d9      	lsls	r1, r3, #19
 800d0be:	6922      	ldr	r2, [r4, #16]
 800d0c0:	6022      	str	r2, [r4, #0]
 800d0c2:	d504      	bpl.n	800d0ce <__sflush_r+0x7e>
 800d0c4:	1c42      	adds	r2, r0, #1
 800d0c6:	d101      	bne.n	800d0cc <__sflush_r+0x7c>
 800d0c8:	682b      	ldr	r3, [r5, #0]
 800d0ca:	b903      	cbnz	r3, 800d0ce <__sflush_r+0x7e>
 800d0cc:	6560      	str	r0, [r4, #84]	; 0x54
 800d0ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0d0:	602f      	str	r7, [r5, #0]
 800d0d2:	2900      	cmp	r1, #0
 800d0d4:	d0c9      	beq.n	800d06a <__sflush_r+0x1a>
 800d0d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0da:	4299      	cmp	r1, r3
 800d0dc:	d002      	beq.n	800d0e4 <__sflush_r+0x94>
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f000 fc94 	bl	800da0c <_free_r>
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	6360      	str	r0, [r4, #52]	; 0x34
 800d0e8:	e7c0      	b.n	800d06c <__sflush_r+0x1c>
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	47b0      	blx	r6
 800d0f0:	1c41      	adds	r1, r0, #1
 800d0f2:	d1c8      	bne.n	800d086 <__sflush_r+0x36>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d0c5      	beq.n	800d086 <__sflush_r+0x36>
 800d0fa:	2b1d      	cmp	r3, #29
 800d0fc:	d001      	beq.n	800d102 <__sflush_r+0xb2>
 800d0fe:	2b16      	cmp	r3, #22
 800d100:	d101      	bne.n	800d106 <__sflush_r+0xb6>
 800d102:	602f      	str	r7, [r5, #0]
 800d104:	e7b1      	b.n	800d06a <__sflush_r+0x1a>
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d10c:	81a3      	strh	r3, [r4, #12]
 800d10e:	e7ad      	b.n	800d06c <__sflush_r+0x1c>
 800d110:	690f      	ldr	r7, [r1, #16]
 800d112:	2f00      	cmp	r7, #0
 800d114:	d0a9      	beq.n	800d06a <__sflush_r+0x1a>
 800d116:	0793      	lsls	r3, r2, #30
 800d118:	680e      	ldr	r6, [r1, #0]
 800d11a:	bf08      	it	eq
 800d11c:	694b      	ldreq	r3, [r1, #20]
 800d11e:	600f      	str	r7, [r1, #0]
 800d120:	bf18      	it	ne
 800d122:	2300      	movne	r3, #0
 800d124:	eba6 0807 	sub.w	r8, r6, r7
 800d128:	608b      	str	r3, [r1, #8]
 800d12a:	f1b8 0f00 	cmp.w	r8, #0
 800d12e:	dd9c      	ble.n	800d06a <__sflush_r+0x1a>
 800d130:	4643      	mov	r3, r8
 800d132:	463a      	mov	r2, r7
 800d134:	6a21      	ldr	r1, [r4, #32]
 800d136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d138:	4628      	mov	r0, r5
 800d13a:	47b0      	blx	r6
 800d13c:	2800      	cmp	r0, #0
 800d13e:	dc06      	bgt.n	800d14e <__sflush_r+0xfe>
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d146:	81a3      	strh	r3, [r4, #12]
 800d148:	f04f 30ff 	mov.w	r0, #4294967295
 800d14c:	e78e      	b.n	800d06c <__sflush_r+0x1c>
 800d14e:	4407      	add	r7, r0
 800d150:	eba8 0800 	sub.w	r8, r8, r0
 800d154:	e7e9      	b.n	800d12a <__sflush_r+0xda>
 800d156:	bf00      	nop
 800d158:	20400001 	.word	0x20400001

0800d15c <_fflush_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	690b      	ldr	r3, [r1, #16]
 800d160:	4605      	mov	r5, r0
 800d162:	460c      	mov	r4, r1
 800d164:	b1db      	cbz	r3, 800d19e <_fflush_r+0x42>
 800d166:	b118      	cbz	r0, 800d170 <_fflush_r+0x14>
 800d168:	6983      	ldr	r3, [r0, #24]
 800d16a:	b90b      	cbnz	r3, 800d170 <_fflush_r+0x14>
 800d16c:	f000 f860 	bl	800d230 <__sinit>
 800d170:	4b0c      	ldr	r3, [pc, #48]	; (800d1a4 <_fflush_r+0x48>)
 800d172:	429c      	cmp	r4, r3
 800d174:	d109      	bne.n	800d18a <_fflush_r+0x2e>
 800d176:	686c      	ldr	r4, [r5, #4]
 800d178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d17c:	b17b      	cbz	r3, 800d19e <_fflush_r+0x42>
 800d17e:	4621      	mov	r1, r4
 800d180:	4628      	mov	r0, r5
 800d182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d186:	f7ff bf63 	b.w	800d050 <__sflush_r>
 800d18a:	4b07      	ldr	r3, [pc, #28]	; (800d1a8 <_fflush_r+0x4c>)
 800d18c:	429c      	cmp	r4, r3
 800d18e:	d101      	bne.n	800d194 <_fflush_r+0x38>
 800d190:	68ac      	ldr	r4, [r5, #8]
 800d192:	e7f1      	b.n	800d178 <_fflush_r+0x1c>
 800d194:	4b05      	ldr	r3, [pc, #20]	; (800d1ac <_fflush_r+0x50>)
 800d196:	429c      	cmp	r4, r3
 800d198:	bf08      	it	eq
 800d19a:	68ec      	ldreq	r4, [r5, #12]
 800d19c:	e7ec      	b.n	800d178 <_fflush_r+0x1c>
 800d19e:	2000      	movs	r0, #0
 800d1a0:	bd38      	pop	{r3, r4, r5, pc}
 800d1a2:	bf00      	nop
 800d1a4:	0800e8e8 	.word	0x0800e8e8
 800d1a8:	0800e908 	.word	0x0800e908
 800d1ac:	0800e8c8 	.word	0x0800e8c8

0800d1b0 <std>:
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	b510      	push	{r4, lr}
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	e9c0 3300 	strd	r3, r3, [r0]
 800d1ba:	6083      	str	r3, [r0, #8]
 800d1bc:	8181      	strh	r1, [r0, #12]
 800d1be:	6643      	str	r3, [r0, #100]	; 0x64
 800d1c0:	81c2      	strh	r2, [r0, #14]
 800d1c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1c6:	6183      	str	r3, [r0, #24]
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	2208      	movs	r2, #8
 800d1cc:	305c      	adds	r0, #92	; 0x5c
 800d1ce:	f7fe fb2a 	bl	800b826 <memset>
 800d1d2:	4b05      	ldr	r3, [pc, #20]	; (800d1e8 <std+0x38>)
 800d1d4:	6263      	str	r3, [r4, #36]	; 0x24
 800d1d6:	4b05      	ldr	r3, [pc, #20]	; (800d1ec <std+0x3c>)
 800d1d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1da:	4b05      	ldr	r3, [pc, #20]	; (800d1f0 <std+0x40>)
 800d1dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1de:	4b05      	ldr	r3, [pc, #20]	; (800d1f4 <std+0x44>)
 800d1e0:	6224      	str	r4, [r4, #32]
 800d1e2:	6323      	str	r3, [r4, #48]	; 0x30
 800d1e4:	bd10      	pop	{r4, pc}
 800d1e6:	bf00      	nop
 800d1e8:	0800e0a1 	.word	0x0800e0a1
 800d1ec:	0800e0c3 	.word	0x0800e0c3
 800d1f0:	0800e0fb 	.word	0x0800e0fb
 800d1f4:	0800e11f 	.word	0x0800e11f

0800d1f8 <_cleanup_r>:
 800d1f8:	4901      	ldr	r1, [pc, #4]	; (800d200 <_cleanup_r+0x8>)
 800d1fa:	f000 b885 	b.w	800d308 <_fwalk_reent>
 800d1fe:	bf00      	nop
 800d200:	0800d15d 	.word	0x0800d15d

0800d204 <__sfmoreglue>:
 800d204:	b570      	push	{r4, r5, r6, lr}
 800d206:	1e4a      	subs	r2, r1, #1
 800d208:	2568      	movs	r5, #104	; 0x68
 800d20a:	4355      	muls	r5, r2
 800d20c:	460e      	mov	r6, r1
 800d20e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d212:	f000 fc49 	bl	800daa8 <_malloc_r>
 800d216:	4604      	mov	r4, r0
 800d218:	b140      	cbz	r0, 800d22c <__sfmoreglue+0x28>
 800d21a:	2100      	movs	r1, #0
 800d21c:	e9c0 1600 	strd	r1, r6, [r0]
 800d220:	300c      	adds	r0, #12
 800d222:	60a0      	str	r0, [r4, #8]
 800d224:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d228:	f7fe fafd 	bl	800b826 <memset>
 800d22c:	4620      	mov	r0, r4
 800d22e:	bd70      	pop	{r4, r5, r6, pc}

0800d230 <__sinit>:
 800d230:	6983      	ldr	r3, [r0, #24]
 800d232:	b510      	push	{r4, lr}
 800d234:	4604      	mov	r4, r0
 800d236:	bb33      	cbnz	r3, 800d286 <__sinit+0x56>
 800d238:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d23c:	6503      	str	r3, [r0, #80]	; 0x50
 800d23e:	4b12      	ldr	r3, [pc, #72]	; (800d288 <__sinit+0x58>)
 800d240:	4a12      	ldr	r2, [pc, #72]	; (800d28c <__sinit+0x5c>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6282      	str	r2, [r0, #40]	; 0x28
 800d246:	4298      	cmp	r0, r3
 800d248:	bf04      	itt	eq
 800d24a:	2301      	moveq	r3, #1
 800d24c:	6183      	streq	r3, [r0, #24]
 800d24e:	f000 f81f 	bl	800d290 <__sfp>
 800d252:	6060      	str	r0, [r4, #4]
 800d254:	4620      	mov	r0, r4
 800d256:	f000 f81b 	bl	800d290 <__sfp>
 800d25a:	60a0      	str	r0, [r4, #8]
 800d25c:	4620      	mov	r0, r4
 800d25e:	f000 f817 	bl	800d290 <__sfp>
 800d262:	2200      	movs	r2, #0
 800d264:	60e0      	str	r0, [r4, #12]
 800d266:	2104      	movs	r1, #4
 800d268:	6860      	ldr	r0, [r4, #4]
 800d26a:	f7ff ffa1 	bl	800d1b0 <std>
 800d26e:	2201      	movs	r2, #1
 800d270:	2109      	movs	r1, #9
 800d272:	68a0      	ldr	r0, [r4, #8]
 800d274:	f7ff ff9c 	bl	800d1b0 <std>
 800d278:	2202      	movs	r2, #2
 800d27a:	2112      	movs	r1, #18
 800d27c:	68e0      	ldr	r0, [r4, #12]
 800d27e:	f7ff ff97 	bl	800d1b0 <std>
 800d282:	2301      	movs	r3, #1
 800d284:	61a3      	str	r3, [r4, #24]
 800d286:	bd10      	pop	{r4, pc}
 800d288:	0800e880 	.word	0x0800e880
 800d28c:	0800d1f9 	.word	0x0800d1f9

0800d290 <__sfp>:
 800d290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d292:	4b1b      	ldr	r3, [pc, #108]	; (800d300 <__sfp+0x70>)
 800d294:	681e      	ldr	r6, [r3, #0]
 800d296:	69b3      	ldr	r3, [r6, #24]
 800d298:	4607      	mov	r7, r0
 800d29a:	b913      	cbnz	r3, 800d2a2 <__sfp+0x12>
 800d29c:	4630      	mov	r0, r6
 800d29e:	f7ff ffc7 	bl	800d230 <__sinit>
 800d2a2:	3648      	adds	r6, #72	; 0x48
 800d2a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	d503      	bpl.n	800d2b4 <__sfp+0x24>
 800d2ac:	6833      	ldr	r3, [r6, #0]
 800d2ae:	b133      	cbz	r3, 800d2be <__sfp+0x2e>
 800d2b0:	6836      	ldr	r6, [r6, #0]
 800d2b2:	e7f7      	b.n	800d2a4 <__sfp+0x14>
 800d2b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d2b8:	b16d      	cbz	r5, 800d2d6 <__sfp+0x46>
 800d2ba:	3468      	adds	r4, #104	; 0x68
 800d2bc:	e7f4      	b.n	800d2a8 <__sfp+0x18>
 800d2be:	2104      	movs	r1, #4
 800d2c0:	4638      	mov	r0, r7
 800d2c2:	f7ff ff9f 	bl	800d204 <__sfmoreglue>
 800d2c6:	6030      	str	r0, [r6, #0]
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d1f1      	bne.n	800d2b0 <__sfp+0x20>
 800d2cc:	230c      	movs	r3, #12
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2d6:	4b0b      	ldr	r3, [pc, #44]	; (800d304 <__sfp+0x74>)
 800d2d8:	6665      	str	r5, [r4, #100]	; 0x64
 800d2da:	e9c4 5500 	strd	r5, r5, [r4]
 800d2de:	60a5      	str	r5, [r4, #8]
 800d2e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d2e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d2e8:	2208      	movs	r2, #8
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d2f0:	f7fe fa99 	bl	800b826 <memset>
 800d2f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d2f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d2fc:	e7e9      	b.n	800d2d2 <__sfp+0x42>
 800d2fe:	bf00      	nop
 800d300:	0800e880 	.word	0x0800e880
 800d304:	ffff0001 	.word	0xffff0001

0800d308 <_fwalk_reent>:
 800d308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d30c:	4680      	mov	r8, r0
 800d30e:	4689      	mov	r9, r1
 800d310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d314:	2600      	movs	r6, #0
 800d316:	b914      	cbnz	r4, 800d31e <_fwalk_reent+0x16>
 800d318:	4630      	mov	r0, r6
 800d31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d31e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d322:	3f01      	subs	r7, #1
 800d324:	d501      	bpl.n	800d32a <_fwalk_reent+0x22>
 800d326:	6824      	ldr	r4, [r4, #0]
 800d328:	e7f5      	b.n	800d316 <_fwalk_reent+0xe>
 800d32a:	89ab      	ldrh	r3, [r5, #12]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d907      	bls.n	800d340 <_fwalk_reent+0x38>
 800d330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d334:	3301      	adds	r3, #1
 800d336:	d003      	beq.n	800d340 <_fwalk_reent+0x38>
 800d338:	4629      	mov	r1, r5
 800d33a:	4640      	mov	r0, r8
 800d33c:	47c8      	blx	r9
 800d33e:	4306      	orrs	r6, r0
 800d340:	3568      	adds	r5, #104	; 0x68
 800d342:	e7ee      	b.n	800d322 <_fwalk_reent+0x1a>

0800d344 <_localeconv_r>:
 800d344:	4b04      	ldr	r3, [pc, #16]	; (800d358 <_localeconv_r+0x14>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	6a18      	ldr	r0, [r3, #32]
 800d34a:	4b04      	ldr	r3, [pc, #16]	; (800d35c <_localeconv_r+0x18>)
 800d34c:	2800      	cmp	r0, #0
 800d34e:	bf08      	it	eq
 800d350:	4618      	moveq	r0, r3
 800d352:	30f0      	adds	r0, #240	; 0xf0
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	20000084 	.word	0x20000084
 800d35c:	200000e8 	.word	0x200000e8

0800d360 <__swhatbuf_r>:
 800d360:	b570      	push	{r4, r5, r6, lr}
 800d362:	460e      	mov	r6, r1
 800d364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d368:	2900      	cmp	r1, #0
 800d36a:	b096      	sub	sp, #88	; 0x58
 800d36c:	4614      	mov	r4, r2
 800d36e:	461d      	mov	r5, r3
 800d370:	da07      	bge.n	800d382 <__swhatbuf_r+0x22>
 800d372:	2300      	movs	r3, #0
 800d374:	602b      	str	r3, [r5, #0]
 800d376:	89b3      	ldrh	r3, [r6, #12]
 800d378:	061a      	lsls	r2, r3, #24
 800d37a:	d410      	bmi.n	800d39e <__swhatbuf_r+0x3e>
 800d37c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d380:	e00e      	b.n	800d3a0 <__swhatbuf_r+0x40>
 800d382:	466a      	mov	r2, sp
 800d384:	f000 fef2 	bl	800e16c <_fstat_r>
 800d388:	2800      	cmp	r0, #0
 800d38a:	dbf2      	blt.n	800d372 <__swhatbuf_r+0x12>
 800d38c:	9a01      	ldr	r2, [sp, #4]
 800d38e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d392:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d396:	425a      	negs	r2, r3
 800d398:	415a      	adcs	r2, r3
 800d39a:	602a      	str	r2, [r5, #0]
 800d39c:	e7ee      	b.n	800d37c <__swhatbuf_r+0x1c>
 800d39e:	2340      	movs	r3, #64	; 0x40
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	6023      	str	r3, [r4, #0]
 800d3a4:	b016      	add	sp, #88	; 0x58
 800d3a6:	bd70      	pop	{r4, r5, r6, pc}

0800d3a8 <__smakebuf_r>:
 800d3a8:	898b      	ldrh	r3, [r1, #12]
 800d3aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3ac:	079d      	lsls	r5, r3, #30
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	460c      	mov	r4, r1
 800d3b2:	d507      	bpl.n	800d3c4 <__smakebuf_r+0x1c>
 800d3b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	6123      	str	r3, [r4, #16]
 800d3bc:	2301      	movs	r3, #1
 800d3be:	6163      	str	r3, [r4, #20]
 800d3c0:	b002      	add	sp, #8
 800d3c2:	bd70      	pop	{r4, r5, r6, pc}
 800d3c4:	ab01      	add	r3, sp, #4
 800d3c6:	466a      	mov	r2, sp
 800d3c8:	f7ff ffca 	bl	800d360 <__swhatbuf_r>
 800d3cc:	9900      	ldr	r1, [sp, #0]
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f000 fb69 	bl	800daa8 <_malloc_r>
 800d3d6:	b948      	cbnz	r0, 800d3ec <__smakebuf_r+0x44>
 800d3d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3dc:	059a      	lsls	r2, r3, #22
 800d3de:	d4ef      	bmi.n	800d3c0 <__smakebuf_r+0x18>
 800d3e0:	f023 0303 	bic.w	r3, r3, #3
 800d3e4:	f043 0302 	orr.w	r3, r3, #2
 800d3e8:	81a3      	strh	r3, [r4, #12]
 800d3ea:	e7e3      	b.n	800d3b4 <__smakebuf_r+0xc>
 800d3ec:	4b0d      	ldr	r3, [pc, #52]	; (800d424 <__smakebuf_r+0x7c>)
 800d3ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	6020      	str	r0, [r4, #0]
 800d3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	9b00      	ldr	r3, [sp, #0]
 800d3fc:	6163      	str	r3, [r4, #20]
 800d3fe:	9b01      	ldr	r3, [sp, #4]
 800d400:	6120      	str	r0, [r4, #16]
 800d402:	b15b      	cbz	r3, 800d41c <__smakebuf_r+0x74>
 800d404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d408:	4630      	mov	r0, r6
 800d40a:	f000 fec1 	bl	800e190 <_isatty_r>
 800d40e:	b128      	cbz	r0, 800d41c <__smakebuf_r+0x74>
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	f023 0303 	bic.w	r3, r3, #3
 800d416:	f043 0301 	orr.w	r3, r3, #1
 800d41a:	81a3      	strh	r3, [r4, #12]
 800d41c:	89a3      	ldrh	r3, [r4, #12]
 800d41e:	431d      	orrs	r5, r3
 800d420:	81a5      	strh	r5, [r4, #12]
 800d422:	e7cd      	b.n	800d3c0 <__smakebuf_r+0x18>
 800d424:	0800d1f9 	.word	0x0800d1f9

0800d428 <malloc>:
 800d428:	4b02      	ldr	r3, [pc, #8]	; (800d434 <malloc+0xc>)
 800d42a:	4601      	mov	r1, r0
 800d42c:	6818      	ldr	r0, [r3, #0]
 800d42e:	f000 bb3b 	b.w	800daa8 <_malloc_r>
 800d432:	bf00      	nop
 800d434:	20000084 	.word	0x20000084

0800d438 <_Balloc>:
 800d438:	b570      	push	{r4, r5, r6, lr}
 800d43a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d43c:	4604      	mov	r4, r0
 800d43e:	460e      	mov	r6, r1
 800d440:	b93d      	cbnz	r5, 800d452 <_Balloc+0x1a>
 800d442:	2010      	movs	r0, #16
 800d444:	f7ff fff0 	bl	800d428 <malloc>
 800d448:	6260      	str	r0, [r4, #36]	; 0x24
 800d44a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d44e:	6005      	str	r5, [r0, #0]
 800d450:	60c5      	str	r5, [r0, #12]
 800d452:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d454:	68eb      	ldr	r3, [r5, #12]
 800d456:	b183      	cbz	r3, 800d47a <_Balloc+0x42>
 800d458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d460:	b9b8      	cbnz	r0, 800d492 <_Balloc+0x5a>
 800d462:	2101      	movs	r1, #1
 800d464:	fa01 f506 	lsl.w	r5, r1, r6
 800d468:	1d6a      	adds	r2, r5, #5
 800d46a:	0092      	lsls	r2, r2, #2
 800d46c:	4620      	mov	r0, r4
 800d46e:	f000 fabf 	bl	800d9f0 <_calloc_r>
 800d472:	b160      	cbz	r0, 800d48e <_Balloc+0x56>
 800d474:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d478:	e00e      	b.n	800d498 <_Balloc+0x60>
 800d47a:	2221      	movs	r2, #33	; 0x21
 800d47c:	2104      	movs	r1, #4
 800d47e:	4620      	mov	r0, r4
 800d480:	f000 fab6 	bl	800d9f0 <_calloc_r>
 800d484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d486:	60e8      	str	r0, [r5, #12]
 800d488:	68db      	ldr	r3, [r3, #12]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1e4      	bne.n	800d458 <_Balloc+0x20>
 800d48e:	2000      	movs	r0, #0
 800d490:	bd70      	pop	{r4, r5, r6, pc}
 800d492:	6802      	ldr	r2, [r0, #0]
 800d494:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d498:	2300      	movs	r3, #0
 800d49a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d49e:	e7f7      	b.n	800d490 <_Balloc+0x58>

0800d4a0 <_Bfree>:
 800d4a0:	b570      	push	{r4, r5, r6, lr}
 800d4a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d4a4:	4606      	mov	r6, r0
 800d4a6:	460d      	mov	r5, r1
 800d4a8:	b93c      	cbnz	r4, 800d4ba <_Bfree+0x1a>
 800d4aa:	2010      	movs	r0, #16
 800d4ac:	f7ff ffbc 	bl	800d428 <malloc>
 800d4b0:	6270      	str	r0, [r6, #36]	; 0x24
 800d4b2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4b6:	6004      	str	r4, [r0, #0]
 800d4b8:	60c4      	str	r4, [r0, #12]
 800d4ba:	b13d      	cbz	r5, 800d4cc <_Bfree+0x2c>
 800d4bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d4be:	686a      	ldr	r2, [r5, #4]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4c6:	6029      	str	r1, [r5, #0]
 800d4c8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d4cc:	bd70      	pop	{r4, r5, r6, pc}

0800d4ce <__multadd>:
 800d4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d2:	690d      	ldr	r5, [r1, #16]
 800d4d4:	461f      	mov	r7, r3
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	460c      	mov	r4, r1
 800d4da:	f101 0c14 	add.w	ip, r1, #20
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f8dc 0000 	ldr.w	r0, [ip]
 800d4e4:	b281      	uxth	r1, r0
 800d4e6:	fb02 7101 	mla	r1, r2, r1, r7
 800d4ea:	0c0f      	lsrs	r7, r1, #16
 800d4ec:	0c00      	lsrs	r0, r0, #16
 800d4ee:	fb02 7000 	mla	r0, r2, r0, r7
 800d4f2:	b289      	uxth	r1, r1
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d4fa:	429d      	cmp	r5, r3
 800d4fc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d500:	f84c 1b04 	str.w	r1, [ip], #4
 800d504:	dcec      	bgt.n	800d4e0 <__multadd+0x12>
 800d506:	b1d7      	cbz	r7, 800d53e <__multadd+0x70>
 800d508:	68a3      	ldr	r3, [r4, #8]
 800d50a:	42ab      	cmp	r3, r5
 800d50c:	dc12      	bgt.n	800d534 <__multadd+0x66>
 800d50e:	6861      	ldr	r1, [r4, #4]
 800d510:	4630      	mov	r0, r6
 800d512:	3101      	adds	r1, #1
 800d514:	f7ff ff90 	bl	800d438 <_Balloc>
 800d518:	6922      	ldr	r2, [r4, #16]
 800d51a:	3202      	adds	r2, #2
 800d51c:	f104 010c 	add.w	r1, r4, #12
 800d520:	4680      	mov	r8, r0
 800d522:	0092      	lsls	r2, r2, #2
 800d524:	300c      	adds	r0, #12
 800d526:	f7fe f973 	bl	800b810 <memcpy>
 800d52a:	4621      	mov	r1, r4
 800d52c:	4630      	mov	r0, r6
 800d52e:	f7ff ffb7 	bl	800d4a0 <_Bfree>
 800d532:	4644      	mov	r4, r8
 800d534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d538:	3501      	adds	r5, #1
 800d53a:	615f      	str	r7, [r3, #20]
 800d53c:	6125      	str	r5, [r4, #16]
 800d53e:	4620      	mov	r0, r4
 800d540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d544 <__hi0bits>:
 800d544:	0c02      	lsrs	r2, r0, #16
 800d546:	0412      	lsls	r2, r2, #16
 800d548:	4603      	mov	r3, r0
 800d54a:	b9b2      	cbnz	r2, 800d57a <__hi0bits+0x36>
 800d54c:	0403      	lsls	r3, r0, #16
 800d54e:	2010      	movs	r0, #16
 800d550:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d554:	bf04      	itt	eq
 800d556:	021b      	lsleq	r3, r3, #8
 800d558:	3008      	addeq	r0, #8
 800d55a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d55e:	bf04      	itt	eq
 800d560:	011b      	lsleq	r3, r3, #4
 800d562:	3004      	addeq	r0, #4
 800d564:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d568:	bf04      	itt	eq
 800d56a:	009b      	lsleq	r3, r3, #2
 800d56c:	3002      	addeq	r0, #2
 800d56e:	2b00      	cmp	r3, #0
 800d570:	db06      	blt.n	800d580 <__hi0bits+0x3c>
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	d503      	bpl.n	800d57e <__hi0bits+0x3a>
 800d576:	3001      	adds	r0, #1
 800d578:	4770      	bx	lr
 800d57a:	2000      	movs	r0, #0
 800d57c:	e7e8      	b.n	800d550 <__hi0bits+0xc>
 800d57e:	2020      	movs	r0, #32
 800d580:	4770      	bx	lr

0800d582 <__lo0bits>:
 800d582:	6803      	ldr	r3, [r0, #0]
 800d584:	f013 0207 	ands.w	r2, r3, #7
 800d588:	4601      	mov	r1, r0
 800d58a:	d00b      	beq.n	800d5a4 <__lo0bits+0x22>
 800d58c:	07da      	lsls	r2, r3, #31
 800d58e:	d423      	bmi.n	800d5d8 <__lo0bits+0x56>
 800d590:	0798      	lsls	r0, r3, #30
 800d592:	bf49      	itett	mi
 800d594:	085b      	lsrmi	r3, r3, #1
 800d596:	089b      	lsrpl	r3, r3, #2
 800d598:	2001      	movmi	r0, #1
 800d59a:	600b      	strmi	r3, [r1, #0]
 800d59c:	bf5c      	itt	pl
 800d59e:	600b      	strpl	r3, [r1, #0]
 800d5a0:	2002      	movpl	r0, #2
 800d5a2:	4770      	bx	lr
 800d5a4:	b298      	uxth	r0, r3
 800d5a6:	b9a8      	cbnz	r0, 800d5d4 <__lo0bits+0x52>
 800d5a8:	0c1b      	lsrs	r3, r3, #16
 800d5aa:	2010      	movs	r0, #16
 800d5ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d5b0:	bf04      	itt	eq
 800d5b2:	0a1b      	lsreq	r3, r3, #8
 800d5b4:	3008      	addeq	r0, #8
 800d5b6:	071a      	lsls	r2, r3, #28
 800d5b8:	bf04      	itt	eq
 800d5ba:	091b      	lsreq	r3, r3, #4
 800d5bc:	3004      	addeq	r0, #4
 800d5be:	079a      	lsls	r2, r3, #30
 800d5c0:	bf04      	itt	eq
 800d5c2:	089b      	lsreq	r3, r3, #2
 800d5c4:	3002      	addeq	r0, #2
 800d5c6:	07da      	lsls	r2, r3, #31
 800d5c8:	d402      	bmi.n	800d5d0 <__lo0bits+0x4e>
 800d5ca:	085b      	lsrs	r3, r3, #1
 800d5cc:	d006      	beq.n	800d5dc <__lo0bits+0x5a>
 800d5ce:	3001      	adds	r0, #1
 800d5d0:	600b      	str	r3, [r1, #0]
 800d5d2:	4770      	bx	lr
 800d5d4:	4610      	mov	r0, r2
 800d5d6:	e7e9      	b.n	800d5ac <__lo0bits+0x2a>
 800d5d8:	2000      	movs	r0, #0
 800d5da:	4770      	bx	lr
 800d5dc:	2020      	movs	r0, #32
 800d5de:	4770      	bx	lr

0800d5e0 <__i2b>:
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	2101      	movs	r1, #1
 800d5e6:	f7ff ff27 	bl	800d438 <_Balloc>
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	6144      	str	r4, [r0, #20]
 800d5ee:	6102      	str	r2, [r0, #16]
 800d5f0:	bd10      	pop	{r4, pc}

0800d5f2 <__multiply>:
 800d5f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f6:	4614      	mov	r4, r2
 800d5f8:	690a      	ldr	r2, [r1, #16]
 800d5fa:	6923      	ldr	r3, [r4, #16]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	bfb8      	it	lt
 800d600:	460b      	movlt	r3, r1
 800d602:	4688      	mov	r8, r1
 800d604:	bfbc      	itt	lt
 800d606:	46a0      	movlt	r8, r4
 800d608:	461c      	movlt	r4, r3
 800d60a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d60e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d612:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d616:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d61a:	eb07 0609 	add.w	r6, r7, r9
 800d61e:	42b3      	cmp	r3, r6
 800d620:	bfb8      	it	lt
 800d622:	3101      	addlt	r1, #1
 800d624:	f7ff ff08 	bl	800d438 <_Balloc>
 800d628:	f100 0514 	add.w	r5, r0, #20
 800d62c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d630:	462b      	mov	r3, r5
 800d632:	2200      	movs	r2, #0
 800d634:	4573      	cmp	r3, lr
 800d636:	d316      	bcc.n	800d666 <__multiply+0x74>
 800d638:	f104 0214 	add.w	r2, r4, #20
 800d63c:	f108 0114 	add.w	r1, r8, #20
 800d640:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d644:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	9b00      	ldr	r3, [sp, #0]
 800d64c:	9201      	str	r2, [sp, #4]
 800d64e:	4293      	cmp	r3, r2
 800d650:	d80c      	bhi.n	800d66c <__multiply+0x7a>
 800d652:	2e00      	cmp	r6, #0
 800d654:	dd03      	ble.n	800d65e <__multiply+0x6c>
 800d656:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d05d      	beq.n	800d71a <__multiply+0x128>
 800d65e:	6106      	str	r6, [r0, #16]
 800d660:	b003      	add	sp, #12
 800d662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d666:	f843 2b04 	str.w	r2, [r3], #4
 800d66a:	e7e3      	b.n	800d634 <__multiply+0x42>
 800d66c:	f8b2 b000 	ldrh.w	fp, [r2]
 800d670:	f1bb 0f00 	cmp.w	fp, #0
 800d674:	d023      	beq.n	800d6be <__multiply+0xcc>
 800d676:	4689      	mov	r9, r1
 800d678:	46ac      	mov	ip, r5
 800d67a:	f04f 0800 	mov.w	r8, #0
 800d67e:	f859 4b04 	ldr.w	r4, [r9], #4
 800d682:	f8dc a000 	ldr.w	sl, [ip]
 800d686:	b2a3      	uxth	r3, r4
 800d688:	fa1f fa8a 	uxth.w	sl, sl
 800d68c:	fb0b a303 	mla	r3, fp, r3, sl
 800d690:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d694:	f8dc 4000 	ldr.w	r4, [ip]
 800d698:	4443      	add	r3, r8
 800d69a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d69e:	fb0b 840a 	mla	r4, fp, sl, r8
 800d6a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d6a6:	46e2      	mov	sl, ip
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d6ae:	454f      	cmp	r7, r9
 800d6b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d6b4:	f84a 3b04 	str.w	r3, [sl], #4
 800d6b8:	d82b      	bhi.n	800d712 <__multiply+0x120>
 800d6ba:	f8cc 8004 	str.w	r8, [ip, #4]
 800d6be:	9b01      	ldr	r3, [sp, #4]
 800d6c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d6c4:	3204      	adds	r2, #4
 800d6c6:	f1ba 0f00 	cmp.w	sl, #0
 800d6ca:	d020      	beq.n	800d70e <__multiply+0x11c>
 800d6cc:	682b      	ldr	r3, [r5, #0]
 800d6ce:	4689      	mov	r9, r1
 800d6d0:	46a8      	mov	r8, r5
 800d6d2:	f04f 0b00 	mov.w	fp, #0
 800d6d6:	f8b9 c000 	ldrh.w	ip, [r9]
 800d6da:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d6de:	fb0a 440c 	mla	r4, sl, ip, r4
 800d6e2:	445c      	add	r4, fp
 800d6e4:	46c4      	mov	ip, r8
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d6ec:	f84c 3b04 	str.w	r3, [ip], #4
 800d6f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6f4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d6f8:	0c1b      	lsrs	r3, r3, #16
 800d6fa:	fb0a b303 	mla	r3, sl, r3, fp
 800d6fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d702:	454f      	cmp	r7, r9
 800d704:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d708:	d805      	bhi.n	800d716 <__multiply+0x124>
 800d70a:	f8c8 3004 	str.w	r3, [r8, #4]
 800d70e:	3504      	adds	r5, #4
 800d710:	e79b      	b.n	800d64a <__multiply+0x58>
 800d712:	46d4      	mov	ip, sl
 800d714:	e7b3      	b.n	800d67e <__multiply+0x8c>
 800d716:	46e0      	mov	r8, ip
 800d718:	e7dd      	b.n	800d6d6 <__multiply+0xe4>
 800d71a:	3e01      	subs	r6, #1
 800d71c:	e799      	b.n	800d652 <__multiply+0x60>
	...

0800d720 <__pow5mult>:
 800d720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d724:	4615      	mov	r5, r2
 800d726:	f012 0203 	ands.w	r2, r2, #3
 800d72a:	4606      	mov	r6, r0
 800d72c:	460f      	mov	r7, r1
 800d72e:	d007      	beq.n	800d740 <__pow5mult+0x20>
 800d730:	3a01      	subs	r2, #1
 800d732:	4c21      	ldr	r4, [pc, #132]	; (800d7b8 <__pow5mult+0x98>)
 800d734:	2300      	movs	r3, #0
 800d736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d73a:	f7ff fec8 	bl	800d4ce <__multadd>
 800d73e:	4607      	mov	r7, r0
 800d740:	10ad      	asrs	r5, r5, #2
 800d742:	d035      	beq.n	800d7b0 <__pow5mult+0x90>
 800d744:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d746:	b93c      	cbnz	r4, 800d758 <__pow5mult+0x38>
 800d748:	2010      	movs	r0, #16
 800d74a:	f7ff fe6d 	bl	800d428 <malloc>
 800d74e:	6270      	str	r0, [r6, #36]	; 0x24
 800d750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d754:	6004      	str	r4, [r0, #0]
 800d756:	60c4      	str	r4, [r0, #12]
 800d758:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d75c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d760:	b94c      	cbnz	r4, 800d776 <__pow5mult+0x56>
 800d762:	f240 2171 	movw	r1, #625	; 0x271
 800d766:	4630      	mov	r0, r6
 800d768:	f7ff ff3a 	bl	800d5e0 <__i2b>
 800d76c:	2300      	movs	r3, #0
 800d76e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d772:	4604      	mov	r4, r0
 800d774:	6003      	str	r3, [r0, #0]
 800d776:	f04f 0800 	mov.w	r8, #0
 800d77a:	07eb      	lsls	r3, r5, #31
 800d77c:	d50a      	bpl.n	800d794 <__pow5mult+0x74>
 800d77e:	4639      	mov	r1, r7
 800d780:	4622      	mov	r2, r4
 800d782:	4630      	mov	r0, r6
 800d784:	f7ff ff35 	bl	800d5f2 <__multiply>
 800d788:	4639      	mov	r1, r7
 800d78a:	4681      	mov	r9, r0
 800d78c:	4630      	mov	r0, r6
 800d78e:	f7ff fe87 	bl	800d4a0 <_Bfree>
 800d792:	464f      	mov	r7, r9
 800d794:	106d      	asrs	r5, r5, #1
 800d796:	d00b      	beq.n	800d7b0 <__pow5mult+0x90>
 800d798:	6820      	ldr	r0, [r4, #0]
 800d79a:	b938      	cbnz	r0, 800d7ac <__pow5mult+0x8c>
 800d79c:	4622      	mov	r2, r4
 800d79e:	4621      	mov	r1, r4
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	f7ff ff26 	bl	800d5f2 <__multiply>
 800d7a6:	6020      	str	r0, [r4, #0]
 800d7a8:	f8c0 8000 	str.w	r8, [r0]
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	e7e4      	b.n	800d77a <__pow5mult+0x5a>
 800d7b0:	4638      	mov	r0, r7
 800d7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7b6:	bf00      	nop
 800d7b8:	0800ea18 	.word	0x0800ea18

0800d7bc <__lshift>:
 800d7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7c6:	6923      	ldr	r3, [r4, #16]
 800d7c8:	6849      	ldr	r1, [r1, #4]
 800d7ca:	eb0a 0903 	add.w	r9, sl, r3
 800d7ce:	68a3      	ldr	r3, [r4, #8]
 800d7d0:	4607      	mov	r7, r0
 800d7d2:	4616      	mov	r6, r2
 800d7d4:	f109 0501 	add.w	r5, r9, #1
 800d7d8:	42ab      	cmp	r3, r5
 800d7da:	db32      	blt.n	800d842 <__lshift+0x86>
 800d7dc:	4638      	mov	r0, r7
 800d7de:	f7ff fe2b 	bl	800d438 <_Balloc>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	4680      	mov	r8, r0
 800d7e6:	f100 0114 	add.w	r1, r0, #20
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	4553      	cmp	r3, sl
 800d7ee:	db2b      	blt.n	800d848 <__lshift+0x8c>
 800d7f0:	6920      	ldr	r0, [r4, #16]
 800d7f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7f6:	f104 0314 	add.w	r3, r4, #20
 800d7fa:	f016 021f 	ands.w	r2, r6, #31
 800d7fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d802:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d806:	d025      	beq.n	800d854 <__lshift+0x98>
 800d808:	f1c2 0e20 	rsb	lr, r2, #32
 800d80c:	2000      	movs	r0, #0
 800d80e:	681e      	ldr	r6, [r3, #0]
 800d810:	468a      	mov	sl, r1
 800d812:	4096      	lsls	r6, r2
 800d814:	4330      	orrs	r0, r6
 800d816:	f84a 0b04 	str.w	r0, [sl], #4
 800d81a:	f853 0b04 	ldr.w	r0, [r3], #4
 800d81e:	459c      	cmp	ip, r3
 800d820:	fa20 f00e 	lsr.w	r0, r0, lr
 800d824:	d814      	bhi.n	800d850 <__lshift+0x94>
 800d826:	6048      	str	r0, [r1, #4]
 800d828:	b108      	cbz	r0, 800d82e <__lshift+0x72>
 800d82a:	f109 0502 	add.w	r5, r9, #2
 800d82e:	3d01      	subs	r5, #1
 800d830:	4638      	mov	r0, r7
 800d832:	f8c8 5010 	str.w	r5, [r8, #16]
 800d836:	4621      	mov	r1, r4
 800d838:	f7ff fe32 	bl	800d4a0 <_Bfree>
 800d83c:	4640      	mov	r0, r8
 800d83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d842:	3101      	adds	r1, #1
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	e7c7      	b.n	800d7d8 <__lshift+0x1c>
 800d848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d84c:	3301      	adds	r3, #1
 800d84e:	e7cd      	b.n	800d7ec <__lshift+0x30>
 800d850:	4651      	mov	r1, sl
 800d852:	e7dc      	b.n	800d80e <__lshift+0x52>
 800d854:	3904      	subs	r1, #4
 800d856:	f853 2b04 	ldr.w	r2, [r3], #4
 800d85a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d85e:	459c      	cmp	ip, r3
 800d860:	d8f9      	bhi.n	800d856 <__lshift+0x9a>
 800d862:	e7e4      	b.n	800d82e <__lshift+0x72>

0800d864 <__mcmp>:
 800d864:	6903      	ldr	r3, [r0, #16]
 800d866:	690a      	ldr	r2, [r1, #16]
 800d868:	1a9b      	subs	r3, r3, r2
 800d86a:	b530      	push	{r4, r5, lr}
 800d86c:	d10c      	bne.n	800d888 <__mcmp+0x24>
 800d86e:	0092      	lsls	r2, r2, #2
 800d870:	3014      	adds	r0, #20
 800d872:	3114      	adds	r1, #20
 800d874:	1884      	adds	r4, r0, r2
 800d876:	4411      	add	r1, r2
 800d878:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d87c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d880:	4295      	cmp	r5, r2
 800d882:	d003      	beq.n	800d88c <__mcmp+0x28>
 800d884:	d305      	bcc.n	800d892 <__mcmp+0x2e>
 800d886:	2301      	movs	r3, #1
 800d888:	4618      	mov	r0, r3
 800d88a:	bd30      	pop	{r4, r5, pc}
 800d88c:	42a0      	cmp	r0, r4
 800d88e:	d3f3      	bcc.n	800d878 <__mcmp+0x14>
 800d890:	e7fa      	b.n	800d888 <__mcmp+0x24>
 800d892:	f04f 33ff 	mov.w	r3, #4294967295
 800d896:	e7f7      	b.n	800d888 <__mcmp+0x24>

0800d898 <__mdiff>:
 800d898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d89c:	460d      	mov	r5, r1
 800d89e:	4607      	mov	r7, r0
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	4614      	mov	r4, r2
 800d8a6:	f7ff ffdd 	bl	800d864 <__mcmp>
 800d8aa:	1e06      	subs	r6, r0, #0
 800d8ac:	d108      	bne.n	800d8c0 <__mdiff+0x28>
 800d8ae:	4631      	mov	r1, r6
 800d8b0:	4638      	mov	r0, r7
 800d8b2:	f7ff fdc1 	bl	800d438 <_Balloc>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c0:	bfa4      	itt	ge
 800d8c2:	4623      	movge	r3, r4
 800d8c4:	462c      	movge	r4, r5
 800d8c6:	4638      	mov	r0, r7
 800d8c8:	6861      	ldr	r1, [r4, #4]
 800d8ca:	bfa6      	itte	ge
 800d8cc:	461d      	movge	r5, r3
 800d8ce:	2600      	movge	r6, #0
 800d8d0:	2601      	movlt	r6, #1
 800d8d2:	f7ff fdb1 	bl	800d438 <_Balloc>
 800d8d6:	692b      	ldr	r3, [r5, #16]
 800d8d8:	60c6      	str	r6, [r0, #12]
 800d8da:	6926      	ldr	r6, [r4, #16]
 800d8dc:	f105 0914 	add.w	r9, r5, #20
 800d8e0:	f104 0214 	add.w	r2, r4, #20
 800d8e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d8e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d8ec:	f100 0514 	add.w	r5, r0, #20
 800d8f0:	f04f 0e00 	mov.w	lr, #0
 800d8f4:	f852 ab04 	ldr.w	sl, [r2], #4
 800d8f8:	f859 4b04 	ldr.w	r4, [r9], #4
 800d8fc:	fa1e f18a 	uxtah	r1, lr, sl
 800d900:	b2a3      	uxth	r3, r4
 800d902:	1ac9      	subs	r1, r1, r3
 800d904:	0c23      	lsrs	r3, r4, #16
 800d906:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d90a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d90e:	b289      	uxth	r1, r1
 800d910:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d914:	45c8      	cmp	r8, r9
 800d916:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d91a:	4694      	mov	ip, r2
 800d91c:	f845 3b04 	str.w	r3, [r5], #4
 800d920:	d8e8      	bhi.n	800d8f4 <__mdiff+0x5c>
 800d922:	45bc      	cmp	ip, r7
 800d924:	d304      	bcc.n	800d930 <__mdiff+0x98>
 800d926:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d92a:	b183      	cbz	r3, 800d94e <__mdiff+0xb6>
 800d92c:	6106      	str	r6, [r0, #16]
 800d92e:	e7c5      	b.n	800d8bc <__mdiff+0x24>
 800d930:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d934:	fa1e f381 	uxtah	r3, lr, r1
 800d938:	141a      	asrs	r2, r3, #16
 800d93a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d93e:	b29b      	uxth	r3, r3
 800d940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d944:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d948:	f845 3b04 	str.w	r3, [r5], #4
 800d94c:	e7e9      	b.n	800d922 <__mdiff+0x8a>
 800d94e:	3e01      	subs	r6, #1
 800d950:	e7e9      	b.n	800d926 <__mdiff+0x8e>

0800d952 <__d2b>:
 800d952:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d956:	460e      	mov	r6, r1
 800d958:	2101      	movs	r1, #1
 800d95a:	ec59 8b10 	vmov	r8, r9, d0
 800d95e:	4615      	mov	r5, r2
 800d960:	f7ff fd6a 	bl	800d438 <_Balloc>
 800d964:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d968:	4607      	mov	r7, r0
 800d96a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d96e:	bb34      	cbnz	r4, 800d9be <__d2b+0x6c>
 800d970:	9301      	str	r3, [sp, #4]
 800d972:	f1b8 0300 	subs.w	r3, r8, #0
 800d976:	d027      	beq.n	800d9c8 <__d2b+0x76>
 800d978:	a802      	add	r0, sp, #8
 800d97a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d97e:	f7ff fe00 	bl	800d582 <__lo0bits>
 800d982:	9900      	ldr	r1, [sp, #0]
 800d984:	b1f0      	cbz	r0, 800d9c4 <__d2b+0x72>
 800d986:	9a01      	ldr	r2, [sp, #4]
 800d988:	f1c0 0320 	rsb	r3, r0, #32
 800d98c:	fa02 f303 	lsl.w	r3, r2, r3
 800d990:	430b      	orrs	r3, r1
 800d992:	40c2      	lsrs	r2, r0
 800d994:	617b      	str	r3, [r7, #20]
 800d996:	9201      	str	r2, [sp, #4]
 800d998:	9b01      	ldr	r3, [sp, #4]
 800d99a:	61bb      	str	r3, [r7, #24]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	bf14      	ite	ne
 800d9a0:	2102      	movne	r1, #2
 800d9a2:	2101      	moveq	r1, #1
 800d9a4:	6139      	str	r1, [r7, #16]
 800d9a6:	b1c4      	cbz	r4, 800d9da <__d2b+0x88>
 800d9a8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d9ac:	4404      	add	r4, r0
 800d9ae:	6034      	str	r4, [r6, #0]
 800d9b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9b4:	6028      	str	r0, [r5, #0]
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	b003      	add	sp, #12
 800d9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9c2:	e7d5      	b.n	800d970 <__d2b+0x1e>
 800d9c4:	6179      	str	r1, [r7, #20]
 800d9c6:	e7e7      	b.n	800d998 <__d2b+0x46>
 800d9c8:	a801      	add	r0, sp, #4
 800d9ca:	f7ff fdda 	bl	800d582 <__lo0bits>
 800d9ce:	9b01      	ldr	r3, [sp, #4]
 800d9d0:	617b      	str	r3, [r7, #20]
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	6139      	str	r1, [r7, #16]
 800d9d6:	3020      	adds	r0, #32
 800d9d8:	e7e5      	b.n	800d9a6 <__d2b+0x54>
 800d9da:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d9de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9e2:	6030      	str	r0, [r6, #0]
 800d9e4:	6918      	ldr	r0, [r3, #16]
 800d9e6:	f7ff fdad 	bl	800d544 <__hi0bits>
 800d9ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d9ee:	e7e1      	b.n	800d9b4 <__d2b+0x62>

0800d9f0 <_calloc_r>:
 800d9f0:	b538      	push	{r3, r4, r5, lr}
 800d9f2:	fb02 f401 	mul.w	r4, r2, r1
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	f000 f856 	bl	800daa8 <_malloc_r>
 800d9fc:	4605      	mov	r5, r0
 800d9fe:	b118      	cbz	r0, 800da08 <_calloc_r+0x18>
 800da00:	4622      	mov	r2, r4
 800da02:	2100      	movs	r1, #0
 800da04:	f7fd ff0f 	bl	800b826 <memset>
 800da08:	4628      	mov	r0, r5
 800da0a:	bd38      	pop	{r3, r4, r5, pc}

0800da0c <_free_r>:
 800da0c:	b538      	push	{r3, r4, r5, lr}
 800da0e:	4605      	mov	r5, r0
 800da10:	2900      	cmp	r1, #0
 800da12:	d045      	beq.n	800daa0 <_free_r+0x94>
 800da14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da18:	1f0c      	subs	r4, r1, #4
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	bfb8      	it	lt
 800da1e:	18e4      	addlt	r4, r4, r3
 800da20:	f000 fc03 	bl	800e22a <__malloc_lock>
 800da24:	4a1f      	ldr	r2, [pc, #124]	; (800daa4 <_free_r+0x98>)
 800da26:	6813      	ldr	r3, [r2, #0]
 800da28:	4610      	mov	r0, r2
 800da2a:	b933      	cbnz	r3, 800da3a <_free_r+0x2e>
 800da2c:	6063      	str	r3, [r4, #4]
 800da2e:	6014      	str	r4, [r2, #0]
 800da30:	4628      	mov	r0, r5
 800da32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da36:	f000 bbf9 	b.w	800e22c <__malloc_unlock>
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	d90c      	bls.n	800da58 <_free_r+0x4c>
 800da3e:	6821      	ldr	r1, [r4, #0]
 800da40:	1862      	adds	r2, r4, r1
 800da42:	4293      	cmp	r3, r2
 800da44:	bf04      	itt	eq
 800da46:	681a      	ldreq	r2, [r3, #0]
 800da48:	685b      	ldreq	r3, [r3, #4]
 800da4a:	6063      	str	r3, [r4, #4]
 800da4c:	bf04      	itt	eq
 800da4e:	1852      	addeq	r2, r2, r1
 800da50:	6022      	streq	r2, [r4, #0]
 800da52:	6004      	str	r4, [r0, #0]
 800da54:	e7ec      	b.n	800da30 <_free_r+0x24>
 800da56:	4613      	mov	r3, r2
 800da58:	685a      	ldr	r2, [r3, #4]
 800da5a:	b10a      	cbz	r2, 800da60 <_free_r+0x54>
 800da5c:	42a2      	cmp	r2, r4
 800da5e:	d9fa      	bls.n	800da56 <_free_r+0x4a>
 800da60:	6819      	ldr	r1, [r3, #0]
 800da62:	1858      	adds	r0, r3, r1
 800da64:	42a0      	cmp	r0, r4
 800da66:	d10b      	bne.n	800da80 <_free_r+0x74>
 800da68:	6820      	ldr	r0, [r4, #0]
 800da6a:	4401      	add	r1, r0
 800da6c:	1858      	adds	r0, r3, r1
 800da6e:	4282      	cmp	r2, r0
 800da70:	6019      	str	r1, [r3, #0]
 800da72:	d1dd      	bne.n	800da30 <_free_r+0x24>
 800da74:	6810      	ldr	r0, [r2, #0]
 800da76:	6852      	ldr	r2, [r2, #4]
 800da78:	605a      	str	r2, [r3, #4]
 800da7a:	4401      	add	r1, r0
 800da7c:	6019      	str	r1, [r3, #0]
 800da7e:	e7d7      	b.n	800da30 <_free_r+0x24>
 800da80:	d902      	bls.n	800da88 <_free_r+0x7c>
 800da82:	230c      	movs	r3, #12
 800da84:	602b      	str	r3, [r5, #0]
 800da86:	e7d3      	b.n	800da30 <_free_r+0x24>
 800da88:	6820      	ldr	r0, [r4, #0]
 800da8a:	1821      	adds	r1, r4, r0
 800da8c:	428a      	cmp	r2, r1
 800da8e:	bf04      	itt	eq
 800da90:	6811      	ldreq	r1, [r2, #0]
 800da92:	6852      	ldreq	r2, [r2, #4]
 800da94:	6062      	str	r2, [r4, #4]
 800da96:	bf04      	itt	eq
 800da98:	1809      	addeq	r1, r1, r0
 800da9a:	6021      	streq	r1, [r4, #0]
 800da9c:	605c      	str	r4, [r3, #4]
 800da9e:	e7c7      	b.n	800da30 <_free_r+0x24>
 800daa0:	bd38      	pop	{r3, r4, r5, pc}
 800daa2:	bf00      	nop
 800daa4:	200006cc 	.word	0x200006cc

0800daa8 <_malloc_r>:
 800daa8:	b570      	push	{r4, r5, r6, lr}
 800daaa:	1ccd      	adds	r5, r1, #3
 800daac:	f025 0503 	bic.w	r5, r5, #3
 800dab0:	3508      	adds	r5, #8
 800dab2:	2d0c      	cmp	r5, #12
 800dab4:	bf38      	it	cc
 800dab6:	250c      	movcc	r5, #12
 800dab8:	2d00      	cmp	r5, #0
 800daba:	4606      	mov	r6, r0
 800dabc:	db01      	blt.n	800dac2 <_malloc_r+0x1a>
 800dabe:	42a9      	cmp	r1, r5
 800dac0:	d903      	bls.n	800daca <_malloc_r+0x22>
 800dac2:	230c      	movs	r3, #12
 800dac4:	6033      	str	r3, [r6, #0]
 800dac6:	2000      	movs	r0, #0
 800dac8:	bd70      	pop	{r4, r5, r6, pc}
 800daca:	f000 fbae 	bl	800e22a <__malloc_lock>
 800dace:	4a21      	ldr	r2, [pc, #132]	; (800db54 <_malloc_r+0xac>)
 800dad0:	6814      	ldr	r4, [r2, #0]
 800dad2:	4621      	mov	r1, r4
 800dad4:	b991      	cbnz	r1, 800dafc <_malloc_r+0x54>
 800dad6:	4c20      	ldr	r4, [pc, #128]	; (800db58 <_malloc_r+0xb0>)
 800dad8:	6823      	ldr	r3, [r4, #0]
 800dada:	b91b      	cbnz	r3, 800dae4 <_malloc_r+0x3c>
 800dadc:	4630      	mov	r0, r6
 800dade:	f000 facf 	bl	800e080 <_sbrk_r>
 800dae2:	6020      	str	r0, [r4, #0]
 800dae4:	4629      	mov	r1, r5
 800dae6:	4630      	mov	r0, r6
 800dae8:	f000 faca 	bl	800e080 <_sbrk_r>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d124      	bne.n	800db3a <_malloc_r+0x92>
 800daf0:	230c      	movs	r3, #12
 800daf2:	6033      	str	r3, [r6, #0]
 800daf4:	4630      	mov	r0, r6
 800daf6:	f000 fb99 	bl	800e22c <__malloc_unlock>
 800dafa:	e7e4      	b.n	800dac6 <_malloc_r+0x1e>
 800dafc:	680b      	ldr	r3, [r1, #0]
 800dafe:	1b5b      	subs	r3, r3, r5
 800db00:	d418      	bmi.n	800db34 <_malloc_r+0x8c>
 800db02:	2b0b      	cmp	r3, #11
 800db04:	d90f      	bls.n	800db26 <_malloc_r+0x7e>
 800db06:	600b      	str	r3, [r1, #0]
 800db08:	50cd      	str	r5, [r1, r3]
 800db0a:	18cc      	adds	r4, r1, r3
 800db0c:	4630      	mov	r0, r6
 800db0e:	f000 fb8d 	bl	800e22c <__malloc_unlock>
 800db12:	f104 000b 	add.w	r0, r4, #11
 800db16:	1d23      	adds	r3, r4, #4
 800db18:	f020 0007 	bic.w	r0, r0, #7
 800db1c:	1ac3      	subs	r3, r0, r3
 800db1e:	d0d3      	beq.n	800dac8 <_malloc_r+0x20>
 800db20:	425a      	negs	r2, r3
 800db22:	50e2      	str	r2, [r4, r3]
 800db24:	e7d0      	b.n	800dac8 <_malloc_r+0x20>
 800db26:	428c      	cmp	r4, r1
 800db28:	684b      	ldr	r3, [r1, #4]
 800db2a:	bf16      	itet	ne
 800db2c:	6063      	strne	r3, [r4, #4]
 800db2e:	6013      	streq	r3, [r2, #0]
 800db30:	460c      	movne	r4, r1
 800db32:	e7eb      	b.n	800db0c <_malloc_r+0x64>
 800db34:	460c      	mov	r4, r1
 800db36:	6849      	ldr	r1, [r1, #4]
 800db38:	e7cc      	b.n	800dad4 <_malloc_r+0x2c>
 800db3a:	1cc4      	adds	r4, r0, #3
 800db3c:	f024 0403 	bic.w	r4, r4, #3
 800db40:	42a0      	cmp	r0, r4
 800db42:	d005      	beq.n	800db50 <_malloc_r+0xa8>
 800db44:	1a21      	subs	r1, r4, r0
 800db46:	4630      	mov	r0, r6
 800db48:	f000 fa9a 	bl	800e080 <_sbrk_r>
 800db4c:	3001      	adds	r0, #1
 800db4e:	d0cf      	beq.n	800daf0 <_malloc_r+0x48>
 800db50:	6025      	str	r5, [r4, #0]
 800db52:	e7db      	b.n	800db0c <_malloc_r+0x64>
 800db54:	200006cc 	.word	0x200006cc
 800db58:	200006d0 	.word	0x200006d0

0800db5c <__ssputs_r>:
 800db5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db60:	688e      	ldr	r6, [r1, #8]
 800db62:	429e      	cmp	r6, r3
 800db64:	4682      	mov	sl, r0
 800db66:	460c      	mov	r4, r1
 800db68:	4690      	mov	r8, r2
 800db6a:	4699      	mov	r9, r3
 800db6c:	d837      	bhi.n	800dbde <__ssputs_r+0x82>
 800db6e:	898a      	ldrh	r2, [r1, #12]
 800db70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db74:	d031      	beq.n	800dbda <__ssputs_r+0x7e>
 800db76:	6825      	ldr	r5, [r4, #0]
 800db78:	6909      	ldr	r1, [r1, #16]
 800db7a:	1a6f      	subs	r7, r5, r1
 800db7c:	6965      	ldr	r5, [r4, #20]
 800db7e:	2302      	movs	r3, #2
 800db80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db84:	fb95 f5f3 	sdiv	r5, r5, r3
 800db88:	f109 0301 	add.w	r3, r9, #1
 800db8c:	443b      	add	r3, r7
 800db8e:	429d      	cmp	r5, r3
 800db90:	bf38      	it	cc
 800db92:	461d      	movcc	r5, r3
 800db94:	0553      	lsls	r3, r2, #21
 800db96:	d530      	bpl.n	800dbfa <__ssputs_r+0x9e>
 800db98:	4629      	mov	r1, r5
 800db9a:	f7ff ff85 	bl	800daa8 <_malloc_r>
 800db9e:	4606      	mov	r6, r0
 800dba0:	b950      	cbnz	r0, 800dbb8 <__ssputs_r+0x5c>
 800dba2:	230c      	movs	r3, #12
 800dba4:	f8ca 3000 	str.w	r3, [sl]
 800dba8:	89a3      	ldrh	r3, [r4, #12]
 800dbaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbae:	81a3      	strh	r3, [r4, #12]
 800dbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbb8:	463a      	mov	r2, r7
 800dbba:	6921      	ldr	r1, [r4, #16]
 800dbbc:	f7fd fe28 	bl	800b810 <memcpy>
 800dbc0:	89a3      	ldrh	r3, [r4, #12]
 800dbc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbca:	81a3      	strh	r3, [r4, #12]
 800dbcc:	6126      	str	r6, [r4, #16]
 800dbce:	6165      	str	r5, [r4, #20]
 800dbd0:	443e      	add	r6, r7
 800dbd2:	1bed      	subs	r5, r5, r7
 800dbd4:	6026      	str	r6, [r4, #0]
 800dbd6:	60a5      	str	r5, [r4, #8]
 800dbd8:	464e      	mov	r6, r9
 800dbda:	454e      	cmp	r6, r9
 800dbdc:	d900      	bls.n	800dbe0 <__ssputs_r+0x84>
 800dbde:	464e      	mov	r6, r9
 800dbe0:	4632      	mov	r2, r6
 800dbe2:	4641      	mov	r1, r8
 800dbe4:	6820      	ldr	r0, [r4, #0]
 800dbe6:	f000 fb07 	bl	800e1f8 <memmove>
 800dbea:	68a3      	ldr	r3, [r4, #8]
 800dbec:	1b9b      	subs	r3, r3, r6
 800dbee:	60a3      	str	r3, [r4, #8]
 800dbf0:	6823      	ldr	r3, [r4, #0]
 800dbf2:	441e      	add	r6, r3
 800dbf4:	6026      	str	r6, [r4, #0]
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	e7dc      	b.n	800dbb4 <__ssputs_r+0x58>
 800dbfa:	462a      	mov	r2, r5
 800dbfc:	f000 fb17 	bl	800e22e <_realloc_r>
 800dc00:	4606      	mov	r6, r0
 800dc02:	2800      	cmp	r0, #0
 800dc04:	d1e2      	bne.n	800dbcc <__ssputs_r+0x70>
 800dc06:	6921      	ldr	r1, [r4, #16]
 800dc08:	4650      	mov	r0, sl
 800dc0a:	f7ff feff 	bl	800da0c <_free_r>
 800dc0e:	e7c8      	b.n	800dba2 <__ssputs_r+0x46>

0800dc10 <_svfiprintf_r>:
 800dc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc14:	461d      	mov	r5, r3
 800dc16:	898b      	ldrh	r3, [r1, #12]
 800dc18:	061f      	lsls	r7, r3, #24
 800dc1a:	b09d      	sub	sp, #116	; 0x74
 800dc1c:	4680      	mov	r8, r0
 800dc1e:	460c      	mov	r4, r1
 800dc20:	4616      	mov	r6, r2
 800dc22:	d50f      	bpl.n	800dc44 <_svfiprintf_r+0x34>
 800dc24:	690b      	ldr	r3, [r1, #16]
 800dc26:	b96b      	cbnz	r3, 800dc44 <_svfiprintf_r+0x34>
 800dc28:	2140      	movs	r1, #64	; 0x40
 800dc2a:	f7ff ff3d 	bl	800daa8 <_malloc_r>
 800dc2e:	6020      	str	r0, [r4, #0]
 800dc30:	6120      	str	r0, [r4, #16]
 800dc32:	b928      	cbnz	r0, 800dc40 <_svfiprintf_r+0x30>
 800dc34:	230c      	movs	r3, #12
 800dc36:	f8c8 3000 	str.w	r3, [r8]
 800dc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3e:	e0c8      	b.n	800ddd2 <_svfiprintf_r+0x1c2>
 800dc40:	2340      	movs	r3, #64	; 0x40
 800dc42:	6163      	str	r3, [r4, #20]
 800dc44:	2300      	movs	r3, #0
 800dc46:	9309      	str	r3, [sp, #36]	; 0x24
 800dc48:	2320      	movs	r3, #32
 800dc4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc4e:	2330      	movs	r3, #48	; 0x30
 800dc50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc54:	9503      	str	r5, [sp, #12]
 800dc56:	f04f 0b01 	mov.w	fp, #1
 800dc5a:	4637      	mov	r7, r6
 800dc5c:	463d      	mov	r5, r7
 800dc5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dc62:	b10b      	cbz	r3, 800dc68 <_svfiprintf_r+0x58>
 800dc64:	2b25      	cmp	r3, #37	; 0x25
 800dc66:	d13e      	bne.n	800dce6 <_svfiprintf_r+0xd6>
 800dc68:	ebb7 0a06 	subs.w	sl, r7, r6
 800dc6c:	d00b      	beq.n	800dc86 <_svfiprintf_r+0x76>
 800dc6e:	4653      	mov	r3, sl
 800dc70:	4632      	mov	r2, r6
 800dc72:	4621      	mov	r1, r4
 800dc74:	4640      	mov	r0, r8
 800dc76:	f7ff ff71 	bl	800db5c <__ssputs_r>
 800dc7a:	3001      	adds	r0, #1
 800dc7c:	f000 80a4 	beq.w	800ddc8 <_svfiprintf_r+0x1b8>
 800dc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc82:	4453      	add	r3, sl
 800dc84:	9309      	str	r3, [sp, #36]	; 0x24
 800dc86:	783b      	ldrb	r3, [r7, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f000 809d 	beq.w	800ddc8 <_svfiprintf_r+0x1b8>
 800dc8e:	2300      	movs	r3, #0
 800dc90:	f04f 32ff 	mov.w	r2, #4294967295
 800dc94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc98:	9304      	str	r3, [sp, #16]
 800dc9a:	9307      	str	r3, [sp, #28]
 800dc9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dca0:	931a      	str	r3, [sp, #104]	; 0x68
 800dca2:	462f      	mov	r7, r5
 800dca4:	2205      	movs	r2, #5
 800dca6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dcaa:	4850      	ldr	r0, [pc, #320]	; (800ddec <_svfiprintf_r+0x1dc>)
 800dcac:	f7f2 fa98 	bl	80001e0 <memchr>
 800dcb0:	9b04      	ldr	r3, [sp, #16]
 800dcb2:	b9d0      	cbnz	r0, 800dcea <_svfiprintf_r+0xda>
 800dcb4:	06d9      	lsls	r1, r3, #27
 800dcb6:	bf44      	itt	mi
 800dcb8:	2220      	movmi	r2, #32
 800dcba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dcbe:	071a      	lsls	r2, r3, #28
 800dcc0:	bf44      	itt	mi
 800dcc2:	222b      	movmi	r2, #43	; 0x2b
 800dcc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dcc8:	782a      	ldrb	r2, [r5, #0]
 800dcca:	2a2a      	cmp	r2, #42	; 0x2a
 800dccc:	d015      	beq.n	800dcfa <_svfiprintf_r+0xea>
 800dcce:	9a07      	ldr	r2, [sp, #28]
 800dcd0:	462f      	mov	r7, r5
 800dcd2:	2000      	movs	r0, #0
 800dcd4:	250a      	movs	r5, #10
 800dcd6:	4639      	mov	r1, r7
 800dcd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcdc:	3b30      	subs	r3, #48	; 0x30
 800dcde:	2b09      	cmp	r3, #9
 800dce0:	d94d      	bls.n	800dd7e <_svfiprintf_r+0x16e>
 800dce2:	b1b8      	cbz	r0, 800dd14 <_svfiprintf_r+0x104>
 800dce4:	e00f      	b.n	800dd06 <_svfiprintf_r+0xf6>
 800dce6:	462f      	mov	r7, r5
 800dce8:	e7b8      	b.n	800dc5c <_svfiprintf_r+0x4c>
 800dcea:	4a40      	ldr	r2, [pc, #256]	; (800ddec <_svfiprintf_r+0x1dc>)
 800dcec:	1a80      	subs	r0, r0, r2
 800dcee:	fa0b f000 	lsl.w	r0, fp, r0
 800dcf2:	4318      	orrs	r0, r3
 800dcf4:	9004      	str	r0, [sp, #16]
 800dcf6:	463d      	mov	r5, r7
 800dcf8:	e7d3      	b.n	800dca2 <_svfiprintf_r+0x92>
 800dcfa:	9a03      	ldr	r2, [sp, #12]
 800dcfc:	1d11      	adds	r1, r2, #4
 800dcfe:	6812      	ldr	r2, [r2, #0]
 800dd00:	9103      	str	r1, [sp, #12]
 800dd02:	2a00      	cmp	r2, #0
 800dd04:	db01      	blt.n	800dd0a <_svfiprintf_r+0xfa>
 800dd06:	9207      	str	r2, [sp, #28]
 800dd08:	e004      	b.n	800dd14 <_svfiprintf_r+0x104>
 800dd0a:	4252      	negs	r2, r2
 800dd0c:	f043 0302 	orr.w	r3, r3, #2
 800dd10:	9207      	str	r2, [sp, #28]
 800dd12:	9304      	str	r3, [sp, #16]
 800dd14:	783b      	ldrb	r3, [r7, #0]
 800dd16:	2b2e      	cmp	r3, #46	; 0x2e
 800dd18:	d10c      	bne.n	800dd34 <_svfiprintf_r+0x124>
 800dd1a:	787b      	ldrb	r3, [r7, #1]
 800dd1c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd1e:	d133      	bne.n	800dd88 <_svfiprintf_r+0x178>
 800dd20:	9b03      	ldr	r3, [sp, #12]
 800dd22:	1d1a      	adds	r2, r3, #4
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	9203      	str	r2, [sp, #12]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	bfb8      	it	lt
 800dd2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd30:	3702      	adds	r7, #2
 800dd32:	9305      	str	r3, [sp, #20]
 800dd34:	4d2e      	ldr	r5, [pc, #184]	; (800ddf0 <_svfiprintf_r+0x1e0>)
 800dd36:	7839      	ldrb	r1, [r7, #0]
 800dd38:	2203      	movs	r2, #3
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	f7f2 fa50 	bl	80001e0 <memchr>
 800dd40:	b138      	cbz	r0, 800dd52 <_svfiprintf_r+0x142>
 800dd42:	2340      	movs	r3, #64	; 0x40
 800dd44:	1b40      	subs	r0, r0, r5
 800dd46:	fa03 f000 	lsl.w	r0, r3, r0
 800dd4a:	9b04      	ldr	r3, [sp, #16]
 800dd4c:	4303      	orrs	r3, r0
 800dd4e:	3701      	adds	r7, #1
 800dd50:	9304      	str	r3, [sp, #16]
 800dd52:	7839      	ldrb	r1, [r7, #0]
 800dd54:	4827      	ldr	r0, [pc, #156]	; (800ddf4 <_svfiprintf_r+0x1e4>)
 800dd56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd5a:	2206      	movs	r2, #6
 800dd5c:	1c7e      	adds	r6, r7, #1
 800dd5e:	f7f2 fa3f 	bl	80001e0 <memchr>
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d038      	beq.n	800ddd8 <_svfiprintf_r+0x1c8>
 800dd66:	4b24      	ldr	r3, [pc, #144]	; (800ddf8 <_svfiprintf_r+0x1e8>)
 800dd68:	bb13      	cbnz	r3, 800ddb0 <_svfiprintf_r+0x1a0>
 800dd6a:	9b03      	ldr	r3, [sp, #12]
 800dd6c:	3307      	adds	r3, #7
 800dd6e:	f023 0307 	bic.w	r3, r3, #7
 800dd72:	3308      	adds	r3, #8
 800dd74:	9303      	str	r3, [sp, #12]
 800dd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd78:	444b      	add	r3, r9
 800dd7a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd7c:	e76d      	b.n	800dc5a <_svfiprintf_r+0x4a>
 800dd7e:	fb05 3202 	mla	r2, r5, r2, r3
 800dd82:	2001      	movs	r0, #1
 800dd84:	460f      	mov	r7, r1
 800dd86:	e7a6      	b.n	800dcd6 <_svfiprintf_r+0xc6>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	3701      	adds	r7, #1
 800dd8c:	9305      	str	r3, [sp, #20]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	250a      	movs	r5, #10
 800dd92:	4638      	mov	r0, r7
 800dd94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd98:	3a30      	subs	r2, #48	; 0x30
 800dd9a:	2a09      	cmp	r2, #9
 800dd9c:	d903      	bls.n	800dda6 <_svfiprintf_r+0x196>
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d0c8      	beq.n	800dd34 <_svfiprintf_r+0x124>
 800dda2:	9105      	str	r1, [sp, #20]
 800dda4:	e7c6      	b.n	800dd34 <_svfiprintf_r+0x124>
 800dda6:	fb05 2101 	mla	r1, r5, r1, r2
 800ddaa:	2301      	movs	r3, #1
 800ddac:	4607      	mov	r7, r0
 800ddae:	e7f0      	b.n	800dd92 <_svfiprintf_r+0x182>
 800ddb0:	ab03      	add	r3, sp, #12
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	4622      	mov	r2, r4
 800ddb6:	4b11      	ldr	r3, [pc, #68]	; (800ddfc <_svfiprintf_r+0x1ec>)
 800ddb8:	a904      	add	r1, sp, #16
 800ddba:	4640      	mov	r0, r8
 800ddbc:	f7fd fdd0 	bl	800b960 <_printf_float>
 800ddc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ddc4:	4681      	mov	r9, r0
 800ddc6:	d1d6      	bne.n	800dd76 <_svfiprintf_r+0x166>
 800ddc8:	89a3      	ldrh	r3, [r4, #12]
 800ddca:	065b      	lsls	r3, r3, #25
 800ddcc:	f53f af35 	bmi.w	800dc3a <_svfiprintf_r+0x2a>
 800ddd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddd2:	b01d      	add	sp, #116	; 0x74
 800ddd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd8:	ab03      	add	r3, sp, #12
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	4622      	mov	r2, r4
 800ddde:	4b07      	ldr	r3, [pc, #28]	; (800ddfc <_svfiprintf_r+0x1ec>)
 800dde0:	a904      	add	r1, sp, #16
 800dde2:	4640      	mov	r0, r8
 800dde4:	f7fe f872 	bl	800becc <_printf_i>
 800dde8:	e7ea      	b.n	800ddc0 <_svfiprintf_r+0x1b0>
 800ddea:	bf00      	nop
 800ddec:	0800ea24 	.word	0x0800ea24
 800ddf0:	0800ea2a 	.word	0x0800ea2a
 800ddf4:	0800ea2e 	.word	0x0800ea2e
 800ddf8:	0800b961 	.word	0x0800b961
 800ddfc:	0800db5d 	.word	0x0800db5d

0800de00 <__sfputc_r>:
 800de00:	6893      	ldr	r3, [r2, #8]
 800de02:	3b01      	subs	r3, #1
 800de04:	2b00      	cmp	r3, #0
 800de06:	b410      	push	{r4}
 800de08:	6093      	str	r3, [r2, #8]
 800de0a:	da08      	bge.n	800de1e <__sfputc_r+0x1e>
 800de0c:	6994      	ldr	r4, [r2, #24]
 800de0e:	42a3      	cmp	r3, r4
 800de10:	db01      	blt.n	800de16 <__sfputc_r+0x16>
 800de12:	290a      	cmp	r1, #10
 800de14:	d103      	bne.n	800de1e <__sfputc_r+0x1e>
 800de16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de1a:	f7fe ba15 	b.w	800c248 <__swbuf_r>
 800de1e:	6813      	ldr	r3, [r2, #0]
 800de20:	1c58      	adds	r0, r3, #1
 800de22:	6010      	str	r0, [r2, #0]
 800de24:	7019      	strb	r1, [r3, #0]
 800de26:	4608      	mov	r0, r1
 800de28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de2c:	4770      	bx	lr

0800de2e <__sfputs_r>:
 800de2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de30:	4606      	mov	r6, r0
 800de32:	460f      	mov	r7, r1
 800de34:	4614      	mov	r4, r2
 800de36:	18d5      	adds	r5, r2, r3
 800de38:	42ac      	cmp	r4, r5
 800de3a:	d101      	bne.n	800de40 <__sfputs_r+0x12>
 800de3c:	2000      	movs	r0, #0
 800de3e:	e007      	b.n	800de50 <__sfputs_r+0x22>
 800de40:	463a      	mov	r2, r7
 800de42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de46:	4630      	mov	r0, r6
 800de48:	f7ff ffda 	bl	800de00 <__sfputc_r>
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d1f3      	bne.n	800de38 <__sfputs_r+0xa>
 800de50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de54 <_vfiprintf_r>:
 800de54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de58:	460c      	mov	r4, r1
 800de5a:	b09d      	sub	sp, #116	; 0x74
 800de5c:	4617      	mov	r7, r2
 800de5e:	461d      	mov	r5, r3
 800de60:	4606      	mov	r6, r0
 800de62:	b118      	cbz	r0, 800de6c <_vfiprintf_r+0x18>
 800de64:	6983      	ldr	r3, [r0, #24]
 800de66:	b90b      	cbnz	r3, 800de6c <_vfiprintf_r+0x18>
 800de68:	f7ff f9e2 	bl	800d230 <__sinit>
 800de6c:	4b7c      	ldr	r3, [pc, #496]	; (800e060 <_vfiprintf_r+0x20c>)
 800de6e:	429c      	cmp	r4, r3
 800de70:	d158      	bne.n	800df24 <_vfiprintf_r+0xd0>
 800de72:	6874      	ldr	r4, [r6, #4]
 800de74:	89a3      	ldrh	r3, [r4, #12]
 800de76:	0718      	lsls	r0, r3, #28
 800de78:	d55e      	bpl.n	800df38 <_vfiprintf_r+0xe4>
 800de7a:	6923      	ldr	r3, [r4, #16]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d05b      	beq.n	800df38 <_vfiprintf_r+0xe4>
 800de80:	2300      	movs	r3, #0
 800de82:	9309      	str	r3, [sp, #36]	; 0x24
 800de84:	2320      	movs	r3, #32
 800de86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de8a:	2330      	movs	r3, #48	; 0x30
 800de8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de90:	9503      	str	r5, [sp, #12]
 800de92:	f04f 0b01 	mov.w	fp, #1
 800de96:	46b8      	mov	r8, r7
 800de98:	4645      	mov	r5, r8
 800de9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800de9e:	b10b      	cbz	r3, 800dea4 <_vfiprintf_r+0x50>
 800dea0:	2b25      	cmp	r3, #37	; 0x25
 800dea2:	d154      	bne.n	800df4e <_vfiprintf_r+0xfa>
 800dea4:	ebb8 0a07 	subs.w	sl, r8, r7
 800dea8:	d00b      	beq.n	800dec2 <_vfiprintf_r+0x6e>
 800deaa:	4653      	mov	r3, sl
 800deac:	463a      	mov	r2, r7
 800deae:	4621      	mov	r1, r4
 800deb0:	4630      	mov	r0, r6
 800deb2:	f7ff ffbc 	bl	800de2e <__sfputs_r>
 800deb6:	3001      	adds	r0, #1
 800deb8:	f000 80c2 	beq.w	800e040 <_vfiprintf_r+0x1ec>
 800debc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800debe:	4453      	add	r3, sl
 800dec0:	9309      	str	r3, [sp, #36]	; 0x24
 800dec2:	f898 3000 	ldrb.w	r3, [r8]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	f000 80ba 	beq.w	800e040 <_vfiprintf_r+0x1ec>
 800decc:	2300      	movs	r3, #0
 800dece:	f04f 32ff 	mov.w	r2, #4294967295
 800ded2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ded6:	9304      	str	r3, [sp, #16]
 800ded8:	9307      	str	r3, [sp, #28]
 800deda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dede:	931a      	str	r3, [sp, #104]	; 0x68
 800dee0:	46a8      	mov	r8, r5
 800dee2:	2205      	movs	r2, #5
 800dee4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dee8:	485e      	ldr	r0, [pc, #376]	; (800e064 <_vfiprintf_r+0x210>)
 800deea:	f7f2 f979 	bl	80001e0 <memchr>
 800deee:	9b04      	ldr	r3, [sp, #16]
 800def0:	bb78      	cbnz	r0, 800df52 <_vfiprintf_r+0xfe>
 800def2:	06d9      	lsls	r1, r3, #27
 800def4:	bf44      	itt	mi
 800def6:	2220      	movmi	r2, #32
 800def8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800defc:	071a      	lsls	r2, r3, #28
 800defe:	bf44      	itt	mi
 800df00:	222b      	movmi	r2, #43	; 0x2b
 800df02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df06:	782a      	ldrb	r2, [r5, #0]
 800df08:	2a2a      	cmp	r2, #42	; 0x2a
 800df0a:	d02a      	beq.n	800df62 <_vfiprintf_r+0x10e>
 800df0c:	9a07      	ldr	r2, [sp, #28]
 800df0e:	46a8      	mov	r8, r5
 800df10:	2000      	movs	r0, #0
 800df12:	250a      	movs	r5, #10
 800df14:	4641      	mov	r1, r8
 800df16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df1a:	3b30      	subs	r3, #48	; 0x30
 800df1c:	2b09      	cmp	r3, #9
 800df1e:	d969      	bls.n	800dff4 <_vfiprintf_r+0x1a0>
 800df20:	b360      	cbz	r0, 800df7c <_vfiprintf_r+0x128>
 800df22:	e024      	b.n	800df6e <_vfiprintf_r+0x11a>
 800df24:	4b50      	ldr	r3, [pc, #320]	; (800e068 <_vfiprintf_r+0x214>)
 800df26:	429c      	cmp	r4, r3
 800df28:	d101      	bne.n	800df2e <_vfiprintf_r+0xda>
 800df2a:	68b4      	ldr	r4, [r6, #8]
 800df2c:	e7a2      	b.n	800de74 <_vfiprintf_r+0x20>
 800df2e:	4b4f      	ldr	r3, [pc, #316]	; (800e06c <_vfiprintf_r+0x218>)
 800df30:	429c      	cmp	r4, r3
 800df32:	bf08      	it	eq
 800df34:	68f4      	ldreq	r4, [r6, #12]
 800df36:	e79d      	b.n	800de74 <_vfiprintf_r+0x20>
 800df38:	4621      	mov	r1, r4
 800df3a:	4630      	mov	r0, r6
 800df3c:	f7fe f9d6 	bl	800c2ec <__swsetup_r>
 800df40:	2800      	cmp	r0, #0
 800df42:	d09d      	beq.n	800de80 <_vfiprintf_r+0x2c>
 800df44:	f04f 30ff 	mov.w	r0, #4294967295
 800df48:	b01d      	add	sp, #116	; 0x74
 800df4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df4e:	46a8      	mov	r8, r5
 800df50:	e7a2      	b.n	800de98 <_vfiprintf_r+0x44>
 800df52:	4a44      	ldr	r2, [pc, #272]	; (800e064 <_vfiprintf_r+0x210>)
 800df54:	1a80      	subs	r0, r0, r2
 800df56:	fa0b f000 	lsl.w	r0, fp, r0
 800df5a:	4318      	orrs	r0, r3
 800df5c:	9004      	str	r0, [sp, #16]
 800df5e:	4645      	mov	r5, r8
 800df60:	e7be      	b.n	800dee0 <_vfiprintf_r+0x8c>
 800df62:	9a03      	ldr	r2, [sp, #12]
 800df64:	1d11      	adds	r1, r2, #4
 800df66:	6812      	ldr	r2, [r2, #0]
 800df68:	9103      	str	r1, [sp, #12]
 800df6a:	2a00      	cmp	r2, #0
 800df6c:	db01      	blt.n	800df72 <_vfiprintf_r+0x11e>
 800df6e:	9207      	str	r2, [sp, #28]
 800df70:	e004      	b.n	800df7c <_vfiprintf_r+0x128>
 800df72:	4252      	negs	r2, r2
 800df74:	f043 0302 	orr.w	r3, r3, #2
 800df78:	9207      	str	r2, [sp, #28]
 800df7a:	9304      	str	r3, [sp, #16]
 800df7c:	f898 3000 	ldrb.w	r3, [r8]
 800df80:	2b2e      	cmp	r3, #46	; 0x2e
 800df82:	d10e      	bne.n	800dfa2 <_vfiprintf_r+0x14e>
 800df84:	f898 3001 	ldrb.w	r3, [r8, #1]
 800df88:	2b2a      	cmp	r3, #42	; 0x2a
 800df8a:	d138      	bne.n	800dffe <_vfiprintf_r+0x1aa>
 800df8c:	9b03      	ldr	r3, [sp, #12]
 800df8e:	1d1a      	adds	r2, r3, #4
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	9203      	str	r2, [sp, #12]
 800df94:	2b00      	cmp	r3, #0
 800df96:	bfb8      	it	lt
 800df98:	f04f 33ff 	movlt.w	r3, #4294967295
 800df9c:	f108 0802 	add.w	r8, r8, #2
 800dfa0:	9305      	str	r3, [sp, #20]
 800dfa2:	4d33      	ldr	r5, [pc, #204]	; (800e070 <_vfiprintf_r+0x21c>)
 800dfa4:	f898 1000 	ldrb.w	r1, [r8]
 800dfa8:	2203      	movs	r2, #3
 800dfaa:	4628      	mov	r0, r5
 800dfac:	f7f2 f918 	bl	80001e0 <memchr>
 800dfb0:	b140      	cbz	r0, 800dfc4 <_vfiprintf_r+0x170>
 800dfb2:	2340      	movs	r3, #64	; 0x40
 800dfb4:	1b40      	subs	r0, r0, r5
 800dfb6:	fa03 f000 	lsl.w	r0, r3, r0
 800dfba:	9b04      	ldr	r3, [sp, #16]
 800dfbc:	4303      	orrs	r3, r0
 800dfbe:	f108 0801 	add.w	r8, r8, #1
 800dfc2:	9304      	str	r3, [sp, #16]
 800dfc4:	f898 1000 	ldrb.w	r1, [r8]
 800dfc8:	482a      	ldr	r0, [pc, #168]	; (800e074 <_vfiprintf_r+0x220>)
 800dfca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfce:	2206      	movs	r2, #6
 800dfd0:	f108 0701 	add.w	r7, r8, #1
 800dfd4:	f7f2 f904 	bl	80001e0 <memchr>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d037      	beq.n	800e04c <_vfiprintf_r+0x1f8>
 800dfdc:	4b26      	ldr	r3, [pc, #152]	; (800e078 <_vfiprintf_r+0x224>)
 800dfde:	bb1b      	cbnz	r3, 800e028 <_vfiprintf_r+0x1d4>
 800dfe0:	9b03      	ldr	r3, [sp, #12]
 800dfe2:	3307      	adds	r3, #7
 800dfe4:	f023 0307 	bic.w	r3, r3, #7
 800dfe8:	3308      	adds	r3, #8
 800dfea:	9303      	str	r3, [sp, #12]
 800dfec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfee:	444b      	add	r3, r9
 800dff0:	9309      	str	r3, [sp, #36]	; 0x24
 800dff2:	e750      	b.n	800de96 <_vfiprintf_r+0x42>
 800dff4:	fb05 3202 	mla	r2, r5, r2, r3
 800dff8:	2001      	movs	r0, #1
 800dffa:	4688      	mov	r8, r1
 800dffc:	e78a      	b.n	800df14 <_vfiprintf_r+0xc0>
 800dffe:	2300      	movs	r3, #0
 800e000:	f108 0801 	add.w	r8, r8, #1
 800e004:	9305      	str	r3, [sp, #20]
 800e006:	4619      	mov	r1, r3
 800e008:	250a      	movs	r5, #10
 800e00a:	4640      	mov	r0, r8
 800e00c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e010:	3a30      	subs	r2, #48	; 0x30
 800e012:	2a09      	cmp	r2, #9
 800e014:	d903      	bls.n	800e01e <_vfiprintf_r+0x1ca>
 800e016:	2b00      	cmp	r3, #0
 800e018:	d0c3      	beq.n	800dfa2 <_vfiprintf_r+0x14e>
 800e01a:	9105      	str	r1, [sp, #20]
 800e01c:	e7c1      	b.n	800dfa2 <_vfiprintf_r+0x14e>
 800e01e:	fb05 2101 	mla	r1, r5, r1, r2
 800e022:	2301      	movs	r3, #1
 800e024:	4680      	mov	r8, r0
 800e026:	e7f0      	b.n	800e00a <_vfiprintf_r+0x1b6>
 800e028:	ab03      	add	r3, sp, #12
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	4622      	mov	r2, r4
 800e02e:	4b13      	ldr	r3, [pc, #76]	; (800e07c <_vfiprintf_r+0x228>)
 800e030:	a904      	add	r1, sp, #16
 800e032:	4630      	mov	r0, r6
 800e034:	f7fd fc94 	bl	800b960 <_printf_float>
 800e038:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e03c:	4681      	mov	r9, r0
 800e03e:	d1d5      	bne.n	800dfec <_vfiprintf_r+0x198>
 800e040:	89a3      	ldrh	r3, [r4, #12]
 800e042:	065b      	lsls	r3, r3, #25
 800e044:	f53f af7e 	bmi.w	800df44 <_vfiprintf_r+0xf0>
 800e048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e04a:	e77d      	b.n	800df48 <_vfiprintf_r+0xf4>
 800e04c:	ab03      	add	r3, sp, #12
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	4622      	mov	r2, r4
 800e052:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <_vfiprintf_r+0x228>)
 800e054:	a904      	add	r1, sp, #16
 800e056:	4630      	mov	r0, r6
 800e058:	f7fd ff38 	bl	800becc <_printf_i>
 800e05c:	e7ec      	b.n	800e038 <_vfiprintf_r+0x1e4>
 800e05e:	bf00      	nop
 800e060:	0800e8e8 	.word	0x0800e8e8
 800e064:	0800ea24 	.word	0x0800ea24
 800e068:	0800e908 	.word	0x0800e908
 800e06c:	0800e8c8 	.word	0x0800e8c8
 800e070:	0800ea2a 	.word	0x0800ea2a
 800e074:	0800ea2e 	.word	0x0800ea2e
 800e078:	0800b961 	.word	0x0800b961
 800e07c:	0800de2f 	.word	0x0800de2f

0800e080 <_sbrk_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	4c06      	ldr	r4, [pc, #24]	; (800e09c <_sbrk_r+0x1c>)
 800e084:	2300      	movs	r3, #0
 800e086:	4605      	mov	r5, r0
 800e088:	4608      	mov	r0, r1
 800e08a:	6023      	str	r3, [r4, #0]
 800e08c:	f7f4 fd86 	bl	8002b9c <_sbrk>
 800e090:	1c43      	adds	r3, r0, #1
 800e092:	d102      	bne.n	800e09a <_sbrk_r+0x1a>
 800e094:	6823      	ldr	r3, [r4, #0]
 800e096:	b103      	cbz	r3, 800e09a <_sbrk_r+0x1a>
 800e098:	602b      	str	r3, [r5, #0]
 800e09a:	bd38      	pop	{r3, r4, r5, pc}
 800e09c:	20006dfc 	.word	0x20006dfc

0800e0a0 <__sread>:
 800e0a0:	b510      	push	{r4, lr}
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0a8:	f000 f8e8 	bl	800e27c <_read_r>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	bfab      	itete	ge
 800e0b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0b2:	89a3      	ldrhlt	r3, [r4, #12]
 800e0b4:	181b      	addge	r3, r3, r0
 800e0b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0ba:	bfac      	ite	ge
 800e0bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0be:	81a3      	strhlt	r3, [r4, #12]
 800e0c0:	bd10      	pop	{r4, pc}

0800e0c2 <__swrite>:
 800e0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c6:	461f      	mov	r7, r3
 800e0c8:	898b      	ldrh	r3, [r1, #12]
 800e0ca:	05db      	lsls	r3, r3, #23
 800e0cc:	4605      	mov	r5, r0
 800e0ce:	460c      	mov	r4, r1
 800e0d0:	4616      	mov	r6, r2
 800e0d2:	d505      	bpl.n	800e0e0 <__swrite+0x1e>
 800e0d4:	2302      	movs	r3, #2
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0dc:	f000 f868 	bl	800e1b0 <_lseek_r>
 800e0e0:	89a3      	ldrh	r3, [r4, #12]
 800e0e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0ea:	81a3      	strh	r3, [r4, #12]
 800e0ec:	4632      	mov	r2, r6
 800e0ee:	463b      	mov	r3, r7
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0f6:	f000 b817 	b.w	800e128 <_write_r>

0800e0fa <__sseek>:
 800e0fa:	b510      	push	{r4, lr}
 800e0fc:	460c      	mov	r4, r1
 800e0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e102:	f000 f855 	bl	800e1b0 <_lseek_r>
 800e106:	1c43      	adds	r3, r0, #1
 800e108:	89a3      	ldrh	r3, [r4, #12]
 800e10a:	bf15      	itete	ne
 800e10c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e10e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e112:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e116:	81a3      	strheq	r3, [r4, #12]
 800e118:	bf18      	it	ne
 800e11a:	81a3      	strhne	r3, [r4, #12]
 800e11c:	bd10      	pop	{r4, pc}

0800e11e <__sclose>:
 800e11e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e122:	f000 b813 	b.w	800e14c <_close_r>
	...

0800e128 <_write_r>:
 800e128:	b538      	push	{r3, r4, r5, lr}
 800e12a:	4c07      	ldr	r4, [pc, #28]	; (800e148 <_write_r+0x20>)
 800e12c:	4605      	mov	r5, r0
 800e12e:	4608      	mov	r0, r1
 800e130:	4611      	mov	r1, r2
 800e132:	2200      	movs	r2, #0
 800e134:	6022      	str	r2, [r4, #0]
 800e136:	461a      	mov	r2, r3
 800e138:	f7f4 f961 	bl	80023fe <_write>
 800e13c:	1c43      	adds	r3, r0, #1
 800e13e:	d102      	bne.n	800e146 <_write_r+0x1e>
 800e140:	6823      	ldr	r3, [r4, #0]
 800e142:	b103      	cbz	r3, 800e146 <_write_r+0x1e>
 800e144:	602b      	str	r3, [r5, #0]
 800e146:	bd38      	pop	{r3, r4, r5, pc}
 800e148:	20006dfc 	.word	0x20006dfc

0800e14c <_close_r>:
 800e14c:	b538      	push	{r3, r4, r5, lr}
 800e14e:	4c06      	ldr	r4, [pc, #24]	; (800e168 <_close_r+0x1c>)
 800e150:	2300      	movs	r3, #0
 800e152:	4605      	mov	r5, r0
 800e154:	4608      	mov	r0, r1
 800e156:	6023      	str	r3, [r4, #0]
 800e158:	f7f4 fceb 	bl	8002b32 <_close>
 800e15c:	1c43      	adds	r3, r0, #1
 800e15e:	d102      	bne.n	800e166 <_close_r+0x1a>
 800e160:	6823      	ldr	r3, [r4, #0]
 800e162:	b103      	cbz	r3, 800e166 <_close_r+0x1a>
 800e164:	602b      	str	r3, [r5, #0]
 800e166:	bd38      	pop	{r3, r4, r5, pc}
 800e168:	20006dfc 	.word	0x20006dfc

0800e16c <_fstat_r>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4c07      	ldr	r4, [pc, #28]	; (800e18c <_fstat_r+0x20>)
 800e170:	2300      	movs	r3, #0
 800e172:	4605      	mov	r5, r0
 800e174:	4608      	mov	r0, r1
 800e176:	4611      	mov	r1, r2
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	f7f4 fce6 	bl	8002b4a <_fstat>
 800e17e:	1c43      	adds	r3, r0, #1
 800e180:	d102      	bne.n	800e188 <_fstat_r+0x1c>
 800e182:	6823      	ldr	r3, [r4, #0]
 800e184:	b103      	cbz	r3, 800e188 <_fstat_r+0x1c>
 800e186:	602b      	str	r3, [r5, #0]
 800e188:	bd38      	pop	{r3, r4, r5, pc}
 800e18a:	bf00      	nop
 800e18c:	20006dfc 	.word	0x20006dfc

0800e190 <_isatty_r>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	4c06      	ldr	r4, [pc, #24]	; (800e1ac <_isatty_r+0x1c>)
 800e194:	2300      	movs	r3, #0
 800e196:	4605      	mov	r5, r0
 800e198:	4608      	mov	r0, r1
 800e19a:	6023      	str	r3, [r4, #0]
 800e19c:	f7f4 fce5 	bl	8002b6a <_isatty>
 800e1a0:	1c43      	adds	r3, r0, #1
 800e1a2:	d102      	bne.n	800e1aa <_isatty_r+0x1a>
 800e1a4:	6823      	ldr	r3, [r4, #0]
 800e1a6:	b103      	cbz	r3, 800e1aa <_isatty_r+0x1a>
 800e1a8:	602b      	str	r3, [r5, #0]
 800e1aa:	bd38      	pop	{r3, r4, r5, pc}
 800e1ac:	20006dfc 	.word	0x20006dfc

0800e1b0 <_lseek_r>:
 800e1b0:	b538      	push	{r3, r4, r5, lr}
 800e1b2:	4c07      	ldr	r4, [pc, #28]	; (800e1d0 <_lseek_r+0x20>)
 800e1b4:	4605      	mov	r5, r0
 800e1b6:	4608      	mov	r0, r1
 800e1b8:	4611      	mov	r1, r2
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	6022      	str	r2, [r4, #0]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	f7f4 fcde 	bl	8002b80 <_lseek>
 800e1c4:	1c43      	adds	r3, r0, #1
 800e1c6:	d102      	bne.n	800e1ce <_lseek_r+0x1e>
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	b103      	cbz	r3, 800e1ce <_lseek_r+0x1e>
 800e1cc:	602b      	str	r3, [r5, #0]
 800e1ce:	bd38      	pop	{r3, r4, r5, pc}
 800e1d0:	20006dfc 	.word	0x20006dfc

0800e1d4 <__ascii_mbtowc>:
 800e1d4:	b082      	sub	sp, #8
 800e1d6:	b901      	cbnz	r1, 800e1da <__ascii_mbtowc+0x6>
 800e1d8:	a901      	add	r1, sp, #4
 800e1da:	b142      	cbz	r2, 800e1ee <__ascii_mbtowc+0x1a>
 800e1dc:	b14b      	cbz	r3, 800e1f2 <__ascii_mbtowc+0x1e>
 800e1de:	7813      	ldrb	r3, [r2, #0]
 800e1e0:	600b      	str	r3, [r1, #0]
 800e1e2:	7812      	ldrb	r2, [r2, #0]
 800e1e4:	1c10      	adds	r0, r2, #0
 800e1e6:	bf18      	it	ne
 800e1e8:	2001      	movne	r0, #1
 800e1ea:	b002      	add	sp, #8
 800e1ec:	4770      	bx	lr
 800e1ee:	4610      	mov	r0, r2
 800e1f0:	e7fb      	b.n	800e1ea <__ascii_mbtowc+0x16>
 800e1f2:	f06f 0001 	mvn.w	r0, #1
 800e1f6:	e7f8      	b.n	800e1ea <__ascii_mbtowc+0x16>

0800e1f8 <memmove>:
 800e1f8:	4288      	cmp	r0, r1
 800e1fa:	b510      	push	{r4, lr}
 800e1fc:	eb01 0302 	add.w	r3, r1, r2
 800e200:	d807      	bhi.n	800e212 <memmove+0x1a>
 800e202:	1e42      	subs	r2, r0, #1
 800e204:	4299      	cmp	r1, r3
 800e206:	d00a      	beq.n	800e21e <memmove+0x26>
 800e208:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e20c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e210:	e7f8      	b.n	800e204 <memmove+0xc>
 800e212:	4283      	cmp	r3, r0
 800e214:	d9f5      	bls.n	800e202 <memmove+0xa>
 800e216:	1881      	adds	r1, r0, r2
 800e218:	1ad2      	subs	r2, r2, r3
 800e21a:	42d3      	cmn	r3, r2
 800e21c:	d100      	bne.n	800e220 <memmove+0x28>
 800e21e:	bd10      	pop	{r4, pc}
 800e220:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e224:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e228:	e7f7      	b.n	800e21a <memmove+0x22>

0800e22a <__malloc_lock>:
 800e22a:	4770      	bx	lr

0800e22c <__malloc_unlock>:
 800e22c:	4770      	bx	lr

0800e22e <_realloc_r>:
 800e22e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e230:	4607      	mov	r7, r0
 800e232:	4614      	mov	r4, r2
 800e234:	460e      	mov	r6, r1
 800e236:	b921      	cbnz	r1, 800e242 <_realloc_r+0x14>
 800e238:	4611      	mov	r1, r2
 800e23a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e23e:	f7ff bc33 	b.w	800daa8 <_malloc_r>
 800e242:	b922      	cbnz	r2, 800e24e <_realloc_r+0x20>
 800e244:	f7ff fbe2 	bl	800da0c <_free_r>
 800e248:	4625      	mov	r5, r4
 800e24a:	4628      	mov	r0, r5
 800e24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e24e:	f000 f834 	bl	800e2ba <_malloc_usable_size_r>
 800e252:	42a0      	cmp	r0, r4
 800e254:	d20f      	bcs.n	800e276 <_realloc_r+0x48>
 800e256:	4621      	mov	r1, r4
 800e258:	4638      	mov	r0, r7
 800e25a:	f7ff fc25 	bl	800daa8 <_malloc_r>
 800e25e:	4605      	mov	r5, r0
 800e260:	2800      	cmp	r0, #0
 800e262:	d0f2      	beq.n	800e24a <_realloc_r+0x1c>
 800e264:	4631      	mov	r1, r6
 800e266:	4622      	mov	r2, r4
 800e268:	f7fd fad2 	bl	800b810 <memcpy>
 800e26c:	4631      	mov	r1, r6
 800e26e:	4638      	mov	r0, r7
 800e270:	f7ff fbcc 	bl	800da0c <_free_r>
 800e274:	e7e9      	b.n	800e24a <_realloc_r+0x1c>
 800e276:	4635      	mov	r5, r6
 800e278:	e7e7      	b.n	800e24a <_realloc_r+0x1c>
	...

0800e27c <_read_r>:
 800e27c:	b538      	push	{r3, r4, r5, lr}
 800e27e:	4c07      	ldr	r4, [pc, #28]	; (800e29c <_read_r+0x20>)
 800e280:	4605      	mov	r5, r0
 800e282:	4608      	mov	r0, r1
 800e284:	4611      	mov	r1, r2
 800e286:	2200      	movs	r2, #0
 800e288:	6022      	str	r2, [r4, #0]
 800e28a:	461a      	mov	r2, r3
 800e28c:	f7f4 fc34 	bl	8002af8 <_read>
 800e290:	1c43      	adds	r3, r0, #1
 800e292:	d102      	bne.n	800e29a <_read_r+0x1e>
 800e294:	6823      	ldr	r3, [r4, #0]
 800e296:	b103      	cbz	r3, 800e29a <_read_r+0x1e>
 800e298:	602b      	str	r3, [r5, #0]
 800e29a:	bd38      	pop	{r3, r4, r5, pc}
 800e29c:	20006dfc 	.word	0x20006dfc

0800e2a0 <__ascii_wctomb>:
 800e2a0:	b149      	cbz	r1, 800e2b6 <__ascii_wctomb+0x16>
 800e2a2:	2aff      	cmp	r2, #255	; 0xff
 800e2a4:	bf85      	ittet	hi
 800e2a6:	238a      	movhi	r3, #138	; 0x8a
 800e2a8:	6003      	strhi	r3, [r0, #0]
 800e2aa:	700a      	strbls	r2, [r1, #0]
 800e2ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800e2b0:	bf98      	it	ls
 800e2b2:	2001      	movls	r0, #1
 800e2b4:	4770      	bx	lr
 800e2b6:	4608      	mov	r0, r1
 800e2b8:	4770      	bx	lr

0800e2ba <_malloc_usable_size_r>:
 800e2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2be:	1f18      	subs	r0, r3, #4
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	bfbc      	itt	lt
 800e2c4:	580b      	ldrlt	r3, [r1, r0]
 800e2c6:	18c0      	addlt	r0, r0, r3
 800e2c8:	4770      	bx	lr
	...

0800e2cc <_init>:
 800e2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ce:	bf00      	nop
 800e2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2d2:	bc08      	pop	{r3}
 800e2d4:	469e      	mov	lr, r3
 800e2d6:	4770      	bx	lr

0800e2d8 <_fini>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	bf00      	nop
 800e2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2de:	bc08      	pop	{r3}
 800e2e0:	469e      	mov	lr, r3
 800e2e2:	4770      	bx	lr
