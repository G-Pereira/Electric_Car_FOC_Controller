
salvacao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e60c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c8  0800e7a0  0800e7a0  0001e7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f168  0800f168  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800f168  0800f168  0001f168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f170  0800f170  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f170  0800f170  0001f170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f174  0800f174  0001f174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800f178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006bc8  20000258  0800f3d0  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  20006e20  0800f3d0  00026e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1be  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b29  00000000  00000000  0003c446  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f0  00000000  00000000  0003ff70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  00041560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002496b  00000000  00000000  00042988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013dab  00000000  00000000  000672f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccd23  00000000  00000000  0007b09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147dc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b4c  00000000  00000000  00147e3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e784 	.word	0x0800e784

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	0800e784 	.word	0x0800e784

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <IMU_config>:
//includes
#include "main.h"
#include "IMU_read.h"


void IMU_config(SPI_HandleTypeDef *hspi){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	uint8_t write_words[10];

	//accelerometer config
	write_words[0]=BMX055_RESET_REG;
 8000f50:	2314      	movs	r3, #20
 8000f52:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET; //accelerometer soft reset
 8000f54:	23b6      	movs	r3, #182	; 0xb6
 8000f56:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_ACC_PMU_RANGE_REG;
 8000f58:	230f      	movs	r3, #15
 8000f5a:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_ACC_RANGE_2;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_ACC_PMU_BW_REG;
 8000f60:	2310      	movs	r3, #16
 8000f62:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_ACC_PMU_BW_7_81;
 8000f64:	2308      	movs	r3, #8
 8000f66:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_ACC_PMU_LPW_REG;
 8000f68:	2311      	movs	r3, #17
 8000f6a:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_ACC_PMU_LPW_MODE_NOMAL|BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	4833      	ldr	r0, [pc, #204]	; (8001044 <IMU_config+0xfc>)
 8000f76:	f003 fa9d 	bl	80044b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 8000f7a:	f107 010c 	add.w	r1, r7, #12
 8000f7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f82:	2208      	movs	r2, #8
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f005 fa81 	bl	800648c <HAL_SPI_Transmit>
	HAL_Delay(100);
 8000f8a:	2064      	movs	r0, #100	; 0x64
 8000f8c:	f002 f826 	bl	8002fdc <HAL_Delay>
	  	  HAL_Delay(100);
	  	  HAL_SPI_Transmit(&hspi1, write_words+4, 2, 2000);
	  	  HAL_Delay(100);
	  	  HAL_SPI_Transmit(&hspi1, write_words+6, 2, 2000);
	  	  HAL_Delay(100);*/
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2110      	movs	r1, #16
 8000f94:	482b      	ldr	r0, [pc, #172]	; (8001044 <IMU_config+0xfc>)
 8000f96:	f003 fa8d 	bl	80044b4 <HAL_GPIO_WritePin>

	// gyroscope config
	write_words[0]=BMX055_RESET_REG;
 8000f9a:	2314      	movs	r3, #20
 8000f9c:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 8000f9e:	23b6      	movs	r3, #182	; 0xb6
 8000fa0:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_GYRO_RANGE_REG;
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_GYRO_RANGE_262_4; // Select Gyro Range(262.4 LSB/°/s)
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_GYRO_BW_REG;
 8000faa:	2310      	movs	r3, #16
 8000fac:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_GYRO_BW_64; // Select Gyro BW   (32Hz)
 8000fae:	2306      	movs	r3, #6
 8000fb0:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_GYRO_LPM1_REG;
 8000fb2:	2311      	movs	r3, #17
 8000fb4:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_GYRO_LPM1_MODE_NOMAL|BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <IMU_config+0x100>)
 8000fc0:	f003 fa78 	bl	80044b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 8000fc4:	f107 010c 	add.w	r1, r7, #12
 8000fc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fcc:	2208      	movs	r2, #8
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f005 fa5c 	bl	800648c <HAL_SPI_Transmit>
	HAL_Delay(100);
 8000fd4:	2064      	movs	r0, #100	; 0x64
 8000fd6:	f002 f801 	bl	8002fdc <HAL_Delay>
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2104      	movs	r1, #4
 8000fde:	481a      	ldr	r0, [pc, #104]	; (8001048 <IMU_config+0x100>)
 8000fe0:	f003 fa68 	bl	80044b4 <HAL_GPIO_WritePin>

	// magnetometer config
	write_words[0]=BMX055_RESET_REG;
 8000fe4:	2314      	movs	r3, #20
 8000fe6:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 8000fe8:	23b6      	movs	r3, #182	; 0xb6
 8000fea:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_MAG_POW_CTL_REG;
 8000fec:	234b      	movs	r3, #75	; 0x4b
 8000fee:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_MAG_POW_CTL_SLEEP_MODE; // Select Sleep mode
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_MAG_ADV_OP_OUTPUT_REG;
 8000ff4:	234c      	movs	r3, #76	; 0x4c
 8000ff6:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_MAG_DATA_RATE_10; // (NomalMode, ODR 10Hz)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_MAG_REP_XY_REG;
 8000ffc:	2351      	movs	r3, #81	; 0x51
 8000ffe:	74bb      	strb	r3, [r7, #18]
	write_words[7]=0x04; // Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
 8001000:	2304      	movs	r3, #4
 8001002:	74fb      	strb	r3, [r7, #19]
	write_words[8]=BMX055_MAG_REP_Z_REG;
 8001004:	2352      	movs	r3, #82	; 0x52
 8001006:	753b      	strb	r3, [r7, #20]
	write_words[9]= 0x0F; // Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
 8001008:	230f      	movs	r3, #15
 800100a:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <IMU_config+0x100>)
 8001014:	f003 fa4e 	bl	80044b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 10, 2000);
 8001018:	f107 010c 	add.w	r1, r7, #12
 800101c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001020:	220a      	movs	r2, #10
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f005 fa32 	bl	800648c <HAL_SPI_Transmit>
	HAL_Delay(100);
 8001028:	2064      	movs	r0, #100	; 0x64
 800102a:	f001 ffd7 	bl	8002fdc <HAL_Delay>
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <IMU_config+0x100>)
 8001036:	f003 fa3d 	bl	80044b4 <HAL_GPIO_WritePin>

}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400

0800104c <IMU_acc_read>:

void IMU_acc_read(SPI_HandleTypeDef *hspi, int *accel_data){
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_ACC_DATA_START_REG;
 8001056:	2382      	movs	r3, #130	; 0x82
 8001058:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET); //read acceloremeter data
 800105a:	2200      	movs	r2, #0
 800105c:	2110      	movs	r1, #16
 800105e:	4836      	ldr	r0, [pc, #216]	; (8001138 <IMU_acc_read+0xec>)
 8001060:	f003 fa28 	bl	80044b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001064:	f107 0113 	add.w	r1, r7, #19
 8001068:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800106c:	2201      	movs	r2, #1
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f005 fa0c 	bl	800648c <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	e00c      	b.n	8001094 <IMU_acc_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f107 020c 	add.w	r2, r7, #12
 8001080:	18d1      	adds	r1, r2, r3
 8001082:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001086:	2201      	movs	r2, #1
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f005 fb33 	bl	80066f4 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b05      	cmp	r3, #5
 8001098:	ddef      	ble.n	800107a <IMU_acc_read+0x2e>
		//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2110      	movs	r1, #16
 800109e:	4826      	ldr	r0, [pc, #152]	; (8001138 <IMU_acc_read+0xec>)
 80010a0:	f003 fa08 	bl	80044b4 <HAL_GPIO_WritePin>
	accel_data[0]=((store_data[1]<<4)+(store_data[0]>>4));
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	7b3a      	ldrb	r2, [r7, #12]
 80010aa:	0912      	lsrs	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	441a      	add	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	601a      	str	r2, [r3, #0]
	accel_data[1]=((store_data[3]<<4)+(store_data[2]>>4));
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	011a      	lsls	r2, r3, #4
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4619      	mov	r1, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	3304      	adds	r3, #4
 80010c4:	440a      	add	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
	accel_data[2]=((store_data[5]<<4)+(store_data[4]>>4));
 80010c8:	7c7b      	ldrb	r3, [r7, #17]
 80010ca:	011a      	lsls	r2, r3, #4
 80010cc:	7c3b      	ldrb	r3, [r7, #16]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3308      	adds	r3, #8
 80010d8:	440a      	add	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 80010dc:	2064      	movs	r0, #100	; 0x64
 80010de:	f001 ff7d 	bl	8002fdc <HAL_Delay>

	if (accel_data[0] > 2047)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010ea:	db05      	blt.n	80010f8 <IMU_acc_read+0xac>
	{
		accel_data[0] -= 4096;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (accel_data[1]> 2047)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	3304      	adds	r3, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001102:	db07      	blt.n	8001114 <IMU_acc_read+0xc8>
	{
		accel_data[1] -= 4096;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3304      	adds	r3, #4
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3304      	adds	r3, #4
 800110e:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8001112:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (accel_data[2] > 2047)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3308      	adds	r3, #8
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800111e:	db07      	blt.n	8001130 <IMU_acc_read+0xe4>
	{
		accel_data[2] -= 4096;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3308      	adds	r3, #8
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3308      	adds	r3, #8
 800112a:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 800112e:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40020000 	.word	0x40020000

0800113c <IMU_gyro_read>:

void IMU_gyro_read(SPI_HandleTypeDef *hspi, int *gyro_data){
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_GYRO_DATA_START_REG;
 8001146:	2382      	movs	r3, #130	; 0x82
 8001148:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET); //read acceloremeter data
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	4833      	ldr	r0, [pc, #204]	; (800121c <IMU_gyro_read+0xe0>)
 8001150:	f003 f9b0 	bl	80044b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001154:	f107 0113 	add.w	r1, r7, #19
 8001158:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800115c:	2201      	movs	r2, #1
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f005 f994 	bl	800648c <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	e00c      	b.n	8001184 <IMU_gyro_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f107 020c 	add.w	r2, r7, #12
 8001170:	18d1      	adds	r1, r2, r3
 8001172:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001176:	2201      	movs	r2, #1
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f005 fabb 	bl	80066f4 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2b05      	cmp	r3, #5
 8001188:	ddef      	ble.n	800116a <IMU_gyro_read+0x2e>
		//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2104      	movs	r1, #4
 800118e:	4823      	ldr	r0, [pc, #140]	; (800121c <IMU_gyro_read+0xe0>)
 8001190:	f003 f990 	bl	80044b4 <HAL_GPIO_WritePin>
	gyro_data[0]=((store_data[1]<<8)+(store_data[0]));
 8001194:	7b7b      	ldrb	r3, [r7, #13]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	7b3a      	ldrb	r2, [r7, #12]
 800119a:	441a      	add	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	601a      	str	r2, [r3, #0]
	gyro_data[1]=((store_data[3]<<8)+(store_data[2]));
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021a      	lsls	r2, r3, #8
 80011a4:	7bbb      	ldrb	r3, [r7, #14]
 80011a6:	4619      	mov	r1, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3304      	adds	r3, #4
 80011ac:	440a      	add	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
	gyro_data[2]=((store_data[5]<<8)+(store_data[4]));
 80011b0:	7c7b      	ldrb	r3, [r7, #17]
 80011b2:	021a      	lsls	r2, r3, #8
 80011b4:	7c3b      	ldrb	r3, [r7, #16]
 80011b6:	4619      	mov	r1, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	3308      	adds	r3, #8
 80011bc:	440a      	add	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 80011c0:	2064      	movs	r0, #100	; 0x64
 80011c2:	f001 ff0b 	bl	8002fdc <HAL_Delay>

	if (gyro_data[0] > 32767)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011ce:	db05      	blt.n	80011dc <IMU_gyro_read+0xa0>
	{
		gyro_data[0] -= 65536;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (gyro_data[1]> 32767)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3304      	adds	r3, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011e6:	db07      	blt.n	80011f8 <IMU_gyro_read+0xbc>
	{
		gyro_data[1] -= 65536;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	3304      	adds	r3, #4
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3304      	adds	r3, #4
 80011f2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80011f6:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (gyro_data[2] > 32767)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	3308      	adds	r3, #8
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001202:	db07      	blt.n	8001214 <IMU_gyro_read+0xd8>
	{
		gyro_data[2] -= 65536;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	3308      	adds	r3, #8
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3308      	adds	r3, #8
 800120e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001212:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40020400 	.word	0x40020400

08001220 <adcInt2Volt>:
#include "adcUnitConversion.h"
#include "stdio.h"
#include "math.h"
#include "main.h"

float adcInt2Volt (unsigned long int ADCReading){
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

	//ADCVREF reference voltage = ?
	return ((float)ADCReading/(1 << 12 ))*ADCVREF;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001232:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001270 <adcInt2Volt+0x50>
 8001236:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800123a:	ee16 0a90 	vmov	r0, s13
 800123e:	f7ff f983 	bl	8000548 <__aeabi_f2d>
 8001242:	a309      	add	r3, pc, #36	; (adr r3, 8001268 <adcInt2Volt+0x48>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	f7ff f9d6 	bl	80005f8 <__aeabi_dmul>
 800124c:	4603      	mov	r3, r0
 800124e:	460c      	mov	r4, r1
 8001250:	4618      	mov	r0, r3
 8001252:	4621      	mov	r1, r4
 8001254:	f7ff fca8 	bl	8000ba8 <__aeabi_d2f>
 8001258:	4603      	mov	r3, r0
 800125a:	ee07 3a90 	vmov	s15, r3
}
 800125e:	eeb0 0a67 	vmov.f32	s0, s15
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	66666666 	.word	0x66666666
 800126c:	400a6666 	.word	0x400a6666
 8001270:	45800000 	.word	0x45800000
 8001274:	00000000 	.word	0x00000000

08001278 <motorCurrent>:


float motorCurrent (int adcReading){
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	//0.0066 sensor's scale factor
	return (adcInt2Volt(adcReading) - BIASSENSOR)/0.0066;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ffcc 	bl	8001220 <adcInt2Volt>
 8001288:	ee10 3a10 	vmov	r3, s0
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f95b 	bl	8000548 <__aeabi_f2d>
 8001292:	a30f      	add	r3, pc, #60	; (adr r3, 80012d0 <motorCurrent+0x58>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7fe fff6 	bl	8000288 <__aeabi_dsub>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4618      	mov	r0, r3
 80012a2:	4621      	mov	r1, r4
 80012a4:	a30c      	add	r3, pc, #48	; (adr r3, 80012d8 <motorCurrent+0x60>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff facf 	bl	800084c <__aeabi_ddiv>
 80012ae:	4603      	mov	r3, r0
 80012b0:	460c      	mov	r4, r1
 80012b2:	4618      	mov	r0, r3
 80012b4:	4621      	mov	r1, r4
 80012b6:	f7ff fc77 	bl	8000ba8 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	ee07 3a90 	vmov	s15, r3
}
 80012c0:	eeb0 0a67 	vmov.f32	s0, s15
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd90      	pop	{r4, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	f3af 8000 	nop.w
 80012d0:	66666666 	.word	0x66666666
 80012d4:	3ffa6666 	.word	0x3ffa6666
 80012d8:	02752546 	.word	0x02752546
 80012dc:	3f7b089a 	.word	0x3f7b089a

080012e0 <igbtTemp>:

float igbtTemp (int adcReading){
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b08c      	sub	sp, #48	; 0x30
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

	int Rmin = 160, Rmax = 16100;
 80012e8:	23a0      	movs	r3, #160	; 0xa0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ec:	f643 63e4 	movw	r3, #16100	; 0x3ee4
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
	float Vmin = 0.05, Vmax = 3.25;
 80012f2:	4b27      	ldr	r3, [pc, #156]	; (8001390 <igbtTemp+0xb0>)
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
 80012f6:	4b27      	ldr	r3, [pc, #156]	; (8001394 <igbtTemp+0xb4>)
 80012f8:	623b      	str	r3, [r7, #32]
	int Tmin = 0, Tmax = 150;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	2396      	movs	r3, #150	; 0x96
 8001300:	61bb      	str	r3, [r7, #24]

	float m, b, T;
	m = b = T = 0;
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	60fb      	str	r3, [r7, #12]

	m = 53.085;//(Tmin-Tmax)/(Vmax-Vmin);
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <igbtTemp+0xb8>)
 8001312:	60fb      	str	r3, [r7, #12]
	b = 22.025;//Tmin - m*Vmax;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <igbtTemp+0xbc>)
 8001316:	613b      	str	r3, [r7, #16]

	T = m*(adcInt2Volt(adcReading)/3.3)+b;
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f7ff f915 	bl	8000548 <__aeabi_f2d>
 800131e:	4604      	mov	r4, r0
 8001320:	460d      	mov	r5, r1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff7b 	bl	8001220 <adcInt2Volt>
 800132a:	ee10 3a10 	vmov	r3, s0
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f90a 	bl	8000548 <__aeabi_f2d>
 8001334:	a314      	add	r3, pc, #80	; (adr r3, 8001388 <igbtTemp+0xa8>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff fa87 	bl	800084c <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7ff f957 	bl	80005f8 <__aeabi_dmul>
 800134a:	4603      	mov	r3, r0
 800134c:	460c      	mov	r4, r1
 800134e:	4625      	mov	r5, r4
 8001350:	461c      	mov	r4, r3
 8001352:	6938      	ldr	r0, [r7, #16]
 8001354:	f7ff f8f8 	bl	8000548 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4620      	mov	r0, r4
 800135e:	4629      	mov	r1, r5
 8001360:	f7fe ff94 	bl	800028c <__adddf3>
 8001364:	4603      	mov	r3, r0
 8001366:	460c      	mov	r4, r1
 8001368:	4618      	mov	r0, r3
 800136a:	4621      	mov	r1, r4
 800136c:	f7ff fc1c 	bl	8000ba8 <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	617b      	str	r3, [r7, #20]

	return T;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	ee07 3a90 	vmov	s15, r3
}
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	3730      	adds	r7, #48	; 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	f3af 8000 	nop.w
 8001388:	66666666 	.word	0x66666666
 800138c:	400a6666 	.word	0x400a6666
 8001390:	3d4ccccd 	.word	0x3d4ccccd
 8001394:	40500000 	.word	0x40500000
 8001398:	4254570a 	.word	0x4254570a
 800139c:	41b03333 	.word	0x41b03333

080013a0 <motorTemp>:

float motorTemp (unsigned long int adcReading){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08c      	sub	sp, #48	; 0x30
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

	int Rmin = 1600, Rmax = 4000;   //resistance
 80013a8:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ae:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
	float Vmin = 0.05, Vmax = 3.25; //voltage
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <motorTemp+0x6c>)
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <motorTemp+0x70>)
 80013ba:	623b      	str	r3, [r7, #32]
	int Tmin=0, Tmax=150;			//temperature
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	2396      	movs	r3, #150	; 0x96
 80013c2:	61bb      	str	r3, [r7, #24]

	float m, b, Rt, T;
	m = b = Rt = T = 0;
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	60bb      	str	r3, [r7, #8]

	/*m = (Tmin-Tmax)/(Vmin-Vmax);
	b = Tmin-Vmin*m; */
	m = -119.81;
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <motorTemp+0x74>)
 80013d8:	60bb      	str	r3, [r7, #8]
	b = 365.61;
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <motorTemp+0x78>)
 80013dc:	60fb      	str	r3, [r7, #12]

	T = m*(adcInt2Volt(adcReading))+b;
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ff1e 	bl	8001220 <adcInt2Volt>
 80013e4:	eeb0 7a40 	vmov.f32	s14, s0
 80013e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f8:	edc7 7a05 	vstr	s15, [r7, #20]

	return T;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	ee07 3a90 	vmov	s15, r3

}
 8001402:	eeb0 0a67 	vmov.f32	s0, s15
 8001406:	3730      	adds	r7, #48	; 0x30
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	3d4ccccd 	.word	0x3d4ccccd
 8001410:	40500000 	.word	0x40500000
 8001414:	c2ef9eb8 	.word	0xc2ef9eb8
 8001418:	43b6ce14 	.word	0x43b6ce14

0800141c <voltageAC>:

float voltageAC (int adcReading){
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

	/*
	 * R1 = R28 = 75k
	 * R2 = R30 = 10k
	 */
	int R1 = 75000;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <voltageAC+0x50>)
 8001426:	617b      	str	r3, [r7, #20]
	int R2 = 10000;
 8001428:	f242 7310 	movw	r3, #10000	; 0x2710
 800142c:	613b      	str	r3, [r7, #16]

	float Vout = adcInt2Volt(adcReading);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fef5 	bl	8001220 <adcInt2Volt>
 8001436:	ed87 0a03 	vstr	s0, [r7, #12]

	float Vin = ((R1*R2)/R2)*Vout;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	fb02 f203 	mul.w	r2, r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	fb92 f3f3 	sdiv	r3, r2, r3
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001450:	ed97 7a03 	vldr	s14, [r7, #12]
 8001454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001458:	edc7 7a02 	vstr	s15, [r7, #8]

	return Vin;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	ee07 3a90 	vmov	s15, r3

}
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	000124f8 	.word	0x000124f8

08001470 <voltageDC>:

float voltageDC (int adcReading){
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	 * R1 = R9 = 300k
	 * R2 = R12 = 2k
	 * R3 = R10 = 39  <- negligenciar?
	 */

	int R1 = 250000;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <voltageDC+0x54>)
 800147a:	61fb      	str	r3, [r7, #28]
	int R2 = 2000;
 800147c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001480:	61bb      	str	r3, [r7, #24]
	int R3 = 39;
 8001482:	2327      	movs	r3, #39	; 0x27
 8001484:	617b      	str	r3, [r7, #20]

	float Vout = adcInt2Volt(adcReading);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fec9 	bl	8001220 <adcInt2Volt>
 800148e:	ed87 0a04 	vstr	s0, [r7, #16]

	float Vin = ((R1*R2)/R2)*Vout;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	fb02 f203 	mul.w	r2, r2, r3
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	fb92 f3f3 	sdiv	r3, r2, r3
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b0:	edc7 7a03 	vstr	s15, [r7, #12]

	return Vin;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	ee07 3a90 	vmov	s15, r3

}
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	0003d090 	.word	0x0003d090

080014c8 <pedalPos>:


float pedalPos (int adcReading){
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

	float pos = (adcInt2Volt(adcReading)/ADCVREF)*100;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fea4 	bl	8001220 <adcInt2Volt>
 80014d8:	ee10 3a10 	vmov	r3, s0
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f833 	bl	8000548 <__aeabi_f2d>
 80014e2:	a310      	add	r3, pc, #64	; (adr r3, 8001524 <pedalPos+0x5c>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f9b0 	bl	800084c <__aeabi_ddiv>
 80014ec:	4603      	mov	r3, r0
 80014ee:	460c      	mov	r4, r1
 80014f0:	4618      	mov	r0, r3
 80014f2:	4621      	mov	r1, r4
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <pedalPos+0x58>)
 80014fa:	f7ff f87d 	bl	80005f8 <__aeabi_dmul>
 80014fe:	4603      	mov	r3, r0
 8001500:	460c      	mov	r4, r1
 8001502:	4618      	mov	r0, r3
 8001504:	4621      	mov	r1, r4
 8001506:	f7ff fb4f 	bl	8000ba8 <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	60fb      	str	r3, [r7, #12]

	return pos;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	ee07 3a90 	vmov	s15, r3

}
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	40590000 	.word	0x40590000
 8001524:	66666666 	.word	0x66666666
 8001528:	400a6666 	.word	0x400a6666
 800152c:	00000000 	.word	0x00000000

08001530 <rms>:

float rms (float vector[10]){
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

	float sum = vector[0];
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]

	for (int i=1; i>10; i++){
 800153e:	2301      	movs	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	e00e      	b.n	8001562 <rms+0x32>
		sum = sum + vector[i];
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ed97 7a03 	vldr	s14, [r7, #12]
 8001554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001558:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i=1; i>10; i++){
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	3301      	adds	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b0a      	cmp	r3, #10
 8001566:	dced      	bgt.n	8001544 <rms+0x14>
	}

	return sqrt(sum*0.1);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7fe ffed 	bl	8000548 <__aeabi_f2d>
 800156e:	a30e      	add	r3, pc, #56	; (adr r3, 80015a8 <rms+0x78>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f840 	bl	80005f8 <__aeabi_dmul>
 8001578:	4603      	mov	r3, r0
 800157a:	460c      	mov	r4, r1
 800157c:	ec44 3b17 	vmov	d7, r3, r4
 8001580:	eeb0 0a47 	vmov.f32	s0, s14
 8001584:	eef0 0a67 	vmov.f32	s1, s15
 8001588:	f00c fff0 	bl	800e56c <sqrt>
 800158c:	ec54 3b10 	vmov	r3, r4, d0
 8001590:	4618      	mov	r0, r3
 8001592:	4621      	mov	r1, r4
 8001594:	f7ff fb08 	bl	8000ba8 <__aeabi_d2f>
 8001598:	4603      	mov	r3, r0
 800159a:	ee07 3a90 	vmov	s15, r3

}
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd90      	pop	{r4, r7, pc}
 80015a8:	9999999a 	.word	0x9999999a
 80015ac:	3fb99999 	.word	0x3fb99999

080015b0 <stateValue>:

 int stateValue (int adcReading){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

	 int state = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]

	 if (adcInt2Volt(adcReading) > 1.65){ //alterar offset
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fe2e 	bl	8001220 <adcInt2Volt>
 80015c4:	ee10 3a10 	vmov	r3, s0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffbd 	bl	8000548 <__aeabi_f2d>
 80015ce:	a30a      	add	r3, pc, #40	; (adr r3, 80015f8 <stateValue+0x48>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff faa0 	bl	8000b18 <__aeabi_dcmpgt>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <stateValue+0x34>
		 state = 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	e001      	b.n	80015e8 <stateValue+0x38>
	 } else {
		 state = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
	 }

	 return state;
 80015e8:	68fb      	ldr	r3, [r7, #12]

 }
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	f3af 8000 	nop.w
 80015f8:	66666666 	.word	0x66666666
 80015fc:	3ffa6666 	.word	0x3ffa6666

08001600 <determineState>:

int determineState(int stateA, int stateB){
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	int stateM;

	if(stateA == 1 && stateB == 1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d104      	bne.n	800161a <determineState+0x1a>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <determineState+0x1a>
		stateM = 1;
 8001616:	2301      	movs	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
	if(stateA == 1 && stateB == 0)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d104      	bne.n	800162a <determineState+0x2a>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <determineState+0x2a>
		stateM = 2;
 8001626:	2302      	movs	r3, #2
 8001628:	60fb      	str	r3, [r7, #12]
	if(stateA == 0 && stateB == 0)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d104      	bne.n	800163a <determineState+0x3a>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <determineState+0x3a>
		stateM = 3;
 8001636:	2303      	movs	r3, #3
 8001638:	60fb      	str	r3, [r7, #12]
	if(stateA == 0 && stateB == 1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d104      	bne.n	800164a <determineState+0x4a>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <determineState+0x4a>
		stateM = 4;
 8001646:	2304      	movs	r3, #4
 8001648:	60fb      	str	r3, [r7, #12]

	return stateM;
 800164a:	68fb      	ldr	r3, [r7, #12]


}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <updateCounter>:

void updateCounter(int stateA, int stateB, int *pstate, int *dir, int *pulses){
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]

	int state = determineState(stateA, stateB);
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff ffc9 	bl	8001600 <determineState>
 800166e:	6178      	str	r0, [r7, #20]

	switch(state){
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3b01      	subs	r3, #1
 8001674:	2b03      	cmp	r3, #3
 8001676:	d840      	bhi.n	80016fa <updateCounter+0xa2>
 8001678:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <updateCounter+0x28>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	08001691 	.word	0x08001691
 8001684:	080016a9 	.word	0x080016a9
 8001688:	080016c1 	.word	0x080016c1
 800168c:	080016d9 	.word	0x080016d9
		  case 1:
			  if (pstate == 2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d102      	bne.n	800169c <updateCounter+0x44>
				  dir = -1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	603b      	str	r3, [r7, #0]
			  if (pstate == 4)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d126      	bne.n	80016f0 <updateCounter+0x98>
				  dir = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
			  break;
 80016a6:	e023      	b.n	80016f0 <updateCounter+0x98>
		  case 2:
			  if (pstate == 1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <updateCounter+0x5a>
				  dir = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
			  if (pstate == 3)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d11d      	bne.n	80016f4 <updateCounter+0x9c>
				  dir = -1;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	603b      	str	r3, [r7, #0]
			  break;
 80016be:	e019      	b.n	80016f4 <updateCounter+0x9c>
		  case 3:
			  if (pstate == 2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d101      	bne.n	80016ca <updateCounter+0x72>
				  dir = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
			  if (pstate == 4)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d113      	bne.n	80016f8 <updateCounter+0xa0>
				  dir = -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
 80016d4:	603b      	str	r3, [r7, #0]
			  break;
 80016d6:	e00f      	b.n	80016f8 <updateCounter+0xa0>
		  case 4:
			  if(pstate == 1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d102      	bne.n	80016e4 <updateCounter+0x8c>
				  dir = -1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	603b      	str	r3, [r7, #0]
			  if(pstate == 4)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d107      	bne.n	80016fa <updateCounter+0xa2>
				  dir = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	e004      	b.n	80016fa <updateCounter+0xa2>
			  break;
 80016f0:	bf00      	nop
 80016f2:	e002      	b.n	80016fa <updateCounter+0xa2>
			  break;
 80016f4:	bf00      	nop
 80016f6:	e000      	b.n	80016fa <updateCounter+0xa2>
			  break;
 80016f8:	bf00      	nop
		}

	pulses++;
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	3304      	adds	r3, #4
 80016fe:	623b      	str	r3, [r7, #32]
	pstate = state;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	607b      	str	r3, [r7, #4]


}
 8001704:	bf00      	nop
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001714:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001718:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001724:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001728:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800172c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00b      	beq.n	800174c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001734:	e000      	b.n	8001738 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001736:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001738:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f9      	beq.n	8001736 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001742:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0c      	ldr	r2, [pc, #48]	; (800179c <HAL_ADC_ConvCpltCallback+0x40>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d110      	bne.n	8001790 <HAL_ADC_ConvCpltCallback+0x34>
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e00a      	b.n	800178a <HAL_ADC_ConvCpltCallback+0x2e>
			{
				adc_dma[i]=buffer_dma[i];
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_ADC_ConvCpltCallback+0x44>)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800177c:	4909      	ldr	r1, [pc, #36]	; (80017a4 <HAL_ADC_ConvCpltCallback+0x48>)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b0b      	cmp	r3, #11
 800178e:	ddf1      	ble.n	8001774 <HAL_ADC_ConvCpltCallback+0x18>
			}

		//printf("buff %lu\n", adc_dma[0]);
	}
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40012000 	.word	0x40012000
 80017a0:	20001af4 	.word	0x20001af4
 80017a4:	200017f4 	.word	0x200017f4

080017a8 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

	/* passa a fazer-se aqui?
	sprintf(str, "%f ", speed);
	update_file("encoder_data.txt", str, get_timestamp(&hrtc, &currentTime, &currentDate), stamp, &(fil[12]), &bw); */

	float T = 0.25; //assumindo que periodo é 250ms
 80017b0:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80017b4:	60fb      	str	r3, [r7, #12]
	speed = ((pulses/8)*60)/T;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da00      	bge.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x18>
 80017be:	3307      	adds	r3, #7
 80017c0:	10db      	asrs	r3, r3, #3
 80017c2:	461a      	mov	r2, r3
 80017c4:	4613      	mov	r3, r2
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80017d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017de:	edc3 7a00 	vstr	s15, [r3]
	pulses = 0;
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]



}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	200002a8 	.word	0x200002a8
 80017f8:	20000288 	.word	0x20000288

080017fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b09b      	sub	sp, #108	; 0x6c
 8001800:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001802:	f001 fb79 	bl	8002ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001806:	f000 fc21 	bl	800204c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  printf("hallo");
 800180a:	485a      	ldr	r0, [pc, #360]	; (8001974 <main+0x178>)
 800180c:	f00a fdbe 	bl	800c38c <iprintf>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001810:	f000 fe88 	bl	8002524 <MX_GPIO_Init>
  MX_DMA_Init();
 8001814:	f000 fe56 	bl	80024c4 <MX_DMA_Init>
  MX_SPI2_Init();
 8001818:	f000 fd96 	bl	8002348 <MX_SPI2_Init>
  MX_ADC1_Init();
 800181c:	f000 fc88 	bl	8002130 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8001820:	f000 fd72 	bl	8002308 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001824:	f006 fc24 	bl	8008070 <MX_FATFS_Init>
  MX_TIM6_Init();
 8001828:	f000 fe16 	bl	8002458 <MX_TIM6_Init>
  MX_TIM2_Init();
 800182c:	f000 fdc2 	bl	80023b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 8001830:	2201      	movs	r2, #1
 8001832:	2110      	movs	r1, #16
 8001834:	4850      	ldr	r0, [pc, #320]	; (8001978 <main+0x17c>)
 8001836:	f002 fe3d 	bl	80044b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 800183a:	2201      	movs	r2, #1
 800183c:	2104      	movs	r1, #4
 800183e:	484f      	ldr	r0, [pc, #316]	; (800197c <main+0x180>)
 8001840:	f002 fe38 	bl	80044b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800184a:	484c      	ldr	r0, [pc, #304]	; (800197c <main+0x180>)
 800184c:	f002 fe32 	bl	80044b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001856:	4849      	ldr	r0, [pc, #292]	; (800197c <main+0x180>)
 8001858:	f002 fe2c 	bl	80044b4 <HAL_GPIO_WritePin>

  fresult = f_mount(&fs, "", 0 );
 800185c:	2200      	movs	r2, #0
 800185e:	4948      	ldr	r1, [pc, #288]	; (8001980 <main+0x184>)
 8001860:	4848      	ldr	r0, [pc, #288]	; (8001984 <main+0x188>)
 8001862:	f009 f8f1 	bl	800aa48 <f_mount>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <main+0x18c>)
 800186c:	701a      	strb	r2, [r3, #0]
  if(fresult == FR_OK){
 800186e:	4b46      	ldr	r3, [pc, #280]	; (8001988 <main+0x18c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <main+0x80>
	  printf("Mount feito\n");
 8001876:	4845      	ldr	r0, [pc, #276]	; (800198c <main+0x190>)
 8001878:	f00a fdfc 	bl	800c474 <puts>
  }
  fresult = f_open(&fil, "agora17.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800187c:	220a      	movs	r2, #10
 800187e:	4944      	ldr	r1, [pc, #272]	; (8001990 <main+0x194>)
 8001880:	4844      	ldr	r0, [pc, #272]	; (8001994 <main+0x198>)
 8001882:	f009 f927 	bl	800aad4 <f_open>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <main+0x18c>)
 800188c:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK){
 800188e:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <main+0x18c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <main+0xa0>
  	  printf("agora17.txt falhou\n");
 8001896:	4840      	ldr	r0, [pc, #256]	; (8001998 <main+0x19c>)
 8001898:	f00a fdec 	bl	800c474 <puts>
  }
  fresult = f_printf(&fil, "kay\n");
 800189c:	493f      	ldr	r1, [pc, #252]	; (800199c <main+0x1a0>)
 800189e:	483d      	ldr	r0, [pc, #244]	; (8001994 <main+0x198>)
 80018a0:	f009 fd98 	bl	800b3d4 <f_printf>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b37      	ldr	r3, [pc, #220]	; (8001988 <main+0x18c>)
 80018aa:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK){
 80018ac:	4b36      	ldr	r3, [pc, #216]	; (8001988 <main+0x18c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d002      	beq.n	80018ba <main+0xbe>
	  printf("agora17.txt fprintf falhou\n");
 80018b4:	483a      	ldr	r0, [pc, #232]	; (80019a0 <main+0x1a4>)
 80018b6:	f00a fddd 	bl	800c474 <puts>
  }
  f_close(&fil);
 80018ba:	4836      	ldr	r0, [pc, #216]	; (8001994 <main+0x198>)
 80018bc:	f009 fce8 	bl	800b290 <f_close>


  fresult = update_file("test.txt", "hey\n", "", "", &fil, &bw);
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <main+0x1a8>)
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <main+0x198>)
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <main+0x184>)
 80018ca:	4a2d      	ldr	r2, [pc, #180]	; (8001980 <main+0x184>)
 80018cc:	4936      	ldr	r1, [pc, #216]	; (80019a8 <main+0x1ac>)
 80018ce:	4837      	ldr	r0, [pc, #220]	; (80019ac <main+0x1b0>)
 80018d0:	f000 fefa 	bl	80026c8 <update_file>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <main+0x18c>)
 80018da:	701a      	strb	r2, [r3, #0]
  if(fresult!=FR_OK){
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <main+0x18c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <main+0xee>
	  printf("test.txt falhou\n");
 80018e4:	4832      	ldr	r0, [pc, #200]	; (80019b0 <main+0x1b4>)
 80018e6:	f00a fdc5 	bl	800c474 <puts>
  }

  char str2[30];

  IMU_config(&hspi2);
 80018ea:	4832      	ldr	r0, [pc, #200]	; (80019b4 <main+0x1b8>)
 80018ec:	f7ff fb2c 	bl	8000f48 <IMU_config>

  HAL_TIM_Base_Start_IT(&htim6);
 80018f0:	4831      	ldr	r0, [pc, #196]	; (80019b8 <main+0x1bc>)
 80018f2:	f005 fae6 	bl	8006ec2 <HAL_TIM_Base_Start_IT>

  //Initialize encoder mode
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80018f6:	213c      	movs	r1, #60	; 0x3c
 80018f8:	4830      	ldr	r0, [pc, #192]	; (80019bc <main+0x1c0>)
 80018fa:	f005 fb98 	bl	800702e <HAL_TIM_Encoder_Start>
  tick = HAL_GetTick();
 80018fe:	f001 fb61 	bl	8002fc4 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <main+0x1c4>)
 8001906:	601a      	str	r2, [r3, #0]
  counter1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001908:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <main+0x1c0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	4a2d      	ldr	r2, [pc, #180]	; (80019c4 <main+0x1c8>)
 8001910:	6013      	str	r3, [r2, #0]

  uint8_t aux[5], aux2[1], aux3[1], str3[4], str[5];
  uint8_t ref[5];
    aux[0]=0b10000001;
 8001912:	2381      	movs	r3, #129	; 0x81
 8001914:	773b      	strb	r3, [r7, #28]
    for(int i=1; i<=4; i++){
 8001916:	2301      	movs	r3, #1
 8001918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800191a:	e008      	b.n	800192e <main+0x132>
  	  aux[i]=0b00000000;
 800191c:	f107 021c 	add.w	r2, r7, #28
 8001920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001922:	4413      	add	r3, r2
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
    for(int i=1; i<=4; i++){
 8001928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800192a:	3301      	adds	r3, #1
 800192c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800192e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001930:	2b04      	cmp	r3, #4
 8001932:	ddf3      	ble.n	800191c <main+0x120>
    }
    aux2[0]=0b00000000;
 8001934:	2300      	movs	r3, #0
 8001936:	763b      	strb	r3, [r7, #24]


	HAL_ADC_Start_DMA(&hadc1, buffer_dma, NR_ADC_CHANNELS);
 8001938:	220c      	movs	r2, #12
 800193a:	4923      	ldr	r1, [pc, #140]	; (80019c8 <main+0x1cc>)
 800193c:	4823      	ldr	r0, [pc, #140]	; (80019cc <main+0x1d0>)
 800193e:	f001 fbb3 	bl	80030a8 <HAL_ADC_Start_DMA>


	fresult = update_file("test2.txt", "hey", "", "", &fil, &bw);
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <main+0x1a8>)
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <main+0x198>)
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <main+0x184>)
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <main+0x184>)
 800194e:	4920      	ldr	r1, [pc, #128]	; (80019d0 <main+0x1d4>)
 8001950:	4820      	ldr	r0, [pc, #128]	; (80019d4 <main+0x1d8>)
 8001952:	f000 feb9 	bl	80026c8 <update_file>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <main+0x18c>)
 800195c:	701a      	strb	r2, [r3, #0]
	if(fresult!=FR_OK){
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <main+0x18c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <main+0x170>
		printf("test.txt falhou\n");
 8001966:	4812      	ldr	r0, [pc, #72]	; (80019b0 <main+0x1b4>)
 8001968:	f00a fd84 	bl	800c474 <puts>
	}

    for(int i=0; i<4; i++){
 800196c:	2300      	movs	r3, #0
 800196e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001970:	e03f      	b.n	80019f2 <main+0x1f6>
 8001972:	bf00      	nop
 8001974:	0800e7a0 	.word	0x0800e7a0
 8001978:	40020000 	.word	0x40020000
 800197c:	40020400 	.word	0x40020400
 8001980:	0800e7a8 	.word	0x0800e7a8
 8001984:	200007bc 	.word	0x200007bc
 8001988:	20001c6c 	.word	0x20001c6c
 800198c:	0800e7ac 	.word	0x0800e7ac
 8001990:	0800e7b8 	.word	0x0800e7b8
 8001994:	20002d48 	.word	0x20002d48
 8001998:	0800e7c4 	.word	0x0800e7c4
 800199c:	0800e7d8 	.word	0x0800e7d8
 80019a0:	0800e7e0 	.word	0x0800e7e0
 80019a4:	20001be0 	.word	0x20001be0
 80019a8:	0800e7fc 	.word	0x0800e7fc
 80019ac:	0800e804 	.word	0x0800e804
 80019b0:	0800e810 	.word	0x0800e810
 80019b4:	20000760 	.word	0x20000760
 80019b8:	20001b84 	.word	0x20001b84
 80019bc:	20002ca0 	.word	0x20002ca0
 80019c0:	20000284 	.word	0x20000284
 80019c4:	20000280 	.word	0x20000280
 80019c8:	20001af4 	.word	0x20001af4
 80019cc:	20001844 	.word	0x20001844
 80019d0:	0800e820 	.word	0x0800e820
 80019d4:	0800e824 	.word	0x0800e824
    	  printf("aux %d - %d\n", i, aux[i]);
 80019d8:	f107 021c 	add.w	r2, r7, #28
 80019dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019de:	4413      	add	r3, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80019e6:	489f      	ldr	r0, [pc, #636]	; (8001c64 <main+0x468>)
 80019e8:	f00a fcd0 	bl	800c38c <iprintf>
    for(int i=0; i<4; i++){
 80019ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ee:	3301      	adds	r3, #1
 80019f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80019f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	ddef      	ble.n	80019d8 <main+0x1dc>
    /* USER CODE BEGIN 3 */


	  //printf("time_subsec %lu\n", time_subsec);

	  uint32_t read=adc_dma[0];
 80019f8:	4b9b      	ldr	r3, [pc, #620]	; (8001c68 <main+0x46c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  motor_temp = motorTemp(read);
 80019fe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a00:	f7ff fcce 	bl	80013a0 <motorTemp>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
 8001a08:	4b98      	ldr	r3, [pc, #608]	; (8001c6c <main+0x470>)
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
	  printf("temp %f\n", motor_temp);
 8001a0e:	4b97      	ldr	r3, [pc, #604]	; (8001c6c <main+0x470>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd98 	bl	8000548 <__aeabi_f2d>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	4893      	ldr	r0, [pc, #588]	; (8001c70 <main+0x474>)
 8001a22:	f00a fcb3 	bl	800c38c <iprintf>
	  read=adc_dma[1];
 8001a26:	4b90      	ldr	r3, [pc, #576]	; (8001c68 <main+0x46c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  float brk = pedalPos(read);
 8001a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fd4a 	bl	80014c8 <pedalPos>
 8001a34:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	  printf("brk %f", brk);
 8001a38:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a3a:	f7fe fd85 	bl	8000548 <__aeabi_f2d>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	460c      	mov	r4, r1
 8001a42:	461a      	mov	r2, r3
 8001a44:	4623      	mov	r3, r4
 8001a46:	488b      	ldr	r0, [pc, #556]	; (8001c74 <main+0x478>)
 8001a48:	f00a fca0 	bl	800c38c <iprintf>
	  read=adc_dma[2];
 8001a4c:	4b86      	ldr	r3, [pc, #536]	; (8001c68 <main+0x46c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	64fb      	str	r3, [r7, #76]	; 0x4c
	  float acc = pedalPos(read);
 8001a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fd37 	bl	80014c8 <pedalPos>
 8001a5a:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	  printf("acc %f", acc);
 8001a5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a60:	f7fe fd72 	bl	8000548 <__aeabi_f2d>
 8001a64:	4603      	mov	r3, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	4882      	ldr	r0, [pc, #520]	; (8001c78 <main+0x47c>)
 8001a6e:	f00a fc8d 	bl	800c38c <iprintf>

	  read=adc_dma[3];
 8001a72:	4b7d      	ldr	r3, [pc, #500]	; (8001c68 <main+0x46c>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	64fb      	str	r3, [r7, #76]	; 0x4c
	  current_ph1 = motorCurrent(read);
 8001a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fbfc 	bl	8001278 <motorCurrent>
 8001a80:	eef0 7a40 	vmov.f32	s15, s0
 8001a84:	4b7d      	ldr	r3, [pc, #500]	; (8001c7c <main+0x480>)
 8001a86:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph1[f] = current_ph1*current_ph1;
 8001a8a:	4b7c      	ldr	r3, [pc, #496]	; (8001c7c <main+0x480>)
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	4b7a      	ldr	r3, [pc, #488]	; (8001c7c <main+0x480>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	4b7a      	ldr	r3, [pc, #488]	; (8001c80 <main+0x484>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9e:	4a79      	ldr	r2, [pc, #484]	; (8001c84 <main+0x488>)
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	edc3 7a00 	vstr	s15, [r3]

	  printf("current1 %ld", c1);
 8001aa8:	4b77      	ldr	r3, [pc, #476]	; (8001c88 <main+0x48c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4877      	ldr	r0, [pc, #476]	; (8001c8c <main+0x490>)
 8001ab0:	f00a fc6c 	bl	800c38c <iprintf>
	  read=adc_dma[4];
 8001ab4:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <main+0x46c>)
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  current_ph2 = motorCurrent(read);
 8001aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fbdb 	bl	8001278 <motorCurrent>
 8001ac2:	eef0 7a40 	vmov.f32	s15, s0
 8001ac6:	4b72      	ldr	r3, [pc, #456]	; (8001c90 <main+0x494>)
 8001ac8:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph2[f] = current_ph2*current_ph2;
 8001acc:	4b70      	ldr	r3, [pc, #448]	; (8001c90 <main+0x494>)
 8001ace:	ed93 7a00 	vldr	s14, [r3]
 8001ad2:	4b6f      	ldr	r3, [pc, #444]	; (8001c90 <main+0x494>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	4b69      	ldr	r3, [pc, #420]	; (8001c80 <main+0x484>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae0:	4a6c      	ldr	r2, [pc, #432]	; (8001c94 <main+0x498>)
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[5];
 8001aea:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <main+0x46c>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	64fb      	str	r3, [r7, #76]	; 0x4c
	  current_ph3 = motorCurrent(read);
 8001af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fbc0 	bl	8001278 <motorCurrent>
 8001af8:	eef0 7a40 	vmov.f32	s15, s0
 8001afc:	4b66      	ldr	r3, [pc, #408]	; (8001c98 <main+0x49c>)
 8001afe:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph3[f] = current_ph3*current_ph3;
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <main+0x49c>)
 8001b04:	ed93 7a00 	vldr	s14, [r3]
 8001b08:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <main+0x49c>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	; (8001c80 <main+0x484>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b16:	4a61      	ldr	r2, [pc, #388]	; (8001c9c <main+0x4a0>)
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[6];
 8001b20:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <main+0x46c>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	64fb      	str	r3, [r7, #76]	; 0x4c
	  conv_temp = igbtTemp(read);
 8001b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fbd9 	bl	80012e0 <igbtTemp>
 8001b2e:	eef0 7a40 	vmov.f32	s15, s0
 8001b32:	4b5b      	ldr	r3, [pc, #364]	; (8001ca0 <main+0x4a4>)
 8001b34:	edc3 7a00 	vstr	s15, [r3]
	  printf("temp %f\n", conv_temp);
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <main+0x4a4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd03 	bl	8000548 <__aeabi_f2d>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	461a      	mov	r2, r3
 8001b48:	4623      	mov	r3, r4
 8001b4a:	4849      	ldr	r0, [pc, #292]	; (8001c70 <main+0x474>)
 8001b4c:	f00a fc1e 	bl	800c38c <iprintf>
	  read=adc_dma[7];
 8001b50:	4b45      	ldr	r3, [pc, #276]	; (8001c68 <main+0x46c>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	64fb      	str	r3, [r7, #76]	; 0x4c
	  dc_voltage=voltageDC(read);
 8001b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fc89 	bl	8001470 <voltageDC>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <main+0x4a8>)
 8001b64:	edc3 7a00 	vstr	s15, [r3]
	  read=adc_dma[8];
 8001b68:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <main+0x46c>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  dc_current=motorCurrent(read); //função corrente dc?
 8001b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fb81 	bl	8001278 <motorCurrent>
 8001b76:	eef0 7a40 	vmov.f32	s15, s0
 8001b7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ca8 <main+0x4ac>)
 8001b7c:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[9];
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <main+0x46c>)
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	64fb      	str	r3, [r7, #76]	; 0x4c
	  voltage_ph1=voltageAC(read);
 8001b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fc47 	bl	800141c <voltageAC>
 8001b8e:	eef0 7a40 	vmov.f32	s15, s0
 8001b92:	4b46      	ldr	r3, [pc, #280]	; (8001cac <main+0x4b0>)
 8001b94:	edc3 7a00 	vstr	s15, [r3]
	  read=adc_dma[10];
 8001b98:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <main+0x46c>)
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  voltage_ph2=voltageAC(read);
 8001b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fc3b 	bl	800141c <voltageAC>
 8001ba6:	eef0 7a40 	vmov.f32	s15, s0
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <main+0x4b4>)
 8001bac:	edc3 7a00 	vstr	s15, [r3]
	  read=adc_dma[11];
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <main+0x46c>)
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  voltage_ph3=voltageAC(read);
 8001bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fc2f 	bl	800141c <voltageAC>
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <main+0x4b8>)
 8001bc4:	edc3 7a00 	vstr	s15, [r3]

	  //leitura do encoder
	  read = adc_dma[12]; //encoder signal A
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <main+0x46c>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  stateA = stateValue(read);
 8001bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fced 	bl	80015b0 <stateValue>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <main+0x4bc>)
 8001bda:	601a      	str	r2, [r3, #0]
	  read = adc_dma[13]; //encoder signal B
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <main+0x46c>)
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  stateB = stateValue(read);
 8001be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fce3 	bl	80015b0 <stateValue>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <main+0x4c0>)
 8001bee:	601a      	str	r2, [r3, #0]
	  if((stateA != pstateA) || (stateB != pstateB)){
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <main+0x4bc>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <main+0x4c4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d105      	bne.n	8001c08 <main+0x40c>
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <main+0x4c0>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <main+0x4c8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d01d      	beq.n	8001c44 <main+0x448>
		  if(stateA != pstateA){
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <main+0x4bc>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <main+0x4c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d003      	beq.n	8001c1c <main+0x420>
			  pstateA = stateA;
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <main+0x4bc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a29      	ldr	r2, [pc, #164]	; (8001cc0 <main+0x4c4>)
 8001c1a:	6013      	str	r3, [r2, #0]
		  }
		  if (stateB != pstateB){
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <main+0x4c0>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <main+0x4c8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d003      	beq.n	8001c30 <main+0x434>
			  pstateB = stateB;
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <main+0x4c0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <main+0x4c8>)
 8001c2e:	6013      	str	r3, [r2, #0]
		  }
		  updateCounter(stateA, stateB, &pstate, &dir, &pulses);
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <main+0x4bc>)
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <main+0x4c0>)
 8001c36:	6819      	ldr	r1, [r3, #0]
 8001c38:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <main+0x4cc>)
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <main+0x4d0>)
 8001c3e:	4a24      	ldr	r2, [pc, #144]	; (8001cd0 <main+0x4d4>)
 8001c40:	f7ff fd0a 	bl	8001658 <updateCounter>





	  if(f==4){
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <main+0x484>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d145      	bne.n	8001cd8 <main+0x4dc>
		  current1_rms = rms(rms_current_ph1);
 8001c4c:	480d      	ldr	r0, [pc, #52]	; (8001c84 <main+0x488>)
 8001c4e:	f7ff fc6f 	bl	8001530 <rms>
 8001c52:	eef0 7a40 	vmov.f32	s15, s0
 8001c56:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <main+0x4d8>)
 8001c58:	edc3 7a00 	vstr	s15, [r3]
		  f=0;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <main+0x484>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e03e      	b.n	8001ce2 <main+0x4e6>
 8001c64:	0800e830 	.word	0x0800e830
 8001c68:	200017f4 	.word	0x200017f4
 8001c6c:	200006f8 	.word	0x200006f8
 8001c70:	0800e840 	.word	0x0800e840
 8001c74:	0800e84c 	.word	0x0800e84c
 8001c78:	0800e854 	.word	0x0800e854
 8001c7c:	20001824 	.word	0x20001824
 8001c80:	20000290 	.word	0x20000290
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20001890 	.word	0x20001890
 8001c8c:	0800e85c 	.word	0x0800e85c
 8001c90:	20001834 	.word	0x20001834
 8001c94:	20000028 	.word	0x20000028
 8001c98:	20001840 	.word	0x20001840
 8001c9c:	20000050 	.word	0x20000050
 8001ca0:	20001830 	.word	0x20001830
 8001ca4:	20001c68 	.word	0x20001c68
 8001ca8:	20001bd0 	.word	0x20001bd0
 8001cac:	200007b8 	.word	0x200007b8
 8001cb0:	2000183c 	.word	0x2000183c
 8001cb4:	20001838 	.word	0x20001838
 8001cb8:	20000294 	.word	0x20000294
 8001cbc:	20000298 	.word	0x20000298
 8001cc0:	2000029c 	.word	0x2000029c
 8001cc4:	200002a0 	.word	0x200002a0
 8001cc8:	200002a8 	.word	0x200002a8
 8001ccc:	200002ac 	.word	0x200002ac
 8001cd0:	200002a4 	.word	0x200002a4
 8001cd4:	2000028c 	.word	0x2000028c
	  } else {
		  f++;
 8001cd8:	4ba4      	ldr	r3, [pc, #656]	; (8001f6c <main+0x770>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	4aa3      	ldr	r2, [pc, #652]	; (8001f6c <main+0x770>)
 8001ce0:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
	  }
	  else if(brk>50)*/


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce8:	48a1      	ldr	r0, [pc, #644]	; (8001f70 <main+0x774>)
 8001cea:	f002 fbe3 	bl	80044b4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux, 5, 1000);
 8001cee:	f107 011c 	add.w	r1, r7, #28
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	2205      	movs	r2, #5
 8001cf8:	489e      	ldr	r0, [pc, #632]	; (8001f74 <main+0x778>)
 8001cfa:	f004 fbc7 	bl	800648c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d04:	489a      	ldr	r0, [pc, #616]	; (8001f70 <main+0x774>)
 8001d06:	f002 fbd5 	bl	80044b4 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f001 f966 	bl	8002fdc <HAL_Delay>


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d16:	4896      	ldr	r0, [pc, #600]	; (8001f70 <main+0x774>)
 8001d18:	f002 fbcc 	bl	80044b4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux2, 1, 1000);
 8001d1c:	f107 0118 	add.w	r1, r7, #24
 8001d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d24:	2201      	movs	r2, #1
 8001d26:	4893      	ldr	r0, [pc, #588]	; (8001f74 <main+0x778>)
 8001d28:	f004 fbb0 	bl	800648c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f001 f955 	bl	8002fdc <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str, 4, 1000);
 8001d32:	f107 0108 	add.w	r1, r7, #8
 8001d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	488d      	ldr	r0, [pc, #564]	; (8001f74 <main+0x778>)
 8001d3e:	f004 fcd9 	bl	80066f4 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d48:	4889      	ldr	r0, [pc, #548]	; (8001f70 <main+0x774>)
 8001d4a:	f002 fbb3 	bl	80044b4 <HAL_GPIO_WritePin>
	  //HAL_SPI_Receive(&hspi2, str, 4, 200);
	  printf("Aquiii\n");
 8001d4e:	488a      	ldr	r0, [pc, #552]	; (8001f78 <main+0x77c>)
 8001d50:	f00a fb90 	bl	800c474 <puts>
	  printf("%d %d %d %d\n", str[0], str[1], str[2], str[3]);
 8001d54:	7a3b      	ldrb	r3, [r7, #8]
 8001d56:	4619      	mov	r1, r3
 8001d58:	7a7b      	ldrb	r3, [r7, #9]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	7abb      	ldrb	r3, [r7, #10]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	4603      	mov	r3, r0
 8001d66:	4885      	ldr	r0, [pc, #532]	; (8001f7c <main+0x780>)
 8001d68:	f00a fb10 	bl	800c38c <iprintf>


	  //ler velocidades do tmc
	  aux3[0]=0x6A;
 8001d6c:	236a      	movs	r3, #106	; 0x6a
 8001d6e:	753b      	strb	r3, [r7, #20]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d76:	487e      	ldr	r0, [pc, #504]	; (8001f70 <main+0x774>)
 8001d78:	f002 fb9c 	bl	80044b4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001d7c:	f107 0114 	add.w	r1, r7, #20
 8001d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d84:	2201      	movs	r2, #1
 8001d86:	487b      	ldr	r0, [pc, #492]	; (8001f74 <main+0x778>)
 8001d88:	f004 fb80 	bl	800648c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f001 f925 	bl	8002fdc <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001d92:	f107 0110 	add.w	r1, r7, #16
 8001d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4875      	ldr	r0, [pc, #468]	; (8001f74 <main+0x778>)
 8001d9e:	f004 fca9 	bl	80066f4 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da8:	4871      	ldr	r0, [pc, #452]	; (8001f70 <main+0x774>)
 8001daa:	f002 fb83 	bl	80044b4 <HAL_GPIO_WritePin>
	  printf("PID VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);
 8001dae:	7c3b      	ldrb	r3, [r7, #16]
 8001db0:	4619      	mov	r1, r3
 8001db2:	7c7b      	ldrb	r3, [r7, #17]
 8001db4:	461a      	mov	r2, r3
 8001db6:	7cbb      	ldrb	r3, [r7, #18]
 8001db8:	4618      	mov	r0, r3
 8001dba:	7cfb      	ldrb	r3, [r7, #19]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	486f      	ldr	r0, [pc, #444]	; (8001f80 <main+0x784>)
 8001dc2:	f00a fae3 	bl	800c38c <iprintf>

	  aux3[0]=0x22;
 8001dc6:	2322      	movs	r3, #34	; 0x22
 8001dc8:	753b      	strb	r3, [r7, #20]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd0:	4867      	ldr	r0, [pc, #412]	; (8001f70 <main+0x774>)
 8001dd2:	f002 fb6f 	bl	80044b4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001dd6:	f107 0114 	add.w	r1, r7, #20
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	2201      	movs	r2, #1
 8001de0:	4864      	ldr	r0, [pc, #400]	; (8001f74 <main+0x778>)
 8001de2:	f004 fb53 	bl	800648c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f001 f8f8 	bl	8002fdc <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001dec:	f107 0110 	add.w	r1, r7, #16
 8001df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df4:	2204      	movs	r2, #4
 8001df6:	485f      	ldr	r0, [pc, #380]	; (8001f74 <main+0x778>)
 8001df8:	f004 fc7c 	bl	80066f4 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e02:	485b      	ldr	r0, [pc, #364]	; (8001f70 <main+0x774>)
 8001e04:	f002 fb56 	bl	80044b4 <HAL_GPIO_WritePin>
	  printf("OPENLOOP VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);
 8001e08:	7c3b      	ldrb	r3, [r7, #16]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	7c7b      	ldrb	r3, [r7, #17]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	7cbb      	ldrb	r3, [r7, #18]
 8001e12:	4618      	mov	r0, r3
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	4603      	mov	r3, r0
 8001e1a:	485a      	ldr	r0, [pc, #360]	; (8001f84 <main+0x788>)
 8001e1c:	f00a fab6 	bl	800c38c <iprintf>

	  aux3[0]=0x41;
 8001e20:	2341      	movs	r3, #65	; 0x41
 8001e22:	753b      	strb	r3, [r7, #20]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2a:	4851      	ldr	r0, [pc, #324]	; (8001f70 <main+0x774>)
 8001e2c:	f002 fb42 	bl	80044b4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001e30:	f107 0114 	add.w	r1, r7, #20
 8001e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e38:	2201      	movs	r2, #1
 8001e3a:	484e      	ldr	r0, [pc, #312]	; (8001f74 <main+0x778>)
 8001e3c:	f004 fb26 	bl	800648c <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f001 f8cb 	bl	8002fdc <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001e46:	f107 0110 	add.w	r1, r7, #16
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	2204      	movs	r2, #4
 8001e50:	4848      	ldr	r0, [pc, #288]	; (8001f74 <main+0x778>)
 8001e52:	f004 fc4f 	bl	80066f4 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e5c:	4844      	ldr	r0, [pc, #272]	; (8001f70 <main+0x774>)
 8001e5e:	f002 fb29 	bl	80044b4 <HAL_GPIO_WritePin>
	  printf("AENC DECODER COUNT: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);
 8001e62:	7c3b      	ldrb	r3, [r7, #16]
 8001e64:	4619      	mov	r1, r3
 8001e66:	7c7b      	ldrb	r3, [r7, #17]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	7cbb      	ldrb	r3, [r7, #18]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	7cfb      	ldrb	r3, [r7, #19]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	4844      	ldr	r0, [pc, #272]	; (8001f88 <main+0x78c>)
 8001e76:	f00a fa89 	bl	800c38c <iprintf>

	  sprintf(str2,"%f ", brk);
 8001e7a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e7c:	f7fe fb64 	bl	8000548 <__aeabi_f2d>
 8001e80:	4603      	mov	r3, r0
 8001e82:	460c      	mov	r4, r1
 8001e84:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4623      	mov	r3, r4
 8001e8c:	493f      	ldr	r1, [pc, #252]	; (8001f8c <main+0x790>)
 8001e8e:	f00a faf9 	bl	800c484 <siprintf>
	  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <main+0x794>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <main+0x798>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	493f      	ldr	r1, [pc, #252]	; (8001f98 <main+0x79c>)
 8001e9c:	483f      	ldr	r0, [pc, #252]	; (8001f9c <main+0x7a0>)
 8001e9e:	f00a faf1 	bl	800c484 <siprintf>
	  update_file("brake.txt", str2, stamp, "", &fil2, &bw);
 8001ea2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <main+0x7a4>)
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <main+0x7a8>)
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <main+0x7ac>)
 8001eb0:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <main+0x7a0>)
 8001eb2:	483e      	ldr	r0, [pc, #248]	; (8001fac <main+0x7b0>)
 8001eb4:	f000 fc08 	bl	80026c8 <update_file>
	  stamp[0]='\0';
 8001eb8:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <main+0x7a0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]

	  sprintf(str2,"%f ", acc);
 8001ebe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ec0:	f7fe fb42 	bl	8000548 <__aeabi_f2d>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	460c      	mov	r4, r1
 8001ec8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4623      	mov	r3, r4
 8001ed0:	492e      	ldr	r1, [pc, #184]	; (8001f8c <main+0x790>)
 8001ed2:	f00a fad7 	bl	800c484 <siprintf>
	  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <main+0x794>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <main+0x798>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	492e      	ldr	r1, [pc, #184]	; (8001f98 <main+0x79c>)
 8001ee0:	482e      	ldr	r0, [pc, #184]	; (8001f9c <main+0x7a0>)
 8001ee2:	f00a facf 	bl	800c484 <siprintf>
	  update_file("throttle.txt", str2, stamp, "", &fil2, &bw);
 8001ee6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <main+0x7a4>)
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <main+0x7a8>)
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <main+0x7ac>)
 8001ef4:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <main+0x7a0>)
 8001ef6:	482e      	ldr	r0, [pc, #184]	; (8001fb0 <main+0x7b4>)
 8001ef8:	f000 fbe6 	bl	80026c8 <update_file>
	  stamp[0]='\0';
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <main+0x7a0>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]


	  //update_file("teste.txt", "chico da tina", "ah", "ah\n", &fil, &bw);
	  IMU_acc_read(&hspi2, accel_data);
 8001f02:	492c      	ldr	r1, [pc, #176]	; (8001fb4 <main+0x7b8>)
 8001f04:	481b      	ldr	r0, [pc, #108]	; (8001f74 <main+0x778>)
 8001f06:	f7ff f8a1 	bl	800104c <IMU_acc_read>
	  for(int i=0; i<=2; i++){
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	657b      	str	r3, [r7, #84]	; 0x54
 8001f0e:	e022      	b.n	8001f56 <main+0x75a>
		  sprintf(str2, "accel[%d] - %d ", i, accel_data[i]);
 8001f10:	4a28      	ldr	r2, [pc, #160]	; (8001fb4 <main+0x7b8>)
 8001f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f1e:	4926      	ldr	r1, [pc, #152]	; (8001fb8 <main+0x7bc>)
 8001f20:	f00a fab0 	bl	800c484 <siprintf>
		  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <main+0x794>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <main+0x798>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	491a      	ldr	r1, [pc, #104]	; (8001f98 <main+0x79c>)
 8001f2e:	481b      	ldr	r0, [pc, #108]	; (8001f9c <main+0x7a0>)
 8001f30:	f00a faa8 	bl	800c484 <siprintf>
		  update_file("acc.txt", str2, stamp, "", &fil2, &bw);
 8001f34:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <main+0x7a4>)
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <main+0x7a8>)
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <main+0x7ac>)
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <main+0x7a0>)
 8001f44:	481d      	ldr	r0, [pc, #116]	; (8001fbc <main+0x7c0>)
 8001f46:	f000 fbbf 	bl	80026c8 <update_file>
		  stamp[0]='\0';
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <main+0x7a0>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<=2; i++){
 8001f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f52:	3301      	adds	r3, #1
 8001f54:	657b      	str	r3, [r7, #84]	; 0x54
 8001f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	ddd9      	ble.n	8001f10 <main+0x714>
	  }


	  IMU_gyro_read(&hspi2, gyro_data);
 8001f5c:	4918      	ldr	r1, [pc, #96]	; (8001fc0 <main+0x7c4>)
 8001f5e:	4805      	ldr	r0, [pc, #20]	; (8001f74 <main+0x778>)
 8001f60:	f7ff f8ec 	bl	800113c <IMU_gyro_read>
	  for(int i=0; i<=2; i++){
 8001f64:	2300      	movs	r3, #0
 8001f66:	653b      	str	r3, [r7, #80]	; 0x50
 8001f68:	e04f      	b.n	800200a <main+0x80e>
 8001f6a:	bf00      	nop
 8001f6c:	20000290 	.word	0x20000290
 8001f70:	40020400 	.word	0x40020400
 8001f74:	20000760 	.word	0x20000760
 8001f78:	0800e86c 	.word	0x0800e86c
 8001f7c:	0800e874 	.word	0x0800e874
 8001f80:	0800e884 	.word	0x0800e884
 8001f84:	0800e8a8 	.word	0x0800e8a8
 8001f88:	0800e8d0 	.word	0x0800e8d0
 8001f8c:	0800e8f4 	.word	0x0800e8f4
 8001f90:	2000027c 	.word	0x2000027c
 8001f94:	20000278 	.word	0x20000278
 8001f98:	0800e8f8 	.word	0x0800e8f8
 8001f9c:	20002ce4 	.word	0x20002ce4
 8001fa0:	20001be0 	.word	0x20001be0
 8001fa4:	20003d78 	.word	0x20003d78
 8001fa8:	0800e7a8 	.word	0x0800e7a8
 8001fac:	0800e900 	.word	0x0800e900
 8001fb0:	0800e90c 	.word	0x0800e90c
 8001fb4:	20001bc4 	.word	0x20001bc4
 8001fb8:	0800e91c 	.word	0x0800e91c
 8001fbc:	0800e92c 	.word	0x0800e92c
 8001fc0:	20001bd4 	.word	0x20001bd4
		  sprintf(str2, "gyro[%d] - %d ", i, gyro_data[i]);
 8001fc4:	4a16      	ldr	r2, [pc, #88]	; (8002020 <main+0x824>)
 8001fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fcc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001fd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fd2:	4914      	ldr	r1, [pc, #80]	; (8002024 <main+0x828>)
 8001fd4:	f00a fa56 	bl	800c484 <siprintf>
		  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <main+0x82c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <main+0x830>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4913      	ldr	r1, [pc, #76]	; (8002030 <main+0x834>)
 8001fe2:	4814      	ldr	r0, [pc, #80]	; (8002034 <main+0x838>)
 8001fe4:	f00a fa4e 	bl	800c484 <siprintf>
		  update_file("gyro.txt", str2, stamp, "", &fil2, &bw);
 8001fe8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <main+0x83c>)
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <main+0x840>)
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <main+0x844>)
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <main+0x838>)
 8001ff8:	4812      	ldr	r0, [pc, #72]	; (8002044 <main+0x848>)
 8001ffa:	f000 fb65 	bl	80026c8 <update_file>
		   stamp[0]='\0';
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <main+0x838>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<=2; i++){
 8002004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002006:	3301      	adds	r3, #1
 8002008:	653b      	str	r3, [r7, #80]	; 0x50
 800200a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200c:	2b02      	cmp	r3, #2
 800200e:	ddd9      	ble.n	8001fc4 <main+0x7c8>
	  }

	  printf("TIME - %lu", __unix_sec);
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <main+0x82c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	480c      	ldr	r0, [pc, #48]	; (8002048 <main+0x84c>)
 8002018:	f00a f9b8 	bl	800c38c <iprintf>
  {
 800201c:	e4ec      	b.n	80019f8 <main+0x1fc>
 800201e:	bf00      	nop
 8002020:	20001bd4 	.word	0x20001bd4
 8002024:	0800e934 	.word	0x0800e934
 8002028:	2000027c 	.word	0x2000027c
 800202c:	20000278 	.word	0x20000278
 8002030:	0800e8f8 	.word	0x0800e8f8
 8002034:	20002ce4 	.word	0x20002ce4
 8002038:	20001be0 	.word	0x20001be0
 800203c:	20003d78 	.word	0x20003d78
 8002040:	0800e7a8 	.word	0x0800e7a8
 8002044:	0800e944 	.word	0x0800e944
 8002048:	0800e950 	.word	0x0800e950

0800204c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b094      	sub	sp, #80	; 0x50
 8002050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002052:	f107 0320 	add.w	r3, r7, #32
 8002056:	2230      	movs	r2, #48	; 0x30
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f009 fd31 	bl	800bac2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <SystemClock_Config+0xdc>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	4a2b      	ldr	r2, [pc, #172]	; (8002128 <SystemClock_Config+0xdc>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207e:	6413      	str	r3, [r2, #64]	; 0x40
 8002080:	4b29      	ldr	r3, [pc, #164]	; (8002128 <SystemClock_Config+0xdc>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <SystemClock_Config+0xe0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a25      	ldr	r2, [pc, #148]	; (800212c <SystemClock_Config+0xe0>)
 8002096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b23      	ldr	r3, [pc, #140]	; (800212c <SystemClock_Config+0xe0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020a8:	2301      	movs	r3, #1
 80020aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b2:	2302      	movs	r3, #2
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80020bc:	2319      	movs	r3, #25
 80020be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80020c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80020c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020c6:	2302      	movs	r3, #2
 80020c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020ca:	2307      	movs	r3, #7
 80020cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ce:	f107 0320 	add.w	r3, r7, #32
 80020d2:	4618      	mov	r0, r3
 80020d4:	f002 fa08 	bl	80044e8 <HAL_RCC_OscConfig>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80020de:	f000 faec 	bl	80026ba <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e2:	230f      	movs	r3, #15
 80020e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020e6:	2302      	movs	r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	2105      	movs	r1, #5
 8002100:	4618      	mov	r0, r3
 8002102:	f002 fc61 	bl	80049c8 <HAL_RCC_ClockConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800210c:	f000 fad5 	bl	80026ba <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_2);
 8002110:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002114:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002118:	2000      	movs	r0, #0
 800211a:	f002 fd3b 	bl	8004b94 <HAL_RCC_MCOConfig>
}
 800211e:	bf00      	nop
 8002120:	3750      	adds	r7, #80	; 0x50
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40007000 	.word	0x40007000

08002130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002136:	463b      	mov	r3, r7
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002142:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002144:	4a6e      	ldr	r2, [pc, #440]	; (8002300 <MX_ADC1_Init+0x1d0>)
 8002146:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002148:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <MX_ADC1_Init+0x1cc>)
 800214a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800214e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002150:	4b6a      	ldr	r3, [pc, #424]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002156:	4b69      	ldr	r3, [pc, #420]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002158:	2201      	movs	r2, #1
 800215a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800215c:	4b67      	ldr	r3, [pc, #412]	; (80022fc <MX_ADC1_Init+0x1cc>)
 800215e:	2201      	movs	r2, #1
 8002160:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002162:	4b66      	ldr	r3, [pc, #408]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800216a:	4b64      	ldr	r3, [pc, #400]	; (80022fc <MX_ADC1_Init+0x1cc>)
 800216c:	2200      	movs	r2, #0
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002170:	4b62      	ldr	r3, [pc, #392]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002172:	4a64      	ldr	r2, [pc, #400]	; (8002304 <MX_ADC1_Init+0x1d4>)
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002176:	4b61      	ldr	r3, [pc, #388]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002178:	2200      	movs	r2, #0
 800217a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 800217c:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <MX_ADC1_Init+0x1cc>)
 800217e:	220c      	movs	r2, #12
 8002180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002182:	4b5e      	ldr	r3, [pc, #376]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800218a:	4b5c      	ldr	r3, [pc, #368]	; (80022fc <MX_ADC1_Init+0x1cc>)
 800218c:	2201      	movs	r2, #1
 800218e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002190:	485a      	ldr	r0, [pc, #360]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002192:	f000 ff45 	bl	8003020 <HAL_ADC_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800219c:	f000 fa8d 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80021a0:	2308      	movs	r3, #8
 80021a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ac:	463b      	mov	r3, r7
 80021ae:	4619      	mov	r1, r3
 80021b0:	4852      	ldr	r0, [pc, #328]	; (80022fc <MX_ADC1_Init+0x1cc>)
 80021b2:	f001 f87f 	bl	80032b4 <HAL_ADC_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80021bc:	f000 fa7d 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80021c0:	230c      	movs	r3, #12
 80021c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	484b      	ldr	r0, [pc, #300]	; (80022fc <MX_ADC1_Init+0x1cc>)
 80021ce:	f001 f871 	bl	80032b4 <HAL_ADC_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80021d8:	f000 fa6f 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80021dc:	230d      	movs	r3, #13
 80021de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80021e0:	2303      	movs	r3, #3
 80021e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e4:	463b      	mov	r3, r7
 80021e6:	4619      	mov	r1, r3
 80021e8:	4844      	ldr	r0, [pc, #272]	; (80022fc <MX_ADC1_Init+0x1cc>)
 80021ea:	f001 f863 	bl	80032b4 <HAL_ADC_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80021f4:	f000 fa61 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80021f8:	2302      	movs	r3, #2
 80021fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80021fc:	2304      	movs	r3, #4
 80021fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002200:	463b      	mov	r3, r7
 8002202:	4619      	mov	r1, r3
 8002204:	483d      	ldr	r0, [pc, #244]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002206:	f001 f855 	bl	80032b4 <HAL_ADC_ConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002210:	f000 fa53 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002214:	230a      	movs	r3, #10
 8002216:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002218:	2305      	movs	r3, #5
 800221a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800221c:	463b      	mov	r3, r7
 800221e:	4619      	mov	r1, r3
 8002220:	4836      	ldr	r0, [pc, #216]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002222:	f001 f847 	bl	80032b4 <HAL_ADC_ConfigChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800222c:	f000 fa45 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002230:	230b      	movs	r3, #11
 8002232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002234:	2306      	movs	r3, #6
 8002236:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002238:	463b      	mov	r3, r7
 800223a:	4619      	mov	r1, r3
 800223c:	482f      	ldr	r0, [pc, #188]	; (80022fc <MX_ADC1_Init+0x1cc>)
 800223e:	f001 f839 	bl	80032b4 <HAL_ADC_ConfigChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002248:	f000 fa37 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800224c:	2309      	movs	r3, #9
 800224e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002250:	2307      	movs	r3, #7
 8002252:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002254:	463b      	mov	r3, r7
 8002256:	4619      	mov	r1, r3
 8002258:	4828      	ldr	r0, [pc, #160]	; (80022fc <MX_ADC1_Init+0x1cc>)
 800225a:	f001 f82b 	bl	80032b4 <HAL_ADC_ConfigChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002264:	f000 fa29 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002268:	2303      	movs	r3, #3
 800226a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800226c:	2308      	movs	r3, #8
 800226e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002270:	463b      	mov	r3, r7
 8002272:	4619      	mov	r1, r3
 8002274:	4821      	ldr	r0, [pc, #132]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002276:	f001 f81d 	bl	80032b4 <HAL_ADC_ConfigChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002280:	f000 fa1b 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002284:	2306      	movs	r3, #6
 8002286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002288:	2309      	movs	r3, #9
 800228a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800228c:	463b      	mov	r3, r7
 800228e:	4619      	mov	r1, r3
 8002290:	481a      	ldr	r0, [pc, #104]	; (80022fc <MX_ADC1_Init+0x1cc>)
 8002292:	f001 f80f 	bl	80032b4 <HAL_ADC_ConfigChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800229c:	f000 fa0d 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80022a0:	2307      	movs	r3, #7
 80022a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80022a4:	230a      	movs	r3, #10
 80022a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022a8:	463b      	mov	r3, r7
 80022aa:	4619      	mov	r1, r3
 80022ac:	4813      	ldr	r0, [pc, #76]	; (80022fc <MX_ADC1_Init+0x1cc>)
 80022ae:	f001 f801 	bl	80032b4 <HAL_ADC_ConfigChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80022b8:	f000 f9ff 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80022bc:	230e      	movs	r3, #14
 80022be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80022c0:	230b      	movs	r3, #11
 80022c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022c4:	463b      	mov	r3, r7
 80022c6:	4619      	mov	r1, r3
 80022c8:	480c      	ldr	r0, [pc, #48]	; (80022fc <MX_ADC1_Init+0x1cc>)
 80022ca:	f000 fff3 	bl	80032b4 <HAL_ADC_ConfigChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80022d4:	f000 f9f1 	bl	80026ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80022d8:	230f      	movs	r3, #15
 80022da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80022dc:	230c      	movs	r3, #12
 80022de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022e0:	463b      	mov	r3, r7
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_ADC1_Init+0x1cc>)
 80022e6:	f000 ffe5 	bl	80032b4 <HAL_ADC_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80022f0:	f000 f9e3 	bl	80026ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20001844 	.word	0x20001844
 8002300:	40012000 	.word	0x40012000
 8002304:	0f000001 	.word	0x0f000001

08002308 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <MX_SDIO_SD_Init+0x38>)
 800230e:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <MX_SDIO_SD_Init+0x3c>)
 8002310:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <MX_SDIO_SD_Init+0x38>)
 8002314:	2200      	movs	r2, #0
 8002316:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <MX_SDIO_SD_Init+0x38>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <MX_SDIO_SD_Init+0x38>)
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <MX_SDIO_SD_Init+0x38>)
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <MX_SDIO_SD_Init+0x38>)
 800232c:	2200      	movs	r2, #0
 800232e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <MX_SDIO_SD_Init+0x38>)
 8002332:	22ff      	movs	r2, #255	; 0xff
 8002334:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	20001be4 	.word	0x20001be4
 8002344:	40012c00 	.word	0x40012c00

08002348 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <MX_SPI2_Init+0x64>)
 800234e:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <MX_SPI2_Init+0x68>)
 8002350:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <MX_SPI2_Init+0x64>)
 8002354:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002358:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <MX_SPI2_Init+0x64>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <MX_SPI2_Init+0x64>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <MX_SPI2_Init+0x64>)
 8002368:	2202      	movs	r2, #2
 800236a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <MX_SPI2_Init+0x64>)
 800236e:	2201      	movs	r2, #1
 8002370:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <MX_SPI2_Init+0x64>)
 8002374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002378:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <MX_SPI2_Init+0x64>)
 800237c:	2228      	movs	r2, #40	; 0x28
 800237e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <MX_SPI2_Init+0x64>)
 8002382:	2200      	movs	r2, #0
 8002384:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <MX_SPI2_Init+0x64>)
 8002388:	2200      	movs	r2, #0
 800238a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <MX_SPI2_Init+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <MX_SPI2_Init+0x64>)
 8002394:	220a      	movs	r2, #10
 8002396:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002398:	4804      	ldr	r0, [pc, #16]	; (80023ac <MX_SPI2_Init+0x64>)
 800239a:	f004 f813 	bl	80063c4 <HAL_SPI_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80023a4:	f000 f989 	bl	80026ba <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000760 	.word	0x20000760
 80023b0:	40003800 	.word	0x40003800

080023b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08c      	sub	sp, #48	; 0x30
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	2224      	movs	r2, #36	; 0x24
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f009 fb7d 	bl	800bac2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023d0:	4b20      	ldr	r3, [pc, #128]	; (8002454 <MX_TIM2_Init+0xa0>)
 80023d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023d8:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <MX_TIM2_Init+0xa0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <MX_TIM2_Init+0xa0>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <MX_TIM2_Init+0xa0>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_TIM2_Init+0xa0>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <MX_TIM2_Init+0xa0>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023fe:	2301      	movs	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800240e:	2301      	movs	r3, #1
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002412:	2300      	movs	r3, #0
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	4619      	mov	r1, r3
 8002420:	480c      	ldr	r0, [pc, #48]	; (8002454 <MX_TIM2_Init+0xa0>)
 8002422:	f004 fd72 	bl	8006f0a <HAL_TIM_Encoder_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800242c:	f000 f945 	bl	80026ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002430:	2300      	movs	r3, #0
 8002432:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	4619      	mov	r1, r3
 800243c:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_TIM2_Init+0xa0>)
 800243e:	f005 f823 	bl	8007488 <HAL_TIMEx_MasterConfigSynchronization>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002448:	f000 f937 	bl	80026ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	3730      	adds	r7, #48	; 0x30
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20002ca0 	.word	0x20002ca0

08002458 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245e:	463b      	mov	r3, r7
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <MX_TIM6_Init+0x64>)
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <MX_TIM6_Init+0x68>)
 800246a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000;
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <MX_TIM6_Init+0x64>)
 800246e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002472:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <MX_TIM6_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <MX_TIM6_Init+0x64>)
 800247c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002480:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <MX_TIM6_Init+0x64>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <MX_TIM6_Init+0x64>)
 800248a:	f004 fcef 	bl	8006e6c <HAL_TIM_Base_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002494:	f000 f911 	bl	80026ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002498:	2320      	movs	r3, #32
 800249a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024a0:	463b      	mov	r3, r7
 80024a2:	4619      	mov	r1, r3
 80024a4:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_TIM6_Init+0x64>)
 80024a6:	f004 ffef 	bl	8007488 <HAL_TIMEx_MasterConfigSynchronization>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80024b0:	f000 f903 	bl	80026ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20001b84 	.word	0x20001b84
 80024c0:	40001000 	.word	0x40001000

080024c4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <MX_DMA_Init+0x5c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <MX_DMA_Init+0x5c>)
 80024d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <MX_DMA_Init+0x5c>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2038      	movs	r0, #56	; 0x38
 80024ec:	f001 fa5d 	bl	80039aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024f0:	2038      	movs	r0, #56	; 0x38
 80024f2:	f001 fa76 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	203b      	movs	r0, #59	; 0x3b
 80024fc:	f001 fa55 	bl	80039aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002500:	203b      	movs	r0, #59	; 0x3b
 8002502:	f001 fa6e 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2045      	movs	r0, #69	; 0x45
 800250c:	f001 fa4d 	bl	80039aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002510:	2045      	movs	r0, #69	; 0x45
 8002512:	f001 fa66 	bl	80039e2 <HAL_NVIC_EnableIRQ>

}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800

08002524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b46      	ldr	r3, [pc, #280]	; (8002658 <MX_GPIO_Init+0x134>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a45      	ldr	r2, [pc, #276]	; (8002658 <MX_GPIO_Init+0x134>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <MX_GPIO_Init+0x134>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <MX_GPIO_Init+0x134>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a3e      	ldr	r2, [pc, #248]	; (8002658 <MX_GPIO_Init+0x134>)
 8002560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b3c      	ldr	r3, [pc, #240]	; (8002658 <MX_GPIO_Init+0x134>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b38      	ldr	r3, [pc, #224]	; (8002658 <MX_GPIO_Init+0x134>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a37      	ldr	r2, [pc, #220]	; (8002658 <MX_GPIO_Init+0x134>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b35      	ldr	r3, [pc, #212]	; (8002658 <MX_GPIO_Init+0x134>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	4b31      	ldr	r3, [pc, #196]	; (8002658 <MX_GPIO_Init+0x134>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a30      	ldr	r2, [pc, #192]	; (8002658 <MX_GPIO_Init+0x134>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <MX_GPIO_Init+0x134>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <MX_GPIO_Init+0x134>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a29      	ldr	r2, [pc, #164]	; (8002658 <MX_GPIO_Init+0x134>)
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b27      	ldr	r3, [pc, #156]	; (8002658 <MX_GPIO_Init+0x134>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, GPIO_PIN_RESET);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2110      	movs	r1, #16
 80025ca:	4824      	ldr	r0, [pc, #144]	; (800265c <MX_GPIO_Init+0x138>)
 80025cc:	f001 ff72 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin, GPIO_PIN_RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	f241 4104 	movw	r1, #5124	; 0x1404
 80025d6:	4822      	ldr	r0, [pc, #136]	; (8002660 <MX_GPIO_Init+0x13c>)
 80025d8:	f001 ff6c 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Accel_CS_Pin */
  GPIO_InitStruct.Pin = Accel_CS_Pin;
 80025dc:	2310      	movs	r3, #16
 80025de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e0:	2301      	movs	r3, #1
 80025e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Accel_CS_GPIO_Port, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	481a      	ldr	r0, [pc, #104]	; (800265c <MX_GPIO_Init+0x138>)
 80025f4:	f001 fdac 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gyro_CS_Pin Magnet_CS_Pin SPI_CS_FOC_Pin */
  GPIO_InitStruct.Pin = Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin;
 80025f8:	f241 4304 	movw	r3, #5124	; 0x1404
 80025fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fe:	2301      	movs	r3, #1
 8002600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	4813      	ldr	r0, [pc, #76]	; (8002660 <MX_GPIO_Init+0x13c>)
 8002612:	f001 fd9d 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Det_Pin */
  GPIO_InitStruct.Pin = SD_Det_Pin;
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Det_GPIO_Port, &GPIO_InitStruct);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4619      	mov	r1, r3
 8002628:	480e      	ldr	r0, [pc, #56]	; (8002664 <MX_GPIO_Init+0x140>)
 800262a:	f001 fd91 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800262e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4619      	mov	r1, r3
 800264a:	4804      	ldr	r0, [pc, #16]	; (800265c <MX_GPIO_Init+0x138>)
 800264c:	f001 fd80 	bl	8004150 <HAL_GPIO_Init>

}
 8002650:	bf00      	nop
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020400 	.word	0x40020400
 8002664:	40020800 	.word	0x40020800

08002668 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch){
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff f84a 	bl	800170c <ITM_SendChar>
	return ch;
 8002678:	687b      	ldr	r3, [r7, #4]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <_write>:

int _write(int file, char *ptr, int len){
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e009      	b.n	80026a8 <_write+0x26>
		__io_putchar(*ptr++);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	60ba      	str	r2, [r7, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ffe3 	bl	8002668 <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbf1      	blt.n	8002694 <_write+0x12>
	}
	return len;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <update_file>:
	return fresult;
}

/*********************UPDATING an existing file ***************************/
FRESULT update_file(char *filename, char *data, char *timestamp, char *msec_stamp, FIL *fil, UINT *bw)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
	FRESULT fresult;

	strcat(data,timestamp);
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	68b8      	ldr	r0, [r7, #8]
 80026da:	f009 fef3 	bl	800c4c4 <strcat>
	strcat(data,msec_stamp);
 80026de:	6839      	ldr	r1, [r7, #0]
 80026e0:	68b8      	ldr	r0, [r7, #8]
 80026e2:	f009 feef 	bl	800c4c4 <strcat>
	strcat(data,"\n");
 80026e6:	68b8      	ldr	r0, [r7, #8]
 80026e8:	f7fd fd72 	bl	80001d0 <strlen>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4413      	add	r3, r2
 80026f4:	4916      	ldr	r1, [pc, #88]	; (8002750 <update_file+0x88>)
 80026f6:	461a      	mov	r2, r3
 80026f8:	460b      	mov	r3, r1
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	8013      	strh	r3, [r2, #0]

	//printf("lib\n");
	/* Open the file with write access */
	fresult = f_open(fil, filename, FA_OPEN_APPEND | FA_WRITE);// FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80026fe:	2232      	movs	r2, #50	; 0x32
 8002700:	68f9      	ldr	r1, [r7, #12]
 8002702:	6a38      	ldr	r0, [r7, #32]
 8002704:	f008 f9e6 	bl	800aad4 <f_open>
 8002708:	4603      	mov	r3, r0
 800270a:	75fb      	strb	r3, [r7, #23]
	if (fresult!=FR_OK){
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <update_file+0x50>
		printf("update_file - f_open fodeu\n " );
 8002712:	4810      	ldr	r0, [pc, #64]	; (8002754 <update_file+0x8c>)
 8002714:	f009 fe3a 	bl	800c38c <iprintf>

	/* Move to offset to the end of the file */
	//fresult = f_lseek(fil, fil->fptr);

	/* write the string to the file */
	fresult = f_printf(fil, data); //pode precisar de um "\n"
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6a38      	ldr	r0, [r7, #32]
 800271c:	f008 fe5a 	bl	800b3d4 <f_printf>
 8002720:	4603      	mov	r3, r0
 8002722:	75fb      	strb	r3, [r7, #23]
	if (fresult!=FR_OK){
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <update_file+0x68>
			printf("update_file - f_printf fodeu\n " );
 800272a:	480b      	ldr	r0, [pc, #44]	; (8002758 <update_file+0x90>)
 800272c:	f009 fe2e 	bl	800c38c <iprintf>
		}
	fresult = f_close (fil);
 8002730:	6a38      	ldr	r0, [r7, #32]
 8002732:	f008 fdad 	bl	800b290 <f_close>
 8002736:	4603      	mov	r3, r0
 8002738:	75fb      	strb	r3, [r7, #23]
	if(fresult != FR_OK){
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <update_file+0x7e>
		printf("update_file - f_close fodeu\n " );
 8002740:	4806      	ldr	r0, [pc, #24]	; (800275c <update_file+0x94>)
 8002742:	f009 fe23 	bl	800c38c <iprintf>
	}
	return fresult;
 8002746:	7dfb      	ldrb	r3, [r7, #23]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	0800e97c 	.word	0x0800e97c
 8002754:	0800e980 	.word	0x0800e980
 8002758:	0800e9a0 	.word	0x0800e9a0
 800275c:	0800e9c0 	.word	0x0800e9c0

08002760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_MspInit+0x4c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <HAL_MspInit+0x4c>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <HAL_MspInit+0x4c>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_MspInit+0x4c>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a08      	ldr	r2, [pc, #32]	; (80027ac <HAL_MspInit+0x4c>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_MspInit+0x4c>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	; 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a49      	ldr	r2, [pc, #292]	; (80028f4 <HAL_ADC_MspInit+0x144>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	f040 808c 	bne.w	80028ec <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e2:	6453      	str	r3, [r2, #68]	; 0x44
 80027e4:	4b44      	ldr	r3, [pc, #272]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 80027e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	4b40      	ldr	r3, [pc, #256]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	4a3f      	ldr	r2, [pc, #252]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002800:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	4b39      	ldr	r3, [pc, #228]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4a38      	ldr	r2, [pc, #224]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6313      	str	r3, [r2, #48]	; 0x30
 800281c:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	4a31      	ldr	r2, [pc, #196]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	6313      	str	r3, [r2, #48]	; 0x30
 8002838:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <HAL_ADC_MspInit+0x148>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = curr_u_Pin|curr_v_Pin|brk_pedal_Pin|acc_pedal_Pin 
 8002844:	233f      	movs	r3, #63	; 0x3f
 8002846:	61fb      	str	r3, [r7, #28]
                          |motor_voltage_v_Pin|motor_voltage_w_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002848:	2303      	movs	r3, #3
 800284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	4829      	ldr	r0, [pc, #164]	; (80028fc <HAL_ADC_MspInit+0x14c>)
 8002858:	f001 fc7a 	bl	8004150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = curr_w_Pin|DC_Bus_Voltage_Pin|DC_Current_Pin|motor_voltage_u_Pin;
 800285c:	23cc      	movs	r3, #204	; 0xcc
 800285e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002860:	2303      	movs	r3, #3
 8002862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	4824      	ldr	r0, [pc, #144]	; (8002900 <HAL_ADC_MspInit+0x150>)
 8002870:	f001 fc6e 	bl	8004150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002874:	2303      	movs	r3, #3
 8002876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002878:	2303      	movs	r3, #3
 800287a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	4619      	mov	r1, r3
 8002886:	481f      	ldr	r0, [pc, #124]	; (8002904 <HAL_ADC_MspInit+0x154>)
 8002888:	f001 fc62 	bl	8004150 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <HAL_ADC_MspInit+0x158>)
 800288e:	4a1f      	ldr	r2, [pc, #124]	; (800290c <HAL_ADC_MspInit+0x15c>)
 8002890:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_ADC_MspInit+0x158>)
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_ADC_MspInit+0x158>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_ADC_MspInit+0x158>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <HAL_ADC_MspInit+0x158>)
 80028a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028ac:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_ADC_MspInit+0x158>)
 80028ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <HAL_ADC_MspInit+0x158>)
 80028b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_ADC_MspInit+0x158>)
 80028be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028c4:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_ADC_MspInit+0x158>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <HAL_ADC_MspInit+0x158>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028d0:	480d      	ldr	r0, [pc, #52]	; (8002908 <HAL_ADC_MspInit+0x158>)
 80028d2:	f001 f8a1 	bl	8003a18 <HAL_DMA_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80028dc:	f7ff feed 	bl	80026ba <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_ADC_MspInit+0x158>)
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38
 80028e6:	4a08      	ldr	r2, [pc, #32]	; (8002908 <HAL_ADC_MspInit+0x158>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028ec:	bf00      	nop
 80028ee:	3730      	adds	r7, #48	; 0x30
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40012000 	.word	0x40012000
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020800 	.word	0x40020800
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400
 8002908:	20001a94 	.word	0x20001a94
 800290c:	40026410 	.word	0x40026410

08002910 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a70      	ldr	r2, [pc, #448]	; (8002af0 <HAL_SD_MspInit+0x1e0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	f040 80da 	bne.w	8002ae8 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	4b6e      	ldr	r3, [pc, #440]	; (8002af4 <HAL_SD_MspInit+0x1e4>)
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	4a6d      	ldr	r2, [pc, #436]	; (8002af4 <HAL_SD_MspInit+0x1e4>)
 800293e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002942:	6453      	str	r3, [r2, #68]	; 0x44
 8002944:	4b6b      	ldr	r3, [pc, #428]	; (8002af4 <HAL_SD_MspInit+0x1e4>)
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	4b67      	ldr	r3, [pc, #412]	; (8002af4 <HAL_SD_MspInit+0x1e4>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	4a66      	ldr	r2, [pc, #408]	; (8002af4 <HAL_SD_MspInit+0x1e4>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6313      	str	r3, [r2, #48]	; 0x30
 8002960:	4b64      	ldr	r3, [pc, #400]	; (8002af4 <HAL_SD_MspInit+0x1e4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	4b60      	ldr	r3, [pc, #384]	; (8002af4 <HAL_SD_MspInit+0x1e4>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	4a5f      	ldr	r2, [pc, #380]	; (8002af4 <HAL_SD_MspInit+0x1e4>)
 8002976:	f043 0308 	orr.w	r3, r3, #8
 800297a:	6313      	str	r3, [r2, #48]	; 0x30
 800297c:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <HAL_SD_MspInit+0x1e4>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800298c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002992:	2301      	movs	r3, #1
 8002994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002996:	2303      	movs	r3, #3
 8002998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800299a:	230c      	movs	r3, #12
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	4619      	mov	r1, r3
 80029a4:	4854      	ldr	r0, [pc, #336]	; (8002af8 <HAL_SD_MspInit+0x1e8>)
 80029a6:	f001 fbd3 	bl	8004150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80029aa:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80029ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029bc:	230c      	movs	r3, #12
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4619      	mov	r1, r3
 80029c6:	484c      	ldr	r0, [pc, #304]	; (8002af8 <HAL_SD_MspInit+0x1e8>)
 80029c8:	f001 fbc2 	bl	8004150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029cc:	2304      	movs	r3, #4
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d4:	2301      	movs	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029dc:	230c      	movs	r3, #12
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	4845      	ldr	r0, [pc, #276]	; (8002afc <HAL_SD_MspInit+0x1ec>)
 80029e8:	f001 fbb2 	bl	8004150 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80029ec:	4b44      	ldr	r3, [pc, #272]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 80029ee:	4a45      	ldr	r2, [pc, #276]	; (8002b04 <HAL_SD_MspInit+0x1f4>)
 80029f0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80029f2:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 80029f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029f8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a00:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a06:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a0e:	4b3c      	ldr	r3, [pc, #240]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a14:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a16:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a1c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002a1e:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a20:	2220      	movs	r2, #32
 8002a22:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a2a:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a30:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a32:	2203      	movs	r2, #3
 8002a34:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002a36:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a38:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a3e:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002a46:	482e      	ldr	r0, [pc, #184]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a48:	f000 ffe6 	bl	8003a18 <HAL_DMA_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002a52:	f7ff fe32 	bl	80026ba <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a5c:	4a28      	ldr	r2, [pc, #160]	; (8002b00 <HAL_SD_MspInit+0x1f0>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002a62:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002a64:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <HAL_SD_MspInit+0x1fc>)
 8002a66:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a6e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a70:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002a72:	2240      	movs	r2, #64	; 0x40
 8002a74:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7c:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a82:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a84:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002a86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a8a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a92:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002a94:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002a96:	2220      	movs	r2, #32
 8002a98:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002aa0:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002aac:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002aae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002ab6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002abc:	4812      	ldr	r0, [pc, #72]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002abe:	f000 ffab 	bl	8003a18 <HAL_DMA_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002ac8:	f7ff fdf7 	bl	80026ba <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002ad0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <HAL_SD_MspInit+0x1f8>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2100      	movs	r1, #0
 8002adc:	2031      	movs	r0, #49	; 0x31
 8002ade:	f000 ff64 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002ae2:	2031      	movs	r0, #49	; 0x31
 8002ae4:	f000 ff7d 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002ae8:	bf00      	nop
 8002aea:	3728      	adds	r7, #40	; 0x28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40020800 	.word	0x40020800
 8002afc:	40020c00 	.word	0x40020c00
 8002b00:	200006fc 	.word	0x200006fc
 8002b04:	40026458 	.word	0x40026458
 8002b08:	20001b24 	.word	0x20001b24
 8002b0c:	400264a0 	.word	0x400264a0

08002b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_SPI_MspInit+0x84>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d12c      	bne.n	8002b8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b7c:	2305      	movs	r3, #5
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	4805      	ldr	r0, [pc, #20]	; (8002b9c <HAL_SPI_MspInit+0x8c>)
 8002b88:	f001 fae2 	bl	8004150 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40003800 	.word	0x40003800
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40020400 	.word	0x40020400

08002ba0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc0:	d12b      	bne.n	8002c1a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x84>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a16      	ldr	r2, [pc, #88]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x84>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x84>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x84>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x84>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x84>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	4804      	ldr	r0, [pc, #16]	; (8002c28 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c16:	f001 fa9b 	bl	8004150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c1a:	bf00      	nop
 8002c1c:	3728      	adds	r7, #40	; 0x28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020000 	.word	0x40020000

08002c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <HAL_TIM_Base_MspInit+0x48>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d115      	bne.n	8002c6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_TIM_Base_MspInit+0x4c>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <HAL_TIM_Base_MspInit+0x4c>)
 8002c48:	f043 0310 	orr.w	r3, r3, #16
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_TIM_Base_MspInit+0x4c>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2036      	movs	r0, #54	; 0x36
 8002c60:	f000 fea3 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c64:	2036      	movs	r0, #54	; 0x36
 8002c66:	f000 febc 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40001000 	.word	0x40001000
 8002c78:	40023800 	.word	0x40023800

08002c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <HardFault_Handler+0x4>

08002c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <MemManage_Handler+0x4>

08002c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <BusFault_Handler+0x4>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <UsageFault_Handler+0x4>

08002ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


	SystemTick += TICK_RATE; // 1 ms tick count
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <SysTick_Handler+0x40>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <SysTick_Handler+0x40>)
 8002cd8:	6013      	str	r3, [r2, #0]

			  __unix_ms += TICK_RATE;
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <SysTick_Handler+0x44>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <SysTick_Handler+0x44>)
 8002ce2:	6013      	str	r3, [r2, #0]

			  if (__unix_ms >= 1000)
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <SysTick_Handler+0x44>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cec:	d30a      	bcc.n	8002d04 <SysTick_Handler+0x38>
			  {
			    __unix_ms -= 1000;
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <SysTick_Handler+0x44>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002cf6:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <SysTick_Handler+0x44>)
 8002cf8:	6013      	str	r3, [r2, #0]
			    __unix_sec++;
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <SysTick_Handler+0x48>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <SysTick_Handler+0x48>)
 8002d02:	6013      	str	r3, [r2, #0]
			  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d04:	f000 f94a 	bl	8002f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000274 	.word	0x20000274
 8002d10:	20000278 	.word	0x20000278
 8002d14:	2000027c 	.word	0x2000027c

08002d18 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <SDIO_IRQHandler+0x10>)
 8002d1e:	f002 fabd 	bl	800529c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20001be4 	.word	0x20001be4

08002d2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <TIM6_DAC_IRQHandler+0x10>)
 8002d32:	f004 f9b3 	bl	800709c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20001b84 	.word	0x20001b84

08002d40 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d44:	4802      	ldr	r0, [pc, #8]	; (8002d50 <DMA2_Stream0_IRQHandler+0x10>)
 8002d46:	f000 ff8f 	bl	8003c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20001a94 	.word	0x20001a94

08002d54 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <DMA2_Stream3_IRQHandler+0x10>)
 8002d5a:	f000 ff85 	bl	8003c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200006fc 	.word	0x200006fc

08002d68 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <DMA2_Stream6_IRQHandler+0x10>)
 8002d6e:	f000 ff7b 	bl	8003c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20001b24 	.word	0x20001b24

08002d7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e00a      	b.n	8002da4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d8e:	f3af 8000 	nop.w
 8002d92:	4601      	mov	r1, r0
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	60ba      	str	r2, [r7, #8]
 8002d9a:	b2ca      	uxtb	r2, r1
 8002d9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3301      	adds	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	dbf0      	blt.n	8002d8e <_read+0x12>
	}

return len;
 8002dac:	687b      	ldr	r3, [r7, #4]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
	return -1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dde:	605a      	str	r2, [r3, #4]
	return 0;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <_isatty>:

int _isatty(int file)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
	return 1;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
	return 0;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <_sbrk+0x50>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <_sbrk+0x16>
		heap_end = &end;
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <_sbrk+0x50>)
 8002e32:	4a10      	ldr	r2, [pc, #64]	; (8002e74 <_sbrk+0x54>)
 8002e34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <_sbrk+0x50>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <_sbrk+0x50>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	466a      	mov	r2, sp
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d907      	bls.n	8002e5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e4a:	f008 fe05 	bl	800ba58 <__errno>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	230c      	movs	r3, #12
 8002e52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	e006      	b.n	8002e68 <_sbrk+0x48>
	}

	heap_end += incr;
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <_sbrk+0x50>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	4a03      	ldr	r2, [pc, #12]	; (8002e70 <_sbrk+0x50>)
 8002e64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e66:	68fb      	ldr	r3, [r7, #12]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200002b0 	.word	0x200002b0
 8002e74:	20006e20 	.word	0x20006e20

08002e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <SystemInit+0x28>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <SystemInit+0x28>)
 8002e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SystemInit+0x28>)
 8002e8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e92:	609a      	str	r2, [r3, #8]
#endif
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002edc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ea8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eaa:	e003      	b.n	8002eb4 <LoopCopyDataInit>

08002eac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002eae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002eb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002eb2:	3104      	adds	r1, #4

08002eb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002eb4:	480b      	ldr	r0, [pc, #44]	; (8002ee4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002eb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002eba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ebc:	d3f6      	bcc.n	8002eac <CopyDataInit>
  ldr  r2, =_sbss
 8002ebe:	4a0b      	ldr	r2, [pc, #44]	; (8002eec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ec0:	e002      	b.n	8002ec8 <LoopFillZerobss>

08002ec2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ec2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ec4:	f842 3b04 	str.w	r3, [r2], #4

08002ec8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002eca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ecc:	d3f9      	bcc.n	8002ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ece:	f7ff ffd3 	bl	8002e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ed2:	f008 fdc7 	bl	800ba64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ed6:	f7fe fc91 	bl	80017fc <main>
  bx  lr    
 8002eda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002edc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ee0:	0800f178 	.word	0x0800f178
  ldr  r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ee8:	20000258 	.word	0x20000258
  ldr  r2, =_sbss
 8002eec:	20000258 	.word	0x20000258
  ldr  r3, = _ebss
 8002ef0:	20006e20 	.word	0x20006e20

08002ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef4:	e7fe      	b.n	8002ef4 <ADC_IRQHandler>
	...

08002ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <HAL_Init+0x40>)
 8002f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_Init+0x40>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <HAL_Init+0x40>)
 8002f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <HAL_Init+0x40>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <HAL_Init+0x40>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f20:	2003      	movs	r0, #3
 8002f22:	f000 fd37 	bl	8003994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f26:	2000      	movs	r0, #0
 8002f28:	f000 f808 	bl	8002f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f2c:	f7ff fc18 	bl	8002760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023c00 	.word	0x40023c00

08002f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_InitTick+0x54>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_InitTick+0x58>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fd4f 	bl	80039fe <HAL_SYSTICK_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00e      	b.n	8002f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d80a      	bhi.n	8002f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f70:	2200      	movs	r2, #0
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295
 8002f78:	f000 fd17 	bl	80039aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f7c:	4a06      	ldr	r2, [pc, #24]	; (8002f98 <HAL_InitTick+0x5c>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000078 	.word	0x20000078
 8002f94:	20000080 	.word	0x20000080
 8002f98:	2000007c 	.word	0x2000007c

08002f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x20>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fae:	6013      	str	r3, [r2, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000080 	.word	0x20000080
 8002fc0:	20004da8 	.word	0x20004da8

08002fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_GetTick+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20004da8 	.word	0x20004da8

08002fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7ff ffee 	bl	8002fc4 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d005      	beq.n	8003002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_Delay+0x40>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003002:	bf00      	nop
 8003004:	f7ff ffde 	bl	8002fc4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	429a      	cmp	r2, r3
 8003012:	d8f7      	bhi.n	8003004 <HAL_Delay+0x28>
  {
  }
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000080 	.word	0x20000080

08003020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e033      	b.n	800309e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff fbb6 	bl	80027b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003066:	f023 0302 	bic.w	r3, r3, #2
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa40 	bl	80034f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
 800308e:	e001      	b.n	8003094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800309c:	7bfb      	ldrb	r3, [r7, #15]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_Start_DMA+0x1e>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0cc      	b.n	8003260 <HAL_ADC_Start_DMA+0x1b8>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d018      	beq.n	800310e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030ec:	4b5e      	ldr	r3, [pc, #376]	; (8003268 <HAL_ADC_Start_DMA+0x1c0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a5e      	ldr	r2, [pc, #376]	; (800326c <HAL_ADC_Start_DMA+0x1c4>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	0c9a      	lsrs	r2, r3, #18
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003100:	e002      	b.n	8003108 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	3b01      	subs	r3, #1
 8003106:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f9      	bne.n	8003102 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	f040 80a0 	bne.w	800325e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003148:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315c:	d106      	bne.n	800316c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f023 0206 	bic.w	r2, r3, #6
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
 800316a:	e002      	b.n	8003172 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800317a:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <HAL_ADC_Start_DMA+0x1c8>)
 800317c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	4a3c      	ldr	r2, [pc, #240]	; (8003274 <HAL_ADC_Start_DMA+0x1cc>)
 8003184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	4a3b      	ldr	r2, [pc, #236]	; (8003278 <HAL_ADC_Start_DMA+0x1d0>)
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	4a3a      	ldr	r2, [pc, #232]	; (800327c <HAL_ADC_Start_DMA+0x1d4>)
 8003194:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800319e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	334c      	adds	r3, #76	; 0x4c
 80031ca:	4619      	mov	r1, r3
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f000 fcd0 	bl	8003b74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d12a      	bne.n	8003236 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a26      	ldr	r2, [pc, #152]	; (8003280 <HAL_ADC_Start_DMA+0x1d8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d015      	beq.n	8003216 <HAL_ADC_Start_DMA+0x16e>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a25      	ldr	r2, [pc, #148]	; (8003284 <HAL_ADC_Start_DMA+0x1dc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d105      	bne.n	8003200 <HAL_ADC_Start_DMA+0x158>
 80031f4:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_ADC_Start_DMA+0x1c8>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a20      	ldr	r2, [pc, #128]	; (8003288 <HAL_ADC_Start_DMA+0x1e0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d129      	bne.n	800325e <HAL_ADC_Start_DMA+0x1b6>
 800320a:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_ADC_Start_DMA+0x1c8>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	2b0f      	cmp	r3, #15
 8003214:	d823      	bhi.n	800325e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11c      	bne.n	800325e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	e013      	b.n	800325e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a11      	ldr	r2, [pc, #68]	; (8003280 <HAL_ADC_Start_DMA+0x1d8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d10e      	bne.n	800325e <HAL_ADC_Start_DMA+0x1b6>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800325c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000078 	.word	0x20000078
 800326c:	431bde83 	.word	0x431bde83
 8003270:	40012300 	.word	0x40012300
 8003274:	080036f1 	.word	0x080036f1
 8003278:	080037ab 	.word	0x080037ab
 800327c:	080037c7 	.word	0x080037c7
 8003280:	40012000 	.word	0x40012000
 8003284:	40012100 	.word	0x40012100
 8003288:	40012200 	.word	0x40012200

0800328c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x1c>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e105      	b.n	80034dc <HAL_ADC_ConfigChannel+0x228>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b09      	cmp	r3, #9
 80032de:	d925      	bls.n	800332c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68d9      	ldr	r1, [r3, #12]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	3b1e      	subs	r3, #30
 80032f6:	2207      	movs	r2, #7
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43da      	mvns	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	400a      	ands	r2, r1
 8003304:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68d9      	ldr	r1, [r3, #12]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	4618      	mov	r0, r3
 8003318:	4603      	mov	r3, r0
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4403      	add	r3, r0
 800331e:	3b1e      	subs	r3, #30
 8003320:	409a      	lsls	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e022      	b.n	8003372 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6919      	ldr	r1, [r3, #16]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	2207      	movs	r2, #7
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43da      	mvns	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	400a      	ands	r2, r1
 800334e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6919      	ldr	r1, [r3, #16]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	4618      	mov	r0, r3
 8003362:	4603      	mov	r3, r0
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4403      	add	r3, r0
 8003368:	409a      	lsls	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b06      	cmp	r3, #6
 8003378:	d824      	bhi.n	80033c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	3b05      	subs	r3, #5
 800338c:	221f      	movs	r2, #31
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	400a      	ands	r2, r1
 800339a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	4618      	mov	r0, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	3b05      	subs	r3, #5
 80033b6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	635a      	str	r2, [r3, #52]	; 0x34
 80033c2:	e04c      	b.n	800345e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b0c      	cmp	r3, #12
 80033ca:	d824      	bhi.n	8003416 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	3b23      	subs	r3, #35	; 0x23
 80033de:	221f      	movs	r2, #31
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43da      	mvns	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	400a      	ands	r2, r1
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	4618      	mov	r0, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	3b23      	subs	r3, #35	; 0x23
 8003408:	fa00 f203 	lsl.w	r2, r0, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
 8003414:	e023      	b.n	800345e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	3b41      	subs	r3, #65	; 0x41
 8003428:	221f      	movs	r2, #31
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	400a      	ands	r2, r1
 8003436:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	4618      	mov	r0, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	3b41      	subs	r3, #65	; 0x41
 8003452:	fa00 f203 	lsl.w	r2, r0, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_ADC_ConfigChannel+0x234>)
 8003460:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a21      	ldr	r2, [pc, #132]	; (80034ec <HAL_ADC_ConfigChannel+0x238>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d109      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x1cc>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b12      	cmp	r3, #18
 8003472:	d105      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a19      	ldr	r2, [pc, #100]	; (80034ec <HAL_ADC_ConfigChannel+0x238>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d123      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x21e>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b10      	cmp	r3, #16
 8003490:	d003      	beq.n	800349a <HAL_ADC_ConfigChannel+0x1e6>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b11      	cmp	r3, #17
 8003498:	d11b      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d111      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_ADC_ConfigChannel+0x23c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a10      	ldr	r2, [pc, #64]	; (80034f4 <HAL_ADC_ConfigChannel+0x240>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	0c9a      	lsrs	r2, r3, #18
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034c4:	e002      	b.n	80034cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f9      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	40012300 	.word	0x40012300
 80034ec:	40012000 	.word	0x40012000
 80034f0:	20000078 	.word	0x20000078
 80034f4:	431bde83 	.word	0x431bde83

080034f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003500:	4b79      	ldr	r3, [pc, #484]	; (80036e8 <ADC_Init+0x1f0>)
 8003502:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	431a      	orrs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800352c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	021a      	lsls	r2, r3, #8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6899      	ldr	r1, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	4a58      	ldr	r2, [pc, #352]	; (80036ec <ADC_Init+0x1f4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800359e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6899      	ldr	r1, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	e00f      	b.n	80035f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0202 	bic.w	r2, r2, #2
 8003604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7e1b      	ldrb	r3, [r3, #24]
 8003610:	005a      	lsls	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01b      	beq.n	800365c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003632:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003642:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	3b01      	subs	r3, #1
 8003650:	035a      	lsls	r2, r3, #13
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	e007      	b.n	800366c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800366a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	3b01      	subs	r3, #1
 8003688:	051a      	lsls	r2, r3, #20
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ae:	025a      	lsls	r2, r3, #9
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6899      	ldr	r1, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	029a      	lsls	r2, r3, #10
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40012300 	.word	0x40012300
 80036ec:	0f000001 	.word	0x0f000001

080036f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003706:	2b00      	cmp	r3, #0
 8003708:	d13c      	bne.n	8003784 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d12b      	bne.n	800377c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003728:	2b00      	cmp	r3, #0
 800372a:	d127      	bne.n	800377c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003736:	2b00      	cmp	r3, #0
 8003738:	d006      	beq.n	8003748 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003744:	2b00      	cmp	r3, #0
 8003746:	d119      	bne.n	800377c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0220 	bic.w	r2, r2, #32
 8003756:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7fd ffed 	bl	800175c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003782:	e00e      	b.n	80037a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff fd85 	bl	80032a0 <HAL_ADC_ErrorCallback>
}
 8003796:	e004      	b.n	80037a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff fd67 	bl	800328c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2240      	movs	r2, #64	; 0x40
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f7ff fd5a 	bl	80032a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <__NVIC_SetPriorityGrouping>:
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800381c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60d3      	str	r3, [r2, #12]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_GetPriorityGrouping>:
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <__NVIC_GetPriorityGrouping+0x18>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0307 	and.w	r3, r3, #7
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_EnableIRQ>:
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	2b00      	cmp	r3, #0
 8003868:	db0b      	blt.n	8003882 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4907      	ldr	r1, [pc, #28]	; (8003890 <__NVIC_EnableIRQ+0x38>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2001      	movs	r0, #1
 800387a:	fa00 f202 	lsl.w	r2, r0, r2
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e100 	.word	0xe000e100

08003894 <__NVIC_SetPriority>:
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	db0a      	blt.n	80038be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	490c      	ldr	r1, [pc, #48]	; (80038e0 <__NVIC_SetPriority+0x4c>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	440b      	add	r3, r1
 80038b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038bc:	e00a      	b.n	80038d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <__NVIC_SetPriority+0x50>)
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	3b04      	subs	r3, #4
 80038cc:	0112      	lsls	r2, r2, #4
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	440b      	add	r3, r1
 80038d2:	761a      	strb	r2, [r3, #24]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000e100 	.word	0xe000e100
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <NVIC_EncodePriority>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f1c3 0307 	rsb	r3, r3, #7
 8003902:	2b04      	cmp	r3, #4
 8003904:	bf28      	it	cs
 8003906:	2304      	movcs	r3, #4
 8003908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3304      	adds	r3, #4
 800390e:	2b06      	cmp	r3, #6
 8003910:	d902      	bls.n	8003918 <NVIC_EncodePriority+0x30>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3b03      	subs	r3, #3
 8003916:	e000      	b.n	800391a <NVIC_EncodePriority+0x32>
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	401a      	ands	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003930:	f04f 31ff 	mov.w	r1, #4294967295
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	43d9      	mvns	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	4313      	orrs	r3, r2
}
 8003942:	4618      	mov	r0, r3
 8003944:	3724      	adds	r7, #36	; 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <SysTick_Config>:
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003960:	d301      	bcc.n	8003966 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003962:	2301      	movs	r3, #1
 8003964:	e00f      	b.n	8003986 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <SysTick_Config+0x40>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800396e:	210f      	movs	r1, #15
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	f7ff ff8e 	bl	8003894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <SysTick_Config+0x40>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <SysTick_Config+0x40>)
 8003980:	2207      	movs	r2, #7
 8003982:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	e000e010 	.word	0xe000e010

08003994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff ff29 	bl	80037f4 <__NVIC_SetPriorityGrouping>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	4603      	mov	r3, r0
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039bc:	f7ff ff3e 	bl	800383c <__NVIC_GetPriorityGrouping>
 80039c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	6978      	ldr	r0, [r7, #20]
 80039c8:	f7ff ff8e 	bl	80038e8 <NVIC_EncodePriority>
 80039cc:	4602      	mov	r2, r0
 80039ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff5d 	bl	8003894 <__NVIC_SetPriority>
}
 80039da:	bf00      	nop
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff31 	bl	8003858 <__NVIC_EnableIRQ>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ffa2 	bl	8003950 <SysTick_Config>
 8003a0c:	4603      	mov	r3, r0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a24:	f7ff face 	bl	8002fc4 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e099      	b.n	8003b68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a54:	e00f      	b.n	8003a76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a56:	f7ff fab5 	bl	8002fc4 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	d908      	bls.n	8003a76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e078      	b.n	8003b68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e8      	bne.n	8003a56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <HAL_DMA_Init+0x158>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d107      	bne.n	8003ae0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0307 	bic.w	r3, r3, #7
 8003af6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d117      	bne.n	8003b3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fa9d 	bl	800405c <DMA_CheckFifoParam>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2240      	movs	r2, #64	; 0x40
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b36:	2301      	movs	r3, #1
 8003b38:	e016      	b.n	8003b68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa54 	bl	8003ff0 <DMA_CalcBaseAndBitshift>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	223f      	movs	r2, #63	; 0x3f
 8003b52:	409a      	lsls	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	f010803f 	.word	0xf010803f

08003b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_DMA_Start_IT+0x26>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e040      	b.n	8003c1c <HAL_DMA_Start_IT+0xa8>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d12f      	bne.n	8003c0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f9e6 	bl	8003f94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bcc:	223f      	movs	r2, #63	; 0x3f
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0216 	orr.w	r2, r2, #22
 8003be2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0208 	orr.w	r2, r2, #8
 8003bfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e005      	b.n	8003c1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
 8003c18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d004      	beq.n	8003c42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2280      	movs	r2, #128	; 0x80
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e00c      	b.n	8003c5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2205      	movs	r2, #5
 8003c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c74:	4b92      	ldr	r3, [pc, #584]	; (8003ec0 <HAL_DMA_IRQHandler+0x258>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a92      	ldr	r2, [pc, #584]	; (8003ec4 <HAL_DMA_IRQHandler+0x25c>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0a9b      	lsrs	r3, r3, #10
 8003c80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c92:	2208      	movs	r2, #8
 8003c94:	409a      	lsls	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01a      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0204 	bic.w	r2, r2, #4
 8003cba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f043 0201 	orr.w	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	2201      	movs	r2, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d012      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	f043 0202 	orr.w	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0e:	2204      	movs	r2, #4
 8003d10:	409a      	lsls	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d012      	beq.n	8003d40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f043 0204 	orr.w	r2, r3, #4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	2210      	movs	r2, #16
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d043      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d03c      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	2210      	movs	r2, #16
 8003d64:	409a      	lsls	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d024      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
 8003d96:	e01f      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01b      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
 8003da8:	e016      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0208 	bic.w	r2, r2, #8
 8003dc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	2220      	movs	r2, #32
 8003dde:	409a      	lsls	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 808e 	beq.w	8003f06 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8086 	beq.w	8003f06 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfe:	2220      	movs	r2, #32
 8003e00:	409a      	lsls	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d136      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0216 	bic.w	r2, r2, #22
 8003e20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_DMA_IRQHandler+0x1da>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0208 	bic.w	r2, r2, #8
 8003e50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	223f      	movs	r2, #63	; 0x3f
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d07d      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
        }
        return;
 8003e7e:	e078      	b.n	8003f72 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01c      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d108      	bne.n	8003eae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d030      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
 8003eac:	e02b      	b.n	8003f06 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d027      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
 8003ebe:	e022      	b.n	8003f06 <HAL_DMA_IRQHandler+0x29e>
 8003ec0:	20000078 	.word	0x20000078
 8003ec4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10f      	bne.n	8003ef6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0210 	bic.w	r2, r2, #16
 8003ee4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d032      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d022      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2205      	movs	r2, #5
 8003f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	3301      	adds	r3, #1
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d307      	bcc.n	8003f4e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f2      	bne.n	8003f32 <HAL_DMA_IRQHandler+0x2ca>
 8003f4c:	e000      	b.n	8003f50 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003f4e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
 8003f70:	e000      	b.n	8003f74 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f72:	bf00      	nop
    }
  }
}
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop

08003f7c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b40      	cmp	r3, #64	; 0x40
 8003fc0:	d108      	bne.n	8003fd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fd2:	e007      	b.n	8003fe4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	60da      	str	r2, [r3, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	3b10      	subs	r3, #16
 8004000:	4a14      	ldr	r2, [pc, #80]	; (8004054 <DMA_CalcBaseAndBitshift+0x64>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800400a:	4a13      	ldr	r2, [pc, #76]	; (8004058 <DMA_CalcBaseAndBitshift+0x68>)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b03      	cmp	r3, #3
 800401c:	d909      	bls.n	8004032 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004026:	f023 0303 	bic.w	r3, r3, #3
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	659a      	str	r2, [r3, #88]	; 0x58
 8004030:	e007      	b.n	8004042 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	aaaaaaab 	.word	0xaaaaaaab
 8004058:	0800ea40 	.word	0x0800ea40

0800405c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d11f      	bne.n	80040b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d855      	bhi.n	8004128 <DMA_CheckFifoParam+0xcc>
 800407c:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <DMA_CheckFifoParam+0x28>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	08004095 	.word	0x08004095
 8004088:	080040a7 	.word	0x080040a7
 800408c:	08004095 	.word	0x08004095
 8004090:	08004129 	.word	0x08004129
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d045      	beq.n	800412c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a4:	e042      	b.n	800412c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ae:	d13f      	bne.n	8004130 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b4:	e03c      	b.n	8004130 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040be:	d121      	bne.n	8004104 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d836      	bhi.n	8004134 <DMA_CheckFifoParam+0xd8>
 80040c6:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <DMA_CheckFifoParam+0x70>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040e3 	.word	0x080040e3
 80040d4:	080040dd 	.word	0x080040dd
 80040d8:	080040f5 	.word	0x080040f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
      break;
 80040e0:	e02f      	b.n	8004142 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d024      	beq.n	8004138 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f2:	e021      	b.n	8004138 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040fc:	d11e      	bne.n	800413c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004102:	e01b      	b.n	800413c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d902      	bls.n	8004110 <DMA_CheckFifoParam+0xb4>
 800410a:	2b03      	cmp	r3, #3
 800410c:	d003      	beq.n	8004116 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800410e:	e018      	b.n	8004142 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
      break;
 8004114:	e015      	b.n	8004142 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00e      	beq.n	8004140 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	73fb      	strb	r3, [r7, #15]
      break;
 8004126:	e00b      	b.n	8004140 <DMA_CheckFifoParam+0xe4>
      break;
 8004128:	bf00      	nop
 800412a:	e00a      	b.n	8004142 <DMA_CheckFifoParam+0xe6>
      break;
 800412c:	bf00      	nop
 800412e:	e008      	b.n	8004142 <DMA_CheckFifoParam+0xe6>
      break;
 8004130:	bf00      	nop
 8004132:	e006      	b.n	8004142 <DMA_CheckFifoParam+0xe6>
      break;
 8004134:	bf00      	nop
 8004136:	e004      	b.n	8004142 <DMA_CheckFifoParam+0xe6>
      break;
 8004138:	bf00      	nop
 800413a:	e002      	b.n	8004142 <DMA_CheckFifoParam+0xe6>
      break;   
 800413c:	bf00      	nop
 800413e:	e000      	b.n	8004142 <DMA_CheckFifoParam+0xe6>
      break;
 8004140:	bf00      	nop
    }
  } 
  
  return status; 
 8004142:	7bfb      	ldrb	r3, [r7, #15]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	e16b      	b.n	8004444 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800416c:	2201      	movs	r2, #1
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4013      	ands	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	429a      	cmp	r2, r3
 8004186:	f040 815a 	bne.w	800443e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d00b      	beq.n	80041aa <HAL_GPIO_Init+0x5a>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d007      	beq.n	80041aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800419e:	2b11      	cmp	r3, #17
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b12      	cmp	r3, #18
 80041a8:	d130      	bne.n	800420c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	2203      	movs	r2, #3
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041e0:	2201      	movs	r2, #1
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 0201 	and.w	r2, r3, #1
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4313      	orrs	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d003      	beq.n	800424c <HAL_GPIO_Init+0xfc>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b12      	cmp	r3, #18
 800424a:	d123      	bne.n	8004294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	08da      	lsrs	r2, r3, #3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3208      	adds	r2, #8
 8004254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	220f      	movs	r2, #15
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	08da      	lsrs	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3208      	adds	r2, #8
 800428e:	69b9      	ldr	r1, [r7, #24]
 8004290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	2203      	movs	r2, #3
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0203 	and.w	r2, r3, #3
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80b4 	beq.w	800443e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	4b5f      	ldr	r3, [pc, #380]	; (8004458 <HAL_GPIO_Init+0x308>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	4a5e      	ldr	r2, [pc, #376]	; (8004458 <HAL_GPIO_Init+0x308>)
 80042e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042e4:	6453      	str	r3, [r2, #68]	; 0x44
 80042e6:	4b5c      	ldr	r3, [pc, #368]	; (8004458 <HAL_GPIO_Init+0x308>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042f2:	4a5a      	ldr	r2, [pc, #360]	; (800445c <HAL_GPIO_Init+0x30c>)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	089b      	lsrs	r3, r3, #2
 80042f8:	3302      	adds	r3, #2
 80042fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	220f      	movs	r2, #15
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a51      	ldr	r2, [pc, #324]	; (8004460 <HAL_GPIO_Init+0x310>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d02b      	beq.n	8004376 <HAL_GPIO_Init+0x226>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a50      	ldr	r2, [pc, #320]	; (8004464 <HAL_GPIO_Init+0x314>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d025      	beq.n	8004372 <HAL_GPIO_Init+0x222>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a4f      	ldr	r2, [pc, #316]	; (8004468 <HAL_GPIO_Init+0x318>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d01f      	beq.n	800436e <HAL_GPIO_Init+0x21e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a4e      	ldr	r2, [pc, #312]	; (800446c <HAL_GPIO_Init+0x31c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d019      	beq.n	800436a <HAL_GPIO_Init+0x21a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a4d      	ldr	r2, [pc, #308]	; (8004470 <HAL_GPIO_Init+0x320>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d013      	beq.n	8004366 <HAL_GPIO_Init+0x216>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a4c      	ldr	r2, [pc, #304]	; (8004474 <HAL_GPIO_Init+0x324>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00d      	beq.n	8004362 <HAL_GPIO_Init+0x212>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a4b      	ldr	r2, [pc, #300]	; (8004478 <HAL_GPIO_Init+0x328>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d007      	beq.n	800435e <HAL_GPIO_Init+0x20e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a4a      	ldr	r2, [pc, #296]	; (800447c <HAL_GPIO_Init+0x32c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <HAL_GPIO_Init+0x20a>
 8004356:	2307      	movs	r3, #7
 8004358:	e00e      	b.n	8004378 <HAL_GPIO_Init+0x228>
 800435a:	2308      	movs	r3, #8
 800435c:	e00c      	b.n	8004378 <HAL_GPIO_Init+0x228>
 800435e:	2306      	movs	r3, #6
 8004360:	e00a      	b.n	8004378 <HAL_GPIO_Init+0x228>
 8004362:	2305      	movs	r3, #5
 8004364:	e008      	b.n	8004378 <HAL_GPIO_Init+0x228>
 8004366:	2304      	movs	r3, #4
 8004368:	e006      	b.n	8004378 <HAL_GPIO_Init+0x228>
 800436a:	2303      	movs	r3, #3
 800436c:	e004      	b.n	8004378 <HAL_GPIO_Init+0x228>
 800436e:	2302      	movs	r3, #2
 8004370:	e002      	b.n	8004378 <HAL_GPIO_Init+0x228>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_GPIO_Init+0x228>
 8004376:	2300      	movs	r3, #0
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	f002 0203 	and.w	r2, r2, #3
 800437e:	0092      	lsls	r2, r2, #2
 8004380:	4093      	lsls	r3, r2
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4313      	orrs	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004388:	4934      	ldr	r1, [pc, #208]	; (800445c <HAL_GPIO_Init+0x30c>)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	089b      	lsrs	r3, r3, #2
 800438e:	3302      	adds	r3, #2
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004396:	4b3a      	ldr	r3, [pc, #232]	; (8004480 <HAL_GPIO_Init+0x330>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043ba:	4a31      	ldr	r2, [pc, #196]	; (8004480 <HAL_GPIO_Init+0x330>)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043c0:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <HAL_GPIO_Init+0x330>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043e4:	4a26      	ldr	r2, [pc, #152]	; (8004480 <HAL_GPIO_Init+0x330>)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ea:	4b25      	ldr	r3, [pc, #148]	; (8004480 <HAL_GPIO_Init+0x330>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4013      	ands	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800440e:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <HAL_GPIO_Init+0x330>)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004414:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <HAL_GPIO_Init+0x330>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004438:	4a11      	ldr	r2, [pc, #68]	; (8004480 <HAL_GPIO_Init+0x330>)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3301      	adds	r3, #1
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b0f      	cmp	r3, #15
 8004448:	f67f ae90 	bls.w	800416c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800444c:	bf00      	nop
 800444e:	3724      	adds	r7, #36	; 0x24
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40023800 	.word	0x40023800
 800445c:	40013800 	.word	0x40013800
 8004460:	40020000 	.word	0x40020000
 8004464:	40020400 	.word	0x40020400
 8004468:	40020800 	.word	0x40020800
 800446c:	40020c00 	.word	0x40020c00
 8004470:	40021000 	.word	0x40021000
 8004474:	40021400 	.word	0x40021400
 8004478:	40021800 	.word	0x40021800
 800447c:	40021c00 	.word	0x40021c00
 8004480:	40013c00 	.word	0x40013c00

08004484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	887b      	ldrh	r3, [r7, #2]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
 80044a0:	e001      	b.n	80044a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	807b      	strh	r3, [r7, #2]
 80044c0:	4613      	mov	r3, r2
 80044c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044c4:	787b      	ldrb	r3, [r7, #1]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ca:	887a      	ldrh	r2, [r7, #2]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044d0:	e003      	b.n	80044da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044d2:	887b      	ldrh	r3, [r7, #2]
 80044d4:	041a      	lsls	r2, r3, #16
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	619a      	str	r2, [r3, #24]
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e25b      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d075      	beq.n	80045f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004506:	4ba3      	ldr	r3, [pc, #652]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b04      	cmp	r3, #4
 8004510:	d00c      	beq.n	800452c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004512:	4ba0      	ldr	r3, [pc, #640]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800451a:	2b08      	cmp	r3, #8
 800451c:	d112      	bne.n	8004544 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800451e:	4b9d      	ldr	r3, [pc, #628]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452a:	d10b      	bne.n	8004544 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	4b99      	ldr	r3, [pc, #612]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d05b      	beq.n	80045f0 <HAL_RCC_OscConfig+0x108>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d157      	bne.n	80045f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e236      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454c:	d106      	bne.n	800455c <HAL_RCC_OscConfig+0x74>
 800454e:	4b91      	ldr	r3, [pc, #580]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a90      	ldr	r2, [pc, #576]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e01d      	b.n	8004598 <HAL_RCC_OscConfig+0xb0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x98>
 8004566:	4b8b      	ldr	r3, [pc, #556]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a8a      	ldr	r2, [pc, #552]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800456c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b88      	ldr	r3, [pc, #544]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a87      	ldr	r2, [pc, #540]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e00b      	b.n	8004598 <HAL_RCC_OscConfig+0xb0>
 8004580:	4b84      	ldr	r3, [pc, #528]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a83      	ldr	r2, [pc, #524]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4b81      	ldr	r3, [pc, #516]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a80      	ldr	r2, [pc, #512]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d013      	beq.n	80045c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fe fd10 	bl	8002fc4 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a8:	f7fe fd0c 	bl	8002fc4 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	; 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1fb      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ba:	4b76      	ldr	r3, [pc, #472]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0xc0>
 80045c6:	e014      	b.n	80045f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c8:	f7fe fcfc 	bl	8002fc4 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d0:	f7fe fcf8 	bl	8002fc4 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e1e7      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e2:	4b6c      	ldr	r3, [pc, #432]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0xe8>
 80045ee:	e000      	b.n	80045f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d063      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045fe:	4b65      	ldr	r3, [pc, #404]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800460a:	4b62      	ldr	r3, [pc, #392]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004612:	2b08      	cmp	r3, #8
 8004614:	d11c      	bne.n	8004650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004616:	4b5f      	ldr	r3, [pc, #380]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d116      	bne.n	8004650 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004622:	4b5c      	ldr	r3, [pc, #368]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_RCC_OscConfig+0x152>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d001      	beq.n	800463a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e1bb      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463a:	4b56      	ldr	r3, [pc, #344]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4952      	ldr	r1, [pc, #328]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800464a:	4313      	orrs	r3, r2
 800464c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	e03a      	b.n	80046c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004658:	4b4f      	ldr	r3, [pc, #316]	; (8004798 <HAL_RCC_OscConfig+0x2b0>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7fe fcb1 	bl	8002fc4 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004666:	f7fe fcad 	bl	8002fc4 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e19c      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004678:	4b46      	ldr	r3, [pc, #280]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004684:	4b43      	ldr	r3, [pc, #268]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4940      	ldr	r1, [pc, #256]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]
 8004698:	e015      	b.n	80046c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469a:	4b3f      	ldr	r3, [pc, #252]	; (8004798 <HAL_RCC_OscConfig+0x2b0>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fe fc90 	bl	8002fc4 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a8:	f7fe fc8c 	bl	8002fc4 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e17b      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ba:	4b36      	ldr	r3, [pc, #216]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d030      	beq.n	8004734 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046da:	4b30      	ldr	r3, [pc, #192]	; (800479c <HAL_RCC_OscConfig+0x2b4>)
 80046dc:	2201      	movs	r2, #1
 80046de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fe fc70 	bl	8002fc4 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e8:	f7fe fc6c 	bl	8002fc4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e15b      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fa:	4b26      	ldr	r3, [pc, #152]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x200>
 8004706:	e015      	b.n	8004734 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x2b4>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470e:	f7fe fc59 	bl	8002fc4 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004716:	f7fe fc55 	bl	8002fc4 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e144      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b1a      	ldr	r3, [pc, #104]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800472a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f0      	bne.n	8004716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a0 	beq.w	8004882 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004746:	4b13      	ldr	r3, [pc, #76]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10f      	bne.n	8004772 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	4a0e      	ldr	r2, [pc, #56]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004760:	6413      	str	r3, [r2, #64]	; 0x40
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476e:	2301      	movs	r3, #1
 8004770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_OscConfig+0x2b8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d121      	bne.n	80047c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477e:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <HAL_RCC_OscConfig+0x2b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a07      	ldr	r2, [pc, #28]	; (80047a0 <HAL_RCC_OscConfig+0x2b8>)
 8004784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478a:	f7fe fc1b 	bl	8002fc4 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004790:	e011      	b.n	80047b6 <HAL_RCC_OscConfig+0x2ce>
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	42470000 	.word	0x42470000
 800479c:	42470e80 	.word	0x42470e80
 80047a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a4:	f7fe fc0e 	bl	8002fc4 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e0fd      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b6:	4b81      	ldr	r3, [pc, #516]	; (80049bc <HAL_RCC_OscConfig+0x4d4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d106      	bne.n	80047d8 <HAL_RCC_OscConfig+0x2f0>
 80047ca:	4b7d      	ldr	r3, [pc, #500]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a7c      	ldr	r2, [pc, #496]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
 80047d6:	e01c      	b.n	8004812 <HAL_RCC_OscConfig+0x32a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b05      	cmp	r3, #5
 80047de:	d10c      	bne.n	80047fa <HAL_RCC_OscConfig+0x312>
 80047e0:	4b77      	ldr	r3, [pc, #476]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a76      	ldr	r2, [pc, #472]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047e6:	f043 0304 	orr.w	r3, r3, #4
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	4b74      	ldr	r3, [pc, #464]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	4a73      	ldr	r2, [pc, #460]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6713      	str	r3, [r2, #112]	; 0x70
 80047f8:	e00b      	b.n	8004812 <HAL_RCC_OscConfig+0x32a>
 80047fa:	4b71      	ldr	r3, [pc, #452]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	4a70      	ldr	r2, [pc, #448]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	6713      	str	r3, [r2, #112]	; 0x70
 8004806:	4b6e      	ldr	r3, [pc, #440]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a6d      	ldr	r2, [pc, #436]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d015      	beq.n	8004846 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481a:	f7fe fbd3 	bl	8002fc4 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	e00a      	b.n	8004838 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fe fbcf 	bl	8002fc4 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e0bc      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	4b61      	ldr	r3, [pc, #388]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ee      	beq.n	8004822 <HAL_RCC_OscConfig+0x33a>
 8004844:	e014      	b.n	8004870 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004846:	f7fe fbbd 	bl	8002fc4 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484c:	e00a      	b.n	8004864 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f7fe fbb9 	bl	8002fc4 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3288 	movw	r2, #5000	; 0x1388
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e0a6      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004864:	4b56      	ldr	r3, [pc, #344]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1ee      	bne.n	800484e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004870:	7dfb      	ldrb	r3, [r7, #23]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d105      	bne.n	8004882 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004876:	4b52      	ldr	r3, [pc, #328]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	4a51      	ldr	r2, [pc, #324]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 800487c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004880:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8092 	beq.w	80049b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800488c:	4b4c      	ldr	r3, [pc, #304]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 030c 	and.w	r3, r3, #12
 8004894:	2b08      	cmp	r3, #8
 8004896:	d05c      	beq.n	8004952 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d141      	bne.n	8004924 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a0:	4b48      	ldr	r3, [pc, #288]	; (80049c4 <HAL_RCC_OscConfig+0x4dc>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a6:	f7fe fb8d 	bl	8002fc4 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ae:	f7fe fb89 	bl	8002fc4 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e078      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c0:	4b3f      	ldr	r3, [pc, #252]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	019b      	lsls	r3, r3, #6
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	3b01      	subs	r3, #1
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	061b      	lsls	r3, r3, #24
 80048f0:	4933      	ldr	r1, [pc, #204]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f6:	4b33      	ldr	r3, [pc, #204]	; (80049c4 <HAL_RCC_OscConfig+0x4dc>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe fb62 	bl	8002fc4 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7fe fb5e 	bl	8002fc4 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e04d      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004916:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x41c>
 8004922:	e045      	b.n	80049b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_RCC_OscConfig+0x4dc>)
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492a:	f7fe fb4b 	bl	8002fc4 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004932:	f7fe fb47 	bl	8002fc4 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e036      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004944:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f0      	bne.n	8004932 <HAL_RCC_OscConfig+0x44a>
 8004950:	e02e      	b.n	80049b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e029      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800495e:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	429a      	cmp	r2, r3
 8004970:	d11c      	bne.n	80049ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d115      	bne.n	80049ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004986:	4013      	ands	r3, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800498c:	4293      	cmp	r3, r2
 800498e:	d10d      	bne.n	80049ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d106      	bne.n	80049ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40007000 	.word	0x40007000
 80049c0:	40023800 	.word	0x40023800
 80049c4:	42470060 	.word	0x42470060

080049c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0cc      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049dc:	4b68      	ldr	r3, [pc, #416]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d90c      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b63      	ldr	r3, [pc, #396]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0b8      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a1c:	4b59      	ldr	r3, [pc, #356]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a34:	4b53      	ldr	r3, [pc, #332]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a52      	ldr	r2, [pc, #328]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a40:	4b50      	ldr	r3, [pc, #320]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	494d      	ldr	r1, [pc, #308]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d044      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d119      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e07f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b3f      	ldr	r3, [pc, #252]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e06f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a96:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e067      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa6:	4b37      	ldr	r3, [pc, #220]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f023 0203 	bic.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4934      	ldr	r1, [pc, #208]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab8:	f7fe fa84 	bl	8002fc4 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac0:	f7fe fa80 	bl	8002fc4 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e04f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 020c 	and.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1eb      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d20c      	bcs.n	8004b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b22      	ldr	r3, [pc, #136]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e032      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4916      	ldr	r1, [pc, #88]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	490e      	ldr	r1, [pc, #56]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b4e:	f000 f889 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004b52:	4601      	mov	r1, r0
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	4a0a      	ldr	r2, [pc, #40]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004b60:	5cd3      	ldrb	r3, [r2, r3]
 8004b62:	fa21 f303 	lsr.w	r3, r1, r3
 8004b66:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe f9e4 	bl	8002f3c <HAL_InitTick>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023c00 	.word	0x40023c00
 8004b84:	40023800 	.word	0x40023800
 8004b88:	0800ea30 	.word	0x0800ea30
 8004b8c:	20000078 	.word	0x20000078
 8004b90:	2000007c 	.word	0x2000007c

08004b94 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08c      	sub	sp, #48	; 0x30
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d129      	bne.n	8004bfa <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	4b2b      	ldr	r3, [pc, #172]	; (8004c58 <HAL_RCC_MCOConfig+0xc4>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	4a2a      	ldr	r2, [pc, #168]	; (8004c58 <HAL_RCC_MCOConfig+0xc4>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb6:	4b28      	ldr	r3, [pc, #160]	; (8004c58 <HAL_RCC_MCOConfig+0xc4>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004bd8:	f107 031c 	add.w	r3, r7, #28
 8004bdc:	4619      	mov	r1, r3
 8004bde:	481f      	ldr	r0, [pc, #124]	; (8004c5c <HAL_RCC_MCOConfig+0xc8>)
 8004be0:	f7ff fab6 	bl	8004150 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004be4:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <HAL_RCC_MCOConfig+0xc4>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	4919      	ldr	r1, [pc, #100]	; (8004c58 <HAL_RCC_MCOConfig+0xc4>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004bf8:	e029      	b.n	8004c4e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <HAL_RCC_MCOConfig+0xc4>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <HAL_RCC_MCOConfig+0xc4>)
 8004c04:	f043 0304 	orr.w	r3, r3, #4
 8004c08:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0a:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <HAL_RCC_MCOConfig+0xc4>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c20:	2303      	movs	r3, #3
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004c2c:	f107 031c 	add.w	r3, r7, #28
 8004c30:	4619      	mov	r1, r3
 8004c32:	480b      	ldr	r0, [pc, #44]	; (8004c60 <HAL_RCC_MCOConfig+0xcc>)
 8004c34:	f7ff fa8c 	bl	8004150 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_RCC_MCOConfig+0xc4>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	00d9      	lsls	r1, r3, #3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	430b      	orrs	r3, r1
 8004c48:	4903      	ldr	r1, [pc, #12]	; (8004c58 <HAL_RCC_MCOConfig+0xc4>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
}
 8004c4e:	bf00      	nop
 8004c50:	3730      	adds	r7, #48	; 0x30
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	40020000 	.word	0x40020000
 8004c60:	40020800 	.word	0x40020800

08004c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	2300      	movs	r3, #0
 8004c74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c7a:	4b50      	ldr	r3, [pc, #320]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x158>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d007      	beq.n	8004c96 <HAL_RCC_GetSysClockFreq+0x32>
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d008      	beq.n	8004c9c <HAL_RCC_GetSysClockFreq+0x38>
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f040 808d 	bne.w	8004daa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c90:	4b4b      	ldr	r3, [pc, #300]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004c92:	60bb      	str	r3, [r7, #8]
       break;
 8004c94:	e08c      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c96:	4b4b      	ldr	r3, [pc, #300]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c98:	60bb      	str	r3, [r7, #8]
      break;
 8004c9a:	e089      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c9c:	4b47      	ldr	r3, [pc, #284]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x158>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ca4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ca6:	4b45      	ldr	r3, [pc, #276]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x158>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d023      	beq.n	8004cfa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb2:	4b42      	ldr	r3, [pc, #264]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x158>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	099b      	lsrs	r3, r3, #6
 8004cb8:	f04f 0400 	mov.w	r4, #0
 8004cbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	ea03 0501 	and.w	r5, r3, r1
 8004cc8:	ea04 0602 	and.w	r6, r4, r2
 8004ccc:	4a3d      	ldr	r2, [pc, #244]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cce:	fb02 f106 	mul.w	r1, r2, r6
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	fb02 f205 	mul.w	r2, r2, r5
 8004cd8:	440a      	add	r2, r1
 8004cda:	493a      	ldr	r1, [pc, #232]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cdc:	fba5 0101 	umull	r0, r1, r5, r1
 8004ce0:	1853      	adds	r3, r2, r1
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f04f 0400 	mov.w	r4, #0
 8004cea:	461a      	mov	r2, r3
 8004cec:	4623      	mov	r3, r4
 8004cee:	f7fb ffab 	bl	8000c48 <__aeabi_uldivmod>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e049      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cfa:	4b30      	ldr	r3, [pc, #192]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x158>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	099b      	lsrs	r3, r3, #6
 8004d00:	f04f 0400 	mov.w	r4, #0
 8004d04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	ea03 0501 	and.w	r5, r3, r1
 8004d10:	ea04 0602 	and.w	r6, r4, r2
 8004d14:	4629      	mov	r1, r5
 8004d16:	4632      	mov	r2, r6
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	f04f 0400 	mov.w	r4, #0
 8004d20:	0154      	lsls	r4, r2, #5
 8004d22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d26:	014b      	lsls	r3, r1, #5
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	1b49      	subs	r1, r1, r5
 8004d2e:	eb62 0206 	sbc.w	r2, r2, r6
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	f04f 0400 	mov.w	r4, #0
 8004d3a:	0194      	lsls	r4, r2, #6
 8004d3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d40:	018b      	lsls	r3, r1, #6
 8004d42:	1a5b      	subs	r3, r3, r1
 8004d44:	eb64 0402 	sbc.w	r4, r4, r2
 8004d48:	f04f 0100 	mov.w	r1, #0
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	00e2      	lsls	r2, r4, #3
 8004d52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d56:	00d9      	lsls	r1, r3, #3
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4614      	mov	r4, r2
 8004d5c:	195b      	adds	r3, r3, r5
 8004d5e:	eb44 0406 	adc.w	r4, r4, r6
 8004d62:	f04f 0100 	mov.w	r1, #0
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	02a2      	lsls	r2, r4, #10
 8004d6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d70:	0299      	lsls	r1, r3, #10
 8004d72:	460b      	mov	r3, r1
 8004d74:	4614      	mov	r4, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	4621      	mov	r1, r4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f04f 0400 	mov.w	r4, #0
 8004d80:	461a      	mov	r2, r3
 8004d82:	4623      	mov	r3, r4
 8004d84:	f7fb ff60 	bl	8000c48 <__aeabi_uldivmod>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x158>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	3301      	adds	r3, #1
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	60bb      	str	r3, [r7, #8]
      break;
 8004da8:	e002      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004dac:	60bb      	str	r3, [r7, #8]
      break;
 8004dae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004db0:	68bb      	ldr	r3, [r7, #8]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	00f42400 	.word	0x00f42400
 8004dc4:	017d7840 	.word	0x017d7840

08004dc8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e022      	b.n	8004e20 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d105      	bne.n	8004df2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7fd fd8f 	bl	8002910 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2203      	movs	r2, #3
 8004df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f814 	bl	8004e28 <HAL_SD_InitCard>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e00a      	b.n	8004e20 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004e28:	b5b0      	push	{r4, r5, r7, lr}
 8004e2a:	b08e      	sub	sp, #56	; 0x38
 8004e2c:	af04      	add	r7, sp, #16
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004e44:	2376      	movs	r3, #118	; 0x76
 8004e46:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681d      	ldr	r5, [r3, #0]
 8004e4c:	466c      	mov	r4, sp
 8004e4e:	f107 0314 	add.w	r3, r7, #20
 8004e52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e60:	4628      	mov	r0, r5
 8004e62:	f002 fba1 	bl	80075a8 <SDIO_Init>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e031      	b.n	8004edc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004e78:	4b1a      	ldr	r3, [pc, #104]	; (8004ee4 <HAL_SD_InitCard+0xbc>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f002 fbd9 	bl	800763a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004e88:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <HAL_SD_InitCard+0xbc>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 ffdc 	bl	8005e4c <SD_PowerON>
 8004e94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00b      	beq.n	8004eb4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e013      	b.n	8004edc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fefb 	bl	8005cb0 <SD_InitCard>
 8004eba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00b      	beq.n	8004eda <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3728      	adds	r7, #40	; 0x28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ee4:	422580a0 	.word	0x422580a0

08004ee8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08c      	sub	sp, #48	; 0x30
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d107      	bne.n	8004f10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0c9      	b.n	80050a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	f040 80c2 	bne.w	80050a2 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	441a      	add	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d907      	bls.n	8004f42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e0b0      	b.n	80050a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2203      	movs	r2, #3
 8004f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004f60:	f043 0302 	orr.w	r3, r3, #2
 8004f64:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	4a50      	ldr	r2, [pc, #320]	; (80050ac <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8004f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	4a4f      	ldr	r2, [pc, #316]	; (80050b0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8004f74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3380      	adds	r3, #128	; 0x80
 8004f88:	4619      	mov	r1, r3
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	025b      	lsls	r3, r3, #9
 8004f90:	089b      	lsrs	r3, r3, #2
 8004f92:	f7fe fdef 	bl	8003b74 <HAL_DMA_Start_IT>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d017      	beq.n	8004fcc <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004faa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a40      	ldr	r2, [pc, #256]	; (80050b4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e06b      	b.n	80050a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004fcc:	4b3a      	ldr	r3, [pc, #232]	; (80050b8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d002      	beq.n	8004fe0 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	025b      	lsls	r3, r3, #9
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f002 fbb9 	bl	8007760 <SDMMC_CmdBlockLength>
 8004fee:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00f      	beq.n	8005016 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2e      	ldr	r2, [pc, #184]	; (80050b4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e046      	b.n	80050a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	025b      	lsls	r3, r3, #9
 8005020:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005022:	2390      	movs	r3, #144	; 0x90
 8005024:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005026:	2302      	movs	r3, #2
 8005028:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800502a:	2300      	movs	r3, #0
 800502c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800502e:	2301      	movs	r3, #1
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f107 0210 	add.w	r2, r7, #16
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f002 fb63 	bl	8007708 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d90a      	bls.n	800505e <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2282      	movs	r2, #130	; 0x82
 800504c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005054:	4618      	mov	r0, r3
 8005056:	f002 fbc7 	bl	80077e8 <SDMMC_CmdReadMultiBlock>
 800505a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800505c:	e009      	b.n	8005072 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2281      	movs	r2, #129	; 0x81
 8005062:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800506a:	4618      	mov	r0, r3
 800506c:	f002 fb9a 	bl	80077a4 <SDMMC_CmdReadSingleBlock>
 8005070:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d012      	beq.n	800509e <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a0d      	ldr	r2, [pc, #52]	; (80050b4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800507e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	431a      	orrs	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e002      	b.n	80050a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	e000      	b.n	80050a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 80050a2:	2302      	movs	r3, #2
  }
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3730      	adds	r7, #48	; 0x30
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	08005abf 	.word	0x08005abf
 80050b0:	08005b31 	.word	0x08005b31
 80050b4:	004005ff 	.word	0x004005ff
 80050b8:	4225858c 	.word	0x4225858c

080050bc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	; 0x30
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d107      	bne.n	80050e4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0ce      	b.n	8005282 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	f040 80c7 	bne.w	8005280 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80050f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	441a      	add	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005102:	429a      	cmp	r2, r3
 8005104:	d907      	bls.n	8005116 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e0b5      	b.n	8005282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2203      	movs	r2, #3
 800511a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513e:	4a53      	ldr	r2, [pc, #332]	; (800528c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8005140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	4a52      	ldr	r2, [pc, #328]	; (8005290 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8005148:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	2200      	movs	r2, #0
 8005150:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	2b01      	cmp	r3, #1
 8005158:	d002      	beq.n	8005160 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	025b      	lsls	r3, r3, #9
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005168:	4618      	mov	r0, r3
 800516a:	f002 faf9 	bl	8007760 <SDMMC_CmdBlockLength>
 800516e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00f      	beq.n	8005196 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a46      	ldr	r2, [pc, #280]	; (8005294 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	431a      	orrs	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e075      	b.n	8005282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d90a      	bls.n	80051b2 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	22a0      	movs	r2, #160	; 0xa0
 80051a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a8:	4618      	mov	r0, r3
 80051aa:	f002 fb61 	bl	8007870 <SDMMC_CmdWriteMultiBlock>
 80051ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 80051b0:	e009      	b.n	80051c6 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2290      	movs	r2, #144	; 0x90
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051be:	4618      	mov	r0, r3
 80051c0:	f002 fb34 	bl	800782c <SDMMC_CmdWriteSingleBlock>
 80051c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d012      	beq.n	80051f2 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a30      	ldr	r2, [pc, #192]	; (8005294 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	431a      	orrs	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e047      	b.n	8005282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80051f2:	4b29      	ldr	r3, [pc, #164]	; (8005298 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3380      	adds	r3, #128	; 0x80
 8005204:	461a      	mov	r2, r3
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	025b      	lsls	r3, r3, #9
 800520a:	089b      	lsrs	r3, r3, #2
 800520c:	f7fe fcb2 	bl	8003b74 <HAL_DMA_Start_IT>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01c      	beq.n	8005250 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8005224:	f023 0302 	bic.w	r3, r3, #2
 8005228:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a19      	ldr	r2, [pc, #100]	; (8005294 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8005230:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e018      	b.n	8005282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005250:	f04f 33ff 	mov.w	r3, #4294967295
 8005254:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	025b      	lsls	r3, r3, #9
 800525a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800525c:	2390      	movs	r3, #144	; 0x90
 800525e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005264:	2300      	movs	r3, #0
 8005266:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005268:	2301      	movs	r3, #1
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f107 0210 	add.w	r2, r7, #16
 8005274:	4611      	mov	r1, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f002 fa46 	bl	8007708 <SDIO_ConfigData>

      return HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	e000      	b.n	8005282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005280:	2302      	movs	r3, #2
  }
}
 8005282:	4618      	mov	r0, r3
 8005284:	3730      	adds	r7, #48	; 0x30
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	08005a95 	.word	0x08005a95
 8005290:	08005b31 	.word	0x08005b31
 8005294:	004005ff 	.word	0x004005ff
 8005298:	4225858c 	.word	0x4225858c

0800529c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_SD_IRQHandler+0x2e>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 ffd8 	bl	8006278 <SD_Read_IT>
 80052c8:	e165      	b.n	8005596 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 808f 	beq.w	80053f8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80052f2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80052f6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d039      	beq.n	8005386 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d104      	bne.n	8005326 <HAL_SD_IRQHandler+0x8a>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d011      	beq.n	800534a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f002 fac2 	bl	80078b4 <SDMMC_CmdStopTransfer>
 8005330:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f92f 	bl	80055a8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005352:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d104      	bne.n	8005376 <HAL_SD_IRQHandler+0xda>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f002 ff20 	bl	80081bc <HAL_SD_RxCpltCallback>
 800537c:	e10b      	b.n	8005596 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f002 ff12 	bl	80081a8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005384:	e107      	b.n	8005596 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8102 	beq.w	8005596 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d011      	beq.n	80053c0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f002 fa87 	bl	80078b4 <SDMMC_CmdStopTransfer>
 80053a6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d008      	beq.n	80053c0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f8f4 	bl	80055a8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 80e5 	bne.w	8005596 <HAL_SD_IRQHandler+0x2fa>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f040 80df 	bne.w	8005596 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0208 	bic.w	r2, r2, #8
 80053e6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f002 fed9 	bl	80081a8 <HAL_SD_TxCpltCallback>
}
 80053f6:	e0ce      	b.n	8005596 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <HAL_SD_IRQHandler+0x17c>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 ff82 	bl	800631a <SD_Write_IT>
 8005416:	e0be      	b.n	8005596 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800541e:	f240 233a 	movw	r3, #570	; 0x23a
 8005422:	4013      	ands	r3, r2
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80b6 	beq.w	8005596 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	f043 0202 	orr.w	r2, r3, #2
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	f043 0208 	orr.w	r2, r3, #8
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	f043 0220 	orr.w	r2, r3, #32
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	f043 0210 	orr.w	r2, r3, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	f043 0208 	orr.w	r2, r3, #8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f240 723a 	movw	r2, #1850	; 0x73a
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80054c4:	f023 0302 	bic.w	r3, r3, #2
 80054c8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f002 f9f0 	bl	80078b4 <SDMMC_CmdStopTransfer>
 80054d4:	4602      	mov	r2, r0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f855 	bl	80055a8 <HAL_SD_ErrorCallback>
}
 80054fe:	e04a      	b.n	8005596 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b00      	cmp	r3, #0
 8005508:	d045      	beq.n	8005596 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <HAL_SD_IRQHandler+0x282>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d011      	beq.n	8005542 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	4a1f      	ldr	r2, [pc, #124]	; (80055a0 <HAL_SD_IRQHandler+0x304>)
 8005524:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	4618      	mov	r0, r3
 800552c:	f7fe fb7a 	bl	8003c24 <HAL_DMA_Abort_IT>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d02f      	beq.n	8005596 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fb4a 	bl	8005bd4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005540:	e029      	b.n	8005596 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d104      	bne.n	8005556 <HAL_SD_IRQHandler+0x2ba>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d011      	beq.n	800557a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	4a12      	ldr	r2, [pc, #72]	; (80055a4 <HAL_SD_IRQHandler+0x308>)
 800555c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe fb5e 	bl	8003c24 <HAL_DMA_Abort_IT>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d013      	beq.n	8005596 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fb65 	bl	8005c42 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005578:	e00d      	b.n	8005596 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f002 fe00 	bl	8008194 <HAL_SD_AbortCallback>
}
 8005594:	e7ff      	b.n	8005596 <HAL_SD_IRQHandler+0x2fa>
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	08005bd5 	.word	0x08005bd5
 80055a4:	08005c43 	.word	0x08005c43

080055a8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ca:	0f9b      	lsrs	r3, r3, #30
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d6:	0e9b      	lsrs	r3, r3, #26
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e8:	0e1b      	lsrs	r3, r3, #24
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055fa:	0c1b      	lsrs	r3, r3, #16
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	b2da      	uxtb	r2, r3
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005612:	b2da      	uxtb	r2, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800561c:	0d1b      	lsrs	r3, r3, #20
 800561e:	b29a      	uxth	r2, r3
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	b2da      	uxtb	r2, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800563a:	0bdb      	lsrs	r3, r3, #15
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	b2da      	uxtb	r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800564c:	0b9b      	lsrs	r3, r3, #14
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	b2da      	uxtb	r2, r3
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800565e:	0b5b      	lsrs	r3, r3, #13
 8005660:	b2db      	uxtb	r3, r3
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	b2da      	uxtb	r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005670:	0b1b      	lsrs	r3, r3, #12
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	b2da      	uxtb	r2, r3
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2200      	movs	r2, #0
 8005682:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	2b00      	cmp	r3, #0
 800568a:	d163      	bne.n	8005754 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005690:	009a      	lsls	r2, r3, #2
 8005692:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005696:	4013      	ands	r3, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800569c:	0f92      	lsrs	r2, r2, #30
 800569e:	431a      	orrs	r2, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a8:	0edb      	lsrs	r3, r3, #27
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ba:	0e1b      	lsrs	r3, r3, #24
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056cc:	0d5b      	lsrs	r3, r3, #21
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056de:	0c9b      	lsrs	r3, r3, #18
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f0:	0bdb      	lsrs	r3, r3, #15
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	7e1b      	ldrb	r3, [r3, #24]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	3302      	adds	r3, #2
 8005714:	2201      	movs	r2, #1
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800571e:	fb02 f203 	mul.w	r2, r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	7a1b      	ldrb	r3, [r3, #8]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	2201      	movs	r2, #1
 8005732:	409a      	lsls	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005740:	0a52      	lsrs	r2, r2, #9
 8005742:	fb02 f203 	mul.w	r2, r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005750:	661a      	str	r2, [r3, #96]	; 0x60
 8005752:	e031      	b.n	80057b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005758:	2b01      	cmp	r3, #1
 800575a:	d11d      	bne.n	8005798 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005760:	041b      	lsls	r3, r3, #16
 8005762:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	431a      	orrs	r2, r3
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	3301      	adds	r3, #1
 8005778:	029a      	lsls	r2, r3, #10
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800578c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	661a      	str	r2, [r3, #96]	; 0x60
 8005796:	e00f      	b.n	80057b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a58      	ldr	r2, [pc, #352]	; (8005900 <HAL_SD_GetCardCSD+0x344>)
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e09d      	b.n	80058f4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057bc:	0b9b      	lsrs	r3, r3, #14
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ce:	09db      	lsrs	r3, r3, #7
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	0fdb      	lsrs	r3, r3, #31
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fc:	0f5b      	lsrs	r3, r3, #29
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	b2da      	uxtb	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	0e9b      	lsrs	r3, r3, #26
 8005810:	b2db      	uxtb	r3, r3
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	b2da      	uxtb	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005820:	0d9b      	lsrs	r3, r3, #22
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	b2da      	uxtb	r2, r3
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	0d5b      	lsrs	r3, r3, #21
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	b2da      	uxtb	r2, r3
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	0c1b      	lsrs	r3, r3, #16
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	b2da      	uxtb	r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	0bdb      	lsrs	r3, r3, #15
 8005864:	b2db      	uxtb	r3, r3
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	b2da      	uxtb	r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005876:	0b9b      	lsrs	r3, r3, #14
 8005878:	b2db      	uxtb	r3, r3
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	b2da      	uxtb	r2, r3
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	0b5b      	lsrs	r3, r3, #13
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	b2da      	uxtb	r2, r3
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	0b1b      	lsrs	r3, r3, #12
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	0a9b      	lsrs	r3, r3, #10
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	004005ff 	.word	0x004005ff

08005904 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800595c:	b5b0      	push	{r4, r5, r7, lr}
 800595e:	b08e      	sub	sp, #56	; 0x38
 8005960:	af04      	add	r7, sp, #16
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2203      	movs	r2, #3
 800596a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	2b03      	cmp	r3, #3
 8005974:	d02e      	beq.n	80059d4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800597c:	d106      	bne.n	800598c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	639a      	str	r2, [r3, #56]	; 0x38
 800598a:	e029      	b.n	80059e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005992:	d10a      	bne.n	80059aa <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fb0f 	bl	8005fb8 <SD_WideBus_Enable>
 800599a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38
 80059a8:	e01a      	b.n	80059e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fb4c 	bl	800604e <SD_WideBus_Disable>
 80059b6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38
 80059c4:	e00c      	b.n	80059e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
 80059d2:	e005      	b.n	80059e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d009      	beq.n	80059fc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a18      	ldr	r2, [pc, #96]	; (8005a50 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80059ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e024      	b.n	8005a46 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681d      	ldr	r5, [r3, #0]
 8005a22:	466c      	mov	r4, sp
 8005a24:	f107 0318 	add.w	r3, r7, #24
 8005a28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a30:	f107 030c 	add.w	r3, r7, #12
 8005a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a36:	4628      	mov	r0, r5
 8005a38:	f001 fdb6 	bl	80075a8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3728      	adds	r7, #40	; 0x28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	004005ff 	.word	0x004005ff

08005a54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005a60:	f107 030c 	add.w	r3, r7, #12
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa7e 	bl	8005f68 <SD_SendStatus>
 8005a6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	0a5b      	lsrs	r3, r3, #9
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005a8a:	693b      	ldr	r3, [r7, #16]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ab0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	2b82      	cmp	r3, #130	; 0x82
 8005ad2:	d111      	bne.n	8005af8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 feeb 	bl	80078b4 <SDMMC_CmdStopTransfer>
 8005ade:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d008      	beq.n	8005af8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff fd58 	bl	80055a8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0208 	bic.w	r2, r2, #8
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f002 fb4b 	bl	80081bc <HAL_SD_RxCpltCallback>
#endif
}
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fe fa1c 	bl	8003f7c <HAL_DMA_GetError>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d03e      	beq.n	8005bc8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b50:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b58:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d002      	beq.n	8005b66 <SD_DMAError+0x36>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d12d      	bne.n	8005bc2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a19      	ldr	r2, [pc, #100]	; (8005bd0 <SD_DMAError+0xa0>)
 8005b6c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005b7c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005b8a:	6978      	ldr	r0, [r7, #20]
 8005b8c:	f7ff ff62 	bl	8005a54 <HAL_SD_GetCardState>
 8005b90:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	d002      	beq.n	8005b9e <SD_DMAError+0x6e>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b05      	cmp	r3, #5
 8005b9c:	d10a      	bne.n	8005bb4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f001 fe86 	bl	80078b4 <SDMMC_CmdStopTransfer>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005bc2:	6978      	ldr	r0, [r7, #20]
 8005bc4:	f7ff fcf0 	bl	80055a8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005bc8:	bf00      	nop
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	004005ff 	.word	0x004005ff

08005bd4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f240 523a 	movw	r2, #1338	; 0x53a
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7ff ff31 	bl	8005a54 <HAL_SD_GetCardState>
 8005bf2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b06      	cmp	r3, #6
 8005c06:	d002      	beq.n	8005c0e <SD_DMATxAbort+0x3a>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	d10a      	bne.n	8005c24 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fe4e 	bl	80078b4 <SDMMC_CmdStopTransfer>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f002 fab1 	bl	8008194 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005c32:	e002      	b.n	8005c3a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7ff fcb7 	bl	80055a8 <HAL_SD_ErrorCallback>
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f240 523a 	movw	r2, #1338	; 0x53a
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7ff fefa 	bl	8005a54 <HAL_SD_GetCardState>
 8005c60:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b06      	cmp	r3, #6
 8005c74:	d002      	beq.n	8005c7c <SD_DMARxAbort+0x3a>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b05      	cmp	r3, #5
 8005c7a:	d10a      	bne.n	8005c92 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 fe17 	bl	80078b4 <SDMMC_CmdStopTransfer>
 8005c86:	4602      	mov	r2, r0
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d103      	bne.n	8005ca2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f002 fa7a 	bl	8008194 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005ca0:	e002      	b.n	8005ca8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7ff fc80 	bl	80055a8 <HAL_SD_ErrorCallback>
}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005cb0:	b5b0      	push	{r4, r5, r7, lr}
 8005cb2:	b094      	sub	sp, #80	; 0x50
 8005cb4:	af04      	add	r7, sp, #16
 8005cb6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 fcc9 	bl	8007658 <SDIO_GetPowerState>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ccc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005cd0:	e0b7      	b.n	8005e42 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d02f      	beq.n	8005d3a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fef2 	bl	8007ac8 <SDMMC_CmdSendCID>
 8005ce4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <SD_InitCard+0x40>
    {
      return errorstate;
 8005cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cee:	e0a8      	b.n	8005e42 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 fcf3 	bl	80076e2 <SDIO_GetResponse>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2104      	movs	r1, #4
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fcea 	bl	80076e2 <SDIO_GetResponse>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2108      	movs	r1, #8
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 fce1 	bl	80076e2 <SDIO_GetResponse>
 8005d20:	4602      	mov	r2, r0
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	210c      	movs	r1, #12
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 fcd8 	bl	80076e2 <SDIO_GetResponse>
 8005d32:	4602      	mov	r2, r0
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d00d      	beq.n	8005d5e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f107 020e 	add.w	r2, r7, #14
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fef8 	bl	8007b42 <SDMMC_CmdSetRelAdd>
 8005d52:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <SD_InitCard+0xae>
    {
      return errorstate;
 8005d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5c:	e071      	b.n	8005e42 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d036      	beq.n	8005dd4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005d66:	89fb      	ldrh	r3, [r7, #14]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d76:	041b      	lsls	r3, r3, #16
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f001 fec2 	bl	8007b04 <SDMMC_CmdSendCSD>
 8005d80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8a:	e05a      	b.n	8005e42 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 fca5 	bl	80076e2 <SDIO_GetResponse>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2104      	movs	r1, #4
 8005da4:	4618      	mov	r0, r3
 8005da6:	f001 fc9c 	bl	80076e2 <SDIO_GetResponse>
 8005daa:	4602      	mov	r2, r0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2108      	movs	r1, #8
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 fc93 	bl	80076e2 <SDIO_GetResponse>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	210c      	movs	r1, #12
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 fc8a 	bl	80076e2 <SDIO_GetResponse>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2104      	movs	r1, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f001 fc81 	bl	80076e2 <SDIO_GetResponse>
 8005de0:	4603      	mov	r3, r0
 8005de2:	0d1a      	lsrs	r2, r3, #20
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005de8:	f107 0310 	add.w	r3, r7, #16
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff fbe4 	bl	80055bc <HAL_SD_GetCardCSD>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005dfe:	e020      	b.n	8005e42 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6819      	ldr	r1, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	f04f 0400 	mov.w	r4, #0
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4623      	mov	r3, r4
 8005e12:	4608      	mov	r0, r1
 8005e14:	f001 fd70 	bl	80078f8 <SDMMC_CmdSelDesel>
 8005e18:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <SD_InitCard+0x174>
  {
    return errorstate;
 8005e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e22:	e00e      	b.n	8005e42 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681d      	ldr	r5, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	466c      	mov	r4, sp
 8005e2c:	f103 0210 	add.w	r2, r3, #16
 8005e30:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e36:	3304      	adds	r3, #4
 8005e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f001 fbb4 	bl	80075a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3740      	adds	r7, #64	; 0x40
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005e4c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 fd6a 	bl	800793e <SDMMC_CmdGoIdleState>
 8005e6a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	e072      	b.n	8005f5c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 fd7d 	bl	800797a <SDMMC_CmdOperCond>
 8005e80:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 fd53 	bl	800793e <SDMMC_CmdGoIdleState>
 8005e98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <SD_PowerON+0x5e>
    {
      return errorstate;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	e05b      	b.n	8005f5c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d137      	bne.n	8005f22 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 fd7d 	bl	80079b8 <SDMMC_CmdAppCommand>
 8005ebe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d02d      	beq.n	8005f22 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ec6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005eca:	e047      	b.n	8005f5c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f001 fd70 	bl	80079b8 <SDMMC_CmdAppCommand>
 8005ed8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <SD_PowerON+0x98>
    {
      return errorstate;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	e03b      	b.n	8005f5c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	491e      	ldr	r1, [pc, #120]	; (8005f64 <SD_PowerON+0x118>)
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 fd86 	bl	80079fc <SDMMC_CmdAppOperCommand>
 8005ef0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ef8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005efc:	e02e      	b.n	8005f5c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2100      	movs	r1, #0
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 fbec 	bl	80076e2 <SDIO_GetResponse>
 8005f0a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	0fdb      	lsrs	r3, r3, #31
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <SD_PowerON+0xcc>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <SD_PowerON+0xce>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]

    count++;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d802      	bhi.n	8005f32 <SD_PowerON+0xe6>
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0cc      	beq.n	8005ecc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d902      	bls.n	8005f42 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f40:	e00c      	b.n	8005f5c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44
 8005f52:	e002      	b.n	8005f5a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	c1100000 	.word	0xc1100000

08005f68 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005f78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f7c:	e018      	b.n	8005fb0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f86:	041b      	lsls	r3, r3, #16
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f001 fdfa 	bl	8007b84 <SDMMC_CmdSendStatus>
 8005f90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	e009      	b.n	8005fb0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 fb9d 	bl	80076e2 <SDIO_GetResponse>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2100      	movs	r1, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 fb87 	bl	80076e2 <SDIO_GetResponse>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fde:	d102      	bne.n	8005fe6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005fe0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fe4:	e02f      	b.n	8006046 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005fe6:	f107 030c 	add.w	r3, r7, #12
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f879 	bl	80060e4 <SD_FindSCR>
 8005ff2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	e023      	b.n	8006046 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01c      	beq.n	8006042 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f001 fccf 	bl	80079b8 <SDMMC_CmdAppCommand>
 800601a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	e00f      	b.n	8006046 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2102      	movs	r1, #2
 800602c:	4618      	mov	r0, r3
 800602e:	f001 fd08 	bl	8007a42 <SDMMC_CmdBusWidth>
 8006032:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	e003      	b.n	8006046 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800603e:	2300      	movs	r3, #0
 8006040:	e001      	b.n	8006046 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006042:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b086      	sub	sp, #24
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	2300      	movs	r3, #0
 800605c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f001 fb3c 	bl	80076e2 <SDIO_GetResponse>
 800606a:	4603      	mov	r3, r0
 800606c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006074:	d102      	bne.n	800607c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800607a:	e02f      	b.n	80060dc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800607c:	f107 030c 	add.w	r3, r7, #12
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f82e 	bl	80060e4 <SD_FindSCR>
 8006088:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	e023      	b.n	80060dc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01c      	beq.n	80060d8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	4619      	mov	r1, r3
 80060aa:	4610      	mov	r0, r2
 80060ac:	f001 fc84 	bl	80079b8 <SDMMC_CmdAppCommand>
 80060b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	e00f      	b.n	80060dc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2100      	movs	r1, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 fcbd 	bl	8007a42 <SDMMC_CmdBusWidth>
 80060c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	e003      	b.n	80060dc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	e001      	b.n	80060dc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80060d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80060e4:	b590      	push	{r4, r7, lr}
 80060e6:	b08f      	sub	sp, #60	; 0x3c
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80060ee:	f7fc ff69 	bl	8002fc4 <HAL_GetTick>
 80060f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80060f8:	2300      	movs	r3, #0
 80060fa:	60bb      	str	r3, [r7, #8]
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2108      	movs	r1, #8
 800610a:	4618      	mov	r0, r3
 800610c:	f001 fb28 	bl	8007760 <SDMMC_CmdBlockLength>
 8006110:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <SD_FindSCR+0x38>
  {
    return errorstate;
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	e0a9      	b.n	8006270 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f001 fc45 	bl	80079b8 <SDMMC_CmdAppCommand>
 800612e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <SD_FindSCR+0x56>
  {
    return errorstate;
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	e09a      	b.n	8006270 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800613a:	f04f 33ff 	mov.w	r3, #4294967295
 800613e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006140:	2308      	movs	r3, #8
 8006142:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006144:	2330      	movs	r3, #48	; 0x30
 8006146:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006148:	2302      	movs	r3, #2
 800614a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800614c:	2300      	movs	r3, #0
 800614e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006150:	2301      	movs	r3, #1
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f107 0210 	add.w	r2, r7, #16
 800615c:	4611      	mov	r1, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f001 fad2 	bl	8007708 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f001 fc8c 	bl	8007a86 <SDMMC_CmdSendSCR>
 800616e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	d022      	beq.n	80061bc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	e07a      	b.n	8006270 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00e      	beq.n	80061a6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6819      	ldr	r1, [r3, #0]
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	f107 0208 	add.w	r2, r7, #8
 8006194:	18d4      	adds	r4, r2, r3
 8006196:	4608      	mov	r0, r1
 8006198:	f001 fa31 	bl	80075fe <SDIO_ReadFIFO>
 800619c:	4603      	mov	r3, r0
 800619e:	6023      	str	r3, [r4, #0]
      index++;
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	3301      	adds	r3, #1
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80061a6:	f7fc ff0d 	bl	8002fc4 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d102      	bne.n	80061bc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80061b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061ba:	e059      	b.n	8006270 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c2:	f240 432a 	movw	r3, #1066	; 0x42a
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0d6      	beq.n	800617a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2208      	movs	r2, #8
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80061e2:	2308      	movs	r3, #8
 80061e4:	e044      	b.n	8006270 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2202      	movs	r2, #2
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80061fc:	2302      	movs	r3, #2
 80061fe:	e037      	b.n	8006270 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2220      	movs	r2, #32
 8006214:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006216:	2320      	movs	r3, #32
 8006218:	e02a      	b.n	8006270 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006222:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	061a      	lsls	r2, r3, #24
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006230:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	0a1b      	lsrs	r3, r3, #8
 8006236:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800623a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	0e1b      	lsrs	r3, r3, #24
 8006240:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	601a      	str	r2, [r3, #0]
    scr++;
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	3304      	adds	r3, #4
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	061a      	lsls	r2, r3, #24
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006258:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	0a1b      	lsrs	r3, r3, #8
 800625e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006262:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	0e1b      	lsrs	r3, r3, #24
 8006268:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	373c      	adds	r7, #60	; 0x3c
 8006274:	46bd      	mov	sp, r7
 8006276:	bd90      	pop	{r4, r7, pc}

08006278 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d03f      	beq.n	8006312 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006292:	2300      	movs	r3, #0
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	e033      	b.n	8006300 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4618      	mov	r0, r3
 800629e:	f001 f9ae 	bl	80075fe <SDIO_ReadFIFO>
 80062a2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	0a1b      	lsrs	r3, r3, #8
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3301      	adds	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	0e1b      	lsrs	r3, r3, #24
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	3301      	adds	r3, #1
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2b07      	cmp	r3, #7
 8006304:	d9c8      	bls.n	8006298 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006312:	bf00      	nop
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b086      	sub	sp, #24
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d043      	beq.n	80063bc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006334:	2300      	movs	r3, #0
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	e037      	b.n	80063aa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3b01      	subs	r3, #1
 800634a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	021a      	lsls	r2, r3, #8
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	4313      	orrs	r3, r2
 8006356:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3301      	adds	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	3b01      	subs	r3, #1
 8006362:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	041a      	lsls	r2, r3, #16
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4313      	orrs	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3301      	adds	r3, #1
 8006374:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	3b01      	subs	r3, #1
 800637a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	061a      	lsls	r2, r3, #24
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4313      	orrs	r3, r2
 8006386:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3b01      	subs	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f107 0208 	add.w	r2, r7, #8
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 f93a 	bl	8007618 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	3301      	adds	r3, #1
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b07      	cmp	r3, #7
 80063ae:	d9c4      	bls.n	800633a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80063bc:	bf00      	nop
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e056      	b.n	8006484 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d106      	bne.n	80063f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7fc fb8d 	bl	8002b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2202      	movs	r2, #2
 80063fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800640c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	ea42 0103 	orr.w	r1, r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	0c1b      	lsrs	r3, r3, #16
 8006454:	f003 0104 	and.w	r1, r3, #4
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69da      	ldr	r2, [r3, #28]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006472:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	4613      	mov	r3, r2
 800649a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <HAL_SPI_Transmit+0x22>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e11e      	b.n	80066ec <HAL_SPI_Transmit+0x260>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064b6:	f7fc fd85 	bl	8002fc4 <HAL_GetTick>
 80064ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d002      	beq.n	80064d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064cc:	2302      	movs	r3, #2
 80064ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064d0:	e103      	b.n	80066da <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <HAL_SPI_Transmit+0x52>
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d102      	bne.n	80064e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064e2:	e0fa      	b.n	80066da <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2203      	movs	r2, #3
 80064e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	88fa      	ldrh	r2, [r7, #6]
 8006502:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652a:	d107      	bne.n	800653c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800653a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	d007      	beq.n	800655a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006558:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006562:	d14b      	bne.n	80065fc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <HAL_SPI_Transmit+0xe6>
 800656c:	8afb      	ldrh	r3, [r7, #22]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d13e      	bne.n	80065f0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	881a      	ldrh	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	1c9a      	adds	r2, r3, #2
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006596:	e02b      	b.n	80065f0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d112      	bne.n	80065cc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	881a      	ldrh	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	1c9a      	adds	r2, r3, #2
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80065ca:	e011      	b.n	80065f0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065cc:	f7fc fcfa 	bl	8002fc4 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d803      	bhi.n	80065e4 <HAL_SPI_Transmit+0x158>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d102      	bne.n	80065ea <HAL_SPI_Transmit+0x15e>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065ee:	e074      	b.n	80066da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1ce      	bne.n	8006598 <HAL_SPI_Transmit+0x10c>
 80065fa:	e04c      	b.n	8006696 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <HAL_SPI_Transmit+0x17e>
 8006604:	8afb      	ldrh	r3, [r7, #22]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d140      	bne.n	800668c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	330c      	adds	r3, #12
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006630:	e02c      	b.n	800668c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b02      	cmp	r3, #2
 800663e:	d113      	bne.n	8006668 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	7812      	ldrb	r2, [r2, #0]
 800664c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	86da      	strh	r2, [r3, #54]	; 0x36
 8006666:	e011      	b.n	800668c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006668:	f7fc fcac 	bl	8002fc4 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d803      	bhi.n	8006680 <HAL_SPI_Transmit+0x1f4>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667e:	d102      	bne.n	8006686 <HAL_SPI_Transmit+0x1fa>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d102      	bne.n	800668c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	77fb      	strb	r3, [r7, #31]
          goto error;
 800668a:	e026      	b.n	80066da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1cd      	bne.n	8006632 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fba4 	bl	8006de8 <SPI_EndRxTxTransaction>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066b4:	2300      	movs	r3, #0
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e000      	b.n	80066da <HAL_SPI_Transmit+0x24e>
  }

error:
 80066d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3720      	adds	r7, #32
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006710:	d112      	bne.n	8006738 <HAL_SPI_Receive+0x44>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10e      	bne.n	8006738 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2204      	movs	r2, #4
 800671e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006722:	88fa      	ldrh	r2, [r7, #6]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	4613      	mov	r3, r2
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f8e9 	bl	8006906 <HAL_SPI_TransmitReceive>
 8006734:	4603      	mov	r3, r0
 8006736:	e0e2      	b.n	80068fe <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_SPI_Receive+0x52>
 8006742:	2302      	movs	r3, #2
 8006744:	e0db      	b.n	80068fe <HAL_SPI_Receive+0x20a>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800674e:	f7fc fc39 	bl	8002fc4 <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b01      	cmp	r3, #1
 800675e:	d002      	beq.n	8006766 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006760:	2302      	movs	r3, #2
 8006762:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006764:	e0c2      	b.n	80068ec <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_SPI_Receive+0x7e>
 800676c:	88fb      	ldrh	r3, [r7, #6]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d102      	bne.n	8006778 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006776:	e0b9      	b.n	80068ec <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2204      	movs	r2, #4
 800677c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	88fa      	ldrh	r2, [r7, #6]
 8006790:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067be:	d107      	bne.n	80067d0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d007      	beq.n	80067ee <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d162      	bne.n	80068bc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067f6:	e02e      	b.n	8006856 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b01      	cmp	r3, #1
 8006804:	d115      	bne.n	8006832 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f103 020c 	add.w	r2, r3, #12
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	7812      	ldrb	r2, [r2, #0]
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006830:	e011      	b.n	8006856 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006832:	f7fc fbc7 	bl	8002fc4 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d803      	bhi.n	800684a <HAL_SPI_Receive+0x156>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d102      	bne.n	8006850 <HAL_SPI_Receive+0x15c>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006854:	e04a      	b.n	80068ec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1cb      	bne.n	80067f8 <HAL_SPI_Receive+0x104>
 8006860:	e031      	b.n	80068c6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d113      	bne.n	8006898 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	b292      	uxth	r2, r2
 800687c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	1c9a      	adds	r2, r3, #2
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006896:	e011      	b.n	80068bc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006898:	f7fc fb94 	bl	8002fc4 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d803      	bhi.n	80068b0 <HAL_SPI_Receive+0x1bc>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ae:	d102      	bne.n	80068b6 <HAL_SPI_Receive+0x1c2>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068ba:	e017      	b.n	80068ec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1cd      	bne.n	8006862 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fa27 	bl	8006d1e <SPI_EndRxTransaction>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	75fb      	strb	r3, [r7, #23]
 80068e8:	e000      	b.n	80068ec <HAL_SPI_Receive+0x1f8>
  }

error :
 80068ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b08c      	sub	sp, #48	; 0x30
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006914:	2301      	movs	r3, #1
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_SPI_TransmitReceive+0x26>
 8006928:	2302      	movs	r3, #2
 800692a:	e18a      	b.n	8006c42 <HAL_SPI_TransmitReceive+0x33c>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006934:	f7fc fb46 	bl	8002fc4 <HAL_GetTick>
 8006938:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800694a:	887b      	ldrh	r3, [r7, #2]
 800694c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800694e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006952:	2b01      	cmp	r3, #1
 8006954:	d00f      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x70>
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800695c:	d107      	bne.n	800696e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d103      	bne.n	800696e <HAL_SPI_TransmitReceive+0x68>
 8006966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800696a:	2b04      	cmp	r3, #4
 800696c:	d003      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800696e:	2302      	movs	r3, #2
 8006970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006974:	e15b      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x82>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x82>
 8006982:	887b      	ldrh	r3, [r7, #2]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d103      	bne.n	8006990 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800698e:	e14e      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b04      	cmp	r3, #4
 800699a:	d003      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2205      	movs	r2, #5
 80069a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	887a      	ldrh	r2, [r7, #2]
 80069b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	887a      	ldrh	r2, [r7, #2]
 80069ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	887a      	ldrh	r2, [r7, #2]
 80069c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	887a      	ldrh	r2, [r7, #2]
 80069cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e4:	2b40      	cmp	r3, #64	; 0x40
 80069e6:	d007      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a00:	d178      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <HAL_SPI_TransmitReceive+0x10a>
 8006a0a:	8b7b      	ldrh	r3, [r7, #26]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d166      	bne.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	881a      	ldrh	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a20:	1c9a      	adds	r2, r3, #2
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a34:	e053      	b.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d11b      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x176>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d016      	beq.n	8006a7c <HAL_SPI_TransmitReceive+0x176>
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d113      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a58:	881a      	ldrh	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a64:	1c9a      	adds	r2, r3, #2
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d119      	bne.n	8006abe <HAL_SPI_TransmitReceive+0x1b8>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d014      	beq.n	8006abe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	1c9a      	adds	r2, r3, #2
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aba:	2301      	movs	r3, #1
 8006abc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006abe:	f7fc fa81 	bl	8002fc4 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d807      	bhi.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad4:	d003      	beq.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006adc:	e0a7      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1a6      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x130>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1a1      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x130>
 8006af2:	e07c      	b.n	8006bee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <HAL_SPI_TransmitReceive+0x1fc>
 8006afc:	8b7b      	ldrh	r3, [r7, #26]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d16b      	bne.n	8006bda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	7812      	ldrb	r2, [r2, #0]
 8006b0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b28:	e057      	b.n	8006bda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d11c      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x26c>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d017      	beq.n	8006b72 <HAL_SPI_TransmitReceive+0x26c>
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d114      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	7812      	ldrb	r2, [r2, #0]
 8006b54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	3b01      	subs	r3, #1
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d119      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x2ae>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d014      	beq.n	8006bb4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bb4:	f7fc fa06 	bl	8002fc4 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d803      	bhi.n	8006bcc <HAL_SPI_TransmitReceive+0x2c6>
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	d102      	bne.n	8006bd2 <HAL_SPI_TransmitReceive+0x2cc>
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d103      	bne.n	8006bda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006bd8:	e029      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1a2      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x224>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d19d      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f8f8 	bl	8006de8 <SPI_EndRxTxTransaction>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d006      	beq.n	8006c0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c0a:	e010      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	e000      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3730      	adds	r7, #48	; 0x30
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	603b      	str	r3, [r7, #0]
 8006c56:	4613      	mov	r3, r2
 8006c58:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c5a:	e04c      	b.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d048      	beq.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006c64:	f7fc f9ae 	bl	8002fc4 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d902      	bls.n	8006c7a <SPI_WaitFlagStateUntilTimeout+0x30>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d13d      	bne.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c92:	d111      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9c:	d004      	beq.n	8006ca8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca6:	d107      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cc0:	d10f      	bne.n	8006ce2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e00f      	b.n	8006d16 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	bf0c      	ite	eq
 8006d06:	2301      	moveq	r3, #1
 8006d08:	2300      	movne	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d1a3      	bne.n	8006c5c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b086      	sub	sp, #24
 8006d22:	af02      	add	r7, sp, #8
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d32:	d111      	bne.n	8006d58 <SPI_EndRxTransaction+0x3a>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d3c:	d004      	beq.n	8006d48 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d46:	d107      	bne.n	8006d58 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d56:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d60:	d12a      	bne.n	8006db8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d6a:	d012      	beq.n	8006d92 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2200      	movs	r2, #0
 8006d74:	2180      	movs	r1, #128	; 0x80
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7ff ff67 	bl	8006c4a <SPI_WaitFlagStateUntilTimeout>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d02d      	beq.n	8006dde <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d86:	f043 0220 	orr.w	r2, r3, #32
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e026      	b.n	8006de0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff ff54 	bl	8006c4a <SPI_WaitFlagStateUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01a      	beq.n	8006dde <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dac:	f043 0220 	orr.w	r2, r3, #32
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e013      	b.n	8006de0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff ff41 	bl	8006c4a <SPI_WaitFlagStateUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d007      	beq.n	8006dde <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd2:	f043 0220 	orr.w	r2, r3, #32
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e000      	b.n	8006de0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006df4:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <SPI_EndRxTxTransaction+0x7c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1b      	ldr	r2, [pc, #108]	; (8006e68 <SPI_EndRxTxTransaction+0x80>)
 8006dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfe:	0d5b      	lsrs	r3, r3, #21
 8006e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e04:	fb02 f303 	mul.w	r3, r2, r3
 8006e08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e12:	d112      	bne.n	8006e3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2180      	movs	r1, #128	; 0x80
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7ff ff13 	bl	8006c4a <SPI_WaitFlagStateUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d016      	beq.n	8006e58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2e:	f043 0220 	orr.w	r2, r3, #32
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e00f      	b.n	8006e5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e50:	2b80      	cmp	r3, #128	; 0x80
 8006e52:	d0f2      	beq.n	8006e3a <SPI_EndRxTxTransaction+0x52>
 8006e54:	e000      	b.n	8006e58 <SPI_EndRxTxTransaction+0x70>
        break;
 8006e56:	bf00      	nop
  }

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000078 	.word	0x20000078
 8006e68:	165e9f81 	.word	0x165e9f81

08006e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e01d      	b.n	8006eba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fb feca 	bl	8002c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4610      	mov	r0, r2
 8006eac:	f000 fa26 	bl	80072fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0201 	orr.w	r2, r2, #1
 8006ed8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b06      	cmp	r3, #6
 8006eea:	d007      	beq.n	8006efc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b086      	sub	sp, #24
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e083      	b.n	8007026 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fb fe34 	bl	8002ba0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6812      	ldr	r2, [r2, #0]
 8006f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f4e:	f023 0307 	bic.w	r3, r3, #7
 8006f52:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f000 f9cc 	bl	80072fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8c:	f023 0303 	bic.w	r3, r3, #3
 8006f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006faa:	f023 030c 	bic.w	r3, r3, #12
 8006fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	021b      	lsls	r3, r3, #8
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	011a      	lsls	r2, r3, #4
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	031b      	lsls	r3, r3, #12
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006fe8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ff0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <HAL_TIM_Encoder_Start+0x16>
 800703e:	2b04      	cmp	r3, #4
 8007040:	d008      	beq.n	8007054 <HAL_TIM_Encoder_Start+0x26>
 8007042:	e00f      	b.n	8007064 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2201      	movs	r2, #1
 800704a:	2100      	movs	r1, #0
 800704c:	4618      	mov	r0, r3
 800704e:	f000 f9f5 	bl	800743c <TIM_CCxChannelCmd>
      break;
 8007052:	e016      	b.n	8007082 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2201      	movs	r2, #1
 800705a:	2104      	movs	r1, #4
 800705c:	4618      	mov	r0, r3
 800705e:	f000 f9ed 	bl	800743c <TIM_CCxChannelCmd>
      break;
 8007062:	e00e      	b.n	8007082 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2201      	movs	r2, #1
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f000 f9e5 	bl	800743c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2201      	movs	r2, #1
 8007078:	2104      	movs	r1, #4
 800707a:	4618      	mov	r0, r3
 800707c:	f000 f9de 	bl	800743c <TIM_CCxChannelCmd>
      break;
 8007080:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0201 	orr.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d122      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d11b      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f06f 0202 	mvn.w	r2, #2
 80070c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f8ee 	bl	80072c0 <HAL_TIM_IC_CaptureCallback>
 80070e4:	e005      	b.n	80070f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f8e0 	bl	80072ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f8f1 	bl	80072d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	2b04      	cmp	r3, #4
 8007104:	d122      	bne.n	800714c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b04      	cmp	r3, #4
 8007112:	d11b      	bne.n	800714c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f06f 0204 	mvn.w	r2, #4
 800711c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2202      	movs	r2, #2
 8007122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f8c4 	bl	80072c0 <HAL_TIM_IC_CaptureCallback>
 8007138:	e005      	b.n	8007146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f8b6 	bl	80072ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f8c7 	bl	80072d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b08      	cmp	r3, #8
 8007158:	d122      	bne.n	80071a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b08      	cmp	r3, #8
 8007166:	d11b      	bne.n	80071a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0208 	mvn.w	r2, #8
 8007170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2204      	movs	r2, #4
 8007176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f89a 	bl	80072c0 <HAL_TIM_IC_CaptureCallback>
 800718c:	e005      	b.n	800719a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f88c 	bl	80072ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f89d 	bl	80072d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f003 0310 	and.w	r3, r3, #16
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d122      	bne.n	80071f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f003 0310 	and.w	r3, r3, #16
 80071b8:	2b10      	cmp	r3, #16
 80071ba:	d11b      	bne.n	80071f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f06f 0210 	mvn.w	r2, #16
 80071c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2208      	movs	r2, #8
 80071ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f870 	bl	80072c0 <HAL_TIM_IC_CaptureCallback>
 80071e0:	e005      	b.n	80071ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f862 	bl	80072ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f873 	bl	80072d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d10e      	bne.n	8007220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b01      	cmp	r3, #1
 800720e:	d107      	bne.n	8007220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f06f 0201 	mvn.w	r2, #1
 8007218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fa fac4 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722a:	2b80      	cmp	r3, #128	; 0x80
 800722c:	d10e      	bne.n	800724c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007238:	2b80      	cmp	r3, #128	; 0x80
 800723a:	d107      	bne.n	800724c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f9a4 	bl	8007594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d10e      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007264:	2b40      	cmp	r3, #64	; 0x40
 8007266:	d107      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f838 	bl	80072e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b20      	cmp	r3, #32
 8007284:	d10e      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b20      	cmp	r3, #32
 8007292:	d107      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0220 	mvn.w	r2, #32
 800729c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f96e 	bl	8007580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a40      	ldr	r2, [pc, #256]	; (8007410 <TIM_Base_SetConfig+0x114>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d013      	beq.n	800733c <TIM_Base_SetConfig+0x40>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800731a:	d00f      	beq.n	800733c <TIM_Base_SetConfig+0x40>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a3d      	ldr	r2, [pc, #244]	; (8007414 <TIM_Base_SetConfig+0x118>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00b      	beq.n	800733c <TIM_Base_SetConfig+0x40>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a3c      	ldr	r2, [pc, #240]	; (8007418 <TIM_Base_SetConfig+0x11c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d007      	beq.n	800733c <TIM_Base_SetConfig+0x40>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a3b      	ldr	r2, [pc, #236]	; (800741c <TIM_Base_SetConfig+0x120>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_Base_SetConfig+0x40>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a3a      	ldr	r2, [pc, #232]	; (8007420 <TIM_Base_SetConfig+0x124>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d108      	bne.n	800734e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a2f      	ldr	r2, [pc, #188]	; (8007410 <TIM_Base_SetConfig+0x114>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d02b      	beq.n	80073ae <TIM_Base_SetConfig+0xb2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735c:	d027      	beq.n	80073ae <TIM_Base_SetConfig+0xb2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a2c      	ldr	r2, [pc, #176]	; (8007414 <TIM_Base_SetConfig+0x118>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d023      	beq.n	80073ae <TIM_Base_SetConfig+0xb2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a2b      	ldr	r2, [pc, #172]	; (8007418 <TIM_Base_SetConfig+0x11c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d01f      	beq.n	80073ae <TIM_Base_SetConfig+0xb2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a2a      	ldr	r2, [pc, #168]	; (800741c <TIM_Base_SetConfig+0x120>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d01b      	beq.n	80073ae <TIM_Base_SetConfig+0xb2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a29      	ldr	r2, [pc, #164]	; (8007420 <TIM_Base_SetConfig+0x124>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d017      	beq.n	80073ae <TIM_Base_SetConfig+0xb2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a28      	ldr	r2, [pc, #160]	; (8007424 <TIM_Base_SetConfig+0x128>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d013      	beq.n	80073ae <TIM_Base_SetConfig+0xb2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a27      	ldr	r2, [pc, #156]	; (8007428 <TIM_Base_SetConfig+0x12c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00f      	beq.n	80073ae <TIM_Base_SetConfig+0xb2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a26      	ldr	r2, [pc, #152]	; (800742c <TIM_Base_SetConfig+0x130>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d00b      	beq.n	80073ae <TIM_Base_SetConfig+0xb2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a25      	ldr	r2, [pc, #148]	; (8007430 <TIM_Base_SetConfig+0x134>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d007      	beq.n	80073ae <TIM_Base_SetConfig+0xb2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a24      	ldr	r2, [pc, #144]	; (8007434 <TIM_Base_SetConfig+0x138>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d003      	beq.n	80073ae <TIM_Base_SetConfig+0xb2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a23      	ldr	r2, [pc, #140]	; (8007438 <TIM_Base_SetConfig+0x13c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d108      	bne.n	80073c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	4313      	orrs	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <TIM_Base_SetConfig+0x114>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d003      	beq.n	80073f4 <TIM_Base_SetConfig+0xf8>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a0c      	ldr	r2, [pc, #48]	; (8007420 <TIM_Base_SetConfig+0x124>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d103      	bne.n	80073fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	691a      	ldr	r2, [r3, #16]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	615a      	str	r2, [r3, #20]
}
 8007402:	bf00      	nop
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40010000 	.word	0x40010000
 8007414:	40000400 	.word	0x40000400
 8007418:	40000800 	.word	0x40000800
 800741c:	40000c00 	.word	0x40000c00
 8007420:	40010400 	.word	0x40010400
 8007424:	40014000 	.word	0x40014000
 8007428:	40014400 	.word	0x40014400
 800742c:	40014800 	.word	0x40014800
 8007430:	40001800 	.word	0x40001800
 8007434:	40001c00 	.word	0x40001c00
 8007438:	40002000 	.word	0x40002000

0800743c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f003 031f 	and.w	r3, r3, #31
 800744e:	2201      	movs	r2, #1
 8007450:	fa02 f303 	lsl.w	r3, r2, r3
 8007454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a1a      	ldr	r2, [r3, #32]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	43db      	mvns	r3, r3
 800745e:	401a      	ands	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a1a      	ldr	r2, [r3, #32]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f003 031f 	and.w	r3, r3, #31
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	fa01 f303 	lsl.w	r3, r1, r3
 8007474:	431a      	orrs	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	621a      	str	r2, [r3, #32]
}
 800747a:	bf00      	nop
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
	...

08007488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800749c:	2302      	movs	r3, #2
 800749e:	e05a      	b.n	8007556 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a21      	ldr	r2, [pc, #132]	; (8007564 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d022      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ec:	d01d      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a1d      	ldr	r2, [pc, #116]	; (8007568 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d018      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a1b      	ldr	r2, [pc, #108]	; (800756c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d013      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a1a      	ldr	r2, [pc, #104]	; (8007570 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00e      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a18      	ldr	r2, [pc, #96]	; (8007574 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d009      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a17      	ldr	r2, [pc, #92]	; (8007578 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d004      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a15      	ldr	r2, [pc, #84]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d10c      	bne.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	4313      	orrs	r3, r2
 800753a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	40010000 	.word	0x40010000
 8007568:	40000400 	.word	0x40000400
 800756c:	40000800 	.word	0x40000800
 8007570:	40000c00 	.word	0x40000c00
 8007574:	40010400 	.word	0x40010400
 8007578:	40014000 	.word	0x40014000
 800757c:	40001800 	.word	0x40001800

08007580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80075a8:	b084      	sub	sp, #16
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	f107 001c 	add.w	r0, r7, #28
 80075b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80075be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80075c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80075c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80075c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80075ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80075ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80075d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80075e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	b004      	add	sp, #16
 80075fc:	4770      	bx	lr

080075fe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2203      	movs	r2, #3
 8007646:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007648:	2002      	movs	r0, #2
 800764a:	f7fb fcc7 	bl	8002fdc <HAL_Delay>
  
  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0303 	and.w	r3, r3, #3
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007692:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007698:	431a      	orrs	r2, r3
                       Command->CPSM);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800769e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80076ae:	f023 030f 	bic.w	r3, r3, #15
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	b2db      	uxtb	r3, r3
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3314      	adds	r3, #20
 80076f0:	461a      	mov	r2, r3
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	4413      	add	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
}  
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800772e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007734:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800773a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007752:	2300      	movs	r3, #0

}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800776e:	2310      	movs	r3, #16
 8007770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007772:	2340      	movs	r3, #64	; 0x40
 8007774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800777a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800777e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007780:	f107 0308 	add.w	r3, r7, #8
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7ff ff74 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800778c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007790:	2110      	movs	r1, #16
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa40 	bl	8007c18 <SDMMC_GetCmdResp1>
 8007798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800779a:	69fb      	ldr	r3, [r7, #28]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3720      	adds	r7, #32
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80077b2:	2311      	movs	r3, #17
 80077b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077b6:	2340      	movs	r3, #64	; 0x40
 80077b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077c4:	f107 0308 	add.w	r3, r7, #8
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff ff52 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80077d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d4:	2111      	movs	r1, #17
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa1e 	bl	8007c18 <SDMMC_GetCmdResp1>
 80077dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077de:	69fb      	ldr	r3, [r7, #28]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3720      	adds	r7, #32
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80077f6:	2312      	movs	r3, #18
 80077f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077fa:	2340      	movs	r3, #64	; 0x40
 80077fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077fe:	2300      	movs	r3, #0
 8007800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007806:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007808:	f107 0308 	add.w	r3, r7, #8
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff ff30 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007814:	f241 3288 	movw	r2, #5000	; 0x1388
 8007818:	2112      	movs	r1, #18
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f9fc 	bl	8007c18 <SDMMC_GetCmdResp1>
 8007820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007822:	69fb      	ldr	r3, [r7, #28]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3720      	adds	r7, #32
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800783a:	2318      	movs	r3, #24
 800783c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800783e:	2340      	movs	r3, #64	; 0x40
 8007840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800784a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800784c:	f107 0308 	add.w	r3, r7, #8
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff ff0e 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007858:	f241 3288 	movw	r2, #5000	; 0x1388
 800785c:	2118      	movs	r1, #24
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f9da 	bl	8007c18 <SDMMC_GetCmdResp1>
 8007864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007866:	69fb      	ldr	r3, [r7, #28]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3720      	adds	r7, #32
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800787e:	2319      	movs	r3, #25
 8007880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007882:	2340      	movs	r3, #64	; 0x40
 8007884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800788a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800788e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007890:	f107 0308 	add.w	r3, r7, #8
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff feec 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800789c:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a0:	2119      	movs	r1, #25
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f9b8 	bl	8007c18 <SDMMC_GetCmdResp1>
 80078a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078aa:	69fb      	ldr	r3, [r7, #28]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3720      	adds	r7, #32
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80078c0:	230c      	movs	r3, #12
 80078c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078c4:	2340      	movs	r3, #64	; 0x40
 80078c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078d2:	f107 0308 	add.w	r3, r7, #8
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff fecb 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80078de:	4a05      	ldr	r2, [pc, #20]	; (80078f4 <SDMMC_CmdStopTransfer+0x40>)
 80078e0:	210c      	movs	r1, #12
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f998 	bl	8007c18 <SDMMC_GetCmdResp1>
 80078e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078ea:	69fb      	ldr	r3, [r7, #28]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3720      	adds	r7, #32
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	05f5e100 	.word	0x05f5e100

080078f8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08a      	sub	sp, #40	; 0x28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007908:	2307      	movs	r3, #7
 800790a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800790c:	2340      	movs	r3, #64	; 0x40
 800790e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007910:	2300      	movs	r3, #0
 8007912:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007918:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800791a:	f107 0310 	add.w	r3, r7, #16
 800791e:	4619      	mov	r1, r3
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7ff fea7 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007926:	f241 3288 	movw	r2, #5000	; 0x1388
 800792a:	2107      	movs	r1, #7
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f973 	bl	8007c18 <SDMMC_GetCmdResp1>
 8007932:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007936:	4618      	mov	r0, r3
 8007938:	3728      	adds	r7, #40	; 0x28
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b088      	sub	sp, #32
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800794e:	2300      	movs	r3, #0
 8007950:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007952:	2300      	movs	r3, #0
 8007954:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800795a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800795c:	f107 0308 	add.w	r3, r7, #8
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fe86 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f92d 	bl	8007bc8 <SDMMC_GetCmdError>
 800796e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007970:	69fb      	ldr	r3, [r7, #28]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b088      	sub	sp, #32
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007982:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007986:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007988:	2308      	movs	r3, #8
 800798a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800798c:	2340      	movs	r3, #64	; 0x40
 800798e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007998:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800799a:	f107 0308 	add.w	r3, r7, #8
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff fe67 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fb16 	bl	8007fd8 <SDMMC_GetCmdResp7>
 80079ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079ae:	69fb      	ldr	r3, [r7, #28]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3720      	adds	r7, #32
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80079c6:	2337      	movs	r3, #55	; 0x37
 80079c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079ca:	2340      	movs	r3, #64	; 0x40
 80079cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079d8:	f107 0308 	add.w	r3, r7, #8
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff fe48 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80079e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e8:	2137      	movs	r1, #55	; 0x37
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f914 	bl	8007c18 <SDMMC_GetCmdResp1>
 80079f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079f2:	69fb      	ldr	r3, [r7, #28]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3720      	adds	r7, #32
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007a12:	2329      	movs	r3, #41	; 0x29
 8007a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a16:	2340      	movs	r3, #64	; 0x40
 8007a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a24:	f107 0308 	add.w	r3, r7, #8
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fe22 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fa23 	bl	8007e7c <SDMMC_GetCmdResp3>
 8007a36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a38:	69fb      	ldr	r3, [r7, #28]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3720      	adds	r7, #32
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b088      	sub	sp, #32
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007a50:	2306      	movs	r3, #6
 8007a52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a54:	2340      	movs	r3, #64	; 0x40
 8007a56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a62:	f107 0308 	add.w	r3, r7, #8
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff fe03 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a72:	2106      	movs	r1, #6
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f8cf 	bl	8007c18 <SDMMC_GetCmdResp1>
 8007a7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3720      	adds	r7, #32
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b088      	sub	sp, #32
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007a92:	2333      	movs	r3, #51	; 0x33
 8007a94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a96:	2340      	movs	r3, #64	; 0x40
 8007a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007aa4:	f107 0308 	add.w	r3, r7, #8
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff fde2 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab4:	2133      	movs	r1, #51	; 0x33
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f8ae 	bl	8007c18 <SDMMC_GetCmdResp1>
 8007abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007abe:	69fb      	ldr	r3, [r7, #28]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007ad8:	23c0      	movs	r3, #192	; 0xc0
 8007ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ae4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ae6:	f107 0308 	add.w	r3, r7, #8
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff fdc1 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f97c 	bl	8007df0 <SDMMC_GetCmdResp2>
 8007af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007afa:	69fb      	ldr	r3, [r7, #28]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3720      	adds	r7, #32
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007b12:	2309      	movs	r3, #9
 8007b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007b16:	23c0      	movs	r3, #192	; 0xc0
 8007b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b24:	f107 0308 	add.w	r3, r7, #8
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff fda2 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f95d 	bl	8007df0 <SDMMC_GetCmdResp2>
 8007b36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b38:	69fb      	ldr	r3, [r7, #28]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3720      	adds	r7, #32
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b088      	sub	sp, #32
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007b50:	2303      	movs	r3, #3
 8007b52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b54:	2340      	movs	r3, #64	; 0x40
 8007b56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b62:	f107 0308 	add.w	r3, r7, #8
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff fd83 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	2103      	movs	r1, #3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f9bc 	bl	8007ef0 <SDMMC_GetCmdResp6>
 8007b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3720      	adds	r7, #32
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b088      	sub	sp, #32
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007b92:	230d      	movs	r3, #13
 8007b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b96:	2340      	movs	r3, #64	; 0x40
 8007b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ba2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ba4:	f107 0308 	add.w	r3, r7, #8
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff fd62 	bl	8007674 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb4:	210d      	movs	r1, #13
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f82e 	bl	8007c18 <SDMMC_GetCmdResp1>
 8007bbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bbe:	69fb      	ldr	r3, [r7, #28]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3720      	adds	r7, #32
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007bc8:	b490      	push	{r4, r7}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bd0:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <SDMMC_GetCmdError+0x48>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a0f      	ldr	r2, [pc, #60]	; (8007c14 <SDMMC_GetCmdError+0x4c>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	0a5b      	lsrs	r3, r3, #9
 8007bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007be4:	4623      	mov	r3, r4
 8007be6:	1e5c      	subs	r4, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bf0:	e009      	b.n	8007c06 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0f2      	beq.n	8007be4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	22c5      	movs	r2, #197	; 0xc5
 8007c02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bc90      	pop	{r4, r7}
 8007c0e:	4770      	bx	lr
 8007c10:	20000078 	.word	0x20000078
 8007c14:	10624dd3 	.word	0x10624dd3

08007c18 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007c18:	b590      	push	{r4, r7, lr}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	460b      	mov	r3, r1
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c26:	4b6f      	ldr	r3, [pc, #444]	; (8007de4 <SDMMC_GetCmdResp1+0x1cc>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a6f      	ldr	r2, [pc, #444]	; (8007de8 <SDMMC_GetCmdResp1+0x1d0>)
 8007c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c30:	0a5b      	lsrs	r3, r3, #9
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007c38:	4623      	mov	r3, r4
 8007c3a:	1e5c      	subs	r4, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c44:	e0c9      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0f0      	beq.n	8007c38 <SDMMC_GetCmdResp1+0x20>
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1eb      	bne.n	8007c38 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d004      	beq.n	8007c76 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2204      	movs	r2, #4
 8007c70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c72:	2304      	movs	r3, #4
 8007c74:	e0b1      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e0a6      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	22c5      	movs	r2, #197	; 0xc5
 8007c90:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff fd18 	bl	80076c8 <SDIO_GetCommandResponse>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	7afb      	ldrb	r3, [r7, #11]
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d001      	beq.n	8007ca6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e099      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7ff fd1a 	bl	80076e2 <SDIO_GetResponse>
 8007cae:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4b4e      	ldr	r3, [pc, #312]	; (8007dec <SDMMC_GetCmdResp1+0x1d4>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e08d      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	da02      	bge.n	8007cca <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cc8:	e087      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007cd4:	2340      	movs	r3, #64	; 0x40
 8007cd6:	e080      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007ce2:	2380      	movs	r3, #128	; 0x80
 8007ce4:	e079      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cf4:	e071      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d04:	e069      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d14:	e061      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007d20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d24:	e059      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d34:	e051      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d44:	e049      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007d50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d54:	e041      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d64:	e039      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d74:	e031      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007d80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d84:	e029      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007d90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d94:	e021      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007da0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007da4:	e019      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007db0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007db4:	e011      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007dc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007dc4:	e009      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f003 0308 	and.w	r3, r3, #8
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007dd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007dd4:	e001      	b.n	8007dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007dd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd90      	pop	{r4, r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20000078 	.word	0x20000078
 8007de8:	10624dd3 	.word	0x10624dd3
 8007dec:	fdffe008 	.word	0xfdffe008

08007df0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007df0:	b490      	push	{r4, r7}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007df8:	4b1e      	ldr	r3, [pc, #120]	; (8007e74 <SDMMC_GetCmdResp2+0x84>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a1e      	ldr	r2, [pc, #120]	; (8007e78 <SDMMC_GetCmdResp2+0x88>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	0a5b      	lsrs	r3, r3, #9
 8007e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	1e5c      	subs	r4, r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e18:	e026      	b.n	8007e68 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f0      	beq.n	8007e0c <SDMMC_GetCmdResp2+0x1c>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1eb      	bne.n	8007e0c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2204      	movs	r2, #4
 8007e44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e46:	2304      	movs	r3, #4
 8007e48:	e00e      	b.n	8007e68 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e003      	b.n	8007e68 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	22c5      	movs	r2, #197	; 0xc5
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc90      	pop	{r4, r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000078 	.word	0x20000078
 8007e78:	10624dd3 	.word	0x10624dd3

08007e7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007e7c:	b490      	push	{r4, r7}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e84:	4b18      	ldr	r3, [pc, #96]	; (8007ee8 <SDMMC_GetCmdResp3+0x6c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a18      	ldr	r2, [pc, #96]	; (8007eec <SDMMC_GetCmdResp3+0x70>)
 8007e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8e:	0a5b      	lsrs	r3, r3, #9
 8007e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007e98:	4623      	mov	r3, r4
 8007e9a:	1e5c      	subs	r4, r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d102      	bne.n	8007ea6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ea4:	e01b      	b.n	8007ede <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eaa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f0      	beq.n	8007e98 <SDMMC_GetCmdResp3+0x1c>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1eb      	bne.n	8007e98 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2204      	movs	r2, #4
 8007ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ed2:	2304      	movs	r3, #4
 8007ed4:	e003      	b.n	8007ede <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	22c5      	movs	r2, #197	; 0xc5
 8007eda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bc90      	pop	{r4, r7}
 8007ee6:	4770      	bx	lr
 8007ee8:	20000078 	.word	0x20000078
 8007eec:	10624dd3 	.word	0x10624dd3

08007ef0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007ef0:	b590      	push	{r4, r7, lr}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007efe:	4b34      	ldr	r3, [pc, #208]	; (8007fd0 <SDMMC_GetCmdResp6+0xe0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a34      	ldr	r2, [pc, #208]	; (8007fd4 <SDMMC_GetCmdResp6+0xe4>)
 8007f04:	fba2 2303 	umull	r2, r3, r2, r3
 8007f08:	0a5b      	lsrs	r3, r3, #9
 8007f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007f12:	4623      	mov	r3, r4
 8007f14:	1e5c      	subs	r4, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f1e:	e052      	b.n	8007fc6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f24:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d0f0      	beq.n	8007f12 <SDMMC_GetCmdResp6+0x22>
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1eb      	bne.n	8007f12 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2204      	movs	r2, #4
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f4c:	2304      	movs	r3, #4
 8007f4e:	e03a      	b.n	8007fc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d004      	beq.n	8007f66 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e02f      	b.n	8007fc6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f7ff fbae 	bl	80076c8 <SDIO_GetCommandResponse>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	461a      	mov	r2, r3
 8007f70:	7afb      	ldrb	r3, [r7, #11]
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d001      	beq.n	8007f7a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e025      	b.n	8007fc6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	22c5      	movs	r2, #197	; 0xc5
 8007f7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007f80:	2100      	movs	r1, #0
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff fbad 	bl	80076e2 <SDIO_GetResponse>
 8007f88:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d106      	bne.n	8007fa2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	0c1b      	lsrs	r3, r3, #16
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	e011      	b.n	8007fc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fb0:	e009      	b.n	8007fc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fc0:	e001      	b.n	8007fc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd90      	pop	{r4, r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	20000078 	.word	0x20000078
 8007fd4:	10624dd3 	.word	0x10624dd3

08007fd8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007fd8:	b490      	push	{r4, r7}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fe0:	4b21      	ldr	r3, [pc, #132]	; (8008068 <SDMMC_GetCmdResp7+0x90>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a21      	ldr	r2, [pc, #132]	; (800806c <SDMMC_GetCmdResp7+0x94>)
 8007fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fea:	0a5b      	lsrs	r3, r3, #9
 8007fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007ff4:	4623      	mov	r3, r4
 8007ff6:	1e5c      	subs	r4, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008000:	e02c      	b.n	800805c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008006:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0f0      	beq.n	8007ff4 <SDMMC_GetCmdResp7+0x1c>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1eb      	bne.n	8007ff4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2204      	movs	r2, #4
 800802c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800802e:	2304      	movs	r3, #4
 8008030:	e014      	b.n	800805c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	2b00      	cmp	r3, #0
 800803c:	d004      	beq.n	8008048 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008044:	2301      	movs	r3, #1
 8008046:	e009      	b.n	800805c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2240      	movs	r2, #64	; 0x40
 8008058:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800805a:	2300      	movs	r3, #0
  
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bc90      	pop	{r4, r7}
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20000078 	.word	0x20000078
 800806c:	10624dd3 	.word	0x10624dd3

08008070 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008074:	4904      	ldr	r1, [pc, #16]	; (8008088 <MX_FATFS_Init+0x18>)
 8008076:	4805      	ldr	r0, [pc, #20]	; (800808c <MX_FATFS_Init+0x1c>)
 8008078:	f003 fc18 	bl	800b8ac <FATFS_LinkDriver>
 800807c:	4603      	mov	r3, r0
 800807e:	461a      	mov	r2, r3
 8008080:	4b03      	ldr	r3, [pc, #12]	; (8008090 <MX_FATFS_Init+0x20>)
 8008082:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008084:	bf00      	nop
 8008086:	bd80      	pop	{r7, pc}
 8008088:	20004db0 	.word	0x20004db0
 800808c:	0800ea48 	.word	0x0800ea48
 8008090:	20004dac 	.word	0x20004dac

08008094 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008098:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800809a:	4618      	mov	r0, r3
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80080ae:	f000 f896 	bl	80081de <BSP_SD_IsDetected>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d001      	beq.n	80080bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e012      	b.n	80080e2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80080bc:	480b      	ldr	r0, [pc, #44]	; (80080ec <BSP_SD_Init+0x48>)
 80080be:	f7fc fe83 	bl	8004dc8 <HAL_SD_Init>
 80080c2:	4603      	mov	r3, r0
 80080c4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d109      	bne.n	80080e0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80080cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080d0:	4806      	ldr	r0, [pc, #24]	; (80080ec <BSP_SD_Init+0x48>)
 80080d2:	f7fd fc43 	bl	800595c <HAL_SD_ConfigWideBusOperation>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80080e0:	79fb      	ldrb	r3, [r7, #7]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	20001be4 	.word	0x20001be4

080080f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	68f9      	ldr	r1, [r7, #12]
 8008106:	4806      	ldr	r0, [pc, #24]	; (8008120 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008108:	f7fc feee 	bl	8004ee8 <HAL_SD_ReadBlocks_DMA>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8008116:	7dfb      	ldrb	r3, [r7, #23]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20001be4 	.word	0x20001be4

08008124 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	68f9      	ldr	r1, [r7, #12]
 800813a:	4806      	ldr	r0, [pc, #24]	; (8008154 <BSP_SD_WriteBlocks_DMA+0x30>)
 800813c:	f7fc ffbe 	bl	80050bc <HAL_SD_WriteBlocks_DMA>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800814a:	7dfb      	ldrb	r3, [r7, #23]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20001be4 	.word	0x20001be4

08008158 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800815c:	4805      	ldr	r0, [pc, #20]	; (8008174 <BSP_SD_GetCardState+0x1c>)
 800815e:	f7fd fc79 	bl	8005a54 <HAL_SD_GetCardState>
 8008162:	4603      	mov	r3, r0
 8008164:	2b04      	cmp	r3, #4
 8008166:	bf14      	ite	ne
 8008168:	2301      	movne	r3, #1
 800816a:	2300      	moveq	r3, #0
 800816c:	b2db      	uxtb	r3, r3
}
 800816e:	4618      	mov	r0, r3
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20001be4 	.word	0x20001be4

08008178 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	4803      	ldr	r0, [pc, #12]	; (8008190 <BSP_SD_GetCardInfo+0x18>)
 8008184:	f7fd fbbe 	bl	8005904 <HAL_SD_GetCardInfo>
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20001be4 	.word	0x20001be4

08008194 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800819c:	f000 f818 	bl	80081d0 <BSP_SD_AbortCallback>
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80081b0:	f000 fa60 	bl	8008674 <BSP_SD_WriteCpltCallback>
}
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80081c4:	f000 fa62 	bl	800868c <BSP_SD_ReadCpltCallback>
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0

}
 80081d4:	bf00      	nop
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80081e4:	2301      	movs	r3, #1
 80081e6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80081e8:	f000 f80c 	bl	8008204 <BSP_PlatformIsDetected>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80081f2:	2300      	movs	r3, #0
 80081f4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	b2db      	uxtb	r3, r3
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800820a:	2301      	movs	r3, #1
 800820c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800820e:	2180      	movs	r1, #128	; 0x80
 8008210:	480f      	ldr	r0, [pc, #60]	; (8008250 <BSP_PlatformIsDetected+0x4c>)
 8008212:	f7fc f937 	bl	8004484 <HAL_GPIO_ReadPin>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800821c:	2300      	movs	r3, #0
 800821e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    printf("s - %u\n", status);
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	4619      	mov	r1, r3
 8008224:	480b      	ldr	r0, [pc, #44]	; (8008254 <BSP_PlatformIsDetected+0x50>)
 8008226:	f004 f8b1 	bl	800c38c <iprintf>
    if(status == SD_PRESENT) status = SD_NOT_PRESENT;
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d102      	bne.n	8008236 <BSP_PlatformIsDetected+0x32>
 8008230:	2300      	movs	r3, #0
 8008232:	71fb      	strb	r3, [r7, #7]
 8008234:	e001      	b.n	800823a <BSP_PlatformIsDetected+0x36>
    else status = SD_PRESENT;
 8008236:	2301      	movs	r3, #1
 8008238:	71fb      	strb	r3, [r7, #7]
    printf("s - %u\n", status);
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	4619      	mov	r1, r3
 800823e:	4805      	ldr	r0, [pc, #20]	; (8008254 <BSP_PlatformIsDetected+0x50>)
 8008240:	f004 f8a4 	bl	800c38c <iprintf>
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8008244:	79fb      	ldrb	r3, [r7, #7]
}  
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	40020800 	.word	0x40020800
 8008254:	0800e9e0 	.word	0x0800e9e0

08008258 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008260:	f7fa feb0 	bl	8002fc4 <HAL_GetTick>
 8008264:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008266:	e006      	b.n	8008276 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008268:	f7ff ff76 	bl	8008158 <BSP_SD_GetCardState>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008272:	2300      	movs	r3, #0
 8008274:	e009      	b.n	800828a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008276:	f7fa fea5 	bl	8002fc4 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	429a      	cmp	r2, r3
 8008284:	d8f0      	bhi.n	8008268 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800829e:	4b0b      	ldr	r3, [pc, #44]	; (80082cc <SD_CheckStatus+0x38>)
 80082a0:	2201      	movs	r2, #1
 80082a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80082a4:	f7ff ff58 	bl	8008158 <BSP_SD_GetCardState>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d107      	bne.n	80082be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80082ae:	4b07      	ldr	r3, [pc, #28]	; (80082cc <SD_CheckStatus+0x38>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	f023 0301 	bic.w	r3, r3, #1
 80082b8:	b2da      	uxtb	r2, r3
 80082ba:	4b04      	ldr	r3, [pc, #16]	; (80082cc <SD_CheckStatus+0x38>)
 80082bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80082be:	4b03      	ldr	r3, [pc, #12]	; (80082cc <SD_CheckStatus+0x38>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	b2db      	uxtb	r3, r3
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20000081 	.word	0x20000081

080082d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80082da:	f7ff fee3 	bl	80080a4 <BSP_SD_Init>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d107      	bne.n	80082f4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff ffd4 	bl	8008294 <SD_CheckStatus>
 80082ec:	4603      	mov	r3, r0
 80082ee:	461a      	mov	r2, r3
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <SD_initialize+0x34>)
 80082f2:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80082f4:	4b03      	ldr	r3, [pc, #12]	; (8008304 <SD_initialize+0x34>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	b2db      	uxtb	r3, r3
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20000081 	.word	0x20000081

08008308 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	4618      	mov	r0, r3
 8008316:	f7ff ffbd 	bl	8008294 <SD_CheckStatus>
 800831a:	4603      	mov	r3, r0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b088      	sub	sp, #32
 8008328:	af00      	add	r7, sp, #0
 800832a:	60b9      	str	r1, [r7, #8]
 800832c:	607a      	str	r2, [r7, #4]
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008338:	f247 5030 	movw	r0, #30000	; 0x7530
 800833c:	f7ff ff8c 	bl	8008258 <SD_CheckStatusWithTimeout>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	da01      	bge.n	800834a <SD_read+0x26>
  {
    return res;
 8008346:	7ffb      	ldrb	r3, [r7, #31]
 8008348:	e08b      	b.n	8008462 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f003 0303 	and.w	r3, r3, #3
 8008350:	2b00      	cmp	r3, #0
 8008352:	f040 8085 	bne.w	8008460 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	68b8      	ldr	r0, [r7, #8]
 800835c:	f7ff fec8 	bl	80080f0 <BSP_SD_ReadBlocks_DMA>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d133      	bne.n	80083ce <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008366:	4b41      	ldr	r3, [pc, #260]	; (800846c <SD_read+0x148>)
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800836c:	f7fa fe2a 	bl	8002fc4 <HAL_GetTick>
 8008370:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008372:	bf00      	nop
 8008374:	4b3d      	ldr	r3, [pc, #244]	; (800846c <SD_read+0x148>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d108      	bne.n	800838e <SD_read+0x6a>
 800837c:	f7fa fe22 	bl	8002fc4 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	f247 522f 	movw	r2, #29999	; 0x752f
 800838a:	4293      	cmp	r3, r2
 800838c:	d9f2      	bls.n	8008374 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800838e:	4b37      	ldr	r3, [pc, #220]	; (800846c <SD_read+0x148>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <SD_read+0x78>
      {
        res = RES_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	77fb      	strb	r3, [r7, #31]
 800839a:	e061      	b.n	8008460 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800839c:	4b33      	ldr	r3, [pc, #204]	; (800846c <SD_read+0x148>)
 800839e:	2200      	movs	r2, #0
 80083a0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80083a2:	f7fa fe0f 	bl	8002fc4 <HAL_GetTick>
 80083a6:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80083a8:	e007      	b.n	80083ba <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80083aa:	f7ff fed5 	bl	8008158 <BSP_SD_GetCardState>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <SD_read+0x96>
          {
            res = RES_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80083b8:	e052      	b.n	8008460 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80083ba:	f7fa fe03 	bl	8002fc4 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	f247 522f 	movw	r2, #29999	; 0x752f
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d9ee      	bls.n	80083aa <SD_read+0x86>
 80083cc:	e048      	b.n	8008460 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 80083ce:	2300      	movs	r3, #0
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	e034      	b.n	800843e <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	607a      	str	r2, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	4619      	mov	r1, r3
 80083de:	4824      	ldr	r0, [pc, #144]	; (8008470 <SD_read+0x14c>)
 80083e0:	f7ff fe86 	bl	80080f0 <BSP_SD_ReadBlocks_DMA>
 80083e4:	4603      	mov	r3, r0
 80083e6:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80083e8:	7fbb      	ldrb	r3, [r7, #30]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d12c      	bne.n	8008448 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 80083ee:	4b1f      	ldr	r3, [pc, #124]	; (800846c <SD_read+0x148>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 80083f4:	f7fa fde6 	bl	8002fc4 <HAL_GetTick>
 80083f8:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80083fa:	bf00      	nop
 80083fc:	4b1b      	ldr	r3, [pc, #108]	; (800846c <SD_read+0x148>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d108      	bne.n	8008416 <SD_read+0xf2>
 8008404:	f7fa fdde 	bl	8002fc4 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	f247 522f 	movw	r2, #29999	; 0x752f
 8008412:	4293      	cmp	r3, r2
 8008414:	d9f2      	bls.n	80083fc <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 8008416:	4b15      	ldr	r3, [pc, #84]	; (800846c <SD_read+0x148>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d016      	beq.n	800844c <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	4a13      	ldr	r2, [pc, #76]	; (8008470 <SD_read+0x14c>)
 8008422:	4618      	mov	r0, r3
 8008424:	4611      	mov	r1, r2
 8008426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800842a:	461a      	mov	r2, r3
 800842c:	f003 fb3e 	bl	800baac <memcpy>
          buff += BLOCKSIZE;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008436:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	3301      	adds	r3, #1
 800843c:	61bb      	str	r3, [r7, #24]
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d8c6      	bhi.n	80083d4 <SD_read+0xb0>
 8008446:	e002      	b.n	800844e <SD_read+0x12a>
        }
        else
        {
          break;
 8008448:	bf00      	nop
 800844a:	e000      	b.n	800844e <SD_read+0x12a>
            break;
 800844c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d104      	bne.n	8008460 <SD_read+0x13c>
 8008456:	7fbb      	ldrb	r3, [r7, #30]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <SD_read+0x13c>
        res = RES_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8008460:	7ffb      	ldrb	r3, [r7, #31]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3720      	adds	r7, #32
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	200004b8 	.word	0x200004b8
 8008470:	200002b4 	.word	0x200002b4

08008474 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	607a      	str	r2, [r7, #4]
 800847e:	603b      	str	r3, [r7, #0]
 8008480:	4603      	mov	r3, r0
 8008482:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 8008488:	4b4c      	ldr	r3, [pc, #304]	; (80085bc <SD_write+0x148>)
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800848e:	f247 5030 	movw	r0, #30000	; 0x7530
 8008492:	f7ff fee1 	bl	8008258 <SD_CheckStatusWithTimeout>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	da01      	bge.n	80084a0 <SD_write+0x2c>
  {
    return res;
 800849c:	7ffb      	ldrb	r3, [r7, #31]
 800849e:	e088      	b.n	80085b2 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f040 8082 	bne.w	80085b0 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	68b8      	ldr	r0, [r7, #8]
 80084b2:	f7ff fe37 	bl	8008124 <BSP_SD_WriteBlocks_DMA>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d130      	bne.n	800851e <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80084bc:	f7fa fd82 	bl	8002fc4 <HAL_GetTick>
 80084c0:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80084c2:	bf00      	nop
 80084c4:	4b3d      	ldr	r3, [pc, #244]	; (80085bc <SD_write+0x148>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d108      	bne.n	80084de <SD_write+0x6a>
 80084cc:	f7fa fd7a 	bl	8002fc4 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	f247 522f 	movw	r2, #29999	; 0x752f
 80084da:	4293      	cmp	r3, r2
 80084dc:	d9f2      	bls.n	80084c4 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80084de:	4b37      	ldr	r3, [pc, #220]	; (80085bc <SD_write+0x148>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d102      	bne.n	80084ec <SD_write+0x78>
      {
        res = RES_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	77fb      	strb	r3, [r7, #31]
 80084ea:	e061      	b.n	80085b0 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 80084ec:	4b33      	ldr	r3, [pc, #204]	; (80085bc <SD_write+0x148>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80084f2:	f7fa fd67 	bl	8002fc4 <HAL_GetTick>
 80084f6:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80084f8:	e007      	b.n	800850a <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80084fa:	f7ff fe2d 	bl	8008158 <BSP_SD_GetCardState>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d102      	bne.n	800850a <SD_write+0x96>
          {
            res = RES_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	77fb      	strb	r3, [r7, #31]
            break;
 8008508:	e052      	b.n	80085b0 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800850a:	f7fa fd5b 	bl	8002fc4 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	f247 522f 	movw	r2, #29999	; 0x752f
 8008518:	4293      	cmp	r3, r2
 800851a:	d9ee      	bls.n	80084fa <SD_write+0x86>
 800851c:	e048      	b.n	80085b0 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800851e:	2300      	movs	r3, #0
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	e034      	b.n	800858e <SD_write+0x11a>
      {
        WriteStatus = 0;
 8008524:	4b25      	ldr	r3, [pc, #148]	; (80085bc <SD_write+0x148>)
 8008526:	2200      	movs	r2, #0
 8008528:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	4619      	mov	r1, r3
 8008534:	4822      	ldr	r0, [pc, #136]	; (80085c0 <SD_write+0x14c>)
 8008536:	f7ff fdf5 	bl	8008124 <BSP_SD_WriteBlocks_DMA>
 800853a:	4603      	mov	r3, r0
 800853c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800853e:	7fbb      	ldrb	r3, [r7, #30]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d129      	bne.n	8008598 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8008544:	f7fa fd3e 	bl	8002fc4 <HAL_GetTick>
 8008548:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800854a:	bf00      	nop
 800854c:	4b1b      	ldr	r3, [pc, #108]	; (80085bc <SD_write+0x148>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d108      	bne.n	8008566 <SD_write+0xf2>
 8008554:	f7fa fd36 	bl	8002fc4 <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	f247 522f 	movw	r2, #29999	; 0x752f
 8008562:	4293      	cmp	r3, r2
 8008564:	d9f2      	bls.n	800854c <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 8008566:	4b15      	ldr	r3, [pc, #84]	; (80085bc <SD_write+0x148>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d016      	beq.n	800859c <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	4a13      	ldr	r2, [pc, #76]	; (80085c0 <SD_write+0x14c>)
 8008572:	4618      	mov	r0, r3
 8008574:	4611      	mov	r1, r2
 8008576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800857a:	461a      	mov	r2, r3
 800857c:	f003 fa96 	bl	800baac <memcpy>
          buff += BLOCKSIZE;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008586:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	3301      	adds	r3, #1
 800858c:	61bb      	str	r3, [r7, #24]
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d8c6      	bhi.n	8008524 <SD_write+0xb0>
 8008596:	e002      	b.n	800859e <SD_write+0x12a>
        }
        else
        {
          break;
 8008598:	bf00      	nop
 800859a:	e000      	b.n	800859e <SD_write+0x12a>
            break;
 800859c:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d104      	bne.n	80085b0 <SD_write+0x13c>
 80085a6:	7fbb      	ldrb	r3, [r7, #30]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <SD_write+0x13c>
        res = RES_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 80085b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3720      	adds	r7, #32
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200004b4 	.word	0x200004b4
 80085c0:	200002b4 	.word	0x200002b4

080085c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b08c      	sub	sp, #48	; 0x30
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	603a      	str	r2, [r7, #0]
 80085ce:	71fb      	strb	r3, [r7, #7]
 80085d0:	460b      	mov	r3, r1
 80085d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80085da:	4b25      	ldr	r3, [pc, #148]	; (8008670 <SD_ioctl+0xac>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <SD_ioctl+0x28>
 80085e8:	2303      	movs	r3, #3
 80085ea:	e03c      	b.n	8008666 <SD_ioctl+0xa2>

  switch (cmd)
 80085ec:	79bb      	ldrb	r3, [r7, #6]
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d834      	bhi.n	800865c <SD_ioctl+0x98>
 80085f2:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <SD_ioctl+0x34>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008609 	.word	0x08008609
 80085fc:	08008611 	.word	0x08008611
 8008600:	08008629 	.word	0x08008629
 8008604:	08008643 	.word	0x08008643
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800860e:	e028      	b.n	8008662 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008610:	f107 030c 	add.w	r3, r7, #12
 8008614:	4618      	mov	r0, r3
 8008616:	f7ff fdaf 	bl	8008178 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800861a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008626:	e01c      	b.n	8008662 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008628:	f107 030c 	add.w	r3, r7, #12
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff fda3 	bl	8008178 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	b29a      	uxth	r2, r3
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008640:	e00f      	b.n	8008662 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008642:	f107 030c 	add.w	r3, r7, #12
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff fd96 	bl	8008178 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	0a5a      	lsrs	r2, r3, #9
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800865a:	e002      	b.n	8008662 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800865c:	2304      	movs	r3, #4
 800865e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008666:	4618      	mov	r0, r3
 8008668:	3730      	adds	r7, #48	; 0x30
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000081 	.word	0x20000081

08008674 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8008678:	4b03      	ldr	r3, [pc, #12]	; (8008688 <BSP_SD_WriteCpltCallback+0x14>)
 800867a:	2201      	movs	r2, #1
 800867c:	601a      	str	r2, [r3, #0]
}
 800867e:	bf00      	nop
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	200004b4 	.word	0x200004b4

0800868c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008690:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <BSP_SD_ReadCpltCallback+0x14>)
 8008692:	2201      	movs	r2, #1
 8008694:	601a      	str	r2, [r3, #0]
}
 8008696:	bf00      	nop
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	200004b8 	.word	0x200004b8

080086a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	4603      	mov	r3, r0
 80086ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	4a08      	ldr	r2, [pc, #32]	; (80086d4 <disk_status+0x30>)
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	79fa      	ldrb	r2, [r7, #7]
 80086bc:	4905      	ldr	r1, [pc, #20]	; (80086d4 <disk_status+0x30>)
 80086be:	440a      	add	r2, r1
 80086c0:	7a12      	ldrb	r2, [r2, #8]
 80086c2:	4610      	mov	r0, r2
 80086c4:	4798      	blx	r3
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	200006e4 	.word	0x200006e4

080086d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	4a0d      	ldr	r2, [pc, #52]	; (8008720 <disk_initialize+0x48>)
 80086ea:	5cd3      	ldrb	r3, [r2, r3]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d111      	bne.n	8008714 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80086f0:	79fb      	ldrb	r3, [r7, #7]
 80086f2:	4a0b      	ldr	r2, [pc, #44]	; (8008720 <disk_initialize+0x48>)
 80086f4:	2101      	movs	r1, #1
 80086f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	4a09      	ldr	r2, [pc, #36]	; (8008720 <disk_initialize+0x48>)
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	79fa      	ldrb	r2, [r7, #7]
 8008706:	4906      	ldr	r1, [pc, #24]	; (8008720 <disk_initialize+0x48>)
 8008708:	440a      	add	r2, r1
 800870a:	7a12      	ldrb	r2, [r2, #8]
 800870c:	4610      	mov	r0, r2
 800870e:	4798      	blx	r3
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	200006e4 	.word	0x200006e4

08008724 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008724:	b590      	push	{r4, r7, lr}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	603b      	str	r3, [r7, #0]
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008734:	7bfb      	ldrb	r3, [r7, #15]
 8008736:	4a0a      	ldr	r2, [pc, #40]	; (8008760 <disk_read+0x3c>)
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	689c      	ldr	r4, [r3, #8]
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	4a07      	ldr	r2, [pc, #28]	; (8008760 <disk_read+0x3c>)
 8008744:	4413      	add	r3, r2
 8008746:	7a18      	ldrb	r0, [r3, #8]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	47a0      	blx	r4
 8008750:	4603      	mov	r3, r0
 8008752:	75fb      	strb	r3, [r7, #23]
  return res;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
}
 8008756:	4618      	mov	r0, r3
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	bd90      	pop	{r4, r7, pc}
 800875e:	bf00      	nop
 8008760:	200006e4 	.word	0x200006e4

08008764 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008764:	b590      	push	{r4, r7, lr}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	603b      	str	r3, [r7, #0]
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	4a0a      	ldr	r2, [pc, #40]	; (80087a0 <disk_write+0x3c>)
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	68dc      	ldr	r4, [r3, #12]
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	4a07      	ldr	r2, [pc, #28]	; (80087a0 <disk_write+0x3c>)
 8008784:	4413      	add	r3, r2
 8008786:	7a18      	ldrb	r0, [r3, #8]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	47a0      	blx	r4
 8008790:	4603      	mov	r3, r0
 8008792:	75fb      	strb	r3, [r7, #23]
  return res;
 8008794:	7dfb      	ldrb	r3, [r7, #23]
}
 8008796:	4618      	mov	r0, r3
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	bd90      	pop	{r4, r7, pc}
 800879e:	bf00      	nop
 80087a0:	200006e4 	.word	0x200006e4

080087a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	603a      	str	r2, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
 80087b0:	460b      	mov	r3, r1
 80087b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	4a09      	ldr	r2, [pc, #36]	; (80087dc <disk_ioctl+0x38>)
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	79fa      	ldrb	r2, [r7, #7]
 80087c2:	4906      	ldr	r1, [pc, #24]	; (80087dc <disk_ioctl+0x38>)
 80087c4:	440a      	add	r2, r1
 80087c6:	7a10      	ldrb	r0, [r2, #8]
 80087c8:	79b9      	ldrb	r1, [r7, #6]
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	4798      	blx	r3
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	200006e4 	.word	0x200006e4

080087e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3301      	adds	r3, #1
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80087f0:	89fb      	ldrh	r3, [r7, #14]
 80087f2:	021b      	lsls	r3, r3, #8
 80087f4:	b21a      	sxth	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	b21b      	sxth	r3, r3
 80087fc:	4313      	orrs	r3, r2
 80087fe:	b21b      	sxth	r3, r3
 8008800:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008802:	89fb      	ldrh	r3, [r7, #14]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3303      	adds	r3, #3
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	3202      	adds	r2, #2
 8008828:	7812      	ldrb	r2, [r2, #0]
 800882a:	4313      	orrs	r3, r2
 800882c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	021b      	lsls	r3, r3, #8
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	3201      	adds	r2, #1
 8008836:	7812      	ldrb	r2, [r2, #0]
 8008838:	4313      	orrs	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	021b      	lsls	r3, r3, #8
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	7812      	ldrb	r2, [r2, #0]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
	return rv;
 8008848:	68fb      	ldr	r3, [r7, #12]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	887a      	ldrh	r2, [r7, #2]
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	887b      	ldrh	r3, [r7, #2]
 8008870:	0a1b      	lsrs	r3, r3, #8
 8008872:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	607a      	str	r2, [r7, #4]
 800887a:	887a      	ldrh	r2, [r7, #2]
 800887c:	b2d2      	uxtb	r2, r2
 800887e:	701a      	strb	r2, [r3, #0]
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	b2d2      	uxtb	r2, r2
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	0a1b      	lsrs	r3, r3, #8
 80088a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	607a      	str	r2, [r7, #4]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	b2d2      	uxtb	r2, r2
 80088b2:	701a      	strb	r2, [r3, #0]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	0a1b      	lsrs	r3, r3, #8
 80088b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	b2d2      	uxtb	r2, r2
 80088c4:	701a      	strb	r2, [r3, #0]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	0a1b      	lsrs	r3, r3, #8
 80088ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	701a      	strb	r2, [r3, #0]
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00d      	beq.n	800891a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	1c53      	adds	r3, r2, #1
 8008902:	613b      	str	r3, [r7, #16]
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	1c59      	adds	r1, r3, #1
 8008908:	6179      	str	r1, [r7, #20]
 800890a:	7812      	ldrb	r2, [r2, #0]
 800890c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3b01      	subs	r3, #1
 8008912:	607b      	str	r3, [r7, #4]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f1      	bne.n	80088fe <mem_cpy+0x1a>
	}
}
 800891a:	bf00      	nop
 800891c:	371c      	adds	r7, #28
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008926:	b480      	push	{r7}
 8008928:	b087      	sub	sp, #28
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	617a      	str	r2, [r7, #20]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3b01      	subs	r3, #1
 8008946:	607b      	str	r3, [r7, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1f3      	bne.n	8008936 <mem_set+0x10>
}
 800894e:	bf00      	nop
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800895a:	b480      	push	{r7}
 800895c:	b089      	sub	sp, #36	; 0x24
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	61fb      	str	r3, [r7, #28]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	61fa      	str	r2, [r7, #28]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	4619      	mov	r1, r3
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	61ba      	str	r2, [r7, #24]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	1acb      	subs	r3, r1, r3
 8008986:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3b01      	subs	r3, #1
 800898c:	607b      	str	r3, [r7, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <mem_cmp+0x40>
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0eb      	beq.n	8008972 <mem_cmp+0x18>

	return r;
 800899a:	697b      	ldr	r3, [r7, #20]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3724      	adds	r7, #36	; 0x24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80089b2:	e002      	b.n	80089ba <chk_chr+0x12>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3301      	adds	r3, #1
 80089b8:	607b      	str	r3, [r7, #4]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d005      	beq.n	80089ce <chk_chr+0x26>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d1f2      	bne.n	80089b4 <chk_chr+0xc>
	return *str;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	781b      	ldrb	r3, [r3, #0]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80089ea:	2300      	movs	r3, #0
 80089ec:	60bb      	str	r3, [r7, #8]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	60fb      	str	r3, [r7, #12]
 80089f2:	e029      	b.n	8008a48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80089f4:	4a27      	ldr	r2, [pc, #156]	; (8008a94 <chk_lock+0xb4>)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	4413      	add	r3, r2
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01d      	beq.n	8008a3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008a02:	4a24      	ldr	r2, [pc, #144]	; (8008a94 <chk_lock+0xb4>)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	4413      	add	r3, r2
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d116      	bne.n	8008a42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008a14:	4a1f      	ldr	r2, [pc, #124]	; (8008a94 <chk_lock+0xb4>)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	4413      	add	r3, r2
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d10c      	bne.n	8008a42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a28:	4a1a      	ldr	r2, [pc, #104]	; (8008a94 <chk_lock+0xb4>)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	011b      	lsls	r3, r3, #4
 8008a2e:	4413      	add	r3, r2
 8008a30:	3308      	adds	r3, #8
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d102      	bne.n	8008a42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a3c:	e007      	b.n	8008a4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3301      	adds	r3, #1
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d9d2      	bls.n	80089f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d109      	bne.n	8008a68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d102      	bne.n	8008a60 <chk_lock+0x80>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d101      	bne.n	8008a64 <chk_lock+0x84>
 8008a60:	2300      	movs	r3, #0
 8008a62:	e010      	b.n	8008a86 <chk_lock+0xa6>
 8008a64:	2312      	movs	r3, #18
 8008a66:	e00e      	b.n	8008a86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d108      	bne.n	8008a80 <chk_lock+0xa0>
 8008a6e:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <chk_lock+0xb4>)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	011b      	lsls	r3, r3, #4
 8008a74:	4413      	add	r3, r2
 8008a76:	330c      	adds	r3, #12
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a7e:	d101      	bne.n	8008a84 <chk_lock+0xa4>
 8008a80:	2310      	movs	r3, #16
 8008a82:	e000      	b.n	8008a86 <chk_lock+0xa6>
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	200004c4 	.word	0x200004c4

08008a98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	607b      	str	r3, [r7, #4]
 8008aa2:	e002      	b.n	8008aaa <enq_lock+0x12>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	607b      	str	r3, [r7, #4]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d806      	bhi.n	8008abe <enq_lock+0x26>
 8008ab0:	4a09      	ldr	r2, [pc, #36]	; (8008ad8 <enq_lock+0x40>)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	4413      	add	r3, r2
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1f2      	bne.n	8008aa4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	bf14      	ite	ne
 8008ac4:	2301      	movne	r3, #1
 8008ac6:	2300      	moveq	r3, #0
 8008ac8:	b2db      	uxtb	r3, r3
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	200004c4 	.word	0x200004c4

08008adc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	e01f      	b.n	8008b2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008aec:	4a41      	ldr	r2, [pc, #260]	; (8008bf4 <inc_lock+0x118>)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	4413      	add	r3, r2
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d113      	bne.n	8008b26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008afe:	4a3d      	ldr	r2, [pc, #244]	; (8008bf4 <inc_lock+0x118>)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	011b      	lsls	r3, r3, #4
 8008b04:	4413      	add	r3, r2
 8008b06:	3304      	adds	r3, #4
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d109      	bne.n	8008b26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008b12:	4a38      	ldr	r2, [pc, #224]	; (8008bf4 <inc_lock+0x118>)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	011b      	lsls	r3, r3, #4
 8008b18:	4413      	add	r3, r2
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d006      	beq.n	8008b34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d9dc      	bls.n	8008aec <inc_lock+0x10>
 8008b32:	e000      	b.n	8008b36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008b34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d132      	bne.n	8008ba2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	e002      	b.n	8008b48 <inc_lock+0x6c>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3301      	adds	r3, #1
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d806      	bhi.n	8008b5c <inc_lock+0x80>
 8008b4e:	4a29      	ldr	r2, [pc, #164]	; (8008bf4 <inc_lock+0x118>)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	4413      	add	r3, r2
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1f2      	bne.n	8008b42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d101      	bne.n	8008b66 <inc_lock+0x8a>
 8008b62:	2300      	movs	r3, #0
 8008b64:	e040      	b.n	8008be8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	4922      	ldr	r1, [pc, #136]	; (8008bf4 <inc_lock+0x118>)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	440b      	add	r3, r1
 8008b72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	491e      	ldr	r1, [pc, #120]	; (8008bf4 <inc_lock+0x118>)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	011b      	lsls	r3, r3, #4
 8008b7e:	440b      	add	r3, r1
 8008b80:	3304      	adds	r3, #4
 8008b82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	695a      	ldr	r2, [r3, #20]
 8008b88:	491a      	ldr	r1, [pc, #104]	; (8008bf4 <inc_lock+0x118>)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	011b      	lsls	r3, r3, #4
 8008b8e:	440b      	add	r3, r1
 8008b90:	3308      	adds	r3, #8
 8008b92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008b94:	4a17      	ldr	r2, [pc, #92]	; (8008bf4 <inc_lock+0x118>)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	011b      	lsls	r3, r3, #4
 8008b9a:	4413      	add	r3, r2
 8008b9c:	330c      	adds	r3, #12
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d009      	beq.n	8008bbc <inc_lock+0xe0>
 8008ba8:	4a12      	ldr	r2, [pc, #72]	; (8008bf4 <inc_lock+0x118>)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	011b      	lsls	r3, r3, #4
 8008bae:	4413      	add	r3, r2
 8008bb0:	330c      	adds	r3, #12
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <inc_lock+0xe0>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e015      	b.n	8008be8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d108      	bne.n	8008bd4 <inc_lock+0xf8>
 8008bc2:	4a0c      	ldr	r2, [pc, #48]	; (8008bf4 <inc_lock+0x118>)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	011b      	lsls	r3, r3, #4
 8008bc8:	4413      	add	r3, r2
 8008bca:	330c      	adds	r3, #12
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	e001      	b.n	8008bd8 <inc_lock+0xfc>
 8008bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bd8:	4906      	ldr	r1, [pc, #24]	; (8008bf4 <inc_lock+0x118>)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	440b      	add	r3, r1
 8008be0:	330c      	adds	r3, #12
 8008be2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	200004c4 	.word	0x200004c4

08008bf8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	607b      	str	r3, [r7, #4]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d825      	bhi.n	8008c58 <dec_lock+0x60>
		n = Files[i].ctr;
 8008c0c:	4a17      	ldr	r2, [pc, #92]	; (8008c6c <dec_lock+0x74>)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	011b      	lsls	r3, r3, #4
 8008c12:	4413      	add	r3, r2
 8008c14:	330c      	adds	r3, #12
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008c1a:	89fb      	ldrh	r3, [r7, #14]
 8008c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c20:	d101      	bne.n	8008c26 <dec_lock+0x2e>
 8008c22:	2300      	movs	r3, #0
 8008c24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008c26:	89fb      	ldrh	r3, [r7, #14]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <dec_lock+0x3a>
 8008c2c:	89fb      	ldrh	r3, [r7, #14]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008c32:	4a0e      	ldr	r2, [pc, #56]	; (8008c6c <dec_lock+0x74>)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	4413      	add	r3, r2
 8008c3a:	330c      	adds	r3, #12
 8008c3c:	89fa      	ldrh	r2, [r7, #14]
 8008c3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008c40:	89fb      	ldrh	r3, [r7, #14]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d105      	bne.n	8008c52 <dec_lock+0x5a>
 8008c46:	4a09      	ldr	r2, [pc, #36]	; (8008c6c <dec_lock+0x74>)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	011b      	lsls	r3, r3, #4
 8008c4c:	4413      	add	r3, r2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	737b      	strb	r3, [r7, #13]
 8008c56:	e001      	b.n	8008c5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008c58:	2302      	movs	r3, #2
 8008c5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008c5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	200004c4 	.word	0x200004c4

08008c70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008c78:	2300      	movs	r3, #0
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	e010      	b.n	8008ca0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008c7e:	4a0d      	ldr	r2, [pc, #52]	; (8008cb4 <clear_lock+0x44>)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	4413      	add	r3, r2
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d105      	bne.n	8008c9a <clear_lock+0x2a>
 8008c8e:	4a09      	ldr	r2, [pc, #36]	; (8008cb4 <clear_lock+0x44>)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	011b      	lsls	r3, r3, #4
 8008c94:	4413      	add	r3, r2
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d9eb      	bls.n	8008c7e <clear_lock+0xe>
	}
}
 8008ca6:	bf00      	nop
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	200004c4 	.word	0x200004c4

08008cb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	78db      	ldrb	r3, [r3, #3]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d034      	beq.n	8008d36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	7858      	ldrb	r0, [r3, #1]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008cdc:	2301      	movs	r3, #1
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	f7ff fd40 	bl	8008764 <disk_write>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	73fb      	strb	r3, [r7, #15]
 8008cee:	e022      	b.n	8008d36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	1ad2      	subs	r2, r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d217      	bcs.n	8008d36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	789b      	ldrb	r3, [r3, #2]
 8008d0a:	613b      	str	r3, [r7, #16]
 8008d0c:	e010      	b.n	8008d30 <sync_window+0x78>
					wsect += fs->fsize;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	4413      	add	r3, r2
 8008d16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	7858      	ldrb	r0, [r3, #1]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d22:	2301      	movs	r3, #1
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	f7ff fd1d 	bl	8008764 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	613b      	str	r3, [r7, #16]
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d8eb      	bhi.n	8008d0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d01b      	beq.n	8008d90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff ffad 	bl	8008cb8 <sync_window>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d113      	bne.n	8008d90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	7858      	ldrb	r0, [r3, #1]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d72:	2301      	movs	r3, #1
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	f7ff fcd5 	bl	8008724 <disk_read>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d004      	beq.n	8008d8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008d80:	f04f 33ff 	mov.w	r3, #4294967295
 8008d84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff ff87 	bl	8008cb8 <sync_window>
 8008daa:	4603      	mov	r3, r0
 8008dac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d159      	bne.n	8008e68 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d149      	bne.n	8008e50 <sync_fs+0xb4>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	791b      	ldrb	r3, [r3, #4]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d145      	bne.n	8008e50 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	899b      	ldrh	r3, [r3, #12]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	f7ff fda8 	bl	8008926 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3338      	adds	r3, #56	; 0x38
 8008dda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dde:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff fd37 	bl	8008856 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3338      	adds	r3, #56	; 0x38
 8008dec:	4921      	ldr	r1, [pc, #132]	; (8008e74 <sync_fs+0xd8>)
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7ff fd4c 	bl	800888c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3338      	adds	r3, #56	; 0x38
 8008df8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008dfc:	491e      	ldr	r1, [pc, #120]	; (8008e78 <sync_fs+0xdc>)
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff fd44 	bl	800888c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3338      	adds	r3, #56	; 0x38
 8008e08:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	4619      	mov	r1, r3
 8008e12:	4610      	mov	r0, r2
 8008e14:	f7ff fd3a 	bl	800888c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3338      	adds	r3, #56	; 0x38
 8008e1c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	4619      	mov	r1, r3
 8008e26:	4610      	mov	r0, r2
 8008e28:	f7ff fd30 	bl	800888c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e30:	1c5a      	adds	r2, r3, #1
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	7858      	ldrb	r0, [r3, #1]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e44:	2301      	movs	r3, #1
 8008e46:	f7ff fc8d 	bl	8008764 <disk_write>
			fs->fsi_flag = 0;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	785b      	ldrb	r3, [r3, #1]
 8008e54:	2200      	movs	r2, #0
 8008e56:	2100      	movs	r1, #0
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7ff fca3 	bl	80087a4 <disk_ioctl>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <sync_fs+0xcc>
 8008e64:	2301      	movs	r3, #1
 8008e66:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	41615252 	.word	0x41615252
 8008e78:	61417272 	.word	0x61417272

08008e7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	3b02      	subs	r3, #2
 8008e8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	3b02      	subs	r3, #2
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d301      	bcc.n	8008e9c <clust2sect+0x20>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e008      	b.n	8008eae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	895b      	ldrh	r3, [r3, #10]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	fb03 f202 	mul.w	r2, r3, r2
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eac:	4413      	add	r3, r2
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b086      	sub	sp, #24
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d904      	bls.n	8008eda <get_fat+0x20>
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d302      	bcc.n	8008ee0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008eda:	2301      	movs	r3, #1
 8008edc:	617b      	str	r3, [r7, #20]
 8008ede:	e0b7      	b.n	8009050 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d05a      	beq.n	8008fa4 <get_fat+0xea>
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d07d      	beq.n	8008fee <get_fat+0x134>
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	f040 80a2 	bne.w	800903c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	085b      	lsrs	r3, r3, #1
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4413      	add	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	899b      	ldrh	r3, [r3, #12]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f16:	4413      	add	r3, r2
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6938      	ldr	r0, [r7, #16]
 8008f1c:	f7ff ff10 	bl	8008d40 <move_window>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f040 808d 	bne.w	8009042 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	60fa      	str	r2, [r7, #12]
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	8992      	ldrh	r2, [r2, #12]
 8008f32:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f36:	fb02 f201 	mul.w	r2, r2, r1
 8008f3a:	1a9b      	subs	r3, r3, r2
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f44:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	899b      	ldrh	r3, [r3, #12]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f56:	4413      	add	r3, r2
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6938      	ldr	r0, [r7, #16]
 8008f5c:	f7ff fef0 	bl	8008d40 <move_window>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d16f      	bne.n	8009046 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	899b      	ldrh	r3, [r3, #12]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f72:	fb02 f201 	mul.w	r2, r2, r1
 8008f76:	1a9b      	subs	r3, r3, r2
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	461a      	mov	r2, r3
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <get_fat+0xe0>
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	091b      	lsrs	r3, r3, #4
 8008f98:	e002      	b.n	8008fa0 <get_fat+0xe6>
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fa0:	617b      	str	r3, [r7, #20]
			break;
 8008fa2:	e055      	b.n	8009050 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	899b      	ldrh	r3, [r3, #12]
 8008fac:	085b      	lsrs	r3, r3, #1
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fb8:	4413      	add	r3, r2
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6938      	ldr	r0, [r7, #16]
 8008fbe:	f7ff febf 	bl	8008d40 <move_window>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d140      	bne.n	800904a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	005b      	lsls	r3, r3, #1
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	8992      	ldrh	r2, [r2, #12]
 8008fd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fda:	fb02 f200 	mul.w	r2, r2, r0
 8008fde:	1a9b      	subs	r3, r3, r2
 8008fe0:	440b      	add	r3, r1
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7ff fbfc 	bl	80087e0 <ld_word>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	617b      	str	r3, [r7, #20]
			break;
 8008fec:	e030      	b.n	8009050 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	899b      	ldrh	r3, [r3, #12]
 8008ff6:	089b      	lsrs	r3, r3, #2
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009002:	4413      	add	r3, r2
 8009004:	4619      	mov	r1, r3
 8009006:	6938      	ldr	r0, [r7, #16]
 8009008:	f7ff fe9a 	bl	8008d40 <move_window>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d11d      	bne.n	800904e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	8992      	ldrh	r2, [r2, #12]
 8009020:	fbb3 f0f2 	udiv	r0, r3, r2
 8009024:	fb02 f200 	mul.w	r2, r2, r0
 8009028:	1a9b      	subs	r3, r3, r2
 800902a:	440b      	add	r3, r1
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff fbef 	bl	8008810 <ld_dword>
 8009032:	4603      	mov	r3, r0
 8009034:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009038:	617b      	str	r3, [r7, #20]
			break;
 800903a:	e009      	b.n	8009050 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800903c:	2301      	movs	r3, #1
 800903e:	617b      	str	r3, [r7, #20]
 8009040:	e006      	b.n	8009050 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009042:	bf00      	nop
 8009044:	e004      	b.n	8009050 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009046:	bf00      	nop
 8009048:	e002      	b.n	8009050 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800904a:	bf00      	nop
 800904c:	e000      	b.n	8009050 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800904e:	bf00      	nop
		}
	}

	return val;
 8009050:	697b      	ldr	r3, [r7, #20]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800905a:	b590      	push	{r4, r7, lr}
 800905c:	b089      	sub	sp, #36	; 0x24
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009066:	2302      	movs	r3, #2
 8009068:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2b01      	cmp	r3, #1
 800906e:	f240 8106 	bls.w	800927e <put_fat+0x224>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	429a      	cmp	r2, r3
 800907a:	f080 8100 	bcs.w	800927e <put_fat+0x224>
		switch (fs->fs_type) {
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2b02      	cmp	r3, #2
 8009084:	f000 8088 	beq.w	8009198 <put_fat+0x13e>
 8009088:	2b03      	cmp	r3, #3
 800908a:	f000 80b0 	beq.w	80091ee <put_fat+0x194>
 800908e:	2b01      	cmp	r3, #1
 8009090:	f040 80f5 	bne.w	800927e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	61bb      	str	r3, [r7, #24]
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	085b      	lsrs	r3, r3, #1
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	4413      	add	r3, r2
 80090a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	899b      	ldrh	r3, [r3, #12]
 80090aa:	4619      	mov	r1, r3
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80090b2:	4413      	add	r3, r2
 80090b4:	4619      	mov	r1, r3
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff fe42 	bl	8008d40 <move_window>
 80090bc:	4603      	mov	r3, r0
 80090be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090c0:	7ffb      	ldrb	r3, [r7, #31]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f040 80d4 	bne.w	8009270 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	61ba      	str	r2, [r7, #24]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	8992      	ldrh	r2, [r2, #12]
 80090d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80090dc:	fb02 f200 	mul.w	r2, r2, r0
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	440b      	add	r3, r1
 80090e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00d      	beq.n	800910c <put_fat+0xb2>
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	b25b      	sxtb	r3, r3
 80090f6:	f003 030f 	and.w	r3, r3, #15
 80090fa:	b25a      	sxtb	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	011b      	lsls	r3, r3, #4
 8009102:	b25b      	sxtb	r3, r3
 8009104:	4313      	orrs	r3, r2
 8009106:	b25b      	sxtb	r3, r3
 8009108:	b2db      	uxtb	r3, r3
 800910a:	e001      	b.n	8009110 <put_fat+0xb6>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2201      	movs	r2, #1
 8009118:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	899b      	ldrh	r3, [r3, #12]
 8009122:	4619      	mov	r1, r3
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	fbb3 f3f1 	udiv	r3, r3, r1
 800912a:	4413      	add	r3, r2
 800912c:	4619      	mov	r1, r3
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f7ff fe06 	bl	8008d40 <move_window>
 8009134:	4603      	mov	r3, r0
 8009136:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009138:	7ffb      	ldrb	r3, [r7, #31]
 800913a:	2b00      	cmp	r3, #0
 800913c:	f040 809a 	bne.w	8009274 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	899b      	ldrh	r3, [r3, #12]
 800914a:	461a      	mov	r2, r3
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009152:	fb02 f200 	mul.w	r2, r2, r0
 8009156:	1a9b      	subs	r3, r3, r2
 8009158:	440b      	add	r3, r1
 800915a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <put_fat+0x114>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	091b      	lsrs	r3, r3, #4
 800916a:	b2db      	uxtb	r3, r3
 800916c:	e00e      	b.n	800918c <put_fat+0x132>
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	b25b      	sxtb	r3, r3
 8009174:	f023 030f 	bic.w	r3, r3, #15
 8009178:	b25a      	sxtb	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	0a1b      	lsrs	r3, r3, #8
 800917e:	b25b      	sxtb	r3, r3
 8009180:	f003 030f 	and.w	r3, r3, #15
 8009184:	b25b      	sxtb	r3, r3
 8009186:	4313      	orrs	r3, r2
 8009188:	b25b      	sxtb	r3, r3
 800918a:	b2db      	uxtb	r3, r3
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	70da      	strb	r2, [r3, #3]
			break;
 8009196:	e072      	b.n	800927e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	899b      	ldrh	r3, [r3, #12]
 80091a0:	085b      	lsrs	r3, r3, #1
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	4619      	mov	r1, r3
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80091ac:	4413      	add	r3, r2
 80091ae:	4619      	mov	r1, r3
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f7ff fdc5 	bl	8008d40 <move_window>
 80091b6:	4603      	mov	r3, r0
 80091b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80091ba:	7ffb      	ldrb	r3, [r7, #31]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d15b      	bne.n	8009278 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	8992      	ldrh	r2, [r2, #12]
 80091ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80091d2:	fb02 f200 	mul.w	r2, r2, r0
 80091d6:	1a9b      	subs	r3, r3, r2
 80091d8:	440b      	add	r3, r1
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	b292      	uxth	r2, r2
 80091de:	4611      	mov	r1, r2
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff fb38 	bl	8008856 <st_word>
			fs->wflag = 1;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2201      	movs	r2, #1
 80091ea:	70da      	strb	r2, [r3, #3]
			break;
 80091ec:	e047      	b.n	800927e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	899b      	ldrh	r3, [r3, #12]
 80091f6:	089b      	lsrs	r3, r3, #2
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	4619      	mov	r1, r3
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009202:	4413      	add	r3, r2
 8009204:	4619      	mov	r1, r3
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7ff fd9a 	bl	8008d40 <move_window>
 800920c:	4603      	mov	r3, r0
 800920e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009210:	7ffb      	ldrb	r3, [r7, #31]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d132      	bne.n	800927c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	8992      	ldrh	r2, [r2, #12]
 800922a:	fbb3 f0f2 	udiv	r0, r3, r2
 800922e:	fb02 f200 	mul.w	r2, r2, r0
 8009232:	1a9b      	subs	r3, r3, r2
 8009234:	440b      	add	r3, r1
 8009236:	4618      	mov	r0, r3
 8009238:	f7ff faea 	bl	8008810 <ld_dword>
 800923c:	4603      	mov	r3, r0
 800923e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009242:	4323      	orrs	r3, r4
 8009244:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	8992      	ldrh	r2, [r2, #12]
 8009254:	fbb3 f0f2 	udiv	r0, r3, r2
 8009258:	fb02 f200 	mul.w	r2, r2, r0
 800925c:	1a9b      	subs	r3, r3, r2
 800925e:	440b      	add	r3, r1
 8009260:	6879      	ldr	r1, [r7, #4]
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff fb12 	bl	800888c <st_dword>
			fs->wflag = 1;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	70da      	strb	r2, [r3, #3]
			break;
 800926e:	e006      	b.n	800927e <put_fat+0x224>
			if (res != FR_OK) break;
 8009270:	bf00      	nop
 8009272:	e004      	b.n	800927e <put_fat+0x224>
			if (res != FR_OK) break;
 8009274:	bf00      	nop
 8009276:	e002      	b.n	800927e <put_fat+0x224>
			if (res != FR_OK) break;
 8009278:	bf00      	nop
 800927a:	e000      	b.n	800927e <put_fat+0x224>
			if (res != FR_OK) break;
 800927c:	bf00      	nop
		}
	}
	return res;
 800927e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3724      	adds	r7, #36	; 0x24
 8009284:	46bd      	mov	sp, r7
 8009286:	bd90      	pop	{r4, r7, pc}

08009288 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b088      	sub	sp, #32
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d904      	bls.n	80092ae <remove_chain+0x26>
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d301      	bcc.n	80092b2 <remove_chain+0x2a>
 80092ae:	2302      	movs	r3, #2
 80092b0:	e04b      	b.n	800934a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00c      	beq.n	80092d2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80092b8:	f04f 32ff 	mov.w	r2, #4294967295
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	69b8      	ldr	r0, [r7, #24]
 80092c0:	f7ff fecb 	bl	800905a <put_fat>
 80092c4:	4603      	mov	r3, r0
 80092c6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80092c8:	7ffb      	ldrb	r3, [r7, #31]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <remove_chain+0x4a>
 80092ce:	7ffb      	ldrb	r3, [r7, #31]
 80092d0:	e03b      	b.n	800934a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff fdf0 	bl	8008eba <get_fat>
 80092da:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d031      	beq.n	8009346 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d101      	bne.n	80092ec <remove_chain+0x64>
 80092e8:	2302      	movs	r3, #2
 80092ea:	e02e      	b.n	800934a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f2:	d101      	bne.n	80092f8 <remove_chain+0x70>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e028      	b.n	800934a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80092f8:	2200      	movs	r2, #0
 80092fa:	68b9      	ldr	r1, [r7, #8]
 80092fc:	69b8      	ldr	r0, [r7, #24]
 80092fe:	f7ff feac 	bl	800905a <put_fat>
 8009302:	4603      	mov	r3, r0
 8009304:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009306:	7ffb      	ldrb	r3, [r7, #31]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <remove_chain+0x88>
 800930c:	7ffb      	ldrb	r3, [r7, #31]
 800930e:	e01c      	b.n	800934a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	699a      	ldr	r2, [r3, #24]
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	3b02      	subs	r3, #2
 800931a:	429a      	cmp	r2, r3
 800931c:	d20b      	bcs.n	8009336 <remove_chain+0xae>
			fs->free_clst++;
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	791b      	ldrb	r3, [r3, #4]
 800932c:	f043 0301 	orr.w	r3, r3, #1
 8009330:	b2da      	uxtb	r2, r3
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	429a      	cmp	r2, r3
 8009342:	d3c6      	bcc.n	80092d2 <remove_chain+0x4a>
 8009344:	e000      	b.n	8009348 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009346:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3720      	adds	r7, #32
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b088      	sub	sp, #32
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10d      	bne.n	8009384 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d004      	beq.n	800937e <create_chain+0x2c>
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	429a      	cmp	r2, r3
 800937c:	d31b      	bcc.n	80093b6 <create_chain+0x64>
 800937e:	2301      	movs	r3, #1
 8009380:	61bb      	str	r3, [r7, #24]
 8009382:	e018      	b.n	80093b6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff fd97 	bl	8008eba <get_fat>
 800938c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d801      	bhi.n	8009398 <create_chain+0x46>
 8009394:	2301      	movs	r3, #1
 8009396:	e070      	b.n	800947a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939e:	d101      	bne.n	80093a4 <create_chain+0x52>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	e06a      	b.n	800947a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	69db      	ldr	r3, [r3, #28]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d201      	bcs.n	80093b2 <create_chain+0x60>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	e063      	b.n	800947a <create_chain+0x128>
		scl = clst;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	3301      	adds	r3, #1
 80093be:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	69db      	ldr	r3, [r3, #28]
 80093c4:	69fa      	ldr	r2, [r7, #28]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d307      	bcc.n	80093da <create_chain+0x88>
				ncl = 2;
 80093ca:	2302      	movs	r3, #2
 80093cc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80093ce:	69fa      	ldr	r2, [r7, #28]
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d901      	bls.n	80093da <create_chain+0x88>
 80093d6:	2300      	movs	r3, #0
 80093d8:	e04f      	b.n	800947a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80093da:	69f9      	ldr	r1, [r7, #28]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7ff fd6c 	bl	8008eba <get_fat>
 80093e2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00e      	beq.n	8009408 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d003      	beq.n	80093f8 <create_chain+0xa6>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f6:	d101      	bne.n	80093fc <create_chain+0xaa>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	e03e      	b.n	800947a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	429a      	cmp	r2, r3
 8009402:	d1da      	bne.n	80093ba <create_chain+0x68>
 8009404:	2300      	movs	r3, #0
 8009406:	e038      	b.n	800947a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009408:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800940a:	f04f 32ff 	mov.w	r2, #4294967295
 800940e:	69f9      	ldr	r1, [r7, #28]
 8009410:	6938      	ldr	r0, [r7, #16]
 8009412:	f7ff fe22 	bl	800905a <put_fat>
 8009416:	4603      	mov	r3, r0
 8009418:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d109      	bne.n	8009434 <create_chain+0xe2>
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d006      	beq.n	8009434 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009426:	69fa      	ldr	r2, [r7, #28]
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6938      	ldr	r0, [r7, #16]
 800942c:	f7ff fe15 	bl	800905a <put_fat>
 8009430:	4603      	mov	r3, r0
 8009432:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d116      	bne.n	8009468 <create_chain+0x116>
		fs->last_clst = ncl;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	699a      	ldr	r2, [r3, #24]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	3b02      	subs	r3, #2
 800944a:	429a      	cmp	r2, r3
 800944c:	d804      	bhi.n	8009458 <create_chain+0x106>
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	1e5a      	subs	r2, r3, #1
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	791b      	ldrb	r3, [r3, #4]
 800945c:	f043 0301 	orr.w	r3, r3, #1
 8009460:	b2da      	uxtb	r2, r3
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	711a      	strb	r2, [r3, #4]
 8009466:	e007      	b.n	8009478 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d102      	bne.n	8009474 <create_chain+0x122>
 800946e:	f04f 33ff 	mov.w	r3, #4294967295
 8009472:	e000      	b.n	8009476 <create_chain+0x124>
 8009474:	2301      	movs	r3, #1
 8009476:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009478:	69fb      	ldr	r3, [r7, #28]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3720      	adds	r7, #32
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009482:	b480      	push	{r7}
 8009484:	b087      	sub	sp, #28
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009496:	3304      	adds	r3, #4
 8009498:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	899b      	ldrh	r3, [r3, #12]
 800949e:	461a      	mov	r2, r3
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	8952      	ldrh	r2, [r2, #10]
 80094aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	1d1a      	adds	r2, r3, #4
 80094b4:	613a      	str	r2, [r7, #16]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <clmt_clust+0x42>
 80094c0:	2300      	movs	r3, #0
 80094c2:	e010      	b.n	80094e6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d307      	bcc.n	80094dc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	617b      	str	r3, [r7, #20]
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	3304      	adds	r3, #4
 80094d8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80094da:	e7e9      	b.n	80094b0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80094dc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	4413      	add	r3, r2
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	371c      	adds	r7, #28
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b086      	sub	sp, #24
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009508:	d204      	bcs.n	8009514 <dir_sdi+0x22>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	f003 031f 	and.w	r3, r3, #31
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009514:	2302      	movs	r3, #2
 8009516:	e071      	b.n	80095fc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d106      	bne.n	8009538 <dir_sdi+0x46>
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d902      	bls.n	8009538 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009536:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10c      	bne.n	8009558 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	095b      	lsrs	r3, r3, #5
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	8912      	ldrh	r2, [r2, #8]
 8009546:	4293      	cmp	r3, r2
 8009548:	d301      	bcc.n	800954e <dir_sdi+0x5c>
 800954a:	2302      	movs	r3, #2
 800954c:	e056      	b.n	80095fc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	61da      	str	r2, [r3, #28]
 8009556:	e02d      	b.n	80095b4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	895b      	ldrh	r3, [r3, #10]
 800955c:	461a      	mov	r2, r3
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	899b      	ldrh	r3, [r3, #12]
 8009562:	fb03 f302 	mul.w	r3, r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009568:	e019      	b.n	800959e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6979      	ldr	r1, [r7, #20]
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff fca3 	bl	8008eba <get_fat>
 8009574:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957c:	d101      	bne.n	8009582 <dir_sdi+0x90>
 800957e:	2301      	movs	r3, #1
 8009580:	e03c      	b.n	80095fc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d904      	bls.n	8009592 <dir_sdi+0xa0>
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	69db      	ldr	r3, [r3, #28]
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	429a      	cmp	r2, r3
 8009590:	d301      	bcc.n	8009596 <dir_sdi+0xa4>
 8009592:	2302      	movs	r3, #2
 8009594:	e032      	b.n	80095fc <dir_sdi+0x10a>
			ofs -= csz;
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d2e1      	bcs.n	800956a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80095a6:	6979      	ldr	r1, [r7, #20]
 80095a8:	6938      	ldr	r0, [r7, #16]
 80095aa:	f7ff fc67 	bl	8008e7c <clust2sect>
 80095ae:	4602      	mov	r2, r0
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <dir_sdi+0xd4>
 80095c2:	2302      	movs	r3, #2
 80095c4:	e01a      	b.n	80095fc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	69da      	ldr	r2, [r3, #28]
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	899b      	ldrh	r3, [r3, #12]
 80095ce:	4619      	mov	r1, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80095d6:	441a      	add	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	899b      	ldrh	r3, [r3, #12]
 80095e6:	461a      	mov	r2, r3
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80095ee:	fb02 f200 	mul.w	r2, r2, r0
 80095f2:	1a9b      	subs	r3, r3, r2
 80095f4:	18ca      	adds	r2, r1, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3718      	adds	r7, #24
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	3320      	adds	r3, #32
 800961a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <dir_next+0x28>
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800962a:	d301      	bcc.n	8009630 <dir_next+0x2c>
 800962c:	2304      	movs	r3, #4
 800962e:	e0bb      	b.n	80097a8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	899b      	ldrh	r3, [r3, #12]
 8009634:	461a      	mov	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	fbb3 f1f2 	udiv	r1, r3, r2
 800963c:	fb02 f201 	mul.w	r2, r2, r1
 8009640:	1a9b      	subs	r3, r3, r2
 8009642:	2b00      	cmp	r3, #0
 8009644:	f040 809d 	bne.w	8009782 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	1c5a      	adds	r2, r3, #1
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10b      	bne.n	8009672 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	095b      	lsrs	r3, r3, #5
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	8912      	ldrh	r2, [r2, #8]
 8009662:	4293      	cmp	r3, r2
 8009664:	f0c0 808d 	bcc.w	8009782 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	61da      	str	r2, [r3, #28]
 800966e:	2304      	movs	r3, #4
 8009670:	e09a      	b.n	80097a8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	899b      	ldrh	r3, [r3, #12]
 8009676:	461a      	mov	r2, r3
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	fbb3 f3f2 	udiv	r3, r3, r2
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	8952      	ldrh	r2, [r2, #10]
 8009682:	3a01      	subs	r2, #1
 8009684:	4013      	ands	r3, r2
 8009686:	2b00      	cmp	r3, #0
 8009688:	d17b      	bne.n	8009782 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f7ff fc11 	bl	8008eba <get_fat>
 8009698:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d801      	bhi.n	80096a4 <dir_next+0xa0>
 80096a0:	2302      	movs	r3, #2
 80096a2:	e081      	b.n	80097a8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096aa:	d101      	bne.n	80096b0 <dir_next+0xac>
 80096ac:	2301      	movs	r3, #1
 80096ae:	e07b      	b.n	80097a8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d359      	bcc.n	800976e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d104      	bne.n	80096ca <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	61da      	str	r2, [r3, #28]
 80096c6:	2304      	movs	r3, #4
 80096c8:	e06e      	b.n	80097a8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f7ff fe3d 	bl	8009352 <create_chain>
 80096d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d101      	bne.n	80096e4 <dir_next+0xe0>
 80096e0:	2307      	movs	r3, #7
 80096e2:	e061      	b.n	80097a8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d101      	bne.n	80096ee <dir_next+0xea>
 80096ea:	2302      	movs	r3, #2
 80096ec:	e05c      	b.n	80097a8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f4:	d101      	bne.n	80096fa <dir_next+0xf6>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e056      	b.n	80097a8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f7ff fadc 	bl	8008cb8 <sync_window>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <dir_next+0x106>
 8009706:	2301      	movs	r3, #1
 8009708:	e04e      	b.n	80097a8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	899b      	ldrh	r3, [r3, #12]
 8009714:	461a      	mov	r2, r3
 8009716:	2100      	movs	r1, #0
 8009718:	f7ff f905 	bl	8008926 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800971c:	2300      	movs	r3, #0
 800971e:	613b      	str	r3, [r7, #16]
 8009720:	6979      	ldr	r1, [r7, #20]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f7ff fbaa 	bl	8008e7c <clust2sect>
 8009728:	4602      	mov	r2, r0
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	635a      	str	r2, [r3, #52]	; 0x34
 800972e:	e012      	b.n	8009756 <dir_next+0x152>
						fs->wflag = 1;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2201      	movs	r2, #1
 8009734:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f7ff fabe 	bl	8008cb8 <sync_window>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <dir_next+0x142>
 8009742:	2301      	movs	r3, #1
 8009744:	e030      	b.n	80097a8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	3301      	adds	r3, #1
 800974a:	613b      	str	r3, [r7, #16]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	635a      	str	r2, [r3, #52]	; 0x34
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	895b      	ldrh	r3, [r3, #10]
 800975a:	461a      	mov	r2, r3
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	4293      	cmp	r3, r2
 8009760:	d3e6      	bcc.n	8009730 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	1ad2      	subs	r2, r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009774:	6979      	ldr	r1, [r7, #20]
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f7ff fb80 	bl	8008e7c <clust2sect>
 800977c:	4602      	mov	r2, r0
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	899b      	ldrh	r3, [r3, #12]
 8009792:	461a      	mov	r2, r3
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	fbb3 f0f2 	udiv	r0, r3, r2
 800979a:	fb02 f200 	mul.w	r2, r2, r0
 800979e:	1a9b      	subs	r3, r3, r2
 80097a0:	18ca      	adds	r2, r1, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3718      	adds	r7, #24
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80097c0:	2100      	movs	r1, #0
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff fe95 	bl	80094f2 <dir_sdi>
 80097c8:	4603      	mov	r3, r0
 80097ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d12b      	bne.n	800982a <dir_alloc+0x7a>
		n = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	4619      	mov	r1, r3
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f7ff faaf 	bl	8008d40 <move_window>
 80097e2:	4603      	mov	r3, r0
 80097e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d11d      	bne.n	8009828 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2be5      	cmp	r3, #229	; 0xe5
 80097f4:	d004      	beq.n	8009800 <dir_alloc+0x50>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d107      	bne.n	8009810 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	3301      	adds	r3, #1
 8009804:	613b      	str	r3, [r7, #16]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d102      	bne.n	8009814 <dir_alloc+0x64>
 800980e:	e00c      	b.n	800982a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009810:	2300      	movs	r3, #0
 8009812:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009814:	2101      	movs	r1, #1
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff fef4 	bl	8009604 <dir_next>
 800981c:	4603      	mov	r3, r0
 800981e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0d7      	beq.n	80097d6 <dir_alloc+0x26>
 8009826:	e000      	b.n	800982a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009828:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800982a:	7dfb      	ldrb	r3, [r7, #23]
 800982c:	2b04      	cmp	r3, #4
 800982e:	d101      	bne.n	8009834 <dir_alloc+0x84>
 8009830:	2307      	movs	r3, #7
 8009832:	75fb      	strb	r3, [r7, #23]
	return res;
 8009834:	7dfb      	ldrb	r3, [r7, #23]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	331a      	adds	r3, #26
 800984c:	4618      	mov	r0, r3
 800984e:	f7fe ffc7 	bl	80087e0 <ld_word>
 8009852:	4603      	mov	r3, r0
 8009854:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b03      	cmp	r3, #3
 800985c:	d109      	bne.n	8009872 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	3314      	adds	r3, #20
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe ffbc 	bl	80087e0 <ld_word>
 8009868:	4603      	mov	r3, r0
 800986a:	041b      	lsls	r3, r3, #16
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	4313      	orrs	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009872:	68fb      	ldr	r3, [r7, #12]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	331a      	adds	r3, #26
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	b292      	uxth	r2, r2
 8009890:	4611      	mov	r1, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe ffdf 	bl	8008856 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b03      	cmp	r3, #3
 800989e:	d109      	bne.n	80098b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f103 0214 	add.w	r2, r3, #20
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	0c1b      	lsrs	r3, r3, #16
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	4619      	mov	r1, r3
 80098ae:	4610      	mov	r0, r2
 80098b0:	f7fe ffd1 	bl	8008856 <st_word>
	}
}
 80098b4:	bf00      	nop
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80098bc:	b590      	push	{r4, r7, lr}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	331a      	adds	r3, #26
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe ff88 	bl	80087e0 <ld_word>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <cmp_lfn+0x1e>
 80098d6:	2300      	movs	r3, #0
 80098d8:	e059      	b.n	800998e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098e2:	1e5a      	subs	r2, r3, #1
 80098e4:	4613      	mov	r3, r2
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80098f0:	2301      	movs	r3, #1
 80098f2:	81fb      	strh	r3, [r7, #14]
 80098f4:	2300      	movs	r3, #0
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	e033      	b.n	8009962 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80098fa:	4a27      	ldr	r2, [pc, #156]	; (8009998 <cmp_lfn+0xdc>)
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	4413      	add	r3, r2
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	4413      	add	r3, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f7fe ff69 	bl	80087e0 <ld_word>
 800990e:	4603      	mov	r3, r0
 8009910:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009912:	89fb      	ldrh	r3, [r7, #14]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d01a      	beq.n	800994e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	2bfe      	cmp	r3, #254	; 0xfe
 800991c:	d812      	bhi.n	8009944 <cmp_lfn+0x88>
 800991e:	89bb      	ldrh	r3, [r7, #12]
 8009920:	4618      	mov	r0, r3
 8009922:	f002 f80f 	bl	800b944 <ff_wtoupper>
 8009926:	4603      	mov	r3, r0
 8009928:	461c      	mov	r4, r3
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	617a      	str	r2, [r7, #20]
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	4413      	add	r3, r2
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	4618      	mov	r0, r3
 800993a:	f002 f803 	bl	800b944 <ff_wtoupper>
 800993e:	4603      	mov	r3, r0
 8009940:	429c      	cmp	r4, r3
 8009942:	d001      	beq.n	8009948 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009944:	2300      	movs	r3, #0
 8009946:	e022      	b.n	800998e <cmp_lfn+0xd2>
			}
			wc = uc;
 8009948:	89bb      	ldrh	r3, [r7, #12]
 800994a:	81fb      	strh	r3, [r7, #14]
 800994c:	e006      	b.n	800995c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800994e:	89bb      	ldrh	r3, [r7, #12]
 8009950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009954:	4293      	cmp	r3, r2
 8009956:	d001      	beq.n	800995c <cmp_lfn+0xa0>
 8009958:	2300      	movs	r3, #0
 800995a:	e018      	b.n	800998e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	3301      	adds	r3, #1
 8009960:	613b      	str	r3, [r7, #16]
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2b0c      	cmp	r3, #12
 8009966:	d9c8      	bls.n	80098fa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <cmp_lfn+0xd0>
 8009974:	89fb      	ldrh	r3, [r7, #14]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d008      	beq.n	800998c <cmp_lfn+0xd0>
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	4413      	add	r3, r2
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <cmp_lfn+0xd0>
 8009988:	2300      	movs	r3, #0
 800998a:	e000      	b.n	800998e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800998c:	2301      	movs	r3, #1
}
 800998e:	4618      	mov	r0, r3
 8009990:	371c      	adds	r7, #28
 8009992:	46bd      	mov	sp, r7
 8009994:	bd90      	pop	{r4, r7, pc}
 8009996:	bf00      	nop
 8009998:	0800eadc 	.word	0x0800eadc

0800999c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	4611      	mov	r1, r2
 80099a8:	461a      	mov	r2, r3
 80099aa:	460b      	mov	r3, r1
 80099ac:	71fb      	strb	r3, [r7, #7]
 80099ae:	4613      	mov	r3, r2
 80099b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	330d      	adds	r3, #13
 80099b6:	79ba      	ldrb	r2, [r7, #6]
 80099b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	330b      	adds	r3, #11
 80099be:	220f      	movs	r2, #15
 80099c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	330c      	adds	r3, #12
 80099c6:	2200      	movs	r2, #0
 80099c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	331a      	adds	r3, #26
 80099ce:	2100      	movs	r1, #0
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fe ff40 	bl	8008856 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	1e5a      	subs	r2, r3, #1
 80099da:	4613      	mov	r3, r2
 80099dc:	005b      	lsls	r3, r3, #1
 80099de:	4413      	add	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	82fb      	strh	r3, [r7, #22]
 80099ea:	2300      	movs	r3, #0
 80099ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80099ee:	8afb      	ldrh	r3, [r7, #22]
 80099f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d007      	beq.n	8009a08 <put_lfn+0x6c>
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	1c5a      	adds	r2, r3, #1
 80099fc:	61fa      	str	r2, [r7, #28]
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	4413      	add	r3, r2
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009a08:	4a17      	ldr	r2, [pc, #92]	; (8009a68 <put_lfn+0xcc>)
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	461a      	mov	r2, r3
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	4413      	add	r3, r2
 8009a16:	8afa      	ldrh	r2, [r7, #22]
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe ff1b 	bl	8008856 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009a20:	8afb      	ldrh	r3, [r7, #22]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <put_lfn+0x90>
 8009a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a2a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	61bb      	str	r3, [r7, #24]
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	2b0c      	cmp	r3, #12
 8009a36:	d9da      	bls.n	80099ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009a38:	8afb      	ldrh	r3, [r7, #22]
 8009a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d006      	beq.n	8009a50 <put_lfn+0xb4>
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4413      	add	r3, r2
 8009a4a:	881b      	ldrh	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d103      	bne.n	8009a58 <put_lfn+0xbc>
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a56:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	79fa      	ldrb	r2, [r7, #7]
 8009a5c:	701a      	strb	r2, [r3, #0]
}
 8009a5e:	bf00      	nop
 8009a60:	3720      	adds	r7, #32
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	0800eadc 	.word	0x0800eadc

08009a6c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08c      	sub	sp, #48	; 0x30
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009a7a:	220b      	movs	r2, #11
 8009a7c:	68b9      	ldr	r1, [r7, #8]
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f7fe ff30 	bl	80088e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b05      	cmp	r3, #5
 8009a88:	d92b      	bls.n	8009ae2 <gen_numname+0x76>
		sr = seq;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009a8e:	e022      	b.n	8009ad6 <gen_numname+0x6a>
			wc = *lfn++;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	1c9a      	adds	r2, r3, #2
 8009a94:	607a      	str	r2, [r7, #4]
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a9e:	e017      	b.n	8009ad0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	005a      	lsls	r2, r3, #1
 8009aa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	4413      	add	r3, r2
 8009aac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009aae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ab0:	085b      	lsrs	r3, r3, #1
 8009ab2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d005      	beq.n	8009aca <gen_numname+0x5e>
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009ac4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009ac8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	3301      	adds	r3, #1
 8009ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad2:	2b0f      	cmp	r3, #15
 8009ad4:	d9e4      	bls.n	8009aa0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1d8      	bne.n	8009a90 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009ae2:	2307      	movs	r3, #7
 8009ae4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	f003 030f 	and.w	r3, r3, #15
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	3330      	adds	r3, #48	; 0x30
 8009af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009af6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009afa:	2b39      	cmp	r3, #57	; 0x39
 8009afc:	d904      	bls.n	8009b08 <gen_numname+0x9c>
 8009afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b02:	3307      	adds	r3, #7
 8009b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	1e5a      	subs	r2, r3, #1
 8009b0c:	62ba      	str	r2, [r7, #40]	; 0x28
 8009b0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009b12:	4413      	add	r3, r2
 8009b14:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009b18:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	091b      	lsrs	r3, r3, #4
 8009b20:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1de      	bne.n	8009ae6 <gen_numname+0x7a>
	ns[i] = '~';
 8009b28:	f107 0214 	add.w	r2, r7, #20
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	4413      	add	r3, r2
 8009b30:	227e      	movs	r2, #126	; 0x7e
 8009b32:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009b34:	2300      	movs	r3, #0
 8009b36:	627b      	str	r3, [r7, #36]	; 0x24
 8009b38:	e002      	b.n	8009b40 <gen_numname+0xd4>
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d205      	bcs.n	8009b54 <gen_numname+0xe8>
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	4413      	add	r3, r2
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	2b20      	cmp	r3, #32
 8009b52:	d1f2      	bne.n	8009b3a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b56:	2b07      	cmp	r3, #7
 8009b58:	d808      	bhi.n	8009b6c <gen_numname+0x100>
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8009b60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009b64:	4413      	add	r3, r2
 8009b66:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009b6a:	e000      	b.n	8009b6e <gen_numname+0x102>
 8009b6c:	2120      	movs	r1, #32
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	627a      	str	r2, [r7, #36]	; 0x24
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	460a      	mov	r2, r1
 8009b7a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	2b07      	cmp	r3, #7
 8009b80:	d9e8      	bls.n	8009b54 <gen_numname+0xe8>
}
 8009b82:	bf00      	nop
 8009b84:	3730      	adds	r7, #48	; 0x30
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b085      	sub	sp, #20
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009b96:	230b      	movs	r3, #11
 8009b98:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	0852      	lsrs	r2, r2, #1
 8009ba0:	01db      	lsls	r3, r3, #7
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	1c59      	adds	r1, r3, #1
 8009baa:	6079      	str	r1, [r7, #4]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	4413      	add	r3, r2
 8009bb0:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	60bb      	str	r3, [r7, #8]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1ed      	bne.n	8009b9a <sum_sfn+0x10>
	return sum;
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009bda:	2100      	movs	r1, #0
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff fc88 	bl	80094f2 <dir_sdi>
 8009be2:	4603      	mov	r3, r0
 8009be4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <dir_find+0x24>
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	e0a9      	b.n	8009d44 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009bf0:	23ff      	movs	r3, #255	; 0xff
 8009bf2:	753b      	strb	r3, [r7, #20]
 8009bf4:	7d3b      	ldrb	r3, [r7, #20]
 8009bf6:	757b      	strb	r3, [r7, #21]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfe:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	69db      	ldr	r3, [r3, #28]
 8009c04:	4619      	mov	r1, r3
 8009c06:	6938      	ldr	r0, [r7, #16]
 8009c08:	f7ff f89a 	bl	8008d40 <move_window>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f040 8090 	bne.w	8009d38 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a1b      	ldr	r3, [r3, #32]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c20:	7dbb      	ldrb	r3, [r7, #22]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d102      	bne.n	8009c2c <dir_find+0x60>
 8009c26:	2304      	movs	r3, #4
 8009c28:	75fb      	strb	r3, [r7, #23]
 8009c2a:	e08a      	b.n	8009d42 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
 8009c30:	330b      	adds	r3, #11
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c38:	73fb      	strb	r3, [r7, #15]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	7bfa      	ldrb	r2, [r7, #15]
 8009c3e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009c40:	7dbb      	ldrb	r3, [r7, #22]
 8009c42:	2be5      	cmp	r3, #229	; 0xe5
 8009c44:	d007      	beq.n	8009c56 <dir_find+0x8a>
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	f003 0308 	and.w	r3, r3, #8
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d009      	beq.n	8009c64 <dir_find+0x98>
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	2b0f      	cmp	r3, #15
 8009c54:	d006      	beq.n	8009c64 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009c56:	23ff      	movs	r3, #255	; 0xff
 8009c58:	757b      	strb	r3, [r7, #21]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c60:	631a      	str	r2, [r3, #48]	; 0x30
 8009c62:	e05e      	b.n	8009d22 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	2b0f      	cmp	r3, #15
 8009c68:	d136      	bne.n	8009cd8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d154      	bne.n	8009d22 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009c78:	7dbb      	ldrb	r3, [r7, #22]
 8009c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00d      	beq.n	8009c9e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	7b5b      	ldrb	r3, [r3, #13]
 8009c88:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009c8a:	7dbb      	ldrb	r3, [r7, #22]
 8009c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c90:	75bb      	strb	r3, [r7, #22]
 8009c92:	7dbb      	ldrb	r3, [r7, #22]
 8009c94:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	695a      	ldr	r2, [r3, #20]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009c9e:	7dba      	ldrb	r2, [r7, #22]
 8009ca0:	7d7b      	ldrb	r3, [r7, #21]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d115      	bne.n	8009cd2 <dir_find+0x106>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	330d      	adds	r3, #13
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	7d3a      	ldrb	r2, [r7, #20]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d10e      	bne.n	8009cd2 <dir_find+0x106>
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	691a      	ldr	r2, [r3, #16]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a1b      	ldr	r3, [r3, #32]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	f7ff fdfc 	bl	80098bc <cmp_lfn>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <dir_find+0x106>
 8009cca:	7d7b      	ldrb	r3, [r7, #21]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	e000      	b.n	8009cd4 <dir_find+0x108>
 8009cd2:	23ff      	movs	r3, #255	; 0xff
 8009cd4:	757b      	strb	r3, [r7, #21]
 8009cd6:	e024      	b.n	8009d22 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009cd8:	7d7b      	ldrb	r3, [r7, #21]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d109      	bne.n	8009cf2 <dir_find+0x126>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7ff ff51 	bl	8009b8a <sum_sfn>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	461a      	mov	r2, r3
 8009cec:	7d3b      	ldrb	r3, [r7, #20]
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d024      	beq.n	8009d3c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10a      	bne.n	8009d16 <dir_find+0x14a>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a18      	ldr	r0, [r3, #32]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3324      	adds	r3, #36	; 0x24
 8009d08:	220b      	movs	r2, #11
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	f7fe fe25 	bl	800895a <mem_cmp>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d014      	beq.n	8009d40 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009d16:	23ff      	movs	r3, #255	; 0xff
 8009d18:	757b      	strb	r3, [r7, #21]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d20:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009d22:	2100      	movs	r1, #0
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fc6d 	bl	8009604 <dir_next>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009d2e:	7dfb      	ldrb	r3, [r7, #23]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f43f af65 	beq.w	8009c00 <dir_find+0x34>
 8009d36:	e004      	b.n	8009d42 <dir_find+0x176>
		if (res != FR_OK) break;
 8009d38:	bf00      	nop
 8009d3a:	e002      	b.n	8009d42 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009d3c:	bf00      	nop
 8009d3e:	e000      	b.n	8009d42 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009d40:	bf00      	nop

	return res;
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08c      	sub	sp, #48	; 0x30
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d60:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <dir_register+0x20>
 8009d68:	2306      	movs	r3, #6
 8009d6a:	e0e0      	b.n	8009f2e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d70:	e002      	b.n	8009d78 <dir_register+0x2c>
 8009d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d74:	3301      	adds	r3, #1
 8009d76:	627b      	str	r3, [r7, #36]	; 0x24
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	691a      	ldr	r2, [r3, #16]
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	4413      	add	r3, r2
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1f4      	bne.n	8009d72 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009d8e:	f107 030c 	add.w	r3, r7, #12
 8009d92:	220c      	movs	r2, #12
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe fda5 	bl	80088e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009d9a:	7dfb      	ldrb	r3, [r7, #23]
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d032      	beq.n	8009e0a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2240      	movs	r2, #64	; 0x40
 8009da8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009dac:	2301      	movs	r3, #1
 8009dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8009db0:	e016      	b.n	8009de0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	691a      	ldr	r2, [r3, #16]
 8009dbc:	f107 010c 	add.w	r1, r7, #12
 8009dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc2:	f7ff fe53 	bl	8009a6c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7ff ff00 	bl	8009bcc <dir_find>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d106      	bne.n	8009de8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ddc:	3301      	adds	r3, #1
 8009dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	2b63      	cmp	r3, #99	; 0x63
 8009de4:	d9e5      	bls.n	8009db2 <dir_register+0x66>
 8009de6:	e000      	b.n	8009dea <dir_register+0x9e>
			if (res != FR_OK) break;
 8009de8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dec:	2b64      	cmp	r3, #100	; 0x64
 8009dee:	d101      	bne.n	8009df4 <dir_register+0xa8>
 8009df0:	2307      	movs	r3, #7
 8009df2:	e09c      	b.n	8009f2e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009df4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009df8:	2b04      	cmp	r3, #4
 8009dfa:	d002      	beq.n	8009e02 <dir_register+0xb6>
 8009dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e00:	e095      	b.n	8009f2e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009e02:	7dfa      	ldrb	r2, [r7, #23]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009e0a:	7dfb      	ldrb	r3, [r7, #23]
 8009e0c:	f003 0302 	and.w	r3, r3, #2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d007      	beq.n	8009e24 <dir_register+0xd8>
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	330c      	adds	r3, #12
 8009e18:	4a47      	ldr	r2, [pc, #284]	; (8009f38 <dir_register+0x1ec>)
 8009e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1e:	089b      	lsrs	r3, r3, #2
 8009e20:	3301      	adds	r3, #1
 8009e22:	e000      	b.n	8009e26 <dir_register+0xda>
 8009e24:	2301      	movs	r3, #1
 8009e26:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009e28:	6a39      	ldr	r1, [r7, #32]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff fcc0 	bl	80097b0 <dir_alloc>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d148      	bne.n	8009ed0 <dir_register+0x184>
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	3b01      	subs	r3, #1
 8009e42:	623b      	str	r3, [r7, #32]
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d042      	beq.n	8009ed0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695a      	ldr	r2, [r3, #20]
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	015b      	lsls	r3, r3, #5
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f7ff fb4b 	bl	80094f2 <dir_sdi>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d132      	bne.n	8009ed0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	3324      	adds	r3, #36	; 0x24
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7ff fe8b 	bl	8009b8a <sum_sfn>
 8009e74:	4603      	mov	r3, r0
 8009e76:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	69db      	ldr	r3, [r3, #28]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	69f8      	ldr	r0, [r7, #28]
 8009e80:	f7fe ff5e 	bl	8008d40 <move_window>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d11d      	bne.n	8009ece <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	6918      	ldr	r0, [r3, #16]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a19      	ldr	r1, [r3, #32]
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	7efb      	ldrb	r3, [r7, #27]
 8009ea0:	f7ff fd7c 	bl	800999c <put_lfn>
				fs->wflag = 1;
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009eaa:	2100      	movs	r1, #0
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff fba9 	bl	8009604 <dir_next>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d107      	bne.n	8009ed0 <dir_register+0x184>
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	623b      	str	r3, [r7, #32]
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1d5      	bne.n	8009e78 <dir_register+0x12c>
 8009ecc:	e000      	b.n	8009ed0 <dir_register+0x184>
				if (res != FR_OK) break;
 8009ece:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d128      	bne.n	8009f2a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	4619      	mov	r1, r3
 8009ede:	69f8      	ldr	r0, [r7, #28]
 8009ee0:	f7fe ff2e 	bl	8008d40 <move_window>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009eea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d11b      	bne.n	8009f2a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	2100      	movs	r1, #0
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fe fd13 	bl	8008926 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a18      	ldr	r0, [r3, #32]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3324      	adds	r3, #36	; 0x24
 8009f08:	220b      	movs	r2, #11
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	f7fe fcea 	bl	80088e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	330c      	adds	r3, #12
 8009f1c:	f002 0218 	and.w	r2, r2, #24
 8009f20:	b2d2      	uxtb	r2, r2
 8009f22:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	2201      	movs	r2, #1
 8009f28:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3730      	adds	r7, #48	; 0x30
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	4ec4ec4f 	.word	0x4ec4ec4f

08009f3c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08a      	sub	sp, #40	; 0x28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	613b      	str	r3, [r7, #16]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	2300      	movs	r3, #0
 8009f56:	617b      	str	r3, [r7, #20]
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	1c5a      	adds	r2, r3, #1
 8009f60:	61ba      	str	r2, [r7, #24]
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	4413      	add	r3, r2
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f6c:	2b1f      	cmp	r3, #31
 8009f6e:	d940      	bls.n	8009ff2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f72:	2b2f      	cmp	r3, #47	; 0x2f
 8009f74:	d006      	beq.n	8009f84 <create_name+0x48>
 8009f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f78:	2b5c      	cmp	r3, #92	; 0x5c
 8009f7a:	d110      	bne.n	8009f9e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009f7c:	e002      	b.n	8009f84 <create_name+0x48>
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	3301      	adds	r3, #1
 8009f82:	61bb      	str	r3, [r7, #24]
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	4413      	add	r3, r2
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b2f      	cmp	r3, #47	; 0x2f
 8009f8e:	d0f6      	beq.n	8009f7e <create_name+0x42>
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	4413      	add	r3, r2
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b5c      	cmp	r3, #92	; 0x5c
 8009f9a:	d0f0      	beq.n	8009f7e <create_name+0x42>
			break;
 8009f9c:	e02a      	b.n	8009ff4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	2bfe      	cmp	r3, #254	; 0xfe
 8009fa2:	d901      	bls.n	8009fa8 <create_name+0x6c>
 8009fa4:	2306      	movs	r3, #6
 8009fa6:	e177      	b.n	800a298 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 fc8a 	bl	800b8cc <ff_convert>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009fbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <create_name+0x8a>
 8009fc2:	2306      	movs	r3, #6
 8009fc4:	e168      	b.n	800a298 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8009fca:	d809      	bhi.n	8009fe0 <create_name+0xa4>
 8009fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fce:	4619      	mov	r1, r3
 8009fd0:	48b3      	ldr	r0, [pc, #716]	; (800a2a0 <create_name+0x364>)
 8009fd2:	f7fe fce9 	bl	80089a8 <chk_chr>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <create_name+0xa4>
 8009fdc:	2306      	movs	r3, #6
 8009fde:	e15b      	b.n	800a298 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	617a      	str	r2, [r7, #20]
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009ff0:	e7b4      	b.n	8009f5c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009ff2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	441a      	add	r2, r3
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009ffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a000:	2b1f      	cmp	r3, #31
 800a002:	d801      	bhi.n	800a008 <create_name+0xcc>
 800a004:	2304      	movs	r3, #4
 800a006:	e000      	b.n	800a00a <create_name+0xce>
 800a008:	2300      	movs	r3, #0
 800a00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a00e:	e011      	b.n	800a034 <create_name+0xf8>
		w = lfn[di - 1];
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a016:	3b01      	subs	r3, #1
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	4413      	add	r3, r2
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a024:	2b20      	cmp	r3, #32
 800a026:	d002      	beq.n	800a02e <create_name+0xf2>
 800a028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a02a:	2b2e      	cmp	r3, #46	; 0x2e
 800a02c:	d106      	bne.n	800a03c <create_name+0x100>
		di--;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	3b01      	subs	r3, #1
 800a032:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1ea      	bne.n	800a010 <create_name+0xd4>
 800a03a:	e000      	b.n	800a03e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a03c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	4413      	add	r3, r2
 800a046:	2200      	movs	r2, #0
 800a048:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <create_name+0x118>
 800a050:	2306      	movs	r3, #6
 800a052:	e121      	b.n	800a298 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3324      	adds	r3, #36	; 0x24
 800a058:	220b      	movs	r2, #11
 800a05a:	2120      	movs	r1, #32
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fe fc62 	bl	8008926 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a062:	2300      	movs	r3, #0
 800a064:	61bb      	str	r3, [r7, #24]
 800a066:	e002      	b.n	800a06e <create_name+0x132>
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	3301      	adds	r3, #1
 800a06c:	61bb      	str	r3, [r7, #24]
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	005b      	lsls	r3, r3, #1
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	4413      	add	r3, r2
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	2b20      	cmp	r3, #32
 800a07a:	d0f5      	beq.n	800a068 <create_name+0x12c>
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	005b      	lsls	r3, r3, #1
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	4413      	add	r3, r2
 800a084:	881b      	ldrh	r3, [r3, #0]
 800a086:	2b2e      	cmp	r3, #46	; 0x2e
 800a088:	d0ee      	beq.n	800a068 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d009      	beq.n	800a0a4 <create_name+0x168>
 800a090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a094:	f043 0303 	orr.w	r3, r3, #3
 800a098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a09c:	e002      	b.n	800a0a4 <create_name+0x168>
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d009      	beq.n	800a0be <create_name+0x182>
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	881b      	ldrh	r3, [r3, #0]
 800a0ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a0bc:	d1ef      	bne.n	800a09e <create_name+0x162>

	i = b = 0; ni = 8;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	623b      	str	r3, [r7, #32]
 800a0c8:	2308      	movs	r3, #8
 800a0ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	61ba      	str	r2, [r7, #24]
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a0dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 8090 	beq.w	800a204 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a0e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0e6:	2b20      	cmp	r3, #32
 800a0e8:	d006      	beq.n	800a0f8 <create_name+0x1bc>
 800a0ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ee:	d10a      	bne.n	800a106 <create_name+0x1ca>
 800a0f0:	69ba      	ldr	r2, [r7, #24]
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d006      	beq.n	800a106 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0fc:	f043 0303 	orr.w	r3, r3, #3
 800a100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a104:	e07d      	b.n	800a202 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a106:	6a3a      	ldr	r2, [r7, #32]
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d203      	bcs.n	800a116 <create_name+0x1da>
 800a10e:	69ba      	ldr	r2, [r7, #24]
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	429a      	cmp	r2, r3
 800a114:	d123      	bne.n	800a15e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	2b0b      	cmp	r3, #11
 800a11a:	d106      	bne.n	800a12a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a120:	f043 0303 	orr.w	r3, r3, #3
 800a124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a128:	e06f      	b.n	800a20a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a12a:	69ba      	ldr	r2, [r7, #24]
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d005      	beq.n	800a13e <create_name+0x202>
 800a132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a136:	f043 0303 	orr.w	r3, r3, #3
 800a13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	429a      	cmp	r2, r3
 800a144:	d860      	bhi.n	800a208 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	61bb      	str	r3, [r7, #24]
 800a14a:	2308      	movs	r3, #8
 800a14c:	623b      	str	r3, [r7, #32]
 800a14e:	230b      	movs	r3, #11
 800a150:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a152:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a15c:	e051      	b.n	800a202 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a160:	2b7f      	cmp	r3, #127	; 0x7f
 800a162:	d914      	bls.n	800a18e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a166:	2100      	movs	r1, #0
 800a168:	4618      	mov	r0, r3
 800a16a:	f001 fbaf 	bl	800b8cc <ff_convert>
 800a16e:	4603      	mov	r3, r0
 800a170:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <create_name+0x246>
 800a178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a17a:	3b80      	subs	r3, #128	; 0x80
 800a17c:	4a49      	ldr	r2, [pc, #292]	; (800a2a4 <create_name+0x368>)
 800a17e:	5cd3      	ldrb	r3, [r2, r3]
 800a180:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a186:	f043 0302 	orr.w	r3, r3, #2
 800a18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a18e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	d007      	beq.n	800a1a4 <create_name+0x268>
 800a194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a196:	4619      	mov	r1, r3
 800a198:	4843      	ldr	r0, [pc, #268]	; (800a2a8 <create_name+0x36c>)
 800a19a:	f7fe fc05 	bl	80089a8 <chk_chr>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d008      	beq.n	800a1b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a1a4:	235f      	movs	r3, #95	; 0x5f
 800a1a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1ac:	f043 0303 	orr.w	r3, r3, #3
 800a1b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1b4:	e01b      	b.n	800a1ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a1b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1b8:	2b40      	cmp	r3, #64	; 0x40
 800a1ba:	d909      	bls.n	800a1d0 <create_name+0x294>
 800a1bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1be:	2b5a      	cmp	r3, #90	; 0x5a
 800a1c0:	d806      	bhi.n	800a1d0 <create_name+0x294>
					b |= 2;
 800a1c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a1c6:	f043 0302 	orr.w	r3, r3, #2
 800a1ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a1ce:	e00e      	b.n	800a1ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a1d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1d2:	2b60      	cmp	r3, #96	; 0x60
 800a1d4:	d90b      	bls.n	800a1ee <create_name+0x2b2>
 800a1d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1d8:	2b7a      	cmp	r3, #122	; 0x7a
 800a1da:	d808      	bhi.n	800a1ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a1dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a1e0:	f043 0301 	orr.w	r3, r3, #1
 800a1e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a1e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1ea:	3b20      	subs	r3, #32
 800a1ec:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	623a      	str	r2, [r7, #32]
 800a1f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1f6:	b2d1      	uxtb	r1, r2
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	460a      	mov	r2, r1
 800a1fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a202:	e763      	b.n	800a0cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a204:	bf00      	nop
 800a206:	e000      	b.n	800a20a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800a208:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a210:	2be5      	cmp	r3, #229	; 0xe5
 800a212:	d103      	bne.n	800a21c <create_name+0x2e0>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2205      	movs	r2, #5
 800a218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	2b08      	cmp	r3, #8
 800a220:	d104      	bne.n	800a22c <create_name+0x2f0>
 800a222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a22c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a230:	f003 030c 	and.w	r3, r3, #12
 800a234:	2b0c      	cmp	r3, #12
 800a236:	d005      	beq.n	800a244 <create_name+0x308>
 800a238:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a23c:	f003 0303 	and.w	r3, r3, #3
 800a240:	2b03      	cmp	r3, #3
 800a242:	d105      	bne.n	800a250 <create_name+0x314>
 800a244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a248:	f043 0302 	orr.w	r3, r3, #2
 800a24c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a254:	f003 0302 	and.w	r3, r3, #2
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d117      	bne.n	800a28c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a25c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a260:	f003 0303 	and.w	r3, r3, #3
 800a264:	2b01      	cmp	r3, #1
 800a266:	d105      	bne.n	800a274 <create_name+0x338>
 800a268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a26c:	f043 0310 	orr.w	r3, r3, #16
 800a270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a274:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a278:	f003 030c 	and.w	r3, r3, #12
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	d105      	bne.n	800a28c <create_name+0x350>
 800a280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a284:	f043 0308 	orr.w	r3, r3, #8
 800a288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a292:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a296:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3728      	adds	r7, #40	; 0x28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	0800e9e8 	.word	0x0800e9e8
 800a2a4:	0800ea5c 	.word	0x0800ea5c
 800a2a8:	0800e9f4 	.word	0x0800e9f4

0800a2ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a2c0:	e002      	b.n	800a2c8 <follow_path+0x1c>
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	603b      	str	r3, [r7, #0]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b2f      	cmp	r3, #47	; 0x2f
 800a2ce:	d0f8      	beq.n	800a2c2 <follow_path+0x16>
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b5c      	cmp	r3, #92	; 0x5c
 800a2d6:	d0f4      	beq.n	800a2c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	2b1f      	cmp	r3, #31
 800a2e4:	d80a      	bhi.n	800a2fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2280      	movs	r2, #128	; 0x80
 800a2ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff f8fe 	bl	80094f2 <dir_sdi>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	75fb      	strb	r3, [r7, #23]
 800a2fa:	e048      	b.n	800a38e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a2fc:	463b      	mov	r3, r7
 800a2fe:	4619      	mov	r1, r3
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7ff fe1b 	bl	8009f3c <create_name>
 800a306:	4603      	mov	r3, r0
 800a308:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d139      	bne.n	800a384 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff fc5b 	bl	8009bcc <dir_find>
 800a316:	4603      	mov	r3, r0
 800a318:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a320:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a322:	7dfb      	ldrb	r3, [r7, #23]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00a      	beq.n	800a33e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	2b04      	cmp	r3, #4
 800a32c:	d12c      	bne.n	800a388 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	f003 0304 	and.w	r3, r3, #4
 800a334:	2b00      	cmp	r3, #0
 800a336:	d127      	bne.n	800a388 <follow_path+0xdc>
 800a338:	2305      	movs	r3, #5
 800a33a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a33c:	e024      	b.n	800a388 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a33e:	7afb      	ldrb	r3, [r7, #11]
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b00      	cmp	r3, #0
 800a346:	d121      	bne.n	800a38c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	799b      	ldrb	r3, [r3, #6]
 800a34c:	f003 0310 	and.w	r3, r3, #16
 800a350:	2b00      	cmp	r3, #0
 800a352:	d102      	bne.n	800a35a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a354:	2305      	movs	r3, #5
 800a356:	75fb      	strb	r3, [r7, #23]
 800a358:	e019      	b.n	800a38e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	8992      	ldrh	r2, [r2, #12]
 800a368:	fbb3 f0f2 	udiv	r0, r3, r2
 800a36c:	fb02 f200 	mul.w	r2, r2, r0
 800a370:	1a9b      	subs	r3, r3, r2
 800a372:	440b      	add	r3, r1
 800a374:	4619      	mov	r1, r3
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f7ff fa61 	bl	800983e <ld_clust>
 800a37c:	4602      	mov	r2, r0
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a382:	e7bb      	b.n	800a2fc <follow_path+0x50>
			if (res != FR_OK) break;
 800a384:	bf00      	nop
 800a386:	e002      	b.n	800a38e <follow_path+0xe2>
				break;
 800a388:	bf00      	nop
 800a38a:	e000      	b.n	800a38e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a38c:	bf00      	nop
			}
		}
	}

	return res;
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d031      	beq.n	800a412 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	617b      	str	r3, [r7, #20]
 800a3b4:	e002      	b.n	800a3bc <get_ldnumber+0x24>
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	2b1f      	cmp	r3, #31
 800a3c2:	d903      	bls.n	800a3cc <get_ldnumber+0x34>
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b3a      	cmp	r3, #58	; 0x3a
 800a3ca:	d1f4      	bne.n	800a3b6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b3a      	cmp	r3, #58	; 0x3a
 800a3d2:	d11c      	bne.n	800a40e <get_ldnumber+0x76>
			tp = *path;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	1c5a      	adds	r2, r3, #1
 800a3de:	60fa      	str	r2, [r7, #12]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	3b30      	subs	r3, #48	; 0x30
 800a3e4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b09      	cmp	r3, #9
 800a3ea:	d80e      	bhi.n	800a40a <get_ldnumber+0x72>
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d10a      	bne.n	800a40a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d107      	bne.n	800a40a <get_ldnumber+0x72>
					vol = (int)i;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	3301      	adds	r3, #1
 800a402:	617b      	str	r3, [r7, #20]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	e002      	b.n	800a414 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a40e:	2300      	movs	r3, #0
 800a410:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a412:	693b      	ldr	r3, [r7, #16]
}
 800a414:	4618      	mov	r0, r3
 800a416:	371c      	adds	r7, #28
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	70da      	strb	r2, [r3, #3]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f04f 32ff 	mov.w	r2, #4294967295
 800a436:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7fe fc80 	bl	8008d40 <move_window>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <check_fs+0x2a>
 800a446:	2304      	movs	r3, #4
 800a448:	e038      	b.n	800a4bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3338      	adds	r3, #56	; 0x38
 800a44e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a452:	4618      	mov	r0, r3
 800a454:	f7fe f9c4 	bl	80087e0 <ld_word>
 800a458:	4603      	mov	r3, r0
 800a45a:	461a      	mov	r2, r3
 800a45c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a460:	429a      	cmp	r2, r3
 800a462:	d001      	beq.n	800a468 <check_fs+0x48>
 800a464:	2303      	movs	r3, #3
 800a466:	e029      	b.n	800a4bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a46e:	2be9      	cmp	r3, #233	; 0xe9
 800a470:	d009      	beq.n	800a486 <check_fs+0x66>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a478:	2beb      	cmp	r3, #235	; 0xeb
 800a47a:	d11e      	bne.n	800a4ba <check_fs+0x9a>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a482:	2b90      	cmp	r3, #144	; 0x90
 800a484:	d119      	bne.n	800a4ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	3338      	adds	r3, #56	; 0x38
 800a48a:	3336      	adds	r3, #54	; 0x36
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe f9bf 	bl	8008810 <ld_dword>
 800a492:	4603      	mov	r3, r0
 800a494:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a498:	4a0a      	ldr	r2, [pc, #40]	; (800a4c4 <check_fs+0xa4>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d101      	bne.n	800a4a2 <check_fs+0x82>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	e00c      	b.n	800a4bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3338      	adds	r3, #56	; 0x38
 800a4a6:	3352      	adds	r3, #82	; 0x52
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fe f9b1 	bl	8008810 <ld_dword>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	4b05      	ldr	r3, [pc, #20]	; (800a4c8 <check_fs+0xa8>)
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d101      	bne.n	800a4ba <check_fs+0x9a>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	e000      	b.n	800a4bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a4ba:	2302      	movs	r3, #2
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	00544146 	.word	0x00544146
 800a4c8:	33544146 	.word	0x33544146

0800a4cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b096      	sub	sp, #88	; 0x58
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7ff ff59 	bl	800a398 <get_ldnumber>
 800a4e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	da01      	bge.n	800a4f2 <find_volume+0x26>
 800a4ee:	230b      	movs	r3, #11
 800a4f0:	e268      	b.n	800a9c4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a4f2:	4ab0      	ldr	r2, [pc, #704]	; (800a7b4 <find_volume+0x2e8>)
 800a4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <find_volume+0x3a>
 800a502:	230c      	movs	r3, #12
 800a504:	e25e      	b.n	800a9c4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a50a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a50c:	79fb      	ldrb	r3, [r7, #7]
 800a50e:	f023 0301 	bic.w	r3, r3, #1
 800a512:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d01a      	beq.n	800a552 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51e:	785b      	ldrb	r3, [r3, #1]
 800a520:	4618      	mov	r0, r3
 800a522:	f7fe f8bf 	bl	80086a4 <disk_status>
 800a526:	4603      	mov	r3, r0
 800a528:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a52c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10c      	bne.n	800a552 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d007      	beq.n	800a54e <find_volume+0x82>
 800a53e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a542:	f003 0304 	and.w	r3, r3, #4
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a54a:	230a      	movs	r3, #10
 800a54c:	e23a      	b.n	800a9c4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800a54e:	2300      	movs	r3, #0
 800a550:	e238      	b.n	800a9c4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a554:	2200      	movs	r2, #0
 800a556:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a562:	785b      	ldrb	r3, [r3, #1]
 800a564:	4618      	mov	r0, r3
 800a566:	f7fe f8b7 	bl	80086d8 <disk_initialize>
 800a56a:	4603      	mov	r3, r0
 800a56c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a570:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a574:	f003 0301 	and.w	r3, r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d001      	beq.n	800a580 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a57c:	2303      	movs	r3, #3
 800a57e:	e221      	b.n	800a9c4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d007      	beq.n	800a596 <find_volume+0xca>
 800a586:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a58a:	f003 0304 	and.w	r3, r3, #4
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a592:	230a      	movs	r3, #10
 800a594:	e216      	b.n	800a9c4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a598:	7858      	ldrb	r0, [r3, #1]
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	330c      	adds	r3, #12
 800a59e:	461a      	mov	r2, r3
 800a5a0:	2102      	movs	r1, #2
 800a5a2:	f7fe f8ff 	bl	80087a4 <disk_ioctl>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <find_volume+0xe4>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e209      	b.n	800a9c4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b2:	899b      	ldrh	r3, [r3, #12]
 800a5b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5b8:	d80d      	bhi.n	800a5d6 <find_volume+0x10a>
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5bc:	899b      	ldrh	r3, [r3, #12]
 800a5be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c2:	d308      	bcc.n	800a5d6 <find_volume+0x10a>
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c6:	899b      	ldrh	r3, [r3, #12]
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5cc:	899b      	ldrh	r3, [r3, #12]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <find_volume+0x10e>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e1f4      	b.n	800a9c4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a5de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5e2:	f7ff ff1d 	bl	800a420 <check_fs>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a5ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d14b      	bne.n	800a68c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	643b      	str	r3, [r7, #64]	; 0x40
 800a5f8:	e01f      	b.n	800a63a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a602:	011b      	lsls	r3, r3, #4
 800a604:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a608:	4413      	add	r3, r2
 800a60a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60e:	3304      	adds	r3, #4
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d006      	beq.n	800a624 <find_volume+0x158>
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	3308      	adds	r3, #8
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe f8f8 	bl	8008810 <ld_dword>
 800a620:	4602      	mov	r2, r0
 800a622:	e000      	b.n	800a626 <find_volume+0x15a>
 800a624:	2200      	movs	r2, #0
 800a626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a62e:	440b      	add	r3, r1
 800a630:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a636:	3301      	adds	r3, #1
 800a638:	643b      	str	r3, [r7, #64]	; 0x40
 800a63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d9dc      	bls.n	800a5fa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a640:	2300      	movs	r3, #0
 800a642:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	d002      	beq.n	800a650 <find_volume+0x184>
 800a64a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a64c:	3b01      	subs	r3, #1
 800a64e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a658:	4413      	add	r3, r2
 800a65a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a65e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a662:	2b00      	cmp	r3, #0
 800a664:	d005      	beq.n	800a672 <find_volume+0x1a6>
 800a666:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a668:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a66a:	f7ff fed9 	bl	800a420 <check_fs>
 800a66e:	4603      	mov	r3, r0
 800a670:	e000      	b.n	800a674 <find_volume+0x1a8>
 800a672:	2303      	movs	r3, #3
 800a674:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d905      	bls.n	800a68c <find_volume+0x1c0>
 800a680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a682:	3301      	adds	r3, #1
 800a684:	643b      	str	r3, [r7, #64]	; 0x40
 800a686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d9e1      	bls.n	800a650 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a68c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a690:	2b04      	cmp	r3, #4
 800a692:	d101      	bne.n	800a698 <find_volume+0x1cc>
 800a694:	2301      	movs	r3, #1
 800a696:	e195      	b.n	800a9c4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a698:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d901      	bls.n	800a6a4 <find_volume+0x1d8>
 800a6a0:	230d      	movs	r3, #13
 800a6a2:	e18f      	b.n	800a9c4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a6:	3338      	adds	r3, #56	; 0x38
 800a6a8:	330b      	adds	r3, #11
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe f898 	bl	80087e0 <ld_word>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	899b      	ldrh	r3, [r3, #12]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d001      	beq.n	800a6c0 <find_volume+0x1f4>
 800a6bc:	230d      	movs	r3, #13
 800a6be:	e181      	b.n	800a9c4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	3338      	adds	r3, #56	; 0x38
 800a6c4:	3316      	adds	r3, #22
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe f88a 	bl	80087e0 <ld_word>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a6d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <find_volume+0x218>
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d8:	3338      	adds	r3, #56	; 0x38
 800a6da:	3324      	adds	r3, #36	; 0x24
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fe f897 	bl	8008810 <ld_dword>
 800a6e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6e8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ec:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f6:	789b      	ldrb	r3, [r3, #2]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d005      	beq.n	800a708 <find_volume+0x23c>
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	789b      	ldrb	r3, [r3, #2]
 800a700:	2b02      	cmp	r3, #2
 800a702:	d001      	beq.n	800a708 <find_volume+0x23c>
 800a704:	230d      	movs	r3, #13
 800a706:	e15d      	b.n	800a9c4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70a:	789b      	ldrb	r3, [r3, #2]
 800a70c:	461a      	mov	r2, r3
 800a70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a710:	fb02 f303 	mul.w	r3, r2, r3
 800a714:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a720:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a724:	895b      	ldrh	r3, [r3, #10]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d008      	beq.n	800a73c <find_volume+0x270>
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	895b      	ldrh	r3, [r3, #10]
 800a72e:	461a      	mov	r2, r3
 800a730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a732:	895b      	ldrh	r3, [r3, #10]
 800a734:	3b01      	subs	r3, #1
 800a736:	4013      	ands	r3, r2
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d001      	beq.n	800a740 <find_volume+0x274>
 800a73c:	230d      	movs	r3, #13
 800a73e:	e141      	b.n	800a9c4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a742:	3338      	adds	r3, #56	; 0x38
 800a744:	3311      	adds	r3, #17
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe f84a 	bl	80087e0 <ld_word>
 800a74c:	4603      	mov	r3, r0
 800a74e:	461a      	mov	r2, r3
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a756:	891b      	ldrh	r3, [r3, #8]
 800a758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a75a:	8992      	ldrh	r2, [r2, #12]
 800a75c:	0952      	lsrs	r2, r2, #5
 800a75e:	b292      	uxth	r2, r2
 800a760:	fbb3 f1f2 	udiv	r1, r3, r2
 800a764:	fb02 f201 	mul.w	r2, r2, r1
 800a768:	1a9b      	subs	r3, r3, r2
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <find_volume+0x2a8>
 800a770:	230d      	movs	r3, #13
 800a772:	e127      	b.n	800a9c4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a776:	3338      	adds	r3, #56	; 0x38
 800a778:	3313      	adds	r3, #19
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fe f830 	bl	80087e0 <ld_word>
 800a780:	4603      	mov	r3, r0
 800a782:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a786:	2b00      	cmp	r3, #0
 800a788:	d106      	bne.n	800a798 <find_volume+0x2cc>
 800a78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78c:	3338      	adds	r3, #56	; 0x38
 800a78e:	3320      	adds	r3, #32
 800a790:	4618      	mov	r0, r3
 800a792:	f7fe f83d 	bl	8008810 <ld_dword>
 800a796:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	3338      	adds	r3, #56	; 0x38
 800a79c:	330e      	adds	r3, #14
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe f81e 	bl	80087e0 <ld_word>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a7a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d104      	bne.n	800a7b8 <find_volume+0x2ec>
 800a7ae:	230d      	movs	r3, #13
 800a7b0:	e108      	b.n	800a9c4 <find_volume+0x4f8>
 800a7b2:	bf00      	nop
 800a7b4:	200004bc 	.word	0x200004bc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a7b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7bc:	4413      	add	r3, r2
 800a7be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7c0:	8911      	ldrh	r1, [r2, #8]
 800a7c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7c4:	8992      	ldrh	r2, [r2, #12]
 800a7c6:	0952      	lsrs	r2, r2, #5
 800a7c8:	b292      	uxth	r2, r2
 800a7ca:	fbb1 f2f2 	udiv	r2, r1, r2
 800a7ce:	b292      	uxth	r2, r2
 800a7d0:	4413      	add	r3, r2
 800a7d2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a7d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d201      	bcs.n	800a7e0 <find_volume+0x314>
 800a7dc:	230d      	movs	r3, #13
 800a7de:	e0f1      	b.n	800a9c4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a7e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7e8:	8952      	ldrh	r2, [r2, #10]
 800a7ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <find_volume+0x32e>
 800a7f6:	230d      	movs	r3, #13
 800a7f8:	e0e4      	b.n	800a9c4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a806:	4293      	cmp	r3, r2
 800a808:	d802      	bhi.n	800a810 <find_volume+0x344>
 800a80a:	2302      	movs	r3, #2
 800a80c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a816:	4293      	cmp	r3, r2
 800a818:	d802      	bhi.n	800a820 <find_volume+0x354>
 800a81a:	2301      	movs	r3, #1
 800a81c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	1c9a      	adds	r2, r3, #2
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a82c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a82e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a832:	441a      	add	r2, r3
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a838:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	441a      	add	r2, r3
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a842:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a846:	2b03      	cmp	r3, #3
 800a848:	d11e      	bne.n	800a888 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84c:	3338      	adds	r3, #56	; 0x38
 800a84e:	332a      	adds	r3, #42	; 0x2a
 800a850:	4618      	mov	r0, r3
 800a852:	f7fd ffc5 	bl	80087e0 <ld_word>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d001      	beq.n	800a860 <find_volume+0x394>
 800a85c:	230d      	movs	r3, #13
 800a85e:	e0b1      	b.n	800a9c4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a862:	891b      	ldrh	r3, [r3, #8]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d001      	beq.n	800a86c <find_volume+0x3a0>
 800a868:	230d      	movs	r3, #13
 800a86a:	e0ab      	b.n	800a9c4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86e:	3338      	adds	r3, #56	; 0x38
 800a870:	332c      	adds	r3, #44	; 0x2c
 800a872:	4618      	mov	r0, r3
 800a874:	f7fd ffcc 	bl	8008810 <ld_dword>
 800a878:	4602      	mov	r2, r0
 800a87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	647b      	str	r3, [r7, #68]	; 0x44
 800a886:	e01f      	b.n	800a8c8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88a:	891b      	ldrh	r3, [r3, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d101      	bne.n	800a894 <find_volume+0x3c8>
 800a890:	230d      	movs	r3, #13
 800a892:	e097      	b.n	800a9c4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a89a:	441a      	add	r2, r3
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a8a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d103      	bne.n	800a8b0 <find_volume+0x3e4>
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	69db      	ldr	r3, [r3, #28]
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	e00a      	b.n	800a8c6 <find_volume+0x3fa>
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b2:	69da      	ldr	r2, [r3, #28]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	4413      	add	r3, r2
 800a8ba:	085a      	lsrs	r2, r3, #1
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a8c6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ca:	6a1a      	ldr	r2, [r3, #32]
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ce:	899b      	ldrh	r3, [r3, #12]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8d4:	440b      	add	r3, r1
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8da:	8989      	ldrh	r1, [r1, #12]
 800a8dc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d201      	bcs.n	800a8e8 <find_volume+0x41c>
 800a8e4:	230d      	movs	r3, #13
 800a8e6:	e06d      	b.n	800a9c4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ee:	619a      	str	r2, [r3, #24]
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	699a      	ldr	r2, [r3, #24]
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fa:	2280      	movs	r2, #128	; 0x80
 800a8fc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a8fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a902:	2b03      	cmp	r3, #3
 800a904:	d149      	bne.n	800a99a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	3338      	adds	r3, #56	; 0x38
 800a90a:	3330      	adds	r3, #48	; 0x30
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fd ff67 	bl	80087e0 <ld_word>
 800a912:	4603      	mov	r3, r0
 800a914:	2b01      	cmp	r3, #1
 800a916:	d140      	bne.n	800a99a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a91a:	3301      	adds	r3, #1
 800a91c:	4619      	mov	r1, r3
 800a91e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a920:	f7fe fa0e 	bl	8008d40 <move_window>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d137      	bne.n	800a99a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	2200      	movs	r2, #0
 800a92e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a932:	3338      	adds	r3, #56	; 0x38
 800a934:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fd ff51 	bl	80087e0 <ld_word>
 800a93e:	4603      	mov	r3, r0
 800a940:	461a      	mov	r2, r3
 800a942:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a946:	429a      	cmp	r2, r3
 800a948:	d127      	bne.n	800a99a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	3338      	adds	r3, #56	; 0x38
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fd ff5e 	bl	8008810 <ld_dword>
 800a954:	4602      	mov	r2, r0
 800a956:	4b1d      	ldr	r3, [pc, #116]	; (800a9cc <find_volume+0x500>)
 800a958:	429a      	cmp	r2, r3
 800a95a:	d11e      	bne.n	800a99a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	3338      	adds	r3, #56	; 0x38
 800a960:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a964:	4618      	mov	r0, r3
 800a966:	f7fd ff53 	bl	8008810 <ld_dword>
 800a96a:	4602      	mov	r2, r0
 800a96c:	4b18      	ldr	r3, [pc, #96]	; (800a9d0 <find_volume+0x504>)
 800a96e:	429a      	cmp	r2, r3
 800a970:	d113      	bne.n	800a99a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a974:	3338      	adds	r3, #56	; 0x38
 800a976:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fd ff48 	bl	8008810 <ld_dword>
 800a980:	4602      	mov	r2, r0
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a988:	3338      	adds	r3, #56	; 0x38
 800a98a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fd ff3e 	bl	8008810 <ld_dword>
 800a994:	4602      	mov	r2, r0
 800a996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a998:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a9a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a9a2:	4b0c      	ldr	r3, [pc, #48]	; (800a9d4 <find_volume+0x508>)
 800a9a4:	881b      	ldrh	r3, [r3, #0]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <find_volume+0x508>)
 800a9ac:	801a      	strh	r2, [r3, #0]
 800a9ae:	4b09      	ldr	r3, [pc, #36]	; (800a9d4 <find_volume+0x508>)
 800a9b0:	881a      	ldrh	r2, [r3, #0]
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	4a07      	ldr	r2, [pc, #28]	; (800a9d8 <find_volume+0x50c>)
 800a9ba:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a9bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9be:	f7fe f957 	bl	8008c70 <clear_lock>
#endif
	return FR_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3758      	adds	r7, #88	; 0x58
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	41615252 	.word	0x41615252
 800a9d0:	61417272 	.word	0x61417272
 800a9d4:	200004c0 	.word	0x200004c0
 800a9d8:	200004e4 	.word	0x200004e4

0800a9dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a9e6:	2309      	movs	r3, #9
 800a9e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d01c      	beq.n	800aa2a <validate+0x4e>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d018      	beq.n	800aa2a <validate+0x4e>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d013      	beq.n	800aa2a <validate+0x4e>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	889a      	ldrh	r2, [r3, #4]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	88db      	ldrh	r3, [r3, #6]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d10c      	bne.n	800aa2a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	785b      	ldrb	r3, [r3, #1]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fd fe44 	bl	80086a4 <disk_status>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <validate+0x4e>
			res = FR_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d102      	bne.n	800aa36 <validate+0x5a>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	e000      	b.n	800aa38 <validate+0x5c>
 800aa36:	2300      	movs	r3, #0
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	6013      	str	r3, [r2, #0]
	return res;
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
	...

0800aa48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b088      	sub	sp, #32
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	4613      	mov	r3, r2
 800aa54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aa5a:	f107 0310 	add.w	r3, r7, #16
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7ff fc9a 	bl	800a398 <get_ldnumber>
 800aa64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	da01      	bge.n	800aa70 <f_mount+0x28>
 800aa6c:	230b      	movs	r3, #11
 800aa6e:	e02b      	b.n	800aac8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aa70:	4a17      	ldr	r2, [pc, #92]	; (800aad0 <f_mount+0x88>)
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d005      	beq.n	800aa8c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800aa80:	69b8      	ldr	r0, [r7, #24]
 800aa82:	f7fe f8f5 	bl	8008c70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	490d      	ldr	r1, [pc, #52]	; (800aad0 <f_mount+0x88>)
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <f_mount+0x66>
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d001      	beq.n	800aab2 <f_mount+0x6a>
 800aaae:	2300      	movs	r3, #0
 800aab0:	e00a      	b.n	800aac8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800aab2:	f107 010c 	add.w	r1, r7, #12
 800aab6:	f107 0308 	add.w	r3, r7, #8
 800aaba:	2200      	movs	r2, #0
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7ff fd05 	bl	800a4cc <find_volume>
 800aac2:	4603      	mov	r3, r0
 800aac4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	200004bc 	.word	0x200004bc

0800aad4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b09a      	sub	sp, #104	; 0x68
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	4613      	mov	r3, r2
 800aae0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <f_open+0x18>
 800aae8:	2309      	movs	r3, #9
 800aaea:	e1bb      	b.n	800ae64 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aaf2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800aaf4:	79fa      	ldrb	r2, [r7, #7]
 800aaf6:	f107 0114 	add.w	r1, r7, #20
 800aafa:	f107 0308 	add.w	r3, r7, #8
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff fce4 	bl	800a4cc <find_volume>
 800ab04:	4603      	mov	r3, r0
 800ab06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ab0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f040 819f 	bne.w	800ae52 <f_open+0x37e>
		dj.obj.fs = fs;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	f107 0318 	add.w	r3, r7, #24
 800ab1e:	4611      	mov	r1, r2
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff fbc3 	bl	800a2ac <follow_path>
 800ab26:	4603      	mov	r3, r0
 800ab28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ab2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d11a      	bne.n	800ab6a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ab34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ab38:	b25b      	sxtb	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	da03      	bge.n	800ab46 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ab3e:	2306      	movs	r3, #6
 800ab40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ab44:	e011      	b.n	800ab6a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab46:	79fb      	ldrb	r3, [r7, #7]
 800ab48:	f023 0301 	bic.w	r3, r3, #1
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	bf14      	ite	ne
 800ab50:	2301      	movne	r3, #1
 800ab52:	2300      	moveq	r3, #0
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	461a      	mov	r2, r3
 800ab58:	f107 0318 	add.w	r3, r7, #24
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fd ff3e 	bl	80089e0 <chk_lock>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	f003 031c 	and.w	r3, r3, #28
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d07f      	beq.n	800ac74 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ab74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d017      	beq.n	800abac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ab7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab80:	2b04      	cmp	r3, #4
 800ab82:	d10e      	bne.n	800aba2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ab84:	f7fd ff88 	bl	8008a98 <enq_lock>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d006      	beq.n	800ab9c <f_open+0xc8>
 800ab8e:	f107 0318 	add.w	r3, r7, #24
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7ff f8da 	bl	8009d4c <dir_register>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	e000      	b.n	800ab9e <f_open+0xca>
 800ab9c:	2312      	movs	r3, #18
 800ab9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aba2:	79fb      	ldrb	r3, [r7, #7]
 800aba4:	f043 0308 	orr.w	r3, r3, #8
 800aba8:	71fb      	strb	r3, [r7, #7]
 800abaa:	e010      	b.n	800abce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800abac:	7fbb      	ldrb	r3, [r7, #30]
 800abae:	f003 0311 	and.w	r3, r3, #17
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <f_open+0xea>
					res = FR_DENIED;
 800abb6:	2307      	movs	r3, #7
 800abb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800abbc:	e007      	b.n	800abce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800abbe:	79fb      	ldrb	r3, [r7, #7]
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <f_open+0xfa>
 800abc8:	2308      	movs	r3, #8
 800abca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800abce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d168      	bne.n	800aca8 <f_open+0x1d4>
 800abd6:	79fb      	ldrb	r3, [r7, #7]
 800abd8:	f003 0308 	and.w	r3, r3, #8
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d063      	beq.n	800aca8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800abe0:	f7fd fa58 	bl	8008094 <get_fattime>
 800abe4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800abe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe8:	330e      	adds	r3, #14
 800abea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abec:	4618      	mov	r0, r3
 800abee:	f7fd fe4d 	bl	800888c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800abf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf4:	3316      	adds	r3, #22
 800abf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fd fe47 	bl	800888c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800abfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac00:	330b      	adds	r3, #11
 800ac02:	2220      	movs	r2, #32
 800ac04:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fe fe16 	bl	800983e <ld_clust>
 800ac12:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac18:	2200      	movs	r2, #0
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fe fe2e 	bl	800987c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ac20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac22:	331c      	adds	r3, #28
 800ac24:	2100      	movs	r1, #0
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fd fe30 	bl	800888c <st_dword>
					fs->wflag = 1;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ac32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d037      	beq.n	800aca8 <f_open+0x1d4>
						dw = fs->winsect;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac3c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ac3e:	f107 0318 	add.w	r3, r7, #24
 800ac42:	2200      	movs	r2, #0
 800ac44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fe fb1e 	bl	8009288 <remove_chain>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ac52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d126      	bne.n	800aca8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe f86e 	bl	8008d40 <move_window>
 800ac64:	4603      	mov	r3, r0
 800ac66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac6e:	3a01      	subs	r2, #1
 800ac70:	615a      	str	r2, [r3, #20]
 800ac72:	e019      	b.n	800aca8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ac74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d115      	bne.n	800aca8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ac7c:	7fbb      	ldrb	r3, [r7, #30]
 800ac7e:	f003 0310 	and.w	r3, r3, #16
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <f_open+0x1ba>
					res = FR_NO_FILE;
 800ac86:	2304      	movs	r3, #4
 800ac88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ac8c:	e00c      	b.n	800aca8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ac8e:	79fb      	ldrb	r3, [r7, #7]
 800ac90:	f003 0302 	and.w	r3, r3, #2
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d007      	beq.n	800aca8 <f_open+0x1d4>
 800ac98:	7fbb      	ldrb	r3, [r7, #30]
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <f_open+0x1d4>
						res = FR_DENIED;
 800aca2:	2307      	movs	r3, #7
 800aca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800aca8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800acac:	2b00      	cmp	r3, #0
 800acae:	d128      	bne.n	800ad02 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800acb0:	79fb      	ldrb	r3, [r7, #7]
 800acb2:	f003 0308 	and.w	r3, r3, #8
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800acba:	79fb      	ldrb	r3, [r7, #7]
 800acbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acc0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800acca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	f023 0301 	bic.w	r3, r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	bf14      	ite	ne
 800acda:	2301      	movne	r3, #1
 800acdc:	2300      	moveq	r3, #0
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	461a      	mov	r2, r3
 800ace2:	f107 0318 	add.w	r3, r7, #24
 800ace6:	4611      	mov	r1, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fd fef7 	bl	8008adc <inc_lock>
 800acee:	4602      	mov	r2, r0
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d102      	bne.n	800ad02 <f_open+0x22e>
 800acfc:	2302      	movs	r3, #2
 800acfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ad02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f040 80a3 	bne.w	800ae52 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad10:	4611      	mov	r1, r2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe fd93 	bl	800983e <ld_clust>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	331c      	adds	r3, #28
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fd fd74 	bl	8008810 <ld_dword>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	88da      	ldrh	r2, [r3, #6]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	79fa      	ldrb	r2, [r7, #7]
 800ad46:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3330      	adds	r3, #48	; 0x30
 800ad5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ad62:	2100      	movs	r1, #0
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fd fdde 	bl	8008926 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ad6a:	79fb      	ldrb	r3, [r7, #7]
 800ad6c:	f003 0320 	and.w	r3, r3, #32
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d06e      	beq.n	800ae52 <f_open+0x37e>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d06a      	beq.n	800ae52 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	68da      	ldr	r2, [r3, #12]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	895b      	ldrh	r3, [r3, #10]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	899b      	ldrh	r3, [r3, #12]
 800ad8e:	fb03 f302 	mul.w	r3, r3, r2
 800ad92:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ada0:	e016      	b.n	800add0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fe f887 	bl	8008eba <get_fat>
 800adac:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800adae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d802      	bhi.n	800adba <f_open+0x2e6>
 800adb4:	2302      	movs	r3, #2
 800adb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800adba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc0:	d102      	bne.n	800adc8 <f_open+0x2f4>
 800adc2:	2301      	movs	r3, #1
 800adc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800adc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800adca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800add0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800add4:	2b00      	cmp	r3, #0
 800add6:	d103      	bne.n	800ade0 <f_open+0x30c>
 800add8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800adda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800addc:	429a      	cmp	r2, r3
 800adde:	d8e0      	bhi.n	800ada2 <f_open+0x2ce>
				}
				fp->clust = clst;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ade4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ade6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800adea:	2b00      	cmp	r3, #0
 800adec:	d131      	bne.n	800ae52 <f_open+0x37e>
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	899b      	ldrh	r3, [r3, #12]
 800adf2:	461a      	mov	r2, r3
 800adf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adf6:	fbb3 f1f2 	udiv	r1, r3, r2
 800adfa:	fb02 f201 	mul.w	r2, r2, r1
 800adfe:	1a9b      	subs	r3, r3, r2
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d026      	beq.n	800ae52 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fe f837 	bl	8008e7c <clust2sect>
 800ae0e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ae10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d103      	bne.n	800ae1e <f_open+0x34a>
						res = FR_INT_ERR;
 800ae16:	2302      	movs	r3, #2
 800ae18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ae1c:	e019      	b.n	800ae52 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	899b      	ldrh	r3, [r3, #12]
 800ae22:	461a      	mov	r2, r3
 800ae24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae26:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae2c:	441a      	add	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	7858      	ldrb	r0, [r3, #1]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6a1a      	ldr	r2, [r3, #32]
 800ae40:	2301      	movs	r3, #1
 800ae42:	f7fd fc6f 	bl	8008724 <disk_read>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <f_open+0x37e>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ae52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d002      	beq.n	800ae60 <f_open+0x38c>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ae60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3768      	adds	r7, #104	; 0x68
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08c      	sub	sp, #48	; 0x30
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	2200      	movs	r2, #0
 800ae82:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f107 0210 	add.w	r2, r7, #16
 800ae8a:	4611      	mov	r1, r2
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7ff fda5 	bl	800a9dc <validate>
 800ae92:	4603      	mov	r3, r0
 800ae94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ae98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d107      	bne.n	800aeb0 <f_write+0x44>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	7d5b      	ldrb	r3, [r3, #21]
 800aea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <f_write+0x4a>
 800aeb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aeb4:	e16a      	b.n	800b18c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	7d1b      	ldrb	r3, [r3, #20]
 800aeba:	f003 0302 	and.w	r3, r3, #2
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <f_write+0x5a>
 800aec2:	2307      	movs	r3, #7
 800aec4:	e162      	b.n	800b18c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	699a      	ldr	r2, [r3, #24]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	441a      	add	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	f080 814c 	bcs.w	800b170 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	43db      	mvns	r3, r3
 800aede:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aee0:	e146      	b.n	800b170 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	8992      	ldrh	r2, [r2, #12]
 800aeea:	fbb3 f1f2 	udiv	r1, r3, r2
 800aeee:	fb02 f201 	mul.w	r2, r2, r1
 800aef2:	1a9b      	subs	r3, r3, r2
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f040 80f1 	bne.w	800b0dc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	699b      	ldr	r3, [r3, #24]
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	8992      	ldrh	r2, [r2, #12]
 800af02:	fbb3 f3f2 	udiv	r3, r3, r2
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	8952      	ldrh	r2, [r2, #10]
 800af0a:	3a01      	subs	r2, #1
 800af0c:	4013      	ands	r3, r2
 800af0e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d143      	bne.n	800af9e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10c      	bne.n	800af38 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	2b00      	cmp	r3, #0
 800af28:	d11a      	bne.n	800af60 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2100      	movs	r1, #0
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fe fa0f 	bl	8009352 <create_chain>
 800af34:	62b8      	str	r0, [r7, #40]	; 0x28
 800af36:	e013      	b.n	800af60 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d007      	beq.n	800af50 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	4619      	mov	r1, r3
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f7fe fa9b 	bl	8009482 <clmt_clust>
 800af4c:	62b8      	str	r0, [r7, #40]	; 0x28
 800af4e:	e007      	b.n	800af60 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	4619      	mov	r1, r3
 800af58:	4610      	mov	r0, r2
 800af5a:	f7fe f9fa 	bl	8009352 <create_chain>
 800af5e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 8109 	beq.w	800b17a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800af68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d104      	bne.n	800af78 <f_write+0x10c>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2202      	movs	r2, #2
 800af72:	755a      	strb	r2, [r3, #21]
 800af74:	2302      	movs	r3, #2
 800af76:	e109      	b.n	800b18c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7e:	d104      	bne.n	800af8a <f_write+0x11e>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2201      	movs	r2, #1
 800af84:	755a      	strb	r2, [r3, #21]
 800af86:	2301      	movs	r3, #1
 800af88:	e100      	b.n	800b18c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af8e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <f_write+0x132>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af9c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	7d1b      	ldrb	r3, [r3, #20]
 800afa2:	b25b      	sxtb	r3, r3
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	da18      	bge.n	800afda <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	7858      	ldrb	r0, [r3, #1]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6a1a      	ldr	r2, [r3, #32]
 800afb6:	2301      	movs	r3, #1
 800afb8:	f7fd fbd4 	bl	8008764 <disk_write>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d004      	beq.n	800afcc <f_write+0x160>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2201      	movs	r2, #1
 800afc6:	755a      	strb	r2, [r3, #21]
 800afc8:	2301      	movs	r3, #1
 800afca:	e0df      	b.n	800b18c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	7d1b      	ldrb	r3, [r3, #20]
 800afd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	69db      	ldr	r3, [r3, #28]
 800afe0:	4619      	mov	r1, r3
 800afe2:	4610      	mov	r0, r2
 800afe4:	f7fd ff4a 	bl	8008e7c <clust2sect>
 800afe8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d104      	bne.n	800affa <f_write+0x18e>
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2202      	movs	r2, #2
 800aff4:	755a      	strb	r2, [r3, #21]
 800aff6:	2302      	movs	r3, #2
 800aff8:	e0c8      	b.n	800b18c <f_write+0x320>
			sect += csect;
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	4413      	add	r3, r2
 800b000:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	899b      	ldrh	r3, [r3, #12]
 800b006:	461a      	mov	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b00e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d043      	beq.n	800b09e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	4413      	add	r3, r2
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	8952      	ldrh	r2, [r2, #10]
 800b020:	4293      	cmp	r3, r2
 800b022:	d905      	bls.n	800b030 <f_write+0x1c4>
					cc = fs->csize - csect;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	895b      	ldrh	r3, [r3, #10]
 800b028:	461a      	mov	r2, r3
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	7858      	ldrb	r0, [r3, #1]
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	69f9      	ldr	r1, [r7, #28]
 800b03a:	f7fd fb93 	bl	8008764 <disk_write>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d004      	beq.n	800b04e <f_write+0x1e2>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2201      	movs	r2, #1
 800b048:	755a      	strb	r2, [r3, #21]
 800b04a:	2301      	movs	r3, #1
 800b04c:	e09e      	b.n	800b18c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6a1a      	ldr	r2, [r3, #32]
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	6a3a      	ldr	r2, [r7, #32]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d918      	bls.n	800b08e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6a1a      	ldr	r2, [r3, #32]
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	8992      	ldrh	r2, [r2, #12]
 800b06e:	fb02 f303 	mul.w	r3, r2, r3
 800b072:	69fa      	ldr	r2, [r7, #28]
 800b074:	18d1      	adds	r1, r2, r3
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	899b      	ldrh	r3, [r3, #12]
 800b07a:	461a      	mov	r2, r3
 800b07c:	f7fd fc32 	bl	80088e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	7d1b      	ldrb	r3, [r3, #20]
 800b084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	899b      	ldrh	r3, [r3, #12]
 800b092:	461a      	mov	r2, r3
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	fb02 f303 	mul.w	r3, r2, r3
 800b09a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b09c:	e04b      	b.n	800b136 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	697a      	ldr	r2, [r7, #20]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d016      	beq.n	800b0d6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	699a      	ldr	r2, [r3, #24]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d210      	bcs.n	800b0d6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	7858      	ldrb	r0, [r3, #1]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0be:	2301      	movs	r3, #1
 800b0c0:	697a      	ldr	r2, [r7, #20]
 800b0c2:	f7fd fb2f 	bl	8008724 <disk_read>
 800b0c6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d004      	beq.n	800b0d6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	755a      	strb	r2, [r3, #21]
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e05a      	b.n	800b18c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	899b      	ldrh	r3, [r3, #12]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	8992      	ldrh	r2, [r2, #12]
 800b0ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0ee:	fb02 f201 	mul.w	r2, r2, r1
 800b0f2:	1a9b      	subs	r3, r3, r2
 800b0f4:	1ac3      	subs	r3, r0, r3
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d901      	bls.n	800b104 <f_write+0x298>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	8992      	ldrh	r2, [r2, #12]
 800b112:	fbb3 f0f2 	udiv	r0, r3, r2
 800b116:	fb02 f200 	mul.w	r2, r2, r0
 800b11a:	1a9b      	subs	r3, r3, r2
 800b11c:	440b      	add	r3, r1
 800b11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b120:	69f9      	ldr	r1, [r7, #28]
 800b122:	4618      	mov	r0, r3
 800b124:	f7fd fbde 	bl	80088e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	7d1b      	ldrb	r3, [r3, #20]
 800b12c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b130:	b2da      	uxtb	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b136:	69fa      	ldr	r2, [r7, #28]
 800b138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13a:	4413      	add	r3, r2
 800b13c:	61fb      	str	r3, [r7, #28]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	699a      	ldr	r2, [r3, #24]
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	441a      	add	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	619a      	str	r2, [r3, #24]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	68da      	ldr	r2, [r3, #12]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	429a      	cmp	r2, r3
 800b154:	bf38      	it	cc
 800b156:	461a      	movcc	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	60da      	str	r2, [r3, #12]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	441a      	add	r2, r3
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	601a      	str	r2, [r3, #0]
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	f47f aeb5 	bne.w	800aee2 <f_write+0x76>
 800b178:	e000      	b.n	800b17c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b17a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	7d1b      	ldrb	r3, [r3, #20]
 800b180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b184:	b2da      	uxtb	r2, r3
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3730      	adds	r7, #48	; 0x30
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f107 0208 	add.w	r2, r7, #8
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7ff fc19 	bl	800a9dc <validate>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d168      	bne.n	800b286 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	7d1b      	ldrb	r3, [r3, #20]
 800b1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d062      	beq.n	800b286 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	7d1b      	ldrb	r3, [r3, #20]
 800b1c4:	b25b      	sxtb	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	da15      	bge.n	800b1f6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	7858      	ldrb	r0, [r3, #1]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a1a      	ldr	r2, [r3, #32]
 800b1d8:	2301      	movs	r3, #1
 800b1da:	f7fd fac3 	bl	8008764 <disk_write>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d001      	beq.n	800b1e8 <f_sync+0x54>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e04f      	b.n	800b288 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	7d1b      	ldrb	r3, [r3, #20]
 800b1ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b1f6:	f7fc ff4d 	bl	8008094 <get_fattime>
 800b1fa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	4619      	mov	r1, r3
 800b204:	4610      	mov	r0, r2
 800b206:	f7fd fd9b 	bl	8008d40 <move_window>
 800b20a:	4603      	mov	r3, r0
 800b20c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d138      	bne.n	800b286 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b218:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	330b      	adds	r3, #11
 800b21e:	781a      	ldrb	r2, [r3, #0]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	330b      	adds	r3, #11
 800b224:	f042 0220 	orr.w	r2, r2, #32
 800b228:	b2d2      	uxtb	r2, r2
 800b22a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6818      	ldr	r0, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	461a      	mov	r2, r3
 800b236:	68f9      	ldr	r1, [r7, #12]
 800b238:	f7fe fb20 	bl	800987c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f103 021c 	add.w	r2, r3, #28
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	4619      	mov	r1, r3
 800b248:	4610      	mov	r0, r2
 800b24a:	f7fd fb1f 	bl	800888c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3316      	adds	r3, #22
 800b252:	6939      	ldr	r1, [r7, #16]
 800b254:	4618      	mov	r0, r3
 800b256:	f7fd fb19 	bl	800888c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3312      	adds	r3, #18
 800b25e:	2100      	movs	r1, #0
 800b260:	4618      	mov	r0, r3
 800b262:	f7fd faf8 	bl	8008856 <st_word>
					fs->wflag = 1;
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	2201      	movs	r2, #1
 800b26a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fd fd94 	bl	8008d9c <sync_fs>
 800b274:	4603      	mov	r3, r0
 800b276:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	7d1b      	ldrb	r3, [r3, #20]
 800b27c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b280:	b2da      	uxtb	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b286:	7dfb      	ldrb	r3, [r7, #23]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff ff7b 	bl	800b194 <f_sync>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d118      	bne.n	800b2da <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f107 0208 	add.w	r2, r7, #8
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7ff fb93 	bl	800a9dc <validate>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10c      	bne.n	800b2da <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fd fc97 	bl	8008bf8 <dec_lock>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d102      	bne.n	800b2da <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b2f0:	78fb      	ldrb	r3, [r7, #3]
 800b2f2:	2b0a      	cmp	r3, #10
 800b2f4:	d103      	bne.n	800b2fe <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b2f6:	210d      	movs	r1, #13
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f7ff fff3 	bl	800b2e4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	db25      	blt.n	800b356 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	1c5a      	adds	r2, r3, #1
 800b30e:	60fa      	str	r2, [r7, #12]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	4413      	add	r3, r2
 800b314:	78fa      	ldrb	r2, [r7, #3]
 800b316:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2b3c      	cmp	r3, #60	; 0x3c
 800b31c:	dd12      	ble.n	800b344 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6818      	ldr	r0, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f103 010c 	add.w	r1, r3, #12
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	f107 0308 	add.w	r3, r7, #8
 800b32e:	f7ff fd9d 	bl	800ae6c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	429a      	cmp	r2, r3
 800b338:	d101      	bne.n	800b33e <putc_bfd+0x5a>
 800b33a:	2300      	movs	r3, #0
 800b33c:	e001      	b.n	800b342 <putc_bfd+0x5e>
 800b33e:	f04f 33ff 	mov.w	r3, #4294967295
 800b342:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	1c5a      	adds	r2, r3, #1
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	609a      	str	r2, [r3, #8]
 800b354:	e000      	b.n	800b358 <putc_bfd+0x74>
	if (i < 0) return;
 800b356:	bf00      	nop
}
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b084      	sub	sp, #16
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	db17      	blt.n	800b39e <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6818      	ldr	r0, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f103 010c 	add.w	r1, r3, #12
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	461a      	mov	r2, r3
 800b37e:	f107 030c 	add.w	r3, r7, #12
 800b382:	f7ff fd73 	bl	800ae6c <f_write>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d108      	bne.n	800b39e <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	461a      	mov	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	429a      	cmp	r2, r3
 800b396:	d102      	bne.n	800b39e <putc_flush+0x40>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	e001      	b.n	800b3a2 <putc_flush+0x44>
	return EOF;
 800b39e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b083      	sub	sp, #12
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
 800b3b2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	605a      	str	r2, [r3, #4]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685a      	ldr	r2, [r3, #4]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	609a      	str	r2, [r3, #8]
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b3d4:	b40e      	push	{r1, r2, r3}
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b0a7      	sub	sp, #156	; 0x9c
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b3de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3e2:	6879      	ldr	r1, [r7, #4]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7ff ffe0 	bl	800b3aa <putc_init>

	va_start(arp, fmt);
 800b3ea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b3ee:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b3f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b400:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 81f4 	beq.w	800b7f2 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800b40a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b40e:	2b25      	cmp	r3, #37	; 0x25
 800b410:	d008      	beq.n	800b424 <f_printf+0x50>
			putc_bfd(&pb, c);
 800b412:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b41a:	4611      	mov	r1, r2
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7ff ff61 	bl	800b2e4 <putc_bfd>
			continue;
 800b422:	e1e5      	b.n	800b7f0 <f_printf+0x41c>
		}
		w = f = 0;
 800b424:	2300      	movs	r3, #0
 800b426:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b42a:	2300      	movs	r3, #0
 800b42c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b430:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b440:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b444:	2b30      	cmp	r3, #48	; 0x30
 800b446:	d10b      	bne.n	800b460 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b448:	2301      	movs	r3, #1
 800b44a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b44e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b452:	1c5a      	adds	r2, r3, #1
 800b454:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b45e:	e024      	b.n	800b4aa <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b460:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b464:	2b2d      	cmp	r3, #45	; 0x2d
 800b466:	d120      	bne.n	800b4aa <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b468:	2302      	movs	r3, #2
 800b46a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b46e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b47e:	e014      	b.n	800b4aa <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b480:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b484:	4613      	mov	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4413      	add	r3, r2
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	461a      	mov	r2, r3
 800b48e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b492:	4413      	add	r3, r2
 800b494:	3b30      	subs	r3, #48	; 0x30
 800b496:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b49a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b49e:	1c5a      	adds	r2, r3, #1
 800b4a0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b4aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b4ae:	2b2f      	cmp	r3, #47	; 0x2f
 800b4b0:	d903      	bls.n	800b4ba <f_printf+0xe6>
 800b4b2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b4b6:	2b39      	cmp	r3, #57	; 0x39
 800b4b8:	d9e2      	bls.n	800b480 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b4ba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b4be:	2b6c      	cmp	r3, #108	; 0x6c
 800b4c0:	d003      	beq.n	800b4ca <f_printf+0xf6>
 800b4c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b4c6:	2b4c      	cmp	r3, #76	; 0x4c
 800b4c8:	d10d      	bne.n	800b4e6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b4ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b4ce:	f043 0304 	orr.w	r3, r3, #4
 800b4d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b4d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b4e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 8183 	beq.w	800b7f6 <f_printf+0x422>
		d = c;
 800b4f0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b4f4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b4f8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b4fc:	2b60      	cmp	r3, #96	; 0x60
 800b4fe:	d908      	bls.n	800b512 <f_printf+0x13e>
 800b500:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b504:	2b7a      	cmp	r3, #122	; 0x7a
 800b506:	d804      	bhi.n	800b512 <f_printf+0x13e>
 800b508:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b50c:	3b20      	subs	r3, #32
 800b50e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b512:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b516:	3b42      	subs	r3, #66	; 0x42
 800b518:	2b16      	cmp	r3, #22
 800b51a:	f200 8098 	bhi.w	800b64e <f_printf+0x27a>
 800b51e:	a201      	add	r2, pc, #4	; (adr r2, 800b524 <f_printf+0x150>)
 800b520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b524:	0800b62f 	.word	0x0800b62f
 800b528:	0800b617 	.word	0x0800b617
 800b52c:	0800b63f 	.word	0x0800b63f
 800b530:	0800b64f 	.word	0x0800b64f
 800b534:	0800b64f 	.word	0x0800b64f
 800b538:	0800b64f 	.word	0x0800b64f
 800b53c:	0800b64f 	.word	0x0800b64f
 800b540:	0800b64f 	.word	0x0800b64f
 800b544:	0800b64f 	.word	0x0800b64f
 800b548:	0800b64f 	.word	0x0800b64f
 800b54c:	0800b64f 	.word	0x0800b64f
 800b550:	0800b64f 	.word	0x0800b64f
 800b554:	0800b64f 	.word	0x0800b64f
 800b558:	0800b637 	.word	0x0800b637
 800b55c:	0800b64f 	.word	0x0800b64f
 800b560:	0800b64f 	.word	0x0800b64f
 800b564:	0800b64f 	.word	0x0800b64f
 800b568:	0800b581 	.word	0x0800b581
 800b56c:	0800b64f 	.word	0x0800b64f
 800b570:	0800b63f 	.word	0x0800b63f
 800b574:	0800b64f 	.word	0x0800b64f
 800b578:	0800b64f 	.word	0x0800b64f
 800b57c:	0800b647 	.word	0x0800b647
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b582:	1d1a      	adds	r2, r3, #4
 800b584:	67ba      	str	r2, [r7, #120]	; 0x78
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b58a:	2300      	movs	r3, #0
 800b58c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b590:	e004      	b.n	800b59c <f_printf+0x1c8>
 800b592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b596:	3301      	adds	r3, #1
 800b598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b59c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b59e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5a2:	4413      	add	r3, r2
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1f3      	bne.n	800b592 <f_printf+0x1be>
			if (!(f & 2)) {
 800b5aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d11a      	bne.n	800b5ec <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b5b6:	e005      	b.n	800b5c4 <f_printf+0x1f0>
 800b5b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5bc:	2120      	movs	r1, #32
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7ff fe90 	bl	800b2e4 <putc_bfd>
 800b5c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5c8:	1c5a      	adds	r2, r3, #1
 800b5ca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b5ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d8f0      	bhi.n	800b5b8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b5d6:	e009      	b.n	800b5ec <f_printf+0x218>
 800b5d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b5de:	781a      	ldrb	r2, [r3, #0]
 800b5e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7ff fe7c 	bl	800b2e4 <putc_bfd>
 800b5ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1f1      	bne.n	800b5d8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b5f4:	e005      	b.n	800b602 <f_printf+0x22e>
 800b5f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5fa:	2120      	movs	r1, #32
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7ff fe71 	bl	800b2e4 <putc_bfd>
 800b602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b606:	1c5a      	adds	r2, r3, #1
 800b608:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b60c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b610:	429a      	cmp	r2, r3
 800b612:	d8f0      	bhi.n	800b5f6 <f_printf+0x222>
			continue;
 800b614:	e0ec      	b.n	800b7f0 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b618:	1d1a      	adds	r2, r3, #4
 800b61a:	67ba      	str	r2, [r7, #120]	; 0x78
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f7ff fe5c 	bl	800b2e4 <putc_bfd>
 800b62c:	e0e0      	b.n	800b7f0 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800b62e:	2302      	movs	r3, #2
 800b630:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b634:	e014      	b.n	800b660 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b636:	2308      	movs	r3, #8
 800b638:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b63c:	e010      	b.n	800b660 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b63e:	230a      	movs	r3, #10
 800b640:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b644:	e00c      	b.n	800b660 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b646:	2310      	movs	r3, #16
 800b648:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b64c:	e008      	b.n	800b660 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b64e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b656:	4611      	mov	r1, r2
 800b658:	4618      	mov	r0, r3
 800b65a:	f7ff fe43 	bl	800b2e4 <putc_bfd>
 800b65e:	e0c7      	b.n	800b7f0 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b660:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b664:	f003 0304 	and.w	r3, r3, #4
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d004      	beq.n	800b676 <f_printf+0x2a2>
 800b66c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b66e:	1d1a      	adds	r2, r3, #4
 800b670:	67ba      	str	r2, [r7, #120]	; 0x78
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	e00c      	b.n	800b690 <f_printf+0x2bc>
 800b676:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b67a:	2b44      	cmp	r3, #68	; 0x44
 800b67c:	d104      	bne.n	800b688 <f_printf+0x2b4>
 800b67e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b680:	1d1a      	adds	r2, r3, #4
 800b682:	67ba      	str	r2, [r7, #120]	; 0x78
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	e003      	b.n	800b690 <f_printf+0x2bc>
 800b688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b68a:	1d1a      	adds	r2, r3, #4
 800b68c:	67ba      	str	r2, [r7, #120]	; 0x78
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b694:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b698:	2b44      	cmp	r3, #68	; 0x44
 800b69a:	d10e      	bne.n	800b6ba <f_printf+0x2e6>
 800b69c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	da0a      	bge.n	800b6ba <f_printf+0x2e6>
			v = 0 - v;
 800b6a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6a8:	425b      	negs	r3, r3
 800b6aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b6ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b6b2:	f043 0308 	orr.w	r3, r3, #8
 800b6b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b6c0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b6c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6cc:	fb02 f201 	mul.w	r2, r2, r1
 800b6d0:	1a9b      	subs	r3, r3, r2
 800b6d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b6d6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b6da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b6e6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b6ea:	2b09      	cmp	r3, #9
 800b6ec:	d90b      	bls.n	800b706 <f_printf+0x332>
 800b6ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b6f2:	2b78      	cmp	r3, #120	; 0x78
 800b6f4:	d101      	bne.n	800b6fa <f_printf+0x326>
 800b6f6:	2227      	movs	r2, #39	; 0x27
 800b6f8:	e000      	b.n	800b6fc <f_printf+0x328>
 800b6fa:	2207      	movs	r2, #7
 800b6fc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b700:	4413      	add	r3, r2
 800b702:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b710:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b714:	3230      	adds	r2, #48	; 0x30
 800b716:	b2d2      	uxtb	r2, r2
 800b718:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800b71c:	440b      	add	r3, r1
 800b71e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <f_printf+0x35e>
 800b72a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b72e:	2b1f      	cmp	r3, #31
 800b730:	d9c6      	bls.n	800b6c0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b732:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b736:	f003 0308 	and.w	r3, r3, #8
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00a      	beq.n	800b754 <f_printf+0x380>
 800b73e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b742:	1c5a      	adds	r2, r3, #1
 800b744:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b748:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b74c:	4413      	add	r3, r2
 800b74e:	222d      	movs	r2, #45	; 0x2d
 800b750:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b758:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b75c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b760:	f003 0301 	and.w	r3, r3, #1
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <f_printf+0x398>
 800b768:	2330      	movs	r3, #48	; 0x30
 800b76a:	e000      	b.n	800b76e <f_printf+0x39a>
 800b76c:	2320      	movs	r3, #32
 800b76e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b772:	e007      	b.n	800b784 <f_printf+0x3b0>
 800b774:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b77c:	4611      	mov	r1, r2
 800b77e:	4618      	mov	r0, r3
 800b780:	f7ff fdb0 	bl	800b2e4 <putc_bfd>
 800b784:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b788:	f003 0302 	and.w	r3, r3, #2
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d108      	bne.n	800b7a2 <f_printf+0x3ce>
 800b790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b79a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d8e8      	bhi.n	800b774 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800b7a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b7ac:	f107 020c 	add.w	r2, r7, #12
 800b7b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7b4:	4413      	add	r3, r2
 800b7b6:	781a      	ldrb	r2, [r3, #0]
 800b7b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7bc:	4611      	mov	r1, r2
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7ff fd90 	bl	800b2e4 <putc_bfd>
		} while (i);
 800b7c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1ea      	bne.n	800b7a2 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800b7cc:	e007      	b.n	800b7de <f_printf+0x40a>
 800b7ce:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b7d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7d6:	4611      	mov	r1, r2
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7ff fd83 	bl	800b2e4 <putc_bfd>
 800b7de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b7e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d8ee      	bhi.n	800b7ce <f_printf+0x3fa>
		c = *fmt++;
 800b7f0:	e5fe      	b.n	800b3f0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b7f2:	bf00      	nop
 800b7f4:	e000      	b.n	800b7f8 <f_printf+0x424>
		if (!c) break;
 800b7f6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b7f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff fdae 	bl	800b35e <putc_flush>
 800b802:	4603      	mov	r3, r0
}
 800b804:	4618      	mov	r0, r3
 800b806:	379c      	adds	r7, #156	; 0x9c
 800b808:	46bd      	mov	sp, r7
 800b80a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b80e:	b003      	add	sp, #12
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop

0800b814 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b814:	b480      	push	{r7}
 800b816:	b087      	sub	sp, #28
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	4613      	mov	r3, r2
 800b820:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b822:	2301      	movs	r3, #1
 800b824:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b826:	2300      	movs	r3, #0
 800b828:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b82a:	4b1f      	ldr	r3, [pc, #124]	; (800b8a8 <FATFS_LinkDriverEx+0x94>)
 800b82c:	7a5b      	ldrb	r3, [r3, #9]
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d131      	bne.n	800b898 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b834:	4b1c      	ldr	r3, [pc, #112]	; (800b8a8 <FATFS_LinkDriverEx+0x94>)
 800b836:	7a5b      	ldrb	r3, [r3, #9]
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	461a      	mov	r2, r3
 800b83c:	4b1a      	ldr	r3, [pc, #104]	; (800b8a8 <FATFS_LinkDriverEx+0x94>)
 800b83e:	2100      	movs	r1, #0
 800b840:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b842:	4b19      	ldr	r3, [pc, #100]	; (800b8a8 <FATFS_LinkDriverEx+0x94>)
 800b844:	7a5b      	ldrb	r3, [r3, #9]
 800b846:	b2db      	uxtb	r3, r3
 800b848:	4a17      	ldr	r2, [pc, #92]	; (800b8a8 <FATFS_LinkDriverEx+0x94>)
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	4413      	add	r3, r2
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b852:	4b15      	ldr	r3, [pc, #84]	; (800b8a8 <FATFS_LinkDriverEx+0x94>)
 800b854:	7a5b      	ldrb	r3, [r3, #9]
 800b856:	b2db      	uxtb	r3, r3
 800b858:	461a      	mov	r2, r3
 800b85a:	4b13      	ldr	r3, [pc, #76]	; (800b8a8 <FATFS_LinkDriverEx+0x94>)
 800b85c:	4413      	add	r3, r2
 800b85e:	79fa      	ldrb	r2, [r7, #7]
 800b860:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b862:	4b11      	ldr	r3, [pc, #68]	; (800b8a8 <FATFS_LinkDriverEx+0x94>)
 800b864:	7a5b      	ldrb	r3, [r3, #9]
 800b866:	b2db      	uxtb	r3, r3
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	b2d1      	uxtb	r1, r2
 800b86c:	4a0e      	ldr	r2, [pc, #56]	; (800b8a8 <FATFS_LinkDriverEx+0x94>)
 800b86e:	7251      	strb	r1, [r2, #9]
 800b870:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b872:	7dbb      	ldrb	r3, [r7, #22]
 800b874:	3330      	adds	r3, #48	; 0x30
 800b876:	b2da      	uxtb	r2, r3
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	3301      	adds	r3, #1
 800b880:	223a      	movs	r2, #58	; 0x3a
 800b882:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	3302      	adds	r3, #2
 800b888:	222f      	movs	r2, #47	; 0x2f
 800b88a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	3303      	adds	r3, #3
 800b890:	2200      	movs	r2, #0
 800b892:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b898:	7dfb      	ldrb	r3, [r7, #23]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	371c      	adds	r7, #28
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	200006e4 	.word	0x200006e4

0800b8ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7ff ffaa 	bl	800b814 <FATFS_LinkDriverEx>
 800b8c0:	4603      	mov	r3, r0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
	...

0800b8cc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	6039      	str	r1, [r7, #0]
 800b8d6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b8d8:	88fb      	ldrh	r3, [r7, #6]
 800b8da:	2b7f      	cmp	r3, #127	; 0x7f
 800b8dc:	d802      	bhi.n	800b8e4 <ff_convert+0x18>
		c = chr;
 800b8de:	88fb      	ldrh	r3, [r7, #6]
 800b8e0:	81fb      	strh	r3, [r7, #14]
 800b8e2:	e025      	b.n	800b930 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00b      	beq.n	800b902 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b8ea:	88fb      	ldrh	r3, [r7, #6]
 800b8ec:	2bff      	cmp	r3, #255	; 0xff
 800b8ee:	d805      	bhi.n	800b8fc <ff_convert+0x30>
 800b8f0:	88fb      	ldrh	r3, [r7, #6]
 800b8f2:	3b80      	subs	r3, #128	; 0x80
 800b8f4:	4a12      	ldr	r2, [pc, #72]	; (800b940 <ff_convert+0x74>)
 800b8f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8fa:	e000      	b.n	800b8fe <ff_convert+0x32>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	81fb      	strh	r3, [r7, #14]
 800b900:	e016      	b.n	800b930 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b902:	2300      	movs	r3, #0
 800b904:	81fb      	strh	r3, [r7, #14]
 800b906:	e009      	b.n	800b91c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b908:	89fb      	ldrh	r3, [r7, #14]
 800b90a:	4a0d      	ldr	r2, [pc, #52]	; (800b940 <ff_convert+0x74>)
 800b90c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b910:	88fa      	ldrh	r2, [r7, #6]
 800b912:	429a      	cmp	r2, r3
 800b914:	d006      	beq.n	800b924 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b916:	89fb      	ldrh	r3, [r7, #14]
 800b918:	3301      	adds	r3, #1
 800b91a:	81fb      	strh	r3, [r7, #14]
 800b91c:	89fb      	ldrh	r3, [r7, #14]
 800b91e:	2b7f      	cmp	r3, #127	; 0x7f
 800b920:	d9f2      	bls.n	800b908 <ff_convert+0x3c>
 800b922:	e000      	b.n	800b926 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b924:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b926:	89fb      	ldrh	r3, [r7, #14]
 800b928:	3380      	adds	r3, #128	; 0x80
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b930:	89fb      	ldrh	r3, [r7, #14]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	0800eaec 	.word	0x0800eaec

0800b944 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b944:	b480      	push	{r7}
 800b946:	b087      	sub	sp, #28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	4603      	mov	r3, r0
 800b94c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b94e:	88fb      	ldrh	r3, [r7, #6]
 800b950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b954:	d201      	bcs.n	800b95a <ff_wtoupper+0x16>
 800b956:	4b3e      	ldr	r3, [pc, #248]	; (800ba50 <ff_wtoupper+0x10c>)
 800b958:	e000      	b.n	800b95c <ff_wtoupper+0x18>
 800b95a:	4b3e      	ldr	r3, [pc, #248]	; (800ba54 <ff_wtoupper+0x110>)
 800b95c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	1c9a      	adds	r2, r3, #2
 800b962:	617a      	str	r2, [r7, #20]
 800b964:	881b      	ldrh	r3, [r3, #0]
 800b966:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b968:	8a7b      	ldrh	r3, [r7, #18]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d068      	beq.n	800ba40 <ff_wtoupper+0xfc>
 800b96e:	88fa      	ldrh	r2, [r7, #6]
 800b970:	8a7b      	ldrh	r3, [r7, #18]
 800b972:	429a      	cmp	r2, r3
 800b974:	d364      	bcc.n	800ba40 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	1c9a      	adds	r2, r3, #2
 800b97a:	617a      	str	r2, [r7, #20]
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	823b      	strh	r3, [r7, #16]
 800b980:	8a3b      	ldrh	r3, [r7, #16]
 800b982:	0a1b      	lsrs	r3, r3, #8
 800b984:	81fb      	strh	r3, [r7, #14]
 800b986:	8a3b      	ldrh	r3, [r7, #16]
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b98c:	88fa      	ldrh	r2, [r7, #6]
 800b98e:	8a79      	ldrh	r1, [r7, #18]
 800b990:	8a3b      	ldrh	r3, [r7, #16]
 800b992:	440b      	add	r3, r1
 800b994:	429a      	cmp	r2, r3
 800b996:	da49      	bge.n	800ba2c <ff_wtoupper+0xe8>
			switch (cmd) {
 800b998:	89fb      	ldrh	r3, [r7, #14]
 800b99a:	2b08      	cmp	r3, #8
 800b99c:	d84f      	bhi.n	800ba3e <ff_wtoupper+0xfa>
 800b99e:	a201      	add	r2, pc, #4	; (adr r2, 800b9a4 <ff_wtoupper+0x60>)
 800b9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a4:	0800b9c9 	.word	0x0800b9c9
 800b9a8:	0800b9db 	.word	0x0800b9db
 800b9ac:	0800b9f1 	.word	0x0800b9f1
 800b9b0:	0800b9f9 	.word	0x0800b9f9
 800b9b4:	0800ba01 	.word	0x0800ba01
 800b9b8:	0800ba09 	.word	0x0800ba09
 800b9bc:	0800ba11 	.word	0x0800ba11
 800b9c0:	0800ba19 	.word	0x0800ba19
 800b9c4:	0800ba21 	.word	0x0800ba21
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b9c8:	88fa      	ldrh	r2, [r7, #6]
 800b9ca:	8a7b      	ldrh	r3, [r7, #18]
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	005b      	lsls	r3, r3, #1
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	881b      	ldrh	r3, [r3, #0]
 800b9d6:	80fb      	strh	r3, [r7, #6]
 800b9d8:	e027      	b.n	800ba2a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b9da:	88fa      	ldrh	r2, [r7, #6]
 800b9dc:	8a7b      	ldrh	r3, [r7, #18]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	88fa      	ldrh	r2, [r7, #6]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	80fb      	strh	r3, [r7, #6]
 800b9ee:	e01c      	b.n	800ba2a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b9f0:	88fb      	ldrh	r3, [r7, #6]
 800b9f2:	3b10      	subs	r3, #16
 800b9f4:	80fb      	strh	r3, [r7, #6]
 800b9f6:	e018      	b.n	800ba2a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b9f8:	88fb      	ldrh	r3, [r7, #6]
 800b9fa:	3b20      	subs	r3, #32
 800b9fc:	80fb      	strh	r3, [r7, #6]
 800b9fe:	e014      	b.n	800ba2a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ba00:	88fb      	ldrh	r3, [r7, #6]
 800ba02:	3b30      	subs	r3, #48	; 0x30
 800ba04:	80fb      	strh	r3, [r7, #6]
 800ba06:	e010      	b.n	800ba2a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ba08:	88fb      	ldrh	r3, [r7, #6]
 800ba0a:	3b1a      	subs	r3, #26
 800ba0c:	80fb      	strh	r3, [r7, #6]
 800ba0e:	e00c      	b.n	800ba2a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ba10:	88fb      	ldrh	r3, [r7, #6]
 800ba12:	3308      	adds	r3, #8
 800ba14:	80fb      	strh	r3, [r7, #6]
 800ba16:	e008      	b.n	800ba2a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ba18:	88fb      	ldrh	r3, [r7, #6]
 800ba1a:	3b50      	subs	r3, #80	; 0x50
 800ba1c:	80fb      	strh	r3, [r7, #6]
 800ba1e:	e004      	b.n	800ba2a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ba20:	88fb      	ldrh	r3, [r7, #6]
 800ba22:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ba26:	80fb      	strh	r3, [r7, #6]
 800ba28:	bf00      	nop
			}
			break;
 800ba2a:	e008      	b.n	800ba3e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ba2c:	89fb      	ldrh	r3, [r7, #14]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d195      	bne.n	800b95e <ff_wtoupper+0x1a>
 800ba32:	8a3b      	ldrh	r3, [r7, #16]
 800ba34:	005b      	lsls	r3, r3, #1
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	4413      	add	r3, r2
 800ba3a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ba3c:	e78f      	b.n	800b95e <ff_wtoupper+0x1a>
			break;
 800ba3e:	bf00      	nop
	}

	return chr;
 800ba40:	88fb      	ldrh	r3, [r7, #6]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	371c      	adds	r7, #28
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	0800ebec 	.word	0x0800ebec
 800ba54:	0800ede0 	.word	0x0800ede0

0800ba58 <__errno>:
 800ba58:	4b01      	ldr	r3, [pc, #4]	; (800ba60 <__errno+0x8>)
 800ba5a:	6818      	ldr	r0, [r3, #0]
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	20000084 	.word	0x20000084

0800ba64 <__libc_init_array>:
 800ba64:	b570      	push	{r4, r5, r6, lr}
 800ba66:	4e0d      	ldr	r6, [pc, #52]	; (800ba9c <__libc_init_array+0x38>)
 800ba68:	4c0d      	ldr	r4, [pc, #52]	; (800baa0 <__libc_init_array+0x3c>)
 800ba6a:	1ba4      	subs	r4, r4, r6
 800ba6c:	10a4      	asrs	r4, r4, #2
 800ba6e:	2500      	movs	r5, #0
 800ba70:	42a5      	cmp	r5, r4
 800ba72:	d109      	bne.n	800ba88 <__libc_init_array+0x24>
 800ba74:	4e0b      	ldr	r6, [pc, #44]	; (800baa4 <__libc_init_array+0x40>)
 800ba76:	4c0c      	ldr	r4, [pc, #48]	; (800baa8 <__libc_init_array+0x44>)
 800ba78:	f002 fe84 	bl	800e784 <_init>
 800ba7c:	1ba4      	subs	r4, r4, r6
 800ba7e:	10a4      	asrs	r4, r4, #2
 800ba80:	2500      	movs	r5, #0
 800ba82:	42a5      	cmp	r5, r4
 800ba84:	d105      	bne.n	800ba92 <__libc_init_array+0x2e>
 800ba86:	bd70      	pop	{r4, r5, r6, pc}
 800ba88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba8c:	4798      	blx	r3
 800ba8e:	3501      	adds	r5, #1
 800ba90:	e7ee      	b.n	800ba70 <__libc_init_array+0xc>
 800ba92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba96:	4798      	blx	r3
 800ba98:	3501      	adds	r5, #1
 800ba9a:	e7f2      	b.n	800ba82 <__libc_init_array+0x1e>
 800ba9c:	0800f170 	.word	0x0800f170
 800baa0:	0800f170 	.word	0x0800f170
 800baa4:	0800f170 	.word	0x0800f170
 800baa8:	0800f174 	.word	0x0800f174

0800baac <memcpy>:
 800baac:	b510      	push	{r4, lr}
 800baae:	1e43      	subs	r3, r0, #1
 800bab0:	440a      	add	r2, r1
 800bab2:	4291      	cmp	r1, r2
 800bab4:	d100      	bne.n	800bab8 <memcpy+0xc>
 800bab6:	bd10      	pop	{r4, pc}
 800bab8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800babc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bac0:	e7f7      	b.n	800bab2 <memcpy+0x6>

0800bac2 <memset>:
 800bac2:	4402      	add	r2, r0
 800bac4:	4603      	mov	r3, r0
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d100      	bne.n	800bacc <memset+0xa>
 800baca:	4770      	bx	lr
 800bacc:	f803 1b01 	strb.w	r1, [r3], #1
 800bad0:	e7f9      	b.n	800bac6 <memset+0x4>

0800bad2 <__cvt>:
 800bad2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bad6:	ec55 4b10 	vmov	r4, r5, d0
 800bada:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800badc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bae0:	2d00      	cmp	r5, #0
 800bae2:	460e      	mov	r6, r1
 800bae4:	4691      	mov	r9, r2
 800bae6:	4619      	mov	r1, r3
 800bae8:	bfb8      	it	lt
 800baea:	4622      	movlt	r2, r4
 800baec:	462b      	mov	r3, r5
 800baee:	f027 0720 	bic.w	r7, r7, #32
 800baf2:	bfbb      	ittet	lt
 800baf4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800baf8:	461d      	movlt	r5, r3
 800bafa:	2300      	movge	r3, #0
 800bafc:	232d      	movlt	r3, #45	; 0x2d
 800bafe:	bfb8      	it	lt
 800bb00:	4614      	movlt	r4, r2
 800bb02:	2f46      	cmp	r7, #70	; 0x46
 800bb04:	700b      	strb	r3, [r1, #0]
 800bb06:	d004      	beq.n	800bb12 <__cvt+0x40>
 800bb08:	2f45      	cmp	r7, #69	; 0x45
 800bb0a:	d100      	bne.n	800bb0e <__cvt+0x3c>
 800bb0c:	3601      	adds	r6, #1
 800bb0e:	2102      	movs	r1, #2
 800bb10:	e000      	b.n	800bb14 <__cvt+0x42>
 800bb12:	2103      	movs	r1, #3
 800bb14:	ab03      	add	r3, sp, #12
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	ab02      	add	r3, sp, #8
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	4632      	mov	r2, r6
 800bb1e:	4653      	mov	r3, sl
 800bb20:	ec45 4b10 	vmov	d0, r4, r5
 800bb24:	f000 fe2c 	bl	800c780 <_dtoa_r>
 800bb28:	2f47      	cmp	r7, #71	; 0x47
 800bb2a:	4680      	mov	r8, r0
 800bb2c:	d102      	bne.n	800bb34 <__cvt+0x62>
 800bb2e:	f019 0f01 	tst.w	r9, #1
 800bb32:	d026      	beq.n	800bb82 <__cvt+0xb0>
 800bb34:	2f46      	cmp	r7, #70	; 0x46
 800bb36:	eb08 0906 	add.w	r9, r8, r6
 800bb3a:	d111      	bne.n	800bb60 <__cvt+0x8e>
 800bb3c:	f898 3000 	ldrb.w	r3, [r8]
 800bb40:	2b30      	cmp	r3, #48	; 0x30
 800bb42:	d10a      	bne.n	800bb5a <__cvt+0x88>
 800bb44:	2200      	movs	r2, #0
 800bb46:	2300      	movs	r3, #0
 800bb48:	4620      	mov	r0, r4
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	f7f4 ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb50:	b918      	cbnz	r0, 800bb5a <__cvt+0x88>
 800bb52:	f1c6 0601 	rsb	r6, r6, #1
 800bb56:	f8ca 6000 	str.w	r6, [sl]
 800bb5a:	f8da 3000 	ldr.w	r3, [sl]
 800bb5e:	4499      	add	r9, r3
 800bb60:	2200      	movs	r2, #0
 800bb62:	2300      	movs	r3, #0
 800bb64:	4620      	mov	r0, r4
 800bb66:	4629      	mov	r1, r5
 800bb68:	f7f4 ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb6c:	b938      	cbnz	r0, 800bb7e <__cvt+0xac>
 800bb6e:	2230      	movs	r2, #48	; 0x30
 800bb70:	9b03      	ldr	r3, [sp, #12]
 800bb72:	454b      	cmp	r3, r9
 800bb74:	d205      	bcs.n	800bb82 <__cvt+0xb0>
 800bb76:	1c59      	adds	r1, r3, #1
 800bb78:	9103      	str	r1, [sp, #12]
 800bb7a:	701a      	strb	r2, [r3, #0]
 800bb7c:	e7f8      	b.n	800bb70 <__cvt+0x9e>
 800bb7e:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb82:	9b03      	ldr	r3, [sp, #12]
 800bb84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb86:	eba3 0308 	sub.w	r3, r3, r8
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	6013      	str	r3, [r2, #0]
 800bb8e:	b004      	add	sp, #16
 800bb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bb94 <__exponent>:
 800bb94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb96:	2900      	cmp	r1, #0
 800bb98:	4604      	mov	r4, r0
 800bb9a:	bfba      	itte	lt
 800bb9c:	4249      	neglt	r1, r1
 800bb9e:	232d      	movlt	r3, #45	; 0x2d
 800bba0:	232b      	movge	r3, #43	; 0x2b
 800bba2:	2909      	cmp	r1, #9
 800bba4:	f804 2b02 	strb.w	r2, [r4], #2
 800bba8:	7043      	strb	r3, [r0, #1]
 800bbaa:	dd20      	ble.n	800bbee <__exponent+0x5a>
 800bbac:	f10d 0307 	add.w	r3, sp, #7
 800bbb0:	461f      	mov	r7, r3
 800bbb2:	260a      	movs	r6, #10
 800bbb4:	fb91 f5f6 	sdiv	r5, r1, r6
 800bbb8:	fb06 1115 	mls	r1, r6, r5, r1
 800bbbc:	3130      	adds	r1, #48	; 0x30
 800bbbe:	2d09      	cmp	r5, #9
 800bbc0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bbc4:	f103 32ff 	add.w	r2, r3, #4294967295
 800bbc8:	4629      	mov	r1, r5
 800bbca:	dc09      	bgt.n	800bbe0 <__exponent+0x4c>
 800bbcc:	3130      	adds	r1, #48	; 0x30
 800bbce:	3b02      	subs	r3, #2
 800bbd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bbd4:	42bb      	cmp	r3, r7
 800bbd6:	4622      	mov	r2, r4
 800bbd8:	d304      	bcc.n	800bbe4 <__exponent+0x50>
 800bbda:	1a10      	subs	r0, r2, r0
 800bbdc:	b003      	add	sp, #12
 800bbde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	e7e7      	b.n	800bbb4 <__exponent+0x20>
 800bbe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe8:	f804 2b01 	strb.w	r2, [r4], #1
 800bbec:	e7f2      	b.n	800bbd4 <__exponent+0x40>
 800bbee:	2330      	movs	r3, #48	; 0x30
 800bbf0:	4419      	add	r1, r3
 800bbf2:	7083      	strb	r3, [r0, #2]
 800bbf4:	1d02      	adds	r2, r0, #4
 800bbf6:	70c1      	strb	r1, [r0, #3]
 800bbf8:	e7ef      	b.n	800bbda <__exponent+0x46>
	...

0800bbfc <_printf_float>:
 800bbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc00:	b08d      	sub	sp, #52	; 0x34
 800bc02:	460c      	mov	r4, r1
 800bc04:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bc08:	4616      	mov	r6, r2
 800bc0a:	461f      	mov	r7, r3
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	f001 fce9 	bl	800d5e4 <_localeconv_r>
 800bc12:	6803      	ldr	r3, [r0, #0]
 800bc14:	9304      	str	r3, [sp, #16]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7f4 fada 	bl	80001d0 <strlen>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	930a      	str	r3, [sp, #40]	; 0x28
 800bc20:	f8d8 3000 	ldr.w	r3, [r8]
 800bc24:	9005      	str	r0, [sp, #20]
 800bc26:	3307      	adds	r3, #7
 800bc28:	f023 0307 	bic.w	r3, r3, #7
 800bc2c:	f103 0208 	add.w	r2, r3, #8
 800bc30:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bc34:	f8d4 b000 	ldr.w	fp, [r4]
 800bc38:	f8c8 2000 	str.w	r2, [r8]
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bc44:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bc48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc4c:	9307      	str	r3, [sp, #28]
 800bc4e:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc52:	f04f 32ff 	mov.w	r2, #4294967295
 800bc56:	4ba7      	ldr	r3, [pc, #668]	; (800bef4 <_printf_float+0x2f8>)
 800bc58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc5c:	f7f4 ff66 	bl	8000b2c <__aeabi_dcmpun>
 800bc60:	bb70      	cbnz	r0, 800bcc0 <_printf_float+0xc4>
 800bc62:	f04f 32ff 	mov.w	r2, #4294967295
 800bc66:	4ba3      	ldr	r3, [pc, #652]	; (800bef4 <_printf_float+0x2f8>)
 800bc68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc6c:	f7f4 ff40 	bl	8000af0 <__aeabi_dcmple>
 800bc70:	bb30      	cbnz	r0, 800bcc0 <_printf_float+0xc4>
 800bc72:	2200      	movs	r2, #0
 800bc74:	2300      	movs	r3, #0
 800bc76:	4640      	mov	r0, r8
 800bc78:	4649      	mov	r1, r9
 800bc7a:	f7f4 ff2f 	bl	8000adc <__aeabi_dcmplt>
 800bc7e:	b110      	cbz	r0, 800bc86 <_printf_float+0x8a>
 800bc80:	232d      	movs	r3, #45	; 0x2d
 800bc82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc86:	4a9c      	ldr	r2, [pc, #624]	; (800bef8 <_printf_float+0x2fc>)
 800bc88:	4b9c      	ldr	r3, [pc, #624]	; (800befc <_printf_float+0x300>)
 800bc8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bc8e:	bf8c      	ite	hi
 800bc90:	4690      	movhi	r8, r2
 800bc92:	4698      	movls	r8, r3
 800bc94:	2303      	movs	r3, #3
 800bc96:	f02b 0204 	bic.w	r2, fp, #4
 800bc9a:	6123      	str	r3, [r4, #16]
 800bc9c:	6022      	str	r2, [r4, #0]
 800bc9e:	f04f 0900 	mov.w	r9, #0
 800bca2:	9700      	str	r7, [sp, #0]
 800bca4:	4633      	mov	r3, r6
 800bca6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bca8:	4621      	mov	r1, r4
 800bcaa:	4628      	mov	r0, r5
 800bcac:	f000 f9e6 	bl	800c07c <_printf_common>
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	f040 808d 	bne.w	800bdd0 <_printf_float+0x1d4>
 800bcb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcba:	b00d      	add	sp, #52	; 0x34
 800bcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc0:	4642      	mov	r2, r8
 800bcc2:	464b      	mov	r3, r9
 800bcc4:	4640      	mov	r0, r8
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	f7f4 ff30 	bl	8000b2c <__aeabi_dcmpun>
 800bccc:	b110      	cbz	r0, 800bcd4 <_printf_float+0xd8>
 800bcce:	4a8c      	ldr	r2, [pc, #560]	; (800bf00 <_printf_float+0x304>)
 800bcd0:	4b8c      	ldr	r3, [pc, #560]	; (800bf04 <_printf_float+0x308>)
 800bcd2:	e7da      	b.n	800bc8a <_printf_float+0x8e>
 800bcd4:	6861      	ldr	r1, [r4, #4]
 800bcd6:	1c4b      	adds	r3, r1, #1
 800bcd8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bcdc:	a80a      	add	r0, sp, #40	; 0x28
 800bcde:	d13e      	bne.n	800bd5e <_printf_float+0x162>
 800bce0:	2306      	movs	r3, #6
 800bce2:	6063      	str	r3, [r4, #4]
 800bce4:	2300      	movs	r3, #0
 800bce6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bcea:	ab09      	add	r3, sp, #36	; 0x24
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	ec49 8b10 	vmov	d0, r8, r9
 800bcf2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bcf6:	6022      	str	r2, [r4, #0]
 800bcf8:	f8cd a004 	str.w	sl, [sp, #4]
 800bcfc:	6861      	ldr	r1, [r4, #4]
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f7ff fee7 	bl	800bad2 <__cvt>
 800bd04:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bd08:	2b47      	cmp	r3, #71	; 0x47
 800bd0a:	4680      	mov	r8, r0
 800bd0c:	d109      	bne.n	800bd22 <_printf_float+0x126>
 800bd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd10:	1cd8      	adds	r0, r3, #3
 800bd12:	db02      	blt.n	800bd1a <_printf_float+0x11e>
 800bd14:	6862      	ldr	r2, [r4, #4]
 800bd16:	4293      	cmp	r3, r2
 800bd18:	dd47      	ble.n	800bdaa <_printf_float+0x1ae>
 800bd1a:	f1aa 0a02 	sub.w	sl, sl, #2
 800bd1e:	fa5f fa8a 	uxtb.w	sl, sl
 800bd22:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bd26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd28:	d824      	bhi.n	800bd74 <_printf_float+0x178>
 800bd2a:	3901      	subs	r1, #1
 800bd2c:	4652      	mov	r2, sl
 800bd2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd32:	9109      	str	r1, [sp, #36]	; 0x24
 800bd34:	f7ff ff2e 	bl	800bb94 <__exponent>
 800bd38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd3a:	1813      	adds	r3, r2, r0
 800bd3c:	2a01      	cmp	r2, #1
 800bd3e:	4681      	mov	r9, r0
 800bd40:	6123      	str	r3, [r4, #16]
 800bd42:	dc02      	bgt.n	800bd4a <_printf_float+0x14e>
 800bd44:	6822      	ldr	r2, [r4, #0]
 800bd46:	07d1      	lsls	r1, r2, #31
 800bd48:	d501      	bpl.n	800bd4e <_printf_float+0x152>
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	6123      	str	r3, [r4, #16]
 800bd4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d0a5      	beq.n	800bca2 <_printf_float+0xa6>
 800bd56:	232d      	movs	r3, #45	; 0x2d
 800bd58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd5c:	e7a1      	b.n	800bca2 <_printf_float+0xa6>
 800bd5e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bd62:	f000 8177 	beq.w	800c054 <_printf_float+0x458>
 800bd66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bd6a:	d1bb      	bne.n	800bce4 <_printf_float+0xe8>
 800bd6c:	2900      	cmp	r1, #0
 800bd6e:	d1b9      	bne.n	800bce4 <_printf_float+0xe8>
 800bd70:	2301      	movs	r3, #1
 800bd72:	e7b6      	b.n	800bce2 <_printf_float+0xe6>
 800bd74:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bd78:	d119      	bne.n	800bdae <_printf_float+0x1b2>
 800bd7a:	2900      	cmp	r1, #0
 800bd7c:	6863      	ldr	r3, [r4, #4]
 800bd7e:	dd0c      	ble.n	800bd9a <_printf_float+0x19e>
 800bd80:	6121      	str	r1, [r4, #16]
 800bd82:	b913      	cbnz	r3, 800bd8a <_printf_float+0x18e>
 800bd84:	6822      	ldr	r2, [r4, #0]
 800bd86:	07d2      	lsls	r2, r2, #31
 800bd88:	d502      	bpl.n	800bd90 <_printf_float+0x194>
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	440b      	add	r3, r1
 800bd8e:	6123      	str	r3, [r4, #16]
 800bd90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd92:	65a3      	str	r3, [r4, #88]	; 0x58
 800bd94:	f04f 0900 	mov.w	r9, #0
 800bd98:	e7d9      	b.n	800bd4e <_printf_float+0x152>
 800bd9a:	b913      	cbnz	r3, 800bda2 <_printf_float+0x1a6>
 800bd9c:	6822      	ldr	r2, [r4, #0]
 800bd9e:	07d0      	lsls	r0, r2, #31
 800bda0:	d501      	bpl.n	800bda6 <_printf_float+0x1aa>
 800bda2:	3302      	adds	r3, #2
 800bda4:	e7f3      	b.n	800bd8e <_printf_float+0x192>
 800bda6:	2301      	movs	r3, #1
 800bda8:	e7f1      	b.n	800bd8e <_printf_float+0x192>
 800bdaa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bdae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	db05      	blt.n	800bdc2 <_printf_float+0x1c6>
 800bdb6:	6822      	ldr	r2, [r4, #0]
 800bdb8:	6123      	str	r3, [r4, #16]
 800bdba:	07d1      	lsls	r1, r2, #31
 800bdbc:	d5e8      	bpl.n	800bd90 <_printf_float+0x194>
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	e7e5      	b.n	800bd8e <_printf_float+0x192>
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	bfd4      	ite	le
 800bdc6:	f1c3 0302 	rsble	r3, r3, #2
 800bdca:	2301      	movgt	r3, #1
 800bdcc:	4413      	add	r3, r2
 800bdce:	e7de      	b.n	800bd8e <_printf_float+0x192>
 800bdd0:	6823      	ldr	r3, [r4, #0]
 800bdd2:	055a      	lsls	r2, r3, #21
 800bdd4:	d407      	bmi.n	800bde6 <_printf_float+0x1ea>
 800bdd6:	6923      	ldr	r3, [r4, #16]
 800bdd8:	4642      	mov	r2, r8
 800bdda:	4631      	mov	r1, r6
 800bddc:	4628      	mov	r0, r5
 800bdde:	47b8      	blx	r7
 800bde0:	3001      	adds	r0, #1
 800bde2:	d12b      	bne.n	800be3c <_printf_float+0x240>
 800bde4:	e767      	b.n	800bcb6 <_printf_float+0xba>
 800bde6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bdea:	f240 80dc 	bls.w	800bfa6 <_printf_float+0x3aa>
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bdf6:	f7f4 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d033      	beq.n	800be66 <_printf_float+0x26a>
 800bdfe:	2301      	movs	r3, #1
 800be00:	4a41      	ldr	r2, [pc, #260]	; (800bf08 <_printf_float+0x30c>)
 800be02:	4631      	mov	r1, r6
 800be04:	4628      	mov	r0, r5
 800be06:	47b8      	blx	r7
 800be08:	3001      	adds	r0, #1
 800be0a:	f43f af54 	beq.w	800bcb6 <_printf_float+0xba>
 800be0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be12:	429a      	cmp	r2, r3
 800be14:	db02      	blt.n	800be1c <_printf_float+0x220>
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	07d8      	lsls	r0, r3, #31
 800be1a:	d50f      	bpl.n	800be3c <_printf_float+0x240>
 800be1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be20:	4631      	mov	r1, r6
 800be22:	4628      	mov	r0, r5
 800be24:	47b8      	blx	r7
 800be26:	3001      	adds	r0, #1
 800be28:	f43f af45 	beq.w	800bcb6 <_printf_float+0xba>
 800be2c:	f04f 0800 	mov.w	r8, #0
 800be30:	f104 091a 	add.w	r9, r4, #26
 800be34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be36:	3b01      	subs	r3, #1
 800be38:	4543      	cmp	r3, r8
 800be3a:	dc09      	bgt.n	800be50 <_printf_float+0x254>
 800be3c:	6823      	ldr	r3, [r4, #0]
 800be3e:	079b      	lsls	r3, r3, #30
 800be40:	f100 8103 	bmi.w	800c04a <_printf_float+0x44e>
 800be44:	68e0      	ldr	r0, [r4, #12]
 800be46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be48:	4298      	cmp	r0, r3
 800be4a:	bfb8      	it	lt
 800be4c:	4618      	movlt	r0, r3
 800be4e:	e734      	b.n	800bcba <_printf_float+0xbe>
 800be50:	2301      	movs	r3, #1
 800be52:	464a      	mov	r2, r9
 800be54:	4631      	mov	r1, r6
 800be56:	4628      	mov	r0, r5
 800be58:	47b8      	blx	r7
 800be5a:	3001      	adds	r0, #1
 800be5c:	f43f af2b 	beq.w	800bcb6 <_printf_float+0xba>
 800be60:	f108 0801 	add.w	r8, r8, #1
 800be64:	e7e6      	b.n	800be34 <_printf_float+0x238>
 800be66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be68:	2b00      	cmp	r3, #0
 800be6a:	dc2b      	bgt.n	800bec4 <_printf_float+0x2c8>
 800be6c:	2301      	movs	r3, #1
 800be6e:	4a26      	ldr	r2, [pc, #152]	; (800bf08 <_printf_float+0x30c>)
 800be70:	4631      	mov	r1, r6
 800be72:	4628      	mov	r0, r5
 800be74:	47b8      	blx	r7
 800be76:	3001      	adds	r0, #1
 800be78:	f43f af1d 	beq.w	800bcb6 <_printf_float+0xba>
 800be7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be7e:	b923      	cbnz	r3, 800be8a <_printf_float+0x28e>
 800be80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be82:	b913      	cbnz	r3, 800be8a <_printf_float+0x28e>
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	07d9      	lsls	r1, r3, #31
 800be88:	d5d8      	bpl.n	800be3c <_printf_float+0x240>
 800be8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be8e:	4631      	mov	r1, r6
 800be90:	4628      	mov	r0, r5
 800be92:	47b8      	blx	r7
 800be94:	3001      	adds	r0, #1
 800be96:	f43f af0e 	beq.w	800bcb6 <_printf_float+0xba>
 800be9a:	f04f 0900 	mov.w	r9, #0
 800be9e:	f104 0a1a 	add.w	sl, r4, #26
 800bea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea4:	425b      	negs	r3, r3
 800bea6:	454b      	cmp	r3, r9
 800bea8:	dc01      	bgt.n	800beae <_printf_float+0x2b2>
 800beaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beac:	e794      	b.n	800bdd8 <_printf_float+0x1dc>
 800beae:	2301      	movs	r3, #1
 800beb0:	4652      	mov	r2, sl
 800beb2:	4631      	mov	r1, r6
 800beb4:	4628      	mov	r0, r5
 800beb6:	47b8      	blx	r7
 800beb8:	3001      	adds	r0, #1
 800beba:	f43f aefc 	beq.w	800bcb6 <_printf_float+0xba>
 800bebe:	f109 0901 	add.w	r9, r9, #1
 800bec2:	e7ee      	b.n	800bea2 <_printf_float+0x2a6>
 800bec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bec6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bec8:	429a      	cmp	r2, r3
 800beca:	bfa8      	it	ge
 800becc:	461a      	movge	r2, r3
 800bece:	2a00      	cmp	r2, #0
 800bed0:	4691      	mov	r9, r2
 800bed2:	dd07      	ble.n	800bee4 <_printf_float+0x2e8>
 800bed4:	4613      	mov	r3, r2
 800bed6:	4631      	mov	r1, r6
 800bed8:	4642      	mov	r2, r8
 800beda:	4628      	mov	r0, r5
 800bedc:	47b8      	blx	r7
 800bede:	3001      	adds	r0, #1
 800bee0:	f43f aee9 	beq.w	800bcb6 <_printf_float+0xba>
 800bee4:	f104 031a 	add.w	r3, r4, #26
 800bee8:	f04f 0b00 	mov.w	fp, #0
 800beec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bef0:	9306      	str	r3, [sp, #24]
 800bef2:	e015      	b.n	800bf20 <_printf_float+0x324>
 800bef4:	7fefffff 	.word	0x7fefffff
 800bef8:	0800eea4 	.word	0x0800eea4
 800befc:	0800eea0 	.word	0x0800eea0
 800bf00:	0800eeac 	.word	0x0800eeac
 800bf04:	0800eea8 	.word	0x0800eea8
 800bf08:	0800eeb0 	.word	0x0800eeb0
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	9a06      	ldr	r2, [sp, #24]
 800bf10:	4631      	mov	r1, r6
 800bf12:	4628      	mov	r0, r5
 800bf14:	47b8      	blx	r7
 800bf16:	3001      	adds	r0, #1
 800bf18:	f43f aecd 	beq.w	800bcb6 <_printf_float+0xba>
 800bf1c:	f10b 0b01 	add.w	fp, fp, #1
 800bf20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bf24:	ebaa 0309 	sub.w	r3, sl, r9
 800bf28:	455b      	cmp	r3, fp
 800bf2a:	dcef      	bgt.n	800bf0c <_printf_float+0x310>
 800bf2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf30:	429a      	cmp	r2, r3
 800bf32:	44d0      	add	r8, sl
 800bf34:	db15      	blt.n	800bf62 <_printf_float+0x366>
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	07da      	lsls	r2, r3, #31
 800bf3a:	d412      	bmi.n	800bf62 <_printf_float+0x366>
 800bf3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf40:	eba3 020a 	sub.w	r2, r3, sl
 800bf44:	eba3 0a01 	sub.w	sl, r3, r1
 800bf48:	4592      	cmp	sl, r2
 800bf4a:	bfa8      	it	ge
 800bf4c:	4692      	movge	sl, r2
 800bf4e:	f1ba 0f00 	cmp.w	sl, #0
 800bf52:	dc0e      	bgt.n	800bf72 <_printf_float+0x376>
 800bf54:	f04f 0800 	mov.w	r8, #0
 800bf58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf5c:	f104 091a 	add.w	r9, r4, #26
 800bf60:	e019      	b.n	800bf96 <_printf_float+0x39a>
 800bf62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf66:	4631      	mov	r1, r6
 800bf68:	4628      	mov	r0, r5
 800bf6a:	47b8      	blx	r7
 800bf6c:	3001      	adds	r0, #1
 800bf6e:	d1e5      	bne.n	800bf3c <_printf_float+0x340>
 800bf70:	e6a1      	b.n	800bcb6 <_printf_float+0xba>
 800bf72:	4653      	mov	r3, sl
 800bf74:	4642      	mov	r2, r8
 800bf76:	4631      	mov	r1, r6
 800bf78:	4628      	mov	r0, r5
 800bf7a:	47b8      	blx	r7
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d1e9      	bne.n	800bf54 <_printf_float+0x358>
 800bf80:	e699      	b.n	800bcb6 <_printf_float+0xba>
 800bf82:	2301      	movs	r3, #1
 800bf84:	464a      	mov	r2, r9
 800bf86:	4631      	mov	r1, r6
 800bf88:	4628      	mov	r0, r5
 800bf8a:	47b8      	blx	r7
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	f43f ae92 	beq.w	800bcb6 <_printf_float+0xba>
 800bf92:	f108 0801 	add.w	r8, r8, #1
 800bf96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf9a:	1a9b      	subs	r3, r3, r2
 800bf9c:	eba3 030a 	sub.w	r3, r3, sl
 800bfa0:	4543      	cmp	r3, r8
 800bfa2:	dcee      	bgt.n	800bf82 <_printf_float+0x386>
 800bfa4:	e74a      	b.n	800be3c <_printf_float+0x240>
 800bfa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfa8:	2a01      	cmp	r2, #1
 800bfaa:	dc01      	bgt.n	800bfb0 <_printf_float+0x3b4>
 800bfac:	07db      	lsls	r3, r3, #31
 800bfae:	d53a      	bpl.n	800c026 <_printf_float+0x42a>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	4642      	mov	r2, r8
 800bfb4:	4631      	mov	r1, r6
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	47b8      	blx	r7
 800bfba:	3001      	adds	r0, #1
 800bfbc:	f43f ae7b 	beq.w	800bcb6 <_printf_float+0xba>
 800bfc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	47b8      	blx	r7
 800bfca:	3001      	adds	r0, #1
 800bfcc:	f108 0801 	add.w	r8, r8, #1
 800bfd0:	f43f ae71 	beq.w	800bcb6 <_printf_float+0xba>
 800bfd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f103 3aff 	add.w	sl, r3, #4294967295
 800bfdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f7f4 fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfe6:	b9c8      	cbnz	r0, 800c01c <_printf_float+0x420>
 800bfe8:	4653      	mov	r3, sl
 800bfea:	4642      	mov	r2, r8
 800bfec:	4631      	mov	r1, r6
 800bfee:	4628      	mov	r0, r5
 800bff0:	47b8      	blx	r7
 800bff2:	3001      	adds	r0, #1
 800bff4:	d10e      	bne.n	800c014 <_printf_float+0x418>
 800bff6:	e65e      	b.n	800bcb6 <_printf_float+0xba>
 800bff8:	2301      	movs	r3, #1
 800bffa:	4652      	mov	r2, sl
 800bffc:	4631      	mov	r1, r6
 800bffe:	4628      	mov	r0, r5
 800c000:	47b8      	blx	r7
 800c002:	3001      	adds	r0, #1
 800c004:	f43f ae57 	beq.w	800bcb6 <_printf_float+0xba>
 800c008:	f108 0801 	add.w	r8, r8, #1
 800c00c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c00e:	3b01      	subs	r3, #1
 800c010:	4543      	cmp	r3, r8
 800c012:	dcf1      	bgt.n	800bff8 <_printf_float+0x3fc>
 800c014:	464b      	mov	r3, r9
 800c016:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c01a:	e6de      	b.n	800bdda <_printf_float+0x1de>
 800c01c:	f04f 0800 	mov.w	r8, #0
 800c020:	f104 0a1a 	add.w	sl, r4, #26
 800c024:	e7f2      	b.n	800c00c <_printf_float+0x410>
 800c026:	2301      	movs	r3, #1
 800c028:	e7df      	b.n	800bfea <_printf_float+0x3ee>
 800c02a:	2301      	movs	r3, #1
 800c02c:	464a      	mov	r2, r9
 800c02e:	4631      	mov	r1, r6
 800c030:	4628      	mov	r0, r5
 800c032:	47b8      	blx	r7
 800c034:	3001      	adds	r0, #1
 800c036:	f43f ae3e 	beq.w	800bcb6 <_printf_float+0xba>
 800c03a:	f108 0801 	add.w	r8, r8, #1
 800c03e:	68e3      	ldr	r3, [r4, #12]
 800c040:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c042:	1a9b      	subs	r3, r3, r2
 800c044:	4543      	cmp	r3, r8
 800c046:	dcf0      	bgt.n	800c02a <_printf_float+0x42e>
 800c048:	e6fc      	b.n	800be44 <_printf_float+0x248>
 800c04a:	f04f 0800 	mov.w	r8, #0
 800c04e:	f104 0919 	add.w	r9, r4, #25
 800c052:	e7f4      	b.n	800c03e <_printf_float+0x442>
 800c054:	2900      	cmp	r1, #0
 800c056:	f43f ae8b 	beq.w	800bd70 <_printf_float+0x174>
 800c05a:	2300      	movs	r3, #0
 800c05c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c060:	ab09      	add	r3, sp, #36	; 0x24
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	ec49 8b10 	vmov	d0, r8, r9
 800c068:	6022      	str	r2, [r4, #0]
 800c06a:	f8cd a004 	str.w	sl, [sp, #4]
 800c06e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c072:	4628      	mov	r0, r5
 800c074:	f7ff fd2d 	bl	800bad2 <__cvt>
 800c078:	4680      	mov	r8, r0
 800c07a:	e648      	b.n	800bd0e <_printf_float+0x112>

0800c07c <_printf_common>:
 800c07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c080:	4691      	mov	r9, r2
 800c082:	461f      	mov	r7, r3
 800c084:	688a      	ldr	r2, [r1, #8]
 800c086:	690b      	ldr	r3, [r1, #16]
 800c088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c08c:	4293      	cmp	r3, r2
 800c08e:	bfb8      	it	lt
 800c090:	4613      	movlt	r3, r2
 800c092:	f8c9 3000 	str.w	r3, [r9]
 800c096:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c09a:	4606      	mov	r6, r0
 800c09c:	460c      	mov	r4, r1
 800c09e:	b112      	cbz	r2, 800c0a6 <_printf_common+0x2a>
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	f8c9 3000 	str.w	r3, [r9]
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	0699      	lsls	r1, r3, #26
 800c0aa:	bf42      	ittt	mi
 800c0ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c0b0:	3302      	addmi	r3, #2
 800c0b2:	f8c9 3000 	strmi.w	r3, [r9]
 800c0b6:	6825      	ldr	r5, [r4, #0]
 800c0b8:	f015 0506 	ands.w	r5, r5, #6
 800c0bc:	d107      	bne.n	800c0ce <_printf_common+0x52>
 800c0be:	f104 0a19 	add.w	sl, r4, #25
 800c0c2:	68e3      	ldr	r3, [r4, #12]
 800c0c4:	f8d9 2000 	ldr.w	r2, [r9]
 800c0c8:	1a9b      	subs	r3, r3, r2
 800c0ca:	42ab      	cmp	r3, r5
 800c0cc:	dc28      	bgt.n	800c120 <_printf_common+0xa4>
 800c0ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c0d2:	6822      	ldr	r2, [r4, #0]
 800c0d4:	3300      	adds	r3, #0
 800c0d6:	bf18      	it	ne
 800c0d8:	2301      	movne	r3, #1
 800c0da:	0692      	lsls	r2, r2, #26
 800c0dc:	d42d      	bmi.n	800c13a <_printf_common+0xbe>
 800c0de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	47c0      	blx	r8
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d020      	beq.n	800c12e <_printf_common+0xb2>
 800c0ec:	6823      	ldr	r3, [r4, #0]
 800c0ee:	68e5      	ldr	r5, [r4, #12]
 800c0f0:	f8d9 2000 	ldr.w	r2, [r9]
 800c0f4:	f003 0306 	and.w	r3, r3, #6
 800c0f8:	2b04      	cmp	r3, #4
 800c0fa:	bf08      	it	eq
 800c0fc:	1aad      	subeq	r5, r5, r2
 800c0fe:	68a3      	ldr	r3, [r4, #8]
 800c100:	6922      	ldr	r2, [r4, #16]
 800c102:	bf0c      	ite	eq
 800c104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c108:	2500      	movne	r5, #0
 800c10a:	4293      	cmp	r3, r2
 800c10c:	bfc4      	itt	gt
 800c10e:	1a9b      	subgt	r3, r3, r2
 800c110:	18ed      	addgt	r5, r5, r3
 800c112:	f04f 0900 	mov.w	r9, #0
 800c116:	341a      	adds	r4, #26
 800c118:	454d      	cmp	r5, r9
 800c11a:	d11a      	bne.n	800c152 <_printf_common+0xd6>
 800c11c:	2000      	movs	r0, #0
 800c11e:	e008      	b.n	800c132 <_printf_common+0xb6>
 800c120:	2301      	movs	r3, #1
 800c122:	4652      	mov	r2, sl
 800c124:	4639      	mov	r1, r7
 800c126:	4630      	mov	r0, r6
 800c128:	47c0      	blx	r8
 800c12a:	3001      	adds	r0, #1
 800c12c:	d103      	bne.n	800c136 <_printf_common+0xba>
 800c12e:	f04f 30ff 	mov.w	r0, #4294967295
 800c132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c136:	3501      	adds	r5, #1
 800c138:	e7c3      	b.n	800c0c2 <_printf_common+0x46>
 800c13a:	18e1      	adds	r1, r4, r3
 800c13c:	1c5a      	adds	r2, r3, #1
 800c13e:	2030      	movs	r0, #48	; 0x30
 800c140:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c144:	4422      	add	r2, r4
 800c146:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c14a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c14e:	3302      	adds	r3, #2
 800c150:	e7c5      	b.n	800c0de <_printf_common+0x62>
 800c152:	2301      	movs	r3, #1
 800c154:	4622      	mov	r2, r4
 800c156:	4639      	mov	r1, r7
 800c158:	4630      	mov	r0, r6
 800c15a:	47c0      	blx	r8
 800c15c:	3001      	adds	r0, #1
 800c15e:	d0e6      	beq.n	800c12e <_printf_common+0xb2>
 800c160:	f109 0901 	add.w	r9, r9, #1
 800c164:	e7d8      	b.n	800c118 <_printf_common+0x9c>
	...

0800c168 <_printf_i>:
 800c168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c16c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c170:	460c      	mov	r4, r1
 800c172:	7e09      	ldrb	r1, [r1, #24]
 800c174:	b085      	sub	sp, #20
 800c176:	296e      	cmp	r1, #110	; 0x6e
 800c178:	4617      	mov	r7, r2
 800c17a:	4606      	mov	r6, r0
 800c17c:	4698      	mov	r8, r3
 800c17e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c180:	f000 80b3 	beq.w	800c2ea <_printf_i+0x182>
 800c184:	d822      	bhi.n	800c1cc <_printf_i+0x64>
 800c186:	2963      	cmp	r1, #99	; 0x63
 800c188:	d036      	beq.n	800c1f8 <_printf_i+0x90>
 800c18a:	d80a      	bhi.n	800c1a2 <_printf_i+0x3a>
 800c18c:	2900      	cmp	r1, #0
 800c18e:	f000 80b9 	beq.w	800c304 <_printf_i+0x19c>
 800c192:	2958      	cmp	r1, #88	; 0x58
 800c194:	f000 8083 	beq.w	800c29e <_printf_i+0x136>
 800c198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c19c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c1a0:	e032      	b.n	800c208 <_printf_i+0xa0>
 800c1a2:	2964      	cmp	r1, #100	; 0x64
 800c1a4:	d001      	beq.n	800c1aa <_printf_i+0x42>
 800c1a6:	2969      	cmp	r1, #105	; 0x69
 800c1a8:	d1f6      	bne.n	800c198 <_printf_i+0x30>
 800c1aa:	6820      	ldr	r0, [r4, #0]
 800c1ac:	6813      	ldr	r3, [r2, #0]
 800c1ae:	0605      	lsls	r5, r0, #24
 800c1b0:	f103 0104 	add.w	r1, r3, #4
 800c1b4:	d52a      	bpl.n	800c20c <_printf_i+0xa4>
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	6011      	str	r1, [r2, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	da03      	bge.n	800c1c6 <_printf_i+0x5e>
 800c1be:	222d      	movs	r2, #45	; 0x2d
 800c1c0:	425b      	negs	r3, r3
 800c1c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c1c6:	486f      	ldr	r0, [pc, #444]	; (800c384 <_printf_i+0x21c>)
 800c1c8:	220a      	movs	r2, #10
 800c1ca:	e039      	b.n	800c240 <_printf_i+0xd8>
 800c1cc:	2973      	cmp	r1, #115	; 0x73
 800c1ce:	f000 809d 	beq.w	800c30c <_printf_i+0x1a4>
 800c1d2:	d808      	bhi.n	800c1e6 <_printf_i+0x7e>
 800c1d4:	296f      	cmp	r1, #111	; 0x6f
 800c1d6:	d020      	beq.n	800c21a <_printf_i+0xb2>
 800c1d8:	2970      	cmp	r1, #112	; 0x70
 800c1da:	d1dd      	bne.n	800c198 <_printf_i+0x30>
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	f043 0320 	orr.w	r3, r3, #32
 800c1e2:	6023      	str	r3, [r4, #0]
 800c1e4:	e003      	b.n	800c1ee <_printf_i+0x86>
 800c1e6:	2975      	cmp	r1, #117	; 0x75
 800c1e8:	d017      	beq.n	800c21a <_printf_i+0xb2>
 800c1ea:	2978      	cmp	r1, #120	; 0x78
 800c1ec:	d1d4      	bne.n	800c198 <_printf_i+0x30>
 800c1ee:	2378      	movs	r3, #120	; 0x78
 800c1f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c1f4:	4864      	ldr	r0, [pc, #400]	; (800c388 <_printf_i+0x220>)
 800c1f6:	e055      	b.n	800c2a4 <_printf_i+0x13c>
 800c1f8:	6813      	ldr	r3, [r2, #0]
 800c1fa:	1d19      	adds	r1, r3, #4
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	6011      	str	r1, [r2, #0]
 800c200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c208:	2301      	movs	r3, #1
 800c20a:	e08c      	b.n	800c326 <_printf_i+0x1be>
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	6011      	str	r1, [r2, #0]
 800c210:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c214:	bf18      	it	ne
 800c216:	b21b      	sxthne	r3, r3
 800c218:	e7cf      	b.n	800c1ba <_printf_i+0x52>
 800c21a:	6813      	ldr	r3, [r2, #0]
 800c21c:	6825      	ldr	r5, [r4, #0]
 800c21e:	1d18      	adds	r0, r3, #4
 800c220:	6010      	str	r0, [r2, #0]
 800c222:	0628      	lsls	r0, r5, #24
 800c224:	d501      	bpl.n	800c22a <_printf_i+0xc2>
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	e002      	b.n	800c230 <_printf_i+0xc8>
 800c22a:	0668      	lsls	r0, r5, #25
 800c22c:	d5fb      	bpl.n	800c226 <_printf_i+0xbe>
 800c22e:	881b      	ldrh	r3, [r3, #0]
 800c230:	4854      	ldr	r0, [pc, #336]	; (800c384 <_printf_i+0x21c>)
 800c232:	296f      	cmp	r1, #111	; 0x6f
 800c234:	bf14      	ite	ne
 800c236:	220a      	movne	r2, #10
 800c238:	2208      	moveq	r2, #8
 800c23a:	2100      	movs	r1, #0
 800c23c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c240:	6865      	ldr	r5, [r4, #4]
 800c242:	60a5      	str	r5, [r4, #8]
 800c244:	2d00      	cmp	r5, #0
 800c246:	f2c0 8095 	blt.w	800c374 <_printf_i+0x20c>
 800c24a:	6821      	ldr	r1, [r4, #0]
 800c24c:	f021 0104 	bic.w	r1, r1, #4
 800c250:	6021      	str	r1, [r4, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d13d      	bne.n	800c2d2 <_printf_i+0x16a>
 800c256:	2d00      	cmp	r5, #0
 800c258:	f040 808e 	bne.w	800c378 <_printf_i+0x210>
 800c25c:	4665      	mov	r5, ip
 800c25e:	2a08      	cmp	r2, #8
 800c260:	d10b      	bne.n	800c27a <_printf_i+0x112>
 800c262:	6823      	ldr	r3, [r4, #0]
 800c264:	07db      	lsls	r3, r3, #31
 800c266:	d508      	bpl.n	800c27a <_printf_i+0x112>
 800c268:	6923      	ldr	r3, [r4, #16]
 800c26a:	6862      	ldr	r2, [r4, #4]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	bfde      	ittt	le
 800c270:	2330      	movle	r3, #48	; 0x30
 800c272:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c276:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c27a:	ebac 0305 	sub.w	r3, ip, r5
 800c27e:	6123      	str	r3, [r4, #16]
 800c280:	f8cd 8000 	str.w	r8, [sp]
 800c284:	463b      	mov	r3, r7
 800c286:	aa03      	add	r2, sp, #12
 800c288:	4621      	mov	r1, r4
 800c28a:	4630      	mov	r0, r6
 800c28c:	f7ff fef6 	bl	800c07c <_printf_common>
 800c290:	3001      	adds	r0, #1
 800c292:	d14d      	bne.n	800c330 <_printf_i+0x1c8>
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	b005      	add	sp, #20
 800c29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c29e:	4839      	ldr	r0, [pc, #228]	; (800c384 <_printf_i+0x21c>)
 800c2a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c2a4:	6813      	ldr	r3, [r2, #0]
 800c2a6:	6821      	ldr	r1, [r4, #0]
 800c2a8:	1d1d      	adds	r5, r3, #4
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6015      	str	r5, [r2, #0]
 800c2ae:	060a      	lsls	r2, r1, #24
 800c2b0:	d50b      	bpl.n	800c2ca <_printf_i+0x162>
 800c2b2:	07ca      	lsls	r2, r1, #31
 800c2b4:	bf44      	itt	mi
 800c2b6:	f041 0120 	orrmi.w	r1, r1, #32
 800c2ba:	6021      	strmi	r1, [r4, #0]
 800c2bc:	b91b      	cbnz	r3, 800c2c6 <_printf_i+0x15e>
 800c2be:	6822      	ldr	r2, [r4, #0]
 800c2c0:	f022 0220 	bic.w	r2, r2, #32
 800c2c4:	6022      	str	r2, [r4, #0]
 800c2c6:	2210      	movs	r2, #16
 800c2c8:	e7b7      	b.n	800c23a <_printf_i+0xd2>
 800c2ca:	064d      	lsls	r5, r1, #25
 800c2cc:	bf48      	it	mi
 800c2ce:	b29b      	uxthmi	r3, r3
 800c2d0:	e7ef      	b.n	800c2b2 <_printf_i+0x14a>
 800c2d2:	4665      	mov	r5, ip
 800c2d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2d8:	fb02 3311 	mls	r3, r2, r1, r3
 800c2dc:	5cc3      	ldrb	r3, [r0, r3]
 800c2de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	2900      	cmp	r1, #0
 800c2e6:	d1f5      	bne.n	800c2d4 <_printf_i+0x16c>
 800c2e8:	e7b9      	b.n	800c25e <_printf_i+0xf6>
 800c2ea:	6813      	ldr	r3, [r2, #0]
 800c2ec:	6825      	ldr	r5, [r4, #0]
 800c2ee:	6961      	ldr	r1, [r4, #20]
 800c2f0:	1d18      	adds	r0, r3, #4
 800c2f2:	6010      	str	r0, [r2, #0]
 800c2f4:	0628      	lsls	r0, r5, #24
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	d501      	bpl.n	800c2fe <_printf_i+0x196>
 800c2fa:	6019      	str	r1, [r3, #0]
 800c2fc:	e002      	b.n	800c304 <_printf_i+0x19c>
 800c2fe:	066a      	lsls	r2, r5, #25
 800c300:	d5fb      	bpl.n	800c2fa <_printf_i+0x192>
 800c302:	8019      	strh	r1, [r3, #0]
 800c304:	2300      	movs	r3, #0
 800c306:	6123      	str	r3, [r4, #16]
 800c308:	4665      	mov	r5, ip
 800c30a:	e7b9      	b.n	800c280 <_printf_i+0x118>
 800c30c:	6813      	ldr	r3, [r2, #0]
 800c30e:	1d19      	adds	r1, r3, #4
 800c310:	6011      	str	r1, [r2, #0]
 800c312:	681d      	ldr	r5, [r3, #0]
 800c314:	6862      	ldr	r2, [r4, #4]
 800c316:	2100      	movs	r1, #0
 800c318:	4628      	mov	r0, r5
 800c31a:	f7f3 ff61 	bl	80001e0 <memchr>
 800c31e:	b108      	cbz	r0, 800c324 <_printf_i+0x1bc>
 800c320:	1b40      	subs	r0, r0, r5
 800c322:	6060      	str	r0, [r4, #4]
 800c324:	6863      	ldr	r3, [r4, #4]
 800c326:	6123      	str	r3, [r4, #16]
 800c328:	2300      	movs	r3, #0
 800c32a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c32e:	e7a7      	b.n	800c280 <_printf_i+0x118>
 800c330:	6923      	ldr	r3, [r4, #16]
 800c332:	462a      	mov	r2, r5
 800c334:	4639      	mov	r1, r7
 800c336:	4630      	mov	r0, r6
 800c338:	47c0      	blx	r8
 800c33a:	3001      	adds	r0, #1
 800c33c:	d0aa      	beq.n	800c294 <_printf_i+0x12c>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	079b      	lsls	r3, r3, #30
 800c342:	d413      	bmi.n	800c36c <_printf_i+0x204>
 800c344:	68e0      	ldr	r0, [r4, #12]
 800c346:	9b03      	ldr	r3, [sp, #12]
 800c348:	4298      	cmp	r0, r3
 800c34a:	bfb8      	it	lt
 800c34c:	4618      	movlt	r0, r3
 800c34e:	e7a3      	b.n	800c298 <_printf_i+0x130>
 800c350:	2301      	movs	r3, #1
 800c352:	464a      	mov	r2, r9
 800c354:	4639      	mov	r1, r7
 800c356:	4630      	mov	r0, r6
 800c358:	47c0      	blx	r8
 800c35a:	3001      	adds	r0, #1
 800c35c:	d09a      	beq.n	800c294 <_printf_i+0x12c>
 800c35e:	3501      	adds	r5, #1
 800c360:	68e3      	ldr	r3, [r4, #12]
 800c362:	9a03      	ldr	r2, [sp, #12]
 800c364:	1a9b      	subs	r3, r3, r2
 800c366:	42ab      	cmp	r3, r5
 800c368:	dcf2      	bgt.n	800c350 <_printf_i+0x1e8>
 800c36a:	e7eb      	b.n	800c344 <_printf_i+0x1dc>
 800c36c:	2500      	movs	r5, #0
 800c36e:	f104 0919 	add.w	r9, r4, #25
 800c372:	e7f5      	b.n	800c360 <_printf_i+0x1f8>
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1ac      	bne.n	800c2d2 <_printf_i+0x16a>
 800c378:	7803      	ldrb	r3, [r0, #0]
 800c37a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c37e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c382:	e76c      	b.n	800c25e <_printf_i+0xf6>
 800c384:	0800eeb2 	.word	0x0800eeb2
 800c388:	0800eec3 	.word	0x0800eec3

0800c38c <iprintf>:
 800c38c:	b40f      	push	{r0, r1, r2, r3}
 800c38e:	4b0a      	ldr	r3, [pc, #40]	; (800c3b8 <iprintf+0x2c>)
 800c390:	b513      	push	{r0, r1, r4, lr}
 800c392:	681c      	ldr	r4, [r3, #0]
 800c394:	b124      	cbz	r4, 800c3a0 <iprintf+0x14>
 800c396:	69a3      	ldr	r3, [r4, #24]
 800c398:	b913      	cbnz	r3, 800c3a0 <iprintf+0x14>
 800c39a:	4620      	mov	r0, r4
 800c39c:	f001 f898 	bl	800d4d0 <__sinit>
 800c3a0:	ab05      	add	r3, sp, #20
 800c3a2:	9a04      	ldr	r2, [sp, #16]
 800c3a4:	68a1      	ldr	r1, [r4, #8]
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f001 fea3 	bl	800e0f4 <_vfiprintf_r>
 800c3ae:	b002      	add	sp, #8
 800c3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3b4:	b004      	add	sp, #16
 800c3b6:	4770      	bx	lr
 800c3b8:	20000084 	.word	0x20000084

0800c3bc <_puts_r>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	460e      	mov	r6, r1
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	b118      	cbz	r0, 800c3cc <_puts_r+0x10>
 800c3c4:	6983      	ldr	r3, [r0, #24]
 800c3c6:	b90b      	cbnz	r3, 800c3cc <_puts_r+0x10>
 800c3c8:	f001 f882 	bl	800d4d0 <__sinit>
 800c3cc:	69ab      	ldr	r3, [r5, #24]
 800c3ce:	68ac      	ldr	r4, [r5, #8]
 800c3d0:	b913      	cbnz	r3, 800c3d8 <_puts_r+0x1c>
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f001 f87c 	bl	800d4d0 <__sinit>
 800c3d8:	4b23      	ldr	r3, [pc, #140]	; (800c468 <_puts_r+0xac>)
 800c3da:	429c      	cmp	r4, r3
 800c3dc:	d117      	bne.n	800c40e <_puts_r+0x52>
 800c3de:	686c      	ldr	r4, [r5, #4]
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	071b      	lsls	r3, r3, #28
 800c3e4:	d51d      	bpl.n	800c422 <_puts_r+0x66>
 800c3e6:	6923      	ldr	r3, [r4, #16]
 800c3e8:	b1db      	cbz	r3, 800c422 <_puts_r+0x66>
 800c3ea:	3e01      	subs	r6, #1
 800c3ec:	68a3      	ldr	r3, [r4, #8]
 800c3ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	60a3      	str	r3, [r4, #8]
 800c3f6:	b9e9      	cbnz	r1, 800c434 <_puts_r+0x78>
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	da2e      	bge.n	800c45a <_puts_r+0x9e>
 800c3fc:	4622      	mov	r2, r4
 800c3fe:	210a      	movs	r1, #10
 800c400:	4628      	mov	r0, r5
 800c402:	f000 f86f 	bl	800c4e4 <__swbuf_r>
 800c406:	3001      	adds	r0, #1
 800c408:	d011      	beq.n	800c42e <_puts_r+0x72>
 800c40a:	200a      	movs	r0, #10
 800c40c:	e011      	b.n	800c432 <_puts_r+0x76>
 800c40e:	4b17      	ldr	r3, [pc, #92]	; (800c46c <_puts_r+0xb0>)
 800c410:	429c      	cmp	r4, r3
 800c412:	d101      	bne.n	800c418 <_puts_r+0x5c>
 800c414:	68ac      	ldr	r4, [r5, #8]
 800c416:	e7e3      	b.n	800c3e0 <_puts_r+0x24>
 800c418:	4b15      	ldr	r3, [pc, #84]	; (800c470 <_puts_r+0xb4>)
 800c41a:	429c      	cmp	r4, r3
 800c41c:	bf08      	it	eq
 800c41e:	68ec      	ldreq	r4, [r5, #12]
 800c420:	e7de      	b.n	800c3e0 <_puts_r+0x24>
 800c422:	4621      	mov	r1, r4
 800c424:	4628      	mov	r0, r5
 800c426:	f000 f8af 	bl	800c588 <__swsetup_r>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	d0dd      	beq.n	800c3ea <_puts_r+0x2e>
 800c42e:	f04f 30ff 	mov.w	r0, #4294967295
 800c432:	bd70      	pop	{r4, r5, r6, pc}
 800c434:	2b00      	cmp	r3, #0
 800c436:	da04      	bge.n	800c442 <_puts_r+0x86>
 800c438:	69a2      	ldr	r2, [r4, #24]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	dc06      	bgt.n	800c44c <_puts_r+0x90>
 800c43e:	290a      	cmp	r1, #10
 800c440:	d004      	beq.n	800c44c <_puts_r+0x90>
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	1c5a      	adds	r2, r3, #1
 800c446:	6022      	str	r2, [r4, #0]
 800c448:	7019      	strb	r1, [r3, #0]
 800c44a:	e7cf      	b.n	800c3ec <_puts_r+0x30>
 800c44c:	4622      	mov	r2, r4
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 f848 	bl	800c4e4 <__swbuf_r>
 800c454:	3001      	adds	r0, #1
 800c456:	d1c9      	bne.n	800c3ec <_puts_r+0x30>
 800c458:	e7e9      	b.n	800c42e <_puts_r+0x72>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	200a      	movs	r0, #10
 800c45e:	1c5a      	adds	r2, r3, #1
 800c460:	6022      	str	r2, [r4, #0]
 800c462:	7018      	strb	r0, [r3, #0]
 800c464:	e7e5      	b.n	800c432 <_puts_r+0x76>
 800c466:	bf00      	nop
 800c468:	0800ef04 	.word	0x0800ef04
 800c46c:	0800ef24 	.word	0x0800ef24
 800c470:	0800eee4 	.word	0x0800eee4

0800c474 <puts>:
 800c474:	4b02      	ldr	r3, [pc, #8]	; (800c480 <puts+0xc>)
 800c476:	4601      	mov	r1, r0
 800c478:	6818      	ldr	r0, [r3, #0]
 800c47a:	f7ff bf9f 	b.w	800c3bc <_puts_r>
 800c47e:	bf00      	nop
 800c480:	20000084 	.word	0x20000084

0800c484 <siprintf>:
 800c484:	b40e      	push	{r1, r2, r3}
 800c486:	b500      	push	{lr}
 800c488:	b09c      	sub	sp, #112	; 0x70
 800c48a:	ab1d      	add	r3, sp, #116	; 0x74
 800c48c:	9002      	str	r0, [sp, #8]
 800c48e:	9006      	str	r0, [sp, #24]
 800c490:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c494:	4809      	ldr	r0, [pc, #36]	; (800c4bc <siprintf+0x38>)
 800c496:	9107      	str	r1, [sp, #28]
 800c498:	9104      	str	r1, [sp, #16]
 800c49a:	4909      	ldr	r1, [pc, #36]	; (800c4c0 <siprintf+0x3c>)
 800c49c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4a0:	9105      	str	r1, [sp, #20]
 800c4a2:	6800      	ldr	r0, [r0, #0]
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	a902      	add	r1, sp, #8
 800c4a8:	f001 fd02 	bl	800deb0 <_svfiprintf_r>
 800c4ac:	9b02      	ldr	r3, [sp, #8]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	701a      	strb	r2, [r3, #0]
 800c4b2:	b01c      	add	sp, #112	; 0x70
 800c4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4b8:	b003      	add	sp, #12
 800c4ba:	4770      	bx	lr
 800c4bc:	20000084 	.word	0x20000084
 800c4c0:	ffff0208 	.word	0xffff0208

0800c4c4 <strcat>:
 800c4c4:	b510      	push	{r4, lr}
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	781a      	ldrb	r2, [r3, #0]
 800c4ca:	1c5c      	adds	r4, r3, #1
 800c4cc:	b93a      	cbnz	r2, 800c4de <strcat+0x1a>
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4d8:	2a00      	cmp	r2, #0
 800c4da:	d1f9      	bne.n	800c4d0 <strcat+0xc>
 800c4dc:	bd10      	pop	{r4, pc}
 800c4de:	4623      	mov	r3, r4
 800c4e0:	e7f2      	b.n	800c4c8 <strcat+0x4>
	...

0800c4e4 <__swbuf_r>:
 800c4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e6:	460e      	mov	r6, r1
 800c4e8:	4614      	mov	r4, r2
 800c4ea:	4605      	mov	r5, r0
 800c4ec:	b118      	cbz	r0, 800c4f6 <__swbuf_r+0x12>
 800c4ee:	6983      	ldr	r3, [r0, #24]
 800c4f0:	b90b      	cbnz	r3, 800c4f6 <__swbuf_r+0x12>
 800c4f2:	f000 ffed 	bl	800d4d0 <__sinit>
 800c4f6:	4b21      	ldr	r3, [pc, #132]	; (800c57c <__swbuf_r+0x98>)
 800c4f8:	429c      	cmp	r4, r3
 800c4fa:	d12a      	bne.n	800c552 <__swbuf_r+0x6e>
 800c4fc:	686c      	ldr	r4, [r5, #4]
 800c4fe:	69a3      	ldr	r3, [r4, #24]
 800c500:	60a3      	str	r3, [r4, #8]
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	071a      	lsls	r2, r3, #28
 800c506:	d52e      	bpl.n	800c566 <__swbuf_r+0x82>
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	b363      	cbz	r3, 800c566 <__swbuf_r+0x82>
 800c50c:	6923      	ldr	r3, [r4, #16]
 800c50e:	6820      	ldr	r0, [r4, #0]
 800c510:	1ac0      	subs	r0, r0, r3
 800c512:	6963      	ldr	r3, [r4, #20]
 800c514:	b2f6      	uxtb	r6, r6
 800c516:	4283      	cmp	r3, r0
 800c518:	4637      	mov	r7, r6
 800c51a:	dc04      	bgt.n	800c526 <__swbuf_r+0x42>
 800c51c:	4621      	mov	r1, r4
 800c51e:	4628      	mov	r0, r5
 800c520:	f000 ff6c 	bl	800d3fc <_fflush_r>
 800c524:	bb28      	cbnz	r0, 800c572 <__swbuf_r+0x8e>
 800c526:	68a3      	ldr	r3, [r4, #8]
 800c528:	3b01      	subs	r3, #1
 800c52a:	60a3      	str	r3, [r4, #8]
 800c52c:	6823      	ldr	r3, [r4, #0]
 800c52e:	1c5a      	adds	r2, r3, #1
 800c530:	6022      	str	r2, [r4, #0]
 800c532:	701e      	strb	r6, [r3, #0]
 800c534:	6963      	ldr	r3, [r4, #20]
 800c536:	3001      	adds	r0, #1
 800c538:	4283      	cmp	r3, r0
 800c53a:	d004      	beq.n	800c546 <__swbuf_r+0x62>
 800c53c:	89a3      	ldrh	r3, [r4, #12]
 800c53e:	07db      	lsls	r3, r3, #31
 800c540:	d519      	bpl.n	800c576 <__swbuf_r+0x92>
 800c542:	2e0a      	cmp	r6, #10
 800c544:	d117      	bne.n	800c576 <__swbuf_r+0x92>
 800c546:	4621      	mov	r1, r4
 800c548:	4628      	mov	r0, r5
 800c54a:	f000 ff57 	bl	800d3fc <_fflush_r>
 800c54e:	b190      	cbz	r0, 800c576 <__swbuf_r+0x92>
 800c550:	e00f      	b.n	800c572 <__swbuf_r+0x8e>
 800c552:	4b0b      	ldr	r3, [pc, #44]	; (800c580 <__swbuf_r+0x9c>)
 800c554:	429c      	cmp	r4, r3
 800c556:	d101      	bne.n	800c55c <__swbuf_r+0x78>
 800c558:	68ac      	ldr	r4, [r5, #8]
 800c55a:	e7d0      	b.n	800c4fe <__swbuf_r+0x1a>
 800c55c:	4b09      	ldr	r3, [pc, #36]	; (800c584 <__swbuf_r+0xa0>)
 800c55e:	429c      	cmp	r4, r3
 800c560:	bf08      	it	eq
 800c562:	68ec      	ldreq	r4, [r5, #12]
 800c564:	e7cb      	b.n	800c4fe <__swbuf_r+0x1a>
 800c566:	4621      	mov	r1, r4
 800c568:	4628      	mov	r0, r5
 800c56a:	f000 f80d 	bl	800c588 <__swsetup_r>
 800c56e:	2800      	cmp	r0, #0
 800c570:	d0cc      	beq.n	800c50c <__swbuf_r+0x28>
 800c572:	f04f 37ff 	mov.w	r7, #4294967295
 800c576:	4638      	mov	r0, r7
 800c578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c57a:	bf00      	nop
 800c57c:	0800ef04 	.word	0x0800ef04
 800c580:	0800ef24 	.word	0x0800ef24
 800c584:	0800eee4 	.word	0x0800eee4

0800c588 <__swsetup_r>:
 800c588:	4b32      	ldr	r3, [pc, #200]	; (800c654 <__swsetup_r+0xcc>)
 800c58a:	b570      	push	{r4, r5, r6, lr}
 800c58c:	681d      	ldr	r5, [r3, #0]
 800c58e:	4606      	mov	r6, r0
 800c590:	460c      	mov	r4, r1
 800c592:	b125      	cbz	r5, 800c59e <__swsetup_r+0x16>
 800c594:	69ab      	ldr	r3, [r5, #24]
 800c596:	b913      	cbnz	r3, 800c59e <__swsetup_r+0x16>
 800c598:	4628      	mov	r0, r5
 800c59a:	f000 ff99 	bl	800d4d0 <__sinit>
 800c59e:	4b2e      	ldr	r3, [pc, #184]	; (800c658 <__swsetup_r+0xd0>)
 800c5a0:	429c      	cmp	r4, r3
 800c5a2:	d10f      	bne.n	800c5c4 <__swsetup_r+0x3c>
 800c5a4:	686c      	ldr	r4, [r5, #4]
 800c5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	0715      	lsls	r5, r2, #28
 800c5ae:	d42c      	bmi.n	800c60a <__swsetup_r+0x82>
 800c5b0:	06d0      	lsls	r0, r2, #27
 800c5b2:	d411      	bmi.n	800c5d8 <__swsetup_r+0x50>
 800c5b4:	2209      	movs	r2, #9
 800c5b6:	6032      	str	r2, [r6, #0]
 800c5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5bc:	81a3      	strh	r3, [r4, #12]
 800c5be:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c2:	e03e      	b.n	800c642 <__swsetup_r+0xba>
 800c5c4:	4b25      	ldr	r3, [pc, #148]	; (800c65c <__swsetup_r+0xd4>)
 800c5c6:	429c      	cmp	r4, r3
 800c5c8:	d101      	bne.n	800c5ce <__swsetup_r+0x46>
 800c5ca:	68ac      	ldr	r4, [r5, #8]
 800c5cc:	e7eb      	b.n	800c5a6 <__swsetup_r+0x1e>
 800c5ce:	4b24      	ldr	r3, [pc, #144]	; (800c660 <__swsetup_r+0xd8>)
 800c5d0:	429c      	cmp	r4, r3
 800c5d2:	bf08      	it	eq
 800c5d4:	68ec      	ldreq	r4, [r5, #12]
 800c5d6:	e7e6      	b.n	800c5a6 <__swsetup_r+0x1e>
 800c5d8:	0751      	lsls	r1, r2, #29
 800c5da:	d512      	bpl.n	800c602 <__swsetup_r+0x7a>
 800c5dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5de:	b141      	cbz	r1, 800c5f2 <__swsetup_r+0x6a>
 800c5e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5e4:	4299      	cmp	r1, r3
 800c5e6:	d002      	beq.n	800c5ee <__swsetup_r+0x66>
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	f001 fb5f 	bl	800dcac <_free_r>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	6363      	str	r3, [r4, #52]	; 0x34
 800c5f2:	89a3      	ldrh	r3, [r4, #12]
 800c5f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5f8:	81a3      	strh	r3, [r4, #12]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	6063      	str	r3, [r4, #4]
 800c5fe:	6923      	ldr	r3, [r4, #16]
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	89a3      	ldrh	r3, [r4, #12]
 800c604:	f043 0308 	orr.w	r3, r3, #8
 800c608:	81a3      	strh	r3, [r4, #12]
 800c60a:	6923      	ldr	r3, [r4, #16]
 800c60c:	b94b      	cbnz	r3, 800c622 <__swsetup_r+0x9a>
 800c60e:	89a3      	ldrh	r3, [r4, #12]
 800c610:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c618:	d003      	beq.n	800c622 <__swsetup_r+0x9a>
 800c61a:	4621      	mov	r1, r4
 800c61c:	4630      	mov	r0, r6
 800c61e:	f001 f813 	bl	800d648 <__smakebuf_r>
 800c622:	89a2      	ldrh	r2, [r4, #12]
 800c624:	f012 0301 	ands.w	r3, r2, #1
 800c628:	d00c      	beq.n	800c644 <__swsetup_r+0xbc>
 800c62a:	2300      	movs	r3, #0
 800c62c:	60a3      	str	r3, [r4, #8]
 800c62e:	6963      	ldr	r3, [r4, #20]
 800c630:	425b      	negs	r3, r3
 800c632:	61a3      	str	r3, [r4, #24]
 800c634:	6923      	ldr	r3, [r4, #16]
 800c636:	b953      	cbnz	r3, 800c64e <__swsetup_r+0xc6>
 800c638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c63c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c640:	d1ba      	bne.n	800c5b8 <__swsetup_r+0x30>
 800c642:	bd70      	pop	{r4, r5, r6, pc}
 800c644:	0792      	lsls	r2, r2, #30
 800c646:	bf58      	it	pl
 800c648:	6963      	ldrpl	r3, [r4, #20]
 800c64a:	60a3      	str	r3, [r4, #8]
 800c64c:	e7f2      	b.n	800c634 <__swsetup_r+0xac>
 800c64e:	2000      	movs	r0, #0
 800c650:	e7f7      	b.n	800c642 <__swsetup_r+0xba>
 800c652:	bf00      	nop
 800c654:	20000084 	.word	0x20000084
 800c658:	0800ef04 	.word	0x0800ef04
 800c65c:	0800ef24 	.word	0x0800ef24
 800c660:	0800eee4 	.word	0x0800eee4

0800c664 <quorem>:
 800c664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c668:	6903      	ldr	r3, [r0, #16]
 800c66a:	690c      	ldr	r4, [r1, #16]
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	4680      	mov	r8, r0
 800c670:	f2c0 8082 	blt.w	800c778 <quorem+0x114>
 800c674:	3c01      	subs	r4, #1
 800c676:	f101 0714 	add.w	r7, r1, #20
 800c67a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c67e:	f100 0614 	add.w	r6, r0, #20
 800c682:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c686:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c68a:	eb06 030c 	add.w	r3, r6, ip
 800c68e:	3501      	adds	r5, #1
 800c690:	eb07 090c 	add.w	r9, r7, ip
 800c694:	9301      	str	r3, [sp, #4]
 800c696:	fbb0 f5f5 	udiv	r5, r0, r5
 800c69a:	b395      	cbz	r5, 800c702 <quorem+0x9e>
 800c69c:	f04f 0a00 	mov.w	sl, #0
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	46b6      	mov	lr, r6
 800c6a4:	46d3      	mov	fp, sl
 800c6a6:	f850 2b04 	ldr.w	r2, [r0], #4
 800c6aa:	b293      	uxth	r3, r2
 800c6ac:	fb05 a303 	mla	r3, r5, r3, sl
 800c6b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	ebab 0303 	sub.w	r3, fp, r3
 800c6ba:	0c12      	lsrs	r2, r2, #16
 800c6bc:	f8de b000 	ldr.w	fp, [lr]
 800c6c0:	fb05 a202 	mla	r2, r5, r2, sl
 800c6c4:	fa13 f38b 	uxtah	r3, r3, fp
 800c6c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c6cc:	fa1f fb82 	uxth.w	fp, r2
 800c6d0:	f8de 2000 	ldr.w	r2, [lr]
 800c6d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c6d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6e2:	4581      	cmp	r9, r0
 800c6e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c6e8:	f84e 3b04 	str.w	r3, [lr], #4
 800c6ec:	d2db      	bcs.n	800c6a6 <quorem+0x42>
 800c6ee:	f856 300c 	ldr.w	r3, [r6, ip]
 800c6f2:	b933      	cbnz	r3, 800c702 <quorem+0x9e>
 800c6f4:	9b01      	ldr	r3, [sp, #4]
 800c6f6:	3b04      	subs	r3, #4
 800c6f8:	429e      	cmp	r6, r3
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	d330      	bcc.n	800c760 <quorem+0xfc>
 800c6fe:	f8c8 4010 	str.w	r4, [r8, #16]
 800c702:	4640      	mov	r0, r8
 800c704:	f001 f9fe 	bl	800db04 <__mcmp>
 800c708:	2800      	cmp	r0, #0
 800c70a:	db25      	blt.n	800c758 <quorem+0xf4>
 800c70c:	3501      	adds	r5, #1
 800c70e:	4630      	mov	r0, r6
 800c710:	f04f 0c00 	mov.w	ip, #0
 800c714:	f857 2b04 	ldr.w	r2, [r7], #4
 800c718:	f8d0 e000 	ldr.w	lr, [r0]
 800c71c:	b293      	uxth	r3, r2
 800c71e:	ebac 0303 	sub.w	r3, ip, r3
 800c722:	0c12      	lsrs	r2, r2, #16
 800c724:	fa13 f38e 	uxtah	r3, r3, lr
 800c728:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c72c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c730:	b29b      	uxth	r3, r3
 800c732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c736:	45b9      	cmp	r9, r7
 800c738:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c73c:	f840 3b04 	str.w	r3, [r0], #4
 800c740:	d2e8      	bcs.n	800c714 <quorem+0xb0>
 800c742:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c746:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c74a:	b92a      	cbnz	r2, 800c758 <quorem+0xf4>
 800c74c:	3b04      	subs	r3, #4
 800c74e:	429e      	cmp	r6, r3
 800c750:	461a      	mov	r2, r3
 800c752:	d30b      	bcc.n	800c76c <quorem+0x108>
 800c754:	f8c8 4010 	str.w	r4, [r8, #16]
 800c758:	4628      	mov	r0, r5
 800c75a:	b003      	add	sp, #12
 800c75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c760:	6812      	ldr	r2, [r2, #0]
 800c762:	3b04      	subs	r3, #4
 800c764:	2a00      	cmp	r2, #0
 800c766:	d1ca      	bne.n	800c6fe <quorem+0x9a>
 800c768:	3c01      	subs	r4, #1
 800c76a:	e7c5      	b.n	800c6f8 <quorem+0x94>
 800c76c:	6812      	ldr	r2, [r2, #0]
 800c76e:	3b04      	subs	r3, #4
 800c770:	2a00      	cmp	r2, #0
 800c772:	d1ef      	bne.n	800c754 <quorem+0xf0>
 800c774:	3c01      	subs	r4, #1
 800c776:	e7ea      	b.n	800c74e <quorem+0xea>
 800c778:	2000      	movs	r0, #0
 800c77a:	e7ee      	b.n	800c75a <quorem+0xf6>
 800c77c:	0000      	movs	r0, r0
	...

0800c780 <_dtoa_r>:
 800c780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c784:	ec57 6b10 	vmov	r6, r7, d0
 800c788:	b097      	sub	sp, #92	; 0x5c
 800c78a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c78c:	9106      	str	r1, [sp, #24]
 800c78e:	4604      	mov	r4, r0
 800c790:	920b      	str	r2, [sp, #44]	; 0x2c
 800c792:	9312      	str	r3, [sp, #72]	; 0x48
 800c794:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c798:	e9cd 6700 	strd	r6, r7, [sp]
 800c79c:	b93d      	cbnz	r5, 800c7ae <_dtoa_r+0x2e>
 800c79e:	2010      	movs	r0, #16
 800c7a0:	f000 ff92 	bl	800d6c8 <malloc>
 800c7a4:	6260      	str	r0, [r4, #36]	; 0x24
 800c7a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c7aa:	6005      	str	r5, [r0, #0]
 800c7ac:	60c5      	str	r5, [r0, #12]
 800c7ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7b0:	6819      	ldr	r1, [r3, #0]
 800c7b2:	b151      	cbz	r1, 800c7ca <_dtoa_r+0x4a>
 800c7b4:	685a      	ldr	r2, [r3, #4]
 800c7b6:	604a      	str	r2, [r1, #4]
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	4093      	lsls	r3, r2
 800c7bc:	608b      	str	r3, [r1, #8]
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f000 ffbe 	bl	800d740 <_Bfree>
 800c7c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	601a      	str	r2, [r3, #0]
 800c7ca:	1e3b      	subs	r3, r7, #0
 800c7cc:	bfbb      	ittet	lt
 800c7ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7d2:	9301      	strlt	r3, [sp, #4]
 800c7d4:	2300      	movge	r3, #0
 800c7d6:	2201      	movlt	r2, #1
 800c7d8:	bfac      	ite	ge
 800c7da:	f8c8 3000 	strge.w	r3, [r8]
 800c7de:	f8c8 2000 	strlt.w	r2, [r8]
 800c7e2:	4baf      	ldr	r3, [pc, #700]	; (800caa0 <_dtoa_r+0x320>)
 800c7e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c7e8:	ea33 0308 	bics.w	r3, r3, r8
 800c7ec:	d114      	bne.n	800c818 <_dtoa_r+0x98>
 800c7ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7f4:	6013      	str	r3, [r2, #0]
 800c7f6:	9b00      	ldr	r3, [sp, #0]
 800c7f8:	b923      	cbnz	r3, 800c804 <_dtoa_r+0x84>
 800c7fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c7fe:	2800      	cmp	r0, #0
 800c800:	f000 8542 	beq.w	800d288 <_dtoa_r+0xb08>
 800c804:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c806:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cab4 <_dtoa_r+0x334>
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 8544 	beq.w	800d298 <_dtoa_r+0xb18>
 800c810:	f10b 0303 	add.w	r3, fp, #3
 800c814:	f000 bd3e 	b.w	800d294 <_dtoa_r+0xb14>
 800c818:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c81c:	2200      	movs	r2, #0
 800c81e:	2300      	movs	r3, #0
 800c820:	4630      	mov	r0, r6
 800c822:	4639      	mov	r1, r7
 800c824:	f7f4 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 800c828:	4681      	mov	r9, r0
 800c82a:	b168      	cbz	r0, 800c848 <_dtoa_r+0xc8>
 800c82c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c82e:	2301      	movs	r3, #1
 800c830:	6013      	str	r3, [r2, #0]
 800c832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c834:	2b00      	cmp	r3, #0
 800c836:	f000 8524 	beq.w	800d282 <_dtoa_r+0xb02>
 800c83a:	4b9a      	ldr	r3, [pc, #616]	; (800caa4 <_dtoa_r+0x324>)
 800c83c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c83e:	f103 3bff 	add.w	fp, r3, #4294967295
 800c842:	6013      	str	r3, [r2, #0]
 800c844:	f000 bd28 	b.w	800d298 <_dtoa_r+0xb18>
 800c848:	aa14      	add	r2, sp, #80	; 0x50
 800c84a:	a915      	add	r1, sp, #84	; 0x54
 800c84c:	ec47 6b10 	vmov	d0, r6, r7
 800c850:	4620      	mov	r0, r4
 800c852:	f001 f9ce 	bl	800dbf2 <__d2b>
 800c856:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c85a:	9004      	str	r0, [sp, #16]
 800c85c:	2d00      	cmp	r5, #0
 800c85e:	d07c      	beq.n	800c95a <_dtoa_r+0x1da>
 800c860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c864:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c868:	46b2      	mov	sl, r6
 800c86a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c86e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c872:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c876:	2200      	movs	r2, #0
 800c878:	4b8b      	ldr	r3, [pc, #556]	; (800caa8 <_dtoa_r+0x328>)
 800c87a:	4650      	mov	r0, sl
 800c87c:	4659      	mov	r1, fp
 800c87e:	f7f3 fd03 	bl	8000288 <__aeabi_dsub>
 800c882:	a381      	add	r3, pc, #516	; (adr r3, 800ca88 <_dtoa_r+0x308>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	f7f3 feb6 	bl	80005f8 <__aeabi_dmul>
 800c88c:	a380      	add	r3, pc, #512	; (adr r3, 800ca90 <_dtoa_r+0x310>)
 800c88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c892:	f7f3 fcfb 	bl	800028c <__adddf3>
 800c896:	4606      	mov	r6, r0
 800c898:	4628      	mov	r0, r5
 800c89a:	460f      	mov	r7, r1
 800c89c:	f7f3 fe42 	bl	8000524 <__aeabi_i2d>
 800c8a0:	a37d      	add	r3, pc, #500	; (adr r3, 800ca98 <_dtoa_r+0x318>)
 800c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a6:	f7f3 fea7 	bl	80005f8 <__aeabi_dmul>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	4639      	mov	r1, r7
 800c8b2:	f7f3 fceb 	bl	800028c <__adddf3>
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	460f      	mov	r7, r1
 800c8ba:	f7f4 f94d 	bl	8000b58 <__aeabi_d2iz>
 800c8be:	2200      	movs	r2, #0
 800c8c0:	4682      	mov	sl, r0
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	4639      	mov	r1, r7
 800c8c8:	f7f4 f908 	bl	8000adc <__aeabi_dcmplt>
 800c8cc:	b148      	cbz	r0, 800c8e2 <_dtoa_r+0x162>
 800c8ce:	4650      	mov	r0, sl
 800c8d0:	f7f3 fe28 	bl	8000524 <__aeabi_i2d>
 800c8d4:	4632      	mov	r2, r6
 800c8d6:	463b      	mov	r3, r7
 800c8d8:	f7f4 f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8dc:	b908      	cbnz	r0, 800c8e2 <_dtoa_r+0x162>
 800c8de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8e2:	f1ba 0f16 	cmp.w	sl, #22
 800c8e6:	d859      	bhi.n	800c99c <_dtoa_r+0x21c>
 800c8e8:	4970      	ldr	r1, [pc, #448]	; (800caac <_dtoa_r+0x32c>)
 800c8ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c8ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8f6:	f7f4 f90f 	bl	8000b18 <__aeabi_dcmpgt>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d050      	beq.n	800c9a0 <_dtoa_r+0x220>
 800c8fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c902:	2300      	movs	r3, #0
 800c904:	930f      	str	r3, [sp, #60]	; 0x3c
 800c906:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c908:	1b5d      	subs	r5, r3, r5
 800c90a:	f1b5 0801 	subs.w	r8, r5, #1
 800c90e:	bf49      	itett	mi
 800c910:	f1c5 0301 	rsbmi	r3, r5, #1
 800c914:	2300      	movpl	r3, #0
 800c916:	9305      	strmi	r3, [sp, #20]
 800c918:	f04f 0800 	movmi.w	r8, #0
 800c91c:	bf58      	it	pl
 800c91e:	9305      	strpl	r3, [sp, #20]
 800c920:	f1ba 0f00 	cmp.w	sl, #0
 800c924:	db3e      	blt.n	800c9a4 <_dtoa_r+0x224>
 800c926:	2300      	movs	r3, #0
 800c928:	44d0      	add	r8, sl
 800c92a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c92e:	9307      	str	r3, [sp, #28]
 800c930:	9b06      	ldr	r3, [sp, #24]
 800c932:	2b09      	cmp	r3, #9
 800c934:	f200 8090 	bhi.w	800ca58 <_dtoa_r+0x2d8>
 800c938:	2b05      	cmp	r3, #5
 800c93a:	bfc4      	itt	gt
 800c93c:	3b04      	subgt	r3, #4
 800c93e:	9306      	strgt	r3, [sp, #24]
 800c940:	9b06      	ldr	r3, [sp, #24]
 800c942:	f1a3 0302 	sub.w	r3, r3, #2
 800c946:	bfcc      	ite	gt
 800c948:	2500      	movgt	r5, #0
 800c94a:	2501      	movle	r5, #1
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	f200 808f 	bhi.w	800ca70 <_dtoa_r+0x2f0>
 800c952:	e8df f003 	tbb	[pc, r3]
 800c956:	7f7d      	.short	0x7f7d
 800c958:	7131      	.short	0x7131
 800c95a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c95e:	441d      	add	r5, r3
 800c960:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c964:	2820      	cmp	r0, #32
 800c966:	dd13      	ble.n	800c990 <_dtoa_r+0x210>
 800c968:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c96c:	9b00      	ldr	r3, [sp, #0]
 800c96e:	fa08 f800 	lsl.w	r8, r8, r0
 800c972:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c976:	fa23 f000 	lsr.w	r0, r3, r0
 800c97a:	ea48 0000 	orr.w	r0, r8, r0
 800c97e:	f7f3 fdc1 	bl	8000504 <__aeabi_ui2d>
 800c982:	2301      	movs	r3, #1
 800c984:	4682      	mov	sl, r0
 800c986:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c98a:	3d01      	subs	r5, #1
 800c98c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c98e:	e772      	b.n	800c876 <_dtoa_r+0xf6>
 800c990:	9b00      	ldr	r3, [sp, #0]
 800c992:	f1c0 0020 	rsb	r0, r0, #32
 800c996:	fa03 f000 	lsl.w	r0, r3, r0
 800c99a:	e7f0      	b.n	800c97e <_dtoa_r+0x1fe>
 800c99c:	2301      	movs	r3, #1
 800c99e:	e7b1      	b.n	800c904 <_dtoa_r+0x184>
 800c9a0:	900f      	str	r0, [sp, #60]	; 0x3c
 800c9a2:	e7b0      	b.n	800c906 <_dtoa_r+0x186>
 800c9a4:	9b05      	ldr	r3, [sp, #20]
 800c9a6:	eba3 030a 	sub.w	r3, r3, sl
 800c9aa:	9305      	str	r3, [sp, #20]
 800c9ac:	f1ca 0300 	rsb	r3, sl, #0
 800c9b0:	9307      	str	r3, [sp, #28]
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	930e      	str	r3, [sp, #56]	; 0x38
 800c9b6:	e7bb      	b.n	800c930 <_dtoa_r+0x1b0>
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	930a      	str	r3, [sp, #40]	; 0x28
 800c9bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	dd59      	ble.n	800ca76 <_dtoa_r+0x2f6>
 800c9c2:	9302      	str	r3, [sp, #8]
 800c9c4:	4699      	mov	r9, r3
 800c9c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	6072      	str	r2, [r6, #4]
 800c9cc:	2204      	movs	r2, #4
 800c9ce:	f102 0014 	add.w	r0, r2, #20
 800c9d2:	4298      	cmp	r0, r3
 800c9d4:	6871      	ldr	r1, [r6, #4]
 800c9d6:	d953      	bls.n	800ca80 <_dtoa_r+0x300>
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f000 fe7d 	bl	800d6d8 <_Balloc>
 800c9de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9e0:	6030      	str	r0, [r6, #0]
 800c9e2:	f1b9 0f0e 	cmp.w	r9, #14
 800c9e6:	f8d3 b000 	ldr.w	fp, [r3]
 800c9ea:	f200 80e6 	bhi.w	800cbba <_dtoa_r+0x43a>
 800c9ee:	2d00      	cmp	r5, #0
 800c9f0:	f000 80e3 	beq.w	800cbba <_dtoa_r+0x43a>
 800c9f4:	ed9d 7b00 	vldr	d7, [sp]
 800c9f8:	f1ba 0f00 	cmp.w	sl, #0
 800c9fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ca00:	dd74      	ble.n	800caec <_dtoa_r+0x36c>
 800ca02:	4a2a      	ldr	r2, [pc, #168]	; (800caac <_dtoa_r+0x32c>)
 800ca04:	f00a 030f 	and.w	r3, sl, #15
 800ca08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca0c:	ed93 7b00 	vldr	d7, [r3]
 800ca10:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ca14:	06f0      	lsls	r0, r6, #27
 800ca16:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ca1a:	d565      	bpl.n	800cae8 <_dtoa_r+0x368>
 800ca1c:	4b24      	ldr	r3, [pc, #144]	; (800cab0 <_dtoa_r+0x330>)
 800ca1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca26:	f7f3 ff11 	bl	800084c <__aeabi_ddiv>
 800ca2a:	e9cd 0100 	strd	r0, r1, [sp]
 800ca2e:	f006 060f 	and.w	r6, r6, #15
 800ca32:	2503      	movs	r5, #3
 800ca34:	4f1e      	ldr	r7, [pc, #120]	; (800cab0 <_dtoa_r+0x330>)
 800ca36:	e04c      	b.n	800cad2 <_dtoa_r+0x352>
 800ca38:	2301      	movs	r3, #1
 800ca3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca3e:	4453      	add	r3, sl
 800ca40:	f103 0901 	add.w	r9, r3, #1
 800ca44:	9302      	str	r3, [sp, #8]
 800ca46:	464b      	mov	r3, r9
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	bfb8      	it	lt
 800ca4c:	2301      	movlt	r3, #1
 800ca4e:	e7ba      	b.n	800c9c6 <_dtoa_r+0x246>
 800ca50:	2300      	movs	r3, #0
 800ca52:	e7b2      	b.n	800c9ba <_dtoa_r+0x23a>
 800ca54:	2300      	movs	r3, #0
 800ca56:	e7f0      	b.n	800ca3a <_dtoa_r+0x2ba>
 800ca58:	2501      	movs	r5, #1
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	9306      	str	r3, [sp, #24]
 800ca5e:	950a      	str	r5, [sp, #40]	; 0x28
 800ca60:	f04f 33ff 	mov.w	r3, #4294967295
 800ca64:	9302      	str	r3, [sp, #8]
 800ca66:	4699      	mov	r9, r3
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2312      	movs	r3, #18
 800ca6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca6e:	e7aa      	b.n	800c9c6 <_dtoa_r+0x246>
 800ca70:	2301      	movs	r3, #1
 800ca72:	930a      	str	r3, [sp, #40]	; 0x28
 800ca74:	e7f4      	b.n	800ca60 <_dtoa_r+0x2e0>
 800ca76:	2301      	movs	r3, #1
 800ca78:	9302      	str	r3, [sp, #8]
 800ca7a:	4699      	mov	r9, r3
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	e7f5      	b.n	800ca6c <_dtoa_r+0x2ec>
 800ca80:	3101      	adds	r1, #1
 800ca82:	6071      	str	r1, [r6, #4]
 800ca84:	0052      	lsls	r2, r2, #1
 800ca86:	e7a2      	b.n	800c9ce <_dtoa_r+0x24e>
 800ca88:	636f4361 	.word	0x636f4361
 800ca8c:	3fd287a7 	.word	0x3fd287a7
 800ca90:	8b60c8b3 	.word	0x8b60c8b3
 800ca94:	3fc68a28 	.word	0x3fc68a28
 800ca98:	509f79fb 	.word	0x509f79fb
 800ca9c:	3fd34413 	.word	0x3fd34413
 800caa0:	7ff00000 	.word	0x7ff00000
 800caa4:	0800eeb1 	.word	0x0800eeb1
 800caa8:	3ff80000 	.word	0x3ff80000
 800caac:	0800ef70 	.word	0x0800ef70
 800cab0:	0800ef48 	.word	0x0800ef48
 800cab4:	0800eedd 	.word	0x0800eedd
 800cab8:	07f1      	lsls	r1, r6, #31
 800caba:	d508      	bpl.n	800cace <_dtoa_r+0x34e>
 800cabc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cac4:	f7f3 fd98 	bl	80005f8 <__aeabi_dmul>
 800cac8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cacc:	3501      	adds	r5, #1
 800cace:	1076      	asrs	r6, r6, #1
 800cad0:	3708      	adds	r7, #8
 800cad2:	2e00      	cmp	r6, #0
 800cad4:	d1f0      	bne.n	800cab8 <_dtoa_r+0x338>
 800cad6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cada:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cade:	f7f3 feb5 	bl	800084c <__aeabi_ddiv>
 800cae2:	e9cd 0100 	strd	r0, r1, [sp]
 800cae6:	e01a      	b.n	800cb1e <_dtoa_r+0x39e>
 800cae8:	2502      	movs	r5, #2
 800caea:	e7a3      	b.n	800ca34 <_dtoa_r+0x2b4>
 800caec:	f000 80a0 	beq.w	800cc30 <_dtoa_r+0x4b0>
 800caf0:	f1ca 0600 	rsb	r6, sl, #0
 800caf4:	4b9f      	ldr	r3, [pc, #636]	; (800cd74 <_dtoa_r+0x5f4>)
 800caf6:	4fa0      	ldr	r7, [pc, #640]	; (800cd78 <_dtoa_r+0x5f8>)
 800caf8:	f006 020f 	and.w	r2, r6, #15
 800cafc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb08:	f7f3 fd76 	bl	80005f8 <__aeabi_dmul>
 800cb0c:	e9cd 0100 	strd	r0, r1, [sp]
 800cb10:	1136      	asrs	r6, r6, #4
 800cb12:	2300      	movs	r3, #0
 800cb14:	2502      	movs	r5, #2
 800cb16:	2e00      	cmp	r6, #0
 800cb18:	d17f      	bne.n	800cc1a <_dtoa_r+0x49a>
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1e1      	bne.n	800cae2 <_dtoa_r+0x362>
 800cb1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 8087 	beq.w	800cc34 <_dtoa_r+0x4b4>
 800cb26:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	4b93      	ldr	r3, [pc, #588]	; (800cd7c <_dtoa_r+0x5fc>)
 800cb2e:	4630      	mov	r0, r6
 800cb30:	4639      	mov	r1, r7
 800cb32:	f7f3 ffd3 	bl	8000adc <__aeabi_dcmplt>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d07c      	beq.n	800cc34 <_dtoa_r+0x4b4>
 800cb3a:	f1b9 0f00 	cmp.w	r9, #0
 800cb3e:	d079      	beq.n	800cc34 <_dtoa_r+0x4b4>
 800cb40:	9b02      	ldr	r3, [sp, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	dd35      	ble.n	800cbb2 <_dtoa_r+0x432>
 800cb46:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cb4a:	9308      	str	r3, [sp, #32]
 800cb4c:	4639      	mov	r1, r7
 800cb4e:	2200      	movs	r2, #0
 800cb50:	4b8b      	ldr	r3, [pc, #556]	; (800cd80 <_dtoa_r+0x600>)
 800cb52:	4630      	mov	r0, r6
 800cb54:	f7f3 fd50 	bl	80005f8 <__aeabi_dmul>
 800cb58:	e9cd 0100 	strd	r0, r1, [sp]
 800cb5c:	9f02      	ldr	r7, [sp, #8]
 800cb5e:	3501      	adds	r5, #1
 800cb60:	4628      	mov	r0, r5
 800cb62:	f7f3 fcdf 	bl	8000524 <__aeabi_i2d>
 800cb66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb6a:	f7f3 fd45 	bl	80005f8 <__aeabi_dmul>
 800cb6e:	2200      	movs	r2, #0
 800cb70:	4b84      	ldr	r3, [pc, #528]	; (800cd84 <_dtoa_r+0x604>)
 800cb72:	f7f3 fb8b 	bl	800028c <__adddf3>
 800cb76:	4605      	mov	r5, r0
 800cb78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cb7c:	2f00      	cmp	r7, #0
 800cb7e:	d15d      	bne.n	800cc3c <_dtoa_r+0x4bc>
 800cb80:	2200      	movs	r2, #0
 800cb82:	4b81      	ldr	r3, [pc, #516]	; (800cd88 <_dtoa_r+0x608>)
 800cb84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb88:	f7f3 fb7e 	bl	8000288 <__aeabi_dsub>
 800cb8c:	462a      	mov	r2, r5
 800cb8e:	4633      	mov	r3, r6
 800cb90:	e9cd 0100 	strd	r0, r1, [sp]
 800cb94:	f7f3 ffc0 	bl	8000b18 <__aeabi_dcmpgt>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	f040 8288 	bne.w	800d0ae <_dtoa_r+0x92e>
 800cb9e:	462a      	mov	r2, r5
 800cba0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cba8:	f7f3 ff98 	bl	8000adc <__aeabi_dcmplt>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	f040 827c 	bne.w	800d0aa <_dtoa_r+0x92a>
 800cbb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cbb6:	e9cd 2300 	strd	r2, r3, [sp]
 800cbba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f2c0 8150 	blt.w	800ce62 <_dtoa_r+0x6e2>
 800cbc2:	f1ba 0f0e 	cmp.w	sl, #14
 800cbc6:	f300 814c 	bgt.w	800ce62 <_dtoa_r+0x6e2>
 800cbca:	4b6a      	ldr	r3, [pc, #424]	; (800cd74 <_dtoa_r+0x5f4>)
 800cbcc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cbd0:	ed93 7b00 	vldr	d7, [r3]
 800cbd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cbdc:	f280 80d8 	bge.w	800cd90 <_dtoa_r+0x610>
 800cbe0:	f1b9 0f00 	cmp.w	r9, #0
 800cbe4:	f300 80d4 	bgt.w	800cd90 <_dtoa_r+0x610>
 800cbe8:	f040 825e 	bne.w	800d0a8 <_dtoa_r+0x928>
 800cbec:	2200      	movs	r2, #0
 800cbee:	4b66      	ldr	r3, [pc, #408]	; (800cd88 <_dtoa_r+0x608>)
 800cbf0:	ec51 0b17 	vmov	r0, r1, d7
 800cbf4:	f7f3 fd00 	bl	80005f8 <__aeabi_dmul>
 800cbf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbfc:	f7f3 ff82 	bl	8000b04 <__aeabi_dcmpge>
 800cc00:	464f      	mov	r7, r9
 800cc02:	464e      	mov	r6, r9
 800cc04:	2800      	cmp	r0, #0
 800cc06:	f040 8234 	bne.w	800d072 <_dtoa_r+0x8f2>
 800cc0a:	2331      	movs	r3, #49	; 0x31
 800cc0c:	f10b 0501 	add.w	r5, fp, #1
 800cc10:	f88b 3000 	strb.w	r3, [fp]
 800cc14:	f10a 0a01 	add.w	sl, sl, #1
 800cc18:	e22f      	b.n	800d07a <_dtoa_r+0x8fa>
 800cc1a:	07f2      	lsls	r2, r6, #31
 800cc1c:	d505      	bpl.n	800cc2a <_dtoa_r+0x4aa>
 800cc1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc22:	f7f3 fce9 	bl	80005f8 <__aeabi_dmul>
 800cc26:	3501      	adds	r5, #1
 800cc28:	2301      	movs	r3, #1
 800cc2a:	1076      	asrs	r6, r6, #1
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	e772      	b.n	800cb16 <_dtoa_r+0x396>
 800cc30:	2502      	movs	r5, #2
 800cc32:	e774      	b.n	800cb1e <_dtoa_r+0x39e>
 800cc34:	f8cd a020 	str.w	sl, [sp, #32]
 800cc38:	464f      	mov	r7, r9
 800cc3a:	e791      	b.n	800cb60 <_dtoa_r+0x3e0>
 800cc3c:	4b4d      	ldr	r3, [pc, #308]	; (800cd74 <_dtoa_r+0x5f4>)
 800cc3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cc46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d047      	beq.n	800ccdc <_dtoa_r+0x55c>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	460b      	mov	r3, r1
 800cc50:	2000      	movs	r0, #0
 800cc52:	494e      	ldr	r1, [pc, #312]	; (800cd8c <_dtoa_r+0x60c>)
 800cc54:	f7f3 fdfa 	bl	800084c <__aeabi_ddiv>
 800cc58:	462a      	mov	r2, r5
 800cc5a:	4633      	mov	r3, r6
 800cc5c:	f7f3 fb14 	bl	8000288 <__aeabi_dsub>
 800cc60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc64:	465d      	mov	r5, fp
 800cc66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc6a:	f7f3 ff75 	bl	8000b58 <__aeabi_d2iz>
 800cc6e:	4606      	mov	r6, r0
 800cc70:	f7f3 fc58 	bl	8000524 <__aeabi_i2d>
 800cc74:	4602      	mov	r2, r0
 800cc76:	460b      	mov	r3, r1
 800cc78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc7c:	f7f3 fb04 	bl	8000288 <__aeabi_dsub>
 800cc80:	3630      	adds	r6, #48	; 0x30
 800cc82:	f805 6b01 	strb.w	r6, [r5], #1
 800cc86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc8a:	e9cd 0100 	strd	r0, r1, [sp]
 800cc8e:	f7f3 ff25 	bl	8000adc <__aeabi_dcmplt>
 800cc92:	2800      	cmp	r0, #0
 800cc94:	d163      	bne.n	800cd5e <_dtoa_r+0x5de>
 800cc96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	4937      	ldr	r1, [pc, #220]	; (800cd7c <_dtoa_r+0x5fc>)
 800cc9e:	f7f3 faf3 	bl	8000288 <__aeabi_dsub>
 800cca2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cca6:	f7f3 ff19 	bl	8000adc <__aeabi_dcmplt>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	f040 80b7 	bne.w	800ce1e <_dtoa_r+0x69e>
 800ccb0:	eba5 030b 	sub.w	r3, r5, fp
 800ccb4:	429f      	cmp	r7, r3
 800ccb6:	f77f af7c 	ble.w	800cbb2 <_dtoa_r+0x432>
 800ccba:	2200      	movs	r2, #0
 800ccbc:	4b30      	ldr	r3, [pc, #192]	; (800cd80 <_dtoa_r+0x600>)
 800ccbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ccc2:	f7f3 fc99 	bl	80005f8 <__aeabi_dmul>
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cccc:	4b2c      	ldr	r3, [pc, #176]	; (800cd80 <_dtoa_r+0x600>)
 800ccce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccd2:	f7f3 fc91 	bl	80005f8 <__aeabi_dmul>
 800ccd6:	e9cd 0100 	strd	r0, r1, [sp]
 800ccda:	e7c4      	b.n	800cc66 <_dtoa_r+0x4e6>
 800ccdc:	462a      	mov	r2, r5
 800ccde:	4633      	mov	r3, r6
 800cce0:	f7f3 fc8a 	bl	80005f8 <__aeabi_dmul>
 800cce4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cce8:	eb0b 0507 	add.w	r5, fp, r7
 800ccec:	465e      	mov	r6, fp
 800ccee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccf2:	f7f3 ff31 	bl	8000b58 <__aeabi_d2iz>
 800ccf6:	4607      	mov	r7, r0
 800ccf8:	f7f3 fc14 	bl	8000524 <__aeabi_i2d>
 800ccfc:	3730      	adds	r7, #48	; 0x30
 800ccfe:	4602      	mov	r2, r0
 800cd00:	460b      	mov	r3, r1
 800cd02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd06:	f7f3 fabf 	bl	8000288 <__aeabi_dsub>
 800cd0a:	f806 7b01 	strb.w	r7, [r6], #1
 800cd0e:	42ae      	cmp	r6, r5
 800cd10:	e9cd 0100 	strd	r0, r1, [sp]
 800cd14:	f04f 0200 	mov.w	r2, #0
 800cd18:	d126      	bne.n	800cd68 <_dtoa_r+0x5e8>
 800cd1a:	4b1c      	ldr	r3, [pc, #112]	; (800cd8c <_dtoa_r+0x60c>)
 800cd1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd20:	f7f3 fab4 	bl	800028c <__adddf3>
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd2c:	f7f3 fef4 	bl	8000b18 <__aeabi_dcmpgt>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d174      	bne.n	800ce1e <_dtoa_r+0x69e>
 800cd34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cd38:	2000      	movs	r0, #0
 800cd3a:	4914      	ldr	r1, [pc, #80]	; (800cd8c <_dtoa_r+0x60c>)
 800cd3c:	f7f3 faa4 	bl	8000288 <__aeabi_dsub>
 800cd40:	4602      	mov	r2, r0
 800cd42:	460b      	mov	r3, r1
 800cd44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd48:	f7f3 fec8 	bl	8000adc <__aeabi_dcmplt>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	f43f af30 	beq.w	800cbb2 <_dtoa_r+0x432>
 800cd52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd56:	2b30      	cmp	r3, #48	; 0x30
 800cd58:	f105 32ff 	add.w	r2, r5, #4294967295
 800cd5c:	d002      	beq.n	800cd64 <_dtoa_r+0x5e4>
 800cd5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cd62:	e04a      	b.n	800cdfa <_dtoa_r+0x67a>
 800cd64:	4615      	mov	r5, r2
 800cd66:	e7f4      	b.n	800cd52 <_dtoa_r+0x5d2>
 800cd68:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <_dtoa_r+0x600>)
 800cd6a:	f7f3 fc45 	bl	80005f8 <__aeabi_dmul>
 800cd6e:	e9cd 0100 	strd	r0, r1, [sp]
 800cd72:	e7bc      	b.n	800ccee <_dtoa_r+0x56e>
 800cd74:	0800ef70 	.word	0x0800ef70
 800cd78:	0800ef48 	.word	0x0800ef48
 800cd7c:	3ff00000 	.word	0x3ff00000
 800cd80:	40240000 	.word	0x40240000
 800cd84:	401c0000 	.word	0x401c0000
 800cd88:	40140000 	.word	0x40140000
 800cd8c:	3fe00000 	.word	0x3fe00000
 800cd90:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd94:	465d      	mov	r5, fp
 800cd96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	4639      	mov	r1, r7
 800cd9e:	f7f3 fd55 	bl	800084c <__aeabi_ddiv>
 800cda2:	f7f3 fed9 	bl	8000b58 <__aeabi_d2iz>
 800cda6:	4680      	mov	r8, r0
 800cda8:	f7f3 fbbc 	bl	8000524 <__aeabi_i2d>
 800cdac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdb0:	f7f3 fc22 	bl	80005f8 <__aeabi_dmul>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4630      	mov	r0, r6
 800cdba:	4639      	mov	r1, r7
 800cdbc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cdc0:	f7f3 fa62 	bl	8000288 <__aeabi_dsub>
 800cdc4:	f805 6b01 	strb.w	r6, [r5], #1
 800cdc8:	eba5 060b 	sub.w	r6, r5, fp
 800cdcc:	45b1      	cmp	r9, r6
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	d139      	bne.n	800ce48 <_dtoa_r+0x6c8>
 800cdd4:	f7f3 fa5a 	bl	800028c <__adddf3>
 800cdd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cddc:	4606      	mov	r6, r0
 800cdde:	460f      	mov	r7, r1
 800cde0:	f7f3 fe9a 	bl	8000b18 <__aeabi_dcmpgt>
 800cde4:	b9c8      	cbnz	r0, 800ce1a <_dtoa_r+0x69a>
 800cde6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdea:	4630      	mov	r0, r6
 800cdec:	4639      	mov	r1, r7
 800cdee:	f7f3 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdf2:	b110      	cbz	r0, 800cdfa <_dtoa_r+0x67a>
 800cdf4:	f018 0f01 	tst.w	r8, #1
 800cdf8:	d10f      	bne.n	800ce1a <_dtoa_r+0x69a>
 800cdfa:	9904      	ldr	r1, [sp, #16]
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f000 fc9f 	bl	800d740 <_Bfree>
 800ce02:	2300      	movs	r3, #0
 800ce04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce06:	702b      	strb	r3, [r5, #0]
 800ce08:	f10a 0301 	add.w	r3, sl, #1
 800ce0c:	6013      	str	r3, [r2, #0]
 800ce0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f000 8241 	beq.w	800d298 <_dtoa_r+0xb18>
 800ce16:	601d      	str	r5, [r3, #0]
 800ce18:	e23e      	b.n	800d298 <_dtoa_r+0xb18>
 800ce1a:	f8cd a020 	str.w	sl, [sp, #32]
 800ce1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce22:	2a39      	cmp	r2, #57	; 0x39
 800ce24:	f105 33ff 	add.w	r3, r5, #4294967295
 800ce28:	d108      	bne.n	800ce3c <_dtoa_r+0x6bc>
 800ce2a:	459b      	cmp	fp, r3
 800ce2c:	d10a      	bne.n	800ce44 <_dtoa_r+0x6c4>
 800ce2e:	9b08      	ldr	r3, [sp, #32]
 800ce30:	3301      	adds	r3, #1
 800ce32:	9308      	str	r3, [sp, #32]
 800ce34:	2330      	movs	r3, #48	; 0x30
 800ce36:	f88b 3000 	strb.w	r3, [fp]
 800ce3a:	465b      	mov	r3, fp
 800ce3c:	781a      	ldrb	r2, [r3, #0]
 800ce3e:	3201      	adds	r2, #1
 800ce40:	701a      	strb	r2, [r3, #0]
 800ce42:	e78c      	b.n	800cd5e <_dtoa_r+0x5de>
 800ce44:	461d      	mov	r5, r3
 800ce46:	e7ea      	b.n	800ce1e <_dtoa_r+0x69e>
 800ce48:	2200      	movs	r2, #0
 800ce4a:	4b9b      	ldr	r3, [pc, #620]	; (800d0b8 <_dtoa_r+0x938>)
 800ce4c:	f7f3 fbd4 	bl	80005f8 <__aeabi_dmul>
 800ce50:	2200      	movs	r2, #0
 800ce52:	2300      	movs	r3, #0
 800ce54:	4606      	mov	r6, r0
 800ce56:	460f      	mov	r7, r1
 800ce58:	f7f3 fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d09a      	beq.n	800cd96 <_dtoa_r+0x616>
 800ce60:	e7cb      	b.n	800cdfa <_dtoa_r+0x67a>
 800ce62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce64:	2a00      	cmp	r2, #0
 800ce66:	f000 808b 	beq.w	800cf80 <_dtoa_r+0x800>
 800ce6a:	9a06      	ldr	r2, [sp, #24]
 800ce6c:	2a01      	cmp	r2, #1
 800ce6e:	dc6e      	bgt.n	800cf4e <_dtoa_r+0x7ce>
 800ce70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce72:	2a00      	cmp	r2, #0
 800ce74:	d067      	beq.n	800cf46 <_dtoa_r+0x7c6>
 800ce76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce7a:	9f07      	ldr	r7, [sp, #28]
 800ce7c:	9d05      	ldr	r5, [sp, #20]
 800ce7e:	9a05      	ldr	r2, [sp, #20]
 800ce80:	2101      	movs	r1, #1
 800ce82:	441a      	add	r2, r3
 800ce84:	4620      	mov	r0, r4
 800ce86:	9205      	str	r2, [sp, #20]
 800ce88:	4498      	add	r8, r3
 800ce8a:	f000 fcf9 	bl	800d880 <__i2b>
 800ce8e:	4606      	mov	r6, r0
 800ce90:	2d00      	cmp	r5, #0
 800ce92:	dd0c      	ble.n	800ceae <_dtoa_r+0x72e>
 800ce94:	f1b8 0f00 	cmp.w	r8, #0
 800ce98:	dd09      	ble.n	800ceae <_dtoa_r+0x72e>
 800ce9a:	4545      	cmp	r5, r8
 800ce9c:	9a05      	ldr	r2, [sp, #20]
 800ce9e:	462b      	mov	r3, r5
 800cea0:	bfa8      	it	ge
 800cea2:	4643      	movge	r3, r8
 800cea4:	1ad2      	subs	r2, r2, r3
 800cea6:	9205      	str	r2, [sp, #20]
 800cea8:	1aed      	subs	r5, r5, r3
 800ceaa:	eba8 0803 	sub.w	r8, r8, r3
 800ceae:	9b07      	ldr	r3, [sp, #28]
 800ceb0:	b1eb      	cbz	r3, 800ceee <_dtoa_r+0x76e>
 800ceb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d067      	beq.n	800cf88 <_dtoa_r+0x808>
 800ceb8:	b18f      	cbz	r7, 800cede <_dtoa_r+0x75e>
 800ceba:	4631      	mov	r1, r6
 800cebc:	463a      	mov	r2, r7
 800cebe:	4620      	mov	r0, r4
 800cec0:	f000 fd7e 	bl	800d9c0 <__pow5mult>
 800cec4:	9a04      	ldr	r2, [sp, #16]
 800cec6:	4601      	mov	r1, r0
 800cec8:	4606      	mov	r6, r0
 800ceca:	4620      	mov	r0, r4
 800cecc:	f000 fce1 	bl	800d892 <__multiply>
 800ced0:	9904      	ldr	r1, [sp, #16]
 800ced2:	9008      	str	r0, [sp, #32]
 800ced4:	4620      	mov	r0, r4
 800ced6:	f000 fc33 	bl	800d740 <_Bfree>
 800ceda:	9b08      	ldr	r3, [sp, #32]
 800cedc:	9304      	str	r3, [sp, #16]
 800cede:	9b07      	ldr	r3, [sp, #28]
 800cee0:	1bda      	subs	r2, r3, r7
 800cee2:	d004      	beq.n	800ceee <_dtoa_r+0x76e>
 800cee4:	9904      	ldr	r1, [sp, #16]
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 fd6a 	bl	800d9c0 <__pow5mult>
 800ceec:	9004      	str	r0, [sp, #16]
 800ceee:	2101      	movs	r1, #1
 800cef0:	4620      	mov	r0, r4
 800cef2:	f000 fcc5 	bl	800d880 <__i2b>
 800cef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cef8:	4607      	mov	r7, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f000 81d0 	beq.w	800d2a0 <_dtoa_r+0xb20>
 800cf00:	461a      	mov	r2, r3
 800cf02:	4601      	mov	r1, r0
 800cf04:	4620      	mov	r0, r4
 800cf06:	f000 fd5b 	bl	800d9c0 <__pow5mult>
 800cf0a:	9b06      	ldr	r3, [sp, #24]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	4607      	mov	r7, r0
 800cf10:	dc40      	bgt.n	800cf94 <_dtoa_r+0x814>
 800cf12:	9b00      	ldr	r3, [sp, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d139      	bne.n	800cf8c <_dtoa_r+0x80c>
 800cf18:	9b01      	ldr	r3, [sp, #4]
 800cf1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d136      	bne.n	800cf90 <_dtoa_r+0x810>
 800cf22:	9b01      	ldr	r3, [sp, #4]
 800cf24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf28:	0d1b      	lsrs	r3, r3, #20
 800cf2a:	051b      	lsls	r3, r3, #20
 800cf2c:	b12b      	cbz	r3, 800cf3a <_dtoa_r+0x7ba>
 800cf2e:	9b05      	ldr	r3, [sp, #20]
 800cf30:	3301      	adds	r3, #1
 800cf32:	9305      	str	r3, [sp, #20]
 800cf34:	f108 0801 	add.w	r8, r8, #1
 800cf38:	2301      	movs	r3, #1
 800cf3a:	9307      	str	r3, [sp, #28]
 800cf3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d12a      	bne.n	800cf98 <_dtoa_r+0x818>
 800cf42:	2001      	movs	r0, #1
 800cf44:	e030      	b.n	800cfa8 <_dtoa_r+0x828>
 800cf46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf4c:	e795      	b.n	800ce7a <_dtoa_r+0x6fa>
 800cf4e:	9b07      	ldr	r3, [sp, #28]
 800cf50:	f109 37ff 	add.w	r7, r9, #4294967295
 800cf54:	42bb      	cmp	r3, r7
 800cf56:	bfbf      	itttt	lt
 800cf58:	9b07      	ldrlt	r3, [sp, #28]
 800cf5a:	9707      	strlt	r7, [sp, #28]
 800cf5c:	1afa      	sublt	r2, r7, r3
 800cf5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cf60:	bfbb      	ittet	lt
 800cf62:	189b      	addlt	r3, r3, r2
 800cf64:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cf66:	1bdf      	subge	r7, r3, r7
 800cf68:	2700      	movlt	r7, #0
 800cf6a:	f1b9 0f00 	cmp.w	r9, #0
 800cf6e:	bfb5      	itete	lt
 800cf70:	9b05      	ldrlt	r3, [sp, #20]
 800cf72:	9d05      	ldrge	r5, [sp, #20]
 800cf74:	eba3 0509 	sublt.w	r5, r3, r9
 800cf78:	464b      	movge	r3, r9
 800cf7a:	bfb8      	it	lt
 800cf7c:	2300      	movlt	r3, #0
 800cf7e:	e77e      	b.n	800ce7e <_dtoa_r+0x6fe>
 800cf80:	9f07      	ldr	r7, [sp, #28]
 800cf82:	9d05      	ldr	r5, [sp, #20]
 800cf84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cf86:	e783      	b.n	800ce90 <_dtoa_r+0x710>
 800cf88:	9a07      	ldr	r2, [sp, #28]
 800cf8a:	e7ab      	b.n	800cee4 <_dtoa_r+0x764>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	e7d4      	b.n	800cf3a <_dtoa_r+0x7ba>
 800cf90:	9b00      	ldr	r3, [sp, #0]
 800cf92:	e7d2      	b.n	800cf3a <_dtoa_r+0x7ba>
 800cf94:	2300      	movs	r3, #0
 800cf96:	9307      	str	r3, [sp, #28]
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cf9e:	6918      	ldr	r0, [r3, #16]
 800cfa0:	f000 fc20 	bl	800d7e4 <__hi0bits>
 800cfa4:	f1c0 0020 	rsb	r0, r0, #32
 800cfa8:	4440      	add	r0, r8
 800cfaa:	f010 001f 	ands.w	r0, r0, #31
 800cfae:	d047      	beq.n	800d040 <_dtoa_r+0x8c0>
 800cfb0:	f1c0 0320 	rsb	r3, r0, #32
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	dd3b      	ble.n	800d030 <_dtoa_r+0x8b0>
 800cfb8:	9b05      	ldr	r3, [sp, #20]
 800cfba:	f1c0 001c 	rsb	r0, r0, #28
 800cfbe:	4403      	add	r3, r0
 800cfc0:	9305      	str	r3, [sp, #20]
 800cfc2:	4405      	add	r5, r0
 800cfc4:	4480      	add	r8, r0
 800cfc6:	9b05      	ldr	r3, [sp, #20]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	dd05      	ble.n	800cfd8 <_dtoa_r+0x858>
 800cfcc:	461a      	mov	r2, r3
 800cfce:	9904      	ldr	r1, [sp, #16]
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f000 fd43 	bl	800da5c <__lshift>
 800cfd6:	9004      	str	r0, [sp, #16]
 800cfd8:	f1b8 0f00 	cmp.w	r8, #0
 800cfdc:	dd05      	ble.n	800cfea <_dtoa_r+0x86a>
 800cfde:	4639      	mov	r1, r7
 800cfe0:	4642      	mov	r2, r8
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f000 fd3a 	bl	800da5c <__lshift>
 800cfe8:	4607      	mov	r7, r0
 800cfea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfec:	b353      	cbz	r3, 800d044 <_dtoa_r+0x8c4>
 800cfee:	4639      	mov	r1, r7
 800cff0:	9804      	ldr	r0, [sp, #16]
 800cff2:	f000 fd87 	bl	800db04 <__mcmp>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	da24      	bge.n	800d044 <_dtoa_r+0x8c4>
 800cffa:	2300      	movs	r3, #0
 800cffc:	220a      	movs	r2, #10
 800cffe:	9904      	ldr	r1, [sp, #16]
 800d000:	4620      	mov	r0, r4
 800d002:	f000 fbb4 	bl	800d76e <__multadd>
 800d006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d008:	9004      	str	r0, [sp, #16]
 800d00a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f000 814d 	beq.w	800d2ae <_dtoa_r+0xb2e>
 800d014:	2300      	movs	r3, #0
 800d016:	4631      	mov	r1, r6
 800d018:	220a      	movs	r2, #10
 800d01a:	4620      	mov	r0, r4
 800d01c:	f000 fba7 	bl	800d76e <__multadd>
 800d020:	9b02      	ldr	r3, [sp, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	4606      	mov	r6, r0
 800d026:	dc4f      	bgt.n	800d0c8 <_dtoa_r+0x948>
 800d028:	9b06      	ldr	r3, [sp, #24]
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	dd4c      	ble.n	800d0c8 <_dtoa_r+0x948>
 800d02e:	e011      	b.n	800d054 <_dtoa_r+0x8d4>
 800d030:	d0c9      	beq.n	800cfc6 <_dtoa_r+0x846>
 800d032:	9a05      	ldr	r2, [sp, #20]
 800d034:	331c      	adds	r3, #28
 800d036:	441a      	add	r2, r3
 800d038:	9205      	str	r2, [sp, #20]
 800d03a:	441d      	add	r5, r3
 800d03c:	4498      	add	r8, r3
 800d03e:	e7c2      	b.n	800cfc6 <_dtoa_r+0x846>
 800d040:	4603      	mov	r3, r0
 800d042:	e7f6      	b.n	800d032 <_dtoa_r+0x8b2>
 800d044:	f1b9 0f00 	cmp.w	r9, #0
 800d048:	dc38      	bgt.n	800d0bc <_dtoa_r+0x93c>
 800d04a:	9b06      	ldr	r3, [sp, #24]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	dd35      	ble.n	800d0bc <_dtoa_r+0x93c>
 800d050:	f8cd 9008 	str.w	r9, [sp, #8]
 800d054:	9b02      	ldr	r3, [sp, #8]
 800d056:	b963      	cbnz	r3, 800d072 <_dtoa_r+0x8f2>
 800d058:	4639      	mov	r1, r7
 800d05a:	2205      	movs	r2, #5
 800d05c:	4620      	mov	r0, r4
 800d05e:	f000 fb86 	bl	800d76e <__multadd>
 800d062:	4601      	mov	r1, r0
 800d064:	4607      	mov	r7, r0
 800d066:	9804      	ldr	r0, [sp, #16]
 800d068:	f000 fd4c 	bl	800db04 <__mcmp>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	f73f adcc 	bgt.w	800cc0a <_dtoa_r+0x48a>
 800d072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d074:	465d      	mov	r5, fp
 800d076:	ea6f 0a03 	mvn.w	sl, r3
 800d07a:	f04f 0900 	mov.w	r9, #0
 800d07e:	4639      	mov	r1, r7
 800d080:	4620      	mov	r0, r4
 800d082:	f000 fb5d 	bl	800d740 <_Bfree>
 800d086:	2e00      	cmp	r6, #0
 800d088:	f43f aeb7 	beq.w	800cdfa <_dtoa_r+0x67a>
 800d08c:	f1b9 0f00 	cmp.w	r9, #0
 800d090:	d005      	beq.n	800d09e <_dtoa_r+0x91e>
 800d092:	45b1      	cmp	r9, r6
 800d094:	d003      	beq.n	800d09e <_dtoa_r+0x91e>
 800d096:	4649      	mov	r1, r9
 800d098:	4620      	mov	r0, r4
 800d09a:	f000 fb51 	bl	800d740 <_Bfree>
 800d09e:	4631      	mov	r1, r6
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f000 fb4d 	bl	800d740 <_Bfree>
 800d0a6:	e6a8      	b.n	800cdfa <_dtoa_r+0x67a>
 800d0a8:	2700      	movs	r7, #0
 800d0aa:	463e      	mov	r6, r7
 800d0ac:	e7e1      	b.n	800d072 <_dtoa_r+0x8f2>
 800d0ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d0b2:	463e      	mov	r6, r7
 800d0b4:	e5a9      	b.n	800cc0a <_dtoa_r+0x48a>
 800d0b6:	bf00      	nop
 800d0b8:	40240000 	.word	0x40240000
 800d0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0be:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 80fa 	beq.w	800d2bc <_dtoa_r+0xb3c>
 800d0c8:	2d00      	cmp	r5, #0
 800d0ca:	dd05      	ble.n	800d0d8 <_dtoa_r+0x958>
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	462a      	mov	r2, r5
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	f000 fcc3 	bl	800da5c <__lshift>
 800d0d6:	4606      	mov	r6, r0
 800d0d8:	9b07      	ldr	r3, [sp, #28]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d04c      	beq.n	800d178 <_dtoa_r+0x9f8>
 800d0de:	6871      	ldr	r1, [r6, #4]
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f000 faf9 	bl	800d6d8 <_Balloc>
 800d0e6:	6932      	ldr	r2, [r6, #16]
 800d0e8:	3202      	adds	r2, #2
 800d0ea:	4605      	mov	r5, r0
 800d0ec:	0092      	lsls	r2, r2, #2
 800d0ee:	f106 010c 	add.w	r1, r6, #12
 800d0f2:	300c      	adds	r0, #12
 800d0f4:	f7fe fcda 	bl	800baac <memcpy>
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	4629      	mov	r1, r5
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f000 fcad 	bl	800da5c <__lshift>
 800d102:	9b00      	ldr	r3, [sp, #0]
 800d104:	f8cd b014 	str.w	fp, [sp, #20]
 800d108:	f003 0301 	and.w	r3, r3, #1
 800d10c:	46b1      	mov	r9, r6
 800d10e:	9307      	str	r3, [sp, #28]
 800d110:	4606      	mov	r6, r0
 800d112:	4639      	mov	r1, r7
 800d114:	9804      	ldr	r0, [sp, #16]
 800d116:	f7ff faa5 	bl	800c664 <quorem>
 800d11a:	4649      	mov	r1, r9
 800d11c:	4605      	mov	r5, r0
 800d11e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d122:	9804      	ldr	r0, [sp, #16]
 800d124:	f000 fcee 	bl	800db04 <__mcmp>
 800d128:	4632      	mov	r2, r6
 800d12a:	9000      	str	r0, [sp, #0]
 800d12c:	4639      	mov	r1, r7
 800d12e:	4620      	mov	r0, r4
 800d130:	f000 fd02 	bl	800db38 <__mdiff>
 800d134:	68c3      	ldr	r3, [r0, #12]
 800d136:	4602      	mov	r2, r0
 800d138:	bb03      	cbnz	r3, 800d17c <_dtoa_r+0x9fc>
 800d13a:	4601      	mov	r1, r0
 800d13c:	9008      	str	r0, [sp, #32]
 800d13e:	9804      	ldr	r0, [sp, #16]
 800d140:	f000 fce0 	bl	800db04 <__mcmp>
 800d144:	9a08      	ldr	r2, [sp, #32]
 800d146:	4603      	mov	r3, r0
 800d148:	4611      	mov	r1, r2
 800d14a:	4620      	mov	r0, r4
 800d14c:	9308      	str	r3, [sp, #32]
 800d14e:	f000 faf7 	bl	800d740 <_Bfree>
 800d152:	9b08      	ldr	r3, [sp, #32]
 800d154:	b9a3      	cbnz	r3, 800d180 <_dtoa_r+0xa00>
 800d156:	9a06      	ldr	r2, [sp, #24]
 800d158:	b992      	cbnz	r2, 800d180 <_dtoa_r+0xa00>
 800d15a:	9a07      	ldr	r2, [sp, #28]
 800d15c:	b982      	cbnz	r2, 800d180 <_dtoa_r+0xa00>
 800d15e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d162:	d029      	beq.n	800d1b8 <_dtoa_r+0xa38>
 800d164:	9b00      	ldr	r3, [sp, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	dd01      	ble.n	800d16e <_dtoa_r+0x9ee>
 800d16a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d16e:	9b05      	ldr	r3, [sp, #20]
 800d170:	1c5d      	adds	r5, r3, #1
 800d172:	f883 8000 	strb.w	r8, [r3]
 800d176:	e782      	b.n	800d07e <_dtoa_r+0x8fe>
 800d178:	4630      	mov	r0, r6
 800d17a:	e7c2      	b.n	800d102 <_dtoa_r+0x982>
 800d17c:	2301      	movs	r3, #1
 800d17e:	e7e3      	b.n	800d148 <_dtoa_r+0x9c8>
 800d180:	9a00      	ldr	r2, [sp, #0]
 800d182:	2a00      	cmp	r2, #0
 800d184:	db04      	blt.n	800d190 <_dtoa_r+0xa10>
 800d186:	d125      	bne.n	800d1d4 <_dtoa_r+0xa54>
 800d188:	9a06      	ldr	r2, [sp, #24]
 800d18a:	bb1a      	cbnz	r2, 800d1d4 <_dtoa_r+0xa54>
 800d18c:	9a07      	ldr	r2, [sp, #28]
 800d18e:	bb0a      	cbnz	r2, 800d1d4 <_dtoa_r+0xa54>
 800d190:	2b00      	cmp	r3, #0
 800d192:	ddec      	ble.n	800d16e <_dtoa_r+0x9ee>
 800d194:	2201      	movs	r2, #1
 800d196:	9904      	ldr	r1, [sp, #16]
 800d198:	4620      	mov	r0, r4
 800d19a:	f000 fc5f 	bl	800da5c <__lshift>
 800d19e:	4639      	mov	r1, r7
 800d1a0:	9004      	str	r0, [sp, #16]
 800d1a2:	f000 fcaf 	bl	800db04 <__mcmp>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	dc03      	bgt.n	800d1b2 <_dtoa_r+0xa32>
 800d1aa:	d1e0      	bne.n	800d16e <_dtoa_r+0x9ee>
 800d1ac:	f018 0f01 	tst.w	r8, #1
 800d1b0:	d0dd      	beq.n	800d16e <_dtoa_r+0x9ee>
 800d1b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d1b6:	d1d8      	bne.n	800d16a <_dtoa_r+0x9ea>
 800d1b8:	9b05      	ldr	r3, [sp, #20]
 800d1ba:	9a05      	ldr	r2, [sp, #20]
 800d1bc:	1c5d      	adds	r5, r3, #1
 800d1be:	2339      	movs	r3, #57	; 0x39
 800d1c0:	7013      	strb	r3, [r2, #0]
 800d1c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1c6:	2b39      	cmp	r3, #57	; 0x39
 800d1c8:	f105 32ff 	add.w	r2, r5, #4294967295
 800d1cc:	d04f      	beq.n	800d26e <_dtoa_r+0xaee>
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	7013      	strb	r3, [r2, #0]
 800d1d2:	e754      	b.n	800d07e <_dtoa_r+0x8fe>
 800d1d4:	9a05      	ldr	r2, [sp, #20]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f102 0501 	add.w	r5, r2, #1
 800d1dc:	dd06      	ble.n	800d1ec <_dtoa_r+0xa6c>
 800d1de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d1e2:	d0e9      	beq.n	800d1b8 <_dtoa_r+0xa38>
 800d1e4:	f108 0801 	add.w	r8, r8, #1
 800d1e8:	9b05      	ldr	r3, [sp, #20]
 800d1ea:	e7c2      	b.n	800d172 <_dtoa_r+0x9f2>
 800d1ec:	9a02      	ldr	r2, [sp, #8]
 800d1ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d1f2:	eba5 030b 	sub.w	r3, r5, fp
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d021      	beq.n	800d23e <_dtoa_r+0xabe>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	220a      	movs	r2, #10
 800d1fe:	9904      	ldr	r1, [sp, #16]
 800d200:	4620      	mov	r0, r4
 800d202:	f000 fab4 	bl	800d76e <__multadd>
 800d206:	45b1      	cmp	r9, r6
 800d208:	9004      	str	r0, [sp, #16]
 800d20a:	f04f 0300 	mov.w	r3, #0
 800d20e:	f04f 020a 	mov.w	r2, #10
 800d212:	4649      	mov	r1, r9
 800d214:	4620      	mov	r0, r4
 800d216:	d105      	bne.n	800d224 <_dtoa_r+0xaa4>
 800d218:	f000 faa9 	bl	800d76e <__multadd>
 800d21c:	4681      	mov	r9, r0
 800d21e:	4606      	mov	r6, r0
 800d220:	9505      	str	r5, [sp, #20]
 800d222:	e776      	b.n	800d112 <_dtoa_r+0x992>
 800d224:	f000 faa3 	bl	800d76e <__multadd>
 800d228:	4631      	mov	r1, r6
 800d22a:	4681      	mov	r9, r0
 800d22c:	2300      	movs	r3, #0
 800d22e:	220a      	movs	r2, #10
 800d230:	4620      	mov	r0, r4
 800d232:	f000 fa9c 	bl	800d76e <__multadd>
 800d236:	4606      	mov	r6, r0
 800d238:	e7f2      	b.n	800d220 <_dtoa_r+0xaa0>
 800d23a:	f04f 0900 	mov.w	r9, #0
 800d23e:	2201      	movs	r2, #1
 800d240:	9904      	ldr	r1, [sp, #16]
 800d242:	4620      	mov	r0, r4
 800d244:	f000 fc0a 	bl	800da5c <__lshift>
 800d248:	4639      	mov	r1, r7
 800d24a:	9004      	str	r0, [sp, #16]
 800d24c:	f000 fc5a 	bl	800db04 <__mcmp>
 800d250:	2800      	cmp	r0, #0
 800d252:	dcb6      	bgt.n	800d1c2 <_dtoa_r+0xa42>
 800d254:	d102      	bne.n	800d25c <_dtoa_r+0xadc>
 800d256:	f018 0f01 	tst.w	r8, #1
 800d25a:	d1b2      	bne.n	800d1c2 <_dtoa_r+0xa42>
 800d25c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d260:	2b30      	cmp	r3, #48	; 0x30
 800d262:	f105 32ff 	add.w	r2, r5, #4294967295
 800d266:	f47f af0a 	bne.w	800d07e <_dtoa_r+0x8fe>
 800d26a:	4615      	mov	r5, r2
 800d26c:	e7f6      	b.n	800d25c <_dtoa_r+0xadc>
 800d26e:	4593      	cmp	fp, r2
 800d270:	d105      	bne.n	800d27e <_dtoa_r+0xafe>
 800d272:	2331      	movs	r3, #49	; 0x31
 800d274:	f10a 0a01 	add.w	sl, sl, #1
 800d278:	f88b 3000 	strb.w	r3, [fp]
 800d27c:	e6ff      	b.n	800d07e <_dtoa_r+0x8fe>
 800d27e:	4615      	mov	r5, r2
 800d280:	e79f      	b.n	800d1c2 <_dtoa_r+0xa42>
 800d282:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d2e8 <_dtoa_r+0xb68>
 800d286:	e007      	b.n	800d298 <_dtoa_r+0xb18>
 800d288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d28a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d2ec <_dtoa_r+0xb6c>
 800d28e:	b11b      	cbz	r3, 800d298 <_dtoa_r+0xb18>
 800d290:	f10b 0308 	add.w	r3, fp, #8
 800d294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	4658      	mov	r0, fp
 800d29a:	b017      	add	sp, #92	; 0x5c
 800d29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a0:	9b06      	ldr	r3, [sp, #24]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	f77f ae35 	ble.w	800cf12 <_dtoa_r+0x792>
 800d2a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2aa:	9307      	str	r3, [sp, #28]
 800d2ac:	e649      	b.n	800cf42 <_dtoa_r+0x7c2>
 800d2ae:	9b02      	ldr	r3, [sp, #8]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	dc03      	bgt.n	800d2bc <_dtoa_r+0xb3c>
 800d2b4:	9b06      	ldr	r3, [sp, #24]
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	f73f aecc 	bgt.w	800d054 <_dtoa_r+0x8d4>
 800d2bc:	465d      	mov	r5, fp
 800d2be:	4639      	mov	r1, r7
 800d2c0:	9804      	ldr	r0, [sp, #16]
 800d2c2:	f7ff f9cf 	bl	800c664 <quorem>
 800d2c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d2ca:	f805 8b01 	strb.w	r8, [r5], #1
 800d2ce:	9a02      	ldr	r2, [sp, #8]
 800d2d0:	eba5 030b 	sub.w	r3, r5, fp
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	ddb0      	ble.n	800d23a <_dtoa_r+0xaba>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	220a      	movs	r2, #10
 800d2dc:	9904      	ldr	r1, [sp, #16]
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f000 fa45 	bl	800d76e <__multadd>
 800d2e4:	9004      	str	r0, [sp, #16]
 800d2e6:	e7ea      	b.n	800d2be <_dtoa_r+0xb3e>
 800d2e8:	0800eeb0 	.word	0x0800eeb0
 800d2ec:	0800eed4 	.word	0x0800eed4

0800d2f0 <__sflush_r>:
 800d2f0:	898a      	ldrh	r2, [r1, #12]
 800d2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	0710      	lsls	r0, r2, #28
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	d458      	bmi.n	800d3b0 <__sflush_r+0xc0>
 800d2fe:	684b      	ldr	r3, [r1, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	dc05      	bgt.n	800d310 <__sflush_r+0x20>
 800d304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d306:	2b00      	cmp	r3, #0
 800d308:	dc02      	bgt.n	800d310 <__sflush_r+0x20>
 800d30a:	2000      	movs	r0, #0
 800d30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d312:	2e00      	cmp	r6, #0
 800d314:	d0f9      	beq.n	800d30a <__sflush_r+0x1a>
 800d316:	2300      	movs	r3, #0
 800d318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d31c:	682f      	ldr	r7, [r5, #0]
 800d31e:	6a21      	ldr	r1, [r4, #32]
 800d320:	602b      	str	r3, [r5, #0]
 800d322:	d032      	beq.n	800d38a <__sflush_r+0x9a>
 800d324:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d326:	89a3      	ldrh	r3, [r4, #12]
 800d328:	075a      	lsls	r2, r3, #29
 800d32a:	d505      	bpl.n	800d338 <__sflush_r+0x48>
 800d32c:	6863      	ldr	r3, [r4, #4]
 800d32e:	1ac0      	subs	r0, r0, r3
 800d330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d332:	b10b      	cbz	r3, 800d338 <__sflush_r+0x48>
 800d334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d336:	1ac0      	subs	r0, r0, r3
 800d338:	2300      	movs	r3, #0
 800d33a:	4602      	mov	r2, r0
 800d33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d33e:	6a21      	ldr	r1, [r4, #32]
 800d340:	4628      	mov	r0, r5
 800d342:	47b0      	blx	r6
 800d344:	1c43      	adds	r3, r0, #1
 800d346:	89a3      	ldrh	r3, [r4, #12]
 800d348:	d106      	bne.n	800d358 <__sflush_r+0x68>
 800d34a:	6829      	ldr	r1, [r5, #0]
 800d34c:	291d      	cmp	r1, #29
 800d34e:	d848      	bhi.n	800d3e2 <__sflush_r+0xf2>
 800d350:	4a29      	ldr	r2, [pc, #164]	; (800d3f8 <__sflush_r+0x108>)
 800d352:	40ca      	lsrs	r2, r1
 800d354:	07d6      	lsls	r6, r2, #31
 800d356:	d544      	bpl.n	800d3e2 <__sflush_r+0xf2>
 800d358:	2200      	movs	r2, #0
 800d35a:	6062      	str	r2, [r4, #4]
 800d35c:	04d9      	lsls	r1, r3, #19
 800d35e:	6922      	ldr	r2, [r4, #16]
 800d360:	6022      	str	r2, [r4, #0]
 800d362:	d504      	bpl.n	800d36e <__sflush_r+0x7e>
 800d364:	1c42      	adds	r2, r0, #1
 800d366:	d101      	bne.n	800d36c <__sflush_r+0x7c>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	b903      	cbnz	r3, 800d36e <__sflush_r+0x7e>
 800d36c:	6560      	str	r0, [r4, #84]	; 0x54
 800d36e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d370:	602f      	str	r7, [r5, #0]
 800d372:	2900      	cmp	r1, #0
 800d374:	d0c9      	beq.n	800d30a <__sflush_r+0x1a>
 800d376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d37a:	4299      	cmp	r1, r3
 800d37c:	d002      	beq.n	800d384 <__sflush_r+0x94>
 800d37e:	4628      	mov	r0, r5
 800d380:	f000 fc94 	bl	800dcac <_free_r>
 800d384:	2000      	movs	r0, #0
 800d386:	6360      	str	r0, [r4, #52]	; 0x34
 800d388:	e7c0      	b.n	800d30c <__sflush_r+0x1c>
 800d38a:	2301      	movs	r3, #1
 800d38c:	4628      	mov	r0, r5
 800d38e:	47b0      	blx	r6
 800d390:	1c41      	adds	r1, r0, #1
 800d392:	d1c8      	bne.n	800d326 <__sflush_r+0x36>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d0c5      	beq.n	800d326 <__sflush_r+0x36>
 800d39a:	2b1d      	cmp	r3, #29
 800d39c:	d001      	beq.n	800d3a2 <__sflush_r+0xb2>
 800d39e:	2b16      	cmp	r3, #22
 800d3a0:	d101      	bne.n	800d3a6 <__sflush_r+0xb6>
 800d3a2:	602f      	str	r7, [r5, #0]
 800d3a4:	e7b1      	b.n	800d30a <__sflush_r+0x1a>
 800d3a6:	89a3      	ldrh	r3, [r4, #12]
 800d3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3ac:	81a3      	strh	r3, [r4, #12]
 800d3ae:	e7ad      	b.n	800d30c <__sflush_r+0x1c>
 800d3b0:	690f      	ldr	r7, [r1, #16]
 800d3b2:	2f00      	cmp	r7, #0
 800d3b4:	d0a9      	beq.n	800d30a <__sflush_r+0x1a>
 800d3b6:	0793      	lsls	r3, r2, #30
 800d3b8:	680e      	ldr	r6, [r1, #0]
 800d3ba:	bf08      	it	eq
 800d3bc:	694b      	ldreq	r3, [r1, #20]
 800d3be:	600f      	str	r7, [r1, #0]
 800d3c0:	bf18      	it	ne
 800d3c2:	2300      	movne	r3, #0
 800d3c4:	eba6 0807 	sub.w	r8, r6, r7
 800d3c8:	608b      	str	r3, [r1, #8]
 800d3ca:	f1b8 0f00 	cmp.w	r8, #0
 800d3ce:	dd9c      	ble.n	800d30a <__sflush_r+0x1a>
 800d3d0:	4643      	mov	r3, r8
 800d3d2:	463a      	mov	r2, r7
 800d3d4:	6a21      	ldr	r1, [r4, #32]
 800d3d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d3d8:	4628      	mov	r0, r5
 800d3da:	47b0      	blx	r6
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	dc06      	bgt.n	800d3ee <__sflush_r+0xfe>
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e6:	81a3      	strh	r3, [r4, #12]
 800d3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ec:	e78e      	b.n	800d30c <__sflush_r+0x1c>
 800d3ee:	4407      	add	r7, r0
 800d3f0:	eba8 0800 	sub.w	r8, r8, r0
 800d3f4:	e7e9      	b.n	800d3ca <__sflush_r+0xda>
 800d3f6:	bf00      	nop
 800d3f8:	20400001 	.word	0x20400001

0800d3fc <_fflush_r>:
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	690b      	ldr	r3, [r1, #16]
 800d400:	4605      	mov	r5, r0
 800d402:	460c      	mov	r4, r1
 800d404:	b1db      	cbz	r3, 800d43e <_fflush_r+0x42>
 800d406:	b118      	cbz	r0, 800d410 <_fflush_r+0x14>
 800d408:	6983      	ldr	r3, [r0, #24]
 800d40a:	b90b      	cbnz	r3, 800d410 <_fflush_r+0x14>
 800d40c:	f000 f860 	bl	800d4d0 <__sinit>
 800d410:	4b0c      	ldr	r3, [pc, #48]	; (800d444 <_fflush_r+0x48>)
 800d412:	429c      	cmp	r4, r3
 800d414:	d109      	bne.n	800d42a <_fflush_r+0x2e>
 800d416:	686c      	ldr	r4, [r5, #4]
 800d418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d41c:	b17b      	cbz	r3, 800d43e <_fflush_r+0x42>
 800d41e:	4621      	mov	r1, r4
 800d420:	4628      	mov	r0, r5
 800d422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d426:	f7ff bf63 	b.w	800d2f0 <__sflush_r>
 800d42a:	4b07      	ldr	r3, [pc, #28]	; (800d448 <_fflush_r+0x4c>)
 800d42c:	429c      	cmp	r4, r3
 800d42e:	d101      	bne.n	800d434 <_fflush_r+0x38>
 800d430:	68ac      	ldr	r4, [r5, #8]
 800d432:	e7f1      	b.n	800d418 <_fflush_r+0x1c>
 800d434:	4b05      	ldr	r3, [pc, #20]	; (800d44c <_fflush_r+0x50>)
 800d436:	429c      	cmp	r4, r3
 800d438:	bf08      	it	eq
 800d43a:	68ec      	ldreq	r4, [r5, #12]
 800d43c:	e7ec      	b.n	800d418 <_fflush_r+0x1c>
 800d43e:	2000      	movs	r0, #0
 800d440:	bd38      	pop	{r3, r4, r5, pc}
 800d442:	bf00      	nop
 800d444:	0800ef04 	.word	0x0800ef04
 800d448:	0800ef24 	.word	0x0800ef24
 800d44c:	0800eee4 	.word	0x0800eee4

0800d450 <std>:
 800d450:	2300      	movs	r3, #0
 800d452:	b510      	push	{r4, lr}
 800d454:	4604      	mov	r4, r0
 800d456:	e9c0 3300 	strd	r3, r3, [r0]
 800d45a:	6083      	str	r3, [r0, #8]
 800d45c:	8181      	strh	r1, [r0, #12]
 800d45e:	6643      	str	r3, [r0, #100]	; 0x64
 800d460:	81c2      	strh	r2, [r0, #14]
 800d462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d466:	6183      	str	r3, [r0, #24]
 800d468:	4619      	mov	r1, r3
 800d46a:	2208      	movs	r2, #8
 800d46c:	305c      	adds	r0, #92	; 0x5c
 800d46e:	f7fe fb28 	bl	800bac2 <memset>
 800d472:	4b05      	ldr	r3, [pc, #20]	; (800d488 <std+0x38>)
 800d474:	6263      	str	r3, [r4, #36]	; 0x24
 800d476:	4b05      	ldr	r3, [pc, #20]	; (800d48c <std+0x3c>)
 800d478:	62a3      	str	r3, [r4, #40]	; 0x28
 800d47a:	4b05      	ldr	r3, [pc, #20]	; (800d490 <std+0x40>)
 800d47c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d47e:	4b05      	ldr	r3, [pc, #20]	; (800d494 <std+0x44>)
 800d480:	6224      	str	r4, [r4, #32]
 800d482:	6323      	str	r3, [r4, #48]	; 0x30
 800d484:	bd10      	pop	{r4, pc}
 800d486:	bf00      	nop
 800d488:	0800e341 	.word	0x0800e341
 800d48c:	0800e363 	.word	0x0800e363
 800d490:	0800e39b 	.word	0x0800e39b
 800d494:	0800e3bf 	.word	0x0800e3bf

0800d498 <_cleanup_r>:
 800d498:	4901      	ldr	r1, [pc, #4]	; (800d4a0 <_cleanup_r+0x8>)
 800d49a:	f000 b885 	b.w	800d5a8 <_fwalk_reent>
 800d49e:	bf00      	nop
 800d4a0:	0800d3fd 	.word	0x0800d3fd

0800d4a4 <__sfmoreglue>:
 800d4a4:	b570      	push	{r4, r5, r6, lr}
 800d4a6:	1e4a      	subs	r2, r1, #1
 800d4a8:	2568      	movs	r5, #104	; 0x68
 800d4aa:	4355      	muls	r5, r2
 800d4ac:	460e      	mov	r6, r1
 800d4ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d4b2:	f000 fc49 	bl	800dd48 <_malloc_r>
 800d4b6:	4604      	mov	r4, r0
 800d4b8:	b140      	cbz	r0, 800d4cc <__sfmoreglue+0x28>
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	e9c0 1600 	strd	r1, r6, [r0]
 800d4c0:	300c      	adds	r0, #12
 800d4c2:	60a0      	str	r0, [r4, #8]
 800d4c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4c8:	f7fe fafb 	bl	800bac2 <memset>
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	bd70      	pop	{r4, r5, r6, pc}

0800d4d0 <__sinit>:
 800d4d0:	6983      	ldr	r3, [r0, #24]
 800d4d2:	b510      	push	{r4, lr}
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	bb33      	cbnz	r3, 800d526 <__sinit+0x56>
 800d4d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d4dc:	6503      	str	r3, [r0, #80]	; 0x50
 800d4de:	4b12      	ldr	r3, [pc, #72]	; (800d528 <__sinit+0x58>)
 800d4e0:	4a12      	ldr	r2, [pc, #72]	; (800d52c <__sinit+0x5c>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	6282      	str	r2, [r0, #40]	; 0x28
 800d4e6:	4298      	cmp	r0, r3
 800d4e8:	bf04      	itt	eq
 800d4ea:	2301      	moveq	r3, #1
 800d4ec:	6183      	streq	r3, [r0, #24]
 800d4ee:	f000 f81f 	bl	800d530 <__sfp>
 800d4f2:	6060      	str	r0, [r4, #4]
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f000 f81b 	bl	800d530 <__sfp>
 800d4fa:	60a0      	str	r0, [r4, #8]
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 f817 	bl	800d530 <__sfp>
 800d502:	2200      	movs	r2, #0
 800d504:	60e0      	str	r0, [r4, #12]
 800d506:	2104      	movs	r1, #4
 800d508:	6860      	ldr	r0, [r4, #4]
 800d50a:	f7ff ffa1 	bl	800d450 <std>
 800d50e:	2201      	movs	r2, #1
 800d510:	2109      	movs	r1, #9
 800d512:	68a0      	ldr	r0, [r4, #8]
 800d514:	f7ff ff9c 	bl	800d450 <std>
 800d518:	2202      	movs	r2, #2
 800d51a:	2112      	movs	r1, #18
 800d51c:	68e0      	ldr	r0, [r4, #12]
 800d51e:	f7ff ff97 	bl	800d450 <std>
 800d522:	2301      	movs	r3, #1
 800d524:	61a3      	str	r3, [r4, #24]
 800d526:	bd10      	pop	{r4, pc}
 800d528:	0800ee9c 	.word	0x0800ee9c
 800d52c:	0800d499 	.word	0x0800d499

0800d530 <__sfp>:
 800d530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d532:	4b1b      	ldr	r3, [pc, #108]	; (800d5a0 <__sfp+0x70>)
 800d534:	681e      	ldr	r6, [r3, #0]
 800d536:	69b3      	ldr	r3, [r6, #24]
 800d538:	4607      	mov	r7, r0
 800d53a:	b913      	cbnz	r3, 800d542 <__sfp+0x12>
 800d53c:	4630      	mov	r0, r6
 800d53e:	f7ff ffc7 	bl	800d4d0 <__sinit>
 800d542:	3648      	adds	r6, #72	; 0x48
 800d544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d548:	3b01      	subs	r3, #1
 800d54a:	d503      	bpl.n	800d554 <__sfp+0x24>
 800d54c:	6833      	ldr	r3, [r6, #0]
 800d54e:	b133      	cbz	r3, 800d55e <__sfp+0x2e>
 800d550:	6836      	ldr	r6, [r6, #0]
 800d552:	e7f7      	b.n	800d544 <__sfp+0x14>
 800d554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d558:	b16d      	cbz	r5, 800d576 <__sfp+0x46>
 800d55a:	3468      	adds	r4, #104	; 0x68
 800d55c:	e7f4      	b.n	800d548 <__sfp+0x18>
 800d55e:	2104      	movs	r1, #4
 800d560:	4638      	mov	r0, r7
 800d562:	f7ff ff9f 	bl	800d4a4 <__sfmoreglue>
 800d566:	6030      	str	r0, [r6, #0]
 800d568:	2800      	cmp	r0, #0
 800d56a:	d1f1      	bne.n	800d550 <__sfp+0x20>
 800d56c:	230c      	movs	r3, #12
 800d56e:	603b      	str	r3, [r7, #0]
 800d570:	4604      	mov	r4, r0
 800d572:	4620      	mov	r0, r4
 800d574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d576:	4b0b      	ldr	r3, [pc, #44]	; (800d5a4 <__sfp+0x74>)
 800d578:	6665      	str	r5, [r4, #100]	; 0x64
 800d57a:	e9c4 5500 	strd	r5, r5, [r4]
 800d57e:	60a5      	str	r5, [r4, #8]
 800d580:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d584:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d588:	2208      	movs	r2, #8
 800d58a:	4629      	mov	r1, r5
 800d58c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d590:	f7fe fa97 	bl	800bac2 <memset>
 800d594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d59c:	e7e9      	b.n	800d572 <__sfp+0x42>
 800d59e:	bf00      	nop
 800d5a0:	0800ee9c 	.word	0x0800ee9c
 800d5a4:	ffff0001 	.word	0xffff0001

0800d5a8 <_fwalk_reent>:
 800d5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5ac:	4680      	mov	r8, r0
 800d5ae:	4689      	mov	r9, r1
 800d5b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5b4:	2600      	movs	r6, #0
 800d5b6:	b914      	cbnz	r4, 800d5be <_fwalk_reent+0x16>
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d5c2:	3f01      	subs	r7, #1
 800d5c4:	d501      	bpl.n	800d5ca <_fwalk_reent+0x22>
 800d5c6:	6824      	ldr	r4, [r4, #0]
 800d5c8:	e7f5      	b.n	800d5b6 <_fwalk_reent+0xe>
 800d5ca:	89ab      	ldrh	r3, [r5, #12]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d907      	bls.n	800d5e0 <_fwalk_reent+0x38>
 800d5d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	d003      	beq.n	800d5e0 <_fwalk_reent+0x38>
 800d5d8:	4629      	mov	r1, r5
 800d5da:	4640      	mov	r0, r8
 800d5dc:	47c8      	blx	r9
 800d5de:	4306      	orrs	r6, r0
 800d5e0:	3568      	adds	r5, #104	; 0x68
 800d5e2:	e7ee      	b.n	800d5c2 <_fwalk_reent+0x1a>

0800d5e4 <_localeconv_r>:
 800d5e4:	4b04      	ldr	r3, [pc, #16]	; (800d5f8 <_localeconv_r+0x14>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6a18      	ldr	r0, [r3, #32]
 800d5ea:	4b04      	ldr	r3, [pc, #16]	; (800d5fc <_localeconv_r+0x18>)
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	bf08      	it	eq
 800d5f0:	4618      	moveq	r0, r3
 800d5f2:	30f0      	adds	r0, #240	; 0xf0
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	20000084 	.word	0x20000084
 800d5fc:	200000e8 	.word	0x200000e8

0800d600 <__swhatbuf_r>:
 800d600:	b570      	push	{r4, r5, r6, lr}
 800d602:	460e      	mov	r6, r1
 800d604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d608:	2900      	cmp	r1, #0
 800d60a:	b096      	sub	sp, #88	; 0x58
 800d60c:	4614      	mov	r4, r2
 800d60e:	461d      	mov	r5, r3
 800d610:	da07      	bge.n	800d622 <__swhatbuf_r+0x22>
 800d612:	2300      	movs	r3, #0
 800d614:	602b      	str	r3, [r5, #0]
 800d616:	89b3      	ldrh	r3, [r6, #12]
 800d618:	061a      	lsls	r2, r3, #24
 800d61a:	d410      	bmi.n	800d63e <__swhatbuf_r+0x3e>
 800d61c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d620:	e00e      	b.n	800d640 <__swhatbuf_r+0x40>
 800d622:	466a      	mov	r2, sp
 800d624:	f000 fef2 	bl	800e40c <_fstat_r>
 800d628:	2800      	cmp	r0, #0
 800d62a:	dbf2      	blt.n	800d612 <__swhatbuf_r+0x12>
 800d62c:	9a01      	ldr	r2, [sp, #4]
 800d62e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d632:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d636:	425a      	negs	r2, r3
 800d638:	415a      	adcs	r2, r3
 800d63a:	602a      	str	r2, [r5, #0]
 800d63c:	e7ee      	b.n	800d61c <__swhatbuf_r+0x1c>
 800d63e:	2340      	movs	r3, #64	; 0x40
 800d640:	2000      	movs	r0, #0
 800d642:	6023      	str	r3, [r4, #0]
 800d644:	b016      	add	sp, #88	; 0x58
 800d646:	bd70      	pop	{r4, r5, r6, pc}

0800d648 <__smakebuf_r>:
 800d648:	898b      	ldrh	r3, [r1, #12]
 800d64a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d64c:	079d      	lsls	r5, r3, #30
 800d64e:	4606      	mov	r6, r0
 800d650:	460c      	mov	r4, r1
 800d652:	d507      	bpl.n	800d664 <__smakebuf_r+0x1c>
 800d654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d658:	6023      	str	r3, [r4, #0]
 800d65a:	6123      	str	r3, [r4, #16]
 800d65c:	2301      	movs	r3, #1
 800d65e:	6163      	str	r3, [r4, #20]
 800d660:	b002      	add	sp, #8
 800d662:	bd70      	pop	{r4, r5, r6, pc}
 800d664:	ab01      	add	r3, sp, #4
 800d666:	466a      	mov	r2, sp
 800d668:	f7ff ffca 	bl	800d600 <__swhatbuf_r>
 800d66c:	9900      	ldr	r1, [sp, #0]
 800d66e:	4605      	mov	r5, r0
 800d670:	4630      	mov	r0, r6
 800d672:	f000 fb69 	bl	800dd48 <_malloc_r>
 800d676:	b948      	cbnz	r0, 800d68c <__smakebuf_r+0x44>
 800d678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d67c:	059a      	lsls	r2, r3, #22
 800d67e:	d4ef      	bmi.n	800d660 <__smakebuf_r+0x18>
 800d680:	f023 0303 	bic.w	r3, r3, #3
 800d684:	f043 0302 	orr.w	r3, r3, #2
 800d688:	81a3      	strh	r3, [r4, #12]
 800d68a:	e7e3      	b.n	800d654 <__smakebuf_r+0xc>
 800d68c:	4b0d      	ldr	r3, [pc, #52]	; (800d6c4 <__smakebuf_r+0x7c>)
 800d68e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d690:	89a3      	ldrh	r3, [r4, #12]
 800d692:	6020      	str	r0, [r4, #0]
 800d694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d698:	81a3      	strh	r3, [r4, #12]
 800d69a:	9b00      	ldr	r3, [sp, #0]
 800d69c:	6163      	str	r3, [r4, #20]
 800d69e:	9b01      	ldr	r3, [sp, #4]
 800d6a0:	6120      	str	r0, [r4, #16]
 800d6a2:	b15b      	cbz	r3, 800d6bc <__smakebuf_r+0x74>
 800d6a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f000 fec1 	bl	800e430 <_isatty_r>
 800d6ae:	b128      	cbz	r0, 800d6bc <__smakebuf_r+0x74>
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	f023 0303 	bic.w	r3, r3, #3
 800d6b6:	f043 0301 	orr.w	r3, r3, #1
 800d6ba:	81a3      	strh	r3, [r4, #12]
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	431d      	orrs	r5, r3
 800d6c0:	81a5      	strh	r5, [r4, #12]
 800d6c2:	e7cd      	b.n	800d660 <__smakebuf_r+0x18>
 800d6c4:	0800d499 	.word	0x0800d499

0800d6c8 <malloc>:
 800d6c8:	4b02      	ldr	r3, [pc, #8]	; (800d6d4 <malloc+0xc>)
 800d6ca:	4601      	mov	r1, r0
 800d6cc:	6818      	ldr	r0, [r3, #0]
 800d6ce:	f000 bb3b 	b.w	800dd48 <_malloc_r>
 800d6d2:	bf00      	nop
 800d6d4:	20000084 	.word	0x20000084

0800d6d8 <_Balloc>:
 800d6d8:	b570      	push	{r4, r5, r6, lr}
 800d6da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d6dc:	4604      	mov	r4, r0
 800d6de:	460e      	mov	r6, r1
 800d6e0:	b93d      	cbnz	r5, 800d6f2 <_Balloc+0x1a>
 800d6e2:	2010      	movs	r0, #16
 800d6e4:	f7ff fff0 	bl	800d6c8 <malloc>
 800d6e8:	6260      	str	r0, [r4, #36]	; 0x24
 800d6ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d6ee:	6005      	str	r5, [r0, #0]
 800d6f0:	60c5      	str	r5, [r0, #12]
 800d6f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d6f4:	68eb      	ldr	r3, [r5, #12]
 800d6f6:	b183      	cbz	r3, 800d71a <_Balloc+0x42>
 800d6f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d700:	b9b8      	cbnz	r0, 800d732 <_Balloc+0x5a>
 800d702:	2101      	movs	r1, #1
 800d704:	fa01 f506 	lsl.w	r5, r1, r6
 800d708:	1d6a      	adds	r2, r5, #5
 800d70a:	0092      	lsls	r2, r2, #2
 800d70c:	4620      	mov	r0, r4
 800d70e:	f000 fabf 	bl	800dc90 <_calloc_r>
 800d712:	b160      	cbz	r0, 800d72e <_Balloc+0x56>
 800d714:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d718:	e00e      	b.n	800d738 <_Balloc+0x60>
 800d71a:	2221      	movs	r2, #33	; 0x21
 800d71c:	2104      	movs	r1, #4
 800d71e:	4620      	mov	r0, r4
 800d720:	f000 fab6 	bl	800dc90 <_calloc_r>
 800d724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d726:	60e8      	str	r0, [r5, #12]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1e4      	bne.n	800d6f8 <_Balloc+0x20>
 800d72e:	2000      	movs	r0, #0
 800d730:	bd70      	pop	{r4, r5, r6, pc}
 800d732:	6802      	ldr	r2, [r0, #0]
 800d734:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d738:	2300      	movs	r3, #0
 800d73a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d73e:	e7f7      	b.n	800d730 <_Balloc+0x58>

0800d740 <_Bfree>:
 800d740:	b570      	push	{r4, r5, r6, lr}
 800d742:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d744:	4606      	mov	r6, r0
 800d746:	460d      	mov	r5, r1
 800d748:	b93c      	cbnz	r4, 800d75a <_Bfree+0x1a>
 800d74a:	2010      	movs	r0, #16
 800d74c:	f7ff ffbc 	bl	800d6c8 <malloc>
 800d750:	6270      	str	r0, [r6, #36]	; 0x24
 800d752:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d756:	6004      	str	r4, [r0, #0]
 800d758:	60c4      	str	r4, [r0, #12]
 800d75a:	b13d      	cbz	r5, 800d76c <_Bfree+0x2c>
 800d75c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d75e:	686a      	ldr	r2, [r5, #4]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d766:	6029      	str	r1, [r5, #0]
 800d768:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d76c:	bd70      	pop	{r4, r5, r6, pc}

0800d76e <__multadd>:
 800d76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d772:	690d      	ldr	r5, [r1, #16]
 800d774:	461f      	mov	r7, r3
 800d776:	4606      	mov	r6, r0
 800d778:	460c      	mov	r4, r1
 800d77a:	f101 0c14 	add.w	ip, r1, #20
 800d77e:	2300      	movs	r3, #0
 800d780:	f8dc 0000 	ldr.w	r0, [ip]
 800d784:	b281      	uxth	r1, r0
 800d786:	fb02 7101 	mla	r1, r2, r1, r7
 800d78a:	0c0f      	lsrs	r7, r1, #16
 800d78c:	0c00      	lsrs	r0, r0, #16
 800d78e:	fb02 7000 	mla	r0, r2, r0, r7
 800d792:	b289      	uxth	r1, r1
 800d794:	3301      	adds	r3, #1
 800d796:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d79a:	429d      	cmp	r5, r3
 800d79c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d7a0:	f84c 1b04 	str.w	r1, [ip], #4
 800d7a4:	dcec      	bgt.n	800d780 <__multadd+0x12>
 800d7a6:	b1d7      	cbz	r7, 800d7de <__multadd+0x70>
 800d7a8:	68a3      	ldr	r3, [r4, #8]
 800d7aa:	42ab      	cmp	r3, r5
 800d7ac:	dc12      	bgt.n	800d7d4 <__multadd+0x66>
 800d7ae:	6861      	ldr	r1, [r4, #4]
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	3101      	adds	r1, #1
 800d7b4:	f7ff ff90 	bl	800d6d8 <_Balloc>
 800d7b8:	6922      	ldr	r2, [r4, #16]
 800d7ba:	3202      	adds	r2, #2
 800d7bc:	f104 010c 	add.w	r1, r4, #12
 800d7c0:	4680      	mov	r8, r0
 800d7c2:	0092      	lsls	r2, r2, #2
 800d7c4:	300c      	adds	r0, #12
 800d7c6:	f7fe f971 	bl	800baac <memcpy>
 800d7ca:	4621      	mov	r1, r4
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	f7ff ffb7 	bl	800d740 <_Bfree>
 800d7d2:	4644      	mov	r4, r8
 800d7d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7d8:	3501      	adds	r5, #1
 800d7da:	615f      	str	r7, [r3, #20]
 800d7dc:	6125      	str	r5, [r4, #16]
 800d7de:	4620      	mov	r0, r4
 800d7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d7e4 <__hi0bits>:
 800d7e4:	0c02      	lsrs	r2, r0, #16
 800d7e6:	0412      	lsls	r2, r2, #16
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	b9b2      	cbnz	r2, 800d81a <__hi0bits+0x36>
 800d7ec:	0403      	lsls	r3, r0, #16
 800d7ee:	2010      	movs	r0, #16
 800d7f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d7f4:	bf04      	itt	eq
 800d7f6:	021b      	lsleq	r3, r3, #8
 800d7f8:	3008      	addeq	r0, #8
 800d7fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d7fe:	bf04      	itt	eq
 800d800:	011b      	lsleq	r3, r3, #4
 800d802:	3004      	addeq	r0, #4
 800d804:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d808:	bf04      	itt	eq
 800d80a:	009b      	lsleq	r3, r3, #2
 800d80c:	3002      	addeq	r0, #2
 800d80e:	2b00      	cmp	r3, #0
 800d810:	db06      	blt.n	800d820 <__hi0bits+0x3c>
 800d812:	005b      	lsls	r3, r3, #1
 800d814:	d503      	bpl.n	800d81e <__hi0bits+0x3a>
 800d816:	3001      	adds	r0, #1
 800d818:	4770      	bx	lr
 800d81a:	2000      	movs	r0, #0
 800d81c:	e7e8      	b.n	800d7f0 <__hi0bits+0xc>
 800d81e:	2020      	movs	r0, #32
 800d820:	4770      	bx	lr

0800d822 <__lo0bits>:
 800d822:	6803      	ldr	r3, [r0, #0]
 800d824:	f013 0207 	ands.w	r2, r3, #7
 800d828:	4601      	mov	r1, r0
 800d82a:	d00b      	beq.n	800d844 <__lo0bits+0x22>
 800d82c:	07da      	lsls	r2, r3, #31
 800d82e:	d423      	bmi.n	800d878 <__lo0bits+0x56>
 800d830:	0798      	lsls	r0, r3, #30
 800d832:	bf49      	itett	mi
 800d834:	085b      	lsrmi	r3, r3, #1
 800d836:	089b      	lsrpl	r3, r3, #2
 800d838:	2001      	movmi	r0, #1
 800d83a:	600b      	strmi	r3, [r1, #0]
 800d83c:	bf5c      	itt	pl
 800d83e:	600b      	strpl	r3, [r1, #0]
 800d840:	2002      	movpl	r0, #2
 800d842:	4770      	bx	lr
 800d844:	b298      	uxth	r0, r3
 800d846:	b9a8      	cbnz	r0, 800d874 <__lo0bits+0x52>
 800d848:	0c1b      	lsrs	r3, r3, #16
 800d84a:	2010      	movs	r0, #16
 800d84c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d850:	bf04      	itt	eq
 800d852:	0a1b      	lsreq	r3, r3, #8
 800d854:	3008      	addeq	r0, #8
 800d856:	071a      	lsls	r2, r3, #28
 800d858:	bf04      	itt	eq
 800d85a:	091b      	lsreq	r3, r3, #4
 800d85c:	3004      	addeq	r0, #4
 800d85e:	079a      	lsls	r2, r3, #30
 800d860:	bf04      	itt	eq
 800d862:	089b      	lsreq	r3, r3, #2
 800d864:	3002      	addeq	r0, #2
 800d866:	07da      	lsls	r2, r3, #31
 800d868:	d402      	bmi.n	800d870 <__lo0bits+0x4e>
 800d86a:	085b      	lsrs	r3, r3, #1
 800d86c:	d006      	beq.n	800d87c <__lo0bits+0x5a>
 800d86e:	3001      	adds	r0, #1
 800d870:	600b      	str	r3, [r1, #0]
 800d872:	4770      	bx	lr
 800d874:	4610      	mov	r0, r2
 800d876:	e7e9      	b.n	800d84c <__lo0bits+0x2a>
 800d878:	2000      	movs	r0, #0
 800d87a:	4770      	bx	lr
 800d87c:	2020      	movs	r0, #32
 800d87e:	4770      	bx	lr

0800d880 <__i2b>:
 800d880:	b510      	push	{r4, lr}
 800d882:	460c      	mov	r4, r1
 800d884:	2101      	movs	r1, #1
 800d886:	f7ff ff27 	bl	800d6d8 <_Balloc>
 800d88a:	2201      	movs	r2, #1
 800d88c:	6144      	str	r4, [r0, #20]
 800d88e:	6102      	str	r2, [r0, #16]
 800d890:	bd10      	pop	{r4, pc}

0800d892 <__multiply>:
 800d892:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d896:	4614      	mov	r4, r2
 800d898:	690a      	ldr	r2, [r1, #16]
 800d89a:	6923      	ldr	r3, [r4, #16]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	bfb8      	it	lt
 800d8a0:	460b      	movlt	r3, r1
 800d8a2:	4688      	mov	r8, r1
 800d8a4:	bfbc      	itt	lt
 800d8a6:	46a0      	movlt	r8, r4
 800d8a8:	461c      	movlt	r4, r3
 800d8aa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d8ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d8b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8b6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d8ba:	eb07 0609 	add.w	r6, r7, r9
 800d8be:	42b3      	cmp	r3, r6
 800d8c0:	bfb8      	it	lt
 800d8c2:	3101      	addlt	r1, #1
 800d8c4:	f7ff ff08 	bl	800d6d8 <_Balloc>
 800d8c8:	f100 0514 	add.w	r5, r0, #20
 800d8cc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d8d0:	462b      	mov	r3, r5
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	4573      	cmp	r3, lr
 800d8d6:	d316      	bcc.n	800d906 <__multiply+0x74>
 800d8d8:	f104 0214 	add.w	r2, r4, #20
 800d8dc:	f108 0114 	add.w	r1, r8, #20
 800d8e0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d8e4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d8e8:	9300      	str	r3, [sp, #0]
 800d8ea:	9b00      	ldr	r3, [sp, #0]
 800d8ec:	9201      	str	r2, [sp, #4]
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d80c      	bhi.n	800d90c <__multiply+0x7a>
 800d8f2:	2e00      	cmp	r6, #0
 800d8f4:	dd03      	ble.n	800d8fe <__multiply+0x6c>
 800d8f6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d05d      	beq.n	800d9ba <__multiply+0x128>
 800d8fe:	6106      	str	r6, [r0, #16]
 800d900:	b003      	add	sp, #12
 800d902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d906:	f843 2b04 	str.w	r2, [r3], #4
 800d90a:	e7e3      	b.n	800d8d4 <__multiply+0x42>
 800d90c:	f8b2 b000 	ldrh.w	fp, [r2]
 800d910:	f1bb 0f00 	cmp.w	fp, #0
 800d914:	d023      	beq.n	800d95e <__multiply+0xcc>
 800d916:	4689      	mov	r9, r1
 800d918:	46ac      	mov	ip, r5
 800d91a:	f04f 0800 	mov.w	r8, #0
 800d91e:	f859 4b04 	ldr.w	r4, [r9], #4
 800d922:	f8dc a000 	ldr.w	sl, [ip]
 800d926:	b2a3      	uxth	r3, r4
 800d928:	fa1f fa8a 	uxth.w	sl, sl
 800d92c:	fb0b a303 	mla	r3, fp, r3, sl
 800d930:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d934:	f8dc 4000 	ldr.w	r4, [ip]
 800d938:	4443      	add	r3, r8
 800d93a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d93e:	fb0b 840a 	mla	r4, fp, sl, r8
 800d942:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d946:	46e2      	mov	sl, ip
 800d948:	b29b      	uxth	r3, r3
 800d94a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d94e:	454f      	cmp	r7, r9
 800d950:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d954:	f84a 3b04 	str.w	r3, [sl], #4
 800d958:	d82b      	bhi.n	800d9b2 <__multiply+0x120>
 800d95a:	f8cc 8004 	str.w	r8, [ip, #4]
 800d95e:	9b01      	ldr	r3, [sp, #4]
 800d960:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d964:	3204      	adds	r2, #4
 800d966:	f1ba 0f00 	cmp.w	sl, #0
 800d96a:	d020      	beq.n	800d9ae <__multiply+0x11c>
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	4689      	mov	r9, r1
 800d970:	46a8      	mov	r8, r5
 800d972:	f04f 0b00 	mov.w	fp, #0
 800d976:	f8b9 c000 	ldrh.w	ip, [r9]
 800d97a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d97e:	fb0a 440c 	mla	r4, sl, ip, r4
 800d982:	445c      	add	r4, fp
 800d984:	46c4      	mov	ip, r8
 800d986:	b29b      	uxth	r3, r3
 800d988:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d98c:	f84c 3b04 	str.w	r3, [ip], #4
 800d990:	f859 3b04 	ldr.w	r3, [r9], #4
 800d994:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d998:	0c1b      	lsrs	r3, r3, #16
 800d99a:	fb0a b303 	mla	r3, sl, r3, fp
 800d99e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d9a2:	454f      	cmp	r7, r9
 800d9a4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d9a8:	d805      	bhi.n	800d9b6 <__multiply+0x124>
 800d9aa:	f8c8 3004 	str.w	r3, [r8, #4]
 800d9ae:	3504      	adds	r5, #4
 800d9b0:	e79b      	b.n	800d8ea <__multiply+0x58>
 800d9b2:	46d4      	mov	ip, sl
 800d9b4:	e7b3      	b.n	800d91e <__multiply+0x8c>
 800d9b6:	46e0      	mov	r8, ip
 800d9b8:	e7dd      	b.n	800d976 <__multiply+0xe4>
 800d9ba:	3e01      	subs	r6, #1
 800d9bc:	e799      	b.n	800d8f2 <__multiply+0x60>
	...

0800d9c0 <__pow5mult>:
 800d9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9c4:	4615      	mov	r5, r2
 800d9c6:	f012 0203 	ands.w	r2, r2, #3
 800d9ca:	4606      	mov	r6, r0
 800d9cc:	460f      	mov	r7, r1
 800d9ce:	d007      	beq.n	800d9e0 <__pow5mult+0x20>
 800d9d0:	3a01      	subs	r2, #1
 800d9d2:	4c21      	ldr	r4, [pc, #132]	; (800da58 <__pow5mult+0x98>)
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9da:	f7ff fec8 	bl	800d76e <__multadd>
 800d9de:	4607      	mov	r7, r0
 800d9e0:	10ad      	asrs	r5, r5, #2
 800d9e2:	d035      	beq.n	800da50 <__pow5mult+0x90>
 800d9e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9e6:	b93c      	cbnz	r4, 800d9f8 <__pow5mult+0x38>
 800d9e8:	2010      	movs	r0, #16
 800d9ea:	f7ff fe6d 	bl	800d6c8 <malloc>
 800d9ee:	6270      	str	r0, [r6, #36]	; 0x24
 800d9f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9f4:	6004      	str	r4, [r0, #0]
 800d9f6:	60c4      	str	r4, [r0, #12]
 800d9f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d9fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da00:	b94c      	cbnz	r4, 800da16 <__pow5mult+0x56>
 800da02:	f240 2171 	movw	r1, #625	; 0x271
 800da06:	4630      	mov	r0, r6
 800da08:	f7ff ff3a 	bl	800d880 <__i2b>
 800da0c:	2300      	movs	r3, #0
 800da0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800da12:	4604      	mov	r4, r0
 800da14:	6003      	str	r3, [r0, #0]
 800da16:	f04f 0800 	mov.w	r8, #0
 800da1a:	07eb      	lsls	r3, r5, #31
 800da1c:	d50a      	bpl.n	800da34 <__pow5mult+0x74>
 800da1e:	4639      	mov	r1, r7
 800da20:	4622      	mov	r2, r4
 800da22:	4630      	mov	r0, r6
 800da24:	f7ff ff35 	bl	800d892 <__multiply>
 800da28:	4639      	mov	r1, r7
 800da2a:	4681      	mov	r9, r0
 800da2c:	4630      	mov	r0, r6
 800da2e:	f7ff fe87 	bl	800d740 <_Bfree>
 800da32:	464f      	mov	r7, r9
 800da34:	106d      	asrs	r5, r5, #1
 800da36:	d00b      	beq.n	800da50 <__pow5mult+0x90>
 800da38:	6820      	ldr	r0, [r4, #0]
 800da3a:	b938      	cbnz	r0, 800da4c <__pow5mult+0x8c>
 800da3c:	4622      	mov	r2, r4
 800da3e:	4621      	mov	r1, r4
 800da40:	4630      	mov	r0, r6
 800da42:	f7ff ff26 	bl	800d892 <__multiply>
 800da46:	6020      	str	r0, [r4, #0]
 800da48:	f8c0 8000 	str.w	r8, [r0]
 800da4c:	4604      	mov	r4, r0
 800da4e:	e7e4      	b.n	800da1a <__pow5mult+0x5a>
 800da50:	4638      	mov	r0, r7
 800da52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da56:	bf00      	nop
 800da58:	0800f038 	.word	0x0800f038

0800da5c <__lshift>:
 800da5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da60:	460c      	mov	r4, r1
 800da62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da66:	6923      	ldr	r3, [r4, #16]
 800da68:	6849      	ldr	r1, [r1, #4]
 800da6a:	eb0a 0903 	add.w	r9, sl, r3
 800da6e:	68a3      	ldr	r3, [r4, #8]
 800da70:	4607      	mov	r7, r0
 800da72:	4616      	mov	r6, r2
 800da74:	f109 0501 	add.w	r5, r9, #1
 800da78:	42ab      	cmp	r3, r5
 800da7a:	db32      	blt.n	800dae2 <__lshift+0x86>
 800da7c:	4638      	mov	r0, r7
 800da7e:	f7ff fe2b 	bl	800d6d8 <_Balloc>
 800da82:	2300      	movs	r3, #0
 800da84:	4680      	mov	r8, r0
 800da86:	f100 0114 	add.w	r1, r0, #20
 800da8a:	461a      	mov	r2, r3
 800da8c:	4553      	cmp	r3, sl
 800da8e:	db2b      	blt.n	800dae8 <__lshift+0x8c>
 800da90:	6920      	ldr	r0, [r4, #16]
 800da92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da96:	f104 0314 	add.w	r3, r4, #20
 800da9a:	f016 021f 	ands.w	r2, r6, #31
 800da9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800daa2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800daa6:	d025      	beq.n	800daf4 <__lshift+0x98>
 800daa8:	f1c2 0e20 	rsb	lr, r2, #32
 800daac:	2000      	movs	r0, #0
 800daae:	681e      	ldr	r6, [r3, #0]
 800dab0:	468a      	mov	sl, r1
 800dab2:	4096      	lsls	r6, r2
 800dab4:	4330      	orrs	r0, r6
 800dab6:	f84a 0b04 	str.w	r0, [sl], #4
 800daba:	f853 0b04 	ldr.w	r0, [r3], #4
 800dabe:	459c      	cmp	ip, r3
 800dac0:	fa20 f00e 	lsr.w	r0, r0, lr
 800dac4:	d814      	bhi.n	800daf0 <__lshift+0x94>
 800dac6:	6048      	str	r0, [r1, #4]
 800dac8:	b108      	cbz	r0, 800dace <__lshift+0x72>
 800daca:	f109 0502 	add.w	r5, r9, #2
 800dace:	3d01      	subs	r5, #1
 800dad0:	4638      	mov	r0, r7
 800dad2:	f8c8 5010 	str.w	r5, [r8, #16]
 800dad6:	4621      	mov	r1, r4
 800dad8:	f7ff fe32 	bl	800d740 <_Bfree>
 800dadc:	4640      	mov	r0, r8
 800dade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dae2:	3101      	adds	r1, #1
 800dae4:	005b      	lsls	r3, r3, #1
 800dae6:	e7c7      	b.n	800da78 <__lshift+0x1c>
 800dae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800daec:	3301      	adds	r3, #1
 800daee:	e7cd      	b.n	800da8c <__lshift+0x30>
 800daf0:	4651      	mov	r1, sl
 800daf2:	e7dc      	b.n	800daae <__lshift+0x52>
 800daf4:	3904      	subs	r1, #4
 800daf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dafa:	f841 2f04 	str.w	r2, [r1, #4]!
 800dafe:	459c      	cmp	ip, r3
 800db00:	d8f9      	bhi.n	800daf6 <__lshift+0x9a>
 800db02:	e7e4      	b.n	800dace <__lshift+0x72>

0800db04 <__mcmp>:
 800db04:	6903      	ldr	r3, [r0, #16]
 800db06:	690a      	ldr	r2, [r1, #16]
 800db08:	1a9b      	subs	r3, r3, r2
 800db0a:	b530      	push	{r4, r5, lr}
 800db0c:	d10c      	bne.n	800db28 <__mcmp+0x24>
 800db0e:	0092      	lsls	r2, r2, #2
 800db10:	3014      	adds	r0, #20
 800db12:	3114      	adds	r1, #20
 800db14:	1884      	adds	r4, r0, r2
 800db16:	4411      	add	r1, r2
 800db18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db20:	4295      	cmp	r5, r2
 800db22:	d003      	beq.n	800db2c <__mcmp+0x28>
 800db24:	d305      	bcc.n	800db32 <__mcmp+0x2e>
 800db26:	2301      	movs	r3, #1
 800db28:	4618      	mov	r0, r3
 800db2a:	bd30      	pop	{r4, r5, pc}
 800db2c:	42a0      	cmp	r0, r4
 800db2e:	d3f3      	bcc.n	800db18 <__mcmp+0x14>
 800db30:	e7fa      	b.n	800db28 <__mcmp+0x24>
 800db32:	f04f 33ff 	mov.w	r3, #4294967295
 800db36:	e7f7      	b.n	800db28 <__mcmp+0x24>

0800db38 <__mdiff>:
 800db38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db3c:	460d      	mov	r5, r1
 800db3e:	4607      	mov	r7, r0
 800db40:	4611      	mov	r1, r2
 800db42:	4628      	mov	r0, r5
 800db44:	4614      	mov	r4, r2
 800db46:	f7ff ffdd 	bl	800db04 <__mcmp>
 800db4a:	1e06      	subs	r6, r0, #0
 800db4c:	d108      	bne.n	800db60 <__mdiff+0x28>
 800db4e:	4631      	mov	r1, r6
 800db50:	4638      	mov	r0, r7
 800db52:	f7ff fdc1 	bl	800d6d8 <_Balloc>
 800db56:	2301      	movs	r3, #1
 800db58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800db5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db60:	bfa4      	itt	ge
 800db62:	4623      	movge	r3, r4
 800db64:	462c      	movge	r4, r5
 800db66:	4638      	mov	r0, r7
 800db68:	6861      	ldr	r1, [r4, #4]
 800db6a:	bfa6      	itte	ge
 800db6c:	461d      	movge	r5, r3
 800db6e:	2600      	movge	r6, #0
 800db70:	2601      	movlt	r6, #1
 800db72:	f7ff fdb1 	bl	800d6d8 <_Balloc>
 800db76:	692b      	ldr	r3, [r5, #16]
 800db78:	60c6      	str	r6, [r0, #12]
 800db7a:	6926      	ldr	r6, [r4, #16]
 800db7c:	f105 0914 	add.w	r9, r5, #20
 800db80:	f104 0214 	add.w	r2, r4, #20
 800db84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800db88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800db8c:	f100 0514 	add.w	r5, r0, #20
 800db90:	f04f 0e00 	mov.w	lr, #0
 800db94:	f852 ab04 	ldr.w	sl, [r2], #4
 800db98:	f859 4b04 	ldr.w	r4, [r9], #4
 800db9c:	fa1e f18a 	uxtah	r1, lr, sl
 800dba0:	b2a3      	uxth	r3, r4
 800dba2:	1ac9      	subs	r1, r1, r3
 800dba4:	0c23      	lsrs	r3, r4, #16
 800dba6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800dbaa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dbae:	b289      	uxth	r1, r1
 800dbb0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800dbb4:	45c8      	cmp	r8, r9
 800dbb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dbba:	4694      	mov	ip, r2
 800dbbc:	f845 3b04 	str.w	r3, [r5], #4
 800dbc0:	d8e8      	bhi.n	800db94 <__mdiff+0x5c>
 800dbc2:	45bc      	cmp	ip, r7
 800dbc4:	d304      	bcc.n	800dbd0 <__mdiff+0x98>
 800dbc6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800dbca:	b183      	cbz	r3, 800dbee <__mdiff+0xb6>
 800dbcc:	6106      	str	r6, [r0, #16]
 800dbce:	e7c5      	b.n	800db5c <__mdiff+0x24>
 800dbd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dbd4:	fa1e f381 	uxtah	r3, lr, r1
 800dbd8:	141a      	asrs	r2, r3, #16
 800dbda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbe4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800dbe8:	f845 3b04 	str.w	r3, [r5], #4
 800dbec:	e7e9      	b.n	800dbc2 <__mdiff+0x8a>
 800dbee:	3e01      	subs	r6, #1
 800dbf0:	e7e9      	b.n	800dbc6 <__mdiff+0x8e>

0800dbf2 <__d2b>:
 800dbf2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbf6:	460e      	mov	r6, r1
 800dbf8:	2101      	movs	r1, #1
 800dbfa:	ec59 8b10 	vmov	r8, r9, d0
 800dbfe:	4615      	mov	r5, r2
 800dc00:	f7ff fd6a 	bl	800d6d8 <_Balloc>
 800dc04:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800dc08:	4607      	mov	r7, r0
 800dc0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc0e:	bb34      	cbnz	r4, 800dc5e <__d2b+0x6c>
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	f1b8 0300 	subs.w	r3, r8, #0
 800dc16:	d027      	beq.n	800dc68 <__d2b+0x76>
 800dc18:	a802      	add	r0, sp, #8
 800dc1a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800dc1e:	f7ff fe00 	bl	800d822 <__lo0bits>
 800dc22:	9900      	ldr	r1, [sp, #0]
 800dc24:	b1f0      	cbz	r0, 800dc64 <__d2b+0x72>
 800dc26:	9a01      	ldr	r2, [sp, #4]
 800dc28:	f1c0 0320 	rsb	r3, r0, #32
 800dc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc30:	430b      	orrs	r3, r1
 800dc32:	40c2      	lsrs	r2, r0
 800dc34:	617b      	str	r3, [r7, #20]
 800dc36:	9201      	str	r2, [sp, #4]
 800dc38:	9b01      	ldr	r3, [sp, #4]
 800dc3a:	61bb      	str	r3, [r7, #24]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	bf14      	ite	ne
 800dc40:	2102      	movne	r1, #2
 800dc42:	2101      	moveq	r1, #1
 800dc44:	6139      	str	r1, [r7, #16]
 800dc46:	b1c4      	cbz	r4, 800dc7a <__d2b+0x88>
 800dc48:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800dc4c:	4404      	add	r4, r0
 800dc4e:	6034      	str	r4, [r6, #0]
 800dc50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc54:	6028      	str	r0, [r5, #0]
 800dc56:	4638      	mov	r0, r7
 800dc58:	b003      	add	sp, #12
 800dc5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc62:	e7d5      	b.n	800dc10 <__d2b+0x1e>
 800dc64:	6179      	str	r1, [r7, #20]
 800dc66:	e7e7      	b.n	800dc38 <__d2b+0x46>
 800dc68:	a801      	add	r0, sp, #4
 800dc6a:	f7ff fdda 	bl	800d822 <__lo0bits>
 800dc6e:	9b01      	ldr	r3, [sp, #4]
 800dc70:	617b      	str	r3, [r7, #20]
 800dc72:	2101      	movs	r1, #1
 800dc74:	6139      	str	r1, [r7, #16]
 800dc76:	3020      	adds	r0, #32
 800dc78:	e7e5      	b.n	800dc46 <__d2b+0x54>
 800dc7a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800dc7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc82:	6030      	str	r0, [r6, #0]
 800dc84:	6918      	ldr	r0, [r3, #16]
 800dc86:	f7ff fdad 	bl	800d7e4 <__hi0bits>
 800dc8a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800dc8e:	e7e1      	b.n	800dc54 <__d2b+0x62>

0800dc90 <_calloc_r>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	fb02 f401 	mul.w	r4, r2, r1
 800dc96:	4621      	mov	r1, r4
 800dc98:	f000 f856 	bl	800dd48 <_malloc_r>
 800dc9c:	4605      	mov	r5, r0
 800dc9e:	b118      	cbz	r0, 800dca8 <_calloc_r+0x18>
 800dca0:	4622      	mov	r2, r4
 800dca2:	2100      	movs	r1, #0
 800dca4:	f7fd ff0d 	bl	800bac2 <memset>
 800dca8:	4628      	mov	r0, r5
 800dcaa:	bd38      	pop	{r3, r4, r5, pc}

0800dcac <_free_r>:
 800dcac:	b538      	push	{r3, r4, r5, lr}
 800dcae:	4605      	mov	r5, r0
 800dcb0:	2900      	cmp	r1, #0
 800dcb2:	d045      	beq.n	800dd40 <_free_r+0x94>
 800dcb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcb8:	1f0c      	subs	r4, r1, #4
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	bfb8      	it	lt
 800dcbe:	18e4      	addlt	r4, r4, r3
 800dcc0:	f000 fc03 	bl	800e4ca <__malloc_lock>
 800dcc4:	4a1f      	ldr	r2, [pc, #124]	; (800dd44 <_free_r+0x98>)
 800dcc6:	6813      	ldr	r3, [r2, #0]
 800dcc8:	4610      	mov	r0, r2
 800dcca:	b933      	cbnz	r3, 800dcda <_free_r+0x2e>
 800dccc:	6063      	str	r3, [r4, #4]
 800dcce:	6014      	str	r4, [r2, #0]
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcd6:	f000 bbf9 	b.w	800e4cc <__malloc_unlock>
 800dcda:	42a3      	cmp	r3, r4
 800dcdc:	d90c      	bls.n	800dcf8 <_free_r+0x4c>
 800dcde:	6821      	ldr	r1, [r4, #0]
 800dce0:	1862      	adds	r2, r4, r1
 800dce2:	4293      	cmp	r3, r2
 800dce4:	bf04      	itt	eq
 800dce6:	681a      	ldreq	r2, [r3, #0]
 800dce8:	685b      	ldreq	r3, [r3, #4]
 800dcea:	6063      	str	r3, [r4, #4]
 800dcec:	bf04      	itt	eq
 800dcee:	1852      	addeq	r2, r2, r1
 800dcf0:	6022      	streq	r2, [r4, #0]
 800dcf2:	6004      	str	r4, [r0, #0]
 800dcf4:	e7ec      	b.n	800dcd0 <_free_r+0x24>
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	685a      	ldr	r2, [r3, #4]
 800dcfa:	b10a      	cbz	r2, 800dd00 <_free_r+0x54>
 800dcfc:	42a2      	cmp	r2, r4
 800dcfe:	d9fa      	bls.n	800dcf6 <_free_r+0x4a>
 800dd00:	6819      	ldr	r1, [r3, #0]
 800dd02:	1858      	adds	r0, r3, r1
 800dd04:	42a0      	cmp	r0, r4
 800dd06:	d10b      	bne.n	800dd20 <_free_r+0x74>
 800dd08:	6820      	ldr	r0, [r4, #0]
 800dd0a:	4401      	add	r1, r0
 800dd0c:	1858      	adds	r0, r3, r1
 800dd0e:	4282      	cmp	r2, r0
 800dd10:	6019      	str	r1, [r3, #0]
 800dd12:	d1dd      	bne.n	800dcd0 <_free_r+0x24>
 800dd14:	6810      	ldr	r0, [r2, #0]
 800dd16:	6852      	ldr	r2, [r2, #4]
 800dd18:	605a      	str	r2, [r3, #4]
 800dd1a:	4401      	add	r1, r0
 800dd1c:	6019      	str	r1, [r3, #0]
 800dd1e:	e7d7      	b.n	800dcd0 <_free_r+0x24>
 800dd20:	d902      	bls.n	800dd28 <_free_r+0x7c>
 800dd22:	230c      	movs	r3, #12
 800dd24:	602b      	str	r3, [r5, #0]
 800dd26:	e7d3      	b.n	800dcd0 <_free_r+0x24>
 800dd28:	6820      	ldr	r0, [r4, #0]
 800dd2a:	1821      	adds	r1, r4, r0
 800dd2c:	428a      	cmp	r2, r1
 800dd2e:	bf04      	itt	eq
 800dd30:	6811      	ldreq	r1, [r2, #0]
 800dd32:	6852      	ldreq	r2, [r2, #4]
 800dd34:	6062      	str	r2, [r4, #4]
 800dd36:	bf04      	itt	eq
 800dd38:	1809      	addeq	r1, r1, r0
 800dd3a:	6021      	streq	r1, [r4, #0]
 800dd3c:	605c      	str	r4, [r3, #4]
 800dd3e:	e7c7      	b.n	800dcd0 <_free_r+0x24>
 800dd40:	bd38      	pop	{r3, r4, r5, pc}
 800dd42:	bf00      	nop
 800dd44:	200006f0 	.word	0x200006f0

0800dd48 <_malloc_r>:
 800dd48:	b570      	push	{r4, r5, r6, lr}
 800dd4a:	1ccd      	adds	r5, r1, #3
 800dd4c:	f025 0503 	bic.w	r5, r5, #3
 800dd50:	3508      	adds	r5, #8
 800dd52:	2d0c      	cmp	r5, #12
 800dd54:	bf38      	it	cc
 800dd56:	250c      	movcc	r5, #12
 800dd58:	2d00      	cmp	r5, #0
 800dd5a:	4606      	mov	r6, r0
 800dd5c:	db01      	blt.n	800dd62 <_malloc_r+0x1a>
 800dd5e:	42a9      	cmp	r1, r5
 800dd60:	d903      	bls.n	800dd6a <_malloc_r+0x22>
 800dd62:	230c      	movs	r3, #12
 800dd64:	6033      	str	r3, [r6, #0]
 800dd66:	2000      	movs	r0, #0
 800dd68:	bd70      	pop	{r4, r5, r6, pc}
 800dd6a:	f000 fbae 	bl	800e4ca <__malloc_lock>
 800dd6e:	4a21      	ldr	r2, [pc, #132]	; (800ddf4 <_malloc_r+0xac>)
 800dd70:	6814      	ldr	r4, [r2, #0]
 800dd72:	4621      	mov	r1, r4
 800dd74:	b991      	cbnz	r1, 800dd9c <_malloc_r+0x54>
 800dd76:	4c20      	ldr	r4, [pc, #128]	; (800ddf8 <_malloc_r+0xb0>)
 800dd78:	6823      	ldr	r3, [r4, #0]
 800dd7a:	b91b      	cbnz	r3, 800dd84 <_malloc_r+0x3c>
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	f000 facf 	bl	800e320 <_sbrk_r>
 800dd82:	6020      	str	r0, [r4, #0]
 800dd84:	4629      	mov	r1, r5
 800dd86:	4630      	mov	r0, r6
 800dd88:	f000 faca 	bl	800e320 <_sbrk_r>
 800dd8c:	1c43      	adds	r3, r0, #1
 800dd8e:	d124      	bne.n	800ddda <_malloc_r+0x92>
 800dd90:	230c      	movs	r3, #12
 800dd92:	6033      	str	r3, [r6, #0]
 800dd94:	4630      	mov	r0, r6
 800dd96:	f000 fb99 	bl	800e4cc <__malloc_unlock>
 800dd9a:	e7e4      	b.n	800dd66 <_malloc_r+0x1e>
 800dd9c:	680b      	ldr	r3, [r1, #0]
 800dd9e:	1b5b      	subs	r3, r3, r5
 800dda0:	d418      	bmi.n	800ddd4 <_malloc_r+0x8c>
 800dda2:	2b0b      	cmp	r3, #11
 800dda4:	d90f      	bls.n	800ddc6 <_malloc_r+0x7e>
 800dda6:	600b      	str	r3, [r1, #0]
 800dda8:	50cd      	str	r5, [r1, r3]
 800ddaa:	18cc      	adds	r4, r1, r3
 800ddac:	4630      	mov	r0, r6
 800ddae:	f000 fb8d 	bl	800e4cc <__malloc_unlock>
 800ddb2:	f104 000b 	add.w	r0, r4, #11
 800ddb6:	1d23      	adds	r3, r4, #4
 800ddb8:	f020 0007 	bic.w	r0, r0, #7
 800ddbc:	1ac3      	subs	r3, r0, r3
 800ddbe:	d0d3      	beq.n	800dd68 <_malloc_r+0x20>
 800ddc0:	425a      	negs	r2, r3
 800ddc2:	50e2      	str	r2, [r4, r3]
 800ddc4:	e7d0      	b.n	800dd68 <_malloc_r+0x20>
 800ddc6:	428c      	cmp	r4, r1
 800ddc8:	684b      	ldr	r3, [r1, #4]
 800ddca:	bf16      	itet	ne
 800ddcc:	6063      	strne	r3, [r4, #4]
 800ddce:	6013      	streq	r3, [r2, #0]
 800ddd0:	460c      	movne	r4, r1
 800ddd2:	e7eb      	b.n	800ddac <_malloc_r+0x64>
 800ddd4:	460c      	mov	r4, r1
 800ddd6:	6849      	ldr	r1, [r1, #4]
 800ddd8:	e7cc      	b.n	800dd74 <_malloc_r+0x2c>
 800ddda:	1cc4      	adds	r4, r0, #3
 800dddc:	f024 0403 	bic.w	r4, r4, #3
 800dde0:	42a0      	cmp	r0, r4
 800dde2:	d005      	beq.n	800ddf0 <_malloc_r+0xa8>
 800dde4:	1a21      	subs	r1, r4, r0
 800dde6:	4630      	mov	r0, r6
 800dde8:	f000 fa9a 	bl	800e320 <_sbrk_r>
 800ddec:	3001      	adds	r0, #1
 800ddee:	d0cf      	beq.n	800dd90 <_malloc_r+0x48>
 800ddf0:	6025      	str	r5, [r4, #0]
 800ddf2:	e7db      	b.n	800ddac <_malloc_r+0x64>
 800ddf4:	200006f0 	.word	0x200006f0
 800ddf8:	200006f4 	.word	0x200006f4

0800ddfc <__ssputs_r>:
 800ddfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de00:	688e      	ldr	r6, [r1, #8]
 800de02:	429e      	cmp	r6, r3
 800de04:	4682      	mov	sl, r0
 800de06:	460c      	mov	r4, r1
 800de08:	4690      	mov	r8, r2
 800de0a:	4699      	mov	r9, r3
 800de0c:	d837      	bhi.n	800de7e <__ssputs_r+0x82>
 800de0e:	898a      	ldrh	r2, [r1, #12]
 800de10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de14:	d031      	beq.n	800de7a <__ssputs_r+0x7e>
 800de16:	6825      	ldr	r5, [r4, #0]
 800de18:	6909      	ldr	r1, [r1, #16]
 800de1a:	1a6f      	subs	r7, r5, r1
 800de1c:	6965      	ldr	r5, [r4, #20]
 800de1e:	2302      	movs	r3, #2
 800de20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de24:	fb95 f5f3 	sdiv	r5, r5, r3
 800de28:	f109 0301 	add.w	r3, r9, #1
 800de2c:	443b      	add	r3, r7
 800de2e:	429d      	cmp	r5, r3
 800de30:	bf38      	it	cc
 800de32:	461d      	movcc	r5, r3
 800de34:	0553      	lsls	r3, r2, #21
 800de36:	d530      	bpl.n	800de9a <__ssputs_r+0x9e>
 800de38:	4629      	mov	r1, r5
 800de3a:	f7ff ff85 	bl	800dd48 <_malloc_r>
 800de3e:	4606      	mov	r6, r0
 800de40:	b950      	cbnz	r0, 800de58 <__ssputs_r+0x5c>
 800de42:	230c      	movs	r3, #12
 800de44:	f8ca 3000 	str.w	r3, [sl]
 800de48:	89a3      	ldrh	r3, [r4, #12]
 800de4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de4e:	81a3      	strh	r3, [r4, #12]
 800de50:	f04f 30ff 	mov.w	r0, #4294967295
 800de54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de58:	463a      	mov	r2, r7
 800de5a:	6921      	ldr	r1, [r4, #16]
 800de5c:	f7fd fe26 	bl	800baac <memcpy>
 800de60:	89a3      	ldrh	r3, [r4, #12]
 800de62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800de66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de6a:	81a3      	strh	r3, [r4, #12]
 800de6c:	6126      	str	r6, [r4, #16]
 800de6e:	6165      	str	r5, [r4, #20]
 800de70:	443e      	add	r6, r7
 800de72:	1bed      	subs	r5, r5, r7
 800de74:	6026      	str	r6, [r4, #0]
 800de76:	60a5      	str	r5, [r4, #8]
 800de78:	464e      	mov	r6, r9
 800de7a:	454e      	cmp	r6, r9
 800de7c:	d900      	bls.n	800de80 <__ssputs_r+0x84>
 800de7e:	464e      	mov	r6, r9
 800de80:	4632      	mov	r2, r6
 800de82:	4641      	mov	r1, r8
 800de84:	6820      	ldr	r0, [r4, #0]
 800de86:	f000 fb07 	bl	800e498 <memmove>
 800de8a:	68a3      	ldr	r3, [r4, #8]
 800de8c:	1b9b      	subs	r3, r3, r6
 800de8e:	60a3      	str	r3, [r4, #8]
 800de90:	6823      	ldr	r3, [r4, #0]
 800de92:	441e      	add	r6, r3
 800de94:	6026      	str	r6, [r4, #0]
 800de96:	2000      	movs	r0, #0
 800de98:	e7dc      	b.n	800de54 <__ssputs_r+0x58>
 800de9a:	462a      	mov	r2, r5
 800de9c:	f000 fb17 	bl	800e4ce <_realloc_r>
 800dea0:	4606      	mov	r6, r0
 800dea2:	2800      	cmp	r0, #0
 800dea4:	d1e2      	bne.n	800de6c <__ssputs_r+0x70>
 800dea6:	6921      	ldr	r1, [r4, #16]
 800dea8:	4650      	mov	r0, sl
 800deaa:	f7ff feff 	bl	800dcac <_free_r>
 800deae:	e7c8      	b.n	800de42 <__ssputs_r+0x46>

0800deb0 <_svfiprintf_r>:
 800deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb4:	461d      	mov	r5, r3
 800deb6:	898b      	ldrh	r3, [r1, #12]
 800deb8:	061f      	lsls	r7, r3, #24
 800deba:	b09d      	sub	sp, #116	; 0x74
 800debc:	4680      	mov	r8, r0
 800debe:	460c      	mov	r4, r1
 800dec0:	4616      	mov	r6, r2
 800dec2:	d50f      	bpl.n	800dee4 <_svfiprintf_r+0x34>
 800dec4:	690b      	ldr	r3, [r1, #16]
 800dec6:	b96b      	cbnz	r3, 800dee4 <_svfiprintf_r+0x34>
 800dec8:	2140      	movs	r1, #64	; 0x40
 800deca:	f7ff ff3d 	bl	800dd48 <_malloc_r>
 800dece:	6020      	str	r0, [r4, #0]
 800ded0:	6120      	str	r0, [r4, #16]
 800ded2:	b928      	cbnz	r0, 800dee0 <_svfiprintf_r+0x30>
 800ded4:	230c      	movs	r3, #12
 800ded6:	f8c8 3000 	str.w	r3, [r8]
 800deda:	f04f 30ff 	mov.w	r0, #4294967295
 800dede:	e0c8      	b.n	800e072 <_svfiprintf_r+0x1c2>
 800dee0:	2340      	movs	r3, #64	; 0x40
 800dee2:	6163      	str	r3, [r4, #20]
 800dee4:	2300      	movs	r3, #0
 800dee6:	9309      	str	r3, [sp, #36]	; 0x24
 800dee8:	2320      	movs	r3, #32
 800deea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800deee:	2330      	movs	r3, #48	; 0x30
 800def0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800def4:	9503      	str	r5, [sp, #12]
 800def6:	f04f 0b01 	mov.w	fp, #1
 800defa:	4637      	mov	r7, r6
 800defc:	463d      	mov	r5, r7
 800defe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800df02:	b10b      	cbz	r3, 800df08 <_svfiprintf_r+0x58>
 800df04:	2b25      	cmp	r3, #37	; 0x25
 800df06:	d13e      	bne.n	800df86 <_svfiprintf_r+0xd6>
 800df08:	ebb7 0a06 	subs.w	sl, r7, r6
 800df0c:	d00b      	beq.n	800df26 <_svfiprintf_r+0x76>
 800df0e:	4653      	mov	r3, sl
 800df10:	4632      	mov	r2, r6
 800df12:	4621      	mov	r1, r4
 800df14:	4640      	mov	r0, r8
 800df16:	f7ff ff71 	bl	800ddfc <__ssputs_r>
 800df1a:	3001      	adds	r0, #1
 800df1c:	f000 80a4 	beq.w	800e068 <_svfiprintf_r+0x1b8>
 800df20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df22:	4453      	add	r3, sl
 800df24:	9309      	str	r3, [sp, #36]	; 0x24
 800df26:	783b      	ldrb	r3, [r7, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f000 809d 	beq.w	800e068 <_svfiprintf_r+0x1b8>
 800df2e:	2300      	movs	r3, #0
 800df30:	f04f 32ff 	mov.w	r2, #4294967295
 800df34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df38:	9304      	str	r3, [sp, #16]
 800df3a:	9307      	str	r3, [sp, #28]
 800df3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df40:	931a      	str	r3, [sp, #104]	; 0x68
 800df42:	462f      	mov	r7, r5
 800df44:	2205      	movs	r2, #5
 800df46:	f817 1b01 	ldrb.w	r1, [r7], #1
 800df4a:	4850      	ldr	r0, [pc, #320]	; (800e08c <_svfiprintf_r+0x1dc>)
 800df4c:	f7f2 f948 	bl	80001e0 <memchr>
 800df50:	9b04      	ldr	r3, [sp, #16]
 800df52:	b9d0      	cbnz	r0, 800df8a <_svfiprintf_r+0xda>
 800df54:	06d9      	lsls	r1, r3, #27
 800df56:	bf44      	itt	mi
 800df58:	2220      	movmi	r2, #32
 800df5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df5e:	071a      	lsls	r2, r3, #28
 800df60:	bf44      	itt	mi
 800df62:	222b      	movmi	r2, #43	; 0x2b
 800df64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df68:	782a      	ldrb	r2, [r5, #0]
 800df6a:	2a2a      	cmp	r2, #42	; 0x2a
 800df6c:	d015      	beq.n	800df9a <_svfiprintf_r+0xea>
 800df6e:	9a07      	ldr	r2, [sp, #28]
 800df70:	462f      	mov	r7, r5
 800df72:	2000      	movs	r0, #0
 800df74:	250a      	movs	r5, #10
 800df76:	4639      	mov	r1, r7
 800df78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df7c:	3b30      	subs	r3, #48	; 0x30
 800df7e:	2b09      	cmp	r3, #9
 800df80:	d94d      	bls.n	800e01e <_svfiprintf_r+0x16e>
 800df82:	b1b8      	cbz	r0, 800dfb4 <_svfiprintf_r+0x104>
 800df84:	e00f      	b.n	800dfa6 <_svfiprintf_r+0xf6>
 800df86:	462f      	mov	r7, r5
 800df88:	e7b8      	b.n	800defc <_svfiprintf_r+0x4c>
 800df8a:	4a40      	ldr	r2, [pc, #256]	; (800e08c <_svfiprintf_r+0x1dc>)
 800df8c:	1a80      	subs	r0, r0, r2
 800df8e:	fa0b f000 	lsl.w	r0, fp, r0
 800df92:	4318      	orrs	r0, r3
 800df94:	9004      	str	r0, [sp, #16]
 800df96:	463d      	mov	r5, r7
 800df98:	e7d3      	b.n	800df42 <_svfiprintf_r+0x92>
 800df9a:	9a03      	ldr	r2, [sp, #12]
 800df9c:	1d11      	adds	r1, r2, #4
 800df9e:	6812      	ldr	r2, [r2, #0]
 800dfa0:	9103      	str	r1, [sp, #12]
 800dfa2:	2a00      	cmp	r2, #0
 800dfa4:	db01      	blt.n	800dfaa <_svfiprintf_r+0xfa>
 800dfa6:	9207      	str	r2, [sp, #28]
 800dfa8:	e004      	b.n	800dfb4 <_svfiprintf_r+0x104>
 800dfaa:	4252      	negs	r2, r2
 800dfac:	f043 0302 	orr.w	r3, r3, #2
 800dfb0:	9207      	str	r2, [sp, #28]
 800dfb2:	9304      	str	r3, [sp, #16]
 800dfb4:	783b      	ldrb	r3, [r7, #0]
 800dfb6:	2b2e      	cmp	r3, #46	; 0x2e
 800dfb8:	d10c      	bne.n	800dfd4 <_svfiprintf_r+0x124>
 800dfba:	787b      	ldrb	r3, [r7, #1]
 800dfbc:	2b2a      	cmp	r3, #42	; 0x2a
 800dfbe:	d133      	bne.n	800e028 <_svfiprintf_r+0x178>
 800dfc0:	9b03      	ldr	r3, [sp, #12]
 800dfc2:	1d1a      	adds	r2, r3, #4
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	9203      	str	r2, [sp, #12]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	bfb8      	it	lt
 800dfcc:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfd0:	3702      	adds	r7, #2
 800dfd2:	9305      	str	r3, [sp, #20]
 800dfd4:	4d2e      	ldr	r5, [pc, #184]	; (800e090 <_svfiprintf_r+0x1e0>)
 800dfd6:	7839      	ldrb	r1, [r7, #0]
 800dfd8:	2203      	movs	r2, #3
 800dfda:	4628      	mov	r0, r5
 800dfdc:	f7f2 f900 	bl	80001e0 <memchr>
 800dfe0:	b138      	cbz	r0, 800dff2 <_svfiprintf_r+0x142>
 800dfe2:	2340      	movs	r3, #64	; 0x40
 800dfe4:	1b40      	subs	r0, r0, r5
 800dfe6:	fa03 f000 	lsl.w	r0, r3, r0
 800dfea:	9b04      	ldr	r3, [sp, #16]
 800dfec:	4303      	orrs	r3, r0
 800dfee:	3701      	adds	r7, #1
 800dff0:	9304      	str	r3, [sp, #16]
 800dff2:	7839      	ldrb	r1, [r7, #0]
 800dff4:	4827      	ldr	r0, [pc, #156]	; (800e094 <_svfiprintf_r+0x1e4>)
 800dff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dffa:	2206      	movs	r2, #6
 800dffc:	1c7e      	adds	r6, r7, #1
 800dffe:	f7f2 f8ef 	bl	80001e0 <memchr>
 800e002:	2800      	cmp	r0, #0
 800e004:	d038      	beq.n	800e078 <_svfiprintf_r+0x1c8>
 800e006:	4b24      	ldr	r3, [pc, #144]	; (800e098 <_svfiprintf_r+0x1e8>)
 800e008:	bb13      	cbnz	r3, 800e050 <_svfiprintf_r+0x1a0>
 800e00a:	9b03      	ldr	r3, [sp, #12]
 800e00c:	3307      	adds	r3, #7
 800e00e:	f023 0307 	bic.w	r3, r3, #7
 800e012:	3308      	adds	r3, #8
 800e014:	9303      	str	r3, [sp, #12]
 800e016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e018:	444b      	add	r3, r9
 800e01a:	9309      	str	r3, [sp, #36]	; 0x24
 800e01c:	e76d      	b.n	800defa <_svfiprintf_r+0x4a>
 800e01e:	fb05 3202 	mla	r2, r5, r2, r3
 800e022:	2001      	movs	r0, #1
 800e024:	460f      	mov	r7, r1
 800e026:	e7a6      	b.n	800df76 <_svfiprintf_r+0xc6>
 800e028:	2300      	movs	r3, #0
 800e02a:	3701      	adds	r7, #1
 800e02c:	9305      	str	r3, [sp, #20]
 800e02e:	4619      	mov	r1, r3
 800e030:	250a      	movs	r5, #10
 800e032:	4638      	mov	r0, r7
 800e034:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e038:	3a30      	subs	r2, #48	; 0x30
 800e03a:	2a09      	cmp	r2, #9
 800e03c:	d903      	bls.n	800e046 <_svfiprintf_r+0x196>
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d0c8      	beq.n	800dfd4 <_svfiprintf_r+0x124>
 800e042:	9105      	str	r1, [sp, #20]
 800e044:	e7c6      	b.n	800dfd4 <_svfiprintf_r+0x124>
 800e046:	fb05 2101 	mla	r1, r5, r1, r2
 800e04a:	2301      	movs	r3, #1
 800e04c:	4607      	mov	r7, r0
 800e04e:	e7f0      	b.n	800e032 <_svfiprintf_r+0x182>
 800e050:	ab03      	add	r3, sp, #12
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	4622      	mov	r2, r4
 800e056:	4b11      	ldr	r3, [pc, #68]	; (800e09c <_svfiprintf_r+0x1ec>)
 800e058:	a904      	add	r1, sp, #16
 800e05a:	4640      	mov	r0, r8
 800e05c:	f7fd fdce 	bl	800bbfc <_printf_float>
 800e060:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e064:	4681      	mov	r9, r0
 800e066:	d1d6      	bne.n	800e016 <_svfiprintf_r+0x166>
 800e068:	89a3      	ldrh	r3, [r4, #12]
 800e06a:	065b      	lsls	r3, r3, #25
 800e06c:	f53f af35 	bmi.w	800deda <_svfiprintf_r+0x2a>
 800e070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e072:	b01d      	add	sp, #116	; 0x74
 800e074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e078:	ab03      	add	r3, sp, #12
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	4622      	mov	r2, r4
 800e07e:	4b07      	ldr	r3, [pc, #28]	; (800e09c <_svfiprintf_r+0x1ec>)
 800e080:	a904      	add	r1, sp, #16
 800e082:	4640      	mov	r0, r8
 800e084:	f7fe f870 	bl	800c168 <_printf_i>
 800e088:	e7ea      	b.n	800e060 <_svfiprintf_r+0x1b0>
 800e08a:	bf00      	nop
 800e08c:	0800f044 	.word	0x0800f044
 800e090:	0800f04a 	.word	0x0800f04a
 800e094:	0800f04e 	.word	0x0800f04e
 800e098:	0800bbfd 	.word	0x0800bbfd
 800e09c:	0800ddfd 	.word	0x0800ddfd

0800e0a0 <__sfputc_r>:
 800e0a0:	6893      	ldr	r3, [r2, #8]
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	b410      	push	{r4}
 800e0a8:	6093      	str	r3, [r2, #8]
 800e0aa:	da08      	bge.n	800e0be <__sfputc_r+0x1e>
 800e0ac:	6994      	ldr	r4, [r2, #24]
 800e0ae:	42a3      	cmp	r3, r4
 800e0b0:	db01      	blt.n	800e0b6 <__sfputc_r+0x16>
 800e0b2:	290a      	cmp	r1, #10
 800e0b4:	d103      	bne.n	800e0be <__sfputc_r+0x1e>
 800e0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0ba:	f7fe ba13 	b.w	800c4e4 <__swbuf_r>
 800e0be:	6813      	ldr	r3, [r2, #0]
 800e0c0:	1c58      	adds	r0, r3, #1
 800e0c2:	6010      	str	r0, [r2, #0]
 800e0c4:	7019      	strb	r1, [r3, #0]
 800e0c6:	4608      	mov	r0, r1
 800e0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0cc:	4770      	bx	lr

0800e0ce <__sfputs_r>:
 800e0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d0:	4606      	mov	r6, r0
 800e0d2:	460f      	mov	r7, r1
 800e0d4:	4614      	mov	r4, r2
 800e0d6:	18d5      	adds	r5, r2, r3
 800e0d8:	42ac      	cmp	r4, r5
 800e0da:	d101      	bne.n	800e0e0 <__sfputs_r+0x12>
 800e0dc:	2000      	movs	r0, #0
 800e0de:	e007      	b.n	800e0f0 <__sfputs_r+0x22>
 800e0e0:	463a      	mov	r2, r7
 800e0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	f7ff ffda 	bl	800e0a0 <__sfputc_r>
 800e0ec:	1c43      	adds	r3, r0, #1
 800e0ee:	d1f3      	bne.n	800e0d8 <__sfputs_r+0xa>
 800e0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0f4 <_vfiprintf_r>:
 800e0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f8:	460c      	mov	r4, r1
 800e0fa:	b09d      	sub	sp, #116	; 0x74
 800e0fc:	4617      	mov	r7, r2
 800e0fe:	461d      	mov	r5, r3
 800e100:	4606      	mov	r6, r0
 800e102:	b118      	cbz	r0, 800e10c <_vfiprintf_r+0x18>
 800e104:	6983      	ldr	r3, [r0, #24]
 800e106:	b90b      	cbnz	r3, 800e10c <_vfiprintf_r+0x18>
 800e108:	f7ff f9e2 	bl	800d4d0 <__sinit>
 800e10c:	4b7c      	ldr	r3, [pc, #496]	; (800e300 <_vfiprintf_r+0x20c>)
 800e10e:	429c      	cmp	r4, r3
 800e110:	d158      	bne.n	800e1c4 <_vfiprintf_r+0xd0>
 800e112:	6874      	ldr	r4, [r6, #4]
 800e114:	89a3      	ldrh	r3, [r4, #12]
 800e116:	0718      	lsls	r0, r3, #28
 800e118:	d55e      	bpl.n	800e1d8 <_vfiprintf_r+0xe4>
 800e11a:	6923      	ldr	r3, [r4, #16]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d05b      	beq.n	800e1d8 <_vfiprintf_r+0xe4>
 800e120:	2300      	movs	r3, #0
 800e122:	9309      	str	r3, [sp, #36]	; 0x24
 800e124:	2320      	movs	r3, #32
 800e126:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e12a:	2330      	movs	r3, #48	; 0x30
 800e12c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e130:	9503      	str	r5, [sp, #12]
 800e132:	f04f 0b01 	mov.w	fp, #1
 800e136:	46b8      	mov	r8, r7
 800e138:	4645      	mov	r5, r8
 800e13a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e13e:	b10b      	cbz	r3, 800e144 <_vfiprintf_r+0x50>
 800e140:	2b25      	cmp	r3, #37	; 0x25
 800e142:	d154      	bne.n	800e1ee <_vfiprintf_r+0xfa>
 800e144:	ebb8 0a07 	subs.w	sl, r8, r7
 800e148:	d00b      	beq.n	800e162 <_vfiprintf_r+0x6e>
 800e14a:	4653      	mov	r3, sl
 800e14c:	463a      	mov	r2, r7
 800e14e:	4621      	mov	r1, r4
 800e150:	4630      	mov	r0, r6
 800e152:	f7ff ffbc 	bl	800e0ce <__sfputs_r>
 800e156:	3001      	adds	r0, #1
 800e158:	f000 80c2 	beq.w	800e2e0 <_vfiprintf_r+0x1ec>
 800e15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e15e:	4453      	add	r3, sl
 800e160:	9309      	str	r3, [sp, #36]	; 0x24
 800e162:	f898 3000 	ldrb.w	r3, [r8]
 800e166:	2b00      	cmp	r3, #0
 800e168:	f000 80ba 	beq.w	800e2e0 <_vfiprintf_r+0x1ec>
 800e16c:	2300      	movs	r3, #0
 800e16e:	f04f 32ff 	mov.w	r2, #4294967295
 800e172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e176:	9304      	str	r3, [sp, #16]
 800e178:	9307      	str	r3, [sp, #28]
 800e17a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e17e:	931a      	str	r3, [sp, #104]	; 0x68
 800e180:	46a8      	mov	r8, r5
 800e182:	2205      	movs	r2, #5
 800e184:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e188:	485e      	ldr	r0, [pc, #376]	; (800e304 <_vfiprintf_r+0x210>)
 800e18a:	f7f2 f829 	bl	80001e0 <memchr>
 800e18e:	9b04      	ldr	r3, [sp, #16]
 800e190:	bb78      	cbnz	r0, 800e1f2 <_vfiprintf_r+0xfe>
 800e192:	06d9      	lsls	r1, r3, #27
 800e194:	bf44      	itt	mi
 800e196:	2220      	movmi	r2, #32
 800e198:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e19c:	071a      	lsls	r2, r3, #28
 800e19e:	bf44      	itt	mi
 800e1a0:	222b      	movmi	r2, #43	; 0x2b
 800e1a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e1a6:	782a      	ldrb	r2, [r5, #0]
 800e1a8:	2a2a      	cmp	r2, #42	; 0x2a
 800e1aa:	d02a      	beq.n	800e202 <_vfiprintf_r+0x10e>
 800e1ac:	9a07      	ldr	r2, [sp, #28]
 800e1ae:	46a8      	mov	r8, r5
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	250a      	movs	r5, #10
 800e1b4:	4641      	mov	r1, r8
 800e1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1ba:	3b30      	subs	r3, #48	; 0x30
 800e1bc:	2b09      	cmp	r3, #9
 800e1be:	d969      	bls.n	800e294 <_vfiprintf_r+0x1a0>
 800e1c0:	b360      	cbz	r0, 800e21c <_vfiprintf_r+0x128>
 800e1c2:	e024      	b.n	800e20e <_vfiprintf_r+0x11a>
 800e1c4:	4b50      	ldr	r3, [pc, #320]	; (800e308 <_vfiprintf_r+0x214>)
 800e1c6:	429c      	cmp	r4, r3
 800e1c8:	d101      	bne.n	800e1ce <_vfiprintf_r+0xda>
 800e1ca:	68b4      	ldr	r4, [r6, #8]
 800e1cc:	e7a2      	b.n	800e114 <_vfiprintf_r+0x20>
 800e1ce:	4b4f      	ldr	r3, [pc, #316]	; (800e30c <_vfiprintf_r+0x218>)
 800e1d0:	429c      	cmp	r4, r3
 800e1d2:	bf08      	it	eq
 800e1d4:	68f4      	ldreq	r4, [r6, #12]
 800e1d6:	e79d      	b.n	800e114 <_vfiprintf_r+0x20>
 800e1d8:	4621      	mov	r1, r4
 800e1da:	4630      	mov	r0, r6
 800e1dc:	f7fe f9d4 	bl	800c588 <__swsetup_r>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	d09d      	beq.n	800e120 <_vfiprintf_r+0x2c>
 800e1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e8:	b01d      	add	sp, #116	; 0x74
 800e1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ee:	46a8      	mov	r8, r5
 800e1f0:	e7a2      	b.n	800e138 <_vfiprintf_r+0x44>
 800e1f2:	4a44      	ldr	r2, [pc, #272]	; (800e304 <_vfiprintf_r+0x210>)
 800e1f4:	1a80      	subs	r0, r0, r2
 800e1f6:	fa0b f000 	lsl.w	r0, fp, r0
 800e1fa:	4318      	orrs	r0, r3
 800e1fc:	9004      	str	r0, [sp, #16]
 800e1fe:	4645      	mov	r5, r8
 800e200:	e7be      	b.n	800e180 <_vfiprintf_r+0x8c>
 800e202:	9a03      	ldr	r2, [sp, #12]
 800e204:	1d11      	adds	r1, r2, #4
 800e206:	6812      	ldr	r2, [r2, #0]
 800e208:	9103      	str	r1, [sp, #12]
 800e20a:	2a00      	cmp	r2, #0
 800e20c:	db01      	blt.n	800e212 <_vfiprintf_r+0x11e>
 800e20e:	9207      	str	r2, [sp, #28]
 800e210:	e004      	b.n	800e21c <_vfiprintf_r+0x128>
 800e212:	4252      	negs	r2, r2
 800e214:	f043 0302 	orr.w	r3, r3, #2
 800e218:	9207      	str	r2, [sp, #28]
 800e21a:	9304      	str	r3, [sp, #16]
 800e21c:	f898 3000 	ldrb.w	r3, [r8]
 800e220:	2b2e      	cmp	r3, #46	; 0x2e
 800e222:	d10e      	bne.n	800e242 <_vfiprintf_r+0x14e>
 800e224:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e228:	2b2a      	cmp	r3, #42	; 0x2a
 800e22a:	d138      	bne.n	800e29e <_vfiprintf_r+0x1aa>
 800e22c:	9b03      	ldr	r3, [sp, #12]
 800e22e:	1d1a      	adds	r2, r3, #4
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	9203      	str	r2, [sp, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	bfb8      	it	lt
 800e238:	f04f 33ff 	movlt.w	r3, #4294967295
 800e23c:	f108 0802 	add.w	r8, r8, #2
 800e240:	9305      	str	r3, [sp, #20]
 800e242:	4d33      	ldr	r5, [pc, #204]	; (800e310 <_vfiprintf_r+0x21c>)
 800e244:	f898 1000 	ldrb.w	r1, [r8]
 800e248:	2203      	movs	r2, #3
 800e24a:	4628      	mov	r0, r5
 800e24c:	f7f1 ffc8 	bl	80001e0 <memchr>
 800e250:	b140      	cbz	r0, 800e264 <_vfiprintf_r+0x170>
 800e252:	2340      	movs	r3, #64	; 0x40
 800e254:	1b40      	subs	r0, r0, r5
 800e256:	fa03 f000 	lsl.w	r0, r3, r0
 800e25a:	9b04      	ldr	r3, [sp, #16]
 800e25c:	4303      	orrs	r3, r0
 800e25e:	f108 0801 	add.w	r8, r8, #1
 800e262:	9304      	str	r3, [sp, #16]
 800e264:	f898 1000 	ldrb.w	r1, [r8]
 800e268:	482a      	ldr	r0, [pc, #168]	; (800e314 <_vfiprintf_r+0x220>)
 800e26a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e26e:	2206      	movs	r2, #6
 800e270:	f108 0701 	add.w	r7, r8, #1
 800e274:	f7f1 ffb4 	bl	80001e0 <memchr>
 800e278:	2800      	cmp	r0, #0
 800e27a:	d037      	beq.n	800e2ec <_vfiprintf_r+0x1f8>
 800e27c:	4b26      	ldr	r3, [pc, #152]	; (800e318 <_vfiprintf_r+0x224>)
 800e27e:	bb1b      	cbnz	r3, 800e2c8 <_vfiprintf_r+0x1d4>
 800e280:	9b03      	ldr	r3, [sp, #12]
 800e282:	3307      	adds	r3, #7
 800e284:	f023 0307 	bic.w	r3, r3, #7
 800e288:	3308      	adds	r3, #8
 800e28a:	9303      	str	r3, [sp, #12]
 800e28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e28e:	444b      	add	r3, r9
 800e290:	9309      	str	r3, [sp, #36]	; 0x24
 800e292:	e750      	b.n	800e136 <_vfiprintf_r+0x42>
 800e294:	fb05 3202 	mla	r2, r5, r2, r3
 800e298:	2001      	movs	r0, #1
 800e29a:	4688      	mov	r8, r1
 800e29c:	e78a      	b.n	800e1b4 <_vfiprintf_r+0xc0>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	f108 0801 	add.w	r8, r8, #1
 800e2a4:	9305      	str	r3, [sp, #20]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	250a      	movs	r5, #10
 800e2aa:	4640      	mov	r0, r8
 800e2ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2b0:	3a30      	subs	r2, #48	; 0x30
 800e2b2:	2a09      	cmp	r2, #9
 800e2b4:	d903      	bls.n	800e2be <_vfiprintf_r+0x1ca>
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d0c3      	beq.n	800e242 <_vfiprintf_r+0x14e>
 800e2ba:	9105      	str	r1, [sp, #20]
 800e2bc:	e7c1      	b.n	800e242 <_vfiprintf_r+0x14e>
 800e2be:	fb05 2101 	mla	r1, r5, r1, r2
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	4680      	mov	r8, r0
 800e2c6:	e7f0      	b.n	800e2aa <_vfiprintf_r+0x1b6>
 800e2c8:	ab03      	add	r3, sp, #12
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	4622      	mov	r2, r4
 800e2ce:	4b13      	ldr	r3, [pc, #76]	; (800e31c <_vfiprintf_r+0x228>)
 800e2d0:	a904      	add	r1, sp, #16
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	f7fd fc92 	bl	800bbfc <_printf_float>
 800e2d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e2dc:	4681      	mov	r9, r0
 800e2de:	d1d5      	bne.n	800e28c <_vfiprintf_r+0x198>
 800e2e0:	89a3      	ldrh	r3, [r4, #12]
 800e2e2:	065b      	lsls	r3, r3, #25
 800e2e4:	f53f af7e 	bmi.w	800e1e4 <_vfiprintf_r+0xf0>
 800e2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2ea:	e77d      	b.n	800e1e8 <_vfiprintf_r+0xf4>
 800e2ec:	ab03      	add	r3, sp, #12
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	4622      	mov	r2, r4
 800e2f2:	4b0a      	ldr	r3, [pc, #40]	; (800e31c <_vfiprintf_r+0x228>)
 800e2f4:	a904      	add	r1, sp, #16
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	f7fd ff36 	bl	800c168 <_printf_i>
 800e2fc:	e7ec      	b.n	800e2d8 <_vfiprintf_r+0x1e4>
 800e2fe:	bf00      	nop
 800e300:	0800ef04 	.word	0x0800ef04
 800e304:	0800f044 	.word	0x0800f044
 800e308:	0800ef24 	.word	0x0800ef24
 800e30c:	0800eee4 	.word	0x0800eee4
 800e310:	0800f04a 	.word	0x0800f04a
 800e314:	0800f04e 	.word	0x0800f04e
 800e318:	0800bbfd 	.word	0x0800bbfd
 800e31c:	0800e0cf 	.word	0x0800e0cf

0800e320 <_sbrk_r>:
 800e320:	b538      	push	{r3, r4, r5, lr}
 800e322:	4c06      	ldr	r4, [pc, #24]	; (800e33c <_sbrk_r+0x1c>)
 800e324:	2300      	movs	r3, #0
 800e326:	4605      	mov	r5, r0
 800e328:	4608      	mov	r0, r1
 800e32a:	6023      	str	r3, [r4, #0]
 800e32c:	f7f4 fd78 	bl	8002e20 <_sbrk>
 800e330:	1c43      	adds	r3, r0, #1
 800e332:	d102      	bne.n	800e33a <_sbrk_r+0x1a>
 800e334:	6823      	ldr	r3, [r4, #0]
 800e336:	b103      	cbz	r3, 800e33a <_sbrk_r+0x1a>
 800e338:	602b      	str	r3, [r5, #0]
 800e33a:	bd38      	pop	{r3, r4, r5, pc}
 800e33c:	20006e1c 	.word	0x20006e1c

0800e340 <__sread>:
 800e340:	b510      	push	{r4, lr}
 800e342:	460c      	mov	r4, r1
 800e344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e348:	f000 f8e8 	bl	800e51c <_read_r>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	bfab      	itete	ge
 800e350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e352:	89a3      	ldrhlt	r3, [r4, #12]
 800e354:	181b      	addge	r3, r3, r0
 800e356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e35a:	bfac      	ite	ge
 800e35c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e35e:	81a3      	strhlt	r3, [r4, #12]
 800e360:	bd10      	pop	{r4, pc}

0800e362 <__swrite>:
 800e362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e366:	461f      	mov	r7, r3
 800e368:	898b      	ldrh	r3, [r1, #12]
 800e36a:	05db      	lsls	r3, r3, #23
 800e36c:	4605      	mov	r5, r0
 800e36e:	460c      	mov	r4, r1
 800e370:	4616      	mov	r6, r2
 800e372:	d505      	bpl.n	800e380 <__swrite+0x1e>
 800e374:	2302      	movs	r3, #2
 800e376:	2200      	movs	r2, #0
 800e378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e37c:	f000 f868 	bl	800e450 <_lseek_r>
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e38a:	81a3      	strh	r3, [r4, #12]
 800e38c:	4632      	mov	r2, r6
 800e38e:	463b      	mov	r3, r7
 800e390:	4628      	mov	r0, r5
 800e392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e396:	f000 b817 	b.w	800e3c8 <_write_r>

0800e39a <__sseek>:
 800e39a:	b510      	push	{r4, lr}
 800e39c:	460c      	mov	r4, r1
 800e39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3a2:	f000 f855 	bl	800e450 <_lseek_r>
 800e3a6:	1c43      	adds	r3, r0, #1
 800e3a8:	89a3      	ldrh	r3, [r4, #12]
 800e3aa:	bf15      	itete	ne
 800e3ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3b6:	81a3      	strheq	r3, [r4, #12]
 800e3b8:	bf18      	it	ne
 800e3ba:	81a3      	strhne	r3, [r4, #12]
 800e3bc:	bd10      	pop	{r4, pc}

0800e3be <__sclose>:
 800e3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3c2:	f000 b813 	b.w	800e3ec <_close_r>
	...

0800e3c8 <_write_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4c07      	ldr	r4, [pc, #28]	; (800e3e8 <_write_r+0x20>)
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	4608      	mov	r0, r1
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	6022      	str	r2, [r4, #0]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f7f4 f953 	bl	8002682 <_write>
 800e3dc:	1c43      	adds	r3, r0, #1
 800e3de:	d102      	bne.n	800e3e6 <_write_r+0x1e>
 800e3e0:	6823      	ldr	r3, [r4, #0]
 800e3e2:	b103      	cbz	r3, 800e3e6 <_write_r+0x1e>
 800e3e4:	602b      	str	r3, [r5, #0]
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}
 800e3e8:	20006e1c 	.word	0x20006e1c

0800e3ec <_close_r>:
 800e3ec:	b538      	push	{r3, r4, r5, lr}
 800e3ee:	4c06      	ldr	r4, [pc, #24]	; (800e408 <_close_r+0x1c>)
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	4605      	mov	r5, r0
 800e3f4:	4608      	mov	r0, r1
 800e3f6:	6023      	str	r3, [r4, #0]
 800e3f8:	f7f4 fcdd 	bl	8002db6 <_close>
 800e3fc:	1c43      	adds	r3, r0, #1
 800e3fe:	d102      	bne.n	800e406 <_close_r+0x1a>
 800e400:	6823      	ldr	r3, [r4, #0]
 800e402:	b103      	cbz	r3, 800e406 <_close_r+0x1a>
 800e404:	602b      	str	r3, [r5, #0]
 800e406:	bd38      	pop	{r3, r4, r5, pc}
 800e408:	20006e1c 	.word	0x20006e1c

0800e40c <_fstat_r>:
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	4c07      	ldr	r4, [pc, #28]	; (800e42c <_fstat_r+0x20>)
 800e410:	2300      	movs	r3, #0
 800e412:	4605      	mov	r5, r0
 800e414:	4608      	mov	r0, r1
 800e416:	4611      	mov	r1, r2
 800e418:	6023      	str	r3, [r4, #0]
 800e41a:	f7f4 fcd8 	bl	8002dce <_fstat>
 800e41e:	1c43      	adds	r3, r0, #1
 800e420:	d102      	bne.n	800e428 <_fstat_r+0x1c>
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	b103      	cbz	r3, 800e428 <_fstat_r+0x1c>
 800e426:	602b      	str	r3, [r5, #0]
 800e428:	bd38      	pop	{r3, r4, r5, pc}
 800e42a:	bf00      	nop
 800e42c:	20006e1c 	.word	0x20006e1c

0800e430 <_isatty_r>:
 800e430:	b538      	push	{r3, r4, r5, lr}
 800e432:	4c06      	ldr	r4, [pc, #24]	; (800e44c <_isatty_r+0x1c>)
 800e434:	2300      	movs	r3, #0
 800e436:	4605      	mov	r5, r0
 800e438:	4608      	mov	r0, r1
 800e43a:	6023      	str	r3, [r4, #0]
 800e43c:	f7f4 fcd7 	bl	8002dee <_isatty>
 800e440:	1c43      	adds	r3, r0, #1
 800e442:	d102      	bne.n	800e44a <_isatty_r+0x1a>
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	b103      	cbz	r3, 800e44a <_isatty_r+0x1a>
 800e448:	602b      	str	r3, [r5, #0]
 800e44a:	bd38      	pop	{r3, r4, r5, pc}
 800e44c:	20006e1c 	.word	0x20006e1c

0800e450 <_lseek_r>:
 800e450:	b538      	push	{r3, r4, r5, lr}
 800e452:	4c07      	ldr	r4, [pc, #28]	; (800e470 <_lseek_r+0x20>)
 800e454:	4605      	mov	r5, r0
 800e456:	4608      	mov	r0, r1
 800e458:	4611      	mov	r1, r2
 800e45a:	2200      	movs	r2, #0
 800e45c:	6022      	str	r2, [r4, #0]
 800e45e:	461a      	mov	r2, r3
 800e460:	f7f4 fcd0 	bl	8002e04 <_lseek>
 800e464:	1c43      	adds	r3, r0, #1
 800e466:	d102      	bne.n	800e46e <_lseek_r+0x1e>
 800e468:	6823      	ldr	r3, [r4, #0]
 800e46a:	b103      	cbz	r3, 800e46e <_lseek_r+0x1e>
 800e46c:	602b      	str	r3, [r5, #0]
 800e46e:	bd38      	pop	{r3, r4, r5, pc}
 800e470:	20006e1c 	.word	0x20006e1c

0800e474 <__ascii_mbtowc>:
 800e474:	b082      	sub	sp, #8
 800e476:	b901      	cbnz	r1, 800e47a <__ascii_mbtowc+0x6>
 800e478:	a901      	add	r1, sp, #4
 800e47a:	b142      	cbz	r2, 800e48e <__ascii_mbtowc+0x1a>
 800e47c:	b14b      	cbz	r3, 800e492 <__ascii_mbtowc+0x1e>
 800e47e:	7813      	ldrb	r3, [r2, #0]
 800e480:	600b      	str	r3, [r1, #0]
 800e482:	7812      	ldrb	r2, [r2, #0]
 800e484:	1c10      	adds	r0, r2, #0
 800e486:	bf18      	it	ne
 800e488:	2001      	movne	r0, #1
 800e48a:	b002      	add	sp, #8
 800e48c:	4770      	bx	lr
 800e48e:	4610      	mov	r0, r2
 800e490:	e7fb      	b.n	800e48a <__ascii_mbtowc+0x16>
 800e492:	f06f 0001 	mvn.w	r0, #1
 800e496:	e7f8      	b.n	800e48a <__ascii_mbtowc+0x16>

0800e498 <memmove>:
 800e498:	4288      	cmp	r0, r1
 800e49a:	b510      	push	{r4, lr}
 800e49c:	eb01 0302 	add.w	r3, r1, r2
 800e4a0:	d807      	bhi.n	800e4b2 <memmove+0x1a>
 800e4a2:	1e42      	subs	r2, r0, #1
 800e4a4:	4299      	cmp	r1, r3
 800e4a6:	d00a      	beq.n	800e4be <memmove+0x26>
 800e4a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e4b0:	e7f8      	b.n	800e4a4 <memmove+0xc>
 800e4b2:	4283      	cmp	r3, r0
 800e4b4:	d9f5      	bls.n	800e4a2 <memmove+0xa>
 800e4b6:	1881      	adds	r1, r0, r2
 800e4b8:	1ad2      	subs	r2, r2, r3
 800e4ba:	42d3      	cmn	r3, r2
 800e4bc:	d100      	bne.n	800e4c0 <memmove+0x28>
 800e4be:	bd10      	pop	{r4, pc}
 800e4c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e4c8:	e7f7      	b.n	800e4ba <memmove+0x22>

0800e4ca <__malloc_lock>:
 800e4ca:	4770      	bx	lr

0800e4cc <__malloc_unlock>:
 800e4cc:	4770      	bx	lr

0800e4ce <_realloc_r>:
 800e4ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d0:	4607      	mov	r7, r0
 800e4d2:	4614      	mov	r4, r2
 800e4d4:	460e      	mov	r6, r1
 800e4d6:	b921      	cbnz	r1, 800e4e2 <_realloc_r+0x14>
 800e4d8:	4611      	mov	r1, r2
 800e4da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e4de:	f7ff bc33 	b.w	800dd48 <_malloc_r>
 800e4e2:	b922      	cbnz	r2, 800e4ee <_realloc_r+0x20>
 800e4e4:	f7ff fbe2 	bl	800dcac <_free_r>
 800e4e8:	4625      	mov	r5, r4
 800e4ea:	4628      	mov	r0, r5
 800e4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4ee:	f000 f834 	bl	800e55a <_malloc_usable_size_r>
 800e4f2:	42a0      	cmp	r0, r4
 800e4f4:	d20f      	bcs.n	800e516 <_realloc_r+0x48>
 800e4f6:	4621      	mov	r1, r4
 800e4f8:	4638      	mov	r0, r7
 800e4fa:	f7ff fc25 	bl	800dd48 <_malloc_r>
 800e4fe:	4605      	mov	r5, r0
 800e500:	2800      	cmp	r0, #0
 800e502:	d0f2      	beq.n	800e4ea <_realloc_r+0x1c>
 800e504:	4631      	mov	r1, r6
 800e506:	4622      	mov	r2, r4
 800e508:	f7fd fad0 	bl	800baac <memcpy>
 800e50c:	4631      	mov	r1, r6
 800e50e:	4638      	mov	r0, r7
 800e510:	f7ff fbcc 	bl	800dcac <_free_r>
 800e514:	e7e9      	b.n	800e4ea <_realloc_r+0x1c>
 800e516:	4635      	mov	r5, r6
 800e518:	e7e7      	b.n	800e4ea <_realloc_r+0x1c>
	...

0800e51c <_read_r>:
 800e51c:	b538      	push	{r3, r4, r5, lr}
 800e51e:	4c07      	ldr	r4, [pc, #28]	; (800e53c <_read_r+0x20>)
 800e520:	4605      	mov	r5, r0
 800e522:	4608      	mov	r0, r1
 800e524:	4611      	mov	r1, r2
 800e526:	2200      	movs	r2, #0
 800e528:	6022      	str	r2, [r4, #0]
 800e52a:	461a      	mov	r2, r3
 800e52c:	f7f4 fc26 	bl	8002d7c <_read>
 800e530:	1c43      	adds	r3, r0, #1
 800e532:	d102      	bne.n	800e53a <_read_r+0x1e>
 800e534:	6823      	ldr	r3, [r4, #0]
 800e536:	b103      	cbz	r3, 800e53a <_read_r+0x1e>
 800e538:	602b      	str	r3, [r5, #0]
 800e53a:	bd38      	pop	{r3, r4, r5, pc}
 800e53c:	20006e1c 	.word	0x20006e1c

0800e540 <__ascii_wctomb>:
 800e540:	b149      	cbz	r1, 800e556 <__ascii_wctomb+0x16>
 800e542:	2aff      	cmp	r2, #255	; 0xff
 800e544:	bf85      	ittet	hi
 800e546:	238a      	movhi	r3, #138	; 0x8a
 800e548:	6003      	strhi	r3, [r0, #0]
 800e54a:	700a      	strbls	r2, [r1, #0]
 800e54c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e550:	bf98      	it	ls
 800e552:	2001      	movls	r0, #1
 800e554:	4770      	bx	lr
 800e556:	4608      	mov	r0, r1
 800e558:	4770      	bx	lr

0800e55a <_malloc_usable_size_r>:
 800e55a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e55e:	1f18      	subs	r0, r3, #4
 800e560:	2b00      	cmp	r3, #0
 800e562:	bfbc      	itt	lt
 800e564:	580b      	ldrlt	r3, [r1, r0]
 800e566:	18c0      	addlt	r0, r0, r3
 800e568:	4770      	bx	lr
	...

0800e56c <sqrt>:
 800e56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e570:	ed2d 8b02 	vpush	{d8}
 800e574:	b08b      	sub	sp, #44	; 0x2c
 800e576:	ec55 4b10 	vmov	r4, r5, d0
 800e57a:	f000 f851 	bl	800e620 <__ieee754_sqrt>
 800e57e:	4b26      	ldr	r3, [pc, #152]	; (800e618 <sqrt+0xac>)
 800e580:	eeb0 8a40 	vmov.f32	s16, s0
 800e584:	eef0 8a60 	vmov.f32	s17, s1
 800e588:	f993 6000 	ldrsb.w	r6, [r3]
 800e58c:	1c73      	adds	r3, r6, #1
 800e58e:	d02a      	beq.n	800e5e6 <sqrt+0x7a>
 800e590:	4622      	mov	r2, r4
 800e592:	462b      	mov	r3, r5
 800e594:	4620      	mov	r0, r4
 800e596:	4629      	mov	r1, r5
 800e598:	f7f2 fac8 	bl	8000b2c <__aeabi_dcmpun>
 800e59c:	4607      	mov	r7, r0
 800e59e:	bb10      	cbnz	r0, 800e5e6 <sqrt+0x7a>
 800e5a0:	f04f 0800 	mov.w	r8, #0
 800e5a4:	f04f 0900 	mov.w	r9, #0
 800e5a8:	4642      	mov	r2, r8
 800e5aa:	464b      	mov	r3, r9
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	4629      	mov	r1, r5
 800e5b0:	f7f2 fa94 	bl	8000adc <__aeabi_dcmplt>
 800e5b4:	b1b8      	cbz	r0, 800e5e6 <sqrt+0x7a>
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	4b18      	ldr	r3, [pc, #96]	; (800e61c <sqrt+0xb0>)
 800e5bc:	9301      	str	r3, [sp, #4]
 800e5be:	9708      	str	r7, [sp, #32]
 800e5c0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800e5c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e5c8:	b9b6      	cbnz	r6, 800e5f8 <sqrt+0x8c>
 800e5ca:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e5ce:	4668      	mov	r0, sp
 800e5d0:	f000 f8d6 	bl	800e780 <matherr>
 800e5d4:	b1d0      	cbz	r0, 800e60c <sqrt+0xa0>
 800e5d6:	9b08      	ldr	r3, [sp, #32]
 800e5d8:	b11b      	cbz	r3, 800e5e2 <sqrt+0x76>
 800e5da:	f7fd fa3d 	bl	800ba58 <__errno>
 800e5de:	9b08      	ldr	r3, [sp, #32]
 800e5e0:	6003      	str	r3, [r0, #0]
 800e5e2:	ed9d 8b06 	vldr	d8, [sp, #24]
 800e5e6:	eeb0 0a48 	vmov.f32	s0, s16
 800e5ea:	eef0 0a68 	vmov.f32	s1, s17
 800e5ee:	b00b      	add	sp, #44	; 0x2c
 800e5f0:	ecbd 8b02 	vpop	{d8}
 800e5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5f8:	4642      	mov	r2, r8
 800e5fa:	464b      	mov	r3, r9
 800e5fc:	4640      	mov	r0, r8
 800e5fe:	4649      	mov	r1, r9
 800e600:	f7f2 f924 	bl	800084c <__aeabi_ddiv>
 800e604:	2e02      	cmp	r6, #2
 800e606:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e60a:	d1e0      	bne.n	800e5ce <sqrt+0x62>
 800e60c:	f7fd fa24 	bl	800ba58 <__errno>
 800e610:	2321      	movs	r3, #33	; 0x21
 800e612:	6003      	str	r3, [r0, #0]
 800e614:	e7df      	b.n	800e5d6 <sqrt+0x6a>
 800e616:	bf00      	nop
 800e618:	20000254 	.word	0x20000254
 800e61c:	0800f160 	.word	0x0800f160

0800e620 <__ieee754_sqrt>:
 800e620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e624:	4955      	ldr	r1, [pc, #340]	; (800e77c <__ieee754_sqrt+0x15c>)
 800e626:	ec55 4b10 	vmov	r4, r5, d0
 800e62a:	43a9      	bics	r1, r5
 800e62c:	462b      	mov	r3, r5
 800e62e:	462a      	mov	r2, r5
 800e630:	d112      	bne.n	800e658 <__ieee754_sqrt+0x38>
 800e632:	ee10 2a10 	vmov	r2, s0
 800e636:	ee10 0a10 	vmov	r0, s0
 800e63a:	4629      	mov	r1, r5
 800e63c:	f7f1 ffdc 	bl	80005f8 <__aeabi_dmul>
 800e640:	4602      	mov	r2, r0
 800e642:	460b      	mov	r3, r1
 800e644:	4620      	mov	r0, r4
 800e646:	4629      	mov	r1, r5
 800e648:	f7f1 fe20 	bl	800028c <__adddf3>
 800e64c:	4604      	mov	r4, r0
 800e64e:	460d      	mov	r5, r1
 800e650:	ec45 4b10 	vmov	d0, r4, r5
 800e654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e658:	2d00      	cmp	r5, #0
 800e65a:	ee10 0a10 	vmov	r0, s0
 800e65e:	4621      	mov	r1, r4
 800e660:	dc0f      	bgt.n	800e682 <__ieee754_sqrt+0x62>
 800e662:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e666:	4330      	orrs	r0, r6
 800e668:	d0f2      	beq.n	800e650 <__ieee754_sqrt+0x30>
 800e66a:	b155      	cbz	r5, 800e682 <__ieee754_sqrt+0x62>
 800e66c:	ee10 2a10 	vmov	r2, s0
 800e670:	4620      	mov	r0, r4
 800e672:	4629      	mov	r1, r5
 800e674:	f7f1 fe08 	bl	8000288 <__aeabi_dsub>
 800e678:	4602      	mov	r2, r0
 800e67a:	460b      	mov	r3, r1
 800e67c:	f7f2 f8e6 	bl	800084c <__aeabi_ddiv>
 800e680:	e7e4      	b.n	800e64c <__ieee754_sqrt+0x2c>
 800e682:	151b      	asrs	r3, r3, #20
 800e684:	d073      	beq.n	800e76e <__ieee754_sqrt+0x14e>
 800e686:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e68a:	07dd      	lsls	r5, r3, #31
 800e68c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e690:	bf48      	it	mi
 800e692:	0fc8      	lsrmi	r0, r1, #31
 800e694:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e698:	bf44      	itt	mi
 800e69a:	0049      	lslmi	r1, r1, #1
 800e69c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800e6a0:	2500      	movs	r5, #0
 800e6a2:	1058      	asrs	r0, r3, #1
 800e6a4:	0fcb      	lsrs	r3, r1, #31
 800e6a6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800e6aa:	0049      	lsls	r1, r1, #1
 800e6ac:	2316      	movs	r3, #22
 800e6ae:	462c      	mov	r4, r5
 800e6b0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800e6b4:	19a7      	adds	r7, r4, r6
 800e6b6:	4297      	cmp	r7, r2
 800e6b8:	bfde      	ittt	le
 800e6ba:	19bc      	addle	r4, r7, r6
 800e6bc:	1bd2      	suble	r2, r2, r7
 800e6be:	19ad      	addle	r5, r5, r6
 800e6c0:	0fcf      	lsrs	r7, r1, #31
 800e6c2:	3b01      	subs	r3, #1
 800e6c4:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800e6c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e6cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e6d0:	d1f0      	bne.n	800e6b4 <__ieee754_sqrt+0x94>
 800e6d2:	f04f 0c20 	mov.w	ip, #32
 800e6d6:	469e      	mov	lr, r3
 800e6d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e6dc:	42a2      	cmp	r2, r4
 800e6de:	eb06 070e 	add.w	r7, r6, lr
 800e6e2:	dc02      	bgt.n	800e6ea <__ieee754_sqrt+0xca>
 800e6e4:	d112      	bne.n	800e70c <__ieee754_sqrt+0xec>
 800e6e6:	428f      	cmp	r7, r1
 800e6e8:	d810      	bhi.n	800e70c <__ieee754_sqrt+0xec>
 800e6ea:	2f00      	cmp	r7, #0
 800e6ec:	eb07 0e06 	add.w	lr, r7, r6
 800e6f0:	da42      	bge.n	800e778 <__ieee754_sqrt+0x158>
 800e6f2:	f1be 0f00 	cmp.w	lr, #0
 800e6f6:	db3f      	blt.n	800e778 <__ieee754_sqrt+0x158>
 800e6f8:	f104 0801 	add.w	r8, r4, #1
 800e6fc:	1b12      	subs	r2, r2, r4
 800e6fe:	428f      	cmp	r7, r1
 800e700:	bf88      	it	hi
 800e702:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e706:	1bc9      	subs	r1, r1, r7
 800e708:	4433      	add	r3, r6
 800e70a:	4644      	mov	r4, r8
 800e70c:	0052      	lsls	r2, r2, #1
 800e70e:	f1bc 0c01 	subs.w	ip, ip, #1
 800e712:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800e716:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e71a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e71e:	d1dd      	bne.n	800e6dc <__ieee754_sqrt+0xbc>
 800e720:	430a      	orrs	r2, r1
 800e722:	d006      	beq.n	800e732 <__ieee754_sqrt+0x112>
 800e724:	1c5c      	adds	r4, r3, #1
 800e726:	bf13      	iteet	ne
 800e728:	3301      	addne	r3, #1
 800e72a:	3501      	addeq	r5, #1
 800e72c:	4663      	moveq	r3, ip
 800e72e:	f023 0301 	bicne.w	r3, r3, #1
 800e732:	106a      	asrs	r2, r5, #1
 800e734:	085b      	lsrs	r3, r3, #1
 800e736:	07e9      	lsls	r1, r5, #31
 800e738:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e73c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e740:	bf48      	it	mi
 800e742:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e746:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800e74a:	461c      	mov	r4, r3
 800e74c:	e780      	b.n	800e650 <__ieee754_sqrt+0x30>
 800e74e:	0aca      	lsrs	r2, r1, #11
 800e750:	3815      	subs	r0, #21
 800e752:	0549      	lsls	r1, r1, #21
 800e754:	2a00      	cmp	r2, #0
 800e756:	d0fa      	beq.n	800e74e <__ieee754_sqrt+0x12e>
 800e758:	02d6      	lsls	r6, r2, #11
 800e75a:	d50a      	bpl.n	800e772 <__ieee754_sqrt+0x152>
 800e75c:	f1c3 0420 	rsb	r4, r3, #32
 800e760:	fa21 f404 	lsr.w	r4, r1, r4
 800e764:	1e5d      	subs	r5, r3, #1
 800e766:	4099      	lsls	r1, r3
 800e768:	4322      	orrs	r2, r4
 800e76a:	1b43      	subs	r3, r0, r5
 800e76c:	e78b      	b.n	800e686 <__ieee754_sqrt+0x66>
 800e76e:	4618      	mov	r0, r3
 800e770:	e7f0      	b.n	800e754 <__ieee754_sqrt+0x134>
 800e772:	0052      	lsls	r2, r2, #1
 800e774:	3301      	adds	r3, #1
 800e776:	e7ef      	b.n	800e758 <__ieee754_sqrt+0x138>
 800e778:	46a0      	mov	r8, r4
 800e77a:	e7bf      	b.n	800e6fc <__ieee754_sqrt+0xdc>
 800e77c:	7ff00000 	.word	0x7ff00000

0800e780 <matherr>:
 800e780:	2000      	movs	r0, #0
 800e782:	4770      	bx	lr

0800e784 <_init>:
 800e784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e786:	bf00      	nop
 800e788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e78a:	bc08      	pop	{r3}
 800e78c:	469e      	mov	lr, r3
 800e78e:	4770      	bx	lr

0800e790 <_fini>:
 800e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e792:	bf00      	nop
 800e794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e796:	bc08      	pop	{r3}
 800e798:	469e      	mov	lr, r3
 800e79a:	4770      	bx	lr
