
salvacao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e00c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  0800e1a0  0800e1a0  0001e1a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9f8  0800e9f8  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9f8  0800e9f8  0001e9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea00  0800ea00  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea00  0800ea00  0001ea00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea04  0800ea04  0001ea04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800ea08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006bac  20000254  0800ec5c  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  20006e00  0800ec5c  00026e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c760  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c79  00000000  00000000  0003c9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001610  00000000  00000000  00040660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  00041c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006f62  00000000  00000000  000430a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001448e  00000000  00000000  0004a00a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccd9f  00000000  00000000  0005e498  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b237  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006af8  00000000  00000000  0012b2b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000254 	.word	0x20000254
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e184 	.word	0x0800e184

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000258 	.word	0x20000258
 80001cc:	0800e184 	.word	0x0800e184

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <IMU_config>:
//includes
#include "main.h"
#include "IMU_read.h"


void IMU_config(SPI_HandleTypeDef *hspi){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	uint8_t write_words[10];

	//accelerometer config
	write_words[0]=BMX055_RESET_REG;
 8000f50:	2314      	movs	r3, #20
 8000f52:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET; //accelerometer soft reset
 8000f54:	23b6      	movs	r3, #182	; 0xb6
 8000f56:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_ACC_PMU_RANGE_REG;
 8000f58:	230f      	movs	r3, #15
 8000f5a:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_ACC_RANGE_2;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_ACC_PMU_BW_REG;
 8000f60:	2310      	movs	r3, #16
 8000f62:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_ACC_PMU_BW_7_81;
 8000f64:	2308      	movs	r3, #8
 8000f66:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_ACC_PMU_LPW_REG;
 8000f68:	2311      	movs	r3, #17
 8000f6a:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_ACC_PMU_LPW_MODE_NOMAL|BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	4833      	ldr	r0, [pc, #204]	; (8001044 <IMU_config+0xfc>)
 8000f76:	f003 f8b5 	bl	80040e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 8000f7a:	f107 010c 	add.w	r1, r7, #12
 8000f7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f82:	2208      	movs	r2, #8
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f005 f899 	bl	80060bc <HAL_SPI_Transmit>
	HAL_Delay(100);
 8000f8a:	2064      	movs	r0, #100	; 0x64
 8000f8c:	f001 fe3e 	bl	8002c0c <HAL_Delay>
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2110      	movs	r1, #16
 8000f94:	482b      	ldr	r0, [pc, #172]	; (8001044 <IMU_config+0xfc>)
 8000f96:	f003 f8a5 	bl	80040e4 <HAL_GPIO_WritePin>

	// gyroscope config
	write_words[0]=BMX055_RESET_REG;
 8000f9a:	2314      	movs	r3, #20
 8000f9c:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 8000f9e:	23b6      	movs	r3, #182	; 0xb6
 8000fa0:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_GYRO_RANGE_REG;
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_GYRO_RANGE_262_4; // Select Gyro Range(262.4 LSB/°/s)
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_GYRO_BW_REG;
 8000faa:	2310      	movs	r3, #16
 8000fac:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_GYRO_BW_64; // Select Gyro BW   (32Hz)
 8000fae:	2306      	movs	r3, #6
 8000fb0:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_GYRO_LPM1_REG;
 8000fb2:	2311      	movs	r3, #17
 8000fb4:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_GYRO_LPM1_MODE_NOMAL|BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <IMU_config+0x100>)
 8000fc0:	f003 f890 	bl	80040e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 8000fc4:	f107 010c 	add.w	r1, r7, #12
 8000fc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fcc:	2208      	movs	r2, #8
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f005 f874 	bl	80060bc <HAL_SPI_Transmit>
	HAL_Delay(100);
 8000fd4:	2064      	movs	r0, #100	; 0x64
 8000fd6:	f001 fe19 	bl	8002c0c <HAL_Delay>
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2104      	movs	r1, #4
 8000fde:	481a      	ldr	r0, [pc, #104]	; (8001048 <IMU_config+0x100>)
 8000fe0:	f003 f880 	bl	80040e4 <HAL_GPIO_WritePin>

	// magnetometer config
	write_words[0]=BMX055_RESET_REG;
 8000fe4:	2314      	movs	r3, #20
 8000fe6:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 8000fe8:	23b6      	movs	r3, #182	; 0xb6
 8000fea:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_MAG_POW_CTL_REG;
 8000fec:	234b      	movs	r3, #75	; 0x4b
 8000fee:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_MAG_POW_CTL_SLEEP_MODE; // Select Sleep mode
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_MAG_ADV_OP_OUTPUT_REG;
 8000ff4:	234c      	movs	r3, #76	; 0x4c
 8000ff6:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_MAG_DATA_RATE_10; // (NomalMode, ODR 10Hz)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_MAG_REP_XY_REG;
 8000ffc:	2351      	movs	r3, #81	; 0x51
 8000ffe:	74bb      	strb	r3, [r7, #18]
	write_words[7]=0x04; // Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
 8001000:	2304      	movs	r3, #4
 8001002:	74fb      	strb	r3, [r7, #19]
	write_words[8]=BMX055_MAG_REP_Z_REG;
 8001004:	2352      	movs	r3, #82	; 0x52
 8001006:	753b      	strb	r3, [r7, #20]
	write_words[9]= 0x0F; // Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
 8001008:	230f      	movs	r3, #15
 800100a:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <IMU_config+0x100>)
 8001014:	f003 f866 	bl	80040e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 10, 2000);
 8001018:	f107 010c 	add.w	r1, r7, #12
 800101c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001020:	220a      	movs	r2, #10
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f005 f84a 	bl	80060bc <HAL_SPI_Transmit>
	HAL_Delay(100);
 8001028:	2064      	movs	r0, #100	; 0x64
 800102a:	f001 fdef 	bl	8002c0c <HAL_Delay>
	HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <IMU_config+0x100>)
 8001036:	f003 f855 	bl	80040e4 <HAL_GPIO_WritePin>

}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400

0800104c <IMU_acc_read>:

void IMU_acc_read(SPI_HandleTypeDef *hspi, int *accel_data){
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_ACC_DATA_START_REG;
 8001056:	2382      	movs	r3, #130	; 0x82
 8001058:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, RESET); //read acceloremeter data
 800105a:	2200      	movs	r2, #0
 800105c:	2110      	movs	r1, #16
 800105e:	4835      	ldr	r0, [pc, #212]	; (8001134 <IMU_acc_read+0xe8>)
 8001060:	f003 f840 	bl	80040e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001064:	f107 0113 	add.w	r1, r7, #19
 8001068:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800106c:	2201      	movs	r2, #1
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f005 f824 	bl	80060bc <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	e00c      	b.n	8001094 <IMU_acc_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f107 020c 	add.w	r2, r7, #12
 8001080:	18d1      	adds	r1, r2, r3
 8001082:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001086:	2201      	movs	r2, #1
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f005 f94b 	bl	8006324 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b05      	cmp	r3, #5
 8001098:	ddef      	ble.n	800107a <IMU_acc_read+0x2e>
	}
	HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2110      	movs	r1, #16
 800109e:	4825      	ldr	r0, [pc, #148]	; (8001134 <IMU_acc_read+0xe8>)
 80010a0:	f003 f820 	bl	80040e4 <HAL_GPIO_WritePin>
	accel_data[0]=((store_data[1]<<4)+(store_data[0]>>4));
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	7b3a      	ldrb	r2, [r7, #12]
 80010aa:	0912      	lsrs	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	441a      	add	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	601a      	str	r2, [r3, #0]
	accel_data[1]=((store_data[3]<<4)+(store_data[2]>>4));
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	011a      	lsls	r2, r3, #4
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4619      	mov	r1, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	3304      	adds	r3, #4
 80010c4:	440a      	add	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
	accel_data[2]=((store_data[5]<<4)+(store_data[4]>>4));
 80010c8:	7c7b      	ldrb	r3, [r7, #17]
 80010ca:	011a      	lsls	r2, r3, #4
 80010cc:	7c3b      	ldrb	r3, [r7, #16]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3308      	adds	r3, #8
 80010d8:	440a      	add	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
	//HAL_Delay(100);

	if (accel_data[0] > 2047)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010e4:	db05      	blt.n	80010f2 <IMU_acc_read+0xa6>
	{
		accel_data[0] -= 4096;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (accel_data[1]> 2047)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3304      	adds	r3, #4
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010fc:	db07      	blt.n	800110e <IMU_acc_read+0xc2>
	{
		accel_data[1] -= 4096;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	3304      	adds	r3, #4
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3304      	adds	r3, #4
 8001108:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 800110c:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (accel_data[2] > 2047)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3308      	adds	r3, #8
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001118:	db07      	blt.n	800112a <IMU_acc_read+0xde>
	{
		accel_data[2] -= 4096;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	3308      	adds	r3, #8
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3308      	adds	r3, #8
 8001124:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8001128:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40020000 	.word	0x40020000

08001138 <IMU_gyro_read>:

void IMU_gyro_read(SPI_HandleTypeDef *hspi, int *gyro_data){
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_GYRO_DATA_START_REG;
 8001142:	2382      	movs	r3, #130	; 0x82
 8001144:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, RESET); //read gyroscope data
 8001146:	2200      	movs	r2, #0
 8001148:	2104      	movs	r1, #4
 800114a:	4832      	ldr	r0, [pc, #200]	; (8001214 <IMU_gyro_read+0xdc>)
 800114c:	f002 ffca 	bl	80040e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001150:	f107 0113 	add.w	r1, r7, #19
 8001154:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001158:	2201      	movs	r2, #1
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f004 ffae 	bl	80060bc <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e00c      	b.n	8001180 <IMU_gyro_read+0x48>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f107 020c 	add.w	r2, r7, #12
 800116c:	18d1      	adds	r1, r2, r3
 800116e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001172:	2201      	movs	r2, #1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f005 f8d5 	bl	8006324 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2b05      	cmp	r3, #5
 8001184:	ddef      	ble.n	8001166 <IMU_gyro_read+0x2e>
	}
	HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2104      	movs	r1, #4
 800118a:	4822      	ldr	r0, [pc, #136]	; (8001214 <IMU_gyro_read+0xdc>)
 800118c:	f002 ffaa 	bl	80040e4 <HAL_GPIO_WritePin>
	gyro_data[0]=((store_data[1]<<8)+(store_data[0]));
 8001190:	7b7b      	ldrb	r3, [r7, #13]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	7b3a      	ldrb	r2, [r7, #12]
 8001196:	441a      	add	r2, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	601a      	str	r2, [r3, #0]
	gyro_data[1]=((store_data[3]<<8)+(store_data[2]));
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	021a      	lsls	r2, r3, #8
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	4619      	mov	r1, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3304      	adds	r3, #4
 80011a8:	440a      	add	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
	gyro_data[2]=((store_data[5]<<8)+(store_data[4]));
 80011ac:	7c7b      	ldrb	r3, [r7, #17]
 80011ae:	021a      	lsls	r2, r3, #8
 80011b0:	7c3b      	ldrb	r3, [r7, #16]
 80011b2:	4619      	mov	r1, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	3308      	adds	r3, #8
 80011b8:	440a      	add	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
	//HAL_Delay(100);

	if (gyro_data[0] > 32767)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011c4:	db05      	blt.n	80011d2 <IMU_gyro_read+0x9a>
	{
		gyro_data[0] -= 65536;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (gyro_data[1]> 32767)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3304      	adds	r3, #4
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011dc:	db07      	blt.n	80011ee <IMU_gyro_read+0xb6>
	{
		gyro_data[1] -= 65536;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3304      	adds	r3, #4
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3304      	adds	r3, #4
 80011e8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80011ec:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (gyro_data[2] > 32767)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3308      	adds	r3, #8
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011f8:	db07      	blt.n	800120a <IMU_gyro_read+0xd2>
	{
		gyro_data[2] -= 65536;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	3308      	adds	r3, #8
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	3308      	adds	r3, #8
 8001204:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001208:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40020400 	.word	0x40020400

08001218 <adcInt2Volt>:
#include "adcUnitConversion.h"
#include "stdio.h"
#include "math.h"
#include "main.h"

float adcInt2Volt (unsigned long int ADCReading){
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

	//ADCVREF reference voltage = ?
	return ((float)ADCReading/(1 << 12 ))*ADCVREF;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800122a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001268 <adcInt2Volt+0x50>
 800122e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001232:	ee16 0a90 	vmov	r0, s13
 8001236:	f7ff f987 	bl	8000548 <__aeabi_f2d>
 800123a:	a309      	add	r3, pc, #36	; (adr r3, 8001260 <adcInt2Volt+0x48>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff f9da 	bl	80005f8 <__aeabi_dmul>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	f7ff fcac 	bl	8000ba8 <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	ee07 3a90 	vmov	s15, r3
}
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	66666666 	.word	0x66666666
 8001264:	400a6666 	.word	0x400a6666
 8001268:	45800000 	.word	0x45800000
 800126c:	00000000 	.word	0x00000000

08001270 <motorCurrent>:


float motorCurrent (int adcReading){
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	//0.0066 sensor's scale factor
	return (adcInt2Volt(adcReading) - BIASSENSOR)/0.0066;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ffcc 	bl	8001218 <adcInt2Volt>
 8001280:	ee10 3a10 	vmov	r3, s0
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f95f 	bl	8000548 <__aeabi_f2d>
 800128a:	a30f      	add	r3, pc, #60	; (adr r3, 80012c8 <motorCurrent+0x58>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7fe fffa 	bl	8000288 <__aeabi_dsub>
 8001294:	4603      	mov	r3, r0
 8001296:	460c      	mov	r4, r1
 8001298:	4618      	mov	r0, r3
 800129a:	4621      	mov	r1, r4
 800129c:	a30c      	add	r3, pc, #48	; (adr r3, 80012d0 <motorCurrent+0x60>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff fad3 	bl	800084c <__aeabi_ddiv>
 80012a6:	4603      	mov	r3, r0
 80012a8:	460c      	mov	r4, r1
 80012aa:	4618      	mov	r0, r3
 80012ac:	4621      	mov	r1, r4
 80012ae:	f7ff fc7b 	bl	8000ba8 <__aeabi_d2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	ee07 3a90 	vmov	s15, r3
}
 80012b8:	eeb0 0a67 	vmov.f32	s0, s15
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd90      	pop	{r4, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	f3af 8000 	nop.w
 80012c8:	66666666 	.word	0x66666666
 80012cc:	3ffa6666 	.word	0x3ffa6666
 80012d0:	02752546 	.word	0x02752546
 80012d4:	3f7b089a 	.word	0x3f7b089a

080012d8 <igbtTemp>:

float igbtTemp (int adcReading){
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	//int Rmin = 160, Rmax = 16100;
	//float Vmin = 0.05, Vmax = 3.25;
	//int Tmin = 0, Tmax = 150;

	float m, b, T;
	m = b = T = 0;
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	60fb      	str	r3, [r7, #12]

	m = 53.085;//(Tmin-Tmax)/(Vmax-Vmin);
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <igbtTemp+0x98>)
 80012f0:	60fb      	str	r3, [r7, #12]
	b = 22.025;//Tmin - m*Vmax;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <igbtTemp+0x9c>)
 80012f4:	613b      	str	r3, [r7, #16]

	T = m*(adcInt2Volt(adcReading)/3.3)+b;
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f7ff f926 	bl	8000548 <__aeabi_f2d>
 80012fc:	4604      	mov	r4, r0
 80012fe:	460d      	mov	r5, r1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff88 	bl	8001218 <adcInt2Volt>
 8001308:	ee10 3a10 	vmov	r3, s0
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f91b 	bl	8000548 <__aeabi_f2d>
 8001312:	a315      	add	r3, pc, #84	; (adr r3, 8001368 <igbtTemp+0x90>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff fa98 	bl	800084c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7ff f968 	bl	80005f8 <__aeabi_dmul>
 8001328:	4603      	mov	r3, r0
 800132a:	460c      	mov	r4, r1
 800132c:	4625      	mov	r5, r4
 800132e:	461c      	mov	r4, r3
 8001330:	6938      	ldr	r0, [r7, #16]
 8001332:	f7ff f909 	bl	8000548 <__aeabi_f2d>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4620      	mov	r0, r4
 800133c:	4629      	mov	r1, r5
 800133e:	f7fe ffa5 	bl	800028c <__adddf3>
 8001342:	4603      	mov	r3, r0
 8001344:	460c      	mov	r4, r1
 8001346:	4618      	mov	r0, r3
 8001348:	4621      	mov	r1, r4
 800134a:	f7ff fc2d 	bl	8000ba8 <__aeabi_d2f>
 800134e:	4603      	mov	r3, r0
 8001350:	617b      	str	r3, [r7, #20]

	return T;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	ee07 3a90 	vmov	s15, r3
}
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	66666666 	.word	0x66666666
 800136c:	400a6666 	.word	0x400a6666
 8001370:	4254570a 	.word	0x4254570a
 8001374:	41b03333 	.word	0x41b03333

08001378 <motorTemp>:

float motorTemp (unsigned long int adcReading){
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	//int Rmin = 1600, Rmax = 4000;   //resistance
	//float Vmin = 0.05, Vmax = 3.25; //voltage
	//int Tmin=0, Tmax=150;			//temperature

	float m, b, Rt, T;
	m = b = Rt = T = 0;
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	60bb      	str	r3, [r7, #8]

	/*m = (Tmin-Tmax)/(Vmin-Vmax);
	b = Tmin-Vmin*m; */
	m = -119.81;
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <motorTemp+0x50>)
 8001394:	60bb      	str	r3, [r7, #8]
	b = 365.61;
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <motorTemp+0x54>)
 8001398:	60fb      	str	r3, [r7, #12]

	T = m*(adcInt2Volt(adcReading))+b;
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff3c 	bl	8001218 <adcInt2Volt>
 80013a0:	eeb0 7a40 	vmov.f32	s14, s0
 80013a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80013b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b4:	edc7 7a05 	vstr	s15, [r7, #20]

	return T;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	ee07 3a90 	vmov	s15, r3

}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	c2ef9eb8 	.word	0xc2ef9eb8
 80013cc:	43b6ce14 	.word	0x43b6ce14

080013d0 <voltageAC>:

float voltageAC (int adcReading){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

	/*
	 * R1 = R28 = 75k
	 * R2 = R30 = 10k
	 */
	int R1 = 1800000;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <voltageAC+0x50>)
 80013da:	617b      	str	r3, [r7, #20]
	int R2 = 10000;
 80013dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80013e0:	613b      	str	r3, [r7, #16]

	float Vout = adcInt2Volt(adcReading);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff17 	bl	8001218 <adcInt2Volt>
 80013ea:	ed87 0a03 	vstr	s0, [r7, #12]

	float Vin = ((R1+R2)/R2)*Vout;
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	441a      	add	r2, r3
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001402:	ed97 7a03 	vldr	s14, [r7, #12]
 8001406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140a:	edc7 7a02 	vstr	s15, [r7, #8]

	return Vin;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	ee07 3a90 	vmov	s15, r3

}
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	001b7740 	.word	0x001b7740

08001424 <voltageDC>:

float voltageDC (int adcReading){
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	 * R1 = R9 = 300k
	 * R2 = R12 = 2k
	 * R3 = R10 = 39  <- negligenciar?
	 */

	int R1 = 300000;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <voltageDC+0x50>)
 800142e:	617b      	str	r3, [r7, #20]
	int R2 = 2000;
 8001430:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001434:	613b      	str	r3, [r7, #16]
	//int R3 = 39;

	float Vout = adcInt2Volt(adcReading);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff feed 	bl	8001218 <adcInt2Volt>
 800143e:	ed87 0a03 	vstr	s0, [r7, #12]

	float Vin = ((R1+R2)/R2)*Vout;
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	441a      	add	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	fb92 f3f3 	sdiv	r3, r2, r3
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	ed97 7a03 	vldr	s14, [r7, #12]
 800145a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145e:	edc7 7a02 	vstr	s15, [r7, #8]

	return Vin;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	ee07 3a90 	vmov	s15, r3

}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	000493e0 	.word	0x000493e0

08001478 <pedalPos>:


float pedalPos (int adcReading){
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

	float pos = (adcInt2Volt(adcReading)/ADCVREF)*100;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fec8 	bl	8001218 <adcInt2Volt>
 8001488:	ee10 3a10 	vmov	r3, s0
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f85b 	bl	8000548 <__aeabi_f2d>
 8001492:	a310      	add	r3, pc, #64	; (adr r3, 80014d4 <pedalPos+0x5c>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f9d8 	bl	800084c <__aeabi_ddiv>
 800149c:	4603      	mov	r3, r0
 800149e:	460c      	mov	r4, r1
 80014a0:	4618      	mov	r0, r3
 80014a2:	4621      	mov	r1, r4
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <pedalPos+0x58>)
 80014aa:	f7ff f8a5 	bl	80005f8 <__aeabi_dmul>
 80014ae:	4603      	mov	r3, r0
 80014b0:	460c      	mov	r4, r1
 80014b2:	4618      	mov	r0, r3
 80014b4:	4621      	mov	r1, r4
 80014b6:	f7ff fb77 	bl	8000ba8 <__aeabi_d2f>
 80014ba:	4603      	mov	r3, r0
 80014bc:	60fb      	str	r3, [r7, #12]

	return pos;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	ee07 3a90 	vmov	s15, r3

}
 80014c4:	eeb0 0a67 	vmov.f32	s0, s15
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40590000 	.word	0x40590000
 80014d4:	66666666 	.word	0x66666666
 80014d8:	400a6666 	.word	0x400a6666

080014dc <motorSpeed>:
 */

#include "main.h"
#include "encoderMode.h"

int motorSpeed (uint32_t *cnt1, uint32_t *tick, TIM_HandleTypeDef htim2){
 80014dc:	b082      	sub	sp, #8
 80014de:	b590      	push	{r4, r7, lr}
 80014e0:	b087      	sub	sp, #28
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
 80014e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80014ec:	e881 000c 	stmia.w	r1, {r2, r3}

	int diff = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
	uint32_t cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	613b      	str	r3, [r7, #16]
	//uint32_t time1 = (HAL_GetTick() - *tick)*0.001;
	//printf("time = %lu\n", time1);

	printf("cnt1 = %lu counter2 = %lu\n",*cnt1,cnt2);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4619      	mov	r1, r3
 8001502:	4831      	ldr	r0, [pc, #196]	; (80015c8 <motorSpeed+0xec>)
 8001504:	f00a fd4e 	bl	800bfa4 <iprintf>

	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8001508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2b10      	cmp	r3, #16
 8001512:	d113      	bne.n	800153c <motorSpeed+0x60>
		if(cnt2 < *cnt1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	429a      	cmp	r2, r3
 800151c:	d205      	bcs.n	800152a <motorSpeed+0x4e>
			diff = *cnt1 - cnt2;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e01b      	b.n	8001562 <motorSpeed+0x86>
		else
			diff = (65535 - cnt2) + *cnt1;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001536:	33ff      	adds	r3, #255	; 0xff
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e012      	b.n	8001562 <motorSpeed+0x86>
	} else {
		if(cnt2 > *cnt1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	429a      	cmp	r2, r3
 8001544:	d905      	bls.n	8001552 <motorSpeed+0x76>
			diff = cnt2 - *cnt1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e007      	b.n	8001562 <motorSpeed+0x86>
		else
			diff = (65535 - *cnt1) + cnt2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800155e:	33ff      	adds	r3, #255	; 0xff
 8001560:	617b      	str	r3, [r7, #20]
	}



	printf("diff = %d\n", diff);
 8001562:	6979      	ldr	r1, [r7, #20]
 8001564:	4819      	ldr	r0, [pc, #100]	; (80015cc <motorSpeed+0xf0>)
 8001566:	f00a fd1d 	bl	800bfa4 <iprintf>
	//float speed = (((float)(diff)/8)*60)*2;  //((diff/8)*60)/0.02;  // change when sysTimer configured
	float speed = (((float)(diff)/8)*60);//  /(time1);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001574:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80015d0 <motorSpeed+0xf4>
 8001580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001584:	edc7 7a03 	vstr	s15, [r7, #12]


	*tick = HAL_GetTick();
 8001588:	f001 fb34 	bl	8002bf4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	601a      	str	r2, [r3, #0]
	*cnt1 = cnt2;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	601a      	str	r2, [r3, #0]
	printf("speed = %f\n",speed);
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7fe ffd5 	bl	8000548 <__aeabi_f2d>
 800159e:	4603      	mov	r3, r0
 80015a0:	460c      	mov	r4, r1
 80015a2:	461a      	mov	r2, r3
 80015a4:	4623      	mov	r3, r4
 80015a6:	480b      	ldr	r0, [pc, #44]	; (80015d4 <motorSpeed+0xf8>)
 80015a8:	f00a fcfc 	bl	800bfa4 <iprintf>
	return speed;
 80015ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b4:	ee17 3a90 	vmov	r3, s15
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	371c      	adds	r7, #28
 80015bc:	46bd      	mov	sp, r7
 80015be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80015c2:	b002      	add	sp, #8
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	0800e1a0 	.word	0x0800e1a0
 80015cc:	0800e1bc 	.word	0x0800e1bc
 80015d0:	42700000 	.word	0x42700000
 80015d4:	0800e1c8 	.word	0x0800e1c8

080015d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80015f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80015f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00b      	beq.n	8001618 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001600:	e000      	b.n	8001604 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001602:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001604:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f9      	beq.n	8001602 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800160e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001618:	687b      	ldr	r3, [r7, #4]
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	//printf("dma timer = %lu\n", HAL_GetTick()-time2);
	if(hadc->Instance == ADC1){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <HAL_ADC_ConvCpltCallback+0x40>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d110      	bne.n	800165c <HAL_ADC_ConvCpltCallback+0x34>
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e00a      	b.n	8001656 <HAL_ADC_ConvCpltCallback+0x2e>
			{
				adc_dma[i]=buffer_dma[i];
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_ADC_ConvCpltCallback+0x44>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001648:	4909      	ldr	r1, [pc, #36]	; (8001670 <HAL_ADC_ConvCpltCallback+0x48>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i < NR_ADC_CHANNELS; i++)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3301      	adds	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b0b      	cmp	r3, #11
 800165a:	ddf1      	ble.n	8001640 <HAL_ADC_ConvCpltCallback+0x18>
			}
	}
	//time2 = HAL_GetTick();
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40012000 	.word	0x40012000
 800166c:	20001ad0 	.word	0x20001ad0
 8001670:	200017d0 	.word	0x200017d0

08001674 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	b091      	sub	sp, #68	; 0x44
 8001678:	af0e      	add	r7, sp, #56	; 0x38
 800167a:	6078      	str	r0, [r7, #4]

	//UNUSED(htim); será preciso?

	//counter2 = __HAL_TIM_GET_COUNTER(&htim2);
	//printf("%lu\n", HAL_GetTick());
	if(htim->Instance== TIM6){
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d11d      	bne.n	80016c2 <HAL_TIM_PeriodElapsedCallback+0x4e>
		printf("kay\n");
 8001686:	4812      	ldr	r0, [pc, #72]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001688:	f00a fd00 	bl	800c08c <puts>
		speed = motorSpeed(&counter1, &tick, htim2);
 800168c:	4e11      	ldr	r6, [pc, #68]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800168e:	466d      	mov	r5, sp
 8001690:	f106 0408 	add.w	r4, r6, #8
 8001694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80016ac:	490a      	ldr	r1, [pc, #40]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016ae:	480b      	ldr	r0, [pc, #44]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x68>)
 80016b0:	f7ff ff14 	bl	80014dc <motorSpeed>
 80016b4:	ee07 0a90 	vmov	s15, r0
 80016b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80016be:	edc3 7a00 	vstr	s15, [r3]

	/*float T = 0.25; //assumindo que periodo é 250ms
	speed = ((pulses/8)*60)/T;
	pulses = 0;*/

}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40001000 	.word	0x40001000
 80016d0:	0800e1d4 	.word	0x0800e1d4
 80016d4:	20002c7c 	.word	0x20002c7c
 80016d8:	20000280 	.word	0x20000280
 80016dc:	2000027c 	.word	0x2000027c
 80016e0:	20000284 	.word	0x20000284

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b097      	sub	sp, #92	; 0x5c
 80016e8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ea:	f001 fa1d 	bl	8002b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ee:	f000 fac5 	bl	8001c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f2:	f000 fd2f 	bl	8002154 <MX_GPIO_Init>
  MX_DMA_Init();
 80016f6:	f000 fcfd 	bl	80020f4 <MX_DMA_Init>
  MX_SPI2_Init();
 80016fa:	f000 fc3b 	bl	8001f74 <MX_SPI2_Init>
  MX_ADC1_Init();
 80016fe:	f000 fb2d 	bl	8001d5c <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8001702:	f000 fc17 	bl	8001f34 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001706:	f006 facb 	bl	8007ca0 <MX_FATFS_Init>
  MX_TIM6_Init();
 800170a:	f000 fcbd 	bl	8002088 <MX_TIM6_Init>
  MX_TIM2_Init();
 800170e:	f000 fc67 	bl	8001fe0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, SET);
 8001712:	2201      	movs	r2, #1
 8001714:	2110      	movs	r1, #16
 8001716:	481a      	ldr	r0, [pc, #104]	; (8001780 <main+0x9c>)
 8001718:	f002 fce4 	bl	80040e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Gyro_CS_GPIO_Port, Gyro_CS_Pin, SET);
 800171c:	2201      	movs	r2, #1
 800171e:	2104      	movs	r1, #4
 8001720:	4818      	ldr	r0, [pc, #96]	; (8001784 <main+0xa0>)
 8001722:	f002 fcdf 	bl	80040e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Magnet_CS_GPIO_Port, Magnet_CS_Pin, SET);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800172c:	4815      	ldr	r0, [pc, #84]	; (8001784 <main+0xa0>)
 800172e:	f002 fcd9 	bl	80040e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <main+0xa0>)
 800173a:	f002 fcd3 	bl	80040e4 <HAL_GPIO_WritePin>
  fresult = f_printf(&fil, "kay\n");
  if(fresult != FR_OK){
	  Error_Handler();
  }
  f_close(&fil);*/
  fresult=mount_card(&fs);
 800173e:	4812      	ldr	r0, [pc, #72]	; (8001788 <main+0xa4>)
 8001740:	f000 fdda 	bl	80022f8 <mount_card>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <main+0xa8>)
 800174a:	701a      	strb	r2, [r3, #0]

  char str2[30];

  IMU_config(&hspi2);
 800174c:	4810      	ldr	r0, [pc, #64]	; (8001790 <main+0xac>)
 800174e:	f7ff fbfb 	bl	8000f48 <IMU_config>

  HAL_TIM_Base_Start_IT(&htim6);
 8001752:	4810      	ldr	r0, [pc, #64]	; (8001794 <main+0xb0>)
 8001754:	f005 f9cd 	bl	8006af2 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim7);

  //Initialize encoder mode
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001758:	213c      	movs	r1, #60	; 0x3c
 800175a:	480f      	ldr	r0, [pc, #60]	; (8001798 <main+0xb4>)
 800175c:	f005 fa7f 	bl	8006c5e <HAL_TIM_Encoder_Start>
  tick = HAL_GetTick();
 8001760:	f001 fa48 	bl	8002bf4 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <main+0xb8>)
 8001768:	601a      	str	r2, [r3, #0]
  counter1 = __HAL_TIM_GET_COUNTER(&htim2);
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <main+0xb4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <main+0xbc>)
 8001772:	6013      	str	r3, [r2, #0]

  uint8_t aux[5], aux2[1], aux3[1], str3[4], str[5];
  //uint8_t ref[5];
    aux[0]=0b10000001;
 8001774:	2381      	movs	r3, #129	; 0x81
 8001776:	753b      	strb	r3, [r7, #20]
    for(int i=1; i<=4; i++){
 8001778:	2301      	movs	r3, #1
 800177a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800177c:	e01b      	b.n	80017b6 <main+0xd2>
 800177e:	bf00      	nop
 8001780:	40020000 	.word	0x40020000
 8001784:	40020400 	.word	0x40020400
 8001788:	20000798 	.word	0x20000798
 800178c:	20001c48 	.word	0x20001c48
 8001790:	2000073c 	.word	0x2000073c
 8001794:	20001b60 	.word	0x20001b60
 8001798:	20002c7c 	.word	0x20002c7c
 800179c:	20000280 	.word	0x20000280
 80017a0:	2000027c 	.word	0x2000027c
  	  aux[i]=0b00000000;
 80017a4:	f107 0214 	add.w	r2, r7, #20
 80017a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017aa:	4413      	add	r3, r2
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
    for(int i=1; i<=4; i++){
 80017b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b2:	3301      	adds	r3, #1
 80017b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	ddf3      	ble.n	80017a4 <main+0xc0>
    }
    aux2[0]=0b00000000;
 80017bc:	2300      	movs	r3, #0
 80017be:	743b      	strb	r3, [r7, #16]

    time2 = HAL_GetTick();
 80017c0:	f001 fa18 	bl	8002bf4 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	4bc1      	ldr	r3, [pc, #772]	; (8001acc <main+0x3e8>)
 80017c8:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, buffer_dma, NR_ADC_CHANNELS);
 80017ca:	220c      	movs	r2, #12
 80017cc:	49c0      	ldr	r1, [pc, #768]	; (8001ad0 <main+0x3ec>)
 80017ce:	48c1      	ldr	r0, [pc, #772]	; (8001ad4 <main+0x3f0>)
 80017d0:	f001 fa82 	bl	8002cd8 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint32_t time1 = HAL_GetTick();
 80017d4:	f001 fa0e 	bl	8002bf4 <HAL_GetTick>
 80017d8:	6438      	str	r0, [r7, #64]	; 0x40

	  //printf("Microssegundos = %lu\n", seg);
	  uint32_t read=adc_dma[0];
 80017da:	4bbf      	ldr	r3, [pc, #764]	; (8001ad8 <main+0x3f4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c
	  motor_temp = motorTemp(read);
 80017e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017e2:	f7ff fdc9 	bl	8001378 <motorTemp>
 80017e6:	eef0 7a40 	vmov.f32	s15, s0
 80017ea:	4bbc      	ldr	r3, [pc, #752]	; (8001adc <main+0x3f8>)
 80017ec:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[1];
 80017f0:	4bb9      	ldr	r3, [pc, #740]	; (8001ad8 <main+0x3f4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  brk_pedal = pedalPos(read);
 80017f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fe3d 	bl	8001478 <pedalPos>
 80017fe:	eef0 7a40 	vmov.f32	s15, s0
 8001802:	4bb7      	ldr	r3, [pc, #732]	; (8001ae0 <main+0x3fc>)
 8001804:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[2];
 8001808:	4bb3      	ldr	r3, [pc, #716]	; (8001ad8 <main+0x3f4>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  acc_pedal = pedalPos(read);
 800180e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fe31 	bl	8001478 <pedalPos>
 8001816:	eef0 7a40 	vmov.f32	s15, s0
 800181a:	4bb2      	ldr	r3, [pc, #712]	; (8001ae4 <main+0x400>)
 800181c:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[3];
 8001820:	4bad      	ldr	r3, [pc, #692]	; (8001ad8 <main+0x3f4>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph1 = motorCurrent(read);
 8001826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fd21 	bl	8001270 <motorCurrent>
 800182e:	eef0 7a40 	vmov.f32	s15, s0
 8001832:	4bad      	ldr	r3, [pc, #692]	; (8001ae8 <main+0x404>)
 8001834:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph1[f] = current_ph1*current_ph1;
 8001838:	4bab      	ldr	r3, [pc, #684]	; (8001ae8 <main+0x404>)
 800183a:	ed93 7a00 	vldr	s14, [r3]
 800183e:	4baa      	ldr	r3, [pc, #680]	; (8001ae8 <main+0x404>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	4ba9      	ldr	r3, [pc, #676]	; (8001aec <main+0x408>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184c:	4aa8      	ldr	r2, [pc, #672]	; (8001af0 <main+0x40c>)
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[4];
 8001856:	4ba0      	ldr	r3, [pc, #640]	; (8001ad8 <main+0x3f4>)
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph2 = motorCurrent(read);
 800185c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fd06 	bl	8001270 <motorCurrent>
 8001864:	eef0 7a40 	vmov.f32	s15, s0
 8001868:	4ba2      	ldr	r3, [pc, #648]	; (8001af4 <main+0x410>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph2[f] = current_ph2*current_ph2;
 800186e:	4ba1      	ldr	r3, [pc, #644]	; (8001af4 <main+0x410>)
 8001870:	ed93 7a00 	vldr	s14, [r3]
 8001874:	4b9f      	ldr	r3, [pc, #636]	; (8001af4 <main+0x410>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	4b9c      	ldr	r3, [pc, #624]	; (8001aec <main+0x408>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001882:	4a9d      	ldr	r2, [pc, #628]	; (8001af8 <main+0x414>)
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[5];
 800188c:	4b92      	ldr	r3, [pc, #584]	; (8001ad8 <main+0x3f4>)
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	63fb      	str	r3, [r7, #60]	; 0x3c
	  current_ph3 = motorCurrent(read);
 8001892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fceb 	bl	8001270 <motorCurrent>
 800189a:	eef0 7a40 	vmov.f32	s15, s0
 800189e:	4b97      	ldr	r3, [pc, #604]	; (8001afc <main+0x418>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]
	  rms_current_ph3[f] = current_ph3*current_ph3;
 80018a4:	4b95      	ldr	r3, [pc, #596]	; (8001afc <main+0x418>)
 80018a6:	ed93 7a00 	vldr	s14, [r3]
 80018aa:	4b94      	ldr	r3, [pc, #592]	; (8001afc <main+0x418>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	4b8e      	ldr	r3, [pc, #568]	; (8001aec <main+0x408>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b8:	4a91      	ldr	r2, [pc, #580]	; (8001b00 <main+0x41c>)
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[6];
 80018c2:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <main+0x3f4>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  conv_temp = igbtTemp(read);
 80018c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fd04 	bl	80012d8 <igbtTemp>
 80018d0:	eef0 7a40 	vmov.f32	s15, s0
 80018d4:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <main+0x420>)
 80018d6:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[7];
 80018da:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <main+0x3f4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
	  dc_voltage=voltageDC(read);
 80018e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fd9e 	bl	8001424 <voltageDC>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	4b86      	ldr	r3, [pc, #536]	; (8001b08 <main+0x424>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[8];
 80018f2:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <main+0x3f4>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  dc_current=motorCurrent(read); //função corrente dc?
 80018f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fcb8 	bl	8001270 <motorCurrent>
 8001900:	eef0 7a40 	vmov.f32	s15, s0
 8001904:	4b81      	ldr	r3, [pc, #516]	; (8001b0c <main+0x428>)
 8001906:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[9];
 800190a:	4b73      	ldr	r3, [pc, #460]	; (8001ad8 <main+0x3f4>)
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph1=voltageAC(read);
 8001910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fd5c 	bl	80013d0 <voltageAC>
 8001918:	eef0 7a40 	vmov.f32	s15, s0
 800191c:	4b7c      	ldr	r3, [pc, #496]	; (8001b10 <main+0x42c>)
 800191e:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[10];
 8001922:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <main+0x3f4>)
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph2=voltageAC(read);
 8001928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fd50 	bl	80013d0 <voltageAC>
 8001930:	eef0 7a40 	vmov.f32	s15, s0
 8001934:	4b77      	ldr	r3, [pc, #476]	; (8001b14 <main+0x430>)
 8001936:	edc3 7a00 	vstr	s15, [r3]

	  read=adc_dma[11];
 800193a:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <main+0x3f4>)
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  voltage_ph3=voltageAC(read);
 8001940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fd44 	bl	80013d0 <voltageAC>
 8001948:	eef0 7a40 	vmov.f32	s15, s0
 800194c:	4b72      	ldr	r3, [pc, #456]	; (8001b18 <main+0x434>)
 800194e:	edc3 7a00 	vstr	s15, [r3]
		  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
	  }
	  else if(brk>50)*/


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001958:	4870      	ldr	r0, [pc, #448]	; (8001b1c <main+0x438>)
 800195a:	f002 fbc3 	bl	80040e4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux, 5, 1000);
 800195e:	f107 0114 	add.w	r1, r7, #20
 8001962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001966:	2205      	movs	r2, #5
 8001968:	486d      	ldr	r0, [pc, #436]	; (8001b20 <main+0x43c>)
 800196a:	f004 fba7 	bl	80060bc <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 800196e:	2201      	movs	r2, #1
 8001970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001974:	4869      	ldr	r0, [pc, #420]	; (8001b1c <main+0x438>)
 8001976:	f002 fbb5 	bl	80040e4 <HAL_GPIO_WritePin>


	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001980:	4866      	ldr	r0, [pc, #408]	; (8001b1c <main+0x438>)
 8001982:	f002 fbaf 	bl	80040e4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux2, 1, 1000);
 8001986:	f107 0110 	add.w	r1, r7, #16
 800198a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198e:	2201      	movs	r2, #1
 8001990:	4863      	ldr	r0, [pc, #396]	; (8001b20 <main+0x43c>)
 8001992:	f004 fb93 	bl	80060bc <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str, 4, 1000);
 8001996:	4639      	mov	r1, r7
 8001998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199c:	2204      	movs	r2, #4
 800199e:	4860      	ldr	r0, [pc, #384]	; (8001b20 <main+0x43c>)
 80019a0:	f004 fcc0 	bl	8006324 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019aa:	485c      	ldr	r0, [pc, #368]	; (8001b1c <main+0x438>)
 80019ac:	f002 fb9a 	bl	80040e4 <HAL_GPIO_WritePin>
	  //printf("%d %d %d %d\n", str[0], str[1], str[2], str[3]);


	  //ler velocidades do tmc
	  aux3[0]=0x6A;
 80019b0:	236a      	movs	r3, #106	; 0x6a
 80019b2:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ba:	4858      	ldr	r0, [pc, #352]	; (8001b1c <main+0x438>)
 80019bc:	f002 fb92 	bl	80040e4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 80019c0:	f107 010c 	add.w	r1, r7, #12
 80019c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c8:	2201      	movs	r2, #1
 80019ca:	4855      	ldr	r0, [pc, #340]	; (8001b20 <main+0x43c>)
 80019cc:	f004 fb76 	bl	80060bc <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 80019d0:	f107 0108 	add.w	r1, r7, #8
 80019d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d8:	2204      	movs	r2, #4
 80019da:	4851      	ldr	r0, [pc, #324]	; (8001b20 <main+0x43c>)
 80019dc:	f004 fca2 	bl	8006324 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e6:	484d      	ldr	r0, [pc, #308]	; (8001b1c <main+0x438>)
 80019e8:	f002 fb7c 	bl	80040e4 <HAL_GPIO_WritePin>
	  //printf("PID VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);

	  aux3[0]=0x22;
 80019ec:	2322      	movs	r3, #34	; 0x22
 80019ee:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f6:	4849      	ldr	r0, [pc, #292]	; (8001b1c <main+0x438>)
 80019f8:	f002 fb74 	bl	80040e4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 80019fc:	f107 010c 	add.w	r1, r7, #12
 8001a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a04:	2201      	movs	r2, #1
 8001a06:	4846      	ldr	r0, [pc, #280]	; (8001b20 <main+0x43c>)
 8001a08:	f004 fb58 	bl	80060bc <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001a0c:	f107 0108 	add.w	r1, r7, #8
 8001a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a14:	2204      	movs	r2, #4
 8001a16:	4842      	ldr	r0, [pc, #264]	; (8001b20 <main+0x43c>)
 8001a18:	f004 fc84 	bl	8006324 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a22:	483e      	ldr	r0, [pc, #248]	; (8001b1c <main+0x438>)
 8001a24:	f002 fb5e 	bl	80040e4 <HAL_GPIO_WritePin>
	  //printf("OPENLOOP VELOCITY ACTUAL: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);

	  aux3[0]=0x41;
 8001a28:	2341      	movs	r3, #65	; 0x41
 8001a2a:	733b      	strb	r3, [r7, #12]
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a32:	483a      	ldr	r0, [pc, #232]	; (8001b1c <main+0x438>)
 8001a34:	f002 fb56 	bl	80040e4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux3, 1, 1000);
 8001a38:	f107 010c 	add.w	r1, r7, #12
 8001a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a40:	2201      	movs	r2, #1
 8001a42:	4837      	ldr	r0, [pc, #220]	; (8001b20 <main+0x43c>)
 8001a44:	f004 fb3a 	bl	80060bc <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, str3, 4, 1000);
 8001a48:	f107 0108 	add.w	r1, r7, #8
 8001a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a50:	2204      	movs	r2, #4
 8001a52:	4833      	ldr	r0, [pc, #204]	; (8001b20 <main+0x43c>)
 8001a54:	f004 fc66 	bl	8006324 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI_CS_FOC_GPIO_Port, SPI_CS_FOC_Pin, SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5e:	482f      	ldr	r0, [pc, #188]	; (8001b1c <main+0x438>)
 8001a60:	f002 fb40 	bl	80040e4 <HAL_GPIO_WritePin>
	  //printf("AENC DECODER COUNT: %d %d %d %d\n", str3[0], str3[1], str3[2], str3[3]);	   */

	  sprintf(str2,"%f ", brk_pedal);
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <main+0x3fc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd6d 	bl	8000548 <__aeabi_f2d>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	460c      	mov	r4, r1
 8001a72:	f107 001c 	add.w	r0, r7, #28
 8001a76:	461a      	mov	r2, r3
 8001a78:	4623      	mov	r3, r4
 8001a7a:	492a      	ldr	r1, [pc, #168]	; (8001b24 <main+0x440>)
 8001a7c:	f00a fb0e 	bl	800c09c <siprintf>
	  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <main+0x444>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <main+0x448>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4929      	ldr	r1, [pc, #164]	; (8001b30 <main+0x44c>)
 8001a8a:	482a      	ldr	r0, [pc, #168]	; (8001b34 <main+0x450>)
 8001a8c:	f00a fb06 	bl	800c09c <siprintf>
	  update_file("brake.txt", str2, stamp, "", &fil2, &bw);
 8001a90:	f107 011c 	add.w	r1, r7, #28
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <main+0x454>)
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <main+0x458>)
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <main+0x45c>)
 8001a9e:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <main+0x450>)
 8001aa0:	4828      	ldr	r0, [pc, #160]	; (8001b44 <main+0x460>)
 8001aa2:	f000 fc39 	bl	8002318 <update_file>
	  stamp[0]='\0';
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <main+0x450>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]

	  sprintf(str2,"%f ", acc_pedal);
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <main+0x400>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd49 	bl	8000548 <__aeabi_f2d>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	460c      	mov	r4, r1
 8001aba:	f107 001c 	add.w	r0, r7, #28
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	4918      	ldr	r1, [pc, #96]	; (8001b24 <main+0x440>)
 8001ac4:	f00a faea 	bl	800c09c <siprintf>
 8001ac8:	e03e      	b.n	8001b48 <main+0x464>
 8001aca:	bf00      	nop
 8001acc:	20003d54 	.word	0x20003d54
 8001ad0:	20001ad0 	.word	0x20001ad0
 8001ad4:	20001820 	.word	0x20001820
 8001ad8:	200017d0 	.word	0x200017d0
 8001adc:	200006d4 	.word	0x200006d4
 8001ae0:	20001804 	.word	0x20001804
 8001ae4:	20000738 	.word	0x20000738
 8001ae8:	20001800 	.word	0x20001800
 8001aec:	20000288 	.word	0x20000288
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20001810 	.word	0x20001810
 8001af8:	20000028 	.word	0x20000028
 8001afc:	2000181c 	.word	0x2000181c
 8001b00:	20000050 	.word	0x20000050
 8001b04:	2000180c 	.word	0x2000180c
 8001b08:	20001c44 	.word	0x20001c44
 8001b0c:	20001bac 	.word	0x20001bac
 8001b10:	20000794 	.word	0x20000794
 8001b14:	20001818 	.word	0x20001818
 8001b18:	20001814 	.word	0x20001814
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	2000073c 	.word	0x2000073c
 8001b24:	0800e1d8 	.word	0x0800e1d8
 8001b28:	20000278 	.word	0x20000278
 8001b2c:	20000274 	.word	0x20000274
 8001b30:	0800e1dc 	.word	0x0800e1dc
 8001b34:	20002cc0 	.word	0x20002cc0
 8001b38:	20001bbc 	.word	0x20001bbc
 8001b3c:	20003d58 	.word	0x20003d58
 8001b40:	0800e1e4 	.word	0x0800e1e4
 8001b44:	0800e1e8 	.word	0x0800e1e8
	  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001b48:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <main+0x558>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <main+0x55c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	493c      	ldr	r1, [pc, #240]	; (8001c44 <main+0x560>)
 8001b52:	483d      	ldr	r0, [pc, #244]	; (8001c48 <main+0x564>)
 8001b54:	f00a faa2 	bl	800c09c <siprintf>
	  update_file("throttle.txt", str2, stamp, "", &fil2, &bw);
 8001b58:	f107 011c 	add.w	r1, r7, #28
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <main+0x568>)
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <main+0x56c>)
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <main+0x570>)
 8001b66:	4a38      	ldr	r2, [pc, #224]	; (8001c48 <main+0x564>)
 8001b68:	483b      	ldr	r0, [pc, #236]	; (8001c58 <main+0x574>)
 8001b6a:	f000 fbd5 	bl	8002318 <update_file>
	  stamp[0]='\0';
 8001b6e:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <main+0x564>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]

	  IMU_acc_read(&hspi2, accel_data);
 8001b74:	4939      	ldr	r1, [pc, #228]	; (8001c5c <main+0x578>)
 8001b76:	483a      	ldr	r0, [pc, #232]	; (8001c60 <main+0x57c>)
 8001b78:	f7ff fa68 	bl	800104c <IMU_acc_read>
	  for(int i=0; i<=2; i++){
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b80:	e022      	b.n	8001bc8 <main+0x4e4>
		  sprintf(str2, "accel[%d] - %d ", i, accel_data[i]);
 8001b82:	4a36      	ldr	r2, [pc, #216]	; (8001c5c <main+0x578>)
 8001b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	f107 001c 	add.w	r0, r7, #28
 8001b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b90:	4934      	ldr	r1, [pc, #208]	; (8001c64 <main+0x580>)
 8001b92:	f00a fa83 	bl	800c09c <siprintf>
		  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <main+0x558>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <main+0x55c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4929      	ldr	r1, [pc, #164]	; (8001c44 <main+0x560>)
 8001ba0:	4829      	ldr	r0, [pc, #164]	; (8001c48 <main+0x564>)
 8001ba2:	f00a fa7b 	bl	800c09c <siprintf>
		  update_file("acc.txt", str2, stamp, "", &fil2, &bw);
 8001ba6:	f107 011c 	add.w	r1, r7, #28
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <main+0x568>)
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <main+0x56c>)
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <main+0x570>)
 8001bb4:	4a24      	ldr	r2, [pc, #144]	; (8001c48 <main+0x564>)
 8001bb6:	482c      	ldr	r0, [pc, #176]	; (8001c68 <main+0x584>)
 8001bb8:	f000 fbae 	bl	8002318 <update_file>
		  stamp[0]='\0';
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <main+0x564>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<=2; i++){
 8001bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	ddd9      	ble.n	8001b82 <main+0x49e>
	  }

	  IMU_gyro_read(&hspi2, gyro_data);
 8001bce:	4927      	ldr	r1, [pc, #156]	; (8001c6c <main+0x588>)
 8001bd0:	4823      	ldr	r0, [pc, #140]	; (8001c60 <main+0x57c>)
 8001bd2:	f7ff fab1 	bl	8001138 <IMU_gyro_read>
	  for(int i=0; i<=2; i++){
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8001bda:	e022      	b.n	8001c22 <main+0x53e>
		  sprintf(str2, "gyro[%d] - %d ", i, gyro_data[i]);
 8001bdc:	4a23      	ldr	r2, [pc, #140]	; (8001c6c <main+0x588>)
 8001bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	f107 001c 	add.w	r0, r7, #28
 8001be8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bea:	4921      	ldr	r1, [pc, #132]	; (8001c70 <main+0x58c>)
 8001bec:	f00a fa56 	bl	800c09c <siprintf>
		  sprintf(stamp, "%lu:%lu",  __unix_sec,  __unix_ms);
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <main+0x558>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <main+0x55c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4912      	ldr	r1, [pc, #72]	; (8001c44 <main+0x560>)
 8001bfa:	4813      	ldr	r0, [pc, #76]	; (8001c48 <main+0x564>)
 8001bfc:	f00a fa4e 	bl	800c09c <siprintf>
		  update_file("gyro.txt", str2, stamp, "", &fil2, &bw);
 8001c00:	f107 011c 	add.w	r1, r7, #28
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <main+0x568>)
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <main+0x56c>)
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <main+0x570>)
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <main+0x564>)
 8001c10:	4818      	ldr	r0, [pc, #96]	; (8001c74 <main+0x590>)
 8001c12:	f000 fb81 	bl	8002318 <update_file>
		  stamp[0]='\0';
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <main+0x564>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<=2; i++){
 8001c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1e:	3301      	adds	r3, #1
 8001c20:	647b      	str	r3, [r7, #68]	; 0x44
 8001c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	ddd9      	ble.n	8001bdc <main+0x4f8>
	  }

	  printf("tempo de ciclo = %lu\n", (HAL_GetTick() - time1));
 8001c28:	f000 ffe4 	bl	8002bf4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	4619      	mov	r1, r3
 8001c34:	4810      	ldr	r0, [pc, #64]	; (8001c78 <main+0x594>)
 8001c36:	f00a f9b5 	bl	800bfa4 <iprintf>
  {
 8001c3a:	e5cb      	b.n	80017d4 <main+0xf0>
 8001c3c:	20000278 	.word	0x20000278
 8001c40:	20000274 	.word	0x20000274
 8001c44:	0800e1dc 	.word	0x0800e1dc
 8001c48:	20002cc0 	.word	0x20002cc0
 8001c4c:	20001bbc 	.word	0x20001bbc
 8001c50:	20003d58 	.word	0x20003d58
 8001c54:	0800e1e4 	.word	0x0800e1e4
 8001c58:	0800e1f4 	.word	0x0800e1f4
 8001c5c:	20001ba0 	.word	0x20001ba0
 8001c60:	2000073c 	.word	0x2000073c
 8001c64:	0800e204 	.word	0x0800e204
 8001c68:	0800e214 	.word	0x0800e214
 8001c6c:	20001bb0 	.word	0x20001bb0
 8001c70:	0800e21c 	.word	0x0800e21c
 8001c74:	0800e22c 	.word	0x0800e22c
 8001c78:	0800e238 	.word	0x0800e238

08001c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b094      	sub	sp, #80	; 0x50
 8001c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c82:	f107 0320 	add.w	r3, r7, #32
 8001c86:	2230      	movs	r2, #48	; 0x30
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f009 fd25 	bl	800b6da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <SystemClock_Config+0xd8>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <SystemClock_Config+0xd8>)
 8001caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cae:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <SystemClock_Config+0xd8>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <SystemClock_Config+0xdc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <SystemClock_Config+0xdc>)
 8001cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <SystemClock_Config+0xdc>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001cec:	2319      	movs	r3, #25
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001cf0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001cf4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 fa08 	bl	8004118 <HAL_RCC_OscConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d0e:	f000 faec 	bl	80022ea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d12:	230f      	movs	r3, #15
 8001d14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d16:	2302      	movs	r3, #2
 8001d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	2105      	movs	r1, #5
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 fc61 	bl	80045f8 <HAL_RCC_ClockConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d3c:	f000 fad5 	bl	80022ea <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001d46:	2000      	movs	r0, #0
 8001d48:	f002 fd3c 	bl	80047c4 <HAL_RCC_MCOConfig>
}
 8001d4c:	bf00      	nop
 8001d4e:	3750      	adds	r7, #80	; 0x50
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000

08001d5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d62:	463b      	mov	r3, r7
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001d6e:	4b6e      	ldr	r3, [pc, #440]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001d70:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <MX_ADC1_Init+0x1d0>)
 8001d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d74:	4b6c      	ldr	r3, [pc, #432]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001d76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d7c:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d82:	4b69      	ldr	r3, [pc, #420]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d88:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d8e:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d96:	4b64      	ldr	r3, [pc, #400]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d9c:	4b62      	ldr	r3, [pc, #392]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001d9e:	4a64      	ldr	r2, [pc, #400]	; (8001f30 <MX_ADC1_Init+0x1d4>)
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001da2:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001da8:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001daa:	220c      	movs	r2, #12
 8001dac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001dae:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001db6:	4b5c      	ldr	r3, [pc, #368]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dbc:	485a      	ldr	r0, [pc, #360]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001dbe:	f000 ff47 	bl	8002c50 <HAL_ADC_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001dc8:	f000 fa8f 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd8:	463b      	mov	r3, r7
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4852      	ldr	r0, [pc, #328]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001dde:	f001 f881 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001de8:	f000 fa7f 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001dec:	230c      	movs	r3, #12
 8001dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001df0:	2302      	movs	r3, #2
 8001df2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df4:	463b      	mov	r3, r7
 8001df6:	4619      	mov	r1, r3
 8001df8:	484b      	ldr	r0, [pc, #300]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001dfa:	f001 f873 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001e04:	f000 fa71 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001e08:	230d      	movs	r3, #13
 8001e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e10:	463b      	mov	r3, r7
 8001e12:	4619      	mov	r1, r3
 8001e14:	4844      	ldr	r0, [pc, #272]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001e16:	f001 f865 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001e20:	f000 fa63 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e24:	2302      	movs	r3, #2
 8001e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4619      	mov	r1, r3
 8001e30:	483d      	ldr	r0, [pc, #244]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001e32:	f001 f857 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001e3c:	f000 fa55 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e40:	230a      	movs	r3, #10
 8001e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001e44:	2305      	movs	r3, #5
 8001e46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4836      	ldr	r0, [pc, #216]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001e4e:	f001 f849 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001e58:	f000 fa47 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001e5c:	230b      	movs	r3, #11
 8001e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001e60:	2306      	movs	r3, #6
 8001e62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e64:	463b      	mov	r3, r7
 8001e66:	4619      	mov	r1, r3
 8001e68:	482f      	ldr	r0, [pc, #188]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001e6a:	f001 f83b 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001e74:	f000 fa39 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001e78:	2309      	movs	r3, #9
 8001e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001e7c:	2307      	movs	r3, #7
 8001e7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e80:	463b      	mov	r3, r7
 8001e82:	4619      	mov	r1, r3
 8001e84:	4828      	ldr	r0, [pc, #160]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001e86:	f001 f82d 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001e90:	f000 fa2b 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e94:	2303      	movs	r3, #3
 8001e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4821      	ldr	r0, [pc, #132]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001ea2:	f001 f81f 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001eac:	f000 fa1d 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001eb0:	2306      	movs	r3, #6
 8001eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001eb4:	2309      	movs	r3, #9
 8001eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481a      	ldr	r0, [pc, #104]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001ebe:	f001 f811 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001ec8:	f000 fa0f 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ecc:	2307      	movs	r3, #7
 8001ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001ed0:	230a      	movs	r3, #10
 8001ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4813      	ldr	r0, [pc, #76]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001eda:	f001 f803 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001ee4:	f000 fa01 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001ee8:	230e      	movs	r3, #14
 8001eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001eec:	230b      	movs	r3, #11
 8001eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001ef6:	f000 fff5 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001f00:	f000 f9f3 	bl	80022ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001f04:	230f      	movs	r3, #15
 8001f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001f08:	230c      	movs	r3, #12
 8001f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_ADC1_Init+0x1cc>)
 8001f12:	f000 ffe7 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001f1c:	f000 f9e5 	bl	80022ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20001820 	.word	0x20001820
 8001f2c:	40012000 	.word	0x40012000
 8001f30:	0f000001 	.word	0x0f000001

08001f34 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_SDIO_SD_Init+0x38>)
 8001f3a:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <MX_SDIO_SD_Init+0x3c>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <MX_SDIO_SD_Init+0x38>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_SDIO_SD_Init+0x38>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <MX_SDIO_SD_Init+0x38>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_SDIO_SD_Init+0x38>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <MX_SDIO_SD_Init+0x38>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 1;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <MX_SDIO_SD_Init+0x38>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	20001bc0 	.word	0x20001bc0
 8001f70:	40012c00 	.word	0x40012c00

08001f74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001f7a:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <MX_SPI2_Init+0x68>)
 8001f7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001f80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001f94:	2202      	movs	r2, #2
 8001f96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001fa8:	2228      	movs	r2, #40	; 0x28
 8001faa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001fc0:	220a      	movs	r2, #10
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <MX_SPI2_Init+0x64>)
 8001fc6:	f004 f815 	bl	8005ff4 <HAL_SPI_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fd0:	f000 f98b 	bl	80022ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000073c 	.word	0x2000073c
 8001fdc:	40003800 	.word	0x40003800

08001fe0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fe6:	f107 030c 	add.w	r3, r7, #12
 8001fea:	2224      	movs	r2, #36	; 0x24
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f009 fb73 	bl	800b6da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <MX_TIM2_Init+0xa4>)
 8001ffe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002002:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <MX_TIM2_Init+0xa4>)
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <MX_TIM2_Init+0xa4>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <MX_TIM2_Init+0xa4>)
 8002012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002016:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <MX_TIM2_Init+0xa4>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <MX_TIM2_Init+0xa4>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002024:	2303      	movs	r3, #3
 8002026:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800202c:	2301      	movs	r3, #1
 800202e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800203c:	2301      	movs	r3, #1
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	4619      	mov	r1, r3
 800204e:	480d      	ldr	r0, [pc, #52]	; (8002084 <MX_TIM2_Init+0xa4>)
 8002050:	f004 fd73 	bl	8006b3a <HAL_TIM_Encoder_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800205a:	f000 f946 	bl	80022ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	4619      	mov	r1, r3
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <MX_TIM2_Init+0xa4>)
 800206c:	f005 f824 	bl	80070b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002076:	f000 f938 	bl	80022ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	3730      	adds	r7, #48	; 0x30
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20002c7c 	.word	0x20002c7c

08002088 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208e:	463b      	mov	r3, r7
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <MX_TIM6_Init+0x64>)
 8002098:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <MX_TIM6_Init+0x68>)
 800209a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <MX_TIM6_Init+0x64>)
 800209e:	f24a 4210 	movw	r2, #42000	; 0xa410
 80020a2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_TIM6_Init+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <MX_TIM6_Init+0x64>)
 80020ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80020b0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_TIM6_Init+0x64>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020b8:	480c      	ldr	r0, [pc, #48]	; (80020ec <MX_TIM6_Init+0x64>)
 80020ba:	f004 fcef 	bl	8006a9c <HAL_TIM_Base_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80020c4:	f000 f911 	bl	80022ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020c8:	2320      	movs	r3, #32
 80020ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020d0:	463b      	mov	r3, r7
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_TIM6_Init+0x64>)
 80020d6:	f004 ffef 	bl	80070b8 <HAL_TIMEx_MasterConfigSynchronization>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80020e0:	f000 f903 	bl	80022ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20001b60 	.word	0x20001b60
 80020f0:	40001000 	.word	0x40001000

080020f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <MX_DMA_Init+0x5c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <MX_DMA_Init+0x5c>)
 8002104:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_DMA_Init+0x5c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	2038      	movs	r0, #56	; 0x38
 800211c:	f001 fa5d 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002120:	2038      	movs	r0, #56	; 0x38
 8002122:	f001 fa76 	bl	8003612 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	203b      	movs	r0, #59	; 0x3b
 800212c:	f001 fa55 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002130:	203b      	movs	r0, #59	; 0x3b
 8002132:	f001 fa6e 	bl	8003612 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	2045      	movs	r0, #69	; 0x45
 800213c:	f001 fa4d 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002140:	2045      	movs	r0, #69	; 0x45
 8002142:	f001 fa66 	bl	8003612 <HAL_NVIC_EnableIRQ>

}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800

08002154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	4b46      	ldr	r3, [pc, #280]	; (8002288 <MX_GPIO_Init+0x134>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a45      	ldr	r2, [pc, #276]	; (8002288 <MX_GPIO_Init+0x134>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b43      	ldr	r3, [pc, #268]	; (8002288 <MX_GPIO_Init+0x134>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <MX_GPIO_Init+0x134>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a3e      	ldr	r2, [pc, #248]	; (8002288 <MX_GPIO_Init+0x134>)
 8002190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <MX_GPIO_Init+0x134>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	4b38      	ldr	r3, [pc, #224]	; (8002288 <MX_GPIO_Init+0x134>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a37      	ldr	r2, [pc, #220]	; (8002288 <MX_GPIO_Init+0x134>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b35      	ldr	r3, [pc, #212]	; (8002288 <MX_GPIO_Init+0x134>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	4b31      	ldr	r3, [pc, #196]	; (8002288 <MX_GPIO_Init+0x134>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a30      	ldr	r2, [pc, #192]	; (8002288 <MX_GPIO_Init+0x134>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <MX_GPIO_Init+0x134>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <MX_GPIO_Init+0x134>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a29      	ldr	r2, [pc, #164]	; (8002288 <MX_GPIO_Init+0x134>)
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b27      	ldr	r3, [pc, #156]	; (8002288 <MX_GPIO_Init+0x134>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Accel_CS_GPIO_Port, Accel_CS_Pin, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2110      	movs	r1, #16
 80021fa:	4824      	ldr	r0, [pc, #144]	; (800228c <MX_GPIO_Init+0x138>)
 80021fc:	f001 ff72 	bl	80040e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	f241 4104 	movw	r1, #5124	; 0x1404
 8002206:	4822      	ldr	r0, [pc, #136]	; (8002290 <MX_GPIO_Init+0x13c>)
 8002208:	f001 ff6c 	bl	80040e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Accel_CS_Pin */
  GPIO_InitStruct.Pin = Accel_CS_Pin;
 800220c:	2310      	movs	r3, #16
 800220e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Accel_CS_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	481a      	ldr	r0, [pc, #104]	; (800228c <MX_GPIO_Init+0x138>)
 8002224:	f001 fdac 	bl	8003d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gyro_CS_Pin Magnet_CS_Pin SPI_CS_FOC_Pin */
  GPIO_InitStruct.Pin = Gyro_CS_Pin|Magnet_CS_Pin|SPI_CS_FOC_Pin;
 8002228:	f241 4304 	movw	r3, #5124	; 0x1404
 800222c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	4813      	ldr	r0, [pc, #76]	; (8002290 <MX_GPIO_Init+0x13c>)
 8002242:	f001 fd9d 	bl	8003d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Det_Pin */
  GPIO_InitStruct.Pin = SD_Det_Pin;
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Det_GPIO_Port, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	480e      	ldr	r0, [pc, #56]	; (8002294 <MX_GPIO_Init+0x140>)
 800225a:	f001 fd91 	bl	8003d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800225e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	4804      	ldr	r0, [pc, #16]	; (800228c <MX_GPIO_Init+0x138>)
 800227c:	f001 fd80 	bl	8003d80 <HAL_GPIO_Init>

}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	40020000 	.word	0x40020000
 8002290:	40020400 	.word	0x40020400
 8002294:	40020800 	.word	0x40020800

08002298 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch){
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff f998 	bl	80015d8 <ITM_SendChar>
	return ch;
 80022a8:	687b      	ldr	r3, [r7, #4]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_write>:

int _write(int file, char *ptr, int len){
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e009      	b.n	80022d8 <_write+0x26>
		__io_putchar(*ptr++);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	60ba      	str	r2, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ffe3 	bl	8002298 <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbf1      	blt.n	80022c4 <_write+0x12>
	}
	return len;
 80022e0:	687b      	ldr	r3, [r7, #4]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <mount_card>:
	}
}

/* Mount SD Card */
FRESULT mount_card (FATFS *fs)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	//printf("mount\n");
	return f_mount(fs, "", 0);
 8002300:	2200      	movs	r2, #0
 8002302:	4904      	ldr	r1, [pc, #16]	; (8002314 <mount_card+0x1c>)
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f008 f9ab 	bl	800a660 <f_mount>
 800230a:	4603      	mov	r3, r0
      //if fresult <>
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	0800e250 	.word	0x0800e250

08002318 <update_file>:
	return fresult;
}

/*********************UPDATING an existing file ***************************/
FRESULT update_file(char *filename, char *data, char *timestamp, char *msec_stamp, FIL *fil, UINT *bw)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
	FRESULT fresult;

	strcat(data,timestamp);
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	68b8      	ldr	r0, [r7, #8]
 800232a:	f009 fed7 	bl	800c0dc <strcat>
	strcat(data,msec_stamp);
 800232e:	6839      	ldr	r1, [r7, #0]
 8002330:	68b8      	ldr	r0, [r7, #8]
 8002332:	f009 fed3 	bl	800c0dc <strcat>
	strcat(data,"\n");
 8002336:	68b8      	ldr	r0, [r7, #8]
 8002338:	f7fd ff4a 	bl	80001d0 <strlen>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4413      	add	r3, r2
 8002344:	4910      	ldr	r1, [pc, #64]	; (8002388 <update_file+0x70>)
 8002346:	461a      	mov	r2, r3
 8002348:	460b      	mov	r3, r1
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	8013      	strh	r3, [r2, #0]

	//printf("lib\n");
	/* Open the file with write access */
	fresult = f_open(fil, filename, FA_OPEN_APPEND | FA_WRITE);// FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 800234e:	2232      	movs	r2, #50	; 0x32
 8002350:	68f9      	ldr	r1, [r7, #12]
 8002352:	6a38      	ldr	r0, [r7, #32]
 8002354:	f008 f9ca 	bl	800a6ec <f_open>
 8002358:	4603      	mov	r3, r0
 800235a:	75fb      	strb	r3, [r7, #23]
	if (fresult!=FR_OK){
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <update_file+0x50>
		printf("update_file - f_open fodeu\n " );
 8002362:	480a      	ldr	r0, [pc, #40]	; (800238c <update_file+0x74>)
 8002364:	f009 fe1e 	bl	800bfa4 <iprintf>

	/* Move to offset to the end of the file */
	//fresult = f_lseek(fil, fil->fptr);

	/* write the string to the file */
	fresult = f_printf(fil, data); //pode precisar de um "\n"
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	6a38      	ldr	r0, [r7, #32]
 800236c:	f008 fe3e 	bl	800afec <f_printf>
 8002370:	4603      	mov	r3, r0
 8002372:	75fb      	strb	r3, [r7, #23]
	/*if (fresult!=FR_OK){
		printf("update_file - f_printf fodeu\n " );
	}*/
	fresult = f_close (fil);
 8002374:	6a38      	ldr	r0, [r7, #32]
 8002376:	f008 fd97 	bl	800aea8 <f_close>
 800237a:	4603      	mov	r3, r0
 800237c:	75fb      	strb	r3, [r7, #23]
	/*if(fresult != FR_OK){
		printf("update_file - f_close fodeu\n " );
	}*/
	return fresult;
 800237e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	0800e260 	.word	0x0800e260
 800238c:	0800e264 	.word	0x0800e264

08002390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_MspInit+0x4c>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <HAL_MspInit+0x4c>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_MspInit+0x4c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_MspInit+0x4c>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <HAL_MspInit+0x4c>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_MspInit+0x4c>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800

080023e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a49      	ldr	r2, [pc, #292]	; (8002524 <HAL_ADC_MspInit+0x144>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	f040 808c 	bne.w	800251c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_ADC_MspInit+0x148>)
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	4a46      	ldr	r2, [pc, #280]	; (8002528 <HAL_ADC_MspInit+0x148>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6453      	str	r3, [r2, #68]	; 0x44
 8002414:	4b44      	ldr	r3, [pc, #272]	; (8002528 <HAL_ADC_MspInit+0x148>)
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	4b40      	ldr	r3, [pc, #256]	; (8002528 <HAL_ADC_MspInit+0x148>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	4a3f      	ldr	r2, [pc, #252]	; (8002528 <HAL_ADC_MspInit+0x148>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6313      	str	r3, [r2, #48]	; 0x30
 8002430:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_ADC_MspInit+0x148>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	4b39      	ldr	r3, [pc, #228]	; (8002528 <HAL_ADC_MspInit+0x148>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	4a38      	ldr	r2, [pc, #224]	; (8002528 <HAL_ADC_MspInit+0x148>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6313      	str	r3, [r2, #48]	; 0x30
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <HAL_ADC_MspInit+0x148>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	4b32      	ldr	r3, [pc, #200]	; (8002528 <HAL_ADC_MspInit+0x148>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	4a31      	ldr	r2, [pc, #196]	; (8002528 <HAL_ADC_MspInit+0x148>)
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	6313      	str	r3, [r2, #48]	; 0x30
 8002468:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <HAL_ADC_MspInit+0x148>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = curr_u_Pin|curr_v_Pin|brk_pedal_Pin|acc_pedal_Pin 
 8002474:	233f      	movs	r3, #63	; 0x3f
 8002476:	61fb      	str	r3, [r7, #28]
                          |motor_voltage_v_Pin|motor_voltage_w_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002478:	2303      	movs	r3, #3
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	4619      	mov	r1, r3
 8002486:	4829      	ldr	r0, [pc, #164]	; (800252c <HAL_ADC_MspInit+0x14c>)
 8002488:	f001 fc7a 	bl	8003d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = curr_w_Pin|DC_Bus_Voltage_Pin|DC_Current_Pin|motor_voltage_u_Pin;
 800248c:	23cc      	movs	r3, #204	; 0xcc
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002490:	2303      	movs	r3, #3
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	4619      	mov	r1, r3
 800249e:	4824      	ldr	r0, [pc, #144]	; (8002530 <HAL_ADC_MspInit+0x150>)
 80024a0:	f001 fc6e 	bl	8003d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024a4:	2303      	movs	r3, #3
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a8:	2303      	movs	r3, #3
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	481f      	ldr	r0, [pc, #124]	; (8002534 <HAL_ADC_MspInit+0x154>)
 80024b8:	f001 fc62 	bl	8003d80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80024bc:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <HAL_ADC_MspInit+0x158>)
 80024be:	4a1f      	ldr	r2, [pc, #124]	; (800253c <HAL_ADC_MspInit+0x15c>)
 80024c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80024c2:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <HAL_ADC_MspInit+0x158>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_ADC_MspInit+0x158>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <HAL_ADC_MspInit+0x158>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <HAL_ADC_MspInit+0x158>)
 80024d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <HAL_ADC_MspInit+0x158>)
 80024de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024e4:	4b14      	ldr	r3, [pc, #80]	; (8002538 <HAL_ADC_MspInit+0x158>)
 80024e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_ADC_MspInit+0x158>)
 80024ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024f4:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_ADC_MspInit+0x158>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_ADC_MspInit+0x158>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002500:	480d      	ldr	r0, [pc, #52]	; (8002538 <HAL_ADC_MspInit+0x158>)
 8002502:	f001 f8a1 	bl	8003648 <HAL_DMA_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800250c:	f7ff feed 	bl	80022ea <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_ADC_MspInit+0x158>)
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_ADC_MspInit+0x158>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800251c:	bf00      	nop
 800251e:	3730      	adds	r7, #48	; 0x30
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40012000 	.word	0x40012000
 8002528:	40023800 	.word	0x40023800
 800252c:	40020800 	.word	0x40020800
 8002530:	40020000 	.word	0x40020000
 8002534:	40020400 	.word	0x40020400
 8002538:	20001a70 	.word	0x20001a70
 800253c:	40026410 	.word	0x40026410

08002540 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a70      	ldr	r2, [pc, #448]	; (8002720 <HAL_SD_MspInit+0x1e0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	f040 80da 	bne.w	8002718 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	4b6e      	ldr	r3, [pc, #440]	; (8002724 <HAL_SD_MspInit+0x1e4>)
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	4a6d      	ldr	r2, [pc, #436]	; (8002724 <HAL_SD_MspInit+0x1e4>)
 800256e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002572:	6453      	str	r3, [r2, #68]	; 0x44
 8002574:	4b6b      	ldr	r3, [pc, #428]	; (8002724 <HAL_SD_MspInit+0x1e4>)
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	4b67      	ldr	r3, [pc, #412]	; (8002724 <HAL_SD_MspInit+0x1e4>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4a66      	ldr	r2, [pc, #408]	; (8002724 <HAL_SD_MspInit+0x1e4>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6313      	str	r3, [r2, #48]	; 0x30
 8002590:	4b64      	ldr	r3, [pc, #400]	; (8002724 <HAL_SD_MspInit+0x1e4>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	4b60      	ldr	r3, [pc, #384]	; (8002724 <HAL_SD_MspInit+0x1e4>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	4a5f      	ldr	r2, [pc, #380]	; (8002724 <HAL_SD_MspInit+0x1e4>)
 80025a6:	f043 0308 	orr.w	r3, r3, #8
 80025aa:	6313      	str	r3, [r2, #48]	; 0x30
 80025ac:	4b5d      	ldr	r3, [pc, #372]	; (8002724 <HAL_SD_MspInit+0x1e4>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c2:	2301      	movs	r3, #1
 80025c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80025ca:	230c      	movs	r3, #12
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	4619      	mov	r1, r3
 80025d4:	4854      	ldr	r0, [pc, #336]	; (8002728 <HAL_SD_MspInit+0x1e8>)
 80025d6:	f001 fbd3 	bl	8003d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80025da:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80025de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80025ec:	230c      	movs	r3, #12
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	484c      	ldr	r0, [pc, #304]	; (8002728 <HAL_SD_MspInit+0x1e8>)
 80025f8:	f001 fbc2 	bl	8003d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025fc:	2304      	movs	r3, #4
 80025fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002604:	2301      	movs	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800260c:	230c      	movs	r3, #12
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	4619      	mov	r1, r3
 8002616:	4845      	ldr	r0, [pc, #276]	; (800272c <HAL_SD_MspInit+0x1ec>)
 8002618:	f001 fbb2 	bl	8003d80 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800261c:	4b44      	ldr	r3, [pc, #272]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 800261e:	4a45      	ldr	r2, [pc, #276]	; (8002734 <HAL_SD_MspInit+0x1f4>)
 8002620:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002622:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 8002624:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002628:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002630:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002636:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 8002638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800263c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800263e:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 8002640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002644:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002646:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 8002648:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800264c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800264e:	4b38      	ldr	r3, [pc, #224]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 8002650:	2220      	movs	r2, #32
 8002652:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002654:	4b36      	ldr	r3, [pc, #216]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 8002656:	2200      	movs	r2, #0
 8002658:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800265a:	4b35      	ldr	r3, [pc, #212]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 800265c:	2204      	movs	r2, #4
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002660:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 8002662:	2203      	movs	r2, #3
 8002664:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002666:	4b32      	ldr	r3, [pc, #200]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 8002668:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800266e:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 8002670:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002676:	482e      	ldr	r0, [pc, #184]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 8002678:	f000 ffe6 	bl	8003648 <HAL_DMA_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002682:	f7ff fe32 	bl	80022ea <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a29      	ldr	r2, [pc, #164]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
 800268c:	4a28      	ldr	r2, [pc, #160]	; (8002730 <HAL_SD_MspInit+0x1f0>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 8002694:	4a29      	ldr	r2, [pc, #164]	; (800273c <HAL_SD_MspInit+0x1fc>)
 8002696:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 800269a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800269e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026a2:	2240      	movs	r2, #64	; 0x40
 80026a4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026b2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026b4:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ba:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026c2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80026c4:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026c6:	2220      	movs	r2, #32
 80026c8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026d2:	2204      	movs	r2, #4
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026d6:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026d8:	2203      	movs	r2, #3
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80026dc:	4b16      	ldr	r3, [pc, #88]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80026ec:	4812      	ldr	r0, [pc, #72]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 80026ee:	f000 ffab 	bl	8003648 <HAL_DMA_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80026f8:	f7ff fdf7 	bl	80022ea <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c
 8002702:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <HAL_SD_MspInit+0x1f8>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	2031      	movs	r0, #49	; 0x31
 800270e:	f000 ff64 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002712:	2031      	movs	r0, #49	; 0x31
 8002714:	f000 ff7d 	bl	8003612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002718:	bf00      	nop
 800271a:	3728      	adds	r7, #40	; 0x28
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40012c00 	.word	0x40012c00
 8002724:	40023800 	.word	0x40023800
 8002728:	40020800 	.word	0x40020800
 800272c:	40020c00 	.word	0x40020c00
 8002730:	200006d8 	.word	0x200006d8
 8002734:	40026458 	.word	0x40026458
 8002738:	20001b00 	.word	0x20001b00
 800273c:	400264a0 	.word	0x400264a0

08002740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <HAL_SPI_MspInit+0x84>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d12c      	bne.n	80027bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_SPI_MspInit+0x88>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_SPI_MspInit+0x88>)
 800276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_SPI_MspInit+0x88>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_SPI_MspInit+0x88>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <HAL_SPI_MspInit+0x88>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_SPI_MspInit+0x88>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800279a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800279e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ac:	2305      	movs	r3, #5
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4805      	ldr	r0, [pc, #20]	; (80027cc <HAL_SPI_MspInit+0x8c>)
 80027b8:	f001 fae2 	bl	8003d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027bc:	bf00      	nop
 80027be:	3728      	adds	r7, #40	; 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40003800 	.word	0x40003800
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40020400 	.word	0x40020400

080027d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d12b      	bne.n	800284a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_TIM_Encoder_MspInit+0x84>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a16      	ldr	r2, [pc, #88]	; (8002854 <HAL_TIM_Encoder_MspInit+0x84>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_TIM_Encoder_MspInit+0x84>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_TIM_Encoder_MspInit+0x84>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <HAL_TIM_Encoder_MspInit+0x84>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_TIM_Encoder_MspInit+0x84>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin;
 800282a:	2303      	movs	r3, #3
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800283a:	2301      	movs	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	4804      	ldr	r0, [pc, #16]	; (8002858 <HAL_TIM_Encoder_MspInit+0x88>)
 8002846:	f001 fa9b 	bl	8003d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800284a:	bf00      	nop
 800284c:	3728      	adds	r7, #40	; 0x28
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	40020000 	.word	0x40020000

0800285c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0e      	ldr	r2, [pc, #56]	; (80028a4 <HAL_TIM_Base_MspInit+0x48>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d115      	bne.n	800289a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002878:	f043 0310 	orr.w	r3, r3, #16
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	2036      	movs	r0, #54	; 0x36
 8002890:	f000 fea3 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002894:	2036      	movs	r0, #54	; 0x36
 8002896:	f000 febc 	bl	8003612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40001000 	.word	0x40001000
 80028a8:	40023800 	.word	0x40023800

080028ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028be:	e7fe      	b.n	80028be <HardFault_Handler+0x4>

080028c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <MemManage_Handler+0x4>

080028c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ca:	e7fe      	b.n	80028ca <BusFault_Handler+0x4>

080028cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <UsageFault_Handler+0x4>

080028d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


	SystemTick += TICK_RATE; // 1 ms tick count
 8002900:	4b0e      	ldr	r3, [pc, #56]	; (800293c <SysTick_Handler+0x40>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	4a0d      	ldr	r2, [pc, #52]	; (800293c <SysTick_Handler+0x40>)
 8002908:	6013      	str	r3, [r2, #0]

			  __unix_ms += TICK_RATE;
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <SysTick_Handler+0x44>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3301      	adds	r3, #1
 8002910:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <SysTick_Handler+0x44>)
 8002912:	6013      	str	r3, [r2, #0]

			  if (__unix_ms >= 1000)
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <SysTick_Handler+0x44>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800291c:	d30a      	bcc.n	8002934 <SysTick_Handler+0x38>
			  {
			    __unix_ms -= 1000;
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <SysTick_Handler+0x44>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002926:	4a06      	ldr	r2, [pc, #24]	; (8002940 <SysTick_Handler+0x44>)
 8002928:	6013      	str	r3, [r2, #0]
			    __unix_sec++;
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <SysTick_Handler+0x48>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3301      	adds	r3, #1
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <SysTick_Handler+0x48>)
 8002932:	6013      	str	r3, [r2, #0]
			  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002934:	f000 f94a 	bl	8002bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000270 	.word	0x20000270
 8002940:	20000274 	.word	0x20000274
 8002944:	20000278 	.word	0x20000278

08002948 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <SDIO_IRQHandler+0x10>)
 800294e:	f002 fabd 	bl	8004ecc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20001bc0 	.word	0x20001bc0

0800295c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <TIM6_DAC_IRQHandler+0x10>)
 8002962:	f004 f9b3 	bl	8006ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20001b60 	.word	0x20001b60

08002970 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <DMA2_Stream0_IRQHandler+0x10>)
 8002976:	f000 ff8f 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20001a70 	.word	0x20001a70

08002984 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <DMA2_Stream3_IRQHandler+0x10>)
 800298a:	f000 ff85 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200006d8 	.word	0x200006d8

08002998 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <DMA2_Stream6_IRQHandler+0x10>)
 800299e:	f000 ff7b 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20001b00 	.word	0x20001b00

080029ac <_read>:
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	e00a      	b.n	80029d4 <_read+0x28>
 80029be:	f3af 8000 	nop.w
 80029c2:	4601      	mov	r1, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	60ba      	str	r2, [r7, #8]
 80029ca:	b2ca      	uxtb	r2, r1
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dbf0      	blt.n	80029be <_read+0x12>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <_close>:
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <_fstat>:
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	2300      	movs	r3, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <_isatty>:
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	2301      	movs	r3, #1
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <_lseek>:
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	2300      	movs	r3, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <_sbrk>:
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <_sbrk+0x50>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <_sbrk+0x16>
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <_sbrk+0x50>)
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <_sbrk+0x54>)
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <_sbrk+0x50>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <_sbrk+0x50>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	466a      	mov	r2, sp
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d907      	bls.n	8002a8a <_sbrk+0x3a>
 8002a7a:	f008 fdf9 	bl	800b670 <__errno>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	230c      	movs	r3, #12
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
 8002a88:	e006      	b.n	8002a98 <_sbrk+0x48>
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <_sbrk+0x50>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <_sbrk+0x50>)
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	2000028c 	.word	0x2000028c
 8002aa4:	20006e00 	.word	0x20006e00

08002aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <SystemInit+0x28>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	4a07      	ldr	r2, [pc, #28]	; (8002ad0 <SystemInit+0x28>)
 8002ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <SystemInit+0x28>)
 8002abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ac2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <Reset_Handler>:
 8002ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b0c <LoopFillZerobss+0x14>
 8002ad8:	2100      	movs	r1, #0
 8002ada:	e003      	b.n	8002ae4 <LoopCopyDataInit>

08002adc <CopyDataInit>:
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <LoopFillZerobss+0x18>)
 8002ade:	585b      	ldr	r3, [r3, r1]
 8002ae0:	5043      	str	r3, [r0, r1]
 8002ae2:	3104      	adds	r1, #4

08002ae4 <LoopCopyDataInit>:
 8002ae4:	480b      	ldr	r0, [pc, #44]	; (8002b14 <LoopFillZerobss+0x1c>)
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <LoopFillZerobss+0x20>)
 8002ae8:	1842      	adds	r2, r0, r1
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d3f6      	bcc.n	8002adc <CopyDataInit>
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <LoopFillZerobss+0x24>)
 8002af0:	e002      	b.n	8002af8 <LoopFillZerobss>

08002af2 <FillZerobss>:
 8002af2:	2300      	movs	r3, #0
 8002af4:	f842 3b04 	str.w	r3, [r2], #4

08002af8 <LoopFillZerobss>:
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <LoopFillZerobss+0x28>)
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d3f9      	bcc.n	8002af2 <FillZerobss>
 8002afe:	f7ff ffd3 	bl	8002aa8 <SystemInit>
 8002b02:	f008 fdbb 	bl	800b67c <__libc_init_array>
 8002b06:	f7fe fded 	bl	80016e4 <main>
 8002b0a:	4770      	bx	lr
 8002b0c:	20020000 	.word	0x20020000
 8002b10:	0800ea08 	.word	0x0800ea08
 8002b14:	20000000 	.word	0x20000000
 8002b18:	20000254 	.word	0x20000254
 8002b1c:	20000254 	.word	0x20000254
 8002b20:	20006e00 	.word	0x20006e00

08002b24 <ADC_IRQHandler>:
 8002b24:	e7fe      	b.n	8002b24 <ADC_IRQHandler>
	...

08002b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0d      	ldr	r2, [pc, #52]	; (8002b68 <HAL_Init+0x40>)
 8002b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_Init+0x40>)
 8002b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <HAL_Init+0x40>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b50:	2003      	movs	r0, #3
 8002b52:	f000 fd37 	bl	80035c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f000 f808 	bl	8002b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b5c:	f7ff fc18 	bl	8002390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023c00 	.word	0x40023c00

08002b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_InitTick+0x54>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_InitTick+0x58>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fd4f 	bl	800362e <HAL_SYSTICK_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00e      	b.n	8002bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d80a      	bhi.n	8002bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	f000 fd17 	bl	80035da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bac:	4a06      	ldr	r2, [pc, #24]	; (8002bc8 <HAL_InitTick+0x5c>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e000      	b.n	8002bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000078 	.word	0x20000078
 8002bc4:	20000080 	.word	0x20000080
 8002bc8:	2000007c 	.word	0x2000007c

08002bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_IncTick+0x20>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000080 	.word	0x20000080
 8002bf0:	20004d88 	.word	0x20004d88

08002bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_GetTick+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20004d88 	.word	0x20004d88

08002c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c14:	f7ff ffee 	bl	8002bf4 <HAL_GetTick>
 8002c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d005      	beq.n	8002c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_Delay+0x40>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c32:	bf00      	nop
 8002c34:	f7ff ffde 	bl	8002bf4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d8f7      	bhi.n	8002c34 <HAL_Delay+0x28>
  {
  }
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000080 	.word	0x20000080

08002c50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e033      	b.n	8002cce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fbb6 	bl	80023e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d118      	bne.n	8002cc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c96:	f023 0302 	bic.w	r3, r3, #2
 8002c9a:	f043 0202 	orr.w	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa40 	bl	8003128 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8002cbe:	e001      	b.n	8002cc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_Start_DMA+0x1e>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0cc      	b.n	8002e90 <HAL_ADC_Start_DMA+0x1b8>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d018      	beq.n	8002d3e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d1c:	4b5e      	ldr	r3, [pc, #376]	; (8002e98 <HAL_ADC_Start_DMA+0x1c0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5e      	ldr	r2, [pc, #376]	; (8002e9c <HAL_ADC_Start_DMA+0x1c4>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0c9a      	lsrs	r2, r3, #18
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d30:	e002      	b.n	8002d38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f9      	bne.n	8002d32 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	f040 80a0 	bne.w	8002e8e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8c:	d106      	bne.n	8002d9c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f023 0206 	bic.w	r2, r3, #6
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
 8002d9a:	e002      	b.n	8002da2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_ADC_Start_DMA+0x1c8>)
 8002dac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	4a3c      	ldr	r2, [pc, #240]	; (8002ea4 <HAL_ADC_Start_DMA+0x1cc>)
 8002db4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	4a3b      	ldr	r2, [pc, #236]	; (8002ea8 <HAL_ADC_Start_DMA+0x1d0>)
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	4a3a      	ldr	r2, [pc, #232]	; (8002eac <HAL_ADC_Start_DMA+0x1d4>)
 8002dc4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002dce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002dde:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	334c      	adds	r3, #76	; 0x4c
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f000 fcd0 	bl	80037a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d12a      	bne.n	8002e66 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <HAL_ADC_Start_DMA+0x1d8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d015      	beq.n	8002e46 <HAL_ADC_Start_DMA+0x16e>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a25      	ldr	r2, [pc, #148]	; (8002eb4 <HAL_ADC_Start_DMA+0x1dc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d105      	bne.n	8002e30 <HAL_ADC_Start_DMA+0x158>
 8002e24:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_ADC_Start_DMA+0x1c8>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <HAL_ADC_Start_DMA+0x1e0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d129      	bne.n	8002e8e <HAL_ADC_Start_DMA+0x1b6>
 8002e3a:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_ADC_Start_DMA+0x1c8>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	2b0f      	cmp	r3, #15
 8002e44:	d823      	bhi.n	8002e8e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d11c      	bne.n	8002e8e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	e013      	b.n	8002e8e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <HAL_ADC_Start_DMA+0x1d8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d10e      	bne.n	8002e8e <HAL_ADC_Start_DMA+0x1b6>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e8c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000078 	.word	0x20000078
 8002e9c:	431bde83 	.word	0x431bde83
 8002ea0:	40012300 	.word	0x40012300
 8002ea4:	08003321 	.word	0x08003321
 8002ea8:	080033db 	.word	0x080033db
 8002eac:	080033f7 	.word	0x080033f7
 8002eb0:	40012000 	.word	0x40012000
 8002eb4:	40012100 	.word	0x40012100
 8002eb8:	40012200 	.word	0x40012200

08002ebc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1c>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e105      	b.n	800310c <HAL_ADC_ConfigChannel+0x228>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b09      	cmp	r3, #9
 8002f0e:	d925      	bls.n	8002f5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68d9      	ldr	r1, [r3, #12]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	3b1e      	subs	r3, #30
 8002f26:	2207      	movs	r2, #7
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	400a      	ands	r2, r1
 8002f34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68d9      	ldr	r1, [r3, #12]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	4603      	mov	r3, r0
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4403      	add	r3, r0
 8002f4e:	3b1e      	subs	r3, #30
 8002f50:	409a      	lsls	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	e022      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6919      	ldr	r1, [r3, #16]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	2207      	movs	r2, #7
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43da      	mvns	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6919      	ldr	r1, [r3, #16]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	4618      	mov	r0, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4403      	add	r3, r0
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d824      	bhi.n	8002ff4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	3b05      	subs	r3, #5
 8002fbc:	221f      	movs	r2, #31
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	400a      	ands	r2, r1
 8002fca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	4618      	mov	r0, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3b05      	subs	r3, #5
 8002fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ff2:	e04c      	b.n	800308e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d824      	bhi.n	8003046 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	3b23      	subs	r3, #35	; 0x23
 800300e:	221f      	movs	r2, #31
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43da      	mvns	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	400a      	ands	r2, r1
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	4618      	mov	r0, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	3b23      	subs	r3, #35	; 0x23
 8003038:	fa00 f203 	lsl.w	r2, r0, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
 8003044:	e023      	b.n	800308e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	3b41      	subs	r3, #65	; 0x41
 8003058:	221f      	movs	r2, #31
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	400a      	ands	r2, r1
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	4618      	mov	r0, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	3b41      	subs	r3, #65	; 0x41
 8003082:	fa00 f203 	lsl.w	r2, r0, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_ADC_ConfigChannel+0x234>)
 8003090:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a21      	ldr	r2, [pc, #132]	; (800311c <HAL_ADC_ConfigChannel+0x238>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d109      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1cc>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b12      	cmp	r3, #18
 80030a2:	d105      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a19      	ldr	r2, [pc, #100]	; (800311c <HAL_ADC_ConfigChannel+0x238>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d123      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x21e>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b10      	cmp	r3, #16
 80030c0:	d003      	beq.n	80030ca <HAL_ADC_ConfigChannel+0x1e6>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b11      	cmp	r3, #17
 80030c8:	d11b      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d111      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_ADC_ConfigChannel+0x23c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a10      	ldr	r2, [pc, #64]	; (8003124 <HAL_ADC_ConfigChannel+0x240>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	0c9a      	lsrs	r2, r3, #18
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030f4:	e002      	b.n	80030fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f9      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40012300 	.word	0x40012300
 800311c:	40012000 	.word	0x40012000
 8003120:	20000078 	.word	0x20000078
 8003124:	431bde83 	.word	0x431bde83

08003128 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003130:	4b79      	ldr	r3, [pc, #484]	; (8003318 <ADC_Init+0x1f0>)
 8003132:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800315c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	021a      	lsls	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6899      	ldr	r1, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	4a58      	ldr	r2, [pc, #352]	; (800331c <ADC_Init+0x1f4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d022      	beq.n	8003206 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6899      	ldr	r1, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6899      	ldr	r1, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	e00f      	b.n	8003226 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003224:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0202 	bic.w	r2, r2, #2
 8003234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	7e1b      	ldrb	r3, [r3, #24]
 8003240:	005a      	lsls	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01b      	beq.n	800328c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003262:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003272:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	3b01      	subs	r3, #1
 8003280:	035a      	lsls	r2, r3, #13
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e007      	b.n	800329c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	051a      	lsls	r2, r3, #20
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6899      	ldr	r1, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032de:	025a      	lsls	r2, r3, #9
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6899      	ldr	r1, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	029a      	lsls	r2, r3, #10
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	609a      	str	r2, [r3, #8]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40012300 	.word	0x40012300
 800331c:	0f000001 	.word	0x0f000001

08003320 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003336:	2b00      	cmp	r3, #0
 8003338:	d13c      	bne.n	80033b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d12b      	bne.n	80033ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003358:	2b00      	cmp	r3, #0
 800335a:	d127      	bne.n	80033ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003366:	2b00      	cmp	r3, #0
 8003368:	d006      	beq.n	8003378 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003374:	2b00      	cmp	r3, #0
 8003376:	d119      	bne.n	80033ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0220 	bic.w	r2, r2, #32
 8003386:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7fe f93b 	bl	8001628 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033b2:	e00e      	b.n	80033d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7ff fd85 	bl	8002ed0 <HAL_ADC_ErrorCallback>
}
 80033c6:	e004      	b.n	80033d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff fd67 	bl	8002ebc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2240      	movs	r2, #64	; 0x40
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f043 0204 	orr.w	r2, r3, #4
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff fd5a 	bl	8002ed0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <__NVIC_SetPriorityGrouping>:
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <__NVIC_SetPriorityGrouping+0x44>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003440:	4013      	ands	r3, r2
 8003442:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800344c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003456:	4a04      	ldr	r2, [pc, #16]	; (8003468 <__NVIC_SetPriorityGrouping+0x44>)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	60d3      	str	r3, [r2, #12]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_GetPriorityGrouping>:
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <__NVIC_GetPriorityGrouping+0x18>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	f003 0307 	and.w	r3, r3, #7
}
 800347a:	4618      	mov	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <__NVIC_EnableIRQ>:
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	2b00      	cmp	r3, #0
 8003498:	db0b      	blt.n	80034b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	4907      	ldr	r1, [pc, #28]	; (80034c0 <__NVIC_EnableIRQ+0x38>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2001      	movs	r0, #1
 80034aa:	fa00 f202 	lsl.w	r2, r0, r2
 80034ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000e100 	.word	0xe000e100

080034c4 <__NVIC_SetPriority>:
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	6039      	str	r1, [r7, #0]
 80034ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db0a      	blt.n	80034ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	490c      	ldr	r1, [pc, #48]	; (8003510 <__NVIC_SetPriority+0x4c>)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	440b      	add	r3, r1
 80034e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034ec:	e00a      	b.n	8003504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4908      	ldr	r1, [pc, #32]	; (8003514 <__NVIC_SetPriority+0x50>)
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	3b04      	subs	r3, #4
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	440b      	add	r3, r1
 8003502:	761a      	strb	r2, [r3, #24]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000e100 	.word	0xe000e100
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <NVIC_EncodePriority>:
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f1c3 0307 	rsb	r3, r3, #7
 8003532:	2b04      	cmp	r3, #4
 8003534:	bf28      	it	cs
 8003536:	2304      	movcs	r3, #4
 8003538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3304      	adds	r3, #4
 800353e:	2b06      	cmp	r3, #6
 8003540:	d902      	bls.n	8003548 <NVIC_EncodePriority+0x30>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3b03      	subs	r3, #3
 8003546:	e000      	b.n	800354a <NVIC_EncodePriority+0x32>
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	401a      	ands	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003560:	f04f 31ff 	mov.w	r1, #4294967295
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	43d9      	mvns	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	4313      	orrs	r3, r2
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <SysTick_Config>:
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003590:	d301      	bcc.n	8003596 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003592:	2301      	movs	r3, #1
 8003594:	e00f      	b.n	80035b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <SysTick_Config+0x40>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359e:	210f      	movs	r1, #15
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	f7ff ff8e 	bl	80034c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <SysTick_Config+0x40>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <SysTick_Config+0x40>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	e000e010 	.word	0xe000e010

080035c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff29 	bl	8003424 <__NVIC_SetPriorityGrouping>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035ec:	f7ff ff3e 	bl	800346c <__NVIC_GetPriorityGrouping>
 80035f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	6978      	ldr	r0, [r7, #20]
 80035f8:	f7ff ff8e 	bl	8003518 <NVIC_EncodePriority>
 80035fc:	4602      	mov	r2, r0
 80035fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff5d 	bl	80034c4 <__NVIC_SetPriority>
}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	4603      	mov	r3, r0
 800361a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff ff31 	bl	8003488 <__NVIC_EnableIRQ>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ffa2 	bl	8003580 <SysTick_Config>
 800363c:	4603      	mov	r3, r0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003654:	f7ff face 	bl	8002bf4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e099      	b.n	8003798 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003684:	e00f      	b.n	80036a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003686:	f7ff fab5 	bl	8002bf4 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b05      	cmp	r3, #5
 8003692:	d908      	bls.n	80036a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2203      	movs	r2, #3
 800369e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e078      	b.n	8003798 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e8      	bne.n	8003686 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <HAL_DMA_Init+0x158>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d107      	bne.n	8003710 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	4313      	orrs	r3, r2
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f023 0307 	bic.w	r3, r3, #7
 8003726:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	2b04      	cmp	r3, #4
 8003738:	d117      	bne.n	800376a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00e      	beq.n	800376a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fa9d 	bl	8003c8c <DMA_CheckFifoParam>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2240      	movs	r2, #64	; 0x40
 800375c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003766:	2301      	movs	r3, #1
 8003768:	e016      	b.n	8003798 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa54 	bl	8003c20 <DMA_CalcBaseAndBitshift>
 8003778:	4603      	mov	r3, r0
 800377a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	223f      	movs	r2, #63	; 0x3f
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	f010803f 	.word	0xf010803f

080037a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_DMA_Start_IT+0x26>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e040      	b.n	800384c <HAL_DMA_Start_IT+0xa8>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d12f      	bne.n	800383e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2202      	movs	r2, #2
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f9e6 	bl	8003bc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	223f      	movs	r2, #63	; 0x3f
 80037fe:	409a      	lsls	r2, r3
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0216 	orr.w	r2, r2, #22
 8003812:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0208 	orr.w	r2, r2, #8
 800382a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e005      	b.n	800384a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003846:	2302      	movs	r3, #2
 8003848:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800384a:	7dfb      	ldrb	r3, [r7, #23]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d004      	beq.n	8003872 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e00c      	b.n	800388c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2205      	movs	r2, #5
 8003876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038a4:	4b92      	ldr	r3, [pc, #584]	; (8003af0 <HAL_DMA_IRQHandler+0x258>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a92      	ldr	r2, [pc, #584]	; (8003af4 <HAL_DMA_IRQHandler+0x25c>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0a9b      	lsrs	r3, r3, #10
 80038b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	2208      	movs	r2, #8
 80038c4:	409a      	lsls	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01a      	beq.n	8003904 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0204 	bic.w	r2, r2, #4
 80038ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	2208      	movs	r2, #8
 80038f2:	409a      	lsls	r2, r3
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	f043 0201 	orr.w	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003908:	2201      	movs	r2, #1
 800390a:	409a      	lsls	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d012      	beq.n	800393a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	2201      	movs	r2, #1
 8003928:	409a      	lsls	r2, r3
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	f043 0202 	orr.w	r2, r3, #2
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	2204      	movs	r2, #4
 8003940:	409a      	lsls	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d012      	beq.n	8003970 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00b      	beq.n	8003970 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395c:	2204      	movs	r2, #4
 800395e:	409a      	lsls	r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	f043 0204 	orr.w	r2, r3, #4
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	2210      	movs	r2, #16
 8003976:	409a      	lsls	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d043      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d03c      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	2210      	movs	r2, #16
 8003994:	409a      	lsls	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d018      	beq.n	80039da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d108      	bne.n	80039c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d024      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	4798      	blx	r3
 80039c6:	e01f      	b.n	8003a08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
 80039d8:	e016      	b.n	8003a08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0208 	bic.w	r2, r2, #8
 80039f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 808e 	beq.w	8003b36 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8086 	beq.w	8003b36 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	2220      	movs	r2, #32
 8003a30:	409a      	lsls	r2, r3
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d136      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0216 	bic.w	r2, r2, #22
 8003a50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d103      	bne.n	8003a72 <HAL_DMA_IRQHandler+0x1da>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0208 	bic.w	r2, r2, #8
 8003a80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a86:	223f      	movs	r2, #63	; 0x3f
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d07d      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
        }
        return;
 8003aae:	e078      	b.n	8003ba2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01c      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d108      	bne.n	8003ade <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d030      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
 8003adc:	e02b      	b.n	8003b36 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d027      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
 8003aee:	e022      	b.n	8003b36 <HAL_DMA_IRQHandler+0x29e>
 8003af0:	20000078 	.word	0x20000078
 8003af4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10f      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0210 	bic.w	r2, r2, #16
 8003b14:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d032      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d022      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2205      	movs	r2, #5
 8003b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0201 	bic.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	3301      	adds	r3, #1
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d307      	bcc.n	8003b7e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f2      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x2ca>
 8003b7c:	e000      	b.n	8003b80 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b7e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
 8003ba0:	e000      	b.n	8003ba4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ba2:	bf00      	nop
    }
  }
}
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop

08003bac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003be0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d108      	bne.n	8003c04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c02:	e007      	b.n	8003c14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	60da      	str	r2, [r3, #12]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	3b10      	subs	r3, #16
 8003c30:	4a14      	ldr	r2, [pc, #80]	; (8003c84 <DMA_CalcBaseAndBitshift+0x64>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c3a:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <DMA_CalcBaseAndBitshift+0x68>)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d909      	bls.n	8003c62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c60:	e007      	b.n	8003c72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c6a:	f023 0303 	bic.w	r3, r3, #3
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	aaaaaaab 	.word	0xaaaaaaab
 8003c88:	0800e2dc 	.word	0x0800e2dc

08003c8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d11f      	bne.n	8003ce6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d855      	bhi.n	8003d58 <DMA_CheckFifoParam+0xcc>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <DMA_CheckFifoParam+0x28>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003cd7 	.word	0x08003cd7
 8003cbc:	08003cc5 	.word	0x08003cc5
 8003cc0:	08003d59 	.word	0x08003d59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d045      	beq.n	8003d5c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd4:	e042      	b.n	8003d5c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cde:	d13f      	bne.n	8003d60 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce4:	e03c      	b.n	8003d60 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cee:	d121      	bne.n	8003d34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d836      	bhi.n	8003d64 <DMA_CheckFifoParam+0xd8>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <DMA_CheckFifoParam+0x70>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d0d 	.word	0x08003d0d
 8003d00:	08003d13 	.word	0x08003d13
 8003d04:	08003d0d 	.word	0x08003d0d
 8003d08:	08003d25 	.word	0x08003d25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d10:	e02f      	b.n	8003d72 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d024      	beq.n	8003d68 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d22:	e021      	b.n	8003d68 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d2c:	d11e      	bne.n	8003d6c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d32:	e01b      	b.n	8003d6c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d902      	bls.n	8003d40 <DMA_CheckFifoParam+0xb4>
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d003      	beq.n	8003d46 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d3e:	e018      	b.n	8003d72 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      break;
 8003d44:	e015      	b.n	8003d72 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00e      	beq.n	8003d70 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      break;
 8003d56:	e00b      	b.n	8003d70 <DMA_CheckFifoParam+0xe4>
      break;
 8003d58:	bf00      	nop
 8003d5a:	e00a      	b.n	8003d72 <DMA_CheckFifoParam+0xe6>
      break;
 8003d5c:	bf00      	nop
 8003d5e:	e008      	b.n	8003d72 <DMA_CheckFifoParam+0xe6>
      break;
 8003d60:	bf00      	nop
 8003d62:	e006      	b.n	8003d72 <DMA_CheckFifoParam+0xe6>
      break;
 8003d64:	bf00      	nop
 8003d66:	e004      	b.n	8003d72 <DMA_CheckFifoParam+0xe6>
      break;
 8003d68:	bf00      	nop
 8003d6a:	e002      	b.n	8003d72 <DMA_CheckFifoParam+0xe6>
      break;   
 8003d6c:	bf00      	nop
 8003d6e:	e000      	b.n	8003d72 <DMA_CheckFifoParam+0xe6>
      break;
 8003d70:	bf00      	nop
    }
  } 
  
  return status; 
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	; 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	e16b      	b.n	8004074 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	f040 815a 	bne.w	800406e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d00b      	beq.n	8003dda <HAL_GPIO_Init+0x5a>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d007      	beq.n	8003dda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dce:	2b11      	cmp	r3, #17
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b12      	cmp	r3, #18
 8003dd8:	d130      	bne.n	8003e3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	2203      	movs	r2, #3
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e10:	2201      	movs	r2, #1
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 0201 	and.w	r2, r3, #1
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	2203      	movs	r2, #3
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0xfc>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b12      	cmp	r3, #18
 8003e7a:	d123      	bne.n	8003ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	08da      	lsrs	r2, r3, #3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3208      	adds	r2, #8
 8003e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	220f      	movs	r2, #15
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	08da      	lsrs	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3208      	adds	r2, #8
 8003ebe:	69b9      	ldr	r1, [r7, #24]
 8003ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	2203      	movs	r2, #3
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0203 	and.w	r2, r3, #3
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80b4 	beq.w	800406e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	4b5f      	ldr	r3, [pc, #380]	; (8004088 <HAL_GPIO_Init+0x308>)
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	4a5e      	ldr	r2, [pc, #376]	; (8004088 <HAL_GPIO_Init+0x308>)
 8003f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f14:	6453      	str	r3, [r2, #68]	; 0x44
 8003f16:	4b5c      	ldr	r3, [pc, #368]	; (8004088 <HAL_GPIO_Init+0x308>)
 8003f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f22:	4a5a      	ldr	r2, [pc, #360]	; (800408c <HAL_GPIO_Init+0x30c>)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	089b      	lsrs	r3, r3, #2
 8003f28:	3302      	adds	r3, #2
 8003f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	220f      	movs	r2, #15
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4013      	ands	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a51      	ldr	r2, [pc, #324]	; (8004090 <HAL_GPIO_Init+0x310>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d02b      	beq.n	8003fa6 <HAL_GPIO_Init+0x226>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a50      	ldr	r2, [pc, #320]	; (8004094 <HAL_GPIO_Init+0x314>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d025      	beq.n	8003fa2 <HAL_GPIO_Init+0x222>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a4f      	ldr	r2, [pc, #316]	; (8004098 <HAL_GPIO_Init+0x318>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01f      	beq.n	8003f9e <HAL_GPIO_Init+0x21e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a4e      	ldr	r2, [pc, #312]	; (800409c <HAL_GPIO_Init+0x31c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d019      	beq.n	8003f9a <HAL_GPIO_Init+0x21a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a4d      	ldr	r2, [pc, #308]	; (80040a0 <HAL_GPIO_Init+0x320>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d013      	beq.n	8003f96 <HAL_GPIO_Init+0x216>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a4c      	ldr	r2, [pc, #304]	; (80040a4 <HAL_GPIO_Init+0x324>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00d      	beq.n	8003f92 <HAL_GPIO_Init+0x212>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a4b      	ldr	r2, [pc, #300]	; (80040a8 <HAL_GPIO_Init+0x328>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <HAL_GPIO_Init+0x20e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4a      	ldr	r2, [pc, #296]	; (80040ac <HAL_GPIO_Init+0x32c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d101      	bne.n	8003f8a <HAL_GPIO_Init+0x20a>
 8003f86:	2307      	movs	r3, #7
 8003f88:	e00e      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	e00c      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f8e:	2306      	movs	r3, #6
 8003f90:	e00a      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f92:	2305      	movs	r3, #5
 8003f94:	e008      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f96:	2304      	movs	r3, #4
 8003f98:	e006      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e004      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e002      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	f002 0203 	and.w	r2, r2, #3
 8003fae:	0092      	lsls	r2, r2, #2
 8003fb0:	4093      	lsls	r3, r2
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fb8:	4934      	ldr	r1, [pc, #208]	; (800408c <HAL_GPIO_Init+0x30c>)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	089b      	lsrs	r3, r3, #2
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc6:	4b3a      	ldr	r3, [pc, #232]	; (80040b0 <HAL_GPIO_Init+0x330>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fea:	4a31      	ldr	r2, [pc, #196]	; (80040b0 <HAL_GPIO_Init+0x330>)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ff0:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <HAL_GPIO_Init+0x330>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004014:	4a26      	ldr	r2, [pc, #152]	; (80040b0 <HAL_GPIO_Init+0x330>)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800401a:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <HAL_GPIO_Init+0x330>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	43db      	mvns	r3, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800403e:	4a1c      	ldr	r2, [pc, #112]	; (80040b0 <HAL_GPIO_Init+0x330>)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <HAL_GPIO_Init+0x330>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004068:	4a11      	ldr	r2, [pc, #68]	; (80040b0 <HAL_GPIO_Init+0x330>)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3301      	adds	r3, #1
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b0f      	cmp	r3, #15
 8004078:	f67f ae90 	bls.w	8003d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800407c:	bf00      	nop
 800407e:	3724      	adds	r7, #36	; 0x24
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40023800 	.word	0x40023800
 800408c:	40013800 	.word	0x40013800
 8004090:	40020000 	.word	0x40020000
 8004094:	40020400 	.word	0x40020400
 8004098:	40020800 	.word	0x40020800
 800409c:	40020c00 	.word	0x40020c00
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40021400 	.word	0x40021400
 80040a8:	40021800 	.word	0x40021800
 80040ac:	40021c00 	.word	0x40021c00
 80040b0:	40013c00 	.word	0x40013c00

080040b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	887b      	ldrh	r3, [r7, #2]
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	e001      	b.n	80040d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	807b      	strh	r3, [r7, #2]
 80040f0:	4613      	mov	r3, r2
 80040f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040f4:	787b      	ldrb	r3, [r7, #1]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004100:	e003      	b.n	800410a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004102:	887b      	ldrh	r3, [r7, #2]
 8004104:	041a      	lsls	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	619a      	str	r2, [r3, #24]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e25b      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d075      	beq.n	8004222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004136:	4ba3      	ldr	r3, [pc, #652]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b04      	cmp	r3, #4
 8004140:	d00c      	beq.n	800415c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004142:	4ba0      	ldr	r3, [pc, #640]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800414a:	2b08      	cmp	r3, #8
 800414c:	d112      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414e:	4b9d      	ldr	r3, [pc, #628]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800415a:	d10b      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	4b99      	ldr	r3, [pc, #612]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d05b      	beq.n	8004220 <HAL_RCC_OscConfig+0x108>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d157      	bne.n	8004220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e236      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d106      	bne.n	800418c <HAL_RCC_OscConfig+0x74>
 800417e:	4b91      	ldr	r3, [pc, #580]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a90      	ldr	r2, [pc, #576]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e01d      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x98>
 8004196:	4b8b      	ldr	r3, [pc, #556]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a8a      	ldr	r2, [pc, #552]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 800419c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a87      	ldr	r2, [pc, #540]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 80041b0:	4b84      	ldr	r3, [pc, #528]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a83      	ldr	r2, [pc, #524]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 80041b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b81      	ldr	r3, [pc, #516]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a80      	ldr	r2, [pc, #512]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 80041c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7fe fd10 	bl	8002bf4 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d8:	f7fe fd0c 	bl	8002bf4 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e1fb      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b76      	ldr	r3, [pc, #472]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0xc0>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fe fcfc 	bl	8002bf4 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004200:	f7fe fcf8 	bl	8002bf4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1e7      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	4b6c      	ldr	r3, [pc, #432]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0xe8>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d063      	beq.n	80042f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800422e:	4b65      	ldr	r3, [pc, #404]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423a:	4b62      	ldr	r3, [pc, #392]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004242:	2b08      	cmp	r3, #8
 8004244:	d11c      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004246:	4b5f      	ldr	r3, [pc, #380]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d116      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	4b5c      	ldr	r3, [pc, #368]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d001      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e1bb      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426a:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4952      	ldr	r1, [pc, #328]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427e:	e03a      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004288:	4b4f      	ldr	r3, [pc, #316]	; (80043c8 <HAL_RCC_OscConfig+0x2b0>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fe fcb1 	bl	8002bf4 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004296:	f7fe fcad 	bl	8002bf4 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e19c      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a8:	4b46      	ldr	r3, [pc, #280]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b4:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4940      	ldr	r1, [pc, #256]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]
 80042c8:	e015      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ca:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <HAL_RCC_OscConfig+0x2b0>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fe fc90 	bl	8002bf4 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d8:	f7fe fc8c 	bl	8002bf4 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e17b      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ea:	4b36      	ldr	r3, [pc, #216]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d030      	beq.n	8004364 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d016      	beq.n	8004338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430a:	4b30      	ldr	r3, [pc, #192]	; (80043cc <HAL_RCC_OscConfig+0x2b4>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7fe fc70 	bl	8002bf4 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004318:	f7fe fc6c 	bl	8002bf4 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e15b      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x200>
 8004336:	e015      	b.n	8004364 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004338:	4b24      	ldr	r3, [pc, #144]	; (80043cc <HAL_RCC_OscConfig+0x2b4>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433e:	f7fe fc59 	bl	8002bf4 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004346:	f7fe fc55 	bl	8002bf4 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e144      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004358:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 800435a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80a0 	beq.w	80044b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004372:	2300      	movs	r3, #0
 8004374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10f      	bne.n	80043a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	4a0e      	ldr	r2, [pc, #56]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 800438c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004390:	6413      	str	r3, [r2, #64]	; 0x40
 8004392:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439e:	2301      	movs	r3, #1
 80043a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_OscConfig+0x2b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d121      	bne.n	80043f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <HAL_RCC_OscConfig+0x2b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a07      	ldr	r2, [pc, #28]	; (80043d0 <HAL_RCC_OscConfig+0x2b8>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ba:	f7fe fc1b 	bl	8002bf4 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c0:	e011      	b.n	80043e6 <HAL_RCC_OscConfig+0x2ce>
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800
 80043c8:	42470000 	.word	0x42470000
 80043cc:	42470e80 	.word	0x42470e80
 80043d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d4:	f7fe fc0e 	bl	8002bf4 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e0fd      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e6:	4b81      	ldr	r3, [pc, #516]	; (80045ec <HAL_RCC_OscConfig+0x4d4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d106      	bne.n	8004408 <HAL_RCC_OscConfig+0x2f0>
 80043fa:	4b7d      	ldr	r3, [pc, #500]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4a7c      	ldr	r2, [pc, #496]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6713      	str	r3, [r2, #112]	; 0x70
 8004406:	e01c      	b.n	8004442 <HAL_RCC_OscConfig+0x32a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b05      	cmp	r3, #5
 800440e:	d10c      	bne.n	800442a <HAL_RCC_OscConfig+0x312>
 8004410:	4b77      	ldr	r3, [pc, #476]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004414:	4a76      	ldr	r2, [pc, #472]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 8004416:	f043 0304 	orr.w	r3, r3, #4
 800441a:	6713      	str	r3, [r2, #112]	; 0x70
 800441c:	4b74      	ldr	r3, [pc, #464]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	4a73      	ldr	r2, [pc, #460]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	6713      	str	r3, [r2, #112]	; 0x70
 8004428:	e00b      	b.n	8004442 <HAL_RCC_OscConfig+0x32a>
 800442a:	4b71      	ldr	r3, [pc, #452]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	4a70      	ldr	r2, [pc, #448]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	6713      	str	r3, [r2, #112]	; 0x70
 8004436:	4b6e      	ldr	r3, [pc, #440]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	4a6d      	ldr	r2, [pc, #436]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 800443c:	f023 0304 	bic.w	r3, r3, #4
 8004440:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d015      	beq.n	8004476 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fe fbd3 	bl	8002bf4 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004450:	e00a      	b.n	8004468 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fe fbcf 	bl	8002bf4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e0bc      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004468:	4b61      	ldr	r3, [pc, #388]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0ee      	beq.n	8004452 <HAL_RCC_OscConfig+0x33a>
 8004474:	e014      	b.n	80044a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004476:	f7fe fbbd 	bl	8002bf4 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447c:	e00a      	b.n	8004494 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800447e:	f7fe fbb9 	bl	8002bf4 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	f241 3288 	movw	r2, #5000	; 0x1388
 800448c:	4293      	cmp	r3, r2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e0a6      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004494:	4b56      	ldr	r3, [pc, #344]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1ee      	bne.n	800447e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d105      	bne.n	80044b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a6:	4b52      	ldr	r3, [pc, #328]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	4a51      	ldr	r2, [pc, #324]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 80044ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8092 	beq.w	80045e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044bc:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 030c 	and.w	r3, r3, #12
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d05c      	beq.n	8004582 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d141      	bne.n	8004554 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d0:	4b48      	ldr	r3, [pc, #288]	; (80045f4 <HAL_RCC_OscConfig+0x4dc>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d6:	f7fe fb8d 	bl	8002bf4 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044de:	f7fe fb89 	bl	8002bf4 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e078      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f0:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	019b      	lsls	r3, r3, #6
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	3b01      	subs	r3, #1
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	061b      	lsls	r3, r3, #24
 8004520:	4933      	ldr	r1, [pc, #204]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 8004522:	4313      	orrs	r3, r2
 8004524:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004526:	4b33      	ldr	r3, [pc, #204]	; (80045f4 <HAL_RCC_OscConfig+0x4dc>)
 8004528:	2201      	movs	r2, #1
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fe fb62 	bl	8002bf4 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe fb5e 	bl	8002bf4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e04d      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004546:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x41c>
 8004552:	e045      	b.n	80045e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004554:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <HAL_RCC_OscConfig+0x4dc>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455a:	f7fe fb4b 	bl	8002bf4 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004562:	f7fe fb47 	bl	8002bf4 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e036      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004574:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f0      	bne.n	8004562 <HAL_RCC_OscConfig+0x44a>
 8004580:	e02e      	b.n	80045e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e029      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800458e:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <HAL_RCC_OscConfig+0x4d8>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d11c      	bne.n	80045dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d115      	bne.n	80045dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045b6:	4013      	ands	r3, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045bc:	4293      	cmp	r3, r2
 80045be:	d10d      	bne.n	80045dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d106      	bne.n	80045dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40007000 	.word	0x40007000
 80045f0:	40023800 	.word	0x40023800
 80045f4:	42470060 	.word	0x42470060

080045f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0cc      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800460c:	4b68      	ldr	r3, [pc, #416]	; (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d90c      	bls.n	8004634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	4b65      	ldr	r3, [pc, #404]	; (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b63      	ldr	r3, [pc, #396]	; (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0b8      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d020      	beq.n	8004682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800464c:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a58      	ldr	r2, [pc, #352]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004664:	4b53      	ldr	r3, [pc, #332]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4a52      	ldr	r2, [pc, #328]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800466e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004670:	4b50      	ldr	r3, [pc, #320]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	494d      	ldr	r1, [pc, #308]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d044      	beq.n	8004718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	4b47      	ldr	r3, [pc, #284]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d119      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e07f      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d003      	beq.n	80046b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d107      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b6:	4b3f      	ldr	r3, [pc, #252]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e06f      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c6:	4b3b      	ldr	r3, [pc, #236]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e067      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046d6:	4b37      	ldr	r3, [pc, #220]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f023 0203 	bic.w	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4934      	ldr	r1, [pc, #208]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e8:	f7fe fa84 	bl	8002bf4 <HAL_GetTick>
 80046ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f0:	f7fe fa80 	bl	8002bf4 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e04f      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 020c 	and.w	r2, r3, #12
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	429a      	cmp	r2, r3
 8004716:	d1eb      	bne.n	80046f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004718:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d20c      	bcs.n	8004740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e032      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800474c:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4916      	ldr	r1, [pc, #88]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	490e      	ldr	r1, [pc, #56]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	4313      	orrs	r3, r2
 800477c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800477e:	f000 f889 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8004782:	4601      	mov	r1, r0
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004790:	5cd3      	ldrb	r3, [r2, r3]
 8004792:	fa21 f303 	lsr.w	r3, r1, r3
 8004796:	4a09      	ldr	r2, [pc, #36]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800479a:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe f9e4 	bl	8002b6c <HAL_InitTick>

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40023c00 	.word	0x40023c00
 80047b4:	40023800 	.word	0x40023800
 80047b8:	0800e2cc 	.word	0x0800e2cc
 80047bc:	20000078 	.word	0x20000078
 80047c0:	2000007c 	.word	0x2000007c

080047c4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08c      	sub	sp, #48	; 0x30
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d129      	bne.n	800482a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <HAL_RCC_MCOConfig+0xc4>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <HAL_RCC_MCOConfig+0xc4>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	6313      	str	r3, [r2, #48]	; 0x30
 80047e6:	4b28      	ldr	r3, [pc, #160]	; (8004888 <HAL_RCC_MCOConfig+0xc4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80047f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f8:	2302      	movs	r3, #2
 80047fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047fc:	2303      	movs	r3, #3
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004800:	2300      	movs	r3, #0
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004804:	2300      	movs	r3, #0
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004808:	f107 031c 	add.w	r3, r7, #28
 800480c:	4619      	mov	r1, r3
 800480e:	481f      	ldr	r0, [pc, #124]	; (800488c <HAL_RCC_MCOConfig+0xc8>)
 8004810:	f7ff fab6 	bl	8003d80 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004814:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <HAL_RCC_MCOConfig+0xc4>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	430b      	orrs	r3, r1
 8004822:	4919      	ldr	r1, [pc, #100]	; (8004888 <HAL_RCC_MCOConfig+0xc4>)
 8004824:	4313      	orrs	r3, r2
 8004826:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004828:	e029      	b.n	800487e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	4b16      	ldr	r3, [pc, #88]	; (8004888 <HAL_RCC_MCOConfig+0xc4>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <HAL_RCC_MCOConfig+0xc4>)
 8004834:	f043 0304 	orr.w	r3, r3, #4
 8004838:	6313      	str	r3, [r2, #48]	; 0x30
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <HAL_RCC_MCOConfig+0xc4>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800484a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484c:	2302      	movs	r3, #2
 800484e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004850:	2303      	movs	r3, #3
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004858:	2300      	movs	r3, #0
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800485c:	f107 031c 	add.w	r3, r7, #28
 8004860:	4619      	mov	r1, r3
 8004862:	480b      	ldr	r0, [pc, #44]	; (8004890 <HAL_RCC_MCOConfig+0xcc>)
 8004864:	f7ff fa8c 	bl	8003d80 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004868:	4b07      	ldr	r3, [pc, #28]	; (8004888 <HAL_RCC_MCOConfig+0xc4>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	00d9      	lsls	r1, r3, #3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	430b      	orrs	r3, r1
 8004878:	4903      	ldr	r1, [pc, #12]	; (8004888 <HAL_RCC_MCOConfig+0xc4>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
}
 800487e:	bf00      	nop
 8004880:	3730      	adds	r7, #48	; 0x30
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800
 800488c:	40020000 	.word	0x40020000
 8004890:	40020800 	.word	0x40020800

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048aa:	4b50      	ldr	r3, [pc, #320]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d007      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x32>
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d008      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x38>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 808d 	bne.w	80049da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c0:	4b4b      	ldr	r3, [pc, #300]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80048c2:	60bb      	str	r3, [r7, #8]
       break;
 80048c4:	e08c      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048c6:	4b4b      	ldr	r3, [pc, #300]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048c8:	60bb      	str	r3, [r7, #8]
      break;
 80048ca:	e089      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048cc:	4b47      	ldr	r3, [pc, #284]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048d6:	4b45      	ldr	r3, [pc, #276]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d023      	beq.n	800492a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e2:	4b42      	ldr	r3, [pc, #264]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	099b      	lsrs	r3, r3, #6
 80048e8:	f04f 0400 	mov.w	r4, #0
 80048ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	ea03 0501 	and.w	r5, r3, r1
 80048f8:	ea04 0602 	and.w	r6, r4, r2
 80048fc:	4a3d      	ldr	r2, [pc, #244]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048fe:	fb02 f106 	mul.w	r1, r2, r6
 8004902:	2200      	movs	r2, #0
 8004904:	fb02 f205 	mul.w	r2, r2, r5
 8004908:	440a      	add	r2, r1
 800490a:	493a      	ldr	r1, [pc, #232]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800490c:	fba5 0101 	umull	r0, r1, r5, r1
 8004910:	1853      	adds	r3, r2, r1
 8004912:	4619      	mov	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f04f 0400 	mov.w	r4, #0
 800491a:	461a      	mov	r2, r3
 800491c:	4623      	mov	r3, r4
 800491e:	f7fc f993 	bl	8000c48 <__aeabi_uldivmod>
 8004922:	4603      	mov	r3, r0
 8004924:	460c      	mov	r4, r1
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e049      	b.n	80049be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492a:	4b30      	ldr	r3, [pc, #192]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	099b      	lsrs	r3, r3, #6
 8004930:	f04f 0400 	mov.w	r4, #0
 8004934:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	ea03 0501 	and.w	r5, r3, r1
 8004940:	ea04 0602 	and.w	r6, r4, r2
 8004944:	4629      	mov	r1, r5
 8004946:	4632      	mov	r2, r6
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	f04f 0400 	mov.w	r4, #0
 8004950:	0154      	lsls	r4, r2, #5
 8004952:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004956:	014b      	lsls	r3, r1, #5
 8004958:	4619      	mov	r1, r3
 800495a:	4622      	mov	r2, r4
 800495c:	1b49      	subs	r1, r1, r5
 800495e:	eb62 0206 	sbc.w	r2, r2, r6
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	f04f 0400 	mov.w	r4, #0
 800496a:	0194      	lsls	r4, r2, #6
 800496c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004970:	018b      	lsls	r3, r1, #6
 8004972:	1a5b      	subs	r3, r3, r1
 8004974:	eb64 0402 	sbc.w	r4, r4, r2
 8004978:	f04f 0100 	mov.w	r1, #0
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	00e2      	lsls	r2, r4, #3
 8004982:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004986:	00d9      	lsls	r1, r3, #3
 8004988:	460b      	mov	r3, r1
 800498a:	4614      	mov	r4, r2
 800498c:	195b      	adds	r3, r3, r5
 800498e:	eb44 0406 	adc.w	r4, r4, r6
 8004992:	f04f 0100 	mov.w	r1, #0
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	02a2      	lsls	r2, r4, #10
 800499c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049a0:	0299      	lsls	r1, r3, #10
 80049a2:	460b      	mov	r3, r1
 80049a4:	4614      	mov	r4, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	4621      	mov	r1, r4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f04f 0400 	mov.w	r4, #0
 80049b0:	461a      	mov	r2, r3
 80049b2:	4623      	mov	r3, r4
 80049b4:	f7fc f948 	bl	8000c48 <__aeabi_uldivmod>
 80049b8:	4603      	mov	r3, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049be:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	3301      	adds	r3, #1
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	60bb      	str	r3, [r7, #8]
      break;
 80049d8:	e002      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80049dc:	60bb      	str	r3, [r7, #8]
      break;
 80049de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049e0:	68bb      	ldr	r3, [r7, #8]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	00f42400 	.word	0x00f42400
 80049f4:	017d7840 	.word	0x017d7840

080049f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e022      	b.n	8004a50 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d105      	bne.n	8004a22 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7fd fd8f 	bl	8002540 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2203      	movs	r2, #3
 8004a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f814 	bl	8004a58 <HAL_SD_InitCard>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e00a      	b.n	8004a50 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004a58:	b5b0      	push	{r4, r5, r7, lr}
 8004a5a:	b08e      	sub	sp, #56	; 0x38
 8004a5c:	af04      	add	r7, sp, #16
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004a74:	2376      	movs	r3, #118	; 0x76
 8004a76:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681d      	ldr	r5, [r3, #0]
 8004a7c:	466c      	mov	r4, sp
 8004a7e:	f107 0314 	add.w	r3, r7, #20
 8004a82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a8a:	f107 0308 	add.w	r3, r7, #8
 8004a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a90:	4628      	mov	r0, r5
 8004a92:	f002 fba1 	bl	80071d8 <SDIO_Init>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e031      	b.n	8004b0c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004aa8:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <HAL_SD_InitCard+0xbc>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f002 fbd9 	bl	800726a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004ab8:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <HAL_SD_InitCard+0xbc>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 ffdc 	bl	8005a7c <SD_PowerON>
 8004ac4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00b      	beq.n	8004ae4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e013      	b.n	8004b0c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fefb 	bl	80058e0 <SD_InitCard>
 8004aea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bdb0      	pop	{r4, r5, r7, pc}
 8004b14:	422580a0 	.word	0x422580a0

08004b18 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08c      	sub	sp, #48	; 0x30
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d107      	bne.n	8004b40 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0c9      	b.n	8004cd4 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	f040 80c2 	bne.w	8004cd2 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	441a      	add	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d907      	bls.n	8004b72 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0b0      	b.n	8004cd4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2203      	movs	r2, #3
 8004b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004b90:	f043 0302 	orr.w	r3, r3, #2
 8004b94:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	4a50      	ldr	r2, [pc, #320]	; (8004cdc <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8004b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	4a4f      	ldr	r2, [pc, #316]	; (8004ce0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8004ba4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	2200      	movs	r2, #0
 8004bac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3380      	adds	r3, #128	; 0x80
 8004bb8:	4619      	mov	r1, r3
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	025b      	lsls	r3, r3, #9
 8004bc0:	089b      	lsrs	r3, r3, #2
 8004bc2:	f7fe fdef 	bl	80037a4 <HAL_DMA_Start_IT>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d017      	beq.n	8004bfc <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004bda:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a40      	ldr	r2, [pc, #256]	; (8004ce4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e06b      	b.n	8004cd4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004bfc:	4b3a      	ldr	r3, [pc, #232]	; (8004ce8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d002      	beq.n	8004c10 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	025b      	lsls	r3, r3, #9
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f002 fbb9 	bl	8007390 <SDMMC_CmdBlockLength>
 8004c1e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00f      	beq.n	8004c46 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ce4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	431a      	orrs	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e046      	b.n	8004cd4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c46:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	025b      	lsls	r3, r3, #9
 8004c50:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004c52:	2390      	movs	r3, #144	; 0x90
 8004c54:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c56:	2302      	movs	r3, #2
 8004c58:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f107 0210 	add.w	r2, r7, #16
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f002 fb63 	bl	8007338 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d90a      	bls.n	8004c8e <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2282      	movs	r2, #130	; 0x82
 8004c7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c84:	4618      	mov	r0, r3
 8004c86:	f002 fbc7 	bl	8007418 <SDMMC_CmdReadMultiBlock>
 8004c8a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004c8c:	e009      	b.n	8004ca2 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2281      	movs	r2, #129	; 0x81
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f002 fb9a 	bl	80073d4 <SDMMC_CmdReadSingleBlock>
 8004ca0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d012      	beq.n	8004cce <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e002      	b.n	8004cd4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e000      	b.n	8004cd4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
  }
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3730      	adds	r7, #48	; 0x30
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	080056ef 	.word	0x080056ef
 8004ce0:	08005761 	.word	0x08005761
 8004ce4:	004005ff 	.word	0x004005ff
 8004ce8:	4225858c 	.word	0x4225858c

08004cec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08c      	sub	sp, #48	; 0x30
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0ce      	b.n	8004eb2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	f040 80c7 	bne.w	8004eb0 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d907      	bls.n	8004d46 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0b5      	b.n	8004eb2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2203      	movs	r2, #3
 8004d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	6812      	ldr	r2, [r2, #0]
 8004d60:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004d64:	f043 0302 	orr.w	r3, r3, #2
 8004d68:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	4a53      	ldr	r2, [pc, #332]	; (8004ebc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8004d70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d76:	4a52      	ldr	r2, [pc, #328]	; (8004ec0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8004d78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	2200      	movs	r2, #0
 8004d80:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d002      	beq.n	8004d90 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	025b      	lsls	r3, r3, #9
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f002 faf9 	bl	8007390 <SDMMC_CmdBlockLength>
 8004d9e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00f      	beq.n	8004dc6 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a46      	ldr	r2, [pc, #280]	; (8004ec4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e075      	b.n	8004eb2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d90a      	bls.n	8004de2 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	22a0      	movs	r2, #160	; 0xa0
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f002 fb61 	bl	80074a0 <SDMMC_CmdWriteMultiBlock>
 8004dde:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004de0:	e009      	b.n	8004df6 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2290      	movs	r2, #144	; 0x90
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dee:	4618      	mov	r0, r3
 8004df0:	f002 fb34 	bl	800745c <SDMMC_CmdWriteSingleBlock>
 8004df4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d012      	beq.n	8004e22 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a30      	ldr	r2, [pc, #192]	; (8004ec4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e047      	b.n	8004eb2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004e22:	4b29      	ldr	r3, [pc, #164]	; (8004ec8 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3380      	adds	r3, #128	; 0x80
 8004e34:	461a      	mov	r2, r3
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	025b      	lsls	r3, r3, #9
 8004e3a:	089b      	lsrs	r3, r3, #2
 8004e3c:	f7fe fcb2 	bl	80037a4 <HAL_DMA_Start_IT>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01c      	beq.n	8004e80 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004e54:	f023 0302 	bic.w	r3, r3, #2
 8004e58:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a19      	ldr	r2, [pc, #100]	; (8004ec4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e018      	b.n	8004eb2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e80:	f04f 33ff 	mov.w	r3, #4294967295
 8004e84:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	025b      	lsls	r3, r3, #9
 8004e8a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004e8c:	2390      	movs	r3, #144	; 0x90
 8004e8e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f107 0210 	add.w	r2, r7, #16
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f002 fa46 	bl	8007338 <SDIO_ConfigData>

      return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3730      	adds	r7, #48	; 0x30
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	080056c5 	.word	0x080056c5
 8004ec0:	08005761 	.word	0x08005761
 8004ec4:	004005ff 	.word	0x004005ff
 8004ec8:	4225858c 	.word	0x4225858c

08004ecc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_SD_IRQHandler+0x2e>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 ffd8 	bl	8005ea8 <SD_Read_IT>
 8004ef8:	e165      	b.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 808f 	beq.w	8005028 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004f22:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004f26:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d039      	beq.n	8004fb6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <HAL_SD_IRQHandler+0x8a>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d011      	beq.n	8004f7a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f002 fac2 	bl	80074e4 <SDMMC_CmdStopTransfer>
 8004f60:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f92f 	bl	80051d8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d104      	bne.n	8004fa6 <HAL_SD_IRQHandler+0xda>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f002 ff20 	bl	8007dec <HAL_SD_RxCpltCallback>
 8004fac:	e10b      	b.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f002 ff12 	bl	8007dd8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004fb4:	e107      	b.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8102 	beq.w	80051c6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d011      	beq.n	8004ff0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f002 fa87 	bl	80074e4 <SDMMC_CmdStopTransfer>
 8004fd6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d008      	beq.n	8004ff0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8f4 	bl	80051d8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f040 80e5 	bne.w	80051c6 <HAL_SD_IRQHandler+0x2fa>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 80df 	bne.w	80051c6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0208 	bic.w	r2, r2, #8
 8005016:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f002 fed9 	bl	8007dd8 <HAL_SD_TxCpltCallback>
}
 8005026:	e0ce      	b.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d008      	beq.n	8005048 <HAL_SD_IRQHandler+0x17c>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 ff82 	bl	8005f4a <SD_Write_IT>
 8005046:	e0be      	b.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800504e:	f240 233a 	movw	r3, #570	; 0x23a
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80b6 	beq.w	80051c6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	f043 0202 	orr.w	r2, r3, #2
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	f043 0208 	orr.w	r2, r3, #8
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	f043 0210 	orr.w	r2, r3, #16
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	f043 0208 	orr.w	r2, r3, #8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f240 723a 	movw	r2, #1850	; 0x73a
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80050f4:	f023 0302 	bic.w	r3, r3, #2
 80050f8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f002 f9f0 	bl	80074e4 <SDMMC_CmdStopTransfer>
 8005104:	4602      	mov	r2, r0
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f855 	bl	80051d8 <HAL_SD_ErrorCallback>
}
 800512e:	e04a      	b.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b00      	cmp	r3, #0
 8005138:	d045      	beq.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	d104      	bne.n	800514e <HAL_SD_IRQHandler+0x282>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d011      	beq.n	8005172 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <HAL_SD_IRQHandler+0x304>)
 8005154:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe fb7a 	bl	8003854 <HAL_DMA_Abort_IT>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d02f      	beq.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fb4a 	bl	8005804 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005170:	e029      	b.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <HAL_SD_IRQHandler+0x2ba>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d011      	beq.n	80051aa <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	4a12      	ldr	r2, [pc, #72]	; (80051d4 <HAL_SD_IRQHandler+0x308>)
 800518c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe fb5e 	bl	8003854 <HAL_DMA_Abort_IT>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d013      	beq.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fb65 	bl	8005872 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80051a8:	e00d      	b.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f002 fe00 	bl	8007dc4 <HAL_SD_AbortCallback>
}
 80051c4:	e7ff      	b.n	80051c6 <HAL_SD_IRQHandler+0x2fa>
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	08005805 	.word	0x08005805
 80051d4:	08005873 	.word	0x08005873

080051d8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051fa:	0f9b      	lsrs	r3, r3, #30
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005206:	0e9b      	lsrs	r3, r3, #26
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	b2da      	uxtb	r2, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005218:	0e1b      	lsrs	r3, r3, #24
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	b2da      	uxtb	r2, r3
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	b2da      	uxtb	r2, r3
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	b2da      	uxtb	r2, r3
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005242:	b2da      	uxtb	r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800524c:	0d1b      	lsrs	r3, r3, #20
 800524e:	b29a      	uxth	r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005258:	0c1b      	lsrs	r3, r3, #16
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	b2da      	uxtb	r2, r3
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800526a:	0bdb      	lsrs	r3, r3, #15
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	b2da      	uxtb	r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800527c:	0b9b      	lsrs	r3, r3, #14
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	b2da      	uxtb	r2, r3
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800528e:	0b5b      	lsrs	r3, r3, #13
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a0:	0b1b      	lsrs	r3, r3, #12
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2200      	movs	r2, #0
 80052b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d163      	bne.n	8005384 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052c0:	009a      	lsls	r2, r3, #2
 80052c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052c6:	4013      	ands	r3, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80052cc:	0f92      	lsrs	r2, r2, #30
 80052ce:	431a      	orrs	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d8:	0edb      	lsrs	r3, r3, #27
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ea:	0e1b      	lsrs	r3, r3, #24
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052fc:	0d5b      	lsrs	r3, r3, #21
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	b2da      	uxtb	r2, r3
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800530e:	0c9b      	lsrs	r3, r3, #18
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	b2da      	uxtb	r2, r3
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005320:	0bdb      	lsrs	r3, r3, #15
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	b2da      	uxtb	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	7e1b      	ldrb	r3, [r3, #24]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	3302      	adds	r3, #2
 8005344:	2201      	movs	r2, #1
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800534e:	fb02 f203 	mul.w	r2, r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	7a1b      	ldrb	r3, [r3, #8]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	2201      	movs	r2, #1
 8005362:	409a      	lsls	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005370:	0a52      	lsrs	r2, r2, #9
 8005372:	fb02 f203 	mul.w	r2, r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005380:	661a      	str	r2, [r3, #96]	; 0x60
 8005382:	e031      	b.n	80053e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	2b01      	cmp	r3, #1
 800538a:	d11d      	bne.n	80053c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005390:	041b      	lsls	r3, r3, #16
 8005392:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539a:	0c1b      	lsrs	r3, r3, #16
 800539c:	431a      	orrs	r2, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	3301      	adds	r3, #1
 80053a8:	029a      	lsls	r2, r3, #10
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	661a      	str	r2, [r3, #96]	; 0x60
 80053c6:	e00f      	b.n	80053e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a58      	ldr	r2, [pc, #352]	; (8005530 <HAL_SD_GetCardCSD+0x344>)
 80053ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e09d      	b.n	8005524 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ec:	0b9b      	lsrs	r3, r3, #14
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fe:	09db      	lsrs	r3, r3, #7
 8005400:	b2db      	uxtb	r3, r3
 8005402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005406:	b2da      	uxtb	r2, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005416:	b2da      	uxtb	r2, r3
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005420:	0fdb      	lsrs	r3, r3, #31
 8005422:	b2da      	uxtb	r2, r3
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	0f5b      	lsrs	r3, r3, #29
 800542e:	b2db      	uxtb	r3, r3
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	b2da      	uxtb	r2, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543e:	0e9b      	lsrs	r3, r3, #26
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	b2da      	uxtb	r2, r3
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	0d9b      	lsrs	r3, r3, #22
 8005452:	b2db      	uxtb	r3, r3
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	b2da      	uxtb	r2, r3
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005462:	0d5b      	lsrs	r3, r3, #21
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	b2da      	uxtb	r2, r3
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	0c1b      	lsrs	r3, r3, #16
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	b2da      	uxtb	r2, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	0bdb      	lsrs	r3, r3, #15
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	b2da      	uxtb	r2, r3
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	0b9b      	lsrs	r3, r3, #14
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ba:	0b5b      	lsrs	r3, r3, #13
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ce:	0b1b      	lsrs	r3, r3, #12
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	0a9b      	lsrs	r3, r3, #10
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005512:	b2da      	uxtb	r2, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	004005ff 	.word	0x004005ff

08005534 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800558c:	b5b0      	push	{r4, r5, r7, lr}
 800558e:	b08e      	sub	sp, #56	; 0x38
 8005590:	af04      	add	r7, sp, #16
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2203      	movs	r2, #3
 800559a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d02e      	beq.n	8005604 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ac:	d106      	bne.n	80055bc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
 80055ba:	e029      	b.n	8005610 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c2:	d10a      	bne.n	80055da <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fb0f 	bl	8005be8 <SD_WideBus_Enable>
 80055ca:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
 80055d8:	e01a      	b.n	8005610 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fb4c 	bl	8005c7e <SD_WideBus_Disable>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
 80055f4:	e00c      	b.n	8005610 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
 8005602:	e005      	b.n	8005610 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a18      	ldr	r2, [pc, #96]	; (8005680 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e024      	b.n	8005676 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681d      	ldr	r5, [r3, #0]
 8005652:	466c      	mov	r4, sp
 8005654:	f107 0318 	add.w	r3, r7, #24
 8005658:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800565c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005660:	f107 030c 	add.w	r3, r7, #12
 8005664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005666:	4628      	mov	r0, r5
 8005668:	f001 fdb6 	bl	80071d8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3728      	adds	r7, #40	; 0x28
 800567a:	46bd      	mov	sp, r7
 800567c:	bdb0      	pop	{r4, r5, r7, pc}
 800567e:	bf00      	nop
 8005680:	004005ff 	.word	0x004005ff

08005684 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005690:	f107 030c 	add.w	r3, r7, #12
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa7e 	bl	8005b98 <SD_SendStatus>
 800569c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	0a5b      	lsrs	r3, r3, #9
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80056ba:	693b      	ldr	r3, [r7, #16]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	2b82      	cmp	r3, #130	; 0x82
 8005702:	d111      	bne.n	8005728 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f001 feeb 	bl	80074e4 <SDMMC_CmdStopTransfer>
 800570e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d008      	beq.n	8005728 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff fd58 	bl	80051d8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0208 	bic.w	r2, r2, #8
 8005736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005740:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f002 fb4b 	bl	8007dec <HAL_SD_RxCpltCallback>
#endif
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fe fa1c 	bl	8003bac <HAL_DMA_GetError>
 8005774:	4603      	mov	r3, r0
 8005776:	2b02      	cmp	r3, #2
 8005778:	d03e      	beq.n	80057f8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d002      	beq.n	8005796 <SD_DMAError+0x36>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d12d      	bne.n	80057f2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a19      	ldr	r2, [pc, #100]	; (8005800 <SD_DMAError+0xa0>)
 800579c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80057ac:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80057ba:	6978      	ldr	r0, [r7, #20]
 80057bc:	f7ff ff62 	bl	8005684 <HAL_SD_GetCardState>
 80057c0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b06      	cmp	r3, #6
 80057c6:	d002      	beq.n	80057ce <SD_DMAError+0x6e>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	d10a      	bne.n	80057e4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 fe86 	bl	80074e4 <SDMMC_CmdStopTransfer>
 80057d8:	4602      	mov	r2, r0
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	431a      	orrs	r2, r3
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2200      	movs	r2, #0
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80057f2:	6978      	ldr	r0, [r7, #20]
 80057f4:	f7ff fcf0 	bl	80051d8 <HAL_SD_ErrorCallback>
#endif
  }
}
 80057f8:	bf00      	nop
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	004005ff 	.word	0x004005ff

08005804 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f240 523a 	movw	r2, #1338	; 0x53a
 800581a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f7ff ff31 	bl	8005684 <HAL_SD_GetCardState>
 8005822:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b06      	cmp	r3, #6
 8005836:	d002      	beq.n	800583e <SD_DMATxAbort+0x3a>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b05      	cmp	r3, #5
 800583c:	d10a      	bne.n	8005854 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f001 fe4e 	bl	80074e4 <SDMMC_CmdStopTransfer>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	431a      	orrs	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f002 fab1 	bl	8007dc4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005862:	e002      	b.n	800586a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff fcb7 	bl	80051d8 <HAL_SD_ErrorCallback>
}
 800586a:	bf00      	nop
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f240 523a 	movw	r2, #1338	; 0x53a
 8005888:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7ff fefa 	bl	8005684 <HAL_SD_GetCardState>
 8005890:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b06      	cmp	r3, #6
 80058a4:	d002      	beq.n	80058ac <SD_DMARxAbort+0x3a>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b05      	cmp	r3, #5
 80058aa:	d10a      	bne.n	80058c2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 fe17 	bl	80074e4 <SDMMC_CmdStopTransfer>
 80058b6:	4602      	mov	r2, r0
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	431a      	orrs	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d103      	bne.n	80058d2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f002 fa7a 	bl	8007dc4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80058d0:	e002      	b.n	80058d8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff fc80 	bl	80051d8 <HAL_SD_ErrorCallback>
}
 80058d8:	bf00      	nop
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80058e0:	b5b0      	push	{r4, r5, r7, lr}
 80058e2:	b094      	sub	sp, #80	; 0x50
 80058e4:	af04      	add	r7, sp, #16
 80058e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80058e8:	2301      	movs	r3, #1
 80058ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 fcc9 	bl	8007288 <SDIO_GetPowerState>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d102      	bne.n	8005902 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005900:	e0b7      	b.n	8005a72 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	2b03      	cmp	r3, #3
 8005908:	d02f      	beq.n	800596a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f001 fef2 	bl	80076f8 <SDMMC_CmdSendCID>
 8005914:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <SD_InitCard+0x40>
    {
      return errorstate;
 800591c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591e:	e0a8      	b.n	8005a72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2100      	movs	r1, #0
 8005926:	4618      	mov	r0, r3
 8005928:	f001 fcf3 	bl	8007312 <SDIO_GetResponse>
 800592c:	4602      	mov	r2, r0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2104      	movs	r1, #4
 8005938:	4618      	mov	r0, r3
 800593a:	f001 fcea 	bl	8007312 <SDIO_GetResponse>
 800593e:	4602      	mov	r2, r0
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2108      	movs	r1, #8
 800594a:	4618      	mov	r0, r3
 800594c:	f001 fce1 	bl	8007312 <SDIO_GetResponse>
 8005950:	4602      	mov	r2, r0
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	210c      	movs	r1, #12
 800595c:	4618      	mov	r0, r3
 800595e:	f001 fcd8 	bl	8007312 <SDIO_GetResponse>
 8005962:	4602      	mov	r2, r0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596e:	2b03      	cmp	r3, #3
 8005970:	d00d      	beq.n	800598e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f107 020e 	add.w	r2, r7, #14
 800597a:	4611      	mov	r1, r2
 800597c:	4618      	mov	r0, r3
 800597e:	f001 fef8 	bl	8007772 <SDMMC_CmdSetRelAdd>
 8005982:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <SD_InitCard+0xae>
    {
      return errorstate;
 800598a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598c:	e071      	b.n	8005a72 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	2b03      	cmp	r3, #3
 8005994:	d036      	beq.n	8005a04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005996:	89fb      	ldrh	r3, [r7, #14]
 8005998:	461a      	mov	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f001 fec2 	bl	8007734 <SDMMC_CmdSendCSD>
 80059b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <SD_InitCard+0xdc>
    {
      return errorstate;
 80059b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ba:	e05a      	b.n	8005a72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2100      	movs	r1, #0
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 fca5 	bl	8007312 <SDIO_GetResponse>
 80059c8:	4602      	mov	r2, r0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2104      	movs	r1, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 fc9c 	bl	8007312 <SDIO_GetResponse>
 80059da:	4602      	mov	r2, r0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2108      	movs	r1, #8
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 fc93 	bl	8007312 <SDIO_GetResponse>
 80059ec:	4602      	mov	r2, r0
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	210c      	movs	r1, #12
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 fc8a 	bl	8007312 <SDIO_GetResponse>
 80059fe:	4602      	mov	r2, r0
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2104      	movs	r1, #4
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f001 fc81 	bl	8007312 <SDIO_GetResponse>
 8005a10:	4603      	mov	r3, r0
 8005a12:	0d1a      	lsrs	r2, r3, #20
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005a18:	f107 0310 	add.w	r3, r7, #16
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fbe4 	bl	80051ec <HAL_SD_GetCardCSD>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a2e:	e020      	b.n	8005a72 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6819      	ldr	r1, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	f04f 0400 	mov.w	r4, #0
 8005a3e:	461a      	mov	r2, r3
 8005a40:	4623      	mov	r3, r4
 8005a42:	4608      	mov	r0, r1
 8005a44:	f001 fd70 	bl	8007528 <SDMMC_CmdSelDesel>
 8005a48:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <SD_InitCard+0x174>
  {
    return errorstate;
 8005a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a52:	e00e      	b.n	8005a72 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681d      	ldr	r5, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	466c      	mov	r4, sp
 8005a5c:	f103 0210 	add.w	r2, r3, #16
 8005a60:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a66:	3304      	adds	r3, #4
 8005a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f001 fbb4 	bl	80071d8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3740      	adds	r7, #64	; 0x40
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 fd6a 	bl	800756e <SDMMC_CmdGoIdleState>
 8005a9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	e072      	b.n	8005b8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 fd7d 	bl	80075aa <SDMMC_CmdOperCond>
 8005ab0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00d      	beq.n	8005ad4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 fd53 	bl	800756e <SDMMC_CmdGoIdleState>
 8005ac8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <SD_PowerON+0x5e>
    {
      return errorstate;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	e05b      	b.n	8005b8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d137      	bne.n	8005b52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f001 fd7d 	bl	80075e8 <SDMMC_CmdAppCommand>
 8005aee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d02d      	beq.n	8005b52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005afa:	e047      	b.n	8005b8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 fd70 	bl	80075e8 <SDMMC_CmdAppCommand>
 8005b08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <SD_PowerON+0x98>
    {
      return errorstate;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	e03b      	b.n	8005b8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	491e      	ldr	r1, [pc, #120]	; (8005b94 <SD_PowerON+0x118>)
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f001 fd86 	bl	800762c <SDMMC_CmdAppOperCommand>
 8005b20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b2c:	e02e      	b.n	8005b8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2100      	movs	r1, #0
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 fbec 	bl	8007312 <SDIO_GetResponse>
 8005b3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	0fdb      	lsrs	r3, r3, #31
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <SD_PowerON+0xcc>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <SD_PowerON+0xce>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	613b      	str	r3, [r7, #16]

    count++;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d802      	bhi.n	8005b62 <SD_PowerON+0xe6>
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0cc      	beq.n	8005afc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d902      	bls.n	8005b72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b70:	e00c      	b.n	8005b8c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	645a      	str	r2, [r3, #68]	; 0x44
 8005b82:	e002      	b.n	8005b8a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	c1100000 	.word	0xc1100000

08005b98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005ba8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bac:	e018      	b.n	8005be0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb6:	041b      	lsls	r3, r3, #16
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f001 fdfa 	bl	80077b4 <SDMMC_CmdSendStatus>
 8005bc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <SD_SendStatus+0x34>
  {
    return errorstate;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	e009      	b.n	8005be0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 fb9d 	bl	8007312 <SDIO_GetResponse>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 fb87 	bl	8007312 <SDIO_GetResponse>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c0e:	d102      	bne.n	8005c16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c14:	e02f      	b.n	8005c76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c16:	f107 030c 	add.w	r3, r7, #12
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f879 	bl	8005d14 <SD_FindSCR>
 8005c22:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	e023      	b.n	8005c76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01c      	beq.n	8005c72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f001 fccf 	bl	80075e8 <SDMMC_CmdAppCommand>
 8005c4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	e00f      	b.n	8005c76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2102      	movs	r1, #2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 fd08 	bl	8007672 <SDMMC_CmdBusWidth>
 8005c62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	e003      	b.n	8005c76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e001      	b.n	8005c76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b086      	sub	sp, #24
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2100      	movs	r1, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 fb3c 	bl	8007312 <SDIO_GetResponse>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ca4:	d102      	bne.n	8005cac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005ca6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005caa:	e02f      	b.n	8005d0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005cac:	f107 030c 	add.w	r3, r7, #12
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f82e 	bl	8005d14 <SD_FindSCR>
 8005cb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	e023      	b.n	8005d0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01c      	beq.n	8005d08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f001 fc84 	bl	80075e8 <SDMMC_CmdAppCommand>
 8005ce0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	e00f      	b.n	8005d0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 fcbd 	bl	8007672 <SDMMC_CmdBusWidth>
 8005cf8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	e003      	b.n	8005d0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e001      	b.n	8005d0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005d14:	b590      	push	{r4, r7, lr}
 8005d16:	b08f      	sub	sp, #60	; 0x3c
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d1e:	f7fc ff69 	bl	8002bf4 <HAL_GetTick>
 8005d22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2108      	movs	r1, #8
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 fb28 	bl	8007390 <SDMMC_CmdBlockLength>
 8005d40:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	e0a9      	b.n	8005ea0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f001 fc45 	bl	80075e8 <SDMMC_CmdAppCommand>
 8005d5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	e09a      	b.n	8005ea0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005d70:	2308      	movs	r3, #8
 8005d72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005d74:	2330      	movs	r3, #48	; 0x30
 8005d76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005d80:	2301      	movs	r3, #1
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f107 0210 	add.w	r2, r7, #16
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 fad2 	bl	8007338 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 fc8c 	bl	80076b6 <SDMMC_CmdSendSCR>
 8005d9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d022      	beq.n	8005dec <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	e07a      	b.n	8005ea0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00e      	beq.n	8005dd6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6819      	ldr	r1, [r3, #0]
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	f107 0208 	add.w	r2, r7, #8
 8005dc4:	18d4      	adds	r4, r2, r3
 8005dc6:	4608      	mov	r0, r1
 8005dc8:	f001 fa31 	bl	800722e <SDIO_ReadFIFO>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	6023      	str	r3, [r4, #0]
      index++;
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005dd6:	f7fc ff0d 	bl	8002bf4 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d102      	bne.n	8005dec <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005de6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005dea:	e059      	b.n	8005ea0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df2:	f240 432a 	movw	r3, #1066	; 0x42a
 8005df6:	4013      	ands	r3, r2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0d6      	beq.n	8005daa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2208      	movs	r2, #8
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e12:	2308      	movs	r3, #8
 8005e14:	e044      	b.n	8005ea0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e037      	b.n	8005ea0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2220      	movs	r2, #32
 8005e44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005e46:	2320      	movs	r3, #32
 8005e48:	e02a      	b.n	8005ea0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	061a      	lsls	r2, r3, #24
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e60:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	0a1b      	lsrs	r3, r3, #8
 8005e66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e6a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	0e1b      	lsrs	r3, r3, #24
 8005e70:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	601a      	str	r2, [r3, #0]
    scr++;
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	3304      	adds	r3, #4
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	061a      	lsls	r2, r3, #24
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e88:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	0a1b      	lsrs	r3, r3, #8
 8005e8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e92:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	0e1b      	lsrs	r3, r3, #24
 8005e98:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	373c      	adds	r7, #60	; 0x3c
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd90      	pop	{r4, r7, pc}

08005ea8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d03f      	beq.n	8005f42 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e033      	b.n	8005f30 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 f9ae 	bl	800722e <SDIO_ReadFIFO>
 8005ed2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	0c1b      	lsrs	r3, r3, #16
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	0e1b      	lsrs	r3, r3, #24
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3301      	adds	r3, #1
 8005f22:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b07      	cmp	r3, #7
 8005f34:	d9c8      	bls.n	8005ec8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005f42:	bf00      	nop
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b086      	sub	sp, #24
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d043      	beq.n	8005fec <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e037      	b.n	8005fda <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	021a      	lsls	r2, r3, #8
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	041a      	lsls	r2, r3, #16
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	061a      	lsls	r2, r3, #24
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f107 0208 	add.w	r2, r7, #8
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 f93a 	bl	8007248 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b07      	cmp	r3, #7
 8005fde:	d9c4      	bls.n	8005f6a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005fec:	bf00      	nop
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e056      	b.n	80060b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fc fb8d 	bl	8002740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800603c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	ea42 0103 	orr.w	r1, r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	0c1b      	lsrs	r3, r3, #16
 8006084:	f003 0104 	and.w	r1, r3, #4
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69da      	ldr	r2, [r3, #28]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	4613      	mov	r3, r2
 80060ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <HAL_SPI_Transmit+0x22>
 80060da:	2302      	movs	r3, #2
 80060dc:	e11e      	b.n	800631c <HAL_SPI_Transmit+0x260>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060e6:	f7fc fd85 	bl	8002bf4 <HAL_GetTick>
 80060ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d002      	beq.n	8006102 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060fc:	2302      	movs	r3, #2
 80060fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006100:	e103      	b.n	800630a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_SPI_Transmit+0x52>
 8006108:	88fb      	ldrh	r3, [r7, #6]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d102      	bne.n	8006114 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006112:	e0fa      	b.n	800630a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2203      	movs	r2, #3
 8006118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	88fa      	ldrh	r2, [r7, #6]
 800612c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	88fa      	ldrh	r2, [r7, #6]
 8006132:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615a:	d107      	bne.n	800616c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800616a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d007      	beq.n	800618a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006188:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006192:	d14b      	bne.n	800622c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <HAL_SPI_Transmit+0xe6>
 800619c:	8afb      	ldrh	r3, [r7, #22]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d13e      	bne.n	8006220 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	881a      	ldrh	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	1c9a      	adds	r2, r3, #2
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061c6:	e02b      	b.n	8006220 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d112      	bne.n	80061fc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	881a      	ldrh	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80061fa:	e011      	b.n	8006220 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061fc:	f7fc fcfa 	bl	8002bf4 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d803      	bhi.n	8006214 <HAL_SPI_Transmit+0x158>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006212:	d102      	bne.n	800621a <HAL_SPI_Transmit+0x15e>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d102      	bne.n	8006220 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800621e:	e074      	b.n	800630a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1ce      	bne.n	80061c8 <HAL_SPI_Transmit+0x10c>
 800622a:	e04c      	b.n	80062c6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <HAL_SPI_Transmit+0x17e>
 8006234:	8afb      	ldrh	r3, [r7, #22]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d140      	bne.n	80062bc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	330c      	adds	r3, #12
 8006244:	7812      	ldrb	r2, [r2, #0]
 8006246:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006256:	b29b      	uxth	r3, r3
 8006258:	3b01      	subs	r3, #1
 800625a:	b29a      	uxth	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006260:	e02c      	b.n	80062bc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b02      	cmp	r3, #2
 800626e:	d113      	bne.n	8006298 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	7812      	ldrb	r2, [r2, #0]
 800627c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	86da      	strh	r2, [r3, #54]	; 0x36
 8006296:	e011      	b.n	80062bc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006298:	f7fc fcac 	bl	8002bf4 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d803      	bhi.n	80062b0 <HAL_SPI_Transmit+0x1f4>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d102      	bne.n	80062b6 <HAL_SPI_Transmit+0x1fa>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d102      	bne.n	80062bc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062ba:	e026      	b.n	800630a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1cd      	bne.n	8006262 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fba4 	bl	8006a18 <SPI_EndRxTxTransaction>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062e4:	2300      	movs	r3, #0
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	613b      	str	r3, [r7, #16]
 80062f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	77fb      	strb	r3, [r7, #31]
 8006306:	e000      	b.n	800630a <HAL_SPI_Transmit+0x24e>
  }

error:
 8006308:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800631a:	7ffb      	ldrb	r3, [r7, #31]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3720      	adds	r7, #32
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006340:	d112      	bne.n	8006368 <HAL_SPI_Receive+0x44>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10e      	bne.n	8006368 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2204      	movs	r2, #4
 800634e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006352:	88fa      	ldrh	r2, [r7, #6]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f8e9 	bl	8006536 <HAL_SPI_TransmitReceive>
 8006364:	4603      	mov	r3, r0
 8006366:	e0e2      	b.n	800652e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_SPI_Receive+0x52>
 8006372:	2302      	movs	r3, #2
 8006374:	e0db      	b.n	800652e <HAL_SPI_Receive+0x20a>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800637e:	f7fc fc39 	bl	8002bf4 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d002      	beq.n	8006396 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006390:	2302      	movs	r3, #2
 8006392:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006394:	e0c2      	b.n	800651c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_SPI_Receive+0x7e>
 800639c:	88fb      	ldrh	r3, [r7, #6]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d102      	bne.n	80063a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063a6:	e0b9      	b.n	800651c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2204      	movs	r2, #4
 80063ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	88fa      	ldrh	r2, [r7, #6]
 80063c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	88fa      	ldrh	r2, [r7, #6]
 80063c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ee:	d107      	bne.n	8006400 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d007      	beq.n	800641e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800641c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d162      	bne.n	80064ec <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006426:	e02e      	b.n	8006486 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b01      	cmp	r3, #1
 8006434:	d115      	bne.n	8006462 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f103 020c 	add.w	r2, r3, #12
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006442:	7812      	ldrb	r2, [r2, #0]
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006456:	b29b      	uxth	r3, r3
 8006458:	3b01      	subs	r3, #1
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006460:	e011      	b.n	8006486 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006462:	f7fc fbc7 	bl	8002bf4 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d803      	bhi.n	800647a <HAL_SPI_Receive+0x156>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d102      	bne.n	8006480 <HAL_SPI_Receive+0x15c>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006484:	e04a      	b.n	800651c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1cb      	bne.n	8006428 <HAL_SPI_Receive+0x104>
 8006490:	e031      	b.n	80064f6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d113      	bne.n	80064c8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	b292      	uxth	r2, r2
 80064ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	1c9a      	adds	r2, r3, #2
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064c6:	e011      	b.n	80064ec <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064c8:	f7fc fb94 	bl	8002bf4 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d803      	bhi.n	80064e0 <HAL_SPI_Receive+0x1bc>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064de:	d102      	bne.n	80064e6 <HAL_SPI_Receive+0x1c2>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064ea:	e017      	b.n	800651c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1cd      	bne.n	8006492 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 fa27 	bl	800694e <SPI_EndRxTransaction>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2220      	movs	r2, #32
 800650a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	75fb      	strb	r3, [r7, #23]
 8006518:	e000      	b.n	800651c <HAL_SPI_Receive+0x1f8>
  }

error :
 800651a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800652c:	7dfb      	ldrb	r3, [r7, #23]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b08c      	sub	sp, #48	; 0x30
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
 8006542:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006544:	2301      	movs	r3, #1
 8006546:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_SPI_TransmitReceive+0x26>
 8006558:	2302      	movs	r3, #2
 800655a:	e18a      	b.n	8006872 <HAL_SPI_TransmitReceive+0x33c>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006564:	f7fc fb46 	bl	8002bf4 <HAL_GetTick>
 8006568:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800657a:	887b      	ldrh	r3, [r7, #2]
 800657c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800657e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006582:	2b01      	cmp	r3, #1
 8006584:	d00f      	beq.n	80065a6 <HAL_SPI_TransmitReceive+0x70>
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800658c:	d107      	bne.n	800659e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <HAL_SPI_TransmitReceive+0x68>
 8006596:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800659a:	2b04      	cmp	r3, #4
 800659c:	d003      	beq.n	80065a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800659e:	2302      	movs	r3, #2
 80065a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065a4:	e15b      	b.n	800685e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <HAL_SPI_TransmitReceive+0x82>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HAL_SPI_TransmitReceive+0x82>
 80065b2:	887b      	ldrh	r3, [r7, #2]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d103      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065be:	e14e      	b.n	800685e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d003      	beq.n	80065d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2205      	movs	r2, #5
 80065d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	887a      	ldrh	r2, [r7, #2]
 80065e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	887a      	ldrh	r2, [r7, #2]
 80065ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	887a      	ldrh	r2, [r7, #2]
 80065f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	887a      	ldrh	r2, [r7, #2]
 80065fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b40      	cmp	r3, #64	; 0x40
 8006616:	d007      	beq.n	8006628 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006626:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006630:	d178      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <HAL_SPI_TransmitReceive+0x10a>
 800663a:	8b7b      	ldrh	r3, [r7, #26]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d166      	bne.n	800670e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	881a      	ldrh	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	1c9a      	adds	r2, r3, #2
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006664:	e053      	b.n	800670e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b02      	cmp	r3, #2
 8006672:	d11b      	bne.n	80066ac <HAL_SPI_TransmitReceive+0x176>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d016      	beq.n	80066ac <HAL_SPI_TransmitReceive+0x176>
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	2b01      	cmp	r3, #1
 8006682:	d113      	bne.n	80066ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	881a      	ldrh	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006694:	1c9a      	adds	r2, r3, #2
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d119      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x1b8>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d014      	beq.n	80066ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ce:	b292      	uxth	r2, r2
 80066d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	1c9a      	adds	r2, r3, #2
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066ea:	2301      	movs	r3, #1
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066ee:	f7fc fa81 	bl	8002bf4 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d807      	bhi.n	800670e <HAL_SPI_TransmitReceive+0x1d8>
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006704:	d003      	beq.n	800670e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800670c:	e0a7      	b.n	800685e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1a6      	bne.n	8006666 <HAL_SPI_TransmitReceive+0x130>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1a1      	bne.n	8006666 <HAL_SPI_TransmitReceive+0x130>
 8006722:	e07c      	b.n	800681e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <HAL_SPI_TransmitReceive+0x1fc>
 800672c:	8b7b      	ldrh	r3, [r7, #26]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d16b      	bne.n	800680a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	330c      	adds	r3, #12
 800673c:	7812      	ldrb	r2, [r2, #0]
 800673e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006758:	e057      	b.n	800680a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	d11c      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x26c>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d017      	beq.n	80067a2 <HAL_SPI_TransmitReceive+0x26c>
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	2b01      	cmp	r3, #1
 8006776:	d114      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d119      	bne.n	80067e4 <HAL_SPI_TransmitReceive+0x2ae>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d014      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067e0:	2301      	movs	r3, #1
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067e4:	f7fc fa06 	bl	8002bf4 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d803      	bhi.n	80067fc <HAL_SPI_TransmitReceive+0x2c6>
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fa:	d102      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x2cc>
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d103      	bne.n	800680a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006808:	e029      	b.n	800685e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1a2      	bne.n	800675a <HAL_SPI_TransmitReceive+0x224>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d19d      	bne.n	800675a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800681e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006820:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 f8f8 	bl	8006a18 <SPI_EndRxTxTransaction>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d006      	beq.n	800683c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2220      	movs	r2, #32
 8006838:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800683a:	e010      	b.n	800685e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10b      	bne.n	800685c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	e000      	b.n	800685e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800685c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800686e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006872:	4618      	mov	r0, r3
 8006874:	3730      	adds	r7, #48	; 0x30
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	603b      	str	r3, [r7, #0]
 8006886:	4613      	mov	r3, r2
 8006888:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688a:	e04c      	b.n	8006926 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006892:	d048      	beq.n	8006926 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006894:	f7fc f9ae 	bl	8002bf4 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d902      	bls.n	80068aa <SPI_WaitFlagStateUntilTimeout+0x30>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d13d      	bne.n	8006926 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c2:	d111      	bne.n	80068e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068cc:	d004      	beq.n	80068d8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d6:	d107      	bne.n	80068e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f0:	d10f      	bne.n	8006912 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e00f      	b.n	8006946 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4013      	ands	r3, r2
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	429a      	cmp	r2, r3
 8006934:	bf0c      	ite	eq
 8006936:	2301      	moveq	r3, #1
 8006938:	2300      	movne	r3, #0
 800693a:	b2db      	uxtb	r3, r3
 800693c:	461a      	mov	r2, r3
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	429a      	cmp	r2, r3
 8006942:	d1a3      	bne.n	800688c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b086      	sub	sp, #24
 8006952:	af02      	add	r7, sp, #8
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006962:	d111      	bne.n	8006988 <SPI_EndRxTransaction+0x3a>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696c:	d004      	beq.n	8006978 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006976:	d107      	bne.n	8006988 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006986:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006990:	d12a      	bne.n	80069e8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800699a:	d012      	beq.n	80069c2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2200      	movs	r2, #0
 80069a4:	2180      	movs	r1, #128	; 0x80
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff ff67 	bl	800687a <SPI_WaitFlagStateUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d02d      	beq.n	8006a0e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	f043 0220 	orr.w	r2, r3, #32
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e026      	b.n	8006a10 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2200      	movs	r2, #0
 80069ca:	2101      	movs	r1, #1
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff ff54 	bl	800687a <SPI_WaitFlagStateUntilTimeout>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01a      	beq.n	8006a0e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069dc:	f043 0220 	orr.w	r2, r3, #32
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e013      	b.n	8006a10 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2200      	movs	r2, #0
 80069f0:	2101      	movs	r1, #1
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f7ff ff41 	bl	800687a <SPI_WaitFlagStateUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a02:	f043 0220 	orr.w	r2, r3, #32
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e000      	b.n	8006a10 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a24:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <SPI_EndRxTxTransaction+0x7c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1b      	ldr	r2, [pc, #108]	; (8006a98 <SPI_EndRxTxTransaction+0x80>)
 8006a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2e:	0d5b      	lsrs	r3, r3, #21
 8006a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a34:	fb02 f303 	mul.w	r3, r2, r3
 8006a38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a42:	d112      	bne.n	8006a6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	2180      	movs	r1, #128	; 0x80
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7ff ff13 	bl	800687a <SPI_WaitFlagStateUntilTimeout>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d016      	beq.n	8006a88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5e:	f043 0220 	orr.w	r2, r3, #32
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e00f      	b.n	8006a8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a80:	2b80      	cmp	r3, #128	; 0x80
 8006a82:	d0f2      	beq.n	8006a6a <SPI_EndRxTxTransaction+0x52>
 8006a84:	e000      	b.n	8006a88 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a86:	bf00      	nop
  }

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000078 	.word	0x20000078
 8006a98:	165e9f81 	.word	0x165e9f81

08006a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e01d      	b.n	8006aea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fb feca 	bl	800285c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f000 fa26 	bl	8006f2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0201 	orr.w	r2, r2, #1
 8006b08:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b06      	cmp	r3, #6
 8006b1a:	d007      	beq.n	8006b2c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b086      	sub	sp, #24
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e083      	b.n	8006c56 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fb fe34 	bl	80027d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6812      	ldr	r2, [r2, #0]
 8006b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b7e:	f023 0307 	bic.w	r3, r3, #7
 8006b82:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	f000 f9cc 	bl	8006f2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bbc:	f023 0303 	bic.w	r3, r3, #3
 8006bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	689a      	ldr	r2, [r3, #8]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006bda:	f023 030c 	bic.w	r3, r3, #12
 8006bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	011a      	lsls	r2, r3, #4
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c18:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c20:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <HAL_TIM_Encoder_Start+0x16>
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d008      	beq.n	8006c84 <HAL_TIM_Encoder_Start+0x26>
 8006c72:	e00f      	b.n	8006c94 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 f9f5 	bl	800706c <TIM_CCxChannelCmd>
      break;
 8006c82:	e016      	b.n	8006cb2 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	2104      	movs	r1, #4
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 f9ed 	bl	800706c <TIM_CCxChannelCmd>
      break;
 8006c92:	e00e      	b.n	8006cb2 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 f9e5 	bl	800706c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	2104      	movs	r1, #4
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 f9de 	bl	800706c <TIM_CCxChannelCmd>
      break;
 8006cb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0201 	orr.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d122      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d11b      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f06f 0202 	mvn.w	r2, #2
 8006cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f8ee 	bl	8006ef0 <HAL_TIM_IC_CaptureCallback>
 8006d14:	e005      	b.n	8006d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f8e0 	bl	8006edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f8f1 	bl	8006f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d122      	bne.n	8006d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d11b      	bne.n	8006d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f06f 0204 	mvn.w	r2, #4
 8006d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8c4 	bl	8006ef0 <HAL_TIM_IC_CaptureCallback>
 8006d68:	e005      	b.n	8006d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f8b6 	bl	8006edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f8c7 	bl	8006f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d122      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0308 	and.w	r3, r3, #8
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d11b      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0208 	mvn.w	r2, #8
 8006da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2204      	movs	r2, #4
 8006da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f89a 	bl	8006ef0 <HAL_TIM_IC_CaptureCallback>
 8006dbc:	e005      	b.n	8006dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f88c 	bl	8006edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f89d 	bl	8006f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0310 	and.w	r3, r3, #16
 8006dda:	2b10      	cmp	r3, #16
 8006ddc:	d122      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d11b      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0210 	mvn.w	r2, #16
 8006df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2208      	movs	r2, #8
 8006dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f870 	bl	8006ef0 <HAL_TIM_IC_CaptureCallback>
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f862 	bl	8006edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f873 	bl	8006f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d10e      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d107      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0201 	mvn.w	r2, #1
 8006e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fa fc12 	bl	8001674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5a:	2b80      	cmp	r3, #128	; 0x80
 8006e5c:	d10e      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e68:	2b80      	cmp	r3, #128	; 0x80
 8006e6a:	d107      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f9a4 	bl	80071c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e86:	2b40      	cmp	r3, #64	; 0x40
 8006e88:	d10e      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e94:	2b40      	cmp	r3, #64	; 0x40
 8006e96:	d107      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f838 	bl	8006f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d10e      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b20      	cmp	r3, #32
 8006ec2:	d107      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0220 	mvn.w	r2, #32
 8006ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f96e 	bl	80071b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a40      	ldr	r2, [pc, #256]	; (8007040 <TIM_Base_SetConfig+0x114>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d013      	beq.n	8006f6c <TIM_Base_SetConfig+0x40>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4a:	d00f      	beq.n	8006f6c <TIM_Base_SetConfig+0x40>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a3d      	ldr	r2, [pc, #244]	; (8007044 <TIM_Base_SetConfig+0x118>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00b      	beq.n	8006f6c <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a3c      	ldr	r2, [pc, #240]	; (8007048 <TIM_Base_SetConfig+0x11c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d007      	beq.n	8006f6c <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a3b      	ldr	r2, [pc, #236]	; (800704c <TIM_Base_SetConfig+0x120>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d003      	beq.n	8006f6c <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a3a      	ldr	r2, [pc, #232]	; (8007050 <TIM_Base_SetConfig+0x124>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d108      	bne.n	8006f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a2f      	ldr	r2, [pc, #188]	; (8007040 <TIM_Base_SetConfig+0x114>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d02b      	beq.n	8006fde <TIM_Base_SetConfig+0xb2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8c:	d027      	beq.n	8006fde <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2c      	ldr	r2, [pc, #176]	; (8007044 <TIM_Base_SetConfig+0x118>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d023      	beq.n	8006fde <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a2b      	ldr	r2, [pc, #172]	; (8007048 <TIM_Base_SetConfig+0x11c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01f      	beq.n	8006fde <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a2a      	ldr	r2, [pc, #168]	; (800704c <TIM_Base_SetConfig+0x120>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d01b      	beq.n	8006fde <TIM_Base_SetConfig+0xb2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a29      	ldr	r2, [pc, #164]	; (8007050 <TIM_Base_SetConfig+0x124>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d017      	beq.n	8006fde <TIM_Base_SetConfig+0xb2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a28      	ldr	r2, [pc, #160]	; (8007054 <TIM_Base_SetConfig+0x128>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d013      	beq.n	8006fde <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a27      	ldr	r2, [pc, #156]	; (8007058 <TIM_Base_SetConfig+0x12c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00f      	beq.n	8006fde <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a26      	ldr	r2, [pc, #152]	; (800705c <TIM_Base_SetConfig+0x130>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00b      	beq.n	8006fde <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a25      	ldr	r2, [pc, #148]	; (8007060 <TIM_Base_SetConfig+0x134>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d007      	beq.n	8006fde <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a24      	ldr	r2, [pc, #144]	; (8007064 <TIM_Base_SetConfig+0x138>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d003      	beq.n	8006fde <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a23      	ldr	r2, [pc, #140]	; (8007068 <TIM_Base_SetConfig+0x13c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d108      	bne.n	8006ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a0a      	ldr	r2, [pc, #40]	; (8007040 <TIM_Base_SetConfig+0x114>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d003      	beq.n	8007024 <TIM_Base_SetConfig+0xf8>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a0c      	ldr	r2, [pc, #48]	; (8007050 <TIM_Base_SetConfig+0x124>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d103      	bne.n	800702c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	691a      	ldr	r2, [r3, #16]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	615a      	str	r2, [r3, #20]
}
 8007032:	bf00      	nop
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40010000 	.word	0x40010000
 8007044:	40000400 	.word	0x40000400
 8007048:	40000800 	.word	0x40000800
 800704c:	40000c00 	.word	0x40000c00
 8007050:	40010400 	.word	0x40010400
 8007054:	40014000 	.word	0x40014000
 8007058:	40014400 	.word	0x40014400
 800705c:	40014800 	.word	0x40014800
 8007060:	40001800 	.word	0x40001800
 8007064:	40001c00 	.word	0x40001c00
 8007068:	40002000 	.word	0x40002000

0800706c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f003 031f 	and.w	r3, r3, #31
 800707e:	2201      	movs	r2, #1
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a1a      	ldr	r2, [r3, #32]
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	43db      	mvns	r3, r3
 800708e:	401a      	ands	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a1a      	ldr	r2, [r3, #32]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f003 031f 	and.w	r3, r3, #31
 800709e:	6879      	ldr	r1, [r7, #4]
 80070a0:	fa01 f303 	lsl.w	r3, r1, r3
 80070a4:	431a      	orrs	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e05a      	b.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a21      	ldr	r2, [pc, #132]	; (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d022      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711c:	d01d      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1d      	ldr	r2, [pc, #116]	; (8007198 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d018      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1b      	ldr	r2, [pc, #108]	; (800719c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d013      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1a      	ldr	r2, [pc, #104]	; (80071a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00e      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d009      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a17      	ldr	r2, [pc, #92]	; (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d004      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a15      	ldr	r2, [pc, #84]	; (80071ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d10c      	bne.n	8007174 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	4313      	orrs	r3, r2
 800716a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40010000 	.word	0x40010000
 8007198:	40000400 	.word	0x40000400
 800719c:	40000800 	.word	0x40000800
 80071a0:	40000c00 	.word	0x40000c00
 80071a4:	40010400 	.word	0x40010400
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40001800 	.word	0x40001800

080071b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80071d8:	b084      	sub	sp, #16
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	f107 001c 	add.w	r0, r7, #28
 80071e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80071ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80071f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80071f2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80071f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80071fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80071fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007202:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007212:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	431a      	orrs	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	b004      	add	sp, #16
 800722c:	4770      	bx	lr

0800722e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2203      	movs	r2, #3
 8007276:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007278:	2002      	movs	r0, #2
 800727a:	f7fb fcc7 	bl	8002c0c <HAL_Delay>
  
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0303 	and.w	r3, r3, #3
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80072c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80072ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80072de:	f023 030f 	bic.w	r3, r3, #15
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	b2db      	uxtb	r3, r3
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3314      	adds	r3, #20
 8007320:	461a      	mov	r2, r3
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	4413      	add	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
}  
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800735e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007364:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800736a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	431a      	orrs	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007382:	2300      	movs	r3, #0

}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800739e:	2310      	movs	r3, #16
 80073a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073a2:	2340      	movs	r3, #64	; 0x40
 80073a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073a6:	2300      	movs	r3, #0
 80073a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073b0:	f107 0308 	add.w	r3, r7, #8
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff ff74 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80073bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c0:	2110      	movs	r1, #16
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa40 	bl	8007848 <SDMMC_GetCmdResp1>
 80073c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073ca:	69fb      	ldr	r3, [r7, #28]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3720      	adds	r7, #32
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80073e2:	2311      	movs	r3, #17
 80073e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073e6:	2340      	movs	r3, #64	; 0x40
 80073e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073ea:	2300      	movs	r3, #0
 80073ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073f4:	f107 0308 	add.w	r3, r7, #8
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff ff52 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007400:	f241 3288 	movw	r2, #5000	; 0x1388
 8007404:	2111      	movs	r1, #17
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa1e 	bl	8007848 <SDMMC_GetCmdResp1>
 800740c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800740e:	69fb      	ldr	r3, [r7, #28]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3720      	adds	r7, #32
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007426:	2312      	movs	r3, #18
 8007428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800742a:	2340      	movs	r3, #64	; 0x40
 800742c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800742e:	2300      	movs	r3, #0
 8007430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007436:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007438:	f107 0308 	add.w	r3, r7, #8
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff ff30 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007444:	f241 3288 	movw	r2, #5000	; 0x1388
 8007448:	2112      	movs	r1, #18
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9fc 	bl	8007848 <SDMMC_GetCmdResp1>
 8007450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007452:	69fb      	ldr	r3, [r7, #28]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3720      	adds	r7, #32
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800746a:	2318      	movs	r3, #24
 800746c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800746e:	2340      	movs	r3, #64	; 0x40
 8007470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800747a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800747c:	f107 0308 	add.w	r3, r7, #8
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff ff0e 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007488:	f241 3288 	movw	r2, #5000	; 0x1388
 800748c:	2118      	movs	r1, #24
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f9da 	bl	8007848 <SDMMC_GetCmdResp1>
 8007494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007496:	69fb      	ldr	r3, [r7, #28]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3720      	adds	r7, #32
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b088      	sub	sp, #32
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80074ae:	2319      	movs	r3, #25
 80074b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074b2:	2340      	movs	r3, #64	; 0x40
 80074b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074c0:	f107 0308 	add.w	r3, r7, #8
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff feec 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80074cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d0:	2119      	movs	r1, #25
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f9b8 	bl	8007848 <SDMMC_GetCmdResp1>
 80074d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074da:	69fb      	ldr	r3, [r7, #28]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3720      	adds	r7, #32
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80074f0:	230c      	movs	r3, #12
 80074f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074f4:	2340      	movs	r3, #64	; 0x40
 80074f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074f8:	2300      	movs	r3, #0
 80074fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007500:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007502:	f107 0308 	add.w	r3, r7, #8
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff fecb 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800750e:	4a05      	ldr	r2, [pc, #20]	; (8007524 <SDMMC_CmdStopTransfer+0x40>)
 8007510:	210c      	movs	r1, #12
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f998 	bl	8007848 <SDMMC_GetCmdResp1>
 8007518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800751a:	69fb      	ldr	r3, [r7, #28]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	05f5e100 	.word	0x05f5e100

08007528 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	; 0x28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007538:	2307      	movs	r3, #7
 800753a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800753c:	2340      	movs	r3, #64	; 0x40
 800753e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007540:	2300      	movs	r3, #0
 8007542:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007548:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800754a:	f107 0310 	add.w	r3, r7, #16
 800754e:	4619      	mov	r1, r3
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff fea7 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007556:	f241 3288 	movw	r2, #5000	; 0x1388
 800755a:	2107      	movs	r1, #7
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 f973 	bl	8007848 <SDMMC_GetCmdResp1>
 8007562:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007566:	4618      	mov	r0, r3
 8007568:	3728      	adds	r7, #40	; 0x28
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b088      	sub	sp, #32
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800757e:	2300      	movs	r3, #0
 8007580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007582:	2300      	movs	r3, #0
 8007584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800758a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800758c:	f107 0308 	add.w	r3, r7, #8
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fe86 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f92d 	bl	80077f8 <SDMMC_GetCmdError>
 800759e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075a0:	69fb      	ldr	r3, [r7, #28]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3720      	adds	r7, #32
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b088      	sub	sp, #32
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80075b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80075b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80075b8:	2308      	movs	r3, #8
 80075ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075bc:	2340      	movs	r3, #64	; 0x40
 80075be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075ca:	f107 0308 	add.w	r3, r7, #8
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff fe67 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fb16 	bl	8007c08 <SDMMC_GetCmdResp7>
 80075dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075de:	69fb      	ldr	r3, [r7, #28]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80075f6:	2337      	movs	r3, #55	; 0x37
 80075f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075fa:	2340      	movs	r3, #64	; 0x40
 80075fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007606:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007608:	f107 0308 	add.w	r3, r7, #8
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff fe48 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007614:	f241 3288 	movw	r2, #5000	; 0x1388
 8007618:	2137      	movs	r1, #55	; 0x37
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f914 	bl	8007848 <SDMMC_GetCmdResp1>
 8007620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007622:	69fb      	ldr	r3, [r7, #28]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3720      	adds	r7, #32
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800763c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007642:	2329      	movs	r3, #41	; 0x29
 8007644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007646:	2340      	movs	r3, #64	; 0x40
 8007648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800764e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007652:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007654:	f107 0308 	add.w	r3, r7, #8
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff fe22 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fa23 	bl	8007aac <SDMMC_GetCmdResp3>
 8007666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007668:	69fb      	ldr	r3, [r7, #28]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3720      	adds	r7, #32
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b088      	sub	sp, #32
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007680:	2306      	movs	r3, #6
 8007682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007684:	2340      	movs	r3, #64	; 0x40
 8007686:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007688:	2300      	movs	r3, #0
 800768a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800768c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007690:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007692:	f107 0308 	add.w	r3, r7, #8
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7ff fe03 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800769e:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a2:	2106      	movs	r1, #6
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f8cf 	bl	8007848 <SDMMC_GetCmdResp1>
 80076aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076ac:	69fb      	ldr	r3, [r7, #28]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b088      	sub	sp, #32
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80076c2:	2333      	movs	r3, #51	; 0x33
 80076c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076c6:	2340      	movs	r3, #64	; 0x40
 80076c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076d4:	f107 0308 	add.w	r3, r7, #8
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff fde2 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80076e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e4:	2133      	movs	r1, #51	; 0x33
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f8ae 	bl	8007848 <SDMMC_GetCmdResp1>
 80076ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076ee:	69fb      	ldr	r3, [r7, #28]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007704:	2302      	movs	r3, #2
 8007706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007708:	23c0      	movs	r3, #192	; 0xc0
 800770a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800770c:	2300      	movs	r3, #0
 800770e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007714:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007716:	f107 0308 	add.w	r3, r7, #8
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff fdc1 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f97c 	bl	8007a20 <SDMMC_GetCmdResp2>
 8007728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800772a:	69fb      	ldr	r3, [r7, #28]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3720      	adds	r7, #32
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007742:	2309      	movs	r3, #9
 8007744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007746:	23c0      	movs	r3, #192	; 0xc0
 8007748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800774e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007752:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007754:	f107 0308 	add.w	r3, r7, #8
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff fda2 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f95d 	bl	8007a20 <SDMMC_GetCmdResp2>
 8007766:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007768:	69fb      	ldr	r3, [r7, #28]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3720      	adds	r7, #32
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b088      	sub	sp, #32
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007780:	2303      	movs	r3, #3
 8007782:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007784:	2340      	movs	r3, #64	; 0x40
 8007786:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800778c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007790:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007792:	f107 0308 	add.w	r3, r7, #8
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff fd83 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	2103      	movs	r1, #3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f9bc 	bl	8007b20 <SDMMC_GetCmdResp6>
 80077a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077aa:	69fb      	ldr	r3, [r7, #28]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3720      	adds	r7, #32
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80077c2:	230d      	movs	r3, #13
 80077c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077c6:	2340      	movs	r3, #64	; 0x40
 80077c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077ca:	2300      	movs	r3, #0
 80077cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077d4:	f107 0308 	add.w	r3, r7, #8
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7ff fd62 	bl	80072a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80077e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e4:	210d      	movs	r1, #13
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f82e 	bl	8007848 <SDMMC_GetCmdResp1>
 80077ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077ee:	69fb      	ldr	r3, [r7, #28]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3720      	adds	r7, #32
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80077f8:	b490      	push	{r4, r7}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007800:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <SDMMC_GetCmdError+0x48>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a0f      	ldr	r2, [pc, #60]	; (8007844 <SDMMC_GetCmdError+0x4c>)
 8007806:	fba2 2303 	umull	r2, r3, r2, r3
 800780a:	0a5b      	lsrs	r3, r3, #9
 800780c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007810:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007814:	4623      	mov	r3, r4
 8007816:	1e5c      	subs	r4, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800781c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007820:	e009      	b.n	8007836 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0f2      	beq.n	8007814 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	22c5      	movs	r2, #197	; 0xc5
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bc90      	pop	{r4, r7}
 800783e:	4770      	bx	lr
 8007840:	20000078 	.word	0x20000078
 8007844:	10624dd3 	.word	0x10624dd3

08007848 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007848:	b590      	push	{r4, r7, lr}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	460b      	mov	r3, r1
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007856:	4b6f      	ldr	r3, [pc, #444]	; (8007a14 <SDMMC_GetCmdResp1+0x1cc>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a6f      	ldr	r2, [pc, #444]	; (8007a18 <SDMMC_GetCmdResp1+0x1d0>)
 800785c:	fba2 2303 	umull	r2, r3, r2, r3
 8007860:	0a5b      	lsrs	r3, r3, #9
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007868:	4623      	mov	r3, r4
 800786a:	1e5c      	subs	r4, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007870:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007874:	e0c9      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0f0      	beq.n	8007868 <SDMMC_GetCmdResp1+0x20>
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1eb      	bne.n	8007868 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2204      	movs	r2, #4
 80078a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078a2:	2304      	movs	r3, #4
 80078a4:	e0b1      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0a6      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	22c5      	movs	r2, #197	; 0xc5
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7ff fd18 	bl	80072f8 <SDIO_GetCommandResponse>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	7afb      	ldrb	r3, [r7, #11]
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d001      	beq.n	80078d6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e099      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80078d6:	2100      	movs	r1, #0
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f7ff fd1a 	bl	8007312 <SDIO_GetResponse>
 80078de:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4b4e      	ldr	r3, [pc, #312]	; (8007a1c <SDMMC_GetCmdResp1+0x1d4>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80078ea:	2300      	movs	r3, #0
 80078ec:	e08d      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	da02      	bge.n	80078fa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80078f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078f8:	e087      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007904:	2340      	movs	r3, #64	; 0x40
 8007906:	e080      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007912:	2380      	movs	r3, #128	; 0x80
 8007914:	e079      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007924:	e071      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007934:	e069      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007944:	e061      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007954:	e059      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007964:	e051      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007974:	e049      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007984:	e041      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007994:	e039      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80079a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079a4:	e031      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80079b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80079b4:	e029      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80079c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80079c4:	e021      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80079d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80079d4:	e019      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80079e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80079e4:	e011      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80079f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80079f4:	e009      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f003 0308 	and.w	r3, r3, #8
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007a00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007a04:	e001      	b.n	8007a0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd90      	pop	{r4, r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000078 	.word	0x20000078
 8007a18:	10624dd3 	.word	0x10624dd3
 8007a1c:	fdffe008 	.word	0xfdffe008

08007a20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007a20:	b490      	push	{r4, r7}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a28:	4b1e      	ldr	r3, [pc, #120]	; (8007aa4 <SDMMC_GetCmdResp2+0x84>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a1e      	ldr	r2, [pc, #120]	; (8007aa8 <SDMMC_GetCmdResp2+0x88>)
 8007a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a32:	0a5b      	lsrs	r3, r3, #9
 8007a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	1e5c      	subs	r4, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d102      	bne.n	8007a4a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a48:	e026      	b.n	8007a98 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0f0      	beq.n	8007a3c <SDMMC_GetCmdResp2+0x1c>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1eb      	bne.n	8007a3c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d004      	beq.n	8007a7a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2204      	movs	r2, #4
 8007a74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a76:	2304      	movs	r3, #4
 8007a78:	e00e      	b.n	8007a98 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e003      	b.n	8007a98 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	22c5      	movs	r2, #197	; 0xc5
 8007a94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc90      	pop	{r4, r7}
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000078 	.word	0x20000078
 8007aa8:	10624dd3 	.word	0x10624dd3

08007aac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007aac:	b490      	push	{r4, r7}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ab4:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <SDMMC_GetCmdResp3+0x6c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a18      	ldr	r2, [pc, #96]	; (8007b1c <SDMMC_GetCmdResp3+0x70>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	0a5b      	lsrs	r3, r3, #9
 8007ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007ac8:	4623      	mov	r3, r4
 8007aca:	1e5c      	subs	r4, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d102      	bne.n	8007ad6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ad0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ad4:	e01b      	b.n	8007b0e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ada:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0f0      	beq.n	8007ac8 <SDMMC_GetCmdResp3+0x1c>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1eb      	bne.n	8007ac8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2204      	movs	r2, #4
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b02:	2304      	movs	r3, #4
 8007b04:	e003      	b.n	8007b0e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	22c5      	movs	r2, #197	; 0xc5
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc90      	pop	{r4, r7}
 8007b16:	4770      	bx	lr
 8007b18:	20000078 	.word	0x20000078
 8007b1c:	10624dd3 	.word	0x10624dd3

08007b20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007b20:	b590      	push	{r4, r7, lr}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b2e:	4b34      	ldr	r3, [pc, #208]	; (8007c00 <SDMMC_GetCmdResp6+0xe0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a34      	ldr	r2, [pc, #208]	; (8007c04 <SDMMC_GetCmdResp6+0xe4>)
 8007b34:	fba2 2303 	umull	r2, r3, r2, r3
 8007b38:	0a5b      	lsrs	r3, r3, #9
 8007b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007b42:	4623      	mov	r3, r4
 8007b44:	1e5c      	subs	r4, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b4e:	e052      	b.n	8007bf6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b54:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0f0      	beq.n	8007b42 <SDMMC_GetCmdResp6+0x22>
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1eb      	bne.n	8007b42 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d004      	beq.n	8007b80 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2204      	movs	r2, #4
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b7c:	2304      	movs	r3, #4
 8007b7e:	e03a      	b.n	8007bf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d004      	beq.n	8007b96 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e02f      	b.n	8007bf6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff fbae 	bl	80072f8 <SDIO_GetCommandResponse>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d001      	beq.n	8007baa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e025      	b.n	8007bf6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	22c5      	movs	r2, #197	; 0xc5
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff fbad 	bl	8007312 <SDIO_GetResponse>
 8007bb8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d106      	bne.n	8007bd2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	0c1b      	lsrs	r3, r3, #16
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e011      	b.n	8007bf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007be0:	e009      	b.n	8007bf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bf0:	e001      	b.n	8007bf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd90      	pop	{r4, r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000078 	.word	0x20000078
 8007c04:	10624dd3 	.word	0x10624dd3

08007c08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007c08:	b490      	push	{r4, r7}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c10:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <SDMMC_GetCmdResp7+0x90>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a21      	ldr	r2, [pc, #132]	; (8007c9c <SDMMC_GetCmdResp7+0x94>)
 8007c16:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1a:	0a5b      	lsrs	r3, r3, #9
 8007c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007c24:	4623      	mov	r3, r4
 8007c26:	1e5c      	subs	r4, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d102      	bne.n	8007c32 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c30:	e02c      	b.n	8007c8c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c36:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0f0      	beq.n	8007c24 <SDMMC_GetCmdResp7+0x1c>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1eb      	bne.n	8007c24 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d004      	beq.n	8007c62 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c5e:	2304      	movs	r3, #4
 8007c60:	e014      	b.n	8007c8c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e009      	b.n	8007c8c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2240      	movs	r2, #64	; 0x40
 8007c88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007c8a:	2300      	movs	r3, #0
  
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bc90      	pop	{r4, r7}
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	20000078 	.word	0x20000078
 8007c9c:	10624dd3 	.word	0x10624dd3

08007ca0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007ca4:	4904      	ldr	r1, [pc, #16]	; (8007cb8 <MX_FATFS_Init+0x18>)
 8007ca6:	4805      	ldr	r0, [pc, #20]	; (8007cbc <MX_FATFS_Init+0x1c>)
 8007ca8:	f003 fc0c 	bl	800b4c4 <FATFS_LinkDriver>
 8007cac:	4603      	mov	r3, r0
 8007cae:	461a      	mov	r2, r3
 8007cb0:	4b03      	ldr	r3, [pc, #12]	; (8007cc0 <MX_FATFS_Init+0x20>)
 8007cb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007cb4:	bf00      	nop
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20004d90 	.word	0x20004d90
 8007cbc:	0800e2e4 	.word	0x0800e2e4
 8007cc0:	20004d8c 	.word	0x20004d8c

08007cc4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007cc8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007cde:	f000 f896 	bl	8007e0e <BSP_SD_IsDetected>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d001      	beq.n	8007cec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e012      	b.n	8007d12 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007cec:	480b      	ldr	r0, [pc, #44]	; (8007d1c <BSP_SD_Init+0x48>)
 8007cee:	f7fc fe83 	bl	80049f8 <HAL_SD_Init>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d109      	bne.n	8007d10 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007cfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d00:	4806      	ldr	r0, [pc, #24]	; (8007d1c <BSP_SD_Init+0x48>)
 8007d02:	f7fd fc43 	bl	800558c <HAL_SD_ConfigWideBusOperation>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007d10:	79fb      	ldrb	r3, [r7, #7]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20001bc0 	.word	0x20001bc0

08007d20 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	68f9      	ldr	r1, [r7, #12]
 8007d36:	4806      	ldr	r0, [pc, #24]	; (8007d50 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007d38:	f7fc feee 	bl	8004b18 <HAL_SD_ReadBlocks_DMA>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20001bc0 	.word	0x20001bc0

08007d54 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	68f9      	ldr	r1, [r7, #12]
 8007d6a:	4806      	ldr	r0, [pc, #24]	; (8007d84 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007d6c:	f7fc ffbe 	bl	8004cec <HAL_SD_WriteBlocks_DMA>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	20001bc0 	.word	0x20001bc0

08007d88 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007d8c:	4805      	ldr	r0, [pc, #20]	; (8007da4 <BSP_SD_GetCardState+0x1c>)
 8007d8e:	f7fd fc79 	bl	8005684 <HAL_SD_GetCardState>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	bf14      	ite	ne
 8007d98:	2301      	movne	r3, #1
 8007d9a:	2300      	moveq	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20001bc0 	.word	0x20001bc0

08007da8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007db0:	6879      	ldr	r1, [r7, #4]
 8007db2:	4803      	ldr	r0, [pc, #12]	; (8007dc0 <BSP_SD_GetCardInfo+0x18>)
 8007db4:	f7fd fbbe 	bl	8005534 <HAL_SD_GetCardInfo>
}
 8007db8:	bf00      	nop
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20001bc0 	.word	0x20001bc0

08007dc4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007dcc:	f000 f818 	bl	8007e00 <BSP_SD_AbortCallback>
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007de0:	f000 fa54 	bl	800828c <BSP_SD_WriteCpltCallback>
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007df4:	f000 fa56 	bl	80082a4 <BSP_SD_ReadCpltCallback>
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0

}
 8007e04:	bf00      	nop
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007e14:	2301      	movs	r3, #1
 8007e16:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007e18:	f000 f80c 	bl	8007e34 <BSP_PlatformIsDetected>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007e22:	2300      	movs	r3, #0
 8007e24:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007e26:	79fb      	ldrb	r3, [r7, #7]
 8007e28:	b2db      	uxtb	r3, r3
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007e3e:	2180      	movs	r1, #128	; 0x80
 8007e40:	480a      	ldr	r0, [pc, #40]	; (8007e6c <BSP_PlatformIsDetected+0x38>)
 8007e42:	f7fc f937 	bl	80040b4 <HAL_GPIO_ReadPin>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    //printf("s - %u\n", status);
    if(status == SD_PRESENT) status = SD_NOT_PRESENT;
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d102      	bne.n	8007e5c <BSP_PlatformIsDetected+0x28>
 8007e56:	2300      	movs	r3, #0
 8007e58:	71fb      	strb	r3, [r7, #7]
 8007e5a:	e001      	b.n	8007e60 <BSP_PlatformIsDetected+0x2c>
    else status = SD_PRESENT;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	71fb      	strb	r3, [r7, #7]
    //printf("s - %u\n", status);
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8007e60:	79fb      	ldrb	r3, [r7, #7]
}  
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	40020800 	.word	0x40020800

08007e70 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007e78:	f7fa febc 	bl	8002bf4 <HAL_GetTick>
 8007e7c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007e7e:	e006      	b.n	8007e8e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e80:	f7ff ff82 	bl	8007d88 <BSP_SD_GetCardState>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	e009      	b.n	8007ea2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007e8e:	f7fa feb1 	bl	8002bf4 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d8f0      	bhi.n	8007e80 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <SD_CheckStatus+0x38>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007ebc:	f7ff ff64 	bl	8007d88 <BSP_SD_GetCardState>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d107      	bne.n	8007ed6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007ec6:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <SD_CheckStatus+0x38>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f023 0301 	bic.w	r3, r3, #1
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <SD_CheckStatus+0x38>)
 8007ed4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007ed6:	4b03      	ldr	r3, [pc, #12]	; (8007ee4 <SD_CheckStatus+0x38>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	b2db      	uxtb	r3, r3
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	20000081 	.word	0x20000081

08007ee8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007ef2:	f7ff feef 	bl	8007cd4 <BSP_SD_Init>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d107      	bne.n	8007f0c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7ff ffd4 	bl	8007eac <SD_CheckStatus>
 8007f04:	4603      	mov	r3, r0
 8007f06:	461a      	mov	r2, r3
 8007f08:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <SD_initialize+0x34>)
 8007f0a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8007f0c:	4b03      	ldr	r3, [pc, #12]	; (8007f1c <SD_initialize+0x34>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	b2db      	uxtb	r3, r3
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000081 	.word	0x20000081

08007f20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff ffbd 	bl	8007eac <SD_CheckStatus>
 8007f32:	4603      	mov	r3, r0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007f50:	f247 5030 	movw	r0, #30000	; 0x7530
 8007f54:	f7ff ff8c 	bl	8007e70 <SD_CheckStatusWithTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	da01      	bge.n	8007f62 <SD_read+0x26>
  {
    return res;
 8007f5e:	7ffb      	ldrb	r3, [r7, #31]
 8007f60:	e08b      	b.n	800807a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f003 0303 	and.w	r3, r3, #3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f040 8085 	bne.w	8008078 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	68b8      	ldr	r0, [r7, #8]
 8007f74:	f7ff fed4 	bl	8007d20 <BSP_SD_ReadBlocks_DMA>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d133      	bne.n	8007fe6 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007f7e:	4b41      	ldr	r3, [pc, #260]	; (8008084 <SD_read+0x148>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007f84:	f7fa fe36 	bl	8002bf4 <HAL_GetTick>
 8007f88:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007f8a:	bf00      	nop
 8007f8c:	4b3d      	ldr	r3, [pc, #244]	; (8008084 <SD_read+0x148>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d108      	bne.n	8007fa6 <SD_read+0x6a>
 8007f94:	f7fa fe2e 	bl	8002bf4 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	f247 522f 	movw	r2, #29999	; 0x752f
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d9f2      	bls.n	8007f8c <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8007fa6:	4b37      	ldr	r3, [pc, #220]	; (8008084 <SD_read+0x148>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d102      	bne.n	8007fb4 <SD_read+0x78>
      {
        res = RES_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	77fb      	strb	r3, [r7, #31]
 8007fb2:	e061      	b.n	8008078 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8007fb4:	4b33      	ldr	r3, [pc, #204]	; (8008084 <SD_read+0x148>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007fba:	f7fa fe1b 	bl	8002bf4 <HAL_GetTick>
 8007fbe:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007fc0:	e007      	b.n	8007fd2 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007fc2:	f7ff fee1 	bl	8007d88 <BSP_SD_GetCardState>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <SD_read+0x96>
          {
            res = RES_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007fd0:	e052      	b.n	8008078 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007fd2:	f7fa fe0f 	bl	8002bf4 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	f247 522f 	movw	r2, #29999	; 0x752f
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d9ee      	bls.n	8007fc2 <SD_read+0x86>
 8007fe4:	e048      	b.n	8008078 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	61bb      	str	r3, [r7, #24]
 8007fea:	e034      	b.n	8008056 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	607a      	str	r2, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4824      	ldr	r0, [pc, #144]	; (8008088 <SD_read+0x14c>)
 8007ff8:	f7ff fe92 	bl	8007d20 <BSP_SD_ReadBlocks_DMA>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8008000:	7fbb      	ldrb	r3, [r7, #30]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d12c      	bne.n	8008060 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8008006:	4b1f      	ldr	r3, [pc, #124]	; (8008084 <SD_read+0x148>)
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800800c:	f7fa fdf2 	bl	8002bf4 <HAL_GetTick>
 8008010:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008012:	bf00      	nop
 8008014:	4b1b      	ldr	r3, [pc, #108]	; (8008084 <SD_read+0x148>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d108      	bne.n	800802e <SD_read+0xf2>
 800801c:	f7fa fdea 	bl	8002bf4 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	f247 522f 	movw	r2, #29999	; 0x752f
 800802a:	4293      	cmp	r3, r2
 800802c:	d9f2      	bls.n	8008014 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800802e:	4b15      	ldr	r3, [pc, #84]	; (8008084 <SD_read+0x148>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d016      	beq.n	8008064 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	4a13      	ldr	r2, [pc, #76]	; (8008088 <SD_read+0x14c>)
 800803a:	4618      	mov	r0, r3
 800803c:	4611      	mov	r1, r2
 800803e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008042:	461a      	mov	r2, r3
 8008044:	f003 fb3e 	bl	800b6c4 <memcpy>
          buff += BLOCKSIZE;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800804e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	3301      	adds	r3, #1
 8008054:	61bb      	str	r3, [r7, #24]
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d8c6      	bhi.n	8007fec <SD_read+0xb0>
 800805e:	e002      	b.n	8008066 <SD_read+0x12a>
        }
        else
        {
          break;
 8008060:	bf00      	nop
 8008062:	e000      	b.n	8008066 <SD_read+0x12a>
            break;
 8008064:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d104      	bne.n	8008078 <SD_read+0x13c>
 800806e:	7fbb      	ldrb	r3, [r7, #30]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <SD_read+0x13c>
        res = RES_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8008078:	7ffb      	ldrb	r3, [r7, #31]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3720      	adds	r7, #32
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000494 	.word	0x20000494
 8008088:	20000290 	.word	0x20000290

0800808c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af00      	add	r7, sp, #0
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	607a      	str	r2, [r7, #4]
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	4603      	mov	r3, r0
 800809a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 80080a0:	4b4c      	ldr	r3, [pc, #304]	; (80081d4 <SD_write+0x148>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80080a6:	f247 5030 	movw	r0, #30000	; 0x7530
 80080aa:	f7ff fee1 	bl	8007e70 <SD_CheckStatusWithTimeout>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	da01      	bge.n	80080b8 <SD_write+0x2c>
  {
    return res;
 80080b4:	7ffb      	ldrb	r3, [r7, #31]
 80080b6:	e088      	b.n	80081ca <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 0303 	and.w	r3, r3, #3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f040 8082 	bne.w	80081c8 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	68b8      	ldr	r0, [r7, #8]
 80080ca:	f7ff fe43 	bl	8007d54 <BSP_SD_WriteBlocks_DMA>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d130      	bne.n	8008136 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80080d4:	f7fa fd8e 	bl	8002bf4 <HAL_GetTick>
 80080d8:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80080da:	bf00      	nop
 80080dc:	4b3d      	ldr	r3, [pc, #244]	; (80081d4 <SD_write+0x148>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d108      	bne.n	80080f6 <SD_write+0x6a>
 80080e4:	f7fa fd86 	bl	8002bf4 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	f247 522f 	movw	r2, #29999	; 0x752f
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d9f2      	bls.n	80080dc <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80080f6:	4b37      	ldr	r3, [pc, #220]	; (80081d4 <SD_write+0x148>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <SD_write+0x78>
      {
        res = RES_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	77fb      	strb	r3, [r7, #31]
 8008102:	e061      	b.n	80081c8 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8008104:	4b33      	ldr	r3, [pc, #204]	; (80081d4 <SD_write+0x148>)
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800810a:	f7fa fd73 	bl	8002bf4 <HAL_GetTick>
 800810e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008110:	e007      	b.n	8008122 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008112:	f7ff fe39 	bl	8007d88 <BSP_SD_GetCardState>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <SD_write+0x96>
          {
            res = RES_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	77fb      	strb	r3, [r7, #31]
            break;
 8008120:	e052      	b.n	80081c8 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008122:	f7fa fd67 	bl	8002bf4 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008130:	4293      	cmp	r3, r2
 8008132:	d9ee      	bls.n	8008112 <SD_write+0x86>
 8008134:	e048      	b.n	80081c8 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8008136:	2300      	movs	r3, #0
 8008138:	61bb      	str	r3, [r7, #24]
 800813a:	e034      	b.n	80081a6 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800813c:	4b25      	ldr	r3, [pc, #148]	; (80081d4 <SD_write+0x148>)
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	607a      	str	r2, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	4619      	mov	r1, r3
 800814c:	4822      	ldr	r0, [pc, #136]	; (80081d8 <SD_write+0x14c>)
 800814e:	f7ff fe01 	bl	8007d54 <BSP_SD_WriteBlocks_DMA>
 8008152:	4603      	mov	r3, r0
 8008154:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8008156:	7fbb      	ldrb	r3, [r7, #30]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d129      	bne.n	80081b0 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800815c:	f7fa fd4a 	bl	8002bf4 <HAL_GetTick>
 8008160:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008162:	bf00      	nop
 8008164:	4b1b      	ldr	r3, [pc, #108]	; (80081d4 <SD_write+0x148>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d108      	bne.n	800817e <SD_write+0xf2>
 800816c:	f7fa fd42 	bl	8002bf4 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	f247 522f 	movw	r2, #29999	; 0x752f
 800817a:	4293      	cmp	r3, r2
 800817c:	d9f2      	bls.n	8008164 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800817e:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <SD_write+0x148>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d016      	beq.n	80081b4 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	4a13      	ldr	r2, [pc, #76]	; (80081d8 <SD_write+0x14c>)
 800818a:	4618      	mov	r0, r3
 800818c:	4611      	mov	r1, r2
 800818e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008192:	461a      	mov	r2, r3
 8008194:	f003 fa96 	bl	800b6c4 <memcpy>
          buff += BLOCKSIZE;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800819e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	3301      	adds	r3, #1
 80081a4:	61bb      	str	r3, [r7, #24]
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d8c6      	bhi.n	800813c <SD_write+0xb0>
 80081ae:	e002      	b.n	80081b6 <SD_write+0x12a>
        }
        else
        {
          break;
 80081b0:	bf00      	nop
 80081b2:	e000      	b.n	80081b6 <SD_write+0x12a>
            break;
 80081b4:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d104      	bne.n	80081c8 <SD_write+0x13c>
 80081be:	7fbb      	ldrb	r3, [r7, #30]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <SD_write+0x13c>
        res = RES_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 80081c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3720      	adds	r7, #32
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20000490 	.word	0x20000490
 80081d8:	20000290 	.word	0x20000290

080081dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08c      	sub	sp, #48	; 0x30
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	603a      	str	r2, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
 80081e8:	460b      	mov	r3, r1
 80081ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80081f2:	4b25      	ldr	r3, [pc, #148]	; (8008288 <SD_ioctl+0xac>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <SD_ioctl+0x28>
 8008200:	2303      	movs	r3, #3
 8008202:	e03c      	b.n	800827e <SD_ioctl+0xa2>

  switch (cmd)
 8008204:	79bb      	ldrb	r3, [r7, #6]
 8008206:	2b03      	cmp	r3, #3
 8008208:	d834      	bhi.n	8008274 <SD_ioctl+0x98>
 800820a:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <SD_ioctl+0x34>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008221 	.word	0x08008221
 8008214:	08008229 	.word	0x08008229
 8008218:	08008241 	.word	0x08008241
 800821c:	0800825b 	.word	0x0800825b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008226:	e028      	b.n	800827a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008228:	f107 030c 	add.w	r3, r7, #12
 800822c:	4618      	mov	r0, r3
 800822e:	f7ff fdbb 	bl	8007da8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800823e:	e01c      	b.n	800827a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008240:	f107 030c 	add.w	r3, r7, #12
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff fdaf 	bl	8007da8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	b29a      	uxth	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008258:	e00f      	b.n	800827a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800825a:	f107 030c 	add.w	r3, r7, #12
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff fda2 	bl	8007da8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	0a5a      	lsrs	r2, r3, #9
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008272:	e002      	b.n	800827a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008274:	2304      	movs	r3, #4
 8008276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800827a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800827e:	4618      	mov	r0, r3
 8008280:	3730      	adds	r7, #48	; 0x30
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000081 	.word	0x20000081

0800828c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8008290:	4b03      	ldr	r3, [pc, #12]	; (80082a0 <BSP_SD_WriteCpltCallback+0x14>)
 8008292:	2201      	movs	r2, #1
 8008294:	601a      	str	r2, [r3, #0]
}
 8008296:	bf00      	nop
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	20000490 	.word	0x20000490

080082a4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80082a8:	4b03      	ldr	r3, [pc, #12]	; (80082b8 <BSP_SD_ReadCpltCallback+0x14>)
 80082aa:	2201      	movs	r2, #1
 80082ac:	601a      	str	r2, [r3, #0]
}
 80082ae:	bf00      	nop
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	20000494 	.word	0x20000494

080082bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80082c6:	79fb      	ldrb	r3, [r7, #7]
 80082c8:	4a08      	ldr	r2, [pc, #32]	; (80082ec <disk_status+0x30>)
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	79fa      	ldrb	r2, [r7, #7]
 80082d4:	4905      	ldr	r1, [pc, #20]	; (80082ec <disk_status+0x30>)
 80082d6:	440a      	add	r2, r1
 80082d8:	7a12      	ldrb	r2, [r2, #8]
 80082da:	4610      	mov	r0, r2
 80082dc:	4798      	blx	r3
 80082de:	4603      	mov	r3, r0
 80082e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	200006c0 	.word	0x200006c0

080082f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	4a0d      	ldr	r2, [pc, #52]	; (8008338 <disk_initialize+0x48>)
 8008302:	5cd3      	ldrb	r3, [r2, r3]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d111      	bne.n	800832c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	4a0b      	ldr	r2, [pc, #44]	; (8008338 <disk_initialize+0x48>)
 800830c:	2101      	movs	r1, #1
 800830e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	4a09      	ldr	r2, [pc, #36]	; (8008338 <disk_initialize+0x48>)
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	79fa      	ldrb	r2, [r7, #7]
 800831e:	4906      	ldr	r1, [pc, #24]	; (8008338 <disk_initialize+0x48>)
 8008320:	440a      	add	r2, r1
 8008322:	7a12      	ldrb	r2, [r2, #8]
 8008324:	4610      	mov	r0, r2
 8008326:	4798      	blx	r3
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800832c:	7bfb      	ldrb	r3, [r7, #15]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	200006c0 	.word	0x200006c0

0800833c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800833c:	b590      	push	{r4, r7, lr}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60b9      	str	r1, [r7, #8]
 8008344:	607a      	str	r2, [r7, #4]
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	4a0a      	ldr	r2, [pc, #40]	; (8008378 <disk_read+0x3c>)
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	689c      	ldr	r4, [r3, #8]
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	4a07      	ldr	r2, [pc, #28]	; (8008378 <disk_read+0x3c>)
 800835c:	4413      	add	r3, r2
 800835e:	7a18      	ldrb	r0, [r3, #8]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	47a0      	blx	r4
 8008368:	4603      	mov	r3, r0
 800836a:	75fb      	strb	r3, [r7, #23]
  return res;
 800836c:	7dfb      	ldrb	r3, [r7, #23]
}
 800836e:	4618      	mov	r0, r3
 8008370:	371c      	adds	r7, #28
 8008372:	46bd      	mov	sp, r7
 8008374:	bd90      	pop	{r4, r7, pc}
 8008376:	bf00      	nop
 8008378:	200006c0 	.word	0x200006c0

0800837c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800837c:	b590      	push	{r4, r7, lr}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	607a      	str	r2, [r7, #4]
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	4a0a      	ldr	r2, [pc, #40]	; (80083b8 <disk_write+0x3c>)
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	68dc      	ldr	r4, [r3, #12]
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	4a07      	ldr	r2, [pc, #28]	; (80083b8 <disk_write+0x3c>)
 800839c:	4413      	add	r3, r2
 800839e:	7a18      	ldrb	r0, [r3, #8]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	68b9      	ldr	r1, [r7, #8]
 80083a6:	47a0      	blx	r4
 80083a8:	4603      	mov	r3, r0
 80083aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd90      	pop	{r4, r7, pc}
 80083b6:	bf00      	nop
 80083b8:	200006c0 	.word	0x200006c0

080083bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	603a      	str	r2, [r7, #0]
 80083c6:	71fb      	strb	r3, [r7, #7]
 80083c8:	460b      	mov	r3, r1
 80083ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	4a09      	ldr	r2, [pc, #36]	; (80083f4 <disk_ioctl+0x38>)
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	79fa      	ldrb	r2, [r7, #7]
 80083da:	4906      	ldr	r1, [pc, #24]	; (80083f4 <disk_ioctl+0x38>)
 80083dc:	440a      	add	r2, r1
 80083de:	7a10      	ldrb	r0, [r2, #8]
 80083e0:	79b9      	ldrb	r1, [r7, #6]
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	4798      	blx	r3
 80083e6:	4603      	mov	r3, r0
 80083e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	200006c0 	.word	0x200006c0

080083f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3301      	adds	r3, #1
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008408:	89fb      	ldrh	r3, [r7, #14]
 800840a:	021b      	lsls	r3, r3, #8
 800840c:	b21a      	sxth	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	b21b      	sxth	r3, r3
 8008414:	4313      	orrs	r3, r2
 8008416:	b21b      	sxth	r3, r3
 8008418:	81fb      	strh	r3, [r7, #14]
	return rv;
 800841a:	89fb      	ldrh	r3, [r7, #14]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	3303      	adds	r3, #3
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	021b      	lsls	r3, r3, #8
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	3202      	adds	r2, #2
 8008440:	7812      	ldrb	r2, [r2, #0]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	021b      	lsls	r3, r3, #8
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	3201      	adds	r2, #1
 800844e:	7812      	ldrb	r2, [r2, #0]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	7812      	ldrb	r2, [r2, #0]
 800845c:	4313      	orrs	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008460:	68fb      	ldr	r3, [r7, #12]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	460b      	mov	r3, r1
 8008478:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	887a      	ldrh	r2, [r7, #2]
 8008482:	b2d2      	uxtb	r2, r2
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	887b      	ldrh	r3, [r7, #2]
 8008488:	0a1b      	lsrs	r3, r3, #8
 800848a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	607a      	str	r2, [r7, #4]
 8008492:	887a      	ldrh	r2, [r7, #2]
 8008494:	b2d2      	uxtb	r2, r2
 8008496:	701a      	strb	r2, [r3, #0]
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	b2d2      	uxtb	r2, r2
 80084b8:	701a      	strb	r2, [r3, #0]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	0a1b      	lsrs	r3, r3, #8
 80084be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	607a      	str	r2, [r7, #4]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	701a      	strb	r2, [r3, #0]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	0a1b      	lsrs	r3, r3, #8
 80084d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	0a1b      	lsrs	r3, r3, #8
 80084e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00d      	beq.n	8008532 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	1c53      	adds	r3, r2, #1
 800851a:	613b      	str	r3, [r7, #16]
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	1c59      	adds	r1, r3, #1
 8008520:	6179      	str	r1, [r7, #20]
 8008522:	7812      	ldrb	r2, [r2, #0]
 8008524:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3b01      	subs	r3, #1
 800852a:	607b      	str	r3, [r7, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1f1      	bne.n	8008516 <mem_cpy+0x1a>
	}
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800853e:	b480      	push	{r7}
 8008540:	b087      	sub	sp, #28
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	617a      	str	r2, [r7, #20]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	b2d2      	uxtb	r2, r2
 8008558:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3b01      	subs	r3, #1
 800855e:	607b      	str	r3, [r7, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1f3      	bne.n	800854e <mem_set+0x10>
}
 8008566:	bf00      	nop
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008572:	b480      	push	{r7}
 8008574:	b089      	sub	sp, #36	; 0x24
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	61fb      	str	r3, [r7, #28]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	61fa      	str	r2, [r7, #28]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	4619      	mov	r1, r3
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	61ba      	str	r2, [r7, #24]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	1acb      	subs	r3, r1, r3
 800859e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	607b      	str	r3, [r7, #4]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <mem_cmp+0x40>
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0eb      	beq.n	800858a <mem_cmp+0x18>

	return r;
 80085b2:	697b      	ldr	r3, [r7, #20]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3724      	adds	r7, #36	; 0x24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80085ca:	e002      	b.n	80085d2 <chk_chr+0x12>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3301      	adds	r3, #1
 80085d0:	607b      	str	r3, [r7, #4]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <chk_chr+0x26>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d1f2      	bne.n	80085cc <chk_chr+0xc>
	return *str;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	781b      	ldrb	r3, [r3, #0]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
	...

080085f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008602:	2300      	movs	r3, #0
 8008604:	60bb      	str	r3, [r7, #8]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	e029      	b.n	8008660 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800860c:	4a27      	ldr	r2, [pc, #156]	; (80086ac <chk_lock+0xb4>)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	4413      	add	r3, r2
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d01d      	beq.n	8008656 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800861a:	4a24      	ldr	r2, [pc, #144]	; (80086ac <chk_lock+0xb4>)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	4413      	add	r3, r2
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d116      	bne.n	800865a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800862c:	4a1f      	ldr	r2, [pc, #124]	; (80086ac <chk_lock+0xb4>)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	011b      	lsls	r3, r3, #4
 8008632:	4413      	add	r3, r2
 8008634:	3304      	adds	r3, #4
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800863c:	429a      	cmp	r2, r3
 800863e:	d10c      	bne.n	800865a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008640:	4a1a      	ldr	r2, [pc, #104]	; (80086ac <chk_lock+0xb4>)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	4413      	add	r3, r2
 8008648:	3308      	adds	r3, #8
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008650:	429a      	cmp	r2, r3
 8008652:	d102      	bne.n	800865a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008654:	e007      	b.n	8008666 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008656:	2301      	movs	r3, #1
 8008658:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3301      	adds	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d9d2      	bls.n	800860c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d109      	bne.n	8008680 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d102      	bne.n	8008678 <chk_lock+0x80>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d101      	bne.n	800867c <chk_lock+0x84>
 8008678:	2300      	movs	r3, #0
 800867a:	e010      	b.n	800869e <chk_lock+0xa6>
 800867c:	2312      	movs	r3, #18
 800867e:	e00e      	b.n	800869e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d108      	bne.n	8008698 <chk_lock+0xa0>
 8008686:	4a09      	ldr	r2, [pc, #36]	; (80086ac <chk_lock+0xb4>)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	011b      	lsls	r3, r3, #4
 800868c:	4413      	add	r3, r2
 800868e:	330c      	adds	r3, #12
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008696:	d101      	bne.n	800869c <chk_lock+0xa4>
 8008698:	2310      	movs	r3, #16
 800869a:	e000      	b.n	800869e <chk_lock+0xa6>
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	200004a0 	.word	0x200004a0

080086b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80086b6:	2300      	movs	r3, #0
 80086b8:	607b      	str	r3, [r7, #4]
 80086ba:	e002      	b.n	80086c2 <enq_lock+0x12>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3301      	adds	r3, #1
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d806      	bhi.n	80086d6 <enq_lock+0x26>
 80086c8:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <enq_lock+0x40>)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	011b      	lsls	r3, r3, #4
 80086ce:	4413      	add	r3, r2
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1f2      	bne.n	80086bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	bf14      	ite	ne
 80086dc:	2301      	movne	r3, #1
 80086de:	2300      	moveq	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	200004a0 	.word	0x200004a0

080086f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80086fe:	2300      	movs	r3, #0
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	e01f      	b.n	8008744 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008704:	4a41      	ldr	r2, [pc, #260]	; (800880c <inc_lock+0x118>)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	4413      	add	r3, r2
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d113      	bne.n	800873e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008716:	4a3d      	ldr	r2, [pc, #244]	; (800880c <inc_lock+0x118>)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	4413      	add	r3, r2
 800871e:	3304      	adds	r3, #4
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008726:	429a      	cmp	r2, r3
 8008728:	d109      	bne.n	800873e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800872a:	4a38      	ldr	r2, [pc, #224]	; (800880c <inc_lock+0x118>)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	4413      	add	r3, r2
 8008732:	3308      	adds	r3, #8
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800873a:	429a      	cmp	r2, r3
 800873c:	d006      	beq.n	800874c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3301      	adds	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d9dc      	bls.n	8008704 <inc_lock+0x10>
 800874a:	e000      	b.n	800874e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800874c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b02      	cmp	r3, #2
 8008752:	d132      	bne.n	80087ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	e002      	b.n	8008760 <inc_lock+0x6c>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3301      	adds	r3, #1
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d806      	bhi.n	8008774 <inc_lock+0x80>
 8008766:	4a29      	ldr	r2, [pc, #164]	; (800880c <inc_lock+0x118>)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	011b      	lsls	r3, r3, #4
 800876c:	4413      	add	r3, r2
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1f2      	bne.n	800875a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b02      	cmp	r3, #2
 8008778:	d101      	bne.n	800877e <inc_lock+0x8a>
 800877a:	2300      	movs	r3, #0
 800877c:	e040      	b.n	8008800 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4922      	ldr	r1, [pc, #136]	; (800880c <inc_lock+0x118>)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	440b      	add	r3, r1
 800878a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	491e      	ldr	r1, [pc, #120]	; (800880c <inc_lock+0x118>)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	011b      	lsls	r3, r3, #4
 8008796:	440b      	add	r3, r1
 8008798:	3304      	adds	r3, #4
 800879a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	695a      	ldr	r2, [r3, #20]
 80087a0:	491a      	ldr	r1, [pc, #104]	; (800880c <inc_lock+0x118>)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	011b      	lsls	r3, r3, #4
 80087a6:	440b      	add	r3, r1
 80087a8:	3308      	adds	r3, #8
 80087aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80087ac:	4a17      	ldr	r2, [pc, #92]	; (800880c <inc_lock+0x118>)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	011b      	lsls	r3, r3, #4
 80087b2:	4413      	add	r3, r2
 80087b4:	330c      	adds	r3, #12
 80087b6:	2200      	movs	r2, #0
 80087b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d009      	beq.n	80087d4 <inc_lock+0xe0>
 80087c0:	4a12      	ldr	r2, [pc, #72]	; (800880c <inc_lock+0x118>)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	011b      	lsls	r3, r3, #4
 80087c6:	4413      	add	r3, r2
 80087c8:	330c      	adds	r3, #12
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <inc_lock+0xe0>
 80087d0:	2300      	movs	r3, #0
 80087d2:	e015      	b.n	8008800 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d108      	bne.n	80087ec <inc_lock+0xf8>
 80087da:	4a0c      	ldr	r2, [pc, #48]	; (800880c <inc_lock+0x118>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	4413      	add	r3, r2
 80087e2:	330c      	adds	r3, #12
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	3301      	adds	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	e001      	b.n	80087f0 <inc_lock+0xfc>
 80087ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087f0:	4906      	ldr	r1, [pc, #24]	; (800880c <inc_lock+0x118>)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	011b      	lsls	r3, r3, #4
 80087f6:	440b      	add	r3, r1
 80087f8:	330c      	adds	r3, #12
 80087fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3301      	adds	r3, #1
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	200004a0 	.word	0x200004a0

08008810 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3b01      	subs	r3, #1
 800881c:	607b      	str	r3, [r7, #4]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d825      	bhi.n	8008870 <dec_lock+0x60>
		n = Files[i].ctr;
 8008824:	4a17      	ldr	r2, [pc, #92]	; (8008884 <dec_lock+0x74>)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	011b      	lsls	r3, r3, #4
 800882a:	4413      	add	r3, r2
 800882c:	330c      	adds	r3, #12
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008832:	89fb      	ldrh	r3, [r7, #14]
 8008834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008838:	d101      	bne.n	800883e <dec_lock+0x2e>
 800883a:	2300      	movs	r3, #0
 800883c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800883e:	89fb      	ldrh	r3, [r7, #14]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <dec_lock+0x3a>
 8008844:	89fb      	ldrh	r3, [r7, #14]
 8008846:	3b01      	subs	r3, #1
 8008848:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800884a:	4a0e      	ldr	r2, [pc, #56]	; (8008884 <dec_lock+0x74>)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	4413      	add	r3, r2
 8008852:	330c      	adds	r3, #12
 8008854:	89fa      	ldrh	r2, [r7, #14]
 8008856:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008858:	89fb      	ldrh	r3, [r7, #14]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d105      	bne.n	800886a <dec_lock+0x5a>
 800885e:	4a09      	ldr	r2, [pc, #36]	; (8008884 <dec_lock+0x74>)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	011b      	lsls	r3, r3, #4
 8008864:	4413      	add	r3, r2
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	737b      	strb	r3, [r7, #13]
 800886e:	e001      	b.n	8008874 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008870:	2302      	movs	r3, #2
 8008872:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008874:	7b7b      	ldrb	r3, [r7, #13]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	200004a0 	.word	0x200004a0

08008888 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008890:	2300      	movs	r3, #0
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	e010      	b.n	80088b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008896:	4a0d      	ldr	r2, [pc, #52]	; (80088cc <clear_lock+0x44>)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	4413      	add	r3, r2
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d105      	bne.n	80088b2 <clear_lock+0x2a>
 80088a6:	4a09      	ldr	r2, [pc, #36]	; (80088cc <clear_lock+0x44>)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	011b      	lsls	r3, r3, #4
 80088ac:	4413      	add	r3, r2
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d9eb      	bls.n	8008896 <clear_lock+0xe>
	}
}
 80088be:	bf00      	nop
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	200004a0 	.word	0x200004a0

080088d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	78db      	ldrb	r3, [r3, #3]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d034      	beq.n	800894e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	7858      	ldrb	r0, [r3, #1]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80088f4:	2301      	movs	r3, #1
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	f7ff fd40 	bl	800837c <disk_write>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d002      	beq.n	8008908 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008902:	2301      	movs	r3, #1
 8008904:	73fb      	strb	r3, [r7, #15]
 8008906:	e022      	b.n	800894e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	1ad2      	subs	r2, r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	429a      	cmp	r2, r3
 800891c:	d217      	bcs.n	800894e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	789b      	ldrb	r3, [r3, #2]
 8008922:	613b      	str	r3, [r7, #16]
 8008924:	e010      	b.n	8008948 <sync_window+0x78>
					wsect += fs->fsize;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	4413      	add	r3, r2
 800892e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7858      	ldrb	r0, [r3, #1]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800893a:	2301      	movs	r3, #1
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	f7ff fd1d 	bl	800837c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	3b01      	subs	r3, #1
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d8eb      	bhi.n	8008926 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d01b      	beq.n	80089a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff ffad 	bl	80088d0 <sync_window>
 8008976:	4603      	mov	r3, r0
 8008978:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d113      	bne.n	80089a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	7858      	ldrb	r0, [r3, #1]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800898a:	2301      	movs	r3, #1
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	f7ff fcd5 	bl	800833c <disk_read>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d004      	beq.n	80089a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008998:	f04f 33ff 	mov.w	r3, #4294967295
 800899c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800899e:	2301      	movs	r3, #1
 80089a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7ff ff87 	bl	80088d0 <sync_window>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d159      	bne.n	8008a80 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b03      	cmp	r3, #3
 80089d2:	d149      	bne.n	8008a68 <sync_fs+0xb4>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	791b      	ldrb	r3, [r3, #4]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d145      	bne.n	8008a68 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	899b      	ldrh	r3, [r3, #12]
 80089e6:	461a      	mov	r2, r3
 80089e8:	2100      	movs	r1, #0
 80089ea:	f7ff fda8 	bl	800853e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	3338      	adds	r3, #56	; 0x38
 80089f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80089f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff fd37 	bl	800846e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3338      	adds	r3, #56	; 0x38
 8008a04:	4921      	ldr	r1, [pc, #132]	; (8008a8c <sync_fs+0xd8>)
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff fd4c 	bl	80084a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	3338      	adds	r3, #56	; 0x38
 8008a10:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008a14:	491e      	ldr	r1, [pc, #120]	; (8008a90 <sync_fs+0xdc>)
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff fd44 	bl	80084a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3338      	adds	r3, #56	; 0x38
 8008a20:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	f7ff fd3a 	bl	80084a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3338      	adds	r3, #56	; 0x38
 8008a34:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4610      	mov	r0, r2
 8008a40:	f7ff fd30 	bl	80084a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	7858      	ldrb	r0, [r3, #1]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f7ff fc8d 	bl	800837c <disk_write>
			fs->fsi_flag = 0;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2100      	movs	r1, #0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff fca3 	bl	80083bc <disk_ioctl>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <sync_fs+0xcc>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	41615252 	.word	0x41615252
 8008a90:	61417272 	.word	0x61417272

08008a94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	3b02      	subs	r3, #2
 8008aa2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	3b02      	subs	r3, #2
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d301      	bcc.n	8008ab4 <clust2sect+0x20>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e008      	b.n	8008ac6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	895b      	ldrh	r3, [r3, #10]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	fb03 f202 	mul.w	r2, r3, r2
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac4:	4413      	add	r3, r2
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b086      	sub	sp, #24
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d904      	bls.n	8008af2 <get_fat+0x20>
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d302      	bcc.n	8008af8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008af2:	2301      	movs	r3, #1
 8008af4:	617b      	str	r3, [r7, #20]
 8008af6:	e0b7      	b.n	8008c68 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008af8:	f04f 33ff 	mov.w	r3, #4294967295
 8008afc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d05a      	beq.n	8008bbc <get_fat+0xea>
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d07d      	beq.n	8008c06 <get_fat+0x134>
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	f040 80a2 	bne.w	8008c54 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	085b      	lsrs	r3, r3, #1
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	899b      	ldrh	r3, [r3, #12]
 8008b26:	4619      	mov	r1, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b2e:	4413      	add	r3, r2
 8008b30:	4619      	mov	r1, r3
 8008b32:	6938      	ldr	r0, [r7, #16]
 8008b34:	f7ff ff10 	bl	8008958 <move_window>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f040 808d 	bne.w	8008c5a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	60fa      	str	r2, [r7, #12]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	8992      	ldrh	r2, [r2, #12]
 8008b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b4e:	fb02 f201 	mul.w	r2, r2, r1
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	4413      	add	r3, r2
 8008b58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b5c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	899b      	ldrh	r3, [r3, #12]
 8008b66:	4619      	mov	r1, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b6e:	4413      	add	r3, r2
 8008b70:	4619      	mov	r1, r3
 8008b72:	6938      	ldr	r0, [r7, #16]
 8008b74:	f7ff fef0 	bl	8008958 <move_window>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d16f      	bne.n	8008c5e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	899b      	ldrh	r3, [r3, #12]
 8008b82:	461a      	mov	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b8a:	fb02 f201 	mul.w	r2, r2, r1
 8008b8e:	1a9b      	subs	r3, r3, r2
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4413      	add	r3, r2
 8008b94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b98:	021b      	lsls	r3, r3, #8
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <get_fat+0xe0>
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	091b      	lsrs	r3, r3, #4
 8008bb0:	e002      	b.n	8008bb8 <get_fat+0xe6>
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bb8:	617b      	str	r3, [r7, #20]
			break;
 8008bba:	e055      	b.n	8008c68 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	899b      	ldrh	r3, [r3, #12]
 8008bc4:	085b      	lsrs	r3, r3, #1
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	4619      	mov	r1, r3
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bd0:	4413      	add	r3, r2
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6938      	ldr	r0, [r7, #16]
 8008bd6:	f7ff febf 	bl	8008958 <move_window>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d140      	bne.n	8008c62 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	8992      	ldrh	r2, [r2, #12]
 8008bee:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bf2:	fb02 f200 	mul.w	r2, r2, r0
 8008bf6:	1a9b      	subs	r3, r3, r2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff fbfc 	bl	80083f8 <ld_word>
 8008c00:	4603      	mov	r3, r0
 8008c02:	617b      	str	r3, [r7, #20]
			break;
 8008c04:	e030      	b.n	8008c68 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	899b      	ldrh	r3, [r3, #12]
 8008c0e:	089b      	lsrs	r3, r3, #2
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	4619      	mov	r1, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c1a:	4413      	add	r3, r2
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6938      	ldr	r0, [r7, #16]
 8008c20:	f7ff fe9a 	bl	8008958 <move_window>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d11d      	bne.n	8008c66 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	8992      	ldrh	r2, [r2, #12]
 8008c38:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c3c:	fb02 f200 	mul.w	r2, r2, r0
 8008c40:	1a9b      	subs	r3, r3, r2
 8008c42:	440b      	add	r3, r1
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff fbef 	bl	8008428 <ld_dword>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c50:	617b      	str	r3, [r7, #20]
			break;
 8008c52:	e009      	b.n	8008c68 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008c54:	2301      	movs	r3, #1
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	e006      	b.n	8008c68 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c5a:	bf00      	nop
 8008c5c:	e004      	b.n	8008c68 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c5e:	bf00      	nop
 8008c60:	e002      	b.n	8008c68 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c62:	bf00      	nop
 8008c64:	e000      	b.n	8008c68 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c66:	bf00      	nop
		}
	}

	return val;
 8008c68:	697b      	ldr	r3, [r7, #20]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008c72:	b590      	push	{r4, r7, lr}
 8008c74:	b089      	sub	sp, #36	; 0x24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008c7e:	2302      	movs	r3, #2
 8008c80:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	f240 8106 	bls.w	8008e96 <put_fat+0x224>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	f080 8100 	bcs.w	8008e96 <put_fat+0x224>
		switch (fs->fs_type) {
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	f000 8088 	beq.w	8008db0 <put_fat+0x13e>
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	f000 80b0 	beq.w	8008e06 <put_fat+0x194>
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	f040 80f5 	bne.w	8008e96 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	61bb      	str	r3, [r7, #24]
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	085b      	lsrs	r3, r3, #1
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	899b      	ldrh	r3, [r3, #12]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cca:	4413      	add	r3, r2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7ff fe42 	bl	8008958 <move_window>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008cd8:	7ffb      	ldrb	r3, [r7, #31]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f040 80d4 	bne.w	8008e88 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	61ba      	str	r2, [r7, #24]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	8992      	ldrh	r2, [r2, #12]
 8008cf0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cf4:	fb02 f200 	mul.w	r2, r2, r0
 8008cf8:	1a9b      	subs	r3, r3, r2
 8008cfa:	440b      	add	r3, r1
 8008cfc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00d      	beq.n	8008d24 <put_fat+0xb2>
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	b25b      	sxtb	r3, r3
 8008d0e:	f003 030f 	and.w	r3, r3, #15
 8008d12:	b25a      	sxtb	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	011b      	lsls	r3, r3, #4
 8008d1a:	b25b      	sxtb	r3, r3
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	b25b      	sxtb	r3, r3
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	e001      	b.n	8008d28 <put_fat+0xb6>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	899b      	ldrh	r3, [r3, #12]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d42:	4413      	add	r3, r2
 8008d44:	4619      	mov	r1, r3
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff fe06 	bl	8008958 <move_window>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d50:	7ffb      	ldrb	r3, [r7, #31]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f040 809a 	bne.w	8008e8c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	899b      	ldrh	r3, [r3, #12]
 8008d62:	461a      	mov	r2, r3
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d6a:	fb02 f200 	mul.w	r2, r2, r0
 8008d6e:	1a9b      	subs	r3, r3, r2
 8008d70:	440b      	add	r3, r1
 8008d72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <put_fat+0x114>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	091b      	lsrs	r3, r3, #4
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	e00e      	b.n	8008da4 <put_fat+0x132>
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	b25b      	sxtb	r3, r3
 8008d8c:	f023 030f 	bic.w	r3, r3, #15
 8008d90:	b25a      	sxtb	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	0a1b      	lsrs	r3, r3, #8
 8008d96:	b25b      	sxtb	r3, r3
 8008d98:	f003 030f 	and.w	r3, r3, #15
 8008d9c:	b25b      	sxtb	r3, r3
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	b25b      	sxtb	r3, r3
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	70da      	strb	r2, [r3, #3]
			break;
 8008dae:	e072      	b.n	8008e96 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	899b      	ldrh	r3, [r3, #12]
 8008db8:	085b      	lsrs	r3, r3, #1
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dc4:	4413      	add	r3, r2
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7ff fdc5 	bl	8008958 <move_window>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008dd2:	7ffb      	ldrb	r3, [r7, #31]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d15b      	bne.n	8008e90 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	8992      	ldrh	r2, [r2, #12]
 8008de6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dea:	fb02 f200 	mul.w	r2, r2, r0
 8008dee:	1a9b      	subs	r3, r3, r2
 8008df0:	440b      	add	r3, r1
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	b292      	uxth	r2, r2
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7ff fb38 	bl	800846e <st_word>
			fs->wflag = 1;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2201      	movs	r2, #1
 8008e02:	70da      	strb	r2, [r3, #3]
			break;
 8008e04:	e047      	b.n	8008e96 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	899b      	ldrh	r3, [r3, #12]
 8008e0e:	089b      	lsrs	r3, r3, #2
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	4619      	mov	r1, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e1a:	4413      	add	r3, r2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f7ff fd9a 	bl	8008958 <move_window>
 8008e24:	4603      	mov	r3, r0
 8008e26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e28:	7ffb      	ldrb	r3, [r7, #31]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d132      	bne.n	8008e94 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	8992      	ldrh	r2, [r2, #12]
 8008e42:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e46:	fb02 f200 	mul.w	r2, r2, r0
 8008e4a:	1a9b      	subs	r3, r3, r2
 8008e4c:	440b      	add	r3, r1
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff faea 	bl	8008428 <ld_dword>
 8008e54:	4603      	mov	r3, r0
 8008e56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008e5a:	4323      	orrs	r3, r4
 8008e5c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	8992      	ldrh	r2, [r2, #12]
 8008e6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e70:	fb02 f200 	mul.w	r2, r2, r0
 8008e74:	1a9b      	subs	r3, r3, r2
 8008e76:	440b      	add	r3, r1
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7ff fb12 	bl	80084a4 <st_dword>
			fs->wflag = 1;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	70da      	strb	r2, [r3, #3]
			break;
 8008e86:	e006      	b.n	8008e96 <put_fat+0x224>
			if (res != FR_OK) break;
 8008e88:	bf00      	nop
 8008e8a:	e004      	b.n	8008e96 <put_fat+0x224>
			if (res != FR_OK) break;
 8008e8c:	bf00      	nop
 8008e8e:	e002      	b.n	8008e96 <put_fat+0x224>
			if (res != FR_OK) break;
 8008e90:	bf00      	nop
 8008e92:	e000      	b.n	8008e96 <put_fat+0x224>
			if (res != FR_OK) break;
 8008e94:	bf00      	nop
		}
	}
	return res;
 8008e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3724      	adds	r7, #36	; 0x24
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd90      	pop	{r4, r7, pc}

08008ea0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d904      	bls.n	8008ec6 <remove_chain+0x26>
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d301      	bcc.n	8008eca <remove_chain+0x2a>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	e04b      	b.n	8008f62 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00c      	beq.n	8008eea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed4:	6879      	ldr	r1, [r7, #4]
 8008ed6:	69b8      	ldr	r0, [r7, #24]
 8008ed8:	f7ff fecb 	bl	8008c72 <put_fat>
 8008edc:	4603      	mov	r3, r0
 8008ede:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008ee0:	7ffb      	ldrb	r3, [r7, #31]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <remove_chain+0x4a>
 8008ee6:	7ffb      	ldrb	r3, [r7, #31]
 8008ee8:	e03b      	b.n	8008f62 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7ff fdf0 	bl	8008ad2 <get_fat>
 8008ef2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d031      	beq.n	8008f5e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d101      	bne.n	8008f04 <remove_chain+0x64>
 8008f00:	2302      	movs	r3, #2
 8008f02:	e02e      	b.n	8008f62 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0a:	d101      	bne.n	8008f10 <remove_chain+0x70>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e028      	b.n	8008f62 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008f10:	2200      	movs	r2, #0
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	69b8      	ldr	r0, [r7, #24]
 8008f16:	f7ff feac 	bl	8008c72 <put_fat>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008f1e:	7ffb      	ldrb	r3, [r7, #31]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <remove_chain+0x88>
 8008f24:	7ffb      	ldrb	r3, [r7, #31]
 8008f26:	e01c      	b.n	8008f62 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	3b02      	subs	r3, #2
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d20b      	bcs.n	8008f4e <remove_chain+0xae>
			fs->free_clst++;
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	791b      	ldrb	r3, [r3, #4]
 8008f44:	f043 0301 	orr.w	r3, r3, #1
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d3c6      	bcc.n	8008eea <remove_chain+0x4a>
 8008f5c:	e000      	b.n	8008f60 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008f5e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3720      	adds	r7, #32
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b088      	sub	sp, #32
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10d      	bne.n	8008f9c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d004      	beq.n	8008f96 <create_chain+0x2c>
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d31b      	bcc.n	8008fce <create_chain+0x64>
 8008f96:	2301      	movs	r3, #1
 8008f98:	61bb      	str	r3, [r7, #24]
 8008f9a:	e018      	b.n	8008fce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff fd97 	bl	8008ad2 <get_fat>
 8008fa4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d801      	bhi.n	8008fb0 <create_chain+0x46>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e070      	b.n	8009092 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb6:	d101      	bne.n	8008fbc <create_chain+0x52>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	e06a      	b.n	8009092 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d201      	bcs.n	8008fca <create_chain+0x60>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	e063      	b.n	8009092 <create_chain+0x128>
		scl = clst;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	69fa      	ldr	r2, [r7, #28]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d307      	bcc.n	8008ff2 <create_chain+0x88>
				ncl = 2;
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008fe6:	69fa      	ldr	r2, [r7, #28]
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d901      	bls.n	8008ff2 <create_chain+0x88>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e04f      	b.n	8009092 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008ff2:	69f9      	ldr	r1, [r7, #28]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fd6c 	bl	8008ad2 <get_fat>
 8008ffa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00e      	beq.n	8009020 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d003      	beq.n	8009010 <create_chain+0xa6>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900e:	d101      	bne.n	8009014 <create_chain+0xaa>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	e03e      	b.n	8009092 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009014:	69fa      	ldr	r2, [r7, #28]
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	429a      	cmp	r2, r3
 800901a:	d1da      	bne.n	8008fd2 <create_chain+0x68>
 800901c:	2300      	movs	r3, #0
 800901e:	e038      	b.n	8009092 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009020:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009022:	f04f 32ff 	mov.w	r2, #4294967295
 8009026:	69f9      	ldr	r1, [r7, #28]
 8009028:	6938      	ldr	r0, [r7, #16]
 800902a:	f7ff fe22 	bl	8008c72 <put_fat>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d109      	bne.n	800904c <create_chain+0xe2>
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d006      	beq.n	800904c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6938      	ldr	r0, [r7, #16]
 8009044:	f7ff fe15 	bl	8008c72 <put_fat>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d116      	bne.n	8009080 <create_chain+0x116>
		fs->last_clst = ncl;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	69fa      	ldr	r2, [r7, #28]
 8009056:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	699a      	ldr	r2, [r3, #24]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	3b02      	subs	r3, #2
 8009062:	429a      	cmp	r2, r3
 8009064:	d804      	bhi.n	8009070 <create_chain+0x106>
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	1e5a      	subs	r2, r3, #1
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	791b      	ldrb	r3, [r3, #4]
 8009074:	f043 0301 	orr.w	r3, r3, #1
 8009078:	b2da      	uxtb	r2, r3
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	711a      	strb	r2, [r3, #4]
 800907e:	e007      	b.n	8009090 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d102      	bne.n	800908c <create_chain+0x122>
 8009086:	f04f 33ff 	mov.w	r3, #4294967295
 800908a:	e000      	b.n	800908e <create_chain+0x124>
 800908c:	2301      	movs	r3, #1
 800908e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009090:	69fb      	ldr	r3, [r7, #28]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3720      	adds	r7, #32
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800909a:	b480      	push	{r7}
 800909c:	b087      	sub	sp, #28
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	3304      	adds	r3, #4
 80090b0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	899b      	ldrh	r3, [r3, #12]
 80090b6:	461a      	mov	r2, r3
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	8952      	ldrh	r2, [r2, #10]
 80090c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80090c6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	1d1a      	adds	r2, r3, #4
 80090cc:	613a      	str	r2, [r7, #16]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <clmt_clust+0x42>
 80090d8:	2300      	movs	r3, #0
 80090da:	e010      	b.n	80090fe <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d307      	bcc.n	80090f4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	617b      	str	r3, [r7, #20]
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	3304      	adds	r3, #4
 80090f0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80090f2:	e7e9      	b.n	80090c8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80090f4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	4413      	add	r3, r2
}
 80090fe:	4618      	mov	r0, r3
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009120:	d204      	bcs.n	800912c <dir_sdi+0x22>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	f003 031f 	and.w	r3, r3, #31
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <dir_sdi+0x26>
		return FR_INT_ERR;
 800912c:	2302      	movs	r3, #2
 800912e:	e071      	b.n	8009214 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <dir_sdi+0x46>
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b02      	cmp	r3, #2
 8009148:	d902      	bls.n	8009150 <dir_sdi+0x46>
		clst = fs->dirbase;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10c      	bne.n	8009170 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	095b      	lsrs	r3, r3, #5
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	8912      	ldrh	r2, [r2, #8]
 800915e:	4293      	cmp	r3, r2
 8009160:	d301      	bcc.n	8009166 <dir_sdi+0x5c>
 8009162:	2302      	movs	r3, #2
 8009164:	e056      	b.n	8009214 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	61da      	str	r2, [r3, #28]
 800916e:	e02d      	b.n	80091cc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	895b      	ldrh	r3, [r3, #10]
 8009174:	461a      	mov	r2, r3
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	899b      	ldrh	r3, [r3, #12]
 800917a:	fb03 f302 	mul.w	r3, r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009180:	e019      	b.n	80091b6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6979      	ldr	r1, [r7, #20]
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff fca3 	bl	8008ad2 <get_fat>
 800918c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009194:	d101      	bne.n	800919a <dir_sdi+0x90>
 8009196:	2301      	movs	r3, #1
 8009198:	e03c      	b.n	8009214 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d904      	bls.n	80091aa <dir_sdi+0xa0>
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d301      	bcc.n	80091ae <dir_sdi+0xa4>
 80091aa:	2302      	movs	r3, #2
 80091ac:	e032      	b.n	8009214 <dir_sdi+0x10a>
			ofs -= csz;
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d2e1      	bcs.n	8009182 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80091be:	6979      	ldr	r1, [r7, #20]
 80091c0:	6938      	ldr	r0, [r7, #16]
 80091c2:	f7ff fc67 	bl	8008a94 <clust2sect>
 80091c6:	4602      	mov	r2, r0
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <dir_sdi+0xd4>
 80091da:	2302      	movs	r3, #2
 80091dc:	e01a      	b.n	8009214 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	69da      	ldr	r2, [r3, #28]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	899b      	ldrh	r3, [r3, #12]
 80091e6:	4619      	mov	r1, r3
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80091ee:	441a      	add	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	899b      	ldrh	r3, [r3, #12]
 80091fe:	461a      	mov	r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	fbb3 f0f2 	udiv	r0, r3, r2
 8009206:	fb02 f200 	mul.w	r2, r2, r0
 800920a:	1a9b      	subs	r3, r3, r2
 800920c:	18ca      	adds	r2, r1, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	3320      	adds	r3, #32
 8009232:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d003      	beq.n	8009244 <dir_next+0x28>
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009242:	d301      	bcc.n	8009248 <dir_next+0x2c>
 8009244:	2304      	movs	r3, #4
 8009246:	e0bb      	b.n	80093c0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	899b      	ldrh	r3, [r3, #12]
 800924c:	461a      	mov	r2, r3
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	fbb3 f1f2 	udiv	r1, r3, r2
 8009254:	fb02 f201 	mul.w	r2, r2, r1
 8009258:	1a9b      	subs	r3, r3, r2
 800925a:	2b00      	cmp	r3, #0
 800925c:	f040 809d 	bne.w	800939a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10b      	bne.n	800928a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	095b      	lsrs	r3, r3, #5
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	8912      	ldrh	r2, [r2, #8]
 800927a:	4293      	cmp	r3, r2
 800927c:	f0c0 808d 	bcc.w	800939a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	61da      	str	r2, [r3, #28]
 8009286:	2304      	movs	r3, #4
 8009288:	e09a      	b.n	80093c0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	899b      	ldrh	r3, [r3, #12]
 800928e:	461a      	mov	r2, r3
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	fbb3 f3f2 	udiv	r3, r3, r2
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	8952      	ldrh	r2, [r2, #10]
 800929a:	3a01      	subs	r2, #1
 800929c:	4013      	ands	r3, r2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d17b      	bne.n	800939a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	4619      	mov	r1, r3
 80092aa:	4610      	mov	r0, r2
 80092ac:	f7ff fc11 	bl	8008ad2 <get_fat>
 80092b0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d801      	bhi.n	80092bc <dir_next+0xa0>
 80092b8:	2302      	movs	r3, #2
 80092ba:	e081      	b.n	80093c0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c2:	d101      	bne.n	80092c8 <dir_next+0xac>
 80092c4:	2301      	movs	r3, #1
 80092c6:	e07b      	b.n	80093c0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d359      	bcc.n	8009386 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d104      	bne.n	80092e2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	61da      	str	r2, [r3, #28]
 80092de:	2304      	movs	r3, #4
 80092e0:	e06e      	b.n	80093c0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f7ff fe3d 	bl	8008f6a <create_chain>
 80092f0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <dir_next+0xe0>
 80092f8:	2307      	movs	r3, #7
 80092fa:	e061      	b.n	80093c0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <dir_next+0xea>
 8009302:	2302      	movs	r3, #2
 8009304:	e05c      	b.n	80093c0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930c:	d101      	bne.n	8009312 <dir_next+0xf6>
 800930e:	2301      	movs	r3, #1
 8009310:	e056      	b.n	80093c0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff fadc 	bl	80088d0 <sync_window>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <dir_next+0x106>
 800931e:	2301      	movs	r3, #1
 8009320:	e04e      	b.n	80093c0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	899b      	ldrh	r3, [r3, #12]
 800932c:	461a      	mov	r2, r3
 800932e:	2100      	movs	r1, #0
 8009330:	f7ff f905 	bl	800853e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009334:	2300      	movs	r3, #0
 8009336:	613b      	str	r3, [r7, #16]
 8009338:	6979      	ldr	r1, [r7, #20]
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f7ff fbaa 	bl	8008a94 <clust2sect>
 8009340:	4602      	mov	r2, r0
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	635a      	str	r2, [r3, #52]	; 0x34
 8009346:	e012      	b.n	800936e <dir_next+0x152>
						fs->wflag = 1;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2201      	movs	r2, #1
 800934c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff fabe 	bl	80088d0 <sync_window>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <dir_next+0x142>
 800935a:	2301      	movs	r3, #1
 800935c:	e030      	b.n	80093c0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	3301      	adds	r3, #1
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	635a      	str	r2, [r3, #52]	; 0x34
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	895b      	ldrh	r3, [r3, #10]
 8009372:	461a      	mov	r2, r3
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	4293      	cmp	r3, r2
 8009378:	d3e6      	bcc.n	8009348 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	1ad2      	subs	r2, r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800938c:	6979      	ldr	r1, [r7, #20]
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7ff fb80 	bl	8008a94 <clust2sect>
 8009394:	4602      	mov	r2, r0
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	899b      	ldrh	r3, [r3, #12]
 80093aa:	461a      	mov	r2, r3
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80093b2:	fb02 f200 	mul.w	r2, r2, r0
 80093b6:	1a9b      	subs	r3, r3, r2
 80093b8:	18ca      	adds	r2, r1, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80093d8:	2100      	movs	r1, #0
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff fe95 	bl	800910a <dir_sdi>
 80093e0:	4603      	mov	r3, r0
 80093e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d12b      	bne.n	8009442 <dir_alloc+0x7a>
		n = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	69db      	ldr	r3, [r3, #28]
 80093f2:	4619      	mov	r1, r3
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f7ff faaf 	bl	8008958 <move_window>
 80093fa:	4603      	mov	r3, r0
 80093fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d11d      	bne.n	8009440 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a1b      	ldr	r3, [r3, #32]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2be5      	cmp	r3, #229	; 0xe5
 800940c:	d004      	beq.n	8009418 <dir_alloc+0x50>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d107      	bne.n	8009428 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	3301      	adds	r3, #1
 800941c:	613b      	str	r3, [r7, #16]
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d102      	bne.n	800942c <dir_alloc+0x64>
 8009426:	e00c      	b.n	8009442 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009428:	2300      	movs	r3, #0
 800942a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800942c:	2101      	movs	r1, #1
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7ff fef4 	bl	800921c <dir_next>
 8009434:	4603      	mov	r3, r0
 8009436:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009438:	7dfb      	ldrb	r3, [r7, #23]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0d7      	beq.n	80093ee <dir_alloc+0x26>
 800943e:	e000      	b.n	8009442 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009440:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	2b04      	cmp	r3, #4
 8009446:	d101      	bne.n	800944c <dir_alloc+0x84>
 8009448:	2307      	movs	r3, #7
 800944a:	75fb      	strb	r3, [r7, #23]
	return res;
 800944c:	7dfb      	ldrb	r3, [r7, #23]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3718      	adds	r7, #24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	331a      	adds	r3, #26
 8009464:	4618      	mov	r0, r3
 8009466:	f7fe ffc7 	bl	80083f8 <ld_word>
 800946a:	4603      	mov	r3, r0
 800946c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2b03      	cmp	r3, #3
 8009474:	d109      	bne.n	800948a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	3314      	adds	r3, #20
 800947a:	4618      	mov	r0, r3
 800947c:	f7fe ffbc 	bl	80083f8 <ld_word>
 8009480:	4603      	mov	r3, r0
 8009482:	041b      	lsls	r3, r3, #16
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800948a:	68fb      	ldr	r3, [r7, #12]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	331a      	adds	r3, #26
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	b292      	uxth	r2, r2
 80094a8:	4611      	mov	r1, r2
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe ffdf 	bl	800846e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d109      	bne.n	80094cc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	f103 0214 	add.w	r2, r3, #20
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	0c1b      	lsrs	r3, r3, #16
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	4619      	mov	r1, r3
 80094c6:	4610      	mov	r0, r2
 80094c8:	f7fe ffd1 	bl	800846e <st_word>
	}
}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80094d4:	b590      	push	{r4, r7, lr}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	331a      	adds	r3, #26
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe ff88 	bl	80083f8 <ld_word>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <cmp_lfn+0x1e>
 80094ee:	2300      	movs	r3, #0
 80094f0:	e059      	b.n	80095a6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094fa:	1e5a      	subs	r2, r3, #1
 80094fc:	4613      	mov	r3, r2
 80094fe:	005b      	lsls	r3, r3, #1
 8009500:	4413      	add	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009508:	2301      	movs	r3, #1
 800950a:	81fb      	strh	r3, [r7, #14]
 800950c:	2300      	movs	r3, #0
 800950e:	613b      	str	r3, [r7, #16]
 8009510:	e033      	b.n	800957a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009512:	4a27      	ldr	r2, [pc, #156]	; (80095b0 <cmp_lfn+0xdc>)
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	4413      	add	r3, r2
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	4413      	add	r3, r2
 8009520:	4618      	mov	r0, r3
 8009522:	f7fe ff69 	bl	80083f8 <ld_word>
 8009526:	4603      	mov	r3, r0
 8009528:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800952a:	89fb      	ldrh	r3, [r7, #14]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d01a      	beq.n	8009566 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2bfe      	cmp	r3, #254	; 0xfe
 8009534:	d812      	bhi.n	800955c <cmp_lfn+0x88>
 8009536:	89bb      	ldrh	r3, [r7, #12]
 8009538:	4618      	mov	r0, r3
 800953a:	f002 f80f 	bl	800b55c <ff_wtoupper>
 800953e:	4603      	mov	r3, r0
 8009540:	461c      	mov	r4, r3
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	617a      	str	r2, [r7, #20]
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	4413      	add	r3, r2
 800954e:	881b      	ldrh	r3, [r3, #0]
 8009550:	4618      	mov	r0, r3
 8009552:	f002 f803 	bl	800b55c <ff_wtoupper>
 8009556:	4603      	mov	r3, r0
 8009558:	429c      	cmp	r4, r3
 800955a:	d001      	beq.n	8009560 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800955c:	2300      	movs	r3, #0
 800955e:	e022      	b.n	80095a6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009560:	89bb      	ldrh	r3, [r7, #12]
 8009562:	81fb      	strh	r3, [r7, #14]
 8009564:	e006      	b.n	8009574 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009566:	89bb      	ldrh	r3, [r7, #12]
 8009568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800956c:	4293      	cmp	r3, r2
 800956e:	d001      	beq.n	8009574 <cmp_lfn+0xa0>
 8009570:	2300      	movs	r3, #0
 8009572:	e018      	b.n	80095a6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	3301      	adds	r3, #1
 8009578:	613b      	str	r3, [r7, #16]
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	2b0c      	cmp	r3, #12
 800957e:	d9c8      	bls.n	8009512 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <cmp_lfn+0xd0>
 800958c:	89fb      	ldrh	r3, [r7, #14]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d008      	beq.n	80095a4 <cmp_lfn+0xd0>
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	4413      	add	r3, r2
 800959a:	881b      	ldrh	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <cmp_lfn+0xd0>
 80095a0:	2300      	movs	r3, #0
 80095a2:	e000      	b.n	80095a6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80095a4:	2301      	movs	r3, #1
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	371c      	adds	r7, #28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd90      	pop	{r4, r7, pc}
 80095ae:	bf00      	nop
 80095b0:	0800e378 	.word	0x0800e378

080095b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	4611      	mov	r1, r2
 80095c0:	461a      	mov	r2, r3
 80095c2:	460b      	mov	r3, r1
 80095c4:	71fb      	strb	r3, [r7, #7]
 80095c6:	4613      	mov	r3, r2
 80095c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	330d      	adds	r3, #13
 80095ce:	79ba      	ldrb	r2, [r7, #6]
 80095d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	330b      	adds	r3, #11
 80095d6:	220f      	movs	r2, #15
 80095d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	330c      	adds	r3, #12
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	331a      	adds	r3, #26
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fe ff40 	bl	800846e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	1e5a      	subs	r2, r3, #1
 80095f2:	4613      	mov	r3, r2
 80095f4:	005b      	lsls	r3, r3, #1
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	82fb      	strh	r3, [r7, #22]
 8009602:	2300      	movs	r3, #0
 8009604:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009606:	8afb      	ldrh	r3, [r7, #22]
 8009608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800960c:	4293      	cmp	r3, r2
 800960e:	d007      	beq.n	8009620 <put_lfn+0x6c>
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	61fa      	str	r2, [r7, #28]
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	4413      	add	r3, r2
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009620:	4a17      	ldr	r2, [pc, #92]	; (8009680 <put_lfn+0xcc>)
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	4413      	add	r3, r2
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	461a      	mov	r2, r3
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4413      	add	r3, r2
 800962e:	8afa      	ldrh	r2, [r7, #22]
 8009630:	4611      	mov	r1, r2
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe ff1b 	bl	800846e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009638:	8afb      	ldrh	r3, [r7, #22]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d102      	bne.n	8009644 <put_lfn+0x90>
 800963e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009642:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	3301      	adds	r3, #1
 8009648:	61bb      	str	r3, [r7, #24]
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	2b0c      	cmp	r3, #12
 800964e:	d9da      	bls.n	8009606 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009650:	8afb      	ldrh	r3, [r7, #22]
 8009652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009656:	4293      	cmp	r3, r2
 8009658:	d006      	beq.n	8009668 <put_lfn+0xb4>
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4413      	add	r3, r2
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d103      	bne.n	8009670 <put_lfn+0xbc>
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800966e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	79fa      	ldrb	r2, [r7, #7]
 8009674:	701a      	strb	r2, [r3, #0]
}
 8009676:	bf00      	nop
 8009678:	3720      	adds	r7, #32
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	0800e378 	.word	0x0800e378

08009684 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08c      	sub	sp, #48	; 0x30
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
 8009690:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009692:	220b      	movs	r2, #11
 8009694:	68b9      	ldr	r1, [r7, #8]
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7fe ff30 	bl	80084fc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b05      	cmp	r3, #5
 80096a0:	d92b      	bls.n	80096fa <gen_numname+0x76>
		sr = seq;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80096a6:	e022      	b.n	80096ee <gen_numname+0x6a>
			wc = *lfn++;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	1c9a      	adds	r2, r3, #2
 80096ac:	607a      	str	r2, [r7, #4]
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80096b2:	2300      	movs	r3, #0
 80096b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80096b6:	e017      	b.n	80096e8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	005a      	lsls	r2, r3, #1
 80096bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	4413      	add	r3, r2
 80096c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80096c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096c8:	085b      	lsrs	r3, r3, #1
 80096ca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d005      	beq.n	80096e2 <gen_numname+0x5e>
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80096dc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80096e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	3301      	adds	r3, #1
 80096e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	2b0f      	cmp	r3, #15
 80096ec:	d9e4      	bls.n	80096b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	881b      	ldrh	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1d8      	bne.n	80096a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80096fa:	2307      	movs	r3, #7
 80096fc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	f003 030f 	and.w	r3, r3, #15
 8009706:	b2db      	uxtb	r3, r3
 8009708:	3330      	adds	r3, #48	; 0x30
 800970a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800970e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009712:	2b39      	cmp	r3, #57	; 0x39
 8009714:	d904      	bls.n	8009720 <gen_numname+0x9c>
 8009716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800971a:	3307      	adds	r3, #7
 800971c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	1e5a      	subs	r2, r3, #1
 8009724:	62ba      	str	r2, [r7, #40]	; 0x28
 8009726:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800972a:	4413      	add	r3, r2
 800972c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009730:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	091b      	lsrs	r3, r3, #4
 8009738:	603b      	str	r3, [r7, #0]
	} while (seq);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1de      	bne.n	80096fe <gen_numname+0x7a>
	ns[i] = '~';
 8009740:	f107 0214 	add.w	r2, r7, #20
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	4413      	add	r3, r2
 8009748:	227e      	movs	r2, #126	; 0x7e
 800974a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800974c:	2300      	movs	r3, #0
 800974e:	627b      	str	r3, [r7, #36]	; 0x24
 8009750:	e002      	b.n	8009758 <gen_numname+0xd4>
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	3301      	adds	r3, #1
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
 8009758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	429a      	cmp	r2, r3
 800975e:	d205      	bcs.n	800976c <gen_numname+0xe8>
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009764:	4413      	add	r3, r2
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b20      	cmp	r3, #32
 800976a:	d1f2      	bne.n	8009752 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	2b07      	cmp	r3, #7
 8009770:	d808      	bhi.n	8009784 <gen_numname+0x100>
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	62ba      	str	r2, [r7, #40]	; 0x28
 8009778:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800977c:	4413      	add	r3, r2
 800977e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009782:	e000      	b.n	8009786 <gen_numname+0x102>
 8009784:	2120      	movs	r1, #32
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	627a      	str	r2, [r7, #36]	; 0x24
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4413      	add	r3, r2
 8009790:	460a      	mov	r2, r1
 8009792:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	2b07      	cmp	r3, #7
 8009798:	d9e8      	bls.n	800976c <gen_numname+0xe8>
}
 800979a:	bf00      	nop
 800979c:	3730      	adds	r7, #48	; 0x30
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b085      	sub	sp, #20
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80097ae:	230b      	movs	r3, #11
 80097b0:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	0852      	lsrs	r2, r2, #1
 80097b8:	01db      	lsls	r3, r3, #7
 80097ba:	4313      	orrs	r3, r2
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	1c59      	adds	r1, r3, #1
 80097c2:	6079      	str	r1, [r7, #4]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	4413      	add	r3, r2
 80097c8:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	60bb      	str	r3, [r7, #8]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1ed      	bne.n	80097b2 <sum_sfn+0x10>
	return sum;
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80097f2:	2100      	movs	r1, #0
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff fc88 	bl	800910a <dir_sdi>
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <dir_find+0x24>
 8009804:	7dfb      	ldrb	r3, [r7, #23]
 8009806:	e0a9      	b.n	800995c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009808:	23ff      	movs	r3, #255	; 0xff
 800980a:	753b      	strb	r3, [r7, #20]
 800980c:	7d3b      	ldrb	r3, [r7, #20]
 800980e:	757b      	strb	r3, [r7, #21]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f04f 32ff 	mov.w	r2, #4294967295
 8009816:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	69db      	ldr	r3, [r3, #28]
 800981c:	4619      	mov	r1, r3
 800981e:	6938      	ldr	r0, [r7, #16]
 8009820:	f7ff f89a 	bl	8008958 <move_window>
 8009824:	4603      	mov	r3, r0
 8009826:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f040 8090 	bne.w	8009950 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009838:	7dbb      	ldrb	r3, [r7, #22]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <dir_find+0x60>
 800983e:	2304      	movs	r3, #4
 8009840:	75fb      	strb	r3, [r7, #23]
 8009842:	e08a      	b.n	800995a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	330b      	adds	r3, #11
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009850:	73fb      	strb	r3, [r7, #15]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	7bfa      	ldrb	r2, [r7, #15]
 8009856:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009858:	7dbb      	ldrb	r3, [r7, #22]
 800985a:	2be5      	cmp	r3, #229	; 0xe5
 800985c:	d007      	beq.n	800986e <dir_find+0x8a>
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b00      	cmp	r3, #0
 8009866:	d009      	beq.n	800987c <dir_find+0x98>
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	2b0f      	cmp	r3, #15
 800986c:	d006      	beq.n	800987c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800986e:	23ff      	movs	r3, #255	; 0xff
 8009870:	757b      	strb	r3, [r7, #21]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f04f 32ff 	mov.w	r2, #4294967295
 8009878:	631a      	str	r2, [r3, #48]	; 0x30
 800987a:	e05e      	b.n	800993a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	2b0f      	cmp	r3, #15
 8009880:	d136      	bne.n	80098f0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988c:	2b00      	cmp	r3, #0
 800988e:	d154      	bne.n	800993a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009890:	7dbb      	ldrb	r3, [r7, #22]
 8009892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00d      	beq.n	80098b6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	7b5b      	ldrb	r3, [r3, #13]
 80098a0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80098a2:	7dbb      	ldrb	r3, [r7, #22]
 80098a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098a8:	75bb      	strb	r3, [r7, #22]
 80098aa:	7dbb      	ldrb	r3, [r7, #22]
 80098ac:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	695a      	ldr	r2, [r3, #20]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80098b6:	7dba      	ldrb	r2, [r7, #22]
 80098b8:	7d7b      	ldrb	r3, [r7, #21]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d115      	bne.n	80098ea <dir_find+0x106>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	330d      	adds	r3, #13
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	7d3a      	ldrb	r2, [r7, #20]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d10e      	bne.n	80098ea <dir_find+0x106>
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	691a      	ldr	r2, [r3, #16]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	f7ff fdfc 	bl	80094d4 <cmp_lfn>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <dir_find+0x106>
 80098e2:	7d7b      	ldrb	r3, [r7, #21]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	e000      	b.n	80098ec <dir_find+0x108>
 80098ea:	23ff      	movs	r3, #255	; 0xff
 80098ec:	757b      	strb	r3, [r7, #21]
 80098ee:	e024      	b.n	800993a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80098f0:	7d7b      	ldrb	r3, [r7, #21]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d109      	bne.n	800990a <dir_find+0x126>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff ff51 	bl	80097a2 <sum_sfn>
 8009900:	4603      	mov	r3, r0
 8009902:	461a      	mov	r2, r3
 8009904:	7d3b      	ldrb	r3, [r7, #20]
 8009906:	4293      	cmp	r3, r2
 8009908:	d024      	beq.n	8009954 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <dir_find+0x14a>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a18      	ldr	r0, [r3, #32]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3324      	adds	r3, #36	; 0x24
 8009920:	220b      	movs	r2, #11
 8009922:	4619      	mov	r1, r3
 8009924:	f7fe fe25 	bl	8008572 <mem_cmp>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d014      	beq.n	8009958 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800992e:	23ff      	movs	r3, #255	; 0xff
 8009930:	757b      	strb	r3, [r7, #21]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f04f 32ff 	mov.w	r2, #4294967295
 8009938:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800993a:	2100      	movs	r1, #0
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff fc6d 	bl	800921c <dir_next>
 8009942:	4603      	mov	r3, r0
 8009944:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009946:	7dfb      	ldrb	r3, [r7, #23]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f43f af65 	beq.w	8009818 <dir_find+0x34>
 800994e:	e004      	b.n	800995a <dir_find+0x176>
		if (res != FR_OK) break;
 8009950:	bf00      	nop
 8009952:	e002      	b.n	800995a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009954:	bf00      	nop
 8009956:	e000      	b.n	800995a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009958:	bf00      	nop

	return res;
 800995a:	7dfb      	ldrb	r3, [r7, #23]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b08c      	sub	sp, #48	; 0x30
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009978:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <dir_register+0x20>
 8009980:	2306      	movs	r3, #6
 8009982:	e0e0      	b.n	8009b46 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009984:	2300      	movs	r3, #0
 8009986:	627b      	str	r3, [r7, #36]	; 0x24
 8009988:	e002      	b.n	8009990 <dir_register+0x2c>
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	3301      	adds	r3, #1
 800998e:	627b      	str	r3, [r7, #36]	; 0x24
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	691a      	ldr	r2, [r3, #16]
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	4413      	add	r3, r2
 800999a:	881b      	ldrh	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1f4      	bne.n	800998a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80099a6:	f107 030c 	add.w	r3, r7, #12
 80099aa:	220c      	movs	r2, #12
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fe fda5 	bl	80084fc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d032      	beq.n	8009a22 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2240      	movs	r2, #64	; 0x40
 80099c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80099c4:	2301      	movs	r3, #1
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80099c8:	e016      	b.n	80099f8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	691a      	ldr	r2, [r3, #16]
 80099d4:	f107 010c 	add.w	r1, r7, #12
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	f7ff fe53 	bl	8009684 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7ff ff00 	bl	80097e4 <dir_find>
 80099e4:	4603      	mov	r3, r0
 80099e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80099ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d106      	bne.n	8009a00 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80099f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f4:	3301      	adds	r3, #1
 80099f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fa:	2b63      	cmp	r3, #99	; 0x63
 80099fc:	d9e5      	bls.n	80099ca <dir_register+0x66>
 80099fe:	e000      	b.n	8009a02 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009a00:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	2b64      	cmp	r3, #100	; 0x64
 8009a06:	d101      	bne.n	8009a0c <dir_register+0xa8>
 8009a08:	2307      	movs	r3, #7
 8009a0a:	e09c      	b.n	8009b46 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	d002      	beq.n	8009a1a <dir_register+0xb6>
 8009a14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a18:	e095      	b.n	8009b46 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009a1a:	7dfa      	ldrb	r2, [r7, #23]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009a22:	7dfb      	ldrb	r3, [r7, #23]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d007      	beq.n	8009a3c <dir_register+0xd8>
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	330c      	adds	r3, #12
 8009a30:	4a47      	ldr	r2, [pc, #284]	; (8009b50 <dir_register+0x1ec>)
 8009a32:	fba2 2303 	umull	r2, r3, r2, r3
 8009a36:	089b      	lsrs	r3, r3, #2
 8009a38:	3301      	adds	r3, #1
 8009a3a:	e000      	b.n	8009a3e <dir_register+0xda>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009a40:	6a39      	ldr	r1, [r7, #32]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff fcc0 	bl	80093c8 <dir_alloc>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d148      	bne.n	8009ae8 <dir_register+0x184>
 8009a56:	6a3b      	ldr	r3, [r7, #32]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	623b      	str	r3, [r7, #32]
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d042      	beq.n	8009ae8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	695a      	ldr	r2, [r3, #20]
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	015b      	lsls	r3, r3, #5
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7ff fb4b 	bl	800910a <dir_sdi>
 8009a74:	4603      	mov	r3, r0
 8009a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d132      	bne.n	8009ae8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	3324      	adds	r3, #36	; 0x24
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff fe8b 	bl	80097a2 <sum_sfn>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	69db      	ldr	r3, [r3, #28]
 8009a94:	4619      	mov	r1, r3
 8009a96:	69f8      	ldr	r0, [r7, #28]
 8009a98:	f7fe ff5e 	bl	8008958 <move_window>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d11d      	bne.n	8009ae6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	6918      	ldr	r0, [r3, #16]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a19      	ldr	r1, [r3, #32]
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	b2da      	uxtb	r2, r3
 8009ab6:	7efb      	ldrb	r3, [r7, #27]
 8009ab8:	f7ff fd7c 	bl	80095b4 <put_lfn>
				fs->wflag = 1;
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff fba9 	bl	800921c <dir_next>
 8009aca:	4603      	mov	r3, r0
 8009acc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d107      	bne.n	8009ae8 <dir_register+0x184>
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	623b      	str	r3, [r7, #32]
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1d5      	bne.n	8009a90 <dir_register+0x12c>
 8009ae4:	e000      	b.n	8009ae8 <dir_register+0x184>
				if (res != FR_OK) break;
 8009ae6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ae8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d128      	bne.n	8009b42 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	69db      	ldr	r3, [r3, #28]
 8009af4:	4619      	mov	r1, r3
 8009af6:	69f8      	ldr	r0, [r7, #28]
 8009af8:	f7fe ff2e 	bl	8008958 <move_window>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d11b      	bne.n	8009b42 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	2100      	movs	r1, #0
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fd13 	bl	800853e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a18      	ldr	r0, [r3, #32]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3324      	adds	r3, #36	; 0x24
 8009b20:	220b      	movs	r2, #11
 8009b22:	4619      	mov	r1, r3
 8009b24:	f7fe fcea 	bl	80084fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	330c      	adds	r3, #12
 8009b34:	f002 0218 	and.w	r2, r2, #24
 8009b38:	b2d2      	uxtb	r2, r2
 8009b3a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3730      	adds	r7, #48	; 0x30
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	4ec4ec4f 	.word	0x4ec4ec4f

08009b54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b08a      	sub	sp, #40	; 0x28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	613b      	str	r3, [r7, #16]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	617b      	str	r3, [r7, #20]
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	1c5a      	adds	r2, r3, #1
 8009b78:	61ba      	str	r2, [r7, #24]
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b84:	2b1f      	cmp	r3, #31
 8009b86:	d940      	bls.n	8009c0a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b8a:	2b2f      	cmp	r3, #47	; 0x2f
 8009b8c:	d006      	beq.n	8009b9c <create_name+0x48>
 8009b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b90:	2b5c      	cmp	r3, #92	; 0x5c
 8009b92:	d110      	bne.n	8009bb6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009b94:	e002      	b.n	8009b9c <create_name+0x48>
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	61bb      	str	r3, [r7, #24]
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2b2f      	cmp	r3, #47	; 0x2f
 8009ba6:	d0f6      	beq.n	8009b96 <create_name+0x42>
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	4413      	add	r3, r2
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2b5c      	cmp	r3, #92	; 0x5c
 8009bb2:	d0f0      	beq.n	8009b96 <create_name+0x42>
			break;
 8009bb4:	e02a      	b.n	8009c0c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2bfe      	cmp	r3, #254	; 0xfe
 8009bba:	d901      	bls.n	8009bc0 <create_name+0x6c>
 8009bbc:	2306      	movs	r3, #6
 8009bbe:	e177      	b.n	8009eb0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009bc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bc8:	2101      	movs	r1, #1
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f001 fc8a 	bl	800b4e4 <ff_convert>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009bd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <create_name+0x8a>
 8009bda:	2306      	movs	r3, #6
 8009bdc:	e168      	b.n	8009eb0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009be0:	2b7f      	cmp	r3, #127	; 0x7f
 8009be2:	d809      	bhi.n	8009bf8 <create_name+0xa4>
 8009be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009be6:	4619      	mov	r1, r3
 8009be8:	48b3      	ldr	r0, [pc, #716]	; (8009eb8 <create_name+0x364>)
 8009bea:	f7fe fce9 	bl	80085c0 <chk_chr>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <create_name+0xa4>
 8009bf4:	2306      	movs	r3, #6
 8009bf6:	e15b      	b.n	8009eb0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	617a      	str	r2, [r7, #20]
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4413      	add	r3, r2
 8009c04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c06:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009c08:	e7b4      	b.n	8009b74 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009c0a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	441a      	add	r2, r3
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009c16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c18:	2b1f      	cmp	r3, #31
 8009c1a:	d801      	bhi.n	8009c20 <create_name+0xcc>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	e000      	b.n	8009c22 <create_name+0xce>
 8009c20:	2300      	movs	r3, #0
 8009c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009c26:	e011      	b.n	8009c4c <create_name+0xf8>
		w = lfn[di - 1];
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	005b      	lsls	r3, r3, #1
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	4413      	add	r3, r2
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c3c:	2b20      	cmp	r3, #32
 8009c3e:	d002      	beq.n	8009c46 <create_name+0xf2>
 8009c40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c42:	2b2e      	cmp	r3, #46	; 0x2e
 8009c44:	d106      	bne.n	8009c54 <create_name+0x100>
		di--;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1ea      	bne.n	8009c28 <create_name+0xd4>
 8009c52:	e000      	b.n	8009c56 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009c54:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	2200      	movs	r2, #0
 8009c60:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <create_name+0x118>
 8009c68:	2306      	movs	r3, #6
 8009c6a:	e121      	b.n	8009eb0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3324      	adds	r3, #36	; 0x24
 8009c70:	220b      	movs	r2, #11
 8009c72:	2120      	movs	r1, #32
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe fc62 	bl	800853e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61bb      	str	r3, [r7, #24]
 8009c7e:	e002      	b.n	8009c86 <create_name+0x132>
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	3301      	adds	r3, #1
 8009c84:	61bb      	str	r3, [r7, #24]
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	2b20      	cmp	r3, #32
 8009c92:	d0f5      	beq.n	8009c80 <create_name+0x12c>
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8009ca0:	d0ee      	beq.n	8009c80 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d009      	beq.n	8009cbc <create_name+0x168>
 8009ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cac:	f043 0303 	orr.w	r3, r3, #3
 8009cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009cb4:	e002      	b.n	8009cbc <create_name+0x168>
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d009      	beq.n	8009cd6 <create_name+0x182>
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8009cd4:	d1ef      	bne.n	8009cb6 <create_name+0x162>

	i = b = 0; ni = 8;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009cdc:	2300      	movs	r3, #0
 8009cde:	623b      	str	r3, [r7, #32]
 8009ce0:	2308      	movs	r3, #8
 8009ce2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	1c5a      	adds	r2, r3, #1
 8009ce8:	61ba      	str	r2, [r7, #24]
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 8090 	beq.w	8009e1c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cfe:	2b20      	cmp	r3, #32
 8009d00:	d006      	beq.n	8009d10 <create_name+0x1bc>
 8009d02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d04:	2b2e      	cmp	r3, #46	; 0x2e
 8009d06:	d10a      	bne.n	8009d1e <create_name+0x1ca>
 8009d08:	69ba      	ldr	r2, [r7, #24]
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d006      	beq.n	8009d1e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d14:	f043 0303 	orr.w	r3, r3, #3
 8009d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d1c:	e07d      	b.n	8009e1a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009d1e:	6a3a      	ldr	r2, [r7, #32]
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d203      	bcs.n	8009d2e <create_name+0x1da>
 8009d26:	69ba      	ldr	r2, [r7, #24]
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d123      	bne.n	8009d76 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	2b0b      	cmp	r3, #11
 8009d32:	d106      	bne.n	8009d42 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d38:	f043 0303 	orr.w	r3, r3, #3
 8009d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d40:	e06f      	b.n	8009e22 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d005      	beq.n	8009d56 <create_name+0x202>
 8009d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d4e:	f043 0303 	orr.w	r3, r3, #3
 8009d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d860      	bhi.n	8009e20 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	61bb      	str	r3, [r7, #24]
 8009d62:	2308      	movs	r3, #8
 8009d64:	623b      	str	r3, [r7, #32]
 8009d66:	230b      	movs	r3, #11
 8009d68:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009d74:	e051      	b.n	8009e1a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d78:	2b7f      	cmp	r3, #127	; 0x7f
 8009d7a:	d914      	bls.n	8009da6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009d7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f001 fbaf 	bl	800b4e4 <ff_convert>
 8009d86:	4603      	mov	r3, r0
 8009d88:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d004      	beq.n	8009d9a <create_name+0x246>
 8009d90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d92:	3b80      	subs	r3, #128	; 0x80
 8009d94:	4a49      	ldr	r2, [pc, #292]	; (8009ebc <create_name+0x368>)
 8009d96:	5cd3      	ldrb	r3, [r2, r3]
 8009d98:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d9e:	f043 0302 	orr.w	r3, r3, #2
 8009da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009da6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d007      	beq.n	8009dbc <create_name+0x268>
 8009dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dae:	4619      	mov	r1, r3
 8009db0:	4843      	ldr	r0, [pc, #268]	; (8009ec0 <create_name+0x36c>)
 8009db2:	f7fe fc05 	bl	80085c0 <chk_chr>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d008      	beq.n	8009dce <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009dbc:	235f      	movs	r3, #95	; 0x5f
 8009dbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dc4:	f043 0303 	orr.w	r3, r3, #3
 8009dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dcc:	e01b      	b.n	8009e06 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dd0:	2b40      	cmp	r3, #64	; 0x40
 8009dd2:	d909      	bls.n	8009de8 <create_name+0x294>
 8009dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dd6:	2b5a      	cmp	r3, #90	; 0x5a
 8009dd8:	d806      	bhi.n	8009de8 <create_name+0x294>
					b |= 2;
 8009dda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009dde:	f043 0302 	orr.w	r3, r3, #2
 8009de2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009de6:	e00e      	b.n	8009e06 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009de8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dea:	2b60      	cmp	r3, #96	; 0x60
 8009dec:	d90b      	bls.n	8009e06 <create_name+0x2b2>
 8009dee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009df0:	2b7a      	cmp	r3, #122	; 0x7a
 8009df2:	d808      	bhi.n	8009e06 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009df4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009df8:	f043 0301 	orr.w	r3, r3, #1
 8009dfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e02:	3b20      	subs	r3, #32
 8009e04:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	623a      	str	r2, [r7, #32]
 8009e0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e0e:	b2d1      	uxtb	r1, r2
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	4413      	add	r3, r2
 8009e14:	460a      	mov	r2, r1
 8009e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009e1a:	e763      	b.n	8009ce4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009e1c:	bf00      	nop
 8009e1e:	e000      	b.n	8009e22 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009e20:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e28:	2be5      	cmp	r3, #229	; 0xe5
 8009e2a:	d103      	bne.n	8009e34 <create_name+0x2e0>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2205      	movs	r2, #5
 8009e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	2b08      	cmp	r3, #8
 8009e38:	d104      	bne.n	8009e44 <create_name+0x2f0>
 8009e3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009e44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e48:	f003 030c 	and.w	r3, r3, #12
 8009e4c:	2b0c      	cmp	r3, #12
 8009e4e:	d005      	beq.n	8009e5c <create_name+0x308>
 8009e50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e54:	f003 0303 	and.w	r3, r3, #3
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d105      	bne.n	8009e68 <create_name+0x314>
 8009e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e60:	f043 0302 	orr.w	r3, r3, #2
 8009e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d117      	bne.n	8009ea4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009e74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e78:	f003 0303 	and.w	r3, r3, #3
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d105      	bne.n	8009e8c <create_name+0x338>
 8009e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e84:	f043 0310 	orr.w	r3, r3, #16
 8009e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009e8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e90:	f003 030c 	and.w	r3, r3, #12
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	d105      	bne.n	8009ea4 <create_name+0x350>
 8009e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e9c:	f043 0308 	orr.w	r3, r3, #8
 8009ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009eaa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009eae:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3728      	adds	r7, #40	; 0x28
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	0800e284 	.word	0x0800e284
 8009ebc:	0800e2f8 	.word	0x0800e2f8
 8009ec0:	0800e290 	.word	0x0800e290

08009ec4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009ed8:	e002      	b.n	8009ee0 <follow_path+0x1c>
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	3301      	adds	r3, #1
 8009ede:	603b      	str	r3, [r7, #0]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	2b2f      	cmp	r3, #47	; 0x2f
 8009ee6:	d0f8      	beq.n	8009eda <follow_path+0x16>
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	2b5c      	cmp	r3, #92	; 0x5c
 8009eee:	d0f4      	beq.n	8009eda <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2b1f      	cmp	r3, #31
 8009efc:	d80a      	bhi.n	8009f14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2280      	movs	r2, #128	; 0x80
 8009f02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009f06:	2100      	movs	r1, #0
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f7ff f8fe 	bl	800910a <dir_sdi>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	75fb      	strb	r3, [r7, #23]
 8009f12:	e048      	b.n	8009fa6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f14:	463b      	mov	r3, r7
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7ff fe1b 	bl	8009b54 <create_name>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d139      	bne.n	8009f9c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7ff fc5b 	bl	80097e4 <dir_find>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009f40:	7dfb      	ldrb	r3, [r7, #23]
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	d12c      	bne.n	8009fa0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009f46:	7afb      	ldrb	r3, [r7, #11]
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d127      	bne.n	8009fa0 <follow_path+0xdc>
 8009f50:	2305      	movs	r3, #5
 8009f52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009f54:	e024      	b.n	8009fa0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f56:	7afb      	ldrb	r3, [r7, #11]
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d121      	bne.n	8009fa4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	799b      	ldrb	r3, [r3, #6]
 8009f64:	f003 0310 	and.w	r3, r3, #16
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d102      	bne.n	8009f72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009f6c:	2305      	movs	r3, #5
 8009f6e:	75fb      	strb	r3, [r7, #23]
 8009f70:	e019      	b.n	8009fa6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	8992      	ldrh	r2, [r2, #12]
 8009f80:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f84:	fb02 f200 	mul.w	r2, r2, r0
 8009f88:	1a9b      	subs	r3, r3, r2
 8009f8a:	440b      	add	r3, r1
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff fa61 	bl	8009456 <ld_clust>
 8009f94:	4602      	mov	r2, r0
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f9a:	e7bb      	b.n	8009f14 <follow_path+0x50>
			if (res != FR_OK) break;
 8009f9c:	bf00      	nop
 8009f9e:	e002      	b.n	8009fa6 <follow_path+0xe2>
				break;
 8009fa0:	bf00      	nop
 8009fa2:	e000      	b.n	8009fa6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009fa4:	bf00      	nop
			}
		}
	}

	return res;
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b087      	sub	sp, #28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fbc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d031      	beq.n	800a02a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	617b      	str	r3, [r7, #20]
 8009fcc:	e002      	b.n	8009fd4 <get_ldnumber+0x24>
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	617b      	str	r3, [r7, #20]
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b1f      	cmp	r3, #31
 8009fda:	d903      	bls.n	8009fe4 <get_ldnumber+0x34>
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	2b3a      	cmp	r3, #58	; 0x3a
 8009fe2:	d1f4      	bne.n	8009fce <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	2b3a      	cmp	r3, #58	; 0x3a
 8009fea:	d11c      	bne.n	800a026 <get_ldnumber+0x76>
			tp = *path;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	1c5a      	adds	r2, r3, #1
 8009ff6:	60fa      	str	r2, [r7, #12]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	3b30      	subs	r3, #48	; 0x30
 8009ffc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2b09      	cmp	r3, #9
 800a002:	d80e      	bhi.n	800a022 <get_ldnumber+0x72>
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d10a      	bne.n	800a022 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d107      	bne.n	800a022 <get_ldnumber+0x72>
					vol = (int)i;
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	3301      	adds	r3, #1
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	e002      	b.n	800a02c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a02a:	693b      	ldr	r3, [r7, #16]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	371c      	adds	r7, #28
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	70da      	strb	r2, [r3, #3]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f04f 32ff 	mov.w	r2, #4294967295
 800a04e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7fe fc80 	bl	8008958 <move_window>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <check_fs+0x2a>
 800a05e:	2304      	movs	r3, #4
 800a060:	e038      	b.n	800a0d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	3338      	adds	r3, #56	; 0x38
 800a066:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe f9c4 	bl	80083f8 <ld_word>
 800a070:	4603      	mov	r3, r0
 800a072:	461a      	mov	r2, r3
 800a074:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a078:	429a      	cmp	r2, r3
 800a07a:	d001      	beq.n	800a080 <check_fs+0x48>
 800a07c:	2303      	movs	r3, #3
 800a07e:	e029      	b.n	800a0d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a086:	2be9      	cmp	r3, #233	; 0xe9
 800a088:	d009      	beq.n	800a09e <check_fs+0x66>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a090:	2beb      	cmp	r3, #235	; 0xeb
 800a092:	d11e      	bne.n	800a0d2 <check_fs+0x9a>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a09a:	2b90      	cmp	r3, #144	; 0x90
 800a09c:	d119      	bne.n	800a0d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3338      	adds	r3, #56	; 0x38
 800a0a2:	3336      	adds	r3, #54	; 0x36
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe f9bf 	bl	8008428 <ld_dword>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a0b0:	4a0a      	ldr	r2, [pc, #40]	; (800a0dc <check_fs+0xa4>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d101      	bne.n	800a0ba <check_fs+0x82>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	e00c      	b.n	800a0d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3338      	adds	r3, #56	; 0x38
 800a0be:	3352      	adds	r3, #82	; 0x52
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7fe f9b1 	bl	8008428 <ld_dword>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	4b05      	ldr	r3, [pc, #20]	; (800a0e0 <check_fs+0xa8>)
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d101      	bne.n	800a0d2 <check_fs+0x9a>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	e000      	b.n	800a0d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a0d2:	2302      	movs	r3, #2
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	00544146 	.word	0x00544146
 800a0e0:	33544146 	.word	0x33544146

0800a0e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b096      	sub	sp, #88	; 0x58
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7ff ff59 	bl	8009fb0 <get_ldnumber>
 800a0fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a102:	2b00      	cmp	r3, #0
 800a104:	da01      	bge.n	800a10a <find_volume+0x26>
 800a106:	230b      	movs	r3, #11
 800a108:	e268      	b.n	800a5dc <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a10a:	4ab0      	ldr	r2, [pc, #704]	; (800a3cc <find_volume+0x2e8>)
 800a10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a112:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	2b00      	cmp	r3, #0
 800a118:	d101      	bne.n	800a11e <find_volume+0x3a>
 800a11a:	230c      	movs	r3, #12
 800a11c:	e25e      	b.n	800a5dc <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a122:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a124:	79fb      	ldrb	r3, [r7, #7]
 800a126:	f023 0301 	bic.w	r3, r3, #1
 800a12a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d01a      	beq.n	800a16a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	785b      	ldrb	r3, [r3, #1]
 800a138:	4618      	mov	r0, r3
 800a13a:	f7fe f8bf 	bl	80082bc <disk_status>
 800a13e:	4603      	mov	r3, r0
 800a140:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a144:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10c      	bne.n	800a16a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d007      	beq.n	800a166 <find_volume+0x82>
 800a156:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a162:	230a      	movs	r3, #10
 800a164:	e23a      	b.n	800a5dc <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800a166:	2300      	movs	r3, #0
 800a168:	e238      	b.n	800a5dc <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16c:	2200      	movs	r2, #0
 800a16e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a172:	b2da      	uxtb	r2, r3
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	785b      	ldrb	r3, [r3, #1]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe f8b7 	bl	80082f0 <disk_initialize>
 800a182:	4603      	mov	r3, r0
 800a184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a194:	2303      	movs	r3, #3
 800a196:	e221      	b.n	800a5dc <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a198:	79fb      	ldrb	r3, [r7, #7]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d007      	beq.n	800a1ae <find_volume+0xca>
 800a19e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1a2:	f003 0304 	and.w	r3, r3, #4
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a1aa:	230a      	movs	r3, #10
 800a1ac:	e216      	b.n	800a5dc <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b0:	7858      	ldrb	r0, [r3, #1]
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b4:	330c      	adds	r3, #12
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	2102      	movs	r1, #2
 800a1ba:	f7fe f8ff 	bl	80083bc <disk_ioctl>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <find_volume+0xe4>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e209      	b.n	800a5dc <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	899b      	ldrh	r3, [r3, #12]
 800a1cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d0:	d80d      	bhi.n	800a1ee <find_volume+0x10a>
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d4:	899b      	ldrh	r3, [r3, #12]
 800a1d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1da:	d308      	bcc.n	800a1ee <find_volume+0x10a>
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1de:	899b      	ldrh	r3, [r3, #12]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	899b      	ldrh	r3, [r3, #12]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <find_volume+0x10e>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e1f4      	b.n	800a5dc <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a1f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1fa:	f7ff ff1d 	bl	800a038 <check_fs>
 800a1fe:	4603      	mov	r3, r0
 800a200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d14b      	bne.n	800a2a4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a20c:	2300      	movs	r3, #0
 800a20e:	643b      	str	r3, [r7, #64]	; 0x40
 800a210:	e01f      	b.n	800a252 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a214:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a21a:	011b      	lsls	r3, r3, #4
 800a21c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a220:	4413      	add	r3, r2
 800a222:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	3304      	adds	r3, #4
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d006      	beq.n	800a23c <find_volume+0x158>
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	3308      	adds	r3, #8
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe f8f8 	bl	8008428 <ld_dword>
 800a238:	4602      	mov	r2, r0
 800a23a:	e000      	b.n	800a23e <find_volume+0x15a>
 800a23c:	2200      	movs	r2, #0
 800a23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a246:	440b      	add	r3, r1
 800a248:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a24c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a24e:	3301      	adds	r3, #1
 800a250:	643b      	str	r3, [r7, #64]	; 0x40
 800a252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a254:	2b03      	cmp	r3, #3
 800a256:	d9dc      	bls.n	800a212 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a258:	2300      	movs	r3, #0
 800a25a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <find_volume+0x184>
 800a262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a264:	3b01      	subs	r3, #1
 800a266:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a270:	4413      	add	r3, r2
 800a272:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a276:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d005      	beq.n	800a28a <find_volume+0x1a6>
 800a27e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a282:	f7ff fed9 	bl	800a038 <check_fs>
 800a286:	4603      	mov	r3, r0
 800a288:	e000      	b.n	800a28c <find_volume+0x1a8>
 800a28a:	2303      	movs	r3, #3
 800a28c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a294:	2b01      	cmp	r3, #1
 800a296:	d905      	bls.n	800a2a4 <find_volume+0x1c0>
 800a298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a29a:	3301      	adds	r3, #1
 800a29c:	643b      	str	r3, [r7, #64]	; 0x40
 800a29e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a0:	2b03      	cmp	r3, #3
 800a2a2:	d9e1      	bls.n	800a268 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a2a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d101      	bne.n	800a2b0 <find_volume+0x1cc>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e195      	b.n	800a5dc <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a2b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d901      	bls.n	800a2bc <find_volume+0x1d8>
 800a2b8:	230d      	movs	r3, #13
 800a2ba:	e18f      	b.n	800a5dc <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	3338      	adds	r3, #56	; 0x38
 800a2c0:	330b      	adds	r3, #11
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe f898 	bl	80083f8 <ld_word>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	899b      	ldrh	r3, [r3, #12]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d001      	beq.n	800a2d8 <find_volume+0x1f4>
 800a2d4:	230d      	movs	r3, #13
 800a2d6:	e181      	b.n	800a5dc <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	3338      	adds	r3, #56	; 0x38
 800a2dc:	3316      	adds	r3, #22
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe f88a 	bl	80083f8 <ld_word>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d106      	bne.n	800a2fc <find_volume+0x218>
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f0:	3338      	adds	r3, #56	; 0x38
 800a2f2:	3324      	adds	r3, #36	; 0x24
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fe f897 	bl	8008428 <ld_dword>
 800a2fa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a300:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	789b      	ldrb	r3, [r3, #2]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d005      	beq.n	800a320 <find_volume+0x23c>
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	789b      	ldrb	r3, [r3, #2]
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d001      	beq.n	800a320 <find_volume+0x23c>
 800a31c:	230d      	movs	r3, #13
 800a31e:	e15d      	b.n	800a5dc <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	789b      	ldrb	r3, [r3, #2]
 800a324:	461a      	mov	r2, r3
 800a326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a328:	fb02 f303 	mul.w	r3, r2, r3
 800a32c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a334:	b29a      	uxth	r2, r3
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	895b      	ldrh	r3, [r3, #10]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d008      	beq.n	800a354 <find_volume+0x270>
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	895b      	ldrh	r3, [r3, #10]
 800a346:	461a      	mov	r2, r3
 800a348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34a:	895b      	ldrh	r3, [r3, #10]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	4013      	ands	r3, r2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <find_volume+0x274>
 800a354:	230d      	movs	r3, #13
 800a356:	e141      	b.n	800a5dc <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	3338      	adds	r3, #56	; 0x38
 800a35c:	3311      	adds	r3, #17
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe f84a 	bl	80083f8 <ld_word>
 800a364:	4603      	mov	r3, r0
 800a366:	461a      	mov	r2, r3
 800a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	891b      	ldrh	r3, [r3, #8]
 800a370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a372:	8992      	ldrh	r2, [r2, #12]
 800a374:	0952      	lsrs	r2, r2, #5
 800a376:	b292      	uxth	r2, r2
 800a378:	fbb3 f1f2 	udiv	r1, r3, r2
 800a37c:	fb02 f201 	mul.w	r2, r2, r1
 800a380:	1a9b      	subs	r3, r3, r2
 800a382:	b29b      	uxth	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <find_volume+0x2a8>
 800a388:	230d      	movs	r3, #13
 800a38a:	e127      	b.n	800a5dc <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38e:	3338      	adds	r3, #56	; 0x38
 800a390:	3313      	adds	r3, #19
 800a392:	4618      	mov	r0, r3
 800a394:	f7fe f830 	bl	80083f8 <ld_word>
 800a398:	4603      	mov	r3, r0
 800a39a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a39c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d106      	bne.n	800a3b0 <find_volume+0x2cc>
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	3338      	adds	r3, #56	; 0x38
 800a3a6:	3320      	adds	r3, #32
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe f83d 	bl	8008428 <ld_dword>
 800a3ae:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b2:	3338      	adds	r3, #56	; 0x38
 800a3b4:	330e      	adds	r3, #14
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe f81e 	bl	80083f8 <ld_word>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a3c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d104      	bne.n	800a3d0 <find_volume+0x2ec>
 800a3c6:	230d      	movs	r3, #13
 800a3c8:	e108      	b.n	800a5dc <find_volume+0x4f8>
 800a3ca:	bf00      	nop
 800a3cc:	20000498 	.word	0x20000498

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a3d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d4:	4413      	add	r3, r2
 800a3d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3d8:	8911      	ldrh	r1, [r2, #8]
 800a3da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3dc:	8992      	ldrh	r2, [r2, #12]
 800a3de:	0952      	lsrs	r2, r2, #5
 800a3e0:	b292      	uxth	r2, r2
 800a3e2:	fbb1 f2f2 	udiv	r2, r1, r2
 800a3e6:	b292      	uxth	r2, r2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a3ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d201      	bcs.n	800a3f8 <find_volume+0x314>
 800a3f4:	230d      	movs	r3, #13
 800a3f6:	e0f1      	b.n	800a5dc <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a3f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a400:	8952      	ldrh	r2, [r2, #10]
 800a402:	fbb3 f3f2 	udiv	r3, r3, r2
 800a406:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <find_volume+0x32e>
 800a40e:	230d      	movs	r3, #13
 800a410:	e0e4      	b.n	800a5dc <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a412:	2303      	movs	r3, #3
 800a414:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a41e:	4293      	cmp	r3, r2
 800a420:	d802      	bhi.n	800a428 <find_volume+0x344>
 800a422:	2302      	movs	r3, #2
 800a424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a42e:	4293      	cmp	r3, r2
 800a430:	d802      	bhi.n	800a438 <find_volume+0x354>
 800a432:	2301      	movs	r3, #1
 800a434:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	1c9a      	adds	r2, r3, #2
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a444:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a446:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a44a:	441a      	add	r2, r3
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a450:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	441a      	add	r2, r3
 800a456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a458:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a45a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d11e      	bne.n	800a4a0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	3338      	adds	r3, #56	; 0x38
 800a466:	332a      	adds	r3, #42	; 0x2a
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fd ffc5 	bl	80083f8 <ld_word>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <find_volume+0x394>
 800a474:	230d      	movs	r3, #13
 800a476:	e0b1      	b.n	800a5dc <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47a:	891b      	ldrh	r3, [r3, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <find_volume+0x3a0>
 800a480:	230d      	movs	r3, #13
 800a482:	e0ab      	b.n	800a5dc <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a486:	3338      	adds	r3, #56	; 0x38
 800a488:	332c      	adds	r3, #44	; 0x2c
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fd ffcc 	bl	8008428 <ld_dword>
 800a490:	4602      	mov	r2, r0
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	69db      	ldr	r3, [r3, #28]
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	647b      	str	r3, [r7, #68]	; 0x44
 800a49e:	e01f      	b.n	800a4e0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	891b      	ldrh	r3, [r3, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <find_volume+0x3c8>
 800a4a8:	230d      	movs	r3, #13
 800a4aa:	e097      	b.n	800a5dc <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b2:	441a      	add	r2, r3
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a4b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d103      	bne.n	800a4c8 <find_volume+0x3e4>
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	e00a      	b.n	800a4de <find_volume+0x3fa>
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	69da      	ldr	r2, [r3, #28]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	4413      	add	r3, r2
 800a4d2:	085a      	lsrs	r2, r3, #1
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	69db      	ldr	r3, [r3, #28]
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a4de:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	6a1a      	ldr	r2, [r3, #32]
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	899b      	ldrh	r3, [r3, #12]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ec:	440b      	add	r3, r1
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4f2:	8989      	ldrh	r1, [r1, #12]
 800a4f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d201      	bcs.n	800a500 <find_volume+0x41c>
 800a4fc:	230d      	movs	r3, #13
 800a4fe:	e06d      	b.n	800a5dc <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	f04f 32ff 	mov.w	r2, #4294967295
 800a506:	619a      	str	r2, [r3, #24]
 800a508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50a:	699a      	ldr	r2, [r3, #24]
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a512:	2280      	movs	r2, #128	; 0x80
 800a514:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a516:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d149      	bne.n	800a5b2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a520:	3338      	adds	r3, #56	; 0x38
 800a522:	3330      	adds	r3, #48	; 0x30
 800a524:	4618      	mov	r0, r3
 800a526:	f7fd ff67 	bl	80083f8 <ld_word>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d140      	bne.n	800a5b2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a532:	3301      	adds	r3, #1
 800a534:	4619      	mov	r1, r3
 800a536:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a538:	f7fe fa0e 	bl	8008958 <move_window>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d137      	bne.n	800a5b2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	2200      	movs	r2, #0
 800a546:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54a:	3338      	adds	r3, #56	; 0x38
 800a54c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a550:	4618      	mov	r0, r3
 800a552:	f7fd ff51 	bl	80083f8 <ld_word>
 800a556:	4603      	mov	r3, r0
 800a558:	461a      	mov	r2, r3
 800a55a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a55e:	429a      	cmp	r2, r3
 800a560:	d127      	bne.n	800a5b2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a564:	3338      	adds	r3, #56	; 0x38
 800a566:	4618      	mov	r0, r3
 800a568:	f7fd ff5e 	bl	8008428 <ld_dword>
 800a56c:	4602      	mov	r2, r0
 800a56e:	4b1d      	ldr	r3, [pc, #116]	; (800a5e4 <find_volume+0x500>)
 800a570:	429a      	cmp	r2, r3
 800a572:	d11e      	bne.n	800a5b2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a576:	3338      	adds	r3, #56	; 0x38
 800a578:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fd ff53 	bl	8008428 <ld_dword>
 800a582:	4602      	mov	r2, r0
 800a584:	4b18      	ldr	r3, [pc, #96]	; (800a5e8 <find_volume+0x504>)
 800a586:	429a      	cmp	r2, r3
 800a588:	d113      	bne.n	800a5b2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	3338      	adds	r3, #56	; 0x38
 800a58e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a592:	4618      	mov	r0, r3
 800a594:	f7fd ff48 	bl	8008428 <ld_dword>
 800a598:	4602      	mov	r2, r0
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a0:	3338      	adds	r3, #56	; 0x38
 800a5a2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fd ff3e 	bl	8008428 <ld_dword>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a5b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a5ba:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <find_volume+0x508>)
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <find_volume+0x508>)
 800a5c4:	801a      	strh	r2, [r3, #0]
 800a5c6:	4b09      	ldr	r3, [pc, #36]	; (800a5ec <find_volume+0x508>)
 800a5c8:	881a      	ldrh	r2, [r3, #0]
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5cc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	4a07      	ldr	r2, [pc, #28]	; (800a5f0 <find_volume+0x50c>)
 800a5d2:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a5d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5d6:	f7fe f957 	bl	8008888 <clear_lock>
#endif
	return FR_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3758      	adds	r7, #88	; 0x58
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	41615252 	.word	0x41615252
 800a5e8:	61417272 	.word	0x61417272
 800a5ec:	2000049c 	.word	0x2000049c
 800a5f0:	200004c0 	.word	0x200004c0

0800a5f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a5fe:	2309      	movs	r3, #9
 800a600:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01c      	beq.n	800a642 <validate+0x4e>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d018      	beq.n	800a642 <validate+0x4e>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d013      	beq.n	800a642 <validate+0x4e>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	889a      	ldrh	r2, [r3, #4]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	88db      	ldrh	r3, [r3, #6]
 800a624:	429a      	cmp	r2, r3
 800a626:	d10c      	bne.n	800a642 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	785b      	ldrb	r3, [r3, #1]
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fd fe44 	bl	80082bc <disk_status>
 800a634:	4603      	mov	r3, r0
 800a636:	f003 0301 	and.w	r3, r3, #1
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <validate+0x4e>
			res = FR_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d102      	bne.n	800a64e <validate+0x5a>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	e000      	b.n	800a650 <validate+0x5c>
 800a64e:	2300      	movs	r3, #0
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	6013      	str	r3, [r2, #0]
	return res;
 800a654:	7bfb      	ldrb	r3, [r7, #15]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
	...

0800a660 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	4613      	mov	r3, r2
 800a66c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a672:	f107 0310 	add.w	r3, r7, #16
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff fc9a 	bl	8009fb0 <get_ldnumber>
 800a67c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	2b00      	cmp	r3, #0
 800a682:	da01      	bge.n	800a688 <f_mount+0x28>
 800a684:	230b      	movs	r3, #11
 800a686:	e02b      	b.n	800a6e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a688:	4a17      	ldr	r2, [pc, #92]	; (800a6e8 <f_mount+0x88>)
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a690:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d005      	beq.n	800a6a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a698:	69b8      	ldr	r0, [r7, #24]
 800a69a:	f7fe f8f5 	bl	8008888 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d002      	beq.n	800a6b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	490d      	ldr	r1, [pc, #52]	; (800a6e8 <f_mount+0x88>)
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <f_mount+0x66>
 800a6c0:	79fb      	ldrb	r3, [r7, #7]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d001      	beq.n	800a6ca <f_mount+0x6a>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e00a      	b.n	800a6e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a6ca:	f107 010c 	add.w	r1, r7, #12
 800a6ce:	f107 0308 	add.w	r3, r7, #8
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7ff fd05 	bl	800a0e4 <find_volume>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3720      	adds	r7, #32
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20000498 	.word	0x20000498

0800a6ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b09a      	sub	sp, #104	; 0x68
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <f_open+0x18>
 800a700:	2309      	movs	r3, #9
 800a702:	e1bb      	b.n	800aa7c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a704:	79fb      	ldrb	r3, [r7, #7]
 800a706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a70a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a70c:	79fa      	ldrb	r2, [r7, #7]
 800a70e:	f107 0114 	add.w	r1, r7, #20
 800a712:	f107 0308 	add.w	r3, r7, #8
 800a716:	4618      	mov	r0, r3
 800a718:	f7ff fce4 	bl	800a0e4 <find_volume>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a722:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a726:	2b00      	cmp	r3, #0
 800a728:	f040 819f 	bne.w	800aa6a <f_open+0x37e>
		dj.obj.fs = fs;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	f107 0318 	add.w	r3, r7, #24
 800a736:	4611      	mov	r1, r2
 800a738:	4618      	mov	r0, r3
 800a73a:	f7ff fbc3 	bl	8009ec4 <follow_path>
 800a73e:	4603      	mov	r3, r0
 800a740:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a744:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d11a      	bne.n	800a782 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a74c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a750:	b25b      	sxtb	r3, r3
 800a752:	2b00      	cmp	r3, #0
 800a754:	da03      	bge.n	800a75e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a756:	2306      	movs	r3, #6
 800a758:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a75c:	e011      	b.n	800a782 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a75e:	79fb      	ldrb	r3, [r7, #7]
 800a760:	f023 0301 	bic.w	r3, r3, #1
 800a764:	2b00      	cmp	r3, #0
 800a766:	bf14      	ite	ne
 800a768:	2301      	movne	r3, #1
 800a76a:	2300      	moveq	r3, #0
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	f107 0318 	add.w	r3, r7, #24
 800a774:	4611      	mov	r1, r2
 800a776:	4618      	mov	r0, r3
 800a778:	f7fd ff3e 	bl	80085f8 <chk_lock>
 800a77c:	4603      	mov	r3, r0
 800a77e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a782:	79fb      	ldrb	r3, [r7, #7]
 800a784:	f003 031c 	and.w	r3, r3, #28
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d07f      	beq.n	800a88c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a78c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a790:	2b00      	cmp	r3, #0
 800a792:	d017      	beq.n	800a7c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a794:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d10e      	bne.n	800a7ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a79c:	f7fd ff88 	bl	80086b0 <enq_lock>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d006      	beq.n	800a7b4 <f_open+0xc8>
 800a7a6:	f107 0318 	add.w	r3, r7, #24
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff f8da 	bl	8009964 <dir_register>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	e000      	b.n	800a7b6 <f_open+0xca>
 800a7b4:	2312      	movs	r3, #18
 800a7b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	f043 0308 	orr.w	r3, r3, #8
 800a7c0:	71fb      	strb	r3, [r7, #7]
 800a7c2:	e010      	b.n	800a7e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a7c4:	7fbb      	ldrb	r3, [r7, #30]
 800a7c6:	f003 0311 	and.w	r3, r3, #17
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <f_open+0xea>
					res = FR_DENIED;
 800a7ce:	2307      	movs	r3, #7
 800a7d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a7d4:	e007      	b.n	800a7e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d002      	beq.n	800a7e6 <f_open+0xfa>
 800a7e0:	2308      	movs	r3, #8
 800a7e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a7e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d168      	bne.n	800a8c0 <f_open+0x1d4>
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d063      	beq.n	800a8c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a7f8:	f7fd fa64 	bl	8007cc4 <get_fattime>
 800a7fc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a800:	330e      	adds	r3, #14
 800a802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a804:	4618      	mov	r0, r3
 800a806:	f7fd fe4d 	bl	80084a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80c:	3316      	adds	r3, #22
 800a80e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a810:	4618      	mov	r0, r3
 800a812:	f7fd fe47 	bl	80084a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	330b      	adds	r3, #11
 800a81a:	2220      	movs	r2, #32
 800a81c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f7fe fe16 	bl	8009456 <ld_clust>
 800a82a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a830:	2200      	movs	r2, #0
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fe2e 	bl	8009494 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83a:	331c      	adds	r3, #28
 800a83c:	2100      	movs	r1, #0
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fd fe30 	bl	80084a4 <st_dword>
					fs->wflag = 1;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	2201      	movs	r2, #1
 800a848:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a84a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d037      	beq.n	800a8c0 <f_open+0x1d4>
						dw = fs->winsect;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a854:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a856:	f107 0318 	add.w	r3, r7, #24
 800a85a:	2200      	movs	r2, #0
 800a85c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fe fb1e 	bl	8008ea0 <remove_chain>
 800a864:	4603      	mov	r3, r0
 800a866:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a86a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d126      	bne.n	800a8c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a876:	4618      	mov	r0, r3
 800a878:	f7fe f86e 	bl	8008958 <move_window>
 800a87c:	4603      	mov	r3, r0
 800a87e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a886:	3a01      	subs	r2, #1
 800a888:	615a      	str	r2, [r3, #20]
 800a88a:	e019      	b.n	800a8c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a88c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a890:	2b00      	cmp	r3, #0
 800a892:	d115      	bne.n	800a8c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a894:	7fbb      	ldrb	r3, [r7, #30]
 800a896:	f003 0310 	and.w	r3, r3, #16
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a89e:	2304      	movs	r3, #4
 800a8a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a8a4:	e00c      	b.n	800a8c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	f003 0302 	and.w	r3, r3, #2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d007      	beq.n	800a8c0 <f_open+0x1d4>
 800a8b0:	7fbb      	ldrb	r3, [r7, #30]
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d002      	beq.n	800a8c0 <f_open+0x1d4>
						res = FR_DENIED;
 800a8ba:	2307      	movs	r3, #7
 800a8bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a8c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d128      	bne.n	800a91a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	f003 0308 	and.w	r3, r3, #8
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d003      	beq.n	800a8da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a8d2:	79fb      	ldrb	r3, [r7, #7]
 800a8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a8e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a8e8:	79fb      	ldrb	r3, [r7, #7]
 800a8ea:	f023 0301 	bic.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	bf14      	ite	ne
 800a8f2:	2301      	movne	r3, #1
 800a8f4:	2300      	moveq	r3, #0
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f107 0318 	add.w	r3, r7, #24
 800a8fe:	4611      	mov	r1, r2
 800a900:	4618      	mov	r0, r3
 800a902:	f7fd fef7 	bl	80086f4 <inc_lock>
 800a906:	4602      	mov	r2, r0
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d102      	bne.n	800a91a <f_open+0x22e>
 800a914:	2302      	movs	r3, #2
 800a916:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a91a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f040 80a3 	bne.w	800aa6a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a928:	4611      	mov	r1, r2
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fe fd93 	bl	8009456 <ld_clust>
 800a930:	4602      	mov	r2, r0
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	331c      	adds	r3, #28
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fd fd74 	bl	8008428 <ld_dword>
 800a940:	4602      	mov	r2, r0
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a94c:	697a      	ldr	r2, [r7, #20]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	88da      	ldrh	r2, [r3, #6]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	79fa      	ldrb	r2, [r7, #7]
 800a95e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3330      	adds	r3, #48	; 0x30
 800a976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fd fdde 	bl	800853e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	f003 0320 	and.w	r3, r3, #32
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d06e      	beq.n	800aa6a <f_open+0x37e>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d06a      	beq.n	800aa6a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	68da      	ldr	r2, [r3, #12]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	895b      	ldrh	r3, [r3, #10]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	899b      	ldrh	r3, [r3, #12]
 800a9a6:	fb03 f302 	mul.w	r3, r3, r2
 800a9aa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9b8:	e016      	b.n	800a9e8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe f887 	bl	8008ad2 <get_fat>
 800a9c4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a9c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d802      	bhi.n	800a9d2 <f_open+0x2e6>
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a9d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d8:	d102      	bne.n	800a9e0 <f_open+0x2f4>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a9e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <f_open+0x30c>
 800a9f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d8e0      	bhi.n	800a9ba <f_open+0x2ce>
				}
				fp->clust = clst;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a9fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d131      	bne.n	800aa6a <f_open+0x37e>
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	899b      	ldrh	r3, [r3, #12]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa12:	fb02 f201 	mul.w	r2, r2, r1
 800aa16:	1a9b      	subs	r3, r3, r2
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d026      	beq.n	800aa6a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe f837 	bl	8008a94 <clust2sect>
 800aa26:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aa28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d103      	bne.n	800aa36 <f_open+0x34a>
						res = FR_INT_ERR;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aa34:	e019      	b.n	800aa6a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	899b      	ldrh	r3, [r3, #12]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa44:	441a      	add	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	7858      	ldrb	r0, [r3, #1]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6a1a      	ldr	r2, [r3, #32]
 800aa58:	2301      	movs	r3, #1
 800aa5a:	f7fd fc6f 	bl	800833c <disk_read>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <f_open+0x37e>
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aa6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d002      	beq.n	800aa78 <f_open+0x38c>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aa78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3768      	adds	r7, #104	; 0x68
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b08c      	sub	sp, #48	; 0x30
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
 800aa90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f107 0210 	add.w	r2, r7, #16
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7ff fda5 	bl	800a5f4 <validate>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d107      	bne.n	800aac8 <f_write+0x44>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	7d5b      	ldrb	r3, [r3, #21]
 800aabc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <f_write+0x4a>
 800aac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aacc:	e16a      	b.n	800ada4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	7d1b      	ldrb	r3, [r3, #20]
 800aad2:	f003 0302 	and.w	r3, r3, #2
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <f_write+0x5a>
 800aada:	2307      	movs	r3, #7
 800aadc:	e162      	b.n	800ada4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	699a      	ldr	r2, [r3, #24]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	441a      	add	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	f080 814c 	bcs.w	800ad88 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	43db      	mvns	r3, r3
 800aaf6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aaf8:	e146      	b.n	800ad88 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	8992      	ldrh	r2, [r2, #12]
 800ab02:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab06:	fb02 f201 	mul.w	r2, r2, r1
 800ab0a:	1a9b      	subs	r3, r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f040 80f1 	bne.w	800acf4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	8992      	ldrh	r2, [r2, #12]
 800ab1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	8952      	ldrh	r2, [r2, #10]
 800ab22:	3a01      	subs	r2, #1
 800ab24:	4013      	ands	r3, r2
 800ab26:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d143      	bne.n	800abb6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10c      	bne.n	800ab50 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d11a      	bne.n	800ab78 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2100      	movs	r1, #0
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fa0f 	bl	8008f6a <create_chain>
 800ab4c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab4e:	e013      	b.n	800ab78 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d007      	beq.n	800ab68 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	699b      	ldr	r3, [r3, #24]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f7fe fa9b 	bl	800909a <clmt_clust>
 800ab64:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab66:	e007      	b.n	800ab78 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	4610      	mov	r0, r2
 800ab72:	f7fe f9fa 	bl	8008f6a <create_chain>
 800ab76:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 8109 	beq.w	800ad92 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ab80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d104      	bne.n	800ab90 <f_write+0x10c>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2202      	movs	r2, #2
 800ab8a:	755a      	strb	r2, [r3, #21]
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	e109      	b.n	800ada4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d104      	bne.n	800aba2 <f_write+0x11e>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	755a      	strb	r2, [r3, #21]
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e100      	b.n	800ada4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aba6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d102      	bne.n	800abb6 <f_write+0x132>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abb4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	7d1b      	ldrb	r3, [r3, #20]
 800abba:	b25b      	sxtb	r3, r3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	da18      	bge.n	800abf2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	7858      	ldrb	r0, [r3, #1]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6a1a      	ldr	r2, [r3, #32]
 800abce:	2301      	movs	r3, #1
 800abd0:	f7fd fbd4 	bl	800837c <disk_write>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d004      	beq.n	800abe4 <f_write+0x160>
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2201      	movs	r2, #1
 800abde:	755a      	strb	r2, [r3, #21]
 800abe0:	2301      	movs	r3, #1
 800abe2:	e0df      	b.n	800ada4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	7d1b      	ldrb	r3, [r3, #20]
 800abe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abec:	b2da      	uxtb	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	4619      	mov	r1, r3
 800abfa:	4610      	mov	r0, r2
 800abfc:	f7fd ff4a 	bl	8008a94 <clust2sect>
 800ac00:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d104      	bne.n	800ac12 <f_write+0x18e>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	755a      	strb	r2, [r3, #21]
 800ac0e:	2302      	movs	r3, #2
 800ac10:	e0c8      	b.n	800ada4 <f_write+0x320>
			sect += csect;
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	4413      	add	r3, r2
 800ac18:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	899b      	ldrh	r3, [r3, #12]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac26:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d043      	beq.n	800acb6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ac2e:	69ba      	ldr	r2, [r7, #24]
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	4413      	add	r3, r2
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	8952      	ldrh	r2, [r2, #10]
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d905      	bls.n	800ac48 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	895b      	ldrh	r3, [r3, #10]
 800ac40:	461a      	mov	r2, r3
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	7858      	ldrb	r0, [r3, #1]
 800ac4c:	6a3b      	ldr	r3, [r7, #32]
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	69f9      	ldr	r1, [r7, #28]
 800ac52:	f7fd fb93 	bl	800837c <disk_write>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d004      	beq.n	800ac66 <f_write+0x1e2>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	755a      	strb	r2, [r3, #21]
 800ac62:	2301      	movs	r3, #1
 800ac64:	e09e      	b.n	800ada4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6a1a      	ldr	r2, [r3, #32]
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	6a3a      	ldr	r2, [r7, #32]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d918      	bls.n	800aca6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6a1a      	ldr	r2, [r3, #32]
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	8992      	ldrh	r2, [r2, #12]
 800ac86:	fb02 f303 	mul.w	r3, r2, r3
 800ac8a:	69fa      	ldr	r2, [r7, #28]
 800ac8c:	18d1      	adds	r1, r2, r3
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	899b      	ldrh	r3, [r3, #12]
 800ac92:	461a      	mov	r2, r3
 800ac94:	f7fd fc32 	bl	80084fc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	7d1b      	ldrb	r3, [r3, #20]
 800ac9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca0:	b2da      	uxtb	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	899b      	ldrh	r3, [r3, #12]
 800acaa:	461a      	mov	r2, r3
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	fb02 f303 	mul.w	r3, r2, r3
 800acb2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800acb4:	e04b      	b.n	800ad4e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d016      	beq.n	800acee <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	699a      	ldr	r2, [r3, #24]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800acc8:	429a      	cmp	r2, r3
 800acca:	d210      	bcs.n	800acee <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	7858      	ldrb	r0, [r3, #1]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800acd6:	2301      	movs	r3, #1
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	f7fd fb2f 	bl	800833c <disk_read>
 800acde:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d004      	beq.n	800acee <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2201      	movs	r2, #1
 800ace8:	755a      	strb	r2, [r3, #21]
 800acea:	2301      	movs	r3, #1
 800acec:	e05a      	b.n	800ada4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	899b      	ldrh	r3, [r3, #12]
 800acf8:	4618      	mov	r0, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	699b      	ldr	r3, [r3, #24]
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	8992      	ldrh	r2, [r2, #12]
 800ad02:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad06:	fb02 f201 	mul.w	r2, r2, r1
 800ad0a:	1a9b      	subs	r3, r3, r2
 800ad0c:	1ac3      	subs	r3, r0, r3
 800ad0e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ad10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d901      	bls.n	800ad1c <f_write+0x298>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	8992      	ldrh	r2, [r2, #12]
 800ad2a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad2e:	fb02 f200 	mul.w	r2, r2, r0
 800ad32:	1a9b      	subs	r3, r3, r2
 800ad34:	440b      	add	r3, r1
 800ad36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad38:	69f9      	ldr	r1, [r7, #28]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fd fbde 	bl	80084fc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	7d1b      	ldrb	r3, [r3, #20]
 800ad44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ad4e:	69fa      	ldr	r2, [r7, #28]
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	4413      	add	r3, r2
 800ad54:	61fb      	str	r3, [r7, #28]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	699a      	ldr	r2, [r3, #24]
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5c:	441a      	add	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	619a      	str	r2, [r3, #24]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	68da      	ldr	r2, [r3, #12]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	699b      	ldr	r3, [r3, #24]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	bf38      	it	cc
 800ad6e:	461a      	movcc	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	60da      	str	r2, [r3, #12]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	441a      	add	r2, r3
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f47f aeb5 	bne.w	800aafa <f_write+0x76>
 800ad90:	e000      	b.n	800ad94 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ad92:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	7d1b      	ldrb	r3, [r3, #20]
 800ad98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3730      	adds	r7, #48	; 0x30
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f107 0208 	add.w	r2, r7, #8
 800adba:	4611      	mov	r1, r2
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff fc19 	bl	800a5f4 <validate>
 800adc2:	4603      	mov	r3, r0
 800adc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d168      	bne.n	800ae9e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	7d1b      	ldrb	r3, [r3, #20]
 800add0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add4:	2b00      	cmp	r3, #0
 800add6:	d062      	beq.n	800ae9e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7d1b      	ldrb	r3, [r3, #20]
 800addc:	b25b      	sxtb	r3, r3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	da15      	bge.n	800ae0e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	7858      	ldrb	r0, [r3, #1]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a1a      	ldr	r2, [r3, #32]
 800adf0:	2301      	movs	r3, #1
 800adf2:	f7fd fac3 	bl	800837c <disk_write>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <f_sync+0x54>
 800adfc:	2301      	movs	r3, #1
 800adfe:	e04f      	b.n	800aea0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	7d1b      	ldrb	r3, [r3, #20]
 800ae04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ae0e:	f7fc ff59 	bl	8007cc4 <get_fattime>
 800ae12:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	f7fd fd9b 	bl	8008958 <move_window>
 800ae22:	4603      	mov	r3, r0
 800ae24:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d138      	bne.n	800ae9e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae30:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	330b      	adds	r3, #11
 800ae36:	781a      	ldrb	r2, [r3, #0]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	330b      	adds	r3, #11
 800ae3c:	f042 0220 	orr.w	r2, r2, #32
 800ae40:	b2d2      	uxtb	r2, r2
 800ae42:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6818      	ldr	r0, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	68f9      	ldr	r1, [r7, #12]
 800ae50:	f7fe fb20 	bl	8009494 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f103 021c 	add.w	r2, r3, #28
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4610      	mov	r0, r2
 800ae62:	f7fd fb1f 	bl	80084a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3316      	adds	r3, #22
 800ae6a:	6939      	ldr	r1, [r7, #16]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fd fb19 	bl	80084a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3312      	adds	r3, #18
 800ae76:	2100      	movs	r1, #0
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fd faf8 	bl	800846e <st_word>
					fs->wflag = 1;
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2201      	movs	r2, #1
 800ae82:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fd fd94 	bl	80089b4 <sync_fs>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	7d1b      	ldrb	r3, [r3, #20]
 800ae94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3718      	adds	r7, #24
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7ff ff7b 	bl	800adac <f_sync>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d118      	bne.n	800aef2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f107 0208 	add.w	r2, r7, #8
 800aec6:	4611      	mov	r1, r2
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7ff fb93 	bl	800a5f4 <validate>
 800aece:	4603      	mov	r3, r0
 800aed0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10c      	bne.n	800aef2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	4618      	mov	r0, r3
 800aede:	f7fd fc97 	bl	8008810 <dec_lock>
 800aee2:	4603      	mov	r3, r0
 800aee4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aee6:	7bfb      	ldrb	r3, [r7, #15]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d102      	bne.n	800aef2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800af08:	78fb      	ldrb	r3, [r7, #3]
 800af0a:	2b0a      	cmp	r3, #10
 800af0c:	d103      	bne.n	800af16 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800af0e:	210d      	movs	r1, #13
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff fff3 	bl	800aefc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	db25      	blt.n	800af6e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	1c5a      	adds	r2, r3, #1
 800af26:	60fa      	str	r2, [r7, #12]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	4413      	add	r3, r2
 800af2c:	78fa      	ldrb	r2, [r7, #3]
 800af2e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2b3c      	cmp	r3, #60	; 0x3c
 800af34:	dd12      	ble.n	800af5c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6818      	ldr	r0, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f103 010c 	add.w	r1, r3, #12
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	f107 0308 	add.w	r3, r7, #8
 800af46:	f7ff fd9d 	bl	800aa84 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d101      	bne.n	800af56 <putc_bfd+0x5a>
 800af52:	2300      	movs	r3, #0
 800af54:	e001      	b.n	800af5a <putc_bfd+0x5e>
 800af56:	f04f 33ff 	mov.w	r3, #4294967295
 800af5a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	609a      	str	r2, [r3, #8]
 800af6c:	e000      	b.n	800af70 <putc_bfd+0x74>
	if (i < 0) return;
 800af6e:	bf00      	nop
}
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	db17      	blt.n	800afb6 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6818      	ldr	r0, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f103 010c 	add.w	r1, r3, #12
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	461a      	mov	r2, r3
 800af96:	f107 030c 	add.w	r3, r7, #12
 800af9a:	f7ff fd73 	bl	800aa84 <f_write>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d108      	bne.n	800afb6 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	461a      	mov	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	429a      	cmp	r2, r3
 800afae:	d102      	bne.n	800afb6 <putc_flush+0x40>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	e001      	b.n	800afba <putc_flush+0x44>
	return EOF;
 800afb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b083      	sub	sp, #12
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	605a      	str	r2, [r3, #4]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	609a      	str	r2, [r3, #8]
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800afec:	b40e      	push	{r1, r2, r3}
 800afee:	b580      	push	{r7, lr}
 800aff0:	b0a7      	sub	sp, #156	; 0x9c
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800aff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800affa:	6879      	ldr	r1, [r7, #4]
 800affc:	4618      	mov	r0, r3
 800affe:	f7ff ffe0 	bl	800afc2 <putc_init>

	va_start(arp, fmt);
 800b002:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b006:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b00c:	1c5a      	adds	r2, r3, #1
 800b00e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b018:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 81f4 	beq.w	800b40a <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800b022:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b026:	2b25      	cmp	r3, #37	; 0x25
 800b028:	d008      	beq.n	800b03c <f_printf+0x50>
			putc_bfd(&pb, c);
 800b02a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b02e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b032:	4611      	mov	r1, r2
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff ff61 	bl	800aefc <putc_bfd>
			continue;
 800b03a:	e1e5      	b.n	800b408 <f_printf+0x41c>
		}
		w = f = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b042:	2300      	movs	r3, #0
 800b044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b048:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b04c:	1c5a      	adds	r2, r3, #1
 800b04e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b058:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b05c:	2b30      	cmp	r3, #48	; 0x30
 800b05e:	d10b      	bne.n	800b078 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b060:	2301      	movs	r3, #1
 800b062:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b076:	e024      	b.n	800b0c2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b078:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b07c:	2b2d      	cmp	r3, #45	; 0x2d
 800b07e:	d120      	bne.n	800b0c2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b080:	2302      	movs	r3, #2
 800b082:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b096:	e014      	b.n	800b0c2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b098:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b09c:	4613      	mov	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	4413      	add	r3, r2
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b0aa:	4413      	add	r3, r2
 800b0ac:	3b30      	subs	r3, #48	; 0x30
 800b0ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b0b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b0b6:	1c5a      	adds	r2, r3, #1
 800b0b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b0c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b0c6:	2b2f      	cmp	r3, #47	; 0x2f
 800b0c8:	d903      	bls.n	800b0d2 <f_printf+0xe6>
 800b0ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b0ce:	2b39      	cmp	r3, #57	; 0x39
 800b0d0:	d9e2      	bls.n	800b098 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b0d2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b0d6:	2b6c      	cmp	r3, #108	; 0x6c
 800b0d8:	d003      	beq.n	800b0e2 <f_printf+0xf6>
 800b0da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b0de:	2b4c      	cmp	r3, #76	; 0x4c
 800b0e0:	d10d      	bne.n	800b0fe <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b0e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b0e6:	f043 0304 	orr.w	r3, r3, #4
 800b0ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b0ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b0f2:	1c5a      	adds	r2, r3, #1
 800b0f4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b0fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 8183 	beq.w	800b40e <f_printf+0x422>
		d = c;
 800b108:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b10c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b110:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b114:	2b60      	cmp	r3, #96	; 0x60
 800b116:	d908      	bls.n	800b12a <f_printf+0x13e>
 800b118:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b11c:	2b7a      	cmp	r3, #122	; 0x7a
 800b11e:	d804      	bhi.n	800b12a <f_printf+0x13e>
 800b120:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b124:	3b20      	subs	r3, #32
 800b126:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b12a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b12e:	3b42      	subs	r3, #66	; 0x42
 800b130:	2b16      	cmp	r3, #22
 800b132:	f200 8098 	bhi.w	800b266 <f_printf+0x27a>
 800b136:	a201      	add	r2, pc, #4	; (adr r2, 800b13c <f_printf+0x150>)
 800b138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13c:	0800b247 	.word	0x0800b247
 800b140:	0800b22f 	.word	0x0800b22f
 800b144:	0800b257 	.word	0x0800b257
 800b148:	0800b267 	.word	0x0800b267
 800b14c:	0800b267 	.word	0x0800b267
 800b150:	0800b267 	.word	0x0800b267
 800b154:	0800b267 	.word	0x0800b267
 800b158:	0800b267 	.word	0x0800b267
 800b15c:	0800b267 	.word	0x0800b267
 800b160:	0800b267 	.word	0x0800b267
 800b164:	0800b267 	.word	0x0800b267
 800b168:	0800b267 	.word	0x0800b267
 800b16c:	0800b267 	.word	0x0800b267
 800b170:	0800b24f 	.word	0x0800b24f
 800b174:	0800b267 	.word	0x0800b267
 800b178:	0800b267 	.word	0x0800b267
 800b17c:	0800b267 	.word	0x0800b267
 800b180:	0800b199 	.word	0x0800b199
 800b184:	0800b267 	.word	0x0800b267
 800b188:	0800b257 	.word	0x0800b257
 800b18c:	0800b267 	.word	0x0800b267
 800b190:	0800b267 	.word	0x0800b267
 800b194:	0800b25f 	.word	0x0800b25f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b19a:	1d1a      	adds	r2, r3, #4
 800b19c:	67ba      	str	r2, [r7, #120]	; 0x78
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b1a8:	e004      	b.n	800b1b4 <f_printf+0x1c8>
 800b1aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b1b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b1b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1ba:	4413      	add	r3, r2
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d1f3      	bne.n	800b1aa <f_printf+0x1be>
			if (!(f & 2)) {
 800b1c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b1c6:	f003 0302 	and.w	r3, r3, #2
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d11a      	bne.n	800b204 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b1ce:	e005      	b.n	800b1dc <f_printf+0x1f0>
 800b1d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1d4:	2120      	movs	r1, #32
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff fe90 	bl	800aefc <putc_bfd>
 800b1dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1e0:	1c5a      	adds	r2, r3, #1
 800b1e2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b1e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d8f0      	bhi.n	800b1d0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b1ee:	e009      	b.n	800b204 <f_printf+0x218>
 800b1f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b1f6:	781a      	ldrb	r2, [r3, #0]
 800b1f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7ff fe7c 	bl	800aefc <putc_bfd>
 800b204:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1f1      	bne.n	800b1f0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b20c:	e005      	b.n	800b21a <f_printf+0x22e>
 800b20e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b212:	2120      	movs	r1, #32
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff fe71 	bl	800aefc <putc_bfd>
 800b21a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b224:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b228:	429a      	cmp	r2, r3
 800b22a:	d8f0      	bhi.n	800b20e <f_printf+0x222>
			continue;
 800b22c:	e0ec      	b.n	800b408 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b22e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b230:	1d1a      	adds	r2, r3, #4
 800b232:	67ba      	str	r2, [r7, #120]	; 0x78
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	b2da      	uxtb	r2, r3
 800b238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b23c:	4611      	mov	r1, r2
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff fe5c 	bl	800aefc <putc_bfd>
 800b244:	e0e0      	b.n	800b408 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800b246:	2302      	movs	r3, #2
 800b248:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b24c:	e014      	b.n	800b278 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b24e:	2308      	movs	r3, #8
 800b250:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b254:	e010      	b.n	800b278 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b256:	230a      	movs	r3, #10
 800b258:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b25c:	e00c      	b.n	800b278 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b25e:	2310      	movs	r3, #16
 800b260:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b264:	e008      	b.n	800b278 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b266:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b26a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b26e:	4611      	mov	r1, r2
 800b270:	4618      	mov	r0, r3
 800b272:	f7ff fe43 	bl	800aefc <putc_bfd>
 800b276:	e0c7      	b.n	800b408 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b278:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b27c:	f003 0304 	and.w	r3, r3, #4
 800b280:	2b00      	cmp	r3, #0
 800b282:	d004      	beq.n	800b28e <f_printf+0x2a2>
 800b284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b286:	1d1a      	adds	r2, r3, #4
 800b288:	67ba      	str	r2, [r7, #120]	; 0x78
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	e00c      	b.n	800b2a8 <f_printf+0x2bc>
 800b28e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b292:	2b44      	cmp	r3, #68	; 0x44
 800b294:	d104      	bne.n	800b2a0 <f_printf+0x2b4>
 800b296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b298:	1d1a      	adds	r2, r3, #4
 800b29a:	67ba      	str	r2, [r7, #120]	; 0x78
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	e003      	b.n	800b2a8 <f_printf+0x2bc>
 800b2a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2a2:	1d1a      	adds	r2, r3, #4
 800b2a4:	67ba      	str	r2, [r7, #120]	; 0x78
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b2ac:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b2b0:	2b44      	cmp	r3, #68	; 0x44
 800b2b2:	d10e      	bne.n	800b2d2 <f_printf+0x2e6>
 800b2b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	da0a      	bge.n	800b2d2 <f_printf+0x2e6>
			v = 0 - v;
 800b2bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2c0:	425b      	negs	r3, r3
 800b2c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b2c6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b2ca:	f043 0308 	orr.w	r3, r3, #8
 800b2ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b2d8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b2dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2e4:	fb02 f201 	mul.w	r2, r2, r1
 800b2e8:	1a9b      	subs	r3, r3, r2
 800b2ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b2ee:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b2f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b2fe:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b302:	2b09      	cmp	r3, #9
 800b304:	d90b      	bls.n	800b31e <f_printf+0x332>
 800b306:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b30a:	2b78      	cmp	r3, #120	; 0x78
 800b30c:	d101      	bne.n	800b312 <f_printf+0x326>
 800b30e:	2227      	movs	r2, #39	; 0x27
 800b310:	e000      	b.n	800b314 <f_printf+0x328>
 800b312:	2207      	movs	r2, #7
 800b314:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b318:	4413      	add	r3, r2
 800b31a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b31e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b322:	1c5a      	adds	r2, r3, #1
 800b324:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b328:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b32c:	3230      	adds	r2, #48	; 0x30
 800b32e:	b2d2      	uxtb	r2, r2
 800b330:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800b334:	440b      	add	r3, r1
 800b336:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b33a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <f_printf+0x35e>
 800b342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b346:	2b1f      	cmp	r3, #31
 800b348:	d9c6      	bls.n	800b2d8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b34a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b34e:	f003 0308 	and.w	r3, r3, #8
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00a      	beq.n	800b36c <f_printf+0x380>
 800b356:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b360:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b364:	4413      	add	r3, r2
 800b366:	222d      	movs	r2, #45	; 0x2d
 800b368:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b36c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b374:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b378:	f003 0301 	and.w	r3, r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <f_printf+0x398>
 800b380:	2330      	movs	r3, #48	; 0x30
 800b382:	e000      	b.n	800b386 <f_printf+0x39a>
 800b384:	2320      	movs	r3, #32
 800b386:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b38a:	e007      	b.n	800b39c <f_printf+0x3b0>
 800b38c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b394:	4611      	mov	r1, r2
 800b396:	4618      	mov	r0, r3
 800b398:	f7ff fdb0 	bl	800aefc <putc_bfd>
 800b39c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b3a0:	f003 0302 	and.w	r3, r3, #2
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d108      	bne.n	800b3ba <f_printf+0x3ce>
 800b3a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b3b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d8e8      	bhi.n	800b38c <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800b3ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b3c4:	f107 020c 	add.w	r2, r7, #12
 800b3c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b3cc:	4413      	add	r3, r2
 800b3ce:	781a      	ldrb	r2, [r3, #0]
 800b3d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7ff fd90 	bl	800aefc <putc_bfd>
		} while (i);
 800b3dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1ea      	bne.n	800b3ba <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800b3e4:	e007      	b.n	800b3f6 <f_printf+0x40a>
 800b3e6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b3ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7ff fd83 	bl	800aefc <putc_bfd>
 800b3f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3fa:	1c5a      	adds	r2, r3, #1
 800b3fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b400:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b404:	429a      	cmp	r2, r3
 800b406:	d8ee      	bhi.n	800b3e6 <f_printf+0x3fa>
		c = *fmt++;
 800b408:	e5fe      	b.n	800b008 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b40a:	bf00      	nop
 800b40c:	e000      	b.n	800b410 <f_printf+0x424>
		if (!c) break;
 800b40e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b414:	4618      	mov	r0, r3
 800b416:	f7ff fdae 	bl	800af76 <putc_flush>
 800b41a:	4603      	mov	r3, r0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	379c      	adds	r7, #156	; 0x9c
 800b420:	46bd      	mov	sp, r7
 800b422:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b426:	b003      	add	sp, #12
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop

0800b42c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b087      	sub	sp, #28
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	4613      	mov	r3, r2
 800b438:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b43a:	2301      	movs	r3, #1
 800b43c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b442:	4b1f      	ldr	r3, [pc, #124]	; (800b4c0 <FATFS_LinkDriverEx+0x94>)
 800b444:	7a5b      	ldrb	r3, [r3, #9]
 800b446:	b2db      	uxtb	r3, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d131      	bne.n	800b4b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b44c:	4b1c      	ldr	r3, [pc, #112]	; (800b4c0 <FATFS_LinkDriverEx+0x94>)
 800b44e:	7a5b      	ldrb	r3, [r3, #9]
 800b450:	b2db      	uxtb	r3, r3
 800b452:	461a      	mov	r2, r3
 800b454:	4b1a      	ldr	r3, [pc, #104]	; (800b4c0 <FATFS_LinkDriverEx+0x94>)
 800b456:	2100      	movs	r1, #0
 800b458:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b45a:	4b19      	ldr	r3, [pc, #100]	; (800b4c0 <FATFS_LinkDriverEx+0x94>)
 800b45c:	7a5b      	ldrb	r3, [r3, #9]
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	4a17      	ldr	r2, [pc, #92]	; (800b4c0 <FATFS_LinkDriverEx+0x94>)
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b46a:	4b15      	ldr	r3, [pc, #84]	; (800b4c0 <FATFS_LinkDriverEx+0x94>)
 800b46c:	7a5b      	ldrb	r3, [r3, #9]
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	461a      	mov	r2, r3
 800b472:	4b13      	ldr	r3, [pc, #76]	; (800b4c0 <FATFS_LinkDriverEx+0x94>)
 800b474:	4413      	add	r3, r2
 800b476:	79fa      	ldrb	r2, [r7, #7]
 800b478:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b47a:	4b11      	ldr	r3, [pc, #68]	; (800b4c0 <FATFS_LinkDriverEx+0x94>)
 800b47c:	7a5b      	ldrb	r3, [r3, #9]
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	b2d1      	uxtb	r1, r2
 800b484:	4a0e      	ldr	r2, [pc, #56]	; (800b4c0 <FATFS_LinkDriverEx+0x94>)
 800b486:	7251      	strb	r1, [r2, #9]
 800b488:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b48a:	7dbb      	ldrb	r3, [r7, #22]
 800b48c:	3330      	adds	r3, #48	; 0x30
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	3301      	adds	r3, #1
 800b498:	223a      	movs	r2, #58	; 0x3a
 800b49a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	3302      	adds	r3, #2
 800b4a0:	222f      	movs	r2, #47	; 0x2f
 800b4a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	3303      	adds	r3, #3
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	371c      	adds	r7, #28
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	200006c0 	.word	0x200006c0

0800b4c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7ff ffaa 	bl	800b42c <FATFS_LinkDriverEx>
 800b4d8:	4603      	mov	r3, r0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
	...

0800b4e4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	6039      	str	r1, [r7, #0]
 800b4ee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b4f0:	88fb      	ldrh	r3, [r7, #6]
 800b4f2:	2b7f      	cmp	r3, #127	; 0x7f
 800b4f4:	d802      	bhi.n	800b4fc <ff_convert+0x18>
		c = chr;
 800b4f6:	88fb      	ldrh	r3, [r7, #6]
 800b4f8:	81fb      	strh	r3, [r7, #14]
 800b4fa:	e025      	b.n	800b548 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00b      	beq.n	800b51a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b502:	88fb      	ldrh	r3, [r7, #6]
 800b504:	2bff      	cmp	r3, #255	; 0xff
 800b506:	d805      	bhi.n	800b514 <ff_convert+0x30>
 800b508:	88fb      	ldrh	r3, [r7, #6]
 800b50a:	3b80      	subs	r3, #128	; 0x80
 800b50c:	4a12      	ldr	r2, [pc, #72]	; (800b558 <ff_convert+0x74>)
 800b50e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b512:	e000      	b.n	800b516 <ff_convert+0x32>
 800b514:	2300      	movs	r3, #0
 800b516:	81fb      	strh	r3, [r7, #14]
 800b518:	e016      	b.n	800b548 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b51a:	2300      	movs	r3, #0
 800b51c:	81fb      	strh	r3, [r7, #14]
 800b51e:	e009      	b.n	800b534 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b520:	89fb      	ldrh	r3, [r7, #14]
 800b522:	4a0d      	ldr	r2, [pc, #52]	; (800b558 <ff_convert+0x74>)
 800b524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b528:	88fa      	ldrh	r2, [r7, #6]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d006      	beq.n	800b53c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b52e:	89fb      	ldrh	r3, [r7, #14]
 800b530:	3301      	adds	r3, #1
 800b532:	81fb      	strh	r3, [r7, #14]
 800b534:	89fb      	ldrh	r3, [r7, #14]
 800b536:	2b7f      	cmp	r3, #127	; 0x7f
 800b538:	d9f2      	bls.n	800b520 <ff_convert+0x3c>
 800b53a:	e000      	b.n	800b53e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b53c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b53e:	89fb      	ldrh	r3, [r7, #14]
 800b540:	3380      	adds	r3, #128	; 0x80
 800b542:	b29b      	uxth	r3, r3
 800b544:	b2db      	uxtb	r3, r3
 800b546:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b548:	89fb      	ldrh	r3, [r7, #14]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	0800e388 	.word	0x0800e388

0800b55c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b087      	sub	sp, #28
 800b560:	af00      	add	r7, sp, #0
 800b562:	4603      	mov	r3, r0
 800b564:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b566:	88fb      	ldrh	r3, [r7, #6]
 800b568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b56c:	d201      	bcs.n	800b572 <ff_wtoupper+0x16>
 800b56e:	4b3e      	ldr	r3, [pc, #248]	; (800b668 <ff_wtoupper+0x10c>)
 800b570:	e000      	b.n	800b574 <ff_wtoupper+0x18>
 800b572:	4b3e      	ldr	r3, [pc, #248]	; (800b66c <ff_wtoupper+0x110>)
 800b574:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	1c9a      	adds	r2, r3, #2
 800b57a:	617a      	str	r2, [r7, #20]
 800b57c:	881b      	ldrh	r3, [r3, #0]
 800b57e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b580:	8a7b      	ldrh	r3, [r7, #18]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d068      	beq.n	800b658 <ff_wtoupper+0xfc>
 800b586:	88fa      	ldrh	r2, [r7, #6]
 800b588:	8a7b      	ldrh	r3, [r7, #18]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d364      	bcc.n	800b658 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	1c9a      	adds	r2, r3, #2
 800b592:	617a      	str	r2, [r7, #20]
 800b594:	881b      	ldrh	r3, [r3, #0]
 800b596:	823b      	strh	r3, [r7, #16]
 800b598:	8a3b      	ldrh	r3, [r7, #16]
 800b59a:	0a1b      	lsrs	r3, r3, #8
 800b59c:	81fb      	strh	r3, [r7, #14]
 800b59e:	8a3b      	ldrh	r3, [r7, #16]
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b5a4:	88fa      	ldrh	r2, [r7, #6]
 800b5a6:	8a79      	ldrh	r1, [r7, #18]
 800b5a8:	8a3b      	ldrh	r3, [r7, #16]
 800b5aa:	440b      	add	r3, r1
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	da49      	bge.n	800b644 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b5b0:	89fb      	ldrh	r3, [r7, #14]
 800b5b2:	2b08      	cmp	r3, #8
 800b5b4:	d84f      	bhi.n	800b656 <ff_wtoupper+0xfa>
 800b5b6:	a201      	add	r2, pc, #4	; (adr r2, 800b5bc <ff_wtoupper+0x60>)
 800b5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5bc:	0800b5e1 	.word	0x0800b5e1
 800b5c0:	0800b5f3 	.word	0x0800b5f3
 800b5c4:	0800b609 	.word	0x0800b609
 800b5c8:	0800b611 	.word	0x0800b611
 800b5cc:	0800b619 	.word	0x0800b619
 800b5d0:	0800b621 	.word	0x0800b621
 800b5d4:	0800b629 	.word	0x0800b629
 800b5d8:	0800b631 	.word	0x0800b631
 800b5dc:	0800b639 	.word	0x0800b639
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b5e0:	88fa      	ldrh	r2, [r7, #6]
 800b5e2:	8a7b      	ldrh	r3, [r7, #18]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	697a      	ldr	r2, [r7, #20]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	80fb      	strh	r3, [r7, #6]
 800b5f0:	e027      	b.n	800b642 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b5f2:	88fa      	ldrh	r2, [r7, #6]
 800b5f4:	8a7b      	ldrh	r3, [r7, #18]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	88fa      	ldrh	r2, [r7, #6]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	80fb      	strh	r3, [r7, #6]
 800b606:	e01c      	b.n	800b642 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b608:	88fb      	ldrh	r3, [r7, #6]
 800b60a:	3b10      	subs	r3, #16
 800b60c:	80fb      	strh	r3, [r7, #6]
 800b60e:	e018      	b.n	800b642 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b610:	88fb      	ldrh	r3, [r7, #6]
 800b612:	3b20      	subs	r3, #32
 800b614:	80fb      	strh	r3, [r7, #6]
 800b616:	e014      	b.n	800b642 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b618:	88fb      	ldrh	r3, [r7, #6]
 800b61a:	3b30      	subs	r3, #48	; 0x30
 800b61c:	80fb      	strh	r3, [r7, #6]
 800b61e:	e010      	b.n	800b642 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b620:	88fb      	ldrh	r3, [r7, #6]
 800b622:	3b1a      	subs	r3, #26
 800b624:	80fb      	strh	r3, [r7, #6]
 800b626:	e00c      	b.n	800b642 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b628:	88fb      	ldrh	r3, [r7, #6]
 800b62a:	3308      	adds	r3, #8
 800b62c:	80fb      	strh	r3, [r7, #6]
 800b62e:	e008      	b.n	800b642 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b630:	88fb      	ldrh	r3, [r7, #6]
 800b632:	3b50      	subs	r3, #80	; 0x50
 800b634:	80fb      	strh	r3, [r7, #6]
 800b636:	e004      	b.n	800b642 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b638:	88fb      	ldrh	r3, [r7, #6]
 800b63a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b63e:	80fb      	strh	r3, [r7, #6]
 800b640:	bf00      	nop
			}
			break;
 800b642:	e008      	b.n	800b656 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b644:	89fb      	ldrh	r3, [r7, #14]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d195      	bne.n	800b576 <ff_wtoupper+0x1a>
 800b64a:	8a3b      	ldrh	r3, [r7, #16]
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	4413      	add	r3, r2
 800b652:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b654:	e78f      	b.n	800b576 <ff_wtoupper+0x1a>
			break;
 800b656:	bf00      	nop
	}

	return chr;
 800b658:	88fb      	ldrh	r3, [r7, #6]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	371c      	adds	r7, #28
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	0800e488 	.word	0x0800e488
 800b66c:	0800e67c 	.word	0x0800e67c

0800b670 <__errno>:
 800b670:	4b01      	ldr	r3, [pc, #4]	; (800b678 <__errno+0x8>)
 800b672:	6818      	ldr	r0, [r3, #0]
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	20000084 	.word	0x20000084

0800b67c <__libc_init_array>:
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	4e0d      	ldr	r6, [pc, #52]	; (800b6b4 <__libc_init_array+0x38>)
 800b680:	4c0d      	ldr	r4, [pc, #52]	; (800b6b8 <__libc_init_array+0x3c>)
 800b682:	1ba4      	subs	r4, r4, r6
 800b684:	10a4      	asrs	r4, r4, #2
 800b686:	2500      	movs	r5, #0
 800b688:	42a5      	cmp	r5, r4
 800b68a:	d109      	bne.n	800b6a0 <__libc_init_array+0x24>
 800b68c:	4e0b      	ldr	r6, [pc, #44]	; (800b6bc <__libc_init_array+0x40>)
 800b68e:	4c0c      	ldr	r4, [pc, #48]	; (800b6c0 <__libc_init_array+0x44>)
 800b690:	f002 fd78 	bl	800e184 <_init>
 800b694:	1ba4      	subs	r4, r4, r6
 800b696:	10a4      	asrs	r4, r4, #2
 800b698:	2500      	movs	r5, #0
 800b69a:	42a5      	cmp	r5, r4
 800b69c:	d105      	bne.n	800b6aa <__libc_init_array+0x2e>
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6a4:	4798      	blx	r3
 800b6a6:	3501      	adds	r5, #1
 800b6a8:	e7ee      	b.n	800b688 <__libc_init_array+0xc>
 800b6aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6ae:	4798      	blx	r3
 800b6b0:	3501      	adds	r5, #1
 800b6b2:	e7f2      	b.n	800b69a <__libc_init_array+0x1e>
 800b6b4:	0800ea00 	.word	0x0800ea00
 800b6b8:	0800ea00 	.word	0x0800ea00
 800b6bc:	0800ea00 	.word	0x0800ea00
 800b6c0:	0800ea04 	.word	0x0800ea04

0800b6c4 <memcpy>:
 800b6c4:	b510      	push	{r4, lr}
 800b6c6:	1e43      	subs	r3, r0, #1
 800b6c8:	440a      	add	r2, r1
 800b6ca:	4291      	cmp	r1, r2
 800b6cc:	d100      	bne.n	800b6d0 <memcpy+0xc>
 800b6ce:	bd10      	pop	{r4, pc}
 800b6d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6d8:	e7f7      	b.n	800b6ca <memcpy+0x6>

0800b6da <memset>:
 800b6da:	4402      	add	r2, r0
 800b6dc:	4603      	mov	r3, r0
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d100      	bne.n	800b6e4 <memset+0xa>
 800b6e2:	4770      	bx	lr
 800b6e4:	f803 1b01 	strb.w	r1, [r3], #1
 800b6e8:	e7f9      	b.n	800b6de <memset+0x4>

0800b6ea <__cvt>:
 800b6ea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ee:	ec55 4b10 	vmov	r4, r5, d0
 800b6f2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b6f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b6f8:	2d00      	cmp	r5, #0
 800b6fa:	460e      	mov	r6, r1
 800b6fc:	4691      	mov	r9, r2
 800b6fe:	4619      	mov	r1, r3
 800b700:	bfb8      	it	lt
 800b702:	4622      	movlt	r2, r4
 800b704:	462b      	mov	r3, r5
 800b706:	f027 0720 	bic.w	r7, r7, #32
 800b70a:	bfbb      	ittet	lt
 800b70c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b710:	461d      	movlt	r5, r3
 800b712:	2300      	movge	r3, #0
 800b714:	232d      	movlt	r3, #45	; 0x2d
 800b716:	bfb8      	it	lt
 800b718:	4614      	movlt	r4, r2
 800b71a:	2f46      	cmp	r7, #70	; 0x46
 800b71c:	700b      	strb	r3, [r1, #0]
 800b71e:	d004      	beq.n	800b72a <__cvt+0x40>
 800b720:	2f45      	cmp	r7, #69	; 0x45
 800b722:	d100      	bne.n	800b726 <__cvt+0x3c>
 800b724:	3601      	adds	r6, #1
 800b726:	2102      	movs	r1, #2
 800b728:	e000      	b.n	800b72c <__cvt+0x42>
 800b72a:	2103      	movs	r1, #3
 800b72c:	ab03      	add	r3, sp, #12
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	ab02      	add	r3, sp, #8
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	4632      	mov	r2, r6
 800b736:	4653      	mov	r3, sl
 800b738:	ec45 4b10 	vmov	d0, r4, r5
 800b73c:	f000 fe2c 	bl	800c398 <_dtoa_r>
 800b740:	2f47      	cmp	r7, #71	; 0x47
 800b742:	4680      	mov	r8, r0
 800b744:	d102      	bne.n	800b74c <__cvt+0x62>
 800b746:	f019 0f01 	tst.w	r9, #1
 800b74a:	d026      	beq.n	800b79a <__cvt+0xb0>
 800b74c:	2f46      	cmp	r7, #70	; 0x46
 800b74e:	eb08 0906 	add.w	r9, r8, r6
 800b752:	d111      	bne.n	800b778 <__cvt+0x8e>
 800b754:	f898 3000 	ldrb.w	r3, [r8]
 800b758:	2b30      	cmp	r3, #48	; 0x30
 800b75a:	d10a      	bne.n	800b772 <__cvt+0x88>
 800b75c:	2200      	movs	r2, #0
 800b75e:	2300      	movs	r3, #0
 800b760:	4620      	mov	r0, r4
 800b762:	4629      	mov	r1, r5
 800b764:	f7f5 f9b0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b768:	b918      	cbnz	r0, 800b772 <__cvt+0x88>
 800b76a:	f1c6 0601 	rsb	r6, r6, #1
 800b76e:	f8ca 6000 	str.w	r6, [sl]
 800b772:	f8da 3000 	ldr.w	r3, [sl]
 800b776:	4499      	add	r9, r3
 800b778:	2200      	movs	r2, #0
 800b77a:	2300      	movs	r3, #0
 800b77c:	4620      	mov	r0, r4
 800b77e:	4629      	mov	r1, r5
 800b780:	f7f5 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b784:	b938      	cbnz	r0, 800b796 <__cvt+0xac>
 800b786:	2230      	movs	r2, #48	; 0x30
 800b788:	9b03      	ldr	r3, [sp, #12]
 800b78a:	454b      	cmp	r3, r9
 800b78c:	d205      	bcs.n	800b79a <__cvt+0xb0>
 800b78e:	1c59      	adds	r1, r3, #1
 800b790:	9103      	str	r1, [sp, #12]
 800b792:	701a      	strb	r2, [r3, #0]
 800b794:	e7f8      	b.n	800b788 <__cvt+0x9e>
 800b796:	f8cd 900c 	str.w	r9, [sp, #12]
 800b79a:	9b03      	ldr	r3, [sp, #12]
 800b79c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b79e:	eba3 0308 	sub.w	r3, r3, r8
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	6013      	str	r3, [r2, #0]
 800b7a6:	b004      	add	sp, #16
 800b7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b7ac <__exponent>:
 800b7ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ae:	2900      	cmp	r1, #0
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	bfba      	itte	lt
 800b7b4:	4249      	neglt	r1, r1
 800b7b6:	232d      	movlt	r3, #45	; 0x2d
 800b7b8:	232b      	movge	r3, #43	; 0x2b
 800b7ba:	2909      	cmp	r1, #9
 800b7bc:	f804 2b02 	strb.w	r2, [r4], #2
 800b7c0:	7043      	strb	r3, [r0, #1]
 800b7c2:	dd20      	ble.n	800b806 <__exponent+0x5a>
 800b7c4:	f10d 0307 	add.w	r3, sp, #7
 800b7c8:	461f      	mov	r7, r3
 800b7ca:	260a      	movs	r6, #10
 800b7cc:	fb91 f5f6 	sdiv	r5, r1, r6
 800b7d0:	fb06 1115 	mls	r1, r6, r5, r1
 800b7d4:	3130      	adds	r1, #48	; 0x30
 800b7d6:	2d09      	cmp	r5, #9
 800b7d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b7dc:	f103 32ff 	add.w	r2, r3, #4294967295
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	dc09      	bgt.n	800b7f8 <__exponent+0x4c>
 800b7e4:	3130      	adds	r1, #48	; 0x30
 800b7e6:	3b02      	subs	r3, #2
 800b7e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b7ec:	42bb      	cmp	r3, r7
 800b7ee:	4622      	mov	r2, r4
 800b7f0:	d304      	bcc.n	800b7fc <__exponent+0x50>
 800b7f2:	1a10      	subs	r0, r2, r0
 800b7f4:	b003      	add	sp, #12
 800b7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	e7e7      	b.n	800b7cc <__exponent+0x20>
 800b7fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b800:	f804 2b01 	strb.w	r2, [r4], #1
 800b804:	e7f2      	b.n	800b7ec <__exponent+0x40>
 800b806:	2330      	movs	r3, #48	; 0x30
 800b808:	4419      	add	r1, r3
 800b80a:	7083      	strb	r3, [r0, #2]
 800b80c:	1d02      	adds	r2, r0, #4
 800b80e:	70c1      	strb	r1, [r0, #3]
 800b810:	e7ef      	b.n	800b7f2 <__exponent+0x46>
	...

0800b814 <_printf_float>:
 800b814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b818:	b08d      	sub	sp, #52	; 0x34
 800b81a:	460c      	mov	r4, r1
 800b81c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b820:	4616      	mov	r6, r2
 800b822:	461f      	mov	r7, r3
 800b824:	4605      	mov	r5, r0
 800b826:	f001 fce9 	bl	800d1fc <_localeconv_r>
 800b82a:	6803      	ldr	r3, [r0, #0]
 800b82c:	9304      	str	r3, [sp, #16]
 800b82e:	4618      	mov	r0, r3
 800b830:	f7f4 fcce 	bl	80001d0 <strlen>
 800b834:	2300      	movs	r3, #0
 800b836:	930a      	str	r3, [sp, #40]	; 0x28
 800b838:	f8d8 3000 	ldr.w	r3, [r8]
 800b83c:	9005      	str	r0, [sp, #20]
 800b83e:	3307      	adds	r3, #7
 800b840:	f023 0307 	bic.w	r3, r3, #7
 800b844:	f103 0208 	add.w	r2, r3, #8
 800b848:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b84c:	f8d4 b000 	ldr.w	fp, [r4]
 800b850:	f8c8 2000 	str.w	r2, [r8]
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b85c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b860:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b864:	9307      	str	r3, [sp, #28]
 800b866:	f8cd 8018 	str.w	r8, [sp, #24]
 800b86a:	f04f 32ff 	mov.w	r2, #4294967295
 800b86e:	4ba7      	ldr	r3, [pc, #668]	; (800bb0c <_printf_float+0x2f8>)
 800b870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b874:	f7f5 f95a 	bl	8000b2c <__aeabi_dcmpun>
 800b878:	bb70      	cbnz	r0, 800b8d8 <_printf_float+0xc4>
 800b87a:	f04f 32ff 	mov.w	r2, #4294967295
 800b87e:	4ba3      	ldr	r3, [pc, #652]	; (800bb0c <_printf_float+0x2f8>)
 800b880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b884:	f7f5 f934 	bl	8000af0 <__aeabi_dcmple>
 800b888:	bb30      	cbnz	r0, 800b8d8 <_printf_float+0xc4>
 800b88a:	2200      	movs	r2, #0
 800b88c:	2300      	movs	r3, #0
 800b88e:	4640      	mov	r0, r8
 800b890:	4649      	mov	r1, r9
 800b892:	f7f5 f923 	bl	8000adc <__aeabi_dcmplt>
 800b896:	b110      	cbz	r0, 800b89e <_printf_float+0x8a>
 800b898:	232d      	movs	r3, #45	; 0x2d
 800b89a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b89e:	4a9c      	ldr	r2, [pc, #624]	; (800bb10 <_printf_float+0x2fc>)
 800b8a0:	4b9c      	ldr	r3, [pc, #624]	; (800bb14 <_printf_float+0x300>)
 800b8a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b8a6:	bf8c      	ite	hi
 800b8a8:	4690      	movhi	r8, r2
 800b8aa:	4698      	movls	r8, r3
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	f02b 0204 	bic.w	r2, fp, #4
 800b8b2:	6123      	str	r3, [r4, #16]
 800b8b4:	6022      	str	r2, [r4, #0]
 800b8b6:	f04f 0900 	mov.w	r9, #0
 800b8ba:	9700      	str	r7, [sp, #0]
 800b8bc:	4633      	mov	r3, r6
 800b8be:	aa0b      	add	r2, sp, #44	; 0x2c
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	f000 f9e6 	bl	800bc94 <_printf_common>
 800b8c8:	3001      	adds	r0, #1
 800b8ca:	f040 808d 	bne.w	800b9e8 <_printf_float+0x1d4>
 800b8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d2:	b00d      	add	sp, #52	; 0x34
 800b8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d8:	4642      	mov	r2, r8
 800b8da:	464b      	mov	r3, r9
 800b8dc:	4640      	mov	r0, r8
 800b8de:	4649      	mov	r1, r9
 800b8e0:	f7f5 f924 	bl	8000b2c <__aeabi_dcmpun>
 800b8e4:	b110      	cbz	r0, 800b8ec <_printf_float+0xd8>
 800b8e6:	4a8c      	ldr	r2, [pc, #560]	; (800bb18 <_printf_float+0x304>)
 800b8e8:	4b8c      	ldr	r3, [pc, #560]	; (800bb1c <_printf_float+0x308>)
 800b8ea:	e7da      	b.n	800b8a2 <_printf_float+0x8e>
 800b8ec:	6861      	ldr	r1, [r4, #4]
 800b8ee:	1c4b      	adds	r3, r1, #1
 800b8f0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b8f4:	a80a      	add	r0, sp, #40	; 0x28
 800b8f6:	d13e      	bne.n	800b976 <_printf_float+0x162>
 800b8f8:	2306      	movs	r3, #6
 800b8fa:	6063      	str	r3, [r4, #4]
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b902:	ab09      	add	r3, sp, #36	; 0x24
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	ec49 8b10 	vmov	d0, r8, r9
 800b90a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b90e:	6022      	str	r2, [r4, #0]
 800b910:	f8cd a004 	str.w	sl, [sp, #4]
 800b914:	6861      	ldr	r1, [r4, #4]
 800b916:	4628      	mov	r0, r5
 800b918:	f7ff fee7 	bl	800b6ea <__cvt>
 800b91c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b920:	2b47      	cmp	r3, #71	; 0x47
 800b922:	4680      	mov	r8, r0
 800b924:	d109      	bne.n	800b93a <_printf_float+0x126>
 800b926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b928:	1cd8      	adds	r0, r3, #3
 800b92a:	db02      	blt.n	800b932 <_printf_float+0x11e>
 800b92c:	6862      	ldr	r2, [r4, #4]
 800b92e:	4293      	cmp	r3, r2
 800b930:	dd47      	ble.n	800b9c2 <_printf_float+0x1ae>
 800b932:	f1aa 0a02 	sub.w	sl, sl, #2
 800b936:	fa5f fa8a 	uxtb.w	sl, sl
 800b93a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b93e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b940:	d824      	bhi.n	800b98c <_printf_float+0x178>
 800b942:	3901      	subs	r1, #1
 800b944:	4652      	mov	r2, sl
 800b946:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b94a:	9109      	str	r1, [sp, #36]	; 0x24
 800b94c:	f7ff ff2e 	bl	800b7ac <__exponent>
 800b950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b952:	1813      	adds	r3, r2, r0
 800b954:	2a01      	cmp	r2, #1
 800b956:	4681      	mov	r9, r0
 800b958:	6123      	str	r3, [r4, #16]
 800b95a:	dc02      	bgt.n	800b962 <_printf_float+0x14e>
 800b95c:	6822      	ldr	r2, [r4, #0]
 800b95e:	07d1      	lsls	r1, r2, #31
 800b960:	d501      	bpl.n	800b966 <_printf_float+0x152>
 800b962:	3301      	adds	r3, #1
 800b964:	6123      	str	r3, [r4, #16]
 800b966:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0a5      	beq.n	800b8ba <_printf_float+0xa6>
 800b96e:	232d      	movs	r3, #45	; 0x2d
 800b970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b974:	e7a1      	b.n	800b8ba <_printf_float+0xa6>
 800b976:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b97a:	f000 8177 	beq.w	800bc6c <_printf_float+0x458>
 800b97e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b982:	d1bb      	bne.n	800b8fc <_printf_float+0xe8>
 800b984:	2900      	cmp	r1, #0
 800b986:	d1b9      	bne.n	800b8fc <_printf_float+0xe8>
 800b988:	2301      	movs	r3, #1
 800b98a:	e7b6      	b.n	800b8fa <_printf_float+0xe6>
 800b98c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b990:	d119      	bne.n	800b9c6 <_printf_float+0x1b2>
 800b992:	2900      	cmp	r1, #0
 800b994:	6863      	ldr	r3, [r4, #4]
 800b996:	dd0c      	ble.n	800b9b2 <_printf_float+0x19e>
 800b998:	6121      	str	r1, [r4, #16]
 800b99a:	b913      	cbnz	r3, 800b9a2 <_printf_float+0x18e>
 800b99c:	6822      	ldr	r2, [r4, #0]
 800b99e:	07d2      	lsls	r2, r2, #31
 800b9a0:	d502      	bpl.n	800b9a8 <_printf_float+0x194>
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	440b      	add	r3, r1
 800b9a6:	6123      	str	r3, [r4, #16]
 800b9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9aa:	65a3      	str	r3, [r4, #88]	; 0x58
 800b9ac:	f04f 0900 	mov.w	r9, #0
 800b9b0:	e7d9      	b.n	800b966 <_printf_float+0x152>
 800b9b2:	b913      	cbnz	r3, 800b9ba <_printf_float+0x1a6>
 800b9b4:	6822      	ldr	r2, [r4, #0]
 800b9b6:	07d0      	lsls	r0, r2, #31
 800b9b8:	d501      	bpl.n	800b9be <_printf_float+0x1aa>
 800b9ba:	3302      	adds	r3, #2
 800b9bc:	e7f3      	b.n	800b9a6 <_printf_float+0x192>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e7f1      	b.n	800b9a6 <_printf_float+0x192>
 800b9c2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b9c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	db05      	blt.n	800b9da <_printf_float+0x1c6>
 800b9ce:	6822      	ldr	r2, [r4, #0]
 800b9d0:	6123      	str	r3, [r4, #16]
 800b9d2:	07d1      	lsls	r1, r2, #31
 800b9d4:	d5e8      	bpl.n	800b9a8 <_printf_float+0x194>
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	e7e5      	b.n	800b9a6 <_printf_float+0x192>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	bfd4      	ite	le
 800b9de:	f1c3 0302 	rsble	r3, r3, #2
 800b9e2:	2301      	movgt	r3, #1
 800b9e4:	4413      	add	r3, r2
 800b9e6:	e7de      	b.n	800b9a6 <_printf_float+0x192>
 800b9e8:	6823      	ldr	r3, [r4, #0]
 800b9ea:	055a      	lsls	r2, r3, #21
 800b9ec:	d407      	bmi.n	800b9fe <_printf_float+0x1ea>
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	47b8      	blx	r7
 800b9f8:	3001      	adds	r0, #1
 800b9fa:	d12b      	bne.n	800ba54 <_printf_float+0x240>
 800b9fc:	e767      	b.n	800b8ce <_printf_float+0xba>
 800b9fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ba02:	f240 80dc 	bls.w	800bbbe <_printf_float+0x3aa>
 800ba06:	2200      	movs	r2, #0
 800ba08:	2300      	movs	r3, #0
 800ba0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba0e:	f7f5 f85b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d033      	beq.n	800ba7e <_printf_float+0x26a>
 800ba16:	2301      	movs	r3, #1
 800ba18:	4a41      	ldr	r2, [pc, #260]	; (800bb20 <_printf_float+0x30c>)
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b8      	blx	r7
 800ba20:	3001      	adds	r0, #1
 800ba22:	f43f af54 	beq.w	800b8ce <_printf_float+0xba>
 800ba26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	db02      	blt.n	800ba34 <_printf_float+0x220>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	07d8      	lsls	r0, r3, #31
 800ba32:	d50f      	bpl.n	800ba54 <_printf_float+0x240>
 800ba34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	47b8      	blx	r7
 800ba3e:	3001      	adds	r0, #1
 800ba40:	f43f af45 	beq.w	800b8ce <_printf_float+0xba>
 800ba44:	f04f 0800 	mov.w	r8, #0
 800ba48:	f104 091a 	add.w	r9, r4, #26
 800ba4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	4543      	cmp	r3, r8
 800ba52:	dc09      	bgt.n	800ba68 <_printf_float+0x254>
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	079b      	lsls	r3, r3, #30
 800ba58:	f100 8103 	bmi.w	800bc62 <_printf_float+0x44e>
 800ba5c:	68e0      	ldr	r0, [r4, #12]
 800ba5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba60:	4298      	cmp	r0, r3
 800ba62:	bfb8      	it	lt
 800ba64:	4618      	movlt	r0, r3
 800ba66:	e734      	b.n	800b8d2 <_printf_float+0xbe>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	464a      	mov	r2, r9
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4628      	mov	r0, r5
 800ba70:	47b8      	blx	r7
 800ba72:	3001      	adds	r0, #1
 800ba74:	f43f af2b 	beq.w	800b8ce <_printf_float+0xba>
 800ba78:	f108 0801 	add.w	r8, r8, #1
 800ba7c:	e7e6      	b.n	800ba4c <_printf_float+0x238>
 800ba7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	dc2b      	bgt.n	800badc <_printf_float+0x2c8>
 800ba84:	2301      	movs	r3, #1
 800ba86:	4a26      	ldr	r2, [pc, #152]	; (800bb20 <_printf_float+0x30c>)
 800ba88:	4631      	mov	r1, r6
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	47b8      	blx	r7
 800ba8e:	3001      	adds	r0, #1
 800ba90:	f43f af1d 	beq.w	800b8ce <_printf_float+0xba>
 800ba94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba96:	b923      	cbnz	r3, 800baa2 <_printf_float+0x28e>
 800ba98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba9a:	b913      	cbnz	r3, 800baa2 <_printf_float+0x28e>
 800ba9c:	6823      	ldr	r3, [r4, #0]
 800ba9e:	07d9      	lsls	r1, r3, #31
 800baa0:	d5d8      	bpl.n	800ba54 <_printf_float+0x240>
 800baa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baa6:	4631      	mov	r1, r6
 800baa8:	4628      	mov	r0, r5
 800baaa:	47b8      	blx	r7
 800baac:	3001      	adds	r0, #1
 800baae:	f43f af0e 	beq.w	800b8ce <_printf_float+0xba>
 800bab2:	f04f 0900 	mov.w	r9, #0
 800bab6:	f104 0a1a 	add.w	sl, r4, #26
 800baba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800babc:	425b      	negs	r3, r3
 800babe:	454b      	cmp	r3, r9
 800bac0:	dc01      	bgt.n	800bac6 <_printf_float+0x2b2>
 800bac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bac4:	e794      	b.n	800b9f0 <_printf_float+0x1dc>
 800bac6:	2301      	movs	r3, #1
 800bac8:	4652      	mov	r2, sl
 800baca:	4631      	mov	r1, r6
 800bacc:	4628      	mov	r0, r5
 800bace:	47b8      	blx	r7
 800bad0:	3001      	adds	r0, #1
 800bad2:	f43f aefc 	beq.w	800b8ce <_printf_float+0xba>
 800bad6:	f109 0901 	add.w	r9, r9, #1
 800bada:	e7ee      	b.n	800baba <_printf_float+0x2a6>
 800badc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bae0:	429a      	cmp	r2, r3
 800bae2:	bfa8      	it	ge
 800bae4:	461a      	movge	r2, r3
 800bae6:	2a00      	cmp	r2, #0
 800bae8:	4691      	mov	r9, r2
 800baea:	dd07      	ble.n	800bafc <_printf_float+0x2e8>
 800baec:	4613      	mov	r3, r2
 800baee:	4631      	mov	r1, r6
 800baf0:	4642      	mov	r2, r8
 800baf2:	4628      	mov	r0, r5
 800baf4:	47b8      	blx	r7
 800baf6:	3001      	adds	r0, #1
 800baf8:	f43f aee9 	beq.w	800b8ce <_printf_float+0xba>
 800bafc:	f104 031a 	add.w	r3, r4, #26
 800bb00:	f04f 0b00 	mov.w	fp, #0
 800bb04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb08:	9306      	str	r3, [sp, #24]
 800bb0a:	e015      	b.n	800bb38 <_printf_float+0x324>
 800bb0c:	7fefffff 	.word	0x7fefffff
 800bb10:	0800e740 	.word	0x0800e740
 800bb14:	0800e73c 	.word	0x0800e73c
 800bb18:	0800e748 	.word	0x0800e748
 800bb1c:	0800e744 	.word	0x0800e744
 800bb20:	0800e74c 	.word	0x0800e74c
 800bb24:	2301      	movs	r3, #1
 800bb26:	9a06      	ldr	r2, [sp, #24]
 800bb28:	4631      	mov	r1, r6
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	47b8      	blx	r7
 800bb2e:	3001      	adds	r0, #1
 800bb30:	f43f aecd 	beq.w	800b8ce <_printf_float+0xba>
 800bb34:	f10b 0b01 	add.w	fp, fp, #1
 800bb38:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bb3c:	ebaa 0309 	sub.w	r3, sl, r9
 800bb40:	455b      	cmp	r3, fp
 800bb42:	dcef      	bgt.n	800bb24 <_printf_float+0x310>
 800bb44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	44d0      	add	r8, sl
 800bb4c:	db15      	blt.n	800bb7a <_printf_float+0x366>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	07da      	lsls	r2, r3, #31
 800bb52:	d412      	bmi.n	800bb7a <_printf_float+0x366>
 800bb54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb56:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb58:	eba3 020a 	sub.w	r2, r3, sl
 800bb5c:	eba3 0a01 	sub.w	sl, r3, r1
 800bb60:	4592      	cmp	sl, r2
 800bb62:	bfa8      	it	ge
 800bb64:	4692      	movge	sl, r2
 800bb66:	f1ba 0f00 	cmp.w	sl, #0
 800bb6a:	dc0e      	bgt.n	800bb8a <_printf_float+0x376>
 800bb6c:	f04f 0800 	mov.w	r8, #0
 800bb70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb74:	f104 091a 	add.w	r9, r4, #26
 800bb78:	e019      	b.n	800bbae <_printf_float+0x39a>
 800bb7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb7e:	4631      	mov	r1, r6
 800bb80:	4628      	mov	r0, r5
 800bb82:	47b8      	blx	r7
 800bb84:	3001      	adds	r0, #1
 800bb86:	d1e5      	bne.n	800bb54 <_printf_float+0x340>
 800bb88:	e6a1      	b.n	800b8ce <_printf_float+0xba>
 800bb8a:	4653      	mov	r3, sl
 800bb8c:	4642      	mov	r2, r8
 800bb8e:	4631      	mov	r1, r6
 800bb90:	4628      	mov	r0, r5
 800bb92:	47b8      	blx	r7
 800bb94:	3001      	adds	r0, #1
 800bb96:	d1e9      	bne.n	800bb6c <_printf_float+0x358>
 800bb98:	e699      	b.n	800b8ce <_printf_float+0xba>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	464a      	mov	r2, r9
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b8      	blx	r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	f43f ae92 	beq.w	800b8ce <_printf_float+0xba>
 800bbaa:	f108 0801 	add.w	r8, r8, #1
 800bbae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbb2:	1a9b      	subs	r3, r3, r2
 800bbb4:	eba3 030a 	sub.w	r3, r3, sl
 800bbb8:	4543      	cmp	r3, r8
 800bbba:	dcee      	bgt.n	800bb9a <_printf_float+0x386>
 800bbbc:	e74a      	b.n	800ba54 <_printf_float+0x240>
 800bbbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbc0:	2a01      	cmp	r2, #1
 800bbc2:	dc01      	bgt.n	800bbc8 <_printf_float+0x3b4>
 800bbc4:	07db      	lsls	r3, r3, #31
 800bbc6:	d53a      	bpl.n	800bc3e <_printf_float+0x42a>
 800bbc8:	2301      	movs	r3, #1
 800bbca:	4642      	mov	r2, r8
 800bbcc:	4631      	mov	r1, r6
 800bbce:	4628      	mov	r0, r5
 800bbd0:	47b8      	blx	r7
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	f43f ae7b 	beq.w	800b8ce <_printf_float+0xba>
 800bbd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbdc:	4631      	mov	r1, r6
 800bbde:	4628      	mov	r0, r5
 800bbe0:	47b8      	blx	r7
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	f108 0801 	add.w	r8, r8, #1
 800bbe8:	f43f ae71 	beq.w	800b8ce <_printf_float+0xba>
 800bbec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f103 3aff 	add.w	sl, r3, #4294967295
 800bbf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	f7f4 ff65 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbfe:	b9c8      	cbnz	r0, 800bc34 <_printf_float+0x420>
 800bc00:	4653      	mov	r3, sl
 800bc02:	4642      	mov	r2, r8
 800bc04:	4631      	mov	r1, r6
 800bc06:	4628      	mov	r0, r5
 800bc08:	47b8      	blx	r7
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	d10e      	bne.n	800bc2c <_printf_float+0x418>
 800bc0e:	e65e      	b.n	800b8ce <_printf_float+0xba>
 800bc10:	2301      	movs	r3, #1
 800bc12:	4652      	mov	r2, sl
 800bc14:	4631      	mov	r1, r6
 800bc16:	4628      	mov	r0, r5
 800bc18:	47b8      	blx	r7
 800bc1a:	3001      	adds	r0, #1
 800bc1c:	f43f ae57 	beq.w	800b8ce <_printf_float+0xba>
 800bc20:	f108 0801 	add.w	r8, r8, #1
 800bc24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc26:	3b01      	subs	r3, #1
 800bc28:	4543      	cmp	r3, r8
 800bc2a:	dcf1      	bgt.n	800bc10 <_printf_float+0x3fc>
 800bc2c:	464b      	mov	r3, r9
 800bc2e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc32:	e6de      	b.n	800b9f2 <_printf_float+0x1de>
 800bc34:	f04f 0800 	mov.w	r8, #0
 800bc38:	f104 0a1a 	add.w	sl, r4, #26
 800bc3c:	e7f2      	b.n	800bc24 <_printf_float+0x410>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e7df      	b.n	800bc02 <_printf_float+0x3ee>
 800bc42:	2301      	movs	r3, #1
 800bc44:	464a      	mov	r2, r9
 800bc46:	4631      	mov	r1, r6
 800bc48:	4628      	mov	r0, r5
 800bc4a:	47b8      	blx	r7
 800bc4c:	3001      	adds	r0, #1
 800bc4e:	f43f ae3e 	beq.w	800b8ce <_printf_float+0xba>
 800bc52:	f108 0801 	add.w	r8, r8, #1
 800bc56:	68e3      	ldr	r3, [r4, #12]
 800bc58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc5a:	1a9b      	subs	r3, r3, r2
 800bc5c:	4543      	cmp	r3, r8
 800bc5e:	dcf0      	bgt.n	800bc42 <_printf_float+0x42e>
 800bc60:	e6fc      	b.n	800ba5c <_printf_float+0x248>
 800bc62:	f04f 0800 	mov.w	r8, #0
 800bc66:	f104 0919 	add.w	r9, r4, #25
 800bc6a:	e7f4      	b.n	800bc56 <_printf_float+0x442>
 800bc6c:	2900      	cmp	r1, #0
 800bc6e:	f43f ae8b 	beq.w	800b988 <_printf_float+0x174>
 800bc72:	2300      	movs	r3, #0
 800bc74:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bc78:	ab09      	add	r3, sp, #36	; 0x24
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	ec49 8b10 	vmov	d0, r8, r9
 800bc80:	6022      	str	r2, [r4, #0]
 800bc82:	f8cd a004 	str.w	sl, [sp, #4]
 800bc86:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f7ff fd2d 	bl	800b6ea <__cvt>
 800bc90:	4680      	mov	r8, r0
 800bc92:	e648      	b.n	800b926 <_printf_float+0x112>

0800bc94 <_printf_common>:
 800bc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc98:	4691      	mov	r9, r2
 800bc9a:	461f      	mov	r7, r3
 800bc9c:	688a      	ldr	r2, [r1, #8]
 800bc9e:	690b      	ldr	r3, [r1, #16]
 800bca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bca4:	4293      	cmp	r3, r2
 800bca6:	bfb8      	it	lt
 800bca8:	4613      	movlt	r3, r2
 800bcaa:	f8c9 3000 	str.w	r3, [r9]
 800bcae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	b112      	cbz	r2, 800bcbe <_printf_common+0x2a>
 800bcb8:	3301      	adds	r3, #1
 800bcba:	f8c9 3000 	str.w	r3, [r9]
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	0699      	lsls	r1, r3, #26
 800bcc2:	bf42      	ittt	mi
 800bcc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bcc8:	3302      	addmi	r3, #2
 800bcca:	f8c9 3000 	strmi.w	r3, [r9]
 800bcce:	6825      	ldr	r5, [r4, #0]
 800bcd0:	f015 0506 	ands.w	r5, r5, #6
 800bcd4:	d107      	bne.n	800bce6 <_printf_common+0x52>
 800bcd6:	f104 0a19 	add.w	sl, r4, #25
 800bcda:	68e3      	ldr	r3, [r4, #12]
 800bcdc:	f8d9 2000 	ldr.w	r2, [r9]
 800bce0:	1a9b      	subs	r3, r3, r2
 800bce2:	42ab      	cmp	r3, r5
 800bce4:	dc28      	bgt.n	800bd38 <_printf_common+0xa4>
 800bce6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bcea:	6822      	ldr	r2, [r4, #0]
 800bcec:	3300      	adds	r3, #0
 800bcee:	bf18      	it	ne
 800bcf0:	2301      	movne	r3, #1
 800bcf2:	0692      	lsls	r2, r2, #26
 800bcf4:	d42d      	bmi.n	800bd52 <_printf_common+0xbe>
 800bcf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	47c0      	blx	r8
 800bd00:	3001      	adds	r0, #1
 800bd02:	d020      	beq.n	800bd46 <_printf_common+0xb2>
 800bd04:	6823      	ldr	r3, [r4, #0]
 800bd06:	68e5      	ldr	r5, [r4, #12]
 800bd08:	f8d9 2000 	ldr.w	r2, [r9]
 800bd0c:	f003 0306 	and.w	r3, r3, #6
 800bd10:	2b04      	cmp	r3, #4
 800bd12:	bf08      	it	eq
 800bd14:	1aad      	subeq	r5, r5, r2
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	6922      	ldr	r2, [r4, #16]
 800bd1a:	bf0c      	ite	eq
 800bd1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd20:	2500      	movne	r5, #0
 800bd22:	4293      	cmp	r3, r2
 800bd24:	bfc4      	itt	gt
 800bd26:	1a9b      	subgt	r3, r3, r2
 800bd28:	18ed      	addgt	r5, r5, r3
 800bd2a:	f04f 0900 	mov.w	r9, #0
 800bd2e:	341a      	adds	r4, #26
 800bd30:	454d      	cmp	r5, r9
 800bd32:	d11a      	bne.n	800bd6a <_printf_common+0xd6>
 800bd34:	2000      	movs	r0, #0
 800bd36:	e008      	b.n	800bd4a <_printf_common+0xb6>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	4652      	mov	r2, sl
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	4630      	mov	r0, r6
 800bd40:	47c0      	blx	r8
 800bd42:	3001      	adds	r0, #1
 800bd44:	d103      	bne.n	800bd4e <_printf_common+0xba>
 800bd46:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4e:	3501      	adds	r5, #1
 800bd50:	e7c3      	b.n	800bcda <_printf_common+0x46>
 800bd52:	18e1      	adds	r1, r4, r3
 800bd54:	1c5a      	adds	r2, r3, #1
 800bd56:	2030      	movs	r0, #48	; 0x30
 800bd58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd5c:	4422      	add	r2, r4
 800bd5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd66:	3302      	adds	r3, #2
 800bd68:	e7c5      	b.n	800bcf6 <_printf_common+0x62>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	4639      	mov	r1, r7
 800bd70:	4630      	mov	r0, r6
 800bd72:	47c0      	blx	r8
 800bd74:	3001      	adds	r0, #1
 800bd76:	d0e6      	beq.n	800bd46 <_printf_common+0xb2>
 800bd78:	f109 0901 	add.w	r9, r9, #1
 800bd7c:	e7d8      	b.n	800bd30 <_printf_common+0x9c>
	...

0800bd80 <_printf_i>:
 800bd80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bd88:	460c      	mov	r4, r1
 800bd8a:	7e09      	ldrb	r1, [r1, #24]
 800bd8c:	b085      	sub	sp, #20
 800bd8e:	296e      	cmp	r1, #110	; 0x6e
 800bd90:	4617      	mov	r7, r2
 800bd92:	4606      	mov	r6, r0
 800bd94:	4698      	mov	r8, r3
 800bd96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd98:	f000 80b3 	beq.w	800bf02 <_printf_i+0x182>
 800bd9c:	d822      	bhi.n	800bde4 <_printf_i+0x64>
 800bd9e:	2963      	cmp	r1, #99	; 0x63
 800bda0:	d036      	beq.n	800be10 <_printf_i+0x90>
 800bda2:	d80a      	bhi.n	800bdba <_printf_i+0x3a>
 800bda4:	2900      	cmp	r1, #0
 800bda6:	f000 80b9 	beq.w	800bf1c <_printf_i+0x19c>
 800bdaa:	2958      	cmp	r1, #88	; 0x58
 800bdac:	f000 8083 	beq.w	800beb6 <_printf_i+0x136>
 800bdb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdb4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bdb8:	e032      	b.n	800be20 <_printf_i+0xa0>
 800bdba:	2964      	cmp	r1, #100	; 0x64
 800bdbc:	d001      	beq.n	800bdc2 <_printf_i+0x42>
 800bdbe:	2969      	cmp	r1, #105	; 0x69
 800bdc0:	d1f6      	bne.n	800bdb0 <_printf_i+0x30>
 800bdc2:	6820      	ldr	r0, [r4, #0]
 800bdc4:	6813      	ldr	r3, [r2, #0]
 800bdc6:	0605      	lsls	r5, r0, #24
 800bdc8:	f103 0104 	add.w	r1, r3, #4
 800bdcc:	d52a      	bpl.n	800be24 <_printf_i+0xa4>
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6011      	str	r1, [r2, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	da03      	bge.n	800bdde <_printf_i+0x5e>
 800bdd6:	222d      	movs	r2, #45	; 0x2d
 800bdd8:	425b      	negs	r3, r3
 800bdda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bdde:	486f      	ldr	r0, [pc, #444]	; (800bf9c <_printf_i+0x21c>)
 800bde0:	220a      	movs	r2, #10
 800bde2:	e039      	b.n	800be58 <_printf_i+0xd8>
 800bde4:	2973      	cmp	r1, #115	; 0x73
 800bde6:	f000 809d 	beq.w	800bf24 <_printf_i+0x1a4>
 800bdea:	d808      	bhi.n	800bdfe <_printf_i+0x7e>
 800bdec:	296f      	cmp	r1, #111	; 0x6f
 800bdee:	d020      	beq.n	800be32 <_printf_i+0xb2>
 800bdf0:	2970      	cmp	r1, #112	; 0x70
 800bdf2:	d1dd      	bne.n	800bdb0 <_printf_i+0x30>
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	f043 0320 	orr.w	r3, r3, #32
 800bdfa:	6023      	str	r3, [r4, #0]
 800bdfc:	e003      	b.n	800be06 <_printf_i+0x86>
 800bdfe:	2975      	cmp	r1, #117	; 0x75
 800be00:	d017      	beq.n	800be32 <_printf_i+0xb2>
 800be02:	2978      	cmp	r1, #120	; 0x78
 800be04:	d1d4      	bne.n	800bdb0 <_printf_i+0x30>
 800be06:	2378      	movs	r3, #120	; 0x78
 800be08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be0c:	4864      	ldr	r0, [pc, #400]	; (800bfa0 <_printf_i+0x220>)
 800be0e:	e055      	b.n	800bebc <_printf_i+0x13c>
 800be10:	6813      	ldr	r3, [r2, #0]
 800be12:	1d19      	adds	r1, r3, #4
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6011      	str	r1, [r2, #0]
 800be18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be20:	2301      	movs	r3, #1
 800be22:	e08c      	b.n	800bf3e <_printf_i+0x1be>
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6011      	str	r1, [r2, #0]
 800be28:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be2c:	bf18      	it	ne
 800be2e:	b21b      	sxthne	r3, r3
 800be30:	e7cf      	b.n	800bdd2 <_printf_i+0x52>
 800be32:	6813      	ldr	r3, [r2, #0]
 800be34:	6825      	ldr	r5, [r4, #0]
 800be36:	1d18      	adds	r0, r3, #4
 800be38:	6010      	str	r0, [r2, #0]
 800be3a:	0628      	lsls	r0, r5, #24
 800be3c:	d501      	bpl.n	800be42 <_printf_i+0xc2>
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	e002      	b.n	800be48 <_printf_i+0xc8>
 800be42:	0668      	lsls	r0, r5, #25
 800be44:	d5fb      	bpl.n	800be3e <_printf_i+0xbe>
 800be46:	881b      	ldrh	r3, [r3, #0]
 800be48:	4854      	ldr	r0, [pc, #336]	; (800bf9c <_printf_i+0x21c>)
 800be4a:	296f      	cmp	r1, #111	; 0x6f
 800be4c:	bf14      	ite	ne
 800be4e:	220a      	movne	r2, #10
 800be50:	2208      	moveq	r2, #8
 800be52:	2100      	movs	r1, #0
 800be54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be58:	6865      	ldr	r5, [r4, #4]
 800be5a:	60a5      	str	r5, [r4, #8]
 800be5c:	2d00      	cmp	r5, #0
 800be5e:	f2c0 8095 	blt.w	800bf8c <_printf_i+0x20c>
 800be62:	6821      	ldr	r1, [r4, #0]
 800be64:	f021 0104 	bic.w	r1, r1, #4
 800be68:	6021      	str	r1, [r4, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d13d      	bne.n	800beea <_printf_i+0x16a>
 800be6e:	2d00      	cmp	r5, #0
 800be70:	f040 808e 	bne.w	800bf90 <_printf_i+0x210>
 800be74:	4665      	mov	r5, ip
 800be76:	2a08      	cmp	r2, #8
 800be78:	d10b      	bne.n	800be92 <_printf_i+0x112>
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	07db      	lsls	r3, r3, #31
 800be7e:	d508      	bpl.n	800be92 <_printf_i+0x112>
 800be80:	6923      	ldr	r3, [r4, #16]
 800be82:	6862      	ldr	r2, [r4, #4]
 800be84:	429a      	cmp	r2, r3
 800be86:	bfde      	ittt	le
 800be88:	2330      	movle	r3, #48	; 0x30
 800be8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be92:	ebac 0305 	sub.w	r3, ip, r5
 800be96:	6123      	str	r3, [r4, #16]
 800be98:	f8cd 8000 	str.w	r8, [sp]
 800be9c:	463b      	mov	r3, r7
 800be9e:	aa03      	add	r2, sp, #12
 800bea0:	4621      	mov	r1, r4
 800bea2:	4630      	mov	r0, r6
 800bea4:	f7ff fef6 	bl	800bc94 <_printf_common>
 800bea8:	3001      	adds	r0, #1
 800beaa:	d14d      	bne.n	800bf48 <_printf_i+0x1c8>
 800beac:	f04f 30ff 	mov.w	r0, #4294967295
 800beb0:	b005      	add	sp, #20
 800beb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beb6:	4839      	ldr	r0, [pc, #228]	; (800bf9c <_printf_i+0x21c>)
 800beb8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bebc:	6813      	ldr	r3, [r2, #0]
 800bebe:	6821      	ldr	r1, [r4, #0]
 800bec0:	1d1d      	adds	r5, r3, #4
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	6015      	str	r5, [r2, #0]
 800bec6:	060a      	lsls	r2, r1, #24
 800bec8:	d50b      	bpl.n	800bee2 <_printf_i+0x162>
 800beca:	07ca      	lsls	r2, r1, #31
 800becc:	bf44      	itt	mi
 800bece:	f041 0120 	orrmi.w	r1, r1, #32
 800bed2:	6021      	strmi	r1, [r4, #0]
 800bed4:	b91b      	cbnz	r3, 800bede <_printf_i+0x15e>
 800bed6:	6822      	ldr	r2, [r4, #0]
 800bed8:	f022 0220 	bic.w	r2, r2, #32
 800bedc:	6022      	str	r2, [r4, #0]
 800bede:	2210      	movs	r2, #16
 800bee0:	e7b7      	b.n	800be52 <_printf_i+0xd2>
 800bee2:	064d      	lsls	r5, r1, #25
 800bee4:	bf48      	it	mi
 800bee6:	b29b      	uxthmi	r3, r3
 800bee8:	e7ef      	b.n	800beca <_printf_i+0x14a>
 800beea:	4665      	mov	r5, ip
 800beec:	fbb3 f1f2 	udiv	r1, r3, r2
 800bef0:	fb02 3311 	mls	r3, r2, r1, r3
 800bef4:	5cc3      	ldrb	r3, [r0, r3]
 800bef6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800befa:	460b      	mov	r3, r1
 800befc:	2900      	cmp	r1, #0
 800befe:	d1f5      	bne.n	800beec <_printf_i+0x16c>
 800bf00:	e7b9      	b.n	800be76 <_printf_i+0xf6>
 800bf02:	6813      	ldr	r3, [r2, #0]
 800bf04:	6825      	ldr	r5, [r4, #0]
 800bf06:	6961      	ldr	r1, [r4, #20]
 800bf08:	1d18      	adds	r0, r3, #4
 800bf0a:	6010      	str	r0, [r2, #0]
 800bf0c:	0628      	lsls	r0, r5, #24
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	d501      	bpl.n	800bf16 <_printf_i+0x196>
 800bf12:	6019      	str	r1, [r3, #0]
 800bf14:	e002      	b.n	800bf1c <_printf_i+0x19c>
 800bf16:	066a      	lsls	r2, r5, #25
 800bf18:	d5fb      	bpl.n	800bf12 <_printf_i+0x192>
 800bf1a:	8019      	strh	r1, [r3, #0]
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	6123      	str	r3, [r4, #16]
 800bf20:	4665      	mov	r5, ip
 800bf22:	e7b9      	b.n	800be98 <_printf_i+0x118>
 800bf24:	6813      	ldr	r3, [r2, #0]
 800bf26:	1d19      	adds	r1, r3, #4
 800bf28:	6011      	str	r1, [r2, #0]
 800bf2a:	681d      	ldr	r5, [r3, #0]
 800bf2c:	6862      	ldr	r2, [r4, #4]
 800bf2e:	2100      	movs	r1, #0
 800bf30:	4628      	mov	r0, r5
 800bf32:	f7f4 f955 	bl	80001e0 <memchr>
 800bf36:	b108      	cbz	r0, 800bf3c <_printf_i+0x1bc>
 800bf38:	1b40      	subs	r0, r0, r5
 800bf3a:	6060      	str	r0, [r4, #4]
 800bf3c:	6863      	ldr	r3, [r4, #4]
 800bf3e:	6123      	str	r3, [r4, #16]
 800bf40:	2300      	movs	r3, #0
 800bf42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf46:	e7a7      	b.n	800be98 <_printf_i+0x118>
 800bf48:	6923      	ldr	r3, [r4, #16]
 800bf4a:	462a      	mov	r2, r5
 800bf4c:	4639      	mov	r1, r7
 800bf4e:	4630      	mov	r0, r6
 800bf50:	47c0      	blx	r8
 800bf52:	3001      	adds	r0, #1
 800bf54:	d0aa      	beq.n	800beac <_printf_i+0x12c>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	079b      	lsls	r3, r3, #30
 800bf5a:	d413      	bmi.n	800bf84 <_printf_i+0x204>
 800bf5c:	68e0      	ldr	r0, [r4, #12]
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	4298      	cmp	r0, r3
 800bf62:	bfb8      	it	lt
 800bf64:	4618      	movlt	r0, r3
 800bf66:	e7a3      	b.n	800beb0 <_printf_i+0x130>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	464a      	mov	r2, r9
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	4630      	mov	r0, r6
 800bf70:	47c0      	blx	r8
 800bf72:	3001      	adds	r0, #1
 800bf74:	d09a      	beq.n	800beac <_printf_i+0x12c>
 800bf76:	3501      	adds	r5, #1
 800bf78:	68e3      	ldr	r3, [r4, #12]
 800bf7a:	9a03      	ldr	r2, [sp, #12]
 800bf7c:	1a9b      	subs	r3, r3, r2
 800bf7e:	42ab      	cmp	r3, r5
 800bf80:	dcf2      	bgt.n	800bf68 <_printf_i+0x1e8>
 800bf82:	e7eb      	b.n	800bf5c <_printf_i+0x1dc>
 800bf84:	2500      	movs	r5, #0
 800bf86:	f104 0919 	add.w	r9, r4, #25
 800bf8a:	e7f5      	b.n	800bf78 <_printf_i+0x1f8>
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1ac      	bne.n	800beea <_printf_i+0x16a>
 800bf90:	7803      	ldrb	r3, [r0, #0]
 800bf92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf9a:	e76c      	b.n	800be76 <_printf_i+0xf6>
 800bf9c:	0800e74e 	.word	0x0800e74e
 800bfa0:	0800e75f 	.word	0x0800e75f

0800bfa4 <iprintf>:
 800bfa4:	b40f      	push	{r0, r1, r2, r3}
 800bfa6:	4b0a      	ldr	r3, [pc, #40]	; (800bfd0 <iprintf+0x2c>)
 800bfa8:	b513      	push	{r0, r1, r4, lr}
 800bfaa:	681c      	ldr	r4, [r3, #0]
 800bfac:	b124      	cbz	r4, 800bfb8 <iprintf+0x14>
 800bfae:	69a3      	ldr	r3, [r4, #24]
 800bfb0:	b913      	cbnz	r3, 800bfb8 <iprintf+0x14>
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f001 f898 	bl	800d0e8 <__sinit>
 800bfb8:	ab05      	add	r3, sp, #20
 800bfba:	9a04      	ldr	r2, [sp, #16]
 800bfbc:	68a1      	ldr	r1, [r4, #8]
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f001 fea3 	bl	800dd0c <_vfiprintf_r>
 800bfc6:	b002      	add	sp, #8
 800bfc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfcc:	b004      	add	sp, #16
 800bfce:	4770      	bx	lr
 800bfd0:	20000084 	.word	0x20000084

0800bfd4 <_puts_r>:
 800bfd4:	b570      	push	{r4, r5, r6, lr}
 800bfd6:	460e      	mov	r6, r1
 800bfd8:	4605      	mov	r5, r0
 800bfda:	b118      	cbz	r0, 800bfe4 <_puts_r+0x10>
 800bfdc:	6983      	ldr	r3, [r0, #24]
 800bfde:	b90b      	cbnz	r3, 800bfe4 <_puts_r+0x10>
 800bfe0:	f001 f882 	bl	800d0e8 <__sinit>
 800bfe4:	69ab      	ldr	r3, [r5, #24]
 800bfe6:	68ac      	ldr	r4, [r5, #8]
 800bfe8:	b913      	cbnz	r3, 800bff0 <_puts_r+0x1c>
 800bfea:	4628      	mov	r0, r5
 800bfec:	f001 f87c 	bl	800d0e8 <__sinit>
 800bff0:	4b23      	ldr	r3, [pc, #140]	; (800c080 <_puts_r+0xac>)
 800bff2:	429c      	cmp	r4, r3
 800bff4:	d117      	bne.n	800c026 <_puts_r+0x52>
 800bff6:	686c      	ldr	r4, [r5, #4]
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	071b      	lsls	r3, r3, #28
 800bffc:	d51d      	bpl.n	800c03a <_puts_r+0x66>
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	b1db      	cbz	r3, 800c03a <_puts_r+0x66>
 800c002:	3e01      	subs	r6, #1
 800c004:	68a3      	ldr	r3, [r4, #8]
 800c006:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c00a:	3b01      	subs	r3, #1
 800c00c:	60a3      	str	r3, [r4, #8]
 800c00e:	b9e9      	cbnz	r1, 800c04c <_puts_r+0x78>
 800c010:	2b00      	cmp	r3, #0
 800c012:	da2e      	bge.n	800c072 <_puts_r+0x9e>
 800c014:	4622      	mov	r2, r4
 800c016:	210a      	movs	r1, #10
 800c018:	4628      	mov	r0, r5
 800c01a:	f000 f86f 	bl	800c0fc <__swbuf_r>
 800c01e:	3001      	adds	r0, #1
 800c020:	d011      	beq.n	800c046 <_puts_r+0x72>
 800c022:	200a      	movs	r0, #10
 800c024:	e011      	b.n	800c04a <_puts_r+0x76>
 800c026:	4b17      	ldr	r3, [pc, #92]	; (800c084 <_puts_r+0xb0>)
 800c028:	429c      	cmp	r4, r3
 800c02a:	d101      	bne.n	800c030 <_puts_r+0x5c>
 800c02c:	68ac      	ldr	r4, [r5, #8]
 800c02e:	e7e3      	b.n	800bff8 <_puts_r+0x24>
 800c030:	4b15      	ldr	r3, [pc, #84]	; (800c088 <_puts_r+0xb4>)
 800c032:	429c      	cmp	r4, r3
 800c034:	bf08      	it	eq
 800c036:	68ec      	ldreq	r4, [r5, #12]
 800c038:	e7de      	b.n	800bff8 <_puts_r+0x24>
 800c03a:	4621      	mov	r1, r4
 800c03c:	4628      	mov	r0, r5
 800c03e:	f000 f8af 	bl	800c1a0 <__swsetup_r>
 800c042:	2800      	cmp	r0, #0
 800c044:	d0dd      	beq.n	800c002 <_puts_r+0x2e>
 800c046:	f04f 30ff 	mov.w	r0, #4294967295
 800c04a:	bd70      	pop	{r4, r5, r6, pc}
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	da04      	bge.n	800c05a <_puts_r+0x86>
 800c050:	69a2      	ldr	r2, [r4, #24]
 800c052:	429a      	cmp	r2, r3
 800c054:	dc06      	bgt.n	800c064 <_puts_r+0x90>
 800c056:	290a      	cmp	r1, #10
 800c058:	d004      	beq.n	800c064 <_puts_r+0x90>
 800c05a:	6823      	ldr	r3, [r4, #0]
 800c05c:	1c5a      	adds	r2, r3, #1
 800c05e:	6022      	str	r2, [r4, #0]
 800c060:	7019      	strb	r1, [r3, #0]
 800c062:	e7cf      	b.n	800c004 <_puts_r+0x30>
 800c064:	4622      	mov	r2, r4
 800c066:	4628      	mov	r0, r5
 800c068:	f000 f848 	bl	800c0fc <__swbuf_r>
 800c06c:	3001      	adds	r0, #1
 800c06e:	d1c9      	bne.n	800c004 <_puts_r+0x30>
 800c070:	e7e9      	b.n	800c046 <_puts_r+0x72>
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	200a      	movs	r0, #10
 800c076:	1c5a      	adds	r2, r3, #1
 800c078:	6022      	str	r2, [r4, #0]
 800c07a:	7018      	strb	r0, [r3, #0]
 800c07c:	e7e5      	b.n	800c04a <_puts_r+0x76>
 800c07e:	bf00      	nop
 800c080:	0800e7a0 	.word	0x0800e7a0
 800c084:	0800e7c0 	.word	0x0800e7c0
 800c088:	0800e780 	.word	0x0800e780

0800c08c <puts>:
 800c08c:	4b02      	ldr	r3, [pc, #8]	; (800c098 <puts+0xc>)
 800c08e:	4601      	mov	r1, r0
 800c090:	6818      	ldr	r0, [r3, #0]
 800c092:	f7ff bf9f 	b.w	800bfd4 <_puts_r>
 800c096:	bf00      	nop
 800c098:	20000084 	.word	0x20000084

0800c09c <siprintf>:
 800c09c:	b40e      	push	{r1, r2, r3}
 800c09e:	b500      	push	{lr}
 800c0a0:	b09c      	sub	sp, #112	; 0x70
 800c0a2:	ab1d      	add	r3, sp, #116	; 0x74
 800c0a4:	9002      	str	r0, [sp, #8]
 800c0a6:	9006      	str	r0, [sp, #24]
 800c0a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0ac:	4809      	ldr	r0, [pc, #36]	; (800c0d4 <siprintf+0x38>)
 800c0ae:	9107      	str	r1, [sp, #28]
 800c0b0:	9104      	str	r1, [sp, #16]
 800c0b2:	4909      	ldr	r1, [pc, #36]	; (800c0d8 <siprintf+0x3c>)
 800c0b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0b8:	9105      	str	r1, [sp, #20]
 800c0ba:	6800      	ldr	r0, [r0, #0]
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	a902      	add	r1, sp, #8
 800c0c0:	f001 fd02 	bl	800dac8 <_svfiprintf_r>
 800c0c4:	9b02      	ldr	r3, [sp, #8]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	701a      	strb	r2, [r3, #0]
 800c0ca:	b01c      	add	sp, #112	; 0x70
 800c0cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0d0:	b003      	add	sp, #12
 800c0d2:	4770      	bx	lr
 800c0d4:	20000084 	.word	0x20000084
 800c0d8:	ffff0208 	.word	0xffff0208

0800c0dc <strcat>:
 800c0dc:	b510      	push	{r4, lr}
 800c0de:	4603      	mov	r3, r0
 800c0e0:	781a      	ldrb	r2, [r3, #0]
 800c0e2:	1c5c      	adds	r4, r3, #1
 800c0e4:	b93a      	cbnz	r2, 800c0f6 <strcat+0x1a>
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0f0:	2a00      	cmp	r2, #0
 800c0f2:	d1f9      	bne.n	800c0e8 <strcat+0xc>
 800c0f4:	bd10      	pop	{r4, pc}
 800c0f6:	4623      	mov	r3, r4
 800c0f8:	e7f2      	b.n	800c0e0 <strcat+0x4>
	...

0800c0fc <__swbuf_r>:
 800c0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fe:	460e      	mov	r6, r1
 800c100:	4614      	mov	r4, r2
 800c102:	4605      	mov	r5, r0
 800c104:	b118      	cbz	r0, 800c10e <__swbuf_r+0x12>
 800c106:	6983      	ldr	r3, [r0, #24]
 800c108:	b90b      	cbnz	r3, 800c10e <__swbuf_r+0x12>
 800c10a:	f000 ffed 	bl	800d0e8 <__sinit>
 800c10e:	4b21      	ldr	r3, [pc, #132]	; (800c194 <__swbuf_r+0x98>)
 800c110:	429c      	cmp	r4, r3
 800c112:	d12a      	bne.n	800c16a <__swbuf_r+0x6e>
 800c114:	686c      	ldr	r4, [r5, #4]
 800c116:	69a3      	ldr	r3, [r4, #24]
 800c118:	60a3      	str	r3, [r4, #8]
 800c11a:	89a3      	ldrh	r3, [r4, #12]
 800c11c:	071a      	lsls	r2, r3, #28
 800c11e:	d52e      	bpl.n	800c17e <__swbuf_r+0x82>
 800c120:	6923      	ldr	r3, [r4, #16]
 800c122:	b363      	cbz	r3, 800c17e <__swbuf_r+0x82>
 800c124:	6923      	ldr	r3, [r4, #16]
 800c126:	6820      	ldr	r0, [r4, #0]
 800c128:	1ac0      	subs	r0, r0, r3
 800c12a:	6963      	ldr	r3, [r4, #20]
 800c12c:	b2f6      	uxtb	r6, r6
 800c12e:	4283      	cmp	r3, r0
 800c130:	4637      	mov	r7, r6
 800c132:	dc04      	bgt.n	800c13e <__swbuf_r+0x42>
 800c134:	4621      	mov	r1, r4
 800c136:	4628      	mov	r0, r5
 800c138:	f000 ff6c 	bl	800d014 <_fflush_r>
 800c13c:	bb28      	cbnz	r0, 800c18a <__swbuf_r+0x8e>
 800c13e:	68a3      	ldr	r3, [r4, #8]
 800c140:	3b01      	subs	r3, #1
 800c142:	60a3      	str	r3, [r4, #8]
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	1c5a      	adds	r2, r3, #1
 800c148:	6022      	str	r2, [r4, #0]
 800c14a:	701e      	strb	r6, [r3, #0]
 800c14c:	6963      	ldr	r3, [r4, #20]
 800c14e:	3001      	adds	r0, #1
 800c150:	4283      	cmp	r3, r0
 800c152:	d004      	beq.n	800c15e <__swbuf_r+0x62>
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	07db      	lsls	r3, r3, #31
 800c158:	d519      	bpl.n	800c18e <__swbuf_r+0x92>
 800c15a:	2e0a      	cmp	r6, #10
 800c15c:	d117      	bne.n	800c18e <__swbuf_r+0x92>
 800c15e:	4621      	mov	r1, r4
 800c160:	4628      	mov	r0, r5
 800c162:	f000 ff57 	bl	800d014 <_fflush_r>
 800c166:	b190      	cbz	r0, 800c18e <__swbuf_r+0x92>
 800c168:	e00f      	b.n	800c18a <__swbuf_r+0x8e>
 800c16a:	4b0b      	ldr	r3, [pc, #44]	; (800c198 <__swbuf_r+0x9c>)
 800c16c:	429c      	cmp	r4, r3
 800c16e:	d101      	bne.n	800c174 <__swbuf_r+0x78>
 800c170:	68ac      	ldr	r4, [r5, #8]
 800c172:	e7d0      	b.n	800c116 <__swbuf_r+0x1a>
 800c174:	4b09      	ldr	r3, [pc, #36]	; (800c19c <__swbuf_r+0xa0>)
 800c176:	429c      	cmp	r4, r3
 800c178:	bf08      	it	eq
 800c17a:	68ec      	ldreq	r4, [r5, #12]
 800c17c:	e7cb      	b.n	800c116 <__swbuf_r+0x1a>
 800c17e:	4621      	mov	r1, r4
 800c180:	4628      	mov	r0, r5
 800c182:	f000 f80d 	bl	800c1a0 <__swsetup_r>
 800c186:	2800      	cmp	r0, #0
 800c188:	d0cc      	beq.n	800c124 <__swbuf_r+0x28>
 800c18a:	f04f 37ff 	mov.w	r7, #4294967295
 800c18e:	4638      	mov	r0, r7
 800c190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c192:	bf00      	nop
 800c194:	0800e7a0 	.word	0x0800e7a0
 800c198:	0800e7c0 	.word	0x0800e7c0
 800c19c:	0800e780 	.word	0x0800e780

0800c1a0 <__swsetup_r>:
 800c1a0:	4b32      	ldr	r3, [pc, #200]	; (800c26c <__swsetup_r+0xcc>)
 800c1a2:	b570      	push	{r4, r5, r6, lr}
 800c1a4:	681d      	ldr	r5, [r3, #0]
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	b125      	cbz	r5, 800c1b6 <__swsetup_r+0x16>
 800c1ac:	69ab      	ldr	r3, [r5, #24]
 800c1ae:	b913      	cbnz	r3, 800c1b6 <__swsetup_r+0x16>
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	f000 ff99 	bl	800d0e8 <__sinit>
 800c1b6:	4b2e      	ldr	r3, [pc, #184]	; (800c270 <__swsetup_r+0xd0>)
 800c1b8:	429c      	cmp	r4, r3
 800c1ba:	d10f      	bne.n	800c1dc <__swsetup_r+0x3c>
 800c1bc:	686c      	ldr	r4, [r5, #4]
 800c1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	0715      	lsls	r5, r2, #28
 800c1c6:	d42c      	bmi.n	800c222 <__swsetup_r+0x82>
 800c1c8:	06d0      	lsls	r0, r2, #27
 800c1ca:	d411      	bmi.n	800c1f0 <__swsetup_r+0x50>
 800c1cc:	2209      	movs	r2, #9
 800c1ce:	6032      	str	r2, [r6, #0]
 800c1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1d4:	81a3      	strh	r3, [r4, #12]
 800c1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1da:	e03e      	b.n	800c25a <__swsetup_r+0xba>
 800c1dc:	4b25      	ldr	r3, [pc, #148]	; (800c274 <__swsetup_r+0xd4>)
 800c1de:	429c      	cmp	r4, r3
 800c1e0:	d101      	bne.n	800c1e6 <__swsetup_r+0x46>
 800c1e2:	68ac      	ldr	r4, [r5, #8]
 800c1e4:	e7eb      	b.n	800c1be <__swsetup_r+0x1e>
 800c1e6:	4b24      	ldr	r3, [pc, #144]	; (800c278 <__swsetup_r+0xd8>)
 800c1e8:	429c      	cmp	r4, r3
 800c1ea:	bf08      	it	eq
 800c1ec:	68ec      	ldreq	r4, [r5, #12]
 800c1ee:	e7e6      	b.n	800c1be <__swsetup_r+0x1e>
 800c1f0:	0751      	lsls	r1, r2, #29
 800c1f2:	d512      	bpl.n	800c21a <__swsetup_r+0x7a>
 800c1f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1f6:	b141      	cbz	r1, 800c20a <__swsetup_r+0x6a>
 800c1f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1fc:	4299      	cmp	r1, r3
 800c1fe:	d002      	beq.n	800c206 <__swsetup_r+0x66>
 800c200:	4630      	mov	r0, r6
 800c202:	f001 fb5f 	bl	800d8c4 <_free_r>
 800c206:	2300      	movs	r3, #0
 800c208:	6363      	str	r3, [r4, #52]	; 0x34
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c210:	81a3      	strh	r3, [r4, #12]
 800c212:	2300      	movs	r3, #0
 800c214:	6063      	str	r3, [r4, #4]
 800c216:	6923      	ldr	r3, [r4, #16]
 800c218:	6023      	str	r3, [r4, #0]
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	f043 0308 	orr.w	r3, r3, #8
 800c220:	81a3      	strh	r3, [r4, #12]
 800c222:	6923      	ldr	r3, [r4, #16]
 800c224:	b94b      	cbnz	r3, 800c23a <__swsetup_r+0x9a>
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c22c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c230:	d003      	beq.n	800c23a <__swsetup_r+0x9a>
 800c232:	4621      	mov	r1, r4
 800c234:	4630      	mov	r0, r6
 800c236:	f001 f813 	bl	800d260 <__smakebuf_r>
 800c23a:	89a2      	ldrh	r2, [r4, #12]
 800c23c:	f012 0301 	ands.w	r3, r2, #1
 800c240:	d00c      	beq.n	800c25c <__swsetup_r+0xbc>
 800c242:	2300      	movs	r3, #0
 800c244:	60a3      	str	r3, [r4, #8]
 800c246:	6963      	ldr	r3, [r4, #20]
 800c248:	425b      	negs	r3, r3
 800c24a:	61a3      	str	r3, [r4, #24]
 800c24c:	6923      	ldr	r3, [r4, #16]
 800c24e:	b953      	cbnz	r3, 800c266 <__swsetup_r+0xc6>
 800c250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c254:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c258:	d1ba      	bne.n	800c1d0 <__swsetup_r+0x30>
 800c25a:	bd70      	pop	{r4, r5, r6, pc}
 800c25c:	0792      	lsls	r2, r2, #30
 800c25e:	bf58      	it	pl
 800c260:	6963      	ldrpl	r3, [r4, #20]
 800c262:	60a3      	str	r3, [r4, #8]
 800c264:	e7f2      	b.n	800c24c <__swsetup_r+0xac>
 800c266:	2000      	movs	r0, #0
 800c268:	e7f7      	b.n	800c25a <__swsetup_r+0xba>
 800c26a:	bf00      	nop
 800c26c:	20000084 	.word	0x20000084
 800c270:	0800e7a0 	.word	0x0800e7a0
 800c274:	0800e7c0 	.word	0x0800e7c0
 800c278:	0800e780 	.word	0x0800e780

0800c27c <quorem>:
 800c27c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c280:	6903      	ldr	r3, [r0, #16]
 800c282:	690c      	ldr	r4, [r1, #16]
 800c284:	42a3      	cmp	r3, r4
 800c286:	4680      	mov	r8, r0
 800c288:	f2c0 8082 	blt.w	800c390 <quorem+0x114>
 800c28c:	3c01      	subs	r4, #1
 800c28e:	f101 0714 	add.w	r7, r1, #20
 800c292:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c296:	f100 0614 	add.w	r6, r0, #20
 800c29a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c29e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c2a2:	eb06 030c 	add.w	r3, r6, ip
 800c2a6:	3501      	adds	r5, #1
 800c2a8:	eb07 090c 	add.w	r9, r7, ip
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	fbb0 f5f5 	udiv	r5, r0, r5
 800c2b2:	b395      	cbz	r5, 800c31a <quorem+0x9e>
 800c2b4:	f04f 0a00 	mov.w	sl, #0
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	46b6      	mov	lr, r6
 800c2bc:	46d3      	mov	fp, sl
 800c2be:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2c2:	b293      	uxth	r3, r2
 800c2c4:	fb05 a303 	mla	r3, r5, r3, sl
 800c2c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	ebab 0303 	sub.w	r3, fp, r3
 800c2d2:	0c12      	lsrs	r2, r2, #16
 800c2d4:	f8de b000 	ldr.w	fp, [lr]
 800c2d8:	fb05 a202 	mla	r2, r5, r2, sl
 800c2dc:	fa13 f38b 	uxtah	r3, r3, fp
 800c2e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c2e4:	fa1f fb82 	uxth.w	fp, r2
 800c2e8:	f8de 2000 	ldr.w	r2, [lr]
 800c2ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c2f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2fa:	4581      	cmp	r9, r0
 800c2fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c300:	f84e 3b04 	str.w	r3, [lr], #4
 800c304:	d2db      	bcs.n	800c2be <quorem+0x42>
 800c306:	f856 300c 	ldr.w	r3, [r6, ip]
 800c30a:	b933      	cbnz	r3, 800c31a <quorem+0x9e>
 800c30c:	9b01      	ldr	r3, [sp, #4]
 800c30e:	3b04      	subs	r3, #4
 800c310:	429e      	cmp	r6, r3
 800c312:	461a      	mov	r2, r3
 800c314:	d330      	bcc.n	800c378 <quorem+0xfc>
 800c316:	f8c8 4010 	str.w	r4, [r8, #16]
 800c31a:	4640      	mov	r0, r8
 800c31c:	f001 f9fe 	bl	800d71c <__mcmp>
 800c320:	2800      	cmp	r0, #0
 800c322:	db25      	blt.n	800c370 <quorem+0xf4>
 800c324:	3501      	adds	r5, #1
 800c326:	4630      	mov	r0, r6
 800c328:	f04f 0c00 	mov.w	ip, #0
 800c32c:	f857 2b04 	ldr.w	r2, [r7], #4
 800c330:	f8d0 e000 	ldr.w	lr, [r0]
 800c334:	b293      	uxth	r3, r2
 800c336:	ebac 0303 	sub.w	r3, ip, r3
 800c33a:	0c12      	lsrs	r2, r2, #16
 800c33c:	fa13 f38e 	uxtah	r3, r3, lr
 800c340:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c348:	b29b      	uxth	r3, r3
 800c34a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c34e:	45b9      	cmp	r9, r7
 800c350:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c354:	f840 3b04 	str.w	r3, [r0], #4
 800c358:	d2e8      	bcs.n	800c32c <quorem+0xb0>
 800c35a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c35e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c362:	b92a      	cbnz	r2, 800c370 <quorem+0xf4>
 800c364:	3b04      	subs	r3, #4
 800c366:	429e      	cmp	r6, r3
 800c368:	461a      	mov	r2, r3
 800c36a:	d30b      	bcc.n	800c384 <quorem+0x108>
 800c36c:	f8c8 4010 	str.w	r4, [r8, #16]
 800c370:	4628      	mov	r0, r5
 800c372:	b003      	add	sp, #12
 800c374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c378:	6812      	ldr	r2, [r2, #0]
 800c37a:	3b04      	subs	r3, #4
 800c37c:	2a00      	cmp	r2, #0
 800c37e:	d1ca      	bne.n	800c316 <quorem+0x9a>
 800c380:	3c01      	subs	r4, #1
 800c382:	e7c5      	b.n	800c310 <quorem+0x94>
 800c384:	6812      	ldr	r2, [r2, #0]
 800c386:	3b04      	subs	r3, #4
 800c388:	2a00      	cmp	r2, #0
 800c38a:	d1ef      	bne.n	800c36c <quorem+0xf0>
 800c38c:	3c01      	subs	r4, #1
 800c38e:	e7ea      	b.n	800c366 <quorem+0xea>
 800c390:	2000      	movs	r0, #0
 800c392:	e7ee      	b.n	800c372 <quorem+0xf6>
 800c394:	0000      	movs	r0, r0
	...

0800c398 <_dtoa_r>:
 800c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	ec57 6b10 	vmov	r6, r7, d0
 800c3a0:	b097      	sub	sp, #92	; 0x5c
 800c3a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c3a4:	9106      	str	r1, [sp, #24]
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	920b      	str	r2, [sp, #44]	; 0x2c
 800c3aa:	9312      	str	r3, [sp, #72]	; 0x48
 800c3ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c3b0:	e9cd 6700 	strd	r6, r7, [sp]
 800c3b4:	b93d      	cbnz	r5, 800c3c6 <_dtoa_r+0x2e>
 800c3b6:	2010      	movs	r0, #16
 800c3b8:	f000 ff92 	bl	800d2e0 <malloc>
 800c3bc:	6260      	str	r0, [r4, #36]	; 0x24
 800c3be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c3c2:	6005      	str	r5, [r0, #0]
 800c3c4:	60c5      	str	r5, [r0, #12]
 800c3c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3c8:	6819      	ldr	r1, [r3, #0]
 800c3ca:	b151      	cbz	r1, 800c3e2 <_dtoa_r+0x4a>
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	604a      	str	r2, [r1, #4]
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	4093      	lsls	r3, r2
 800c3d4:	608b      	str	r3, [r1, #8]
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f000 ffbe 	bl	800d358 <_Bfree>
 800c3dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3de:	2200      	movs	r2, #0
 800c3e0:	601a      	str	r2, [r3, #0]
 800c3e2:	1e3b      	subs	r3, r7, #0
 800c3e4:	bfbb      	ittet	lt
 800c3e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c3ea:	9301      	strlt	r3, [sp, #4]
 800c3ec:	2300      	movge	r3, #0
 800c3ee:	2201      	movlt	r2, #1
 800c3f0:	bfac      	ite	ge
 800c3f2:	f8c8 3000 	strge.w	r3, [r8]
 800c3f6:	f8c8 2000 	strlt.w	r2, [r8]
 800c3fa:	4baf      	ldr	r3, [pc, #700]	; (800c6b8 <_dtoa_r+0x320>)
 800c3fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c400:	ea33 0308 	bics.w	r3, r3, r8
 800c404:	d114      	bne.n	800c430 <_dtoa_r+0x98>
 800c406:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c408:	f242 730f 	movw	r3, #9999	; 0x270f
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	9b00      	ldr	r3, [sp, #0]
 800c410:	b923      	cbnz	r3, 800c41c <_dtoa_r+0x84>
 800c412:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c416:	2800      	cmp	r0, #0
 800c418:	f000 8542 	beq.w	800cea0 <_dtoa_r+0xb08>
 800c41c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c41e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c6cc <_dtoa_r+0x334>
 800c422:	2b00      	cmp	r3, #0
 800c424:	f000 8544 	beq.w	800ceb0 <_dtoa_r+0xb18>
 800c428:	f10b 0303 	add.w	r3, fp, #3
 800c42c:	f000 bd3e 	b.w	800ceac <_dtoa_r+0xb14>
 800c430:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c434:	2200      	movs	r2, #0
 800c436:	2300      	movs	r3, #0
 800c438:	4630      	mov	r0, r6
 800c43a:	4639      	mov	r1, r7
 800c43c:	f7f4 fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 800c440:	4681      	mov	r9, r0
 800c442:	b168      	cbz	r0, 800c460 <_dtoa_r+0xc8>
 800c444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c446:	2301      	movs	r3, #1
 800c448:	6013      	str	r3, [r2, #0]
 800c44a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f000 8524 	beq.w	800ce9a <_dtoa_r+0xb02>
 800c452:	4b9a      	ldr	r3, [pc, #616]	; (800c6bc <_dtoa_r+0x324>)
 800c454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c456:	f103 3bff 	add.w	fp, r3, #4294967295
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	f000 bd28 	b.w	800ceb0 <_dtoa_r+0xb18>
 800c460:	aa14      	add	r2, sp, #80	; 0x50
 800c462:	a915      	add	r1, sp, #84	; 0x54
 800c464:	ec47 6b10 	vmov	d0, r6, r7
 800c468:	4620      	mov	r0, r4
 800c46a:	f001 f9ce 	bl	800d80a <__d2b>
 800c46e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c472:	9004      	str	r0, [sp, #16]
 800c474:	2d00      	cmp	r5, #0
 800c476:	d07c      	beq.n	800c572 <_dtoa_r+0x1da>
 800c478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c47c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c480:	46b2      	mov	sl, r6
 800c482:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c48a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c48e:	2200      	movs	r2, #0
 800c490:	4b8b      	ldr	r3, [pc, #556]	; (800c6c0 <_dtoa_r+0x328>)
 800c492:	4650      	mov	r0, sl
 800c494:	4659      	mov	r1, fp
 800c496:	f7f3 fef7 	bl	8000288 <__aeabi_dsub>
 800c49a:	a381      	add	r3, pc, #516	; (adr r3, 800c6a0 <_dtoa_r+0x308>)
 800c49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a0:	f7f4 f8aa 	bl	80005f8 <__aeabi_dmul>
 800c4a4:	a380      	add	r3, pc, #512	; (adr r3, 800c6a8 <_dtoa_r+0x310>)
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	f7f3 feef 	bl	800028c <__adddf3>
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	460f      	mov	r7, r1
 800c4b4:	f7f4 f836 	bl	8000524 <__aeabi_i2d>
 800c4b8:	a37d      	add	r3, pc, #500	; (adr r3, 800c6b0 <_dtoa_r+0x318>)
 800c4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4be:	f7f4 f89b 	bl	80005f8 <__aeabi_dmul>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	f7f3 fedf 	bl	800028c <__adddf3>
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	460f      	mov	r7, r1
 800c4d2:	f7f4 fb41 	bl	8000b58 <__aeabi_d2iz>
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	4682      	mov	sl, r0
 800c4da:	2300      	movs	r3, #0
 800c4dc:	4630      	mov	r0, r6
 800c4de:	4639      	mov	r1, r7
 800c4e0:	f7f4 fafc 	bl	8000adc <__aeabi_dcmplt>
 800c4e4:	b148      	cbz	r0, 800c4fa <_dtoa_r+0x162>
 800c4e6:	4650      	mov	r0, sl
 800c4e8:	f7f4 f81c 	bl	8000524 <__aeabi_i2d>
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	463b      	mov	r3, r7
 800c4f0:	f7f4 faea 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4f4:	b908      	cbnz	r0, 800c4fa <_dtoa_r+0x162>
 800c4f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4fa:	f1ba 0f16 	cmp.w	sl, #22
 800c4fe:	d859      	bhi.n	800c5b4 <_dtoa_r+0x21c>
 800c500:	4970      	ldr	r1, [pc, #448]	; (800c6c4 <_dtoa_r+0x32c>)
 800c502:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c50a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c50e:	f7f4 fb03 	bl	8000b18 <__aeabi_dcmpgt>
 800c512:	2800      	cmp	r0, #0
 800c514:	d050      	beq.n	800c5b8 <_dtoa_r+0x220>
 800c516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c51a:	2300      	movs	r3, #0
 800c51c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c51e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c520:	1b5d      	subs	r5, r3, r5
 800c522:	f1b5 0801 	subs.w	r8, r5, #1
 800c526:	bf49      	itett	mi
 800c528:	f1c5 0301 	rsbmi	r3, r5, #1
 800c52c:	2300      	movpl	r3, #0
 800c52e:	9305      	strmi	r3, [sp, #20]
 800c530:	f04f 0800 	movmi.w	r8, #0
 800c534:	bf58      	it	pl
 800c536:	9305      	strpl	r3, [sp, #20]
 800c538:	f1ba 0f00 	cmp.w	sl, #0
 800c53c:	db3e      	blt.n	800c5bc <_dtoa_r+0x224>
 800c53e:	2300      	movs	r3, #0
 800c540:	44d0      	add	r8, sl
 800c542:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c546:	9307      	str	r3, [sp, #28]
 800c548:	9b06      	ldr	r3, [sp, #24]
 800c54a:	2b09      	cmp	r3, #9
 800c54c:	f200 8090 	bhi.w	800c670 <_dtoa_r+0x2d8>
 800c550:	2b05      	cmp	r3, #5
 800c552:	bfc4      	itt	gt
 800c554:	3b04      	subgt	r3, #4
 800c556:	9306      	strgt	r3, [sp, #24]
 800c558:	9b06      	ldr	r3, [sp, #24]
 800c55a:	f1a3 0302 	sub.w	r3, r3, #2
 800c55e:	bfcc      	ite	gt
 800c560:	2500      	movgt	r5, #0
 800c562:	2501      	movle	r5, #1
 800c564:	2b03      	cmp	r3, #3
 800c566:	f200 808f 	bhi.w	800c688 <_dtoa_r+0x2f0>
 800c56a:	e8df f003 	tbb	[pc, r3]
 800c56e:	7f7d      	.short	0x7f7d
 800c570:	7131      	.short	0x7131
 800c572:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c576:	441d      	add	r5, r3
 800c578:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c57c:	2820      	cmp	r0, #32
 800c57e:	dd13      	ble.n	800c5a8 <_dtoa_r+0x210>
 800c580:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c584:	9b00      	ldr	r3, [sp, #0]
 800c586:	fa08 f800 	lsl.w	r8, r8, r0
 800c58a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c58e:	fa23 f000 	lsr.w	r0, r3, r0
 800c592:	ea48 0000 	orr.w	r0, r8, r0
 800c596:	f7f3 ffb5 	bl	8000504 <__aeabi_ui2d>
 800c59a:	2301      	movs	r3, #1
 800c59c:	4682      	mov	sl, r0
 800c59e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c5a2:	3d01      	subs	r5, #1
 800c5a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800c5a6:	e772      	b.n	800c48e <_dtoa_r+0xf6>
 800c5a8:	9b00      	ldr	r3, [sp, #0]
 800c5aa:	f1c0 0020 	rsb	r0, r0, #32
 800c5ae:	fa03 f000 	lsl.w	r0, r3, r0
 800c5b2:	e7f0      	b.n	800c596 <_dtoa_r+0x1fe>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e7b1      	b.n	800c51c <_dtoa_r+0x184>
 800c5b8:	900f      	str	r0, [sp, #60]	; 0x3c
 800c5ba:	e7b0      	b.n	800c51e <_dtoa_r+0x186>
 800c5bc:	9b05      	ldr	r3, [sp, #20]
 800c5be:	eba3 030a 	sub.w	r3, r3, sl
 800c5c2:	9305      	str	r3, [sp, #20]
 800c5c4:	f1ca 0300 	rsb	r3, sl, #0
 800c5c8:	9307      	str	r3, [sp, #28]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	930e      	str	r3, [sp, #56]	; 0x38
 800c5ce:	e7bb      	b.n	800c548 <_dtoa_r+0x1b0>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c5d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	dd59      	ble.n	800c68e <_dtoa_r+0x2f6>
 800c5da:	9302      	str	r3, [sp, #8]
 800c5dc:	4699      	mov	r9, r3
 800c5de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	6072      	str	r2, [r6, #4]
 800c5e4:	2204      	movs	r2, #4
 800c5e6:	f102 0014 	add.w	r0, r2, #20
 800c5ea:	4298      	cmp	r0, r3
 800c5ec:	6871      	ldr	r1, [r6, #4]
 800c5ee:	d953      	bls.n	800c698 <_dtoa_r+0x300>
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f000 fe7d 	bl	800d2f0 <_Balloc>
 800c5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5f8:	6030      	str	r0, [r6, #0]
 800c5fa:	f1b9 0f0e 	cmp.w	r9, #14
 800c5fe:	f8d3 b000 	ldr.w	fp, [r3]
 800c602:	f200 80e6 	bhi.w	800c7d2 <_dtoa_r+0x43a>
 800c606:	2d00      	cmp	r5, #0
 800c608:	f000 80e3 	beq.w	800c7d2 <_dtoa_r+0x43a>
 800c60c:	ed9d 7b00 	vldr	d7, [sp]
 800c610:	f1ba 0f00 	cmp.w	sl, #0
 800c614:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c618:	dd74      	ble.n	800c704 <_dtoa_r+0x36c>
 800c61a:	4a2a      	ldr	r2, [pc, #168]	; (800c6c4 <_dtoa_r+0x32c>)
 800c61c:	f00a 030f 	and.w	r3, sl, #15
 800c620:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c624:	ed93 7b00 	vldr	d7, [r3]
 800c628:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c62c:	06f0      	lsls	r0, r6, #27
 800c62e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c632:	d565      	bpl.n	800c700 <_dtoa_r+0x368>
 800c634:	4b24      	ldr	r3, [pc, #144]	; (800c6c8 <_dtoa_r+0x330>)
 800c636:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c63a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c63e:	f7f4 f905 	bl	800084c <__aeabi_ddiv>
 800c642:	e9cd 0100 	strd	r0, r1, [sp]
 800c646:	f006 060f 	and.w	r6, r6, #15
 800c64a:	2503      	movs	r5, #3
 800c64c:	4f1e      	ldr	r7, [pc, #120]	; (800c6c8 <_dtoa_r+0x330>)
 800c64e:	e04c      	b.n	800c6ea <_dtoa_r+0x352>
 800c650:	2301      	movs	r3, #1
 800c652:	930a      	str	r3, [sp, #40]	; 0x28
 800c654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c656:	4453      	add	r3, sl
 800c658:	f103 0901 	add.w	r9, r3, #1
 800c65c:	9302      	str	r3, [sp, #8]
 800c65e:	464b      	mov	r3, r9
 800c660:	2b01      	cmp	r3, #1
 800c662:	bfb8      	it	lt
 800c664:	2301      	movlt	r3, #1
 800c666:	e7ba      	b.n	800c5de <_dtoa_r+0x246>
 800c668:	2300      	movs	r3, #0
 800c66a:	e7b2      	b.n	800c5d2 <_dtoa_r+0x23a>
 800c66c:	2300      	movs	r3, #0
 800c66e:	e7f0      	b.n	800c652 <_dtoa_r+0x2ba>
 800c670:	2501      	movs	r5, #1
 800c672:	2300      	movs	r3, #0
 800c674:	9306      	str	r3, [sp, #24]
 800c676:	950a      	str	r5, [sp, #40]	; 0x28
 800c678:	f04f 33ff 	mov.w	r3, #4294967295
 800c67c:	9302      	str	r3, [sp, #8]
 800c67e:	4699      	mov	r9, r3
 800c680:	2200      	movs	r2, #0
 800c682:	2312      	movs	r3, #18
 800c684:	920b      	str	r2, [sp, #44]	; 0x2c
 800c686:	e7aa      	b.n	800c5de <_dtoa_r+0x246>
 800c688:	2301      	movs	r3, #1
 800c68a:	930a      	str	r3, [sp, #40]	; 0x28
 800c68c:	e7f4      	b.n	800c678 <_dtoa_r+0x2e0>
 800c68e:	2301      	movs	r3, #1
 800c690:	9302      	str	r3, [sp, #8]
 800c692:	4699      	mov	r9, r3
 800c694:	461a      	mov	r2, r3
 800c696:	e7f5      	b.n	800c684 <_dtoa_r+0x2ec>
 800c698:	3101      	adds	r1, #1
 800c69a:	6071      	str	r1, [r6, #4]
 800c69c:	0052      	lsls	r2, r2, #1
 800c69e:	e7a2      	b.n	800c5e6 <_dtoa_r+0x24e>
 800c6a0:	636f4361 	.word	0x636f4361
 800c6a4:	3fd287a7 	.word	0x3fd287a7
 800c6a8:	8b60c8b3 	.word	0x8b60c8b3
 800c6ac:	3fc68a28 	.word	0x3fc68a28
 800c6b0:	509f79fb 	.word	0x509f79fb
 800c6b4:	3fd34413 	.word	0x3fd34413
 800c6b8:	7ff00000 	.word	0x7ff00000
 800c6bc:	0800e74d 	.word	0x0800e74d
 800c6c0:	3ff80000 	.word	0x3ff80000
 800c6c4:	0800e808 	.word	0x0800e808
 800c6c8:	0800e7e0 	.word	0x0800e7e0
 800c6cc:	0800e779 	.word	0x0800e779
 800c6d0:	07f1      	lsls	r1, r6, #31
 800c6d2:	d508      	bpl.n	800c6e6 <_dtoa_r+0x34e>
 800c6d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c6d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6dc:	f7f3 ff8c 	bl	80005f8 <__aeabi_dmul>
 800c6e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c6e4:	3501      	adds	r5, #1
 800c6e6:	1076      	asrs	r6, r6, #1
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	2e00      	cmp	r6, #0
 800c6ec:	d1f0      	bne.n	800c6d0 <_dtoa_r+0x338>
 800c6ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c6f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6f6:	f7f4 f8a9 	bl	800084c <__aeabi_ddiv>
 800c6fa:	e9cd 0100 	strd	r0, r1, [sp]
 800c6fe:	e01a      	b.n	800c736 <_dtoa_r+0x39e>
 800c700:	2502      	movs	r5, #2
 800c702:	e7a3      	b.n	800c64c <_dtoa_r+0x2b4>
 800c704:	f000 80a0 	beq.w	800c848 <_dtoa_r+0x4b0>
 800c708:	f1ca 0600 	rsb	r6, sl, #0
 800c70c:	4b9f      	ldr	r3, [pc, #636]	; (800c98c <_dtoa_r+0x5f4>)
 800c70e:	4fa0      	ldr	r7, [pc, #640]	; (800c990 <_dtoa_r+0x5f8>)
 800c710:	f006 020f 	and.w	r2, r6, #15
 800c714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c720:	f7f3 ff6a 	bl	80005f8 <__aeabi_dmul>
 800c724:	e9cd 0100 	strd	r0, r1, [sp]
 800c728:	1136      	asrs	r6, r6, #4
 800c72a:	2300      	movs	r3, #0
 800c72c:	2502      	movs	r5, #2
 800c72e:	2e00      	cmp	r6, #0
 800c730:	d17f      	bne.n	800c832 <_dtoa_r+0x49a>
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1e1      	bne.n	800c6fa <_dtoa_r+0x362>
 800c736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f000 8087 	beq.w	800c84c <_dtoa_r+0x4b4>
 800c73e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c742:	2200      	movs	r2, #0
 800c744:	4b93      	ldr	r3, [pc, #588]	; (800c994 <_dtoa_r+0x5fc>)
 800c746:	4630      	mov	r0, r6
 800c748:	4639      	mov	r1, r7
 800c74a:	f7f4 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d07c      	beq.n	800c84c <_dtoa_r+0x4b4>
 800c752:	f1b9 0f00 	cmp.w	r9, #0
 800c756:	d079      	beq.n	800c84c <_dtoa_r+0x4b4>
 800c758:	9b02      	ldr	r3, [sp, #8]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	dd35      	ble.n	800c7ca <_dtoa_r+0x432>
 800c75e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c762:	9308      	str	r3, [sp, #32]
 800c764:	4639      	mov	r1, r7
 800c766:	2200      	movs	r2, #0
 800c768:	4b8b      	ldr	r3, [pc, #556]	; (800c998 <_dtoa_r+0x600>)
 800c76a:	4630      	mov	r0, r6
 800c76c:	f7f3 ff44 	bl	80005f8 <__aeabi_dmul>
 800c770:	e9cd 0100 	strd	r0, r1, [sp]
 800c774:	9f02      	ldr	r7, [sp, #8]
 800c776:	3501      	adds	r5, #1
 800c778:	4628      	mov	r0, r5
 800c77a:	f7f3 fed3 	bl	8000524 <__aeabi_i2d>
 800c77e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c782:	f7f3 ff39 	bl	80005f8 <__aeabi_dmul>
 800c786:	2200      	movs	r2, #0
 800c788:	4b84      	ldr	r3, [pc, #528]	; (800c99c <_dtoa_r+0x604>)
 800c78a:	f7f3 fd7f 	bl	800028c <__adddf3>
 800c78e:	4605      	mov	r5, r0
 800c790:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c794:	2f00      	cmp	r7, #0
 800c796:	d15d      	bne.n	800c854 <_dtoa_r+0x4bc>
 800c798:	2200      	movs	r2, #0
 800c79a:	4b81      	ldr	r3, [pc, #516]	; (800c9a0 <_dtoa_r+0x608>)
 800c79c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7a0:	f7f3 fd72 	bl	8000288 <__aeabi_dsub>
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	4633      	mov	r3, r6
 800c7a8:	e9cd 0100 	strd	r0, r1, [sp]
 800c7ac:	f7f4 f9b4 	bl	8000b18 <__aeabi_dcmpgt>
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	f040 8288 	bne.w	800ccc6 <_dtoa_r+0x92e>
 800c7b6:	462a      	mov	r2, r5
 800c7b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c7bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7c0:	f7f4 f98c 	bl	8000adc <__aeabi_dcmplt>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	f040 827c 	bne.w	800ccc2 <_dtoa_r+0x92a>
 800c7ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c7ce:	e9cd 2300 	strd	r2, r3, [sp]
 800c7d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f2c0 8150 	blt.w	800ca7a <_dtoa_r+0x6e2>
 800c7da:	f1ba 0f0e 	cmp.w	sl, #14
 800c7de:	f300 814c 	bgt.w	800ca7a <_dtoa_r+0x6e2>
 800c7e2:	4b6a      	ldr	r3, [pc, #424]	; (800c98c <_dtoa_r+0x5f4>)
 800c7e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c7e8:	ed93 7b00 	vldr	d7, [r3]
 800c7ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c7f4:	f280 80d8 	bge.w	800c9a8 <_dtoa_r+0x610>
 800c7f8:	f1b9 0f00 	cmp.w	r9, #0
 800c7fc:	f300 80d4 	bgt.w	800c9a8 <_dtoa_r+0x610>
 800c800:	f040 825e 	bne.w	800ccc0 <_dtoa_r+0x928>
 800c804:	2200      	movs	r2, #0
 800c806:	4b66      	ldr	r3, [pc, #408]	; (800c9a0 <_dtoa_r+0x608>)
 800c808:	ec51 0b17 	vmov	r0, r1, d7
 800c80c:	f7f3 fef4 	bl	80005f8 <__aeabi_dmul>
 800c810:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c814:	f7f4 f976 	bl	8000b04 <__aeabi_dcmpge>
 800c818:	464f      	mov	r7, r9
 800c81a:	464e      	mov	r6, r9
 800c81c:	2800      	cmp	r0, #0
 800c81e:	f040 8234 	bne.w	800cc8a <_dtoa_r+0x8f2>
 800c822:	2331      	movs	r3, #49	; 0x31
 800c824:	f10b 0501 	add.w	r5, fp, #1
 800c828:	f88b 3000 	strb.w	r3, [fp]
 800c82c:	f10a 0a01 	add.w	sl, sl, #1
 800c830:	e22f      	b.n	800cc92 <_dtoa_r+0x8fa>
 800c832:	07f2      	lsls	r2, r6, #31
 800c834:	d505      	bpl.n	800c842 <_dtoa_r+0x4aa>
 800c836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c83a:	f7f3 fedd 	bl	80005f8 <__aeabi_dmul>
 800c83e:	3501      	adds	r5, #1
 800c840:	2301      	movs	r3, #1
 800c842:	1076      	asrs	r6, r6, #1
 800c844:	3708      	adds	r7, #8
 800c846:	e772      	b.n	800c72e <_dtoa_r+0x396>
 800c848:	2502      	movs	r5, #2
 800c84a:	e774      	b.n	800c736 <_dtoa_r+0x39e>
 800c84c:	f8cd a020 	str.w	sl, [sp, #32]
 800c850:	464f      	mov	r7, r9
 800c852:	e791      	b.n	800c778 <_dtoa_r+0x3e0>
 800c854:	4b4d      	ldr	r3, [pc, #308]	; (800c98c <_dtoa_r+0x5f4>)
 800c856:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c85a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c860:	2b00      	cmp	r3, #0
 800c862:	d047      	beq.n	800c8f4 <_dtoa_r+0x55c>
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	2000      	movs	r0, #0
 800c86a:	494e      	ldr	r1, [pc, #312]	; (800c9a4 <_dtoa_r+0x60c>)
 800c86c:	f7f3 ffee 	bl	800084c <__aeabi_ddiv>
 800c870:	462a      	mov	r2, r5
 800c872:	4633      	mov	r3, r6
 800c874:	f7f3 fd08 	bl	8000288 <__aeabi_dsub>
 800c878:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c87c:	465d      	mov	r5, fp
 800c87e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c882:	f7f4 f969 	bl	8000b58 <__aeabi_d2iz>
 800c886:	4606      	mov	r6, r0
 800c888:	f7f3 fe4c 	bl	8000524 <__aeabi_i2d>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c894:	f7f3 fcf8 	bl	8000288 <__aeabi_dsub>
 800c898:	3630      	adds	r6, #48	; 0x30
 800c89a:	f805 6b01 	strb.w	r6, [r5], #1
 800c89e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c8a2:	e9cd 0100 	strd	r0, r1, [sp]
 800c8a6:	f7f4 f919 	bl	8000adc <__aeabi_dcmplt>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d163      	bne.n	800c976 <_dtoa_r+0x5de>
 800c8ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	4937      	ldr	r1, [pc, #220]	; (800c994 <_dtoa_r+0x5fc>)
 800c8b6:	f7f3 fce7 	bl	8000288 <__aeabi_dsub>
 800c8ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c8be:	f7f4 f90d 	bl	8000adc <__aeabi_dcmplt>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	f040 80b7 	bne.w	800ca36 <_dtoa_r+0x69e>
 800c8c8:	eba5 030b 	sub.w	r3, r5, fp
 800c8cc:	429f      	cmp	r7, r3
 800c8ce:	f77f af7c 	ble.w	800c7ca <_dtoa_r+0x432>
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	4b30      	ldr	r3, [pc, #192]	; (800c998 <_dtoa_r+0x600>)
 800c8d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c8da:	f7f3 fe8d 	bl	80005f8 <__aeabi_dmul>
 800c8de:	2200      	movs	r2, #0
 800c8e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c8e4:	4b2c      	ldr	r3, [pc, #176]	; (800c998 <_dtoa_r+0x600>)
 800c8e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8ea:	f7f3 fe85 	bl	80005f8 <__aeabi_dmul>
 800c8ee:	e9cd 0100 	strd	r0, r1, [sp]
 800c8f2:	e7c4      	b.n	800c87e <_dtoa_r+0x4e6>
 800c8f4:	462a      	mov	r2, r5
 800c8f6:	4633      	mov	r3, r6
 800c8f8:	f7f3 fe7e 	bl	80005f8 <__aeabi_dmul>
 800c8fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c900:	eb0b 0507 	add.w	r5, fp, r7
 800c904:	465e      	mov	r6, fp
 800c906:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c90a:	f7f4 f925 	bl	8000b58 <__aeabi_d2iz>
 800c90e:	4607      	mov	r7, r0
 800c910:	f7f3 fe08 	bl	8000524 <__aeabi_i2d>
 800c914:	3730      	adds	r7, #48	; 0x30
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c91e:	f7f3 fcb3 	bl	8000288 <__aeabi_dsub>
 800c922:	f806 7b01 	strb.w	r7, [r6], #1
 800c926:	42ae      	cmp	r6, r5
 800c928:	e9cd 0100 	strd	r0, r1, [sp]
 800c92c:	f04f 0200 	mov.w	r2, #0
 800c930:	d126      	bne.n	800c980 <_dtoa_r+0x5e8>
 800c932:	4b1c      	ldr	r3, [pc, #112]	; (800c9a4 <_dtoa_r+0x60c>)
 800c934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c938:	f7f3 fca8 	bl	800028c <__adddf3>
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c944:	f7f4 f8e8 	bl	8000b18 <__aeabi_dcmpgt>
 800c948:	2800      	cmp	r0, #0
 800c94a:	d174      	bne.n	800ca36 <_dtoa_r+0x69e>
 800c94c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c950:	2000      	movs	r0, #0
 800c952:	4914      	ldr	r1, [pc, #80]	; (800c9a4 <_dtoa_r+0x60c>)
 800c954:	f7f3 fc98 	bl	8000288 <__aeabi_dsub>
 800c958:	4602      	mov	r2, r0
 800c95a:	460b      	mov	r3, r1
 800c95c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c960:	f7f4 f8bc 	bl	8000adc <__aeabi_dcmplt>
 800c964:	2800      	cmp	r0, #0
 800c966:	f43f af30 	beq.w	800c7ca <_dtoa_r+0x432>
 800c96a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c96e:	2b30      	cmp	r3, #48	; 0x30
 800c970:	f105 32ff 	add.w	r2, r5, #4294967295
 800c974:	d002      	beq.n	800c97c <_dtoa_r+0x5e4>
 800c976:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c97a:	e04a      	b.n	800ca12 <_dtoa_r+0x67a>
 800c97c:	4615      	mov	r5, r2
 800c97e:	e7f4      	b.n	800c96a <_dtoa_r+0x5d2>
 800c980:	4b05      	ldr	r3, [pc, #20]	; (800c998 <_dtoa_r+0x600>)
 800c982:	f7f3 fe39 	bl	80005f8 <__aeabi_dmul>
 800c986:	e9cd 0100 	strd	r0, r1, [sp]
 800c98a:	e7bc      	b.n	800c906 <_dtoa_r+0x56e>
 800c98c:	0800e808 	.word	0x0800e808
 800c990:	0800e7e0 	.word	0x0800e7e0
 800c994:	3ff00000 	.word	0x3ff00000
 800c998:	40240000 	.word	0x40240000
 800c99c:	401c0000 	.word	0x401c0000
 800c9a0:	40140000 	.word	0x40140000
 800c9a4:	3fe00000 	.word	0x3fe00000
 800c9a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c9ac:	465d      	mov	r5, fp
 800c9ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	f7f3 ff49 	bl	800084c <__aeabi_ddiv>
 800c9ba:	f7f4 f8cd 	bl	8000b58 <__aeabi_d2iz>
 800c9be:	4680      	mov	r8, r0
 800c9c0:	f7f3 fdb0 	bl	8000524 <__aeabi_i2d>
 800c9c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9c8:	f7f3 fe16 	bl	80005f8 <__aeabi_dmul>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c9d8:	f7f3 fc56 	bl	8000288 <__aeabi_dsub>
 800c9dc:	f805 6b01 	strb.w	r6, [r5], #1
 800c9e0:	eba5 060b 	sub.w	r6, r5, fp
 800c9e4:	45b1      	cmp	r9, r6
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	d139      	bne.n	800ca60 <_dtoa_r+0x6c8>
 800c9ec:	f7f3 fc4e 	bl	800028c <__adddf3>
 800c9f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9f4:	4606      	mov	r6, r0
 800c9f6:	460f      	mov	r7, r1
 800c9f8:	f7f4 f88e 	bl	8000b18 <__aeabi_dcmpgt>
 800c9fc:	b9c8      	cbnz	r0, 800ca32 <_dtoa_r+0x69a>
 800c9fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca02:	4630      	mov	r0, r6
 800ca04:	4639      	mov	r1, r7
 800ca06:	f7f4 f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca0a:	b110      	cbz	r0, 800ca12 <_dtoa_r+0x67a>
 800ca0c:	f018 0f01 	tst.w	r8, #1
 800ca10:	d10f      	bne.n	800ca32 <_dtoa_r+0x69a>
 800ca12:	9904      	ldr	r1, [sp, #16]
 800ca14:	4620      	mov	r0, r4
 800ca16:	f000 fc9f 	bl	800d358 <_Bfree>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca1e:	702b      	strb	r3, [r5, #0]
 800ca20:	f10a 0301 	add.w	r3, sl, #1
 800ca24:	6013      	str	r3, [r2, #0]
 800ca26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f000 8241 	beq.w	800ceb0 <_dtoa_r+0xb18>
 800ca2e:	601d      	str	r5, [r3, #0]
 800ca30:	e23e      	b.n	800ceb0 <_dtoa_r+0xb18>
 800ca32:	f8cd a020 	str.w	sl, [sp, #32]
 800ca36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ca3a:	2a39      	cmp	r2, #57	; 0x39
 800ca3c:	f105 33ff 	add.w	r3, r5, #4294967295
 800ca40:	d108      	bne.n	800ca54 <_dtoa_r+0x6bc>
 800ca42:	459b      	cmp	fp, r3
 800ca44:	d10a      	bne.n	800ca5c <_dtoa_r+0x6c4>
 800ca46:	9b08      	ldr	r3, [sp, #32]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	9308      	str	r3, [sp, #32]
 800ca4c:	2330      	movs	r3, #48	; 0x30
 800ca4e:	f88b 3000 	strb.w	r3, [fp]
 800ca52:	465b      	mov	r3, fp
 800ca54:	781a      	ldrb	r2, [r3, #0]
 800ca56:	3201      	adds	r2, #1
 800ca58:	701a      	strb	r2, [r3, #0]
 800ca5a:	e78c      	b.n	800c976 <_dtoa_r+0x5de>
 800ca5c:	461d      	mov	r5, r3
 800ca5e:	e7ea      	b.n	800ca36 <_dtoa_r+0x69e>
 800ca60:	2200      	movs	r2, #0
 800ca62:	4b9b      	ldr	r3, [pc, #620]	; (800ccd0 <_dtoa_r+0x938>)
 800ca64:	f7f3 fdc8 	bl	80005f8 <__aeabi_dmul>
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	460f      	mov	r7, r1
 800ca70:	f7f4 f82a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	d09a      	beq.n	800c9ae <_dtoa_r+0x616>
 800ca78:	e7cb      	b.n	800ca12 <_dtoa_r+0x67a>
 800ca7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca7c:	2a00      	cmp	r2, #0
 800ca7e:	f000 808b 	beq.w	800cb98 <_dtoa_r+0x800>
 800ca82:	9a06      	ldr	r2, [sp, #24]
 800ca84:	2a01      	cmp	r2, #1
 800ca86:	dc6e      	bgt.n	800cb66 <_dtoa_r+0x7ce>
 800ca88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca8a:	2a00      	cmp	r2, #0
 800ca8c:	d067      	beq.n	800cb5e <_dtoa_r+0x7c6>
 800ca8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca92:	9f07      	ldr	r7, [sp, #28]
 800ca94:	9d05      	ldr	r5, [sp, #20]
 800ca96:	9a05      	ldr	r2, [sp, #20]
 800ca98:	2101      	movs	r1, #1
 800ca9a:	441a      	add	r2, r3
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	9205      	str	r2, [sp, #20]
 800caa0:	4498      	add	r8, r3
 800caa2:	f000 fcf9 	bl	800d498 <__i2b>
 800caa6:	4606      	mov	r6, r0
 800caa8:	2d00      	cmp	r5, #0
 800caaa:	dd0c      	ble.n	800cac6 <_dtoa_r+0x72e>
 800caac:	f1b8 0f00 	cmp.w	r8, #0
 800cab0:	dd09      	ble.n	800cac6 <_dtoa_r+0x72e>
 800cab2:	4545      	cmp	r5, r8
 800cab4:	9a05      	ldr	r2, [sp, #20]
 800cab6:	462b      	mov	r3, r5
 800cab8:	bfa8      	it	ge
 800caba:	4643      	movge	r3, r8
 800cabc:	1ad2      	subs	r2, r2, r3
 800cabe:	9205      	str	r2, [sp, #20]
 800cac0:	1aed      	subs	r5, r5, r3
 800cac2:	eba8 0803 	sub.w	r8, r8, r3
 800cac6:	9b07      	ldr	r3, [sp, #28]
 800cac8:	b1eb      	cbz	r3, 800cb06 <_dtoa_r+0x76e>
 800caca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d067      	beq.n	800cba0 <_dtoa_r+0x808>
 800cad0:	b18f      	cbz	r7, 800caf6 <_dtoa_r+0x75e>
 800cad2:	4631      	mov	r1, r6
 800cad4:	463a      	mov	r2, r7
 800cad6:	4620      	mov	r0, r4
 800cad8:	f000 fd7e 	bl	800d5d8 <__pow5mult>
 800cadc:	9a04      	ldr	r2, [sp, #16]
 800cade:	4601      	mov	r1, r0
 800cae0:	4606      	mov	r6, r0
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 fce1 	bl	800d4aa <__multiply>
 800cae8:	9904      	ldr	r1, [sp, #16]
 800caea:	9008      	str	r0, [sp, #32]
 800caec:	4620      	mov	r0, r4
 800caee:	f000 fc33 	bl	800d358 <_Bfree>
 800caf2:	9b08      	ldr	r3, [sp, #32]
 800caf4:	9304      	str	r3, [sp, #16]
 800caf6:	9b07      	ldr	r3, [sp, #28]
 800caf8:	1bda      	subs	r2, r3, r7
 800cafa:	d004      	beq.n	800cb06 <_dtoa_r+0x76e>
 800cafc:	9904      	ldr	r1, [sp, #16]
 800cafe:	4620      	mov	r0, r4
 800cb00:	f000 fd6a 	bl	800d5d8 <__pow5mult>
 800cb04:	9004      	str	r0, [sp, #16]
 800cb06:	2101      	movs	r1, #1
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f000 fcc5 	bl	800d498 <__i2b>
 800cb0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb10:	4607      	mov	r7, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f000 81d0 	beq.w	800ceb8 <_dtoa_r+0xb20>
 800cb18:	461a      	mov	r2, r3
 800cb1a:	4601      	mov	r1, r0
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f000 fd5b 	bl	800d5d8 <__pow5mult>
 800cb22:	9b06      	ldr	r3, [sp, #24]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	4607      	mov	r7, r0
 800cb28:	dc40      	bgt.n	800cbac <_dtoa_r+0x814>
 800cb2a:	9b00      	ldr	r3, [sp, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d139      	bne.n	800cba4 <_dtoa_r+0x80c>
 800cb30:	9b01      	ldr	r3, [sp, #4]
 800cb32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d136      	bne.n	800cba8 <_dtoa_r+0x810>
 800cb3a:	9b01      	ldr	r3, [sp, #4]
 800cb3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb40:	0d1b      	lsrs	r3, r3, #20
 800cb42:	051b      	lsls	r3, r3, #20
 800cb44:	b12b      	cbz	r3, 800cb52 <_dtoa_r+0x7ba>
 800cb46:	9b05      	ldr	r3, [sp, #20]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	9305      	str	r3, [sp, #20]
 800cb4c:	f108 0801 	add.w	r8, r8, #1
 800cb50:	2301      	movs	r3, #1
 800cb52:	9307      	str	r3, [sp, #28]
 800cb54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d12a      	bne.n	800cbb0 <_dtoa_r+0x818>
 800cb5a:	2001      	movs	r0, #1
 800cb5c:	e030      	b.n	800cbc0 <_dtoa_r+0x828>
 800cb5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb64:	e795      	b.n	800ca92 <_dtoa_r+0x6fa>
 800cb66:	9b07      	ldr	r3, [sp, #28]
 800cb68:	f109 37ff 	add.w	r7, r9, #4294967295
 800cb6c:	42bb      	cmp	r3, r7
 800cb6e:	bfbf      	itttt	lt
 800cb70:	9b07      	ldrlt	r3, [sp, #28]
 800cb72:	9707      	strlt	r7, [sp, #28]
 800cb74:	1afa      	sublt	r2, r7, r3
 800cb76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cb78:	bfbb      	ittet	lt
 800cb7a:	189b      	addlt	r3, r3, r2
 800cb7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cb7e:	1bdf      	subge	r7, r3, r7
 800cb80:	2700      	movlt	r7, #0
 800cb82:	f1b9 0f00 	cmp.w	r9, #0
 800cb86:	bfb5      	itete	lt
 800cb88:	9b05      	ldrlt	r3, [sp, #20]
 800cb8a:	9d05      	ldrge	r5, [sp, #20]
 800cb8c:	eba3 0509 	sublt.w	r5, r3, r9
 800cb90:	464b      	movge	r3, r9
 800cb92:	bfb8      	it	lt
 800cb94:	2300      	movlt	r3, #0
 800cb96:	e77e      	b.n	800ca96 <_dtoa_r+0x6fe>
 800cb98:	9f07      	ldr	r7, [sp, #28]
 800cb9a:	9d05      	ldr	r5, [sp, #20]
 800cb9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cb9e:	e783      	b.n	800caa8 <_dtoa_r+0x710>
 800cba0:	9a07      	ldr	r2, [sp, #28]
 800cba2:	e7ab      	b.n	800cafc <_dtoa_r+0x764>
 800cba4:	2300      	movs	r3, #0
 800cba6:	e7d4      	b.n	800cb52 <_dtoa_r+0x7ba>
 800cba8:	9b00      	ldr	r3, [sp, #0]
 800cbaa:	e7d2      	b.n	800cb52 <_dtoa_r+0x7ba>
 800cbac:	2300      	movs	r3, #0
 800cbae:	9307      	str	r3, [sp, #28]
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cbb6:	6918      	ldr	r0, [r3, #16]
 800cbb8:	f000 fc20 	bl	800d3fc <__hi0bits>
 800cbbc:	f1c0 0020 	rsb	r0, r0, #32
 800cbc0:	4440      	add	r0, r8
 800cbc2:	f010 001f 	ands.w	r0, r0, #31
 800cbc6:	d047      	beq.n	800cc58 <_dtoa_r+0x8c0>
 800cbc8:	f1c0 0320 	rsb	r3, r0, #32
 800cbcc:	2b04      	cmp	r3, #4
 800cbce:	dd3b      	ble.n	800cc48 <_dtoa_r+0x8b0>
 800cbd0:	9b05      	ldr	r3, [sp, #20]
 800cbd2:	f1c0 001c 	rsb	r0, r0, #28
 800cbd6:	4403      	add	r3, r0
 800cbd8:	9305      	str	r3, [sp, #20]
 800cbda:	4405      	add	r5, r0
 800cbdc:	4480      	add	r8, r0
 800cbde:	9b05      	ldr	r3, [sp, #20]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	dd05      	ble.n	800cbf0 <_dtoa_r+0x858>
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	9904      	ldr	r1, [sp, #16]
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f000 fd43 	bl	800d674 <__lshift>
 800cbee:	9004      	str	r0, [sp, #16]
 800cbf0:	f1b8 0f00 	cmp.w	r8, #0
 800cbf4:	dd05      	ble.n	800cc02 <_dtoa_r+0x86a>
 800cbf6:	4639      	mov	r1, r7
 800cbf8:	4642      	mov	r2, r8
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f000 fd3a 	bl	800d674 <__lshift>
 800cc00:	4607      	mov	r7, r0
 800cc02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc04:	b353      	cbz	r3, 800cc5c <_dtoa_r+0x8c4>
 800cc06:	4639      	mov	r1, r7
 800cc08:	9804      	ldr	r0, [sp, #16]
 800cc0a:	f000 fd87 	bl	800d71c <__mcmp>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	da24      	bge.n	800cc5c <_dtoa_r+0x8c4>
 800cc12:	2300      	movs	r3, #0
 800cc14:	220a      	movs	r2, #10
 800cc16:	9904      	ldr	r1, [sp, #16]
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f000 fbb4 	bl	800d386 <__multadd>
 800cc1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc20:	9004      	str	r0, [sp, #16]
 800cc22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 814d 	beq.w	800cec6 <_dtoa_r+0xb2e>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4631      	mov	r1, r6
 800cc30:	220a      	movs	r2, #10
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 fba7 	bl	800d386 <__multadd>
 800cc38:	9b02      	ldr	r3, [sp, #8]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	4606      	mov	r6, r0
 800cc3e:	dc4f      	bgt.n	800cce0 <_dtoa_r+0x948>
 800cc40:	9b06      	ldr	r3, [sp, #24]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	dd4c      	ble.n	800cce0 <_dtoa_r+0x948>
 800cc46:	e011      	b.n	800cc6c <_dtoa_r+0x8d4>
 800cc48:	d0c9      	beq.n	800cbde <_dtoa_r+0x846>
 800cc4a:	9a05      	ldr	r2, [sp, #20]
 800cc4c:	331c      	adds	r3, #28
 800cc4e:	441a      	add	r2, r3
 800cc50:	9205      	str	r2, [sp, #20]
 800cc52:	441d      	add	r5, r3
 800cc54:	4498      	add	r8, r3
 800cc56:	e7c2      	b.n	800cbde <_dtoa_r+0x846>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	e7f6      	b.n	800cc4a <_dtoa_r+0x8b2>
 800cc5c:	f1b9 0f00 	cmp.w	r9, #0
 800cc60:	dc38      	bgt.n	800ccd4 <_dtoa_r+0x93c>
 800cc62:	9b06      	ldr	r3, [sp, #24]
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	dd35      	ble.n	800ccd4 <_dtoa_r+0x93c>
 800cc68:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc6c:	9b02      	ldr	r3, [sp, #8]
 800cc6e:	b963      	cbnz	r3, 800cc8a <_dtoa_r+0x8f2>
 800cc70:	4639      	mov	r1, r7
 800cc72:	2205      	movs	r2, #5
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 fb86 	bl	800d386 <__multadd>
 800cc7a:	4601      	mov	r1, r0
 800cc7c:	4607      	mov	r7, r0
 800cc7e:	9804      	ldr	r0, [sp, #16]
 800cc80:	f000 fd4c 	bl	800d71c <__mcmp>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	f73f adcc 	bgt.w	800c822 <_dtoa_r+0x48a>
 800cc8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc8c:	465d      	mov	r5, fp
 800cc8e:	ea6f 0a03 	mvn.w	sl, r3
 800cc92:	f04f 0900 	mov.w	r9, #0
 800cc96:	4639      	mov	r1, r7
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f000 fb5d 	bl	800d358 <_Bfree>
 800cc9e:	2e00      	cmp	r6, #0
 800cca0:	f43f aeb7 	beq.w	800ca12 <_dtoa_r+0x67a>
 800cca4:	f1b9 0f00 	cmp.w	r9, #0
 800cca8:	d005      	beq.n	800ccb6 <_dtoa_r+0x91e>
 800ccaa:	45b1      	cmp	r9, r6
 800ccac:	d003      	beq.n	800ccb6 <_dtoa_r+0x91e>
 800ccae:	4649      	mov	r1, r9
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	f000 fb51 	bl	800d358 <_Bfree>
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f000 fb4d 	bl	800d358 <_Bfree>
 800ccbe:	e6a8      	b.n	800ca12 <_dtoa_r+0x67a>
 800ccc0:	2700      	movs	r7, #0
 800ccc2:	463e      	mov	r6, r7
 800ccc4:	e7e1      	b.n	800cc8a <_dtoa_r+0x8f2>
 800ccc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ccca:	463e      	mov	r6, r7
 800cccc:	e5a9      	b.n	800c822 <_dtoa_r+0x48a>
 800ccce:	bf00      	nop
 800ccd0:	40240000 	.word	0x40240000
 800ccd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccd6:	f8cd 9008 	str.w	r9, [sp, #8]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	f000 80fa 	beq.w	800ced4 <_dtoa_r+0xb3c>
 800cce0:	2d00      	cmp	r5, #0
 800cce2:	dd05      	ble.n	800ccf0 <_dtoa_r+0x958>
 800cce4:	4631      	mov	r1, r6
 800cce6:	462a      	mov	r2, r5
 800cce8:	4620      	mov	r0, r4
 800ccea:	f000 fcc3 	bl	800d674 <__lshift>
 800ccee:	4606      	mov	r6, r0
 800ccf0:	9b07      	ldr	r3, [sp, #28]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d04c      	beq.n	800cd90 <_dtoa_r+0x9f8>
 800ccf6:	6871      	ldr	r1, [r6, #4]
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 faf9 	bl	800d2f0 <_Balloc>
 800ccfe:	6932      	ldr	r2, [r6, #16]
 800cd00:	3202      	adds	r2, #2
 800cd02:	4605      	mov	r5, r0
 800cd04:	0092      	lsls	r2, r2, #2
 800cd06:	f106 010c 	add.w	r1, r6, #12
 800cd0a:	300c      	adds	r0, #12
 800cd0c:	f7fe fcda 	bl	800b6c4 <memcpy>
 800cd10:	2201      	movs	r2, #1
 800cd12:	4629      	mov	r1, r5
 800cd14:	4620      	mov	r0, r4
 800cd16:	f000 fcad 	bl	800d674 <__lshift>
 800cd1a:	9b00      	ldr	r3, [sp, #0]
 800cd1c:	f8cd b014 	str.w	fp, [sp, #20]
 800cd20:	f003 0301 	and.w	r3, r3, #1
 800cd24:	46b1      	mov	r9, r6
 800cd26:	9307      	str	r3, [sp, #28]
 800cd28:	4606      	mov	r6, r0
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	9804      	ldr	r0, [sp, #16]
 800cd2e:	f7ff faa5 	bl	800c27c <quorem>
 800cd32:	4649      	mov	r1, r9
 800cd34:	4605      	mov	r5, r0
 800cd36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cd3a:	9804      	ldr	r0, [sp, #16]
 800cd3c:	f000 fcee 	bl	800d71c <__mcmp>
 800cd40:	4632      	mov	r2, r6
 800cd42:	9000      	str	r0, [sp, #0]
 800cd44:	4639      	mov	r1, r7
 800cd46:	4620      	mov	r0, r4
 800cd48:	f000 fd02 	bl	800d750 <__mdiff>
 800cd4c:	68c3      	ldr	r3, [r0, #12]
 800cd4e:	4602      	mov	r2, r0
 800cd50:	bb03      	cbnz	r3, 800cd94 <_dtoa_r+0x9fc>
 800cd52:	4601      	mov	r1, r0
 800cd54:	9008      	str	r0, [sp, #32]
 800cd56:	9804      	ldr	r0, [sp, #16]
 800cd58:	f000 fce0 	bl	800d71c <__mcmp>
 800cd5c:	9a08      	ldr	r2, [sp, #32]
 800cd5e:	4603      	mov	r3, r0
 800cd60:	4611      	mov	r1, r2
 800cd62:	4620      	mov	r0, r4
 800cd64:	9308      	str	r3, [sp, #32]
 800cd66:	f000 faf7 	bl	800d358 <_Bfree>
 800cd6a:	9b08      	ldr	r3, [sp, #32]
 800cd6c:	b9a3      	cbnz	r3, 800cd98 <_dtoa_r+0xa00>
 800cd6e:	9a06      	ldr	r2, [sp, #24]
 800cd70:	b992      	cbnz	r2, 800cd98 <_dtoa_r+0xa00>
 800cd72:	9a07      	ldr	r2, [sp, #28]
 800cd74:	b982      	cbnz	r2, 800cd98 <_dtoa_r+0xa00>
 800cd76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cd7a:	d029      	beq.n	800cdd0 <_dtoa_r+0xa38>
 800cd7c:	9b00      	ldr	r3, [sp, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	dd01      	ble.n	800cd86 <_dtoa_r+0x9ee>
 800cd82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cd86:	9b05      	ldr	r3, [sp, #20]
 800cd88:	1c5d      	adds	r5, r3, #1
 800cd8a:	f883 8000 	strb.w	r8, [r3]
 800cd8e:	e782      	b.n	800cc96 <_dtoa_r+0x8fe>
 800cd90:	4630      	mov	r0, r6
 800cd92:	e7c2      	b.n	800cd1a <_dtoa_r+0x982>
 800cd94:	2301      	movs	r3, #1
 800cd96:	e7e3      	b.n	800cd60 <_dtoa_r+0x9c8>
 800cd98:	9a00      	ldr	r2, [sp, #0]
 800cd9a:	2a00      	cmp	r2, #0
 800cd9c:	db04      	blt.n	800cda8 <_dtoa_r+0xa10>
 800cd9e:	d125      	bne.n	800cdec <_dtoa_r+0xa54>
 800cda0:	9a06      	ldr	r2, [sp, #24]
 800cda2:	bb1a      	cbnz	r2, 800cdec <_dtoa_r+0xa54>
 800cda4:	9a07      	ldr	r2, [sp, #28]
 800cda6:	bb0a      	cbnz	r2, 800cdec <_dtoa_r+0xa54>
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	ddec      	ble.n	800cd86 <_dtoa_r+0x9ee>
 800cdac:	2201      	movs	r2, #1
 800cdae:	9904      	ldr	r1, [sp, #16]
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f000 fc5f 	bl	800d674 <__lshift>
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	9004      	str	r0, [sp, #16]
 800cdba:	f000 fcaf 	bl	800d71c <__mcmp>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	dc03      	bgt.n	800cdca <_dtoa_r+0xa32>
 800cdc2:	d1e0      	bne.n	800cd86 <_dtoa_r+0x9ee>
 800cdc4:	f018 0f01 	tst.w	r8, #1
 800cdc8:	d0dd      	beq.n	800cd86 <_dtoa_r+0x9ee>
 800cdca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cdce:	d1d8      	bne.n	800cd82 <_dtoa_r+0x9ea>
 800cdd0:	9b05      	ldr	r3, [sp, #20]
 800cdd2:	9a05      	ldr	r2, [sp, #20]
 800cdd4:	1c5d      	adds	r5, r3, #1
 800cdd6:	2339      	movs	r3, #57	; 0x39
 800cdd8:	7013      	strb	r3, [r2, #0]
 800cdda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cdde:	2b39      	cmp	r3, #57	; 0x39
 800cde0:	f105 32ff 	add.w	r2, r5, #4294967295
 800cde4:	d04f      	beq.n	800ce86 <_dtoa_r+0xaee>
 800cde6:	3301      	adds	r3, #1
 800cde8:	7013      	strb	r3, [r2, #0]
 800cdea:	e754      	b.n	800cc96 <_dtoa_r+0x8fe>
 800cdec:	9a05      	ldr	r2, [sp, #20]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f102 0501 	add.w	r5, r2, #1
 800cdf4:	dd06      	ble.n	800ce04 <_dtoa_r+0xa6c>
 800cdf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cdfa:	d0e9      	beq.n	800cdd0 <_dtoa_r+0xa38>
 800cdfc:	f108 0801 	add.w	r8, r8, #1
 800ce00:	9b05      	ldr	r3, [sp, #20]
 800ce02:	e7c2      	b.n	800cd8a <_dtoa_r+0x9f2>
 800ce04:	9a02      	ldr	r2, [sp, #8]
 800ce06:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ce0a:	eba5 030b 	sub.w	r3, r5, fp
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d021      	beq.n	800ce56 <_dtoa_r+0xabe>
 800ce12:	2300      	movs	r3, #0
 800ce14:	220a      	movs	r2, #10
 800ce16:	9904      	ldr	r1, [sp, #16]
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f000 fab4 	bl	800d386 <__multadd>
 800ce1e:	45b1      	cmp	r9, r6
 800ce20:	9004      	str	r0, [sp, #16]
 800ce22:	f04f 0300 	mov.w	r3, #0
 800ce26:	f04f 020a 	mov.w	r2, #10
 800ce2a:	4649      	mov	r1, r9
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	d105      	bne.n	800ce3c <_dtoa_r+0xaa4>
 800ce30:	f000 faa9 	bl	800d386 <__multadd>
 800ce34:	4681      	mov	r9, r0
 800ce36:	4606      	mov	r6, r0
 800ce38:	9505      	str	r5, [sp, #20]
 800ce3a:	e776      	b.n	800cd2a <_dtoa_r+0x992>
 800ce3c:	f000 faa3 	bl	800d386 <__multadd>
 800ce40:	4631      	mov	r1, r6
 800ce42:	4681      	mov	r9, r0
 800ce44:	2300      	movs	r3, #0
 800ce46:	220a      	movs	r2, #10
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f000 fa9c 	bl	800d386 <__multadd>
 800ce4e:	4606      	mov	r6, r0
 800ce50:	e7f2      	b.n	800ce38 <_dtoa_r+0xaa0>
 800ce52:	f04f 0900 	mov.w	r9, #0
 800ce56:	2201      	movs	r2, #1
 800ce58:	9904      	ldr	r1, [sp, #16]
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f000 fc0a 	bl	800d674 <__lshift>
 800ce60:	4639      	mov	r1, r7
 800ce62:	9004      	str	r0, [sp, #16]
 800ce64:	f000 fc5a 	bl	800d71c <__mcmp>
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	dcb6      	bgt.n	800cdda <_dtoa_r+0xa42>
 800ce6c:	d102      	bne.n	800ce74 <_dtoa_r+0xadc>
 800ce6e:	f018 0f01 	tst.w	r8, #1
 800ce72:	d1b2      	bne.n	800cdda <_dtoa_r+0xa42>
 800ce74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ce78:	2b30      	cmp	r3, #48	; 0x30
 800ce7a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ce7e:	f47f af0a 	bne.w	800cc96 <_dtoa_r+0x8fe>
 800ce82:	4615      	mov	r5, r2
 800ce84:	e7f6      	b.n	800ce74 <_dtoa_r+0xadc>
 800ce86:	4593      	cmp	fp, r2
 800ce88:	d105      	bne.n	800ce96 <_dtoa_r+0xafe>
 800ce8a:	2331      	movs	r3, #49	; 0x31
 800ce8c:	f10a 0a01 	add.w	sl, sl, #1
 800ce90:	f88b 3000 	strb.w	r3, [fp]
 800ce94:	e6ff      	b.n	800cc96 <_dtoa_r+0x8fe>
 800ce96:	4615      	mov	r5, r2
 800ce98:	e79f      	b.n	800cdda <_dtoa_r+0xa42>
 800ce9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800cf00 <_dtoa_r+0xb68>
 800ce9e:	e007      	b.n	800ceb0 <_dtoa_r+0xb18>
 800cea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cea2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800cf04 <_dtoa_r+0xb6c>
 800cea6:	b11b      	cbz	r3, 800ceb0 <_dtoa_r+0xb18>
 800cea8:	f10b 0308 	add.w	r3, fp, #8
 800ceac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	4658      	mov	r0, fp
 800ceb2:	b017      	add	sp, #92	; 0x5c
 800ceb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb8:	9b06      	ldr	r3, [sp, #24]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	f77f ae35 	ble.w	800cb2a <_dtoa_r+0x792>
 800cec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cec2:	9307      	str	r3, [sp, #28]
 800cec4:	e649      	b.n	800cb5a <_dtoa_r+0x7c2>
 800cec6:	9b02      	ldr	r3, [sp, #8]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	dc03      	bgt.n	800ced4 <_dtoa_r+0xb3c>
 800cecc:	9b06      	ldr	r3, [sp, #24]
 800cece:	2b02      	cmp	r3, #2
 800ced0:	f73f aecc 	bgt.w	800cc6c <_dtoa_r+0x8d4>
 800ced4:	465d      	mov	r5, fp
 800ced6:	4639      	mov	r1, r7
 800ced8:	9804      	ldr	r0, [sp, #16]
 800ceda:	f7ff f9cf 	bl	800c27c <quorem>
 800cede:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cee2:	f805 8b01 	strb.w	r8, [r5], #1
 800cee6:	9a02      	ldr	r2, [sp, #8]
 800cee8:	eba5 030b 	sub.w	r3, r5, fp
 800ceec:	429a      	cmp	r2, r3
 800ceee:	ddb0      	ble.n	800ce52 <_dtoa_r+0xaba>
 800cef0:	2300      	movs	r3, #0
 800cef2:	220a      	movs	r2, #10
 800cef4:	9904      	ldr	r1, [sp, #16]
 800cef6:	4620      	mov	r0, r4
 800cef8:	f000 fa45 	bl	800d386 <__multadd>
 800cefc:	9004      	str	r0, [sp, #16]
 800cefe:	e7ea      	b.n	800ced6 <_dtoa_r+0xb3e>
 800cf00:	0800e74c 	.word	0x0800e74c
 800cf04:	0800e770 	.word	0x0800e770

0800cf08 <__sflush_r>:
 800cf08:	898a      	ldrh	r2, [r1, #12]
 800cf0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0e:	4605      	mov	r5, r0
 800cf10:	0710      	lsls	r0, r2, #28
 800cf12:	460c      	mov	r4, r1
 800cf14:	d458      	bmi.n	800cfc8 <__sflush_r+0xc0>
 800cf16:	684b      	ldr	r3, [r1, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	dc05      	bgt.n	800cf28 <__sflush_r+0x20>
 800cf1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	dc02      	bgt.n	800cf28 <__sflush_r+0x20>
 800cf22:	2000      	movs	r0, #0
 800cf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf2a:	2e00      	cmp	r6, #0
 800cf2c:	d0f9      	beq.n	800cf22 <__sflush_r+0x1a>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf34:	682f      	ldr	r7, [r5, #0]
 800cf36:	6a21      	ldr	r1, [r4, #32]
 800cf38:	602b      	str	r3, [r5, #0]
 800cf3a:	d032      	beq.n	800cfa2 <__sflush_r+0x9a>
 800cf3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf3e:	89a3      	ldrh	r3, [r4, #12]
 800cf40:	075a      	lsls	r2, r3, #29
 800cf42:	d505      	bpl.n	800cf50 <__sflush_r+0x48>
 800cf44:	6863      	ldr	r3, [r4, #4]
 800cf46:	1ac0      	subs	r0, r0, r3
 800cf48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf4a:	b10b      	cbz	r3, 800cf50 <__sflush_r+0x48>
 800cf4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf4e:	1ac0      	subs	r0, r0, r3
 800cf50:	2300      	movs	r3, #0
 800cf52:	4602      	mov	r2, r0
 800cf54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf56:	6a21      	ldr	r1, [r4, #32]
 800cf58:	4628      	mov	r0, r5
 800cf5a:	47b0      	blx	r6
 800cf5c:	1c43      	adds	r3, r0, #1
 800cf5e:	89a3      	ldrh	r3, [r4, #12]
 800cf60:	d106      	bne.n	800cf70 <__sflush_r+0x68>
 800cf62:	6829      	ldr	r1, [r5, #0]
 800cf64:	291d      	cmp	r1, #29
 800cf66:	d848      	bhi.n	800cffa <__sflush_r+0xf2>
 800cf68:	4a29      	ldr	r2, [pc, #164]	; (800d010 <__sflush_r+0x108>)
 800cf6a:	40ca      	lsrs	r2, r1
 800cf6c:	07d6      	lsls	r6, r2, #31
 800cf6e:	d544      	bpl.n	800cffa <__sflush_r+0xf2>
 800cf70:	2200      	movs	r2, #0
 800cf72:	6062      	str	r2, [r4, #4]
 800cf74:	04d9      	lsls	r1, r3, #19
 800cf76:	6922      	ldr	r2, [r4, #16]
 800cf78:	6022      	str	r2, [r4, #0]
 800cf7a:	d504      	bpl.n	800cf86 <__sflush_r+0x7e>
 800cf7c:	1c42      	adds	r2, r0, #1
 800cf7e:	d101      	bne.n	800cf84 <__sflush_r+0x7c>
 800cf80:	682b      	ldr	r3, [r5, #0]
 800cf82:	b903      	cbnz	r3, 800cf86 <__sflush_r+0x7e>
 800cf84:	6560      	str	r0, [r4, #84]	; 0x54
 800cf86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf88:	602f      	str	r7, [r5, #0]
 800cf8a:	2900      	cmp	r1, #0
 800cf8c:	d0c9      	beq.n	800cf22 <__sflush_r+0x1a>
 800cf8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf92:	4299      	cmp	r1, r3
 800cf94:	d002      	beq.n	800cf9c <__sflush_r+0x94>
 800cf96:	4628      	mov	r0, r5
 800cf98:	f000 fc94 	bl	800d8c4 <_free_r>
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	6360      	str	r0, [r4, #52]	; 0x34
 800cfa0:	e7c0      	b.n	800cf24 <__sflush_r+0x1c>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	47b0      	blx	r6
 800cfa8:	1c41      	adds	r1, r0, #1
 800cfaa:	d1c8      	bne.n	800cf3e <__sflush_r+0x36>
 800cfac:	682b      	ldr	r3, [r5, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d0c5      	beq.n	800cf3e <__sflush_r+0x36>
 800cfb2:	2b1d      	cmp	r3, #29
 800cfb4:	d001      	beq.n	800cfba <__sflush_r+0xb2>
 800cfb6:	2b16      	cmp	r3, #22
 800cfb8:	d101      	bne.n	800cfbe <__sflush_r+0xb6>
 800cfba:	602f      	str	r7, [r5, #0]
 800cfbc:	e7b1      	b.n	800cf22 <__sflush_r+0x1a>
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfc4:	81a3      	strh	r3, [r4, #12]
 800cfc6:	e7ad      	b.n	800cf24 <__sflush_r+0x1c>
 800cfc8:	690f      	ldr	r7, [r1, #16]
 800cfca:	2f00      	cmp	r7, #0
 800cfcc:	d0a9      	beq.n	800cf22 <__sflush_r+0x1a>
 800cfce:	0793      	lsls	r3, r2, #30
 800cfd0:	680e      	ldr	r6, [r1, #0]
 800cfd2:	bf08      	it	eq
 800cfd4:	694b      	ldreq	r3, [r1, #20]
 800cfd6:	600f      	str	r7, [r1, #0]
 800cfd8:	bf18      	it	ne
 800cfda:	2300      	movne	r3, #0
 800cfdc:	eba6 0807 	sub.w	r8, r6, r7
 800cfe0:	608b      	str	r3, [r1, #8]
 800cfe2:	f1b8 0f00 	cmp.w	r8, #0
 800cfe6:	dd9c      	ble.n	800cf22 <__sflush_r+0x1a>
 800cfe8:	4643      	mov	r3, r8
 800cfea:	463a      	mov	r2, r7
 800cfec:	6a21      	ldr	r1, [r4, #32]
 800cfee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cff0:	4628      	mov	r0, r5
 800cff2:	47b0      	blx	r6
 800cff4:	2800      	cmp	r0, #0
 800cff6:	dc06      	bgt.n	800d006 <__sflush_r+0xfe>
 800cff8:	89a3      	ldrh	r3, [r4, #12]
 800cffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cffe:	81a3      	strh	r3, [r4, #12]
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	e78e      	b.n	800cf24 <__sflush_r+0x1c>
 800d006:	4407      	add	r7, r0
 800d008:	eba8 0800 	sub.w	r8, r8, r0
 800d00c:	e7e9      	b.n	800cfe2 <__sflush_r+0xda>
 800d00e:	bf00      	nop
 800d010:	20400001 	.word	0x20400001

0800d014 <_fflush_r>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	690b      	ldr	r3, [r1, #16]
 800d018:	4605      	mov	r5, r0
 800d01a:	460c      	mov	r4, r1
 800d01c:	b1db      	cbz	r3, 800d056 <_fflush_r+0x42>
 800d01e:	b118      	cbz	r0, 800d028 <_fflush_r+0x14>
 800d020:	6983      	ldr	r3, [r0, #24]
 800d022:	b90b      	cbnz	r3, 800d028 <_fflush_r+0x14>
 800d024:	f000 f860 	bl	800d0e8 <__sinit>
 800d028:	4b0c      	ldr	r3, [pc, #48]	; (800d05c <_fflush_r+0x48>)
 800d02a:	429c      	cmp	r4, r3
 800d02c:	d109      	bne.n	800d042 <_fflush_r+0x2e>
 800d02e:	686c      	ldr	r4, [r5, #4]
 800d030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d034:	b17b      	cbz	r3, 800d056 <_fflush_r+0x42>
 800d036:	4621      	mov	r1, r4
 800d038:	4628      	mov	r0, r5
 800d03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d03e:	f7ff bf63 	b.w	800cf08 <__sflush_r>
 800d042:	4b07      	ldr	r3, [pc, #28]	; (800d060 <_fflush_r+0x4c>)
 800d044:	429c      	cmp	r4, r3
 800d046:	d101      	bne.n	800d04c <_fflush_r+0x38>
 800d048:	68ac      	ldr	r4, [r5, #8]
 800d04a:	e7f1      	b.n	800d030 <_fflush_r+0x1c>
 800d04c:	4b05      	ldr	r3, [pc, #20]	; (800d064 <_fflush_r+0x50>)
 800d04e:	429c      	cmp	r4, r3
 800d050:	bf08      	it	eq
 800d052:	68ec      	ldreq	r4, [r5, #12]
 800d054:	e7ec      	b.n	800d030 <_fflush_r+0x1c>
 800d056:	2000      	movs	r0, #0
 800d058:	bd38      	pop	{r3, r4, r5, pc}
 800d05a:	bf00      	nop
 800d05c:	0800e7a0 	.word	0x0800e7a0
 800d060:	0800e7c0 	.word	0x0800e7c0
 800d064:	0800e780 	.word	0x0800e780

0800d068 <std>:
 800d068:	2300      	movs	r3, #0
 800d06a:	b510      	push	{r4, lr}
 800d06c:	4604      	mov	r4, r0
 800d06e:	e9c0 3300 	strd	r3, r3, [r0]
 800d072:	6083      	str	r3, [r0, #8]
 800d074:	8181      	strh	r1, [r0, #12]
 800d076:	6643      	str	r3, [r0, #100]	; 0x64
 800d078:	81c2      	strh	r2, [r0, #14]
 800d07a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d07e:	6183      	str	r3, [r0, #24]
 800d080:	4619      	mov	r1, r3
 800d082:	2208      	movs	r2, #8
 800d084:	305c      	adds	r0, #92	; 0x5c
 800d086:	f7fe fb28 	bl	800b6da <memset>
 800d08a:	4b05      	ldr	r3, [pc, #20]	; (800d0a0 <std+0x38>)
 800d08c:	6263      	str	r3, [r4, #36]	; 0x24
 800d08e:	4b05      	ldr	r3, [pc, #20]	; (800d0a4 <std+0x3c>)
 800d090:	62a3      	str	r3, [r4, #40]	; 0x28
 800d092:	4b05      	ldr	r3, [pc, #20]	; (800d0a8 <std+0x40>)
 800d094:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d096:	4b05      	ldr	r3, [pc, #20]	; (800d0ac <std+0x44>)
 800d098:	6224      	str	r4, [r4, #32]
 800d09a:	6323      	str	r3, [r4, #48]	; 0x30
 800d09c:	bd10      	pop	{r4, pc}
 800d09e:	bf00      	nop
 800d0a0:	0800df59 	.word	0x0800df59
 800d0a4:	0800df7b 	.word	0x0800df7b
 800d0a8:	0800dfb3 	.word	0x0800dfb3
 800d0ac:	0800dfd7 	.word	0x0800dfd7

0800d0b0 <_cleanup_r>:
 800d0b0:	4901      	ldr	r1, [pc, #4]	; (800d0b8 <_cleanup_r+0x8>)
 800d0b2:	f000 b885 	b.w	800d1c0 <_fwalk_reent>
 800d0b6:	bf00      	nop
 800d0b8:	0800d015 	.word	0x0800d015

0800d0bc <__sfmoreglue>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	1e4a      	subs	r2, r1, #1
 800d0c0:	2568      	movs	r5, #104	; 0x68
 800d0c2:	4355      	muls	r5, r2
 800d0c4:	460e      	mov	r6, r1
 800d0c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d0ca:	f000 fc49 	bl	800d960 <_malloc_r>
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	b140      	cbz	r0, 800d0e4 <__sfmoreglue+0x28>
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	e9c0 1600 	strd	r1, r6, [r0]
 800d0d8:	300c      	adds	r0, #12
 800d0da:	60a0      	str	r0, [r4, #8]
 800d0dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d0e0:	f7fe fafb 	bl	800b6da <memset>
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	bd70      	pop	{r4, r5, r6, pc}

0800d0e8 <__sinit>:
 800d0e8:	6983      	ldr	r3, [r0, #24]
 800d0ea:	b510      	push	{r4, lr}
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	bb33      	cbnz	r3, 800d13e <__sinit+0x56>
 800d0f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d0f4:	6503      	str	r3, [r0, #80]	; 0x50
 800d0f6:	4b12      	ldr	r3, [pc, #72]	; (800d140 <__sinit+0x58>)
 800d0f8:	4a12      	ldr	r2, [pc, #72]	; (800d144 <__sinit+0x5c>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	6282      	str	r2, [r0, #40]	; 0x28
 800d0fe:	4298      	cmp	r0, r3
 800d100:	bf04      	itt	eq
 800d102:	2301      	moveq	r3, #1
 800d104:	6183      	streq	r3, [r0, #24]
 800d106:	f000 f81f 	bl	800d148 <__sfp>
 800d10a:	6060      	str	r0, [r4, #4]
 800d10c:	4620      	mov	r0, r4
 800d10e:	f000 f81b 	bl	800d148 <__sfp>
 800d112:	60a0      	str	r0, [r4, #8]
 800d114:	4620      	mov	r0, r4
 800d116:	f000 f817 	bl	800d148 <__sfp>
 800d11a:	2200      	movs	r2, #0
 800d11c:	60e0      	str	r0, [r4, #12]
 800d11e:	2104      	movs	r1, #4
 800d120:	6860      	ldr	r0, [r4, #4]
 800d122:	f7ff ffa1 	bl	800d068 <std>
 800d126:	2201      	movs	r2, #1
 800d128:	2109      	movs	r1, #9
 800d12a:	68a0      	ldr	r0, [r4, #8]
 800d12c:	f7ff ff9c 	bl	800d068 <std>
 800d130:	2202      	movs	r2, #2
 800d132:	2112      	movs	r1, #18
 800d134:	68e0      	ldr	r0, [r4, #12]
 800d136:	f7ff ff97 	bl	800d068 <std>
 800d13a:	2301      	movs	r3, #1
 800d13c:	61a3      	str	r3, [r4, #24]
 800d13e:	bd10      	pop	{r4, pc}
 800d140:	0800e738 	.word	0x0800e738
 800d144:	0800d0b1 	.word	0x0800d0b1

0800d148 <__sfp>:
 800d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14a:	4b1b      	ldr	r3, [pc, #108]	; (800d1b8 <__sfp+0x70>)
 800d14c:	681e      	ldr	r6, [r3, #0]
 800d14e:	69b3      	ldr	r3, [r6, #24]
 800d150:	4607      	mov	r7, r0
 800d152:	b913      	cbnz	r3, 800d15a <__sfp+0x12>
 800d154:	4630      	mov	r0, r6
 800d156:	f7ff ffc7 	bl	800d0e8 <__sinit>
 800d15a:	3648      	adds	r6, #72	; 0x48
 800d15c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d160:	3b01      	subs	r3, #1
 800d162:	d503      	bpl.n	800d16c <__sfp+0x24>
 800d164:	6833      	ldr	r3, [r6, #0]
 800d166:	b133      	cbz	r3, 800d176 <__sfp+0x2e>
 800d168:	6836      	ldr	r6, [r6, #0]
 800d16a:	e7f7      	b.n	800d15c <__sfp+0x14>
 800d16c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d170:	b16d      	cbz	r5, 800d18e <__sfp+0x46>
 800d172:	3468      	adds	r4, #104	; 0x68
 800d174:	e7f4      	b.n	800d160 <__sfp+0x18>
 800d176:	2104      	movs	r1, #4
 800d178:	4638      	mov	r0, r7
 800d17a:	f7ff ff9f 	bl	800d0bc <__sfmoreglue>
 800d17e:	6030      	str	r0, [r6, #0]
 800d180:	2800      	cmp	r0, #0
 800d182:	d1f1      	bne.n	800d168 <__sfp+0x20>
 800d184:	230c      	movs	r3, #12
 800d186:	603b      	str	r3, [r7, #0]
 800d188:	4604      	mov	r4, r0
 800d18a:	4620      	mov	r0, r4
 800d18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d18e:	4b0b      	ldr	r3, [pc, #44]	; (800d1bc <__sfp+0x74>)
 800d190:	6665      	str	r5, [r4, #100]	; 0x64
 800d192:	e9c4 5500 	strd	r5, r5, [r4]
 800d196:	60a5      	str	r5, [r4, #8]
 800d198:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d19c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d1a0:	2208      	movs	r2, #8
 800d1a2:	4629      	mov	r1, r5
 800d1a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d1a8:	f7fe fa97 	bl	800b6da <memset>
 800d1ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d1b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d1b4:	e7e9      	b.n	800d18a <__sfp+0x42>
 800d1b6:	bf00      	nop
 800d1b8:	0800e738 	.word	0x0800e738
 800d1bc:	ffff0001 	.word	0xffff0001

0800d1c0 <_fwalk_reent>:
 800d1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1c4:	4680      	mov	r8, r0
 800d1c6:	4689      	mov	r9, r1
 800d1c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d1cc:	2600      	movs	r6, #0
 800d1ce:	b914      	cbnz	r4, 800d1d6 <_fwalk_reent+0x16>
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d1da:	3f01      	subs	r7, #1
 800d1dc:	d501      	bpl.n	800d1e2 <_fwalk_reent+0x22>
 800d1de:	6824      	ldr	r4, [r4, #0]
 800d1e0:	e7f5      	b.n	800d1ce <_fwalk_reent+0xe>
 800d1e2:	89ab      	ldrh	r3, [r5, #12]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d907      	bls.n	800d1f8 <_fwalk_reent+0x38>
 800d1e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	d003      	beq.n	800d1f8 <_fwalk_reent+0x38>
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	4640      	mov	r0, r8
 800d1f4:	47c8      	blx	r9
 800d1f6:	4306      	orrs	r6, r0
 800d1f8:	3568      	adds	r5, #104	; 0x68
 800d1fa:	e7ee      	b.n	800d1da <_fwalk_reent+0x1a>

0800d1fc <_localeconv_r>:
 800d1fc:	4b04      	ldr	r3, [pc, #16]	; (800d210 <_localeconv_r+0x14>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6a18      	ldr	r0, [r3, #32]
 800d202:	4b04      	ldr	r3, [pc, #16]	; (800d214 <_localeconv_r+0x18>)
 800d204:	2800      	cmp	r0, #0
 800d206:	bf08      	it	eq
 800d208:	4618      	moveq	r0, r3
 800d20a:	30f0      	adds	r0, #240	; 0xf0
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	20000084 	.word	0x20000084
 800d214:	200000e8 	.word	0x200000e8

0800d218 <__swhatbuf_r>:
 800d218:	b570      	push	{r4, r5, r6, lr}
 800d21a:	460e      	mov	r6, r1
 800d21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d220:	2900      	cmp	r1, #0
 800d222:	b096      	sub	sp, #88	; 0x58
 800d224:	4614      	mov	r4, r2
 800d226:	461d      	mov	r5, r3
 800d228:	da07      	bge.n	800d23a <__swhatbuf_r+0x22>
 800d22a:	2300      	movs	r3, #0
 800d22c:	602b      	str	r3, [r5, #0]
 800d22e:	89b3      	ldrh	r3, [r6, #12]
 800d230:	061a      	lsls	r2, r3, #24
 800d232:	d410      	bmi.n	800d256 <__swhatbuf_r+0x3e>
 800d234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d238:	e00e      	b.n	800d258 <__swhatbuf_r+0x40>
 800d23a:	466a      	mov	r2, sp
 800d23c:	f000 fef2 	bl	800e024 <_fstat_r>
 800d240:	2800      	cmp	r0, #0
 800d242:	dbf2      	blt.n	800d22a <__swhatbuf_r+0x12>
 800d244:	9a01      	ldr	r2, [sp, #4]
 800d246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d24a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d24e:	425a      	negs	r2, r3
 800d250:	415a      	adcs	r2, r3
 800d252:	602a      	str	r2, [r5, #0]
 800d254:	e7ee      	b.n	800d234 <__swhatbuf_r+0x1c>
 800d256:	2340      	movs	r3, #64	; 0x40
 800d258:	2000      	movs	r0, #0
 800d25a:	6023      	str	r3, [r4, #0]
 800d25c:	b016      	add	sp, #88	; 0x58
 800d25e:	bd70      	pop	{r4, r5, r6, pc}

0800d260 <__smakebuf_r>:
 800d260:	898b      	ldrh	r3, [r1, #12]
 800d262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d264:	079d      	lsls	r5, r3, #30
 800d266:	4606      	mov	r6, r0
 800d268:	460c      	mov	r4, r1
 800d26a:	d507      	bpl.n	800d27c <__smakebuf_r+0x1c>
 800d26c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d270:	6023      	str	r3, [r4, #0]
 800d272:	6123      	str	r3, [r4, #16]
 800d274:	2301      	movs	r3, #1
 800d276:	6163      	str	r3, [r4, #20]
 800d278:	b002      	add	sp, #8
 800d27a:	bd70      	pop	{r4, r5, r6, pc}
 800d27c:	ab01      	add	r3, sp, #4
 800d27e:	466a      	mov	r2, sp
 800d280:	f7ff ffca 	bl	800d218 <__swhatbuf_r>
 800d284:	9900      	ldr	r1, [sp, #0]
 800d286:	4605      	mov	r5, r0
 800d288:	4630      	mov	r0, r6
 800d28a:	f000 fb69 	bl	800d960 <_malloc_r>
 800d28e:	b948      	cbnz	r0, 800d2a4 <__smakebuf_r+0x44>
 800d290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d294:	059a      	lsls	r2, r3, #22
 800d296:	d4ef      	bmi.n	800d278 <__smakebuf_r+0x18>
 800d298:	f023 0303 	bic.w	r3, r3, #3
 800d29c:	f043 0302 	orr.w	r3, r3, #2
 800d2a0:	81a3      	strh	r3, [r4, #12]
 800d2a2:	e7e3      	b.n	800d26c <__smakebuf_r+0xc>
 800d2a4:	4b0d      	ldr	r3, [pc, #52]	; (800d2dc <__smakebuf_r+0x7c>)
 800d2a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d2a8:	89a3      	ldrh	r3, [r4, #12]
 800d2aa:	6020      	str	r0, [r4, #0]
 800d2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2b0:	81a3      	strh	r3, [r4, #12]
 800d2b2:	9b00      	ldr	r3, [sp, #0]
 800d2b4:	6163      	str	r3, [r4, #20]
 800d2b6:	9b01      	ldr	r3, [sp, #4]
 800d2b8:	6120      	str	r0, [r4, #16]
 800d2ba:	b15b      	cbz	r3, 800d2d4 <__smakebuf_r+0x74>
 800d2bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	f000 fec1 	bl	800e048 <_isatty_r>
 800d2c6:	b128      	cbz	r0, 800d2d4 <__smakebuf_r+0x74>
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	f023 0303 	bic.w	r3, r3, #3
 800d2ce:	f043 0301 	orr.w	r3, r3, #1
 800d2d2:	81a3      	strh	r3, [r4, #12]
 800d2d4:	89a3      	ldrh	r3, [r4, #12]
 800d2d6:	431d      	orrs	r5, r3
 800d2d8:	81a5      	strh	r5, [r4, #12]
 800d2da:	e7cd      	b.n	800d278 <__smakebuf_r+0x18>
 800d2dc:	0800d0b1 	.word	0x0800d0b1

0800d2e0 <malloc>:
 800d2e0:	4b02      	ldr	r3, [pc, #8]	; (800d2ec <malloc+0xc>)
 800d2e2:	4601      	mov	r1, r0
 800d2e4:	6818      	ldr	r0, [r3, #0]
 800d2e6:	f000 bb3b 	b.w	800d960 <_malloc_r>
 800d2ea:	bf00      	nop
 800d2ec:	20000084 	.word	0x20000084

0800d2f0 <_Balloc>:
 800d2f0:	b570      	push	{r4, r5, r6, lr}
 800d2f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d2f4:	4604      	mov	r4, r0
 800d2f6:	460e      	mov	r6, r1
 800d2f8:	b93d      	cbnz	r5, 800d30a <_Balloc+0x1a>
 800d2fa:	2010      	movs	r0, #16
 800d2fc:	f7ff fff0 	bl	800d2e0 <malloc>
 800d300:	6260      	str	r0, [r4, #36]	; 0x24
 800d302:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d306:	6005      	str	r5, [r0, #0]
 800d308:	60c5      	str	r5, [r0, #12]
 800d30a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d30c:	68eb      	ldr	r3, [r5, #12]
 800d30e:	b183      	cbz	r3, 800d332 <_Balloc+0x42>
 800d310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d318:	b9b8      	cbnz	r0, 800d34a <_Balloc+0x5a>
 800d31a:	2101      	movs	r1, #1
 800d31c:	fa01 f506 	lsl.w	r5, r1, r6
 800d320:	1d6a      	adds	r2, r5, #5
 800d322:	0092      	lsls	r2, r2, #2
 800d324:	4620      	mov	r0, r4
 800d326:	f000 fabf 	bl	800d8a8 <_calloc_r>
 800d32a:	b160      	cbz	r0, 800d346 <_Balloc+0x56>
 800d32c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d330:	e00e      	b.n	800d350 <_Balloc+0x60>
 800d332:	2221      	movs	r2, #33	; 0x21
 800d334:	2104      	movs	r1, #4
 800d336:	4620      	mov	r0, r4
 800d338:	f000 fab6 	bl	800d8a8 <_calloc_r>
 800d33c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d33e:	60e8      	str	r0, [r5, #12]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1e4      	bne.n	800d310 <_Balloc+0x20>
 800d346:	2000      	movs	r0, #0
 800d348:	bd70      	pop	{r4, r5, r6, pc}
 800d34a:	6802      	ldr	r2, [r0, #0]
 800d34c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d350:	2300      	movs	r3, #0
 800d352:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d356:	e7f7      	b.n	800d348 <_Balloc+0x58>

0800d358 <_Bfree>:
 800d358:	b570      	push	{r4, r5, r6, lr}
 800d35a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d35c:	4606      	mov	r6, r0
 800d35e:	460d      	mov	r5, r1
 800d360:	b93c      	cbnz	r4, 800d372 <_Bfree+0x1a>
 800d362:	2010      	movs	r0, #16
 800d364:	f7ff ffbc 	bl	800d2e0 <malloc>
 800d368:	6270      	str	r0, [r6, #36]	; 0x24
 800d36a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d36e:	6004      	str	r4, [r0, #0]
 800d370:	60c4      	str	r4, [r0, #12]
 800d372:	b13d      	cbz	r5, 800d384 <_Bfree+0x2c>
 800d374:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d376:	686a      	ldr	r2, [r5, #4]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d37e:	6029      	str	r1, [r5, #0]
 800d380:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d384:	bd70      	pop	{r4, r5, r6, pc}

0800d386 <__multadd>:
 800d386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d38a:	690d      	ldr	r5, [r1, #16]
 800d38c:	461f      	mov	r7, r3
 800d38e:	4606      	mov	r6, r0
 800d390:	460c      	mov	r4, r1
 800d392:	f101 0c14 	add.w	ip, r1, #20
 800d396:	2300      	movs	r3, #0
 800d398:	f8dc 0000 	ldr.w	r0, [ip]
 800d39c:	b281      	uxth	r1, r0
 800d39e:	fb02 7101 	mla	r1, r2, r1, r7
 800d3a2:	0c0f      	lsrs	r7, r1, #16
 800d3a4:	0c00      	lsrs	r0, r0, #16
 800d3a6:	fb02 7000 	mla	r0, r2, r0, r7
 800d3aa:	b289      	uxth	r1, r1
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d3b2:	429d      	cmp	r5, r3
 800d3b4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d3b8:	f84c 1b04 	str.w	r1, [ip], #4
 800d3bc:	dcec      	bgt.n	800d398 <__multadd+0x12>
 800d3be:	b1d7      	cbz	r7, 800d3f6 <__multadd+0x70>
 800d3c0:	68a3      	ldr	r3, [r4, #8]
 800d3c2:	42ab      	cmp	r3, r5
 800d3c4:	dc12      	bgt.n	800d3ec <__multadd+0x66>
 800d3c6:	6861      	ldr	r1, [r4, #4]
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	3101      	adds	r1, #1
 800d3cc:	f7ff ff90 	bl	800d2f0 <_Balloc>
 800d3d0:	6922      	ldr	r2, [r4, #16]
 800d3d2:	3202      	adds	r2, #2
 800d3d4:	f104 010c 	add.w	r1, r4, #12
 800d3d8:	4680      	mov	r8, r0
 800d3da:	0092      	lsls	r2, r2, #2
 800d3dc:	300c      	adds	r0, #12
 800d3de:	f7fe f971 	bl	800b6c4 <memcpy>
 800d3e2:	4621      	mov	r1, r4
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	f7ff ffb7 	bl	800d358 <_Bfree>
 800d3ea:	4644      	mov	r4, r8
 800d3ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d3f0:	3501      	adds	r5, #1
 800d3f2:	615f      	str	r7, [r3, #20]
 800d3f4:	6125      	str	r5, [r4, #16]
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d3fc <__hi0bits>:
 800d3fc:	0c02      	lsrs	r2, r0, #16
 800d3fe:	0412      	lsls	r2, r2, #16
 800d400:	4603      	mov	r3, r0
 800d402:	b9b2      	cbnz	r2, 800d432 <__hi0bits+0x36>
 800d404:	0403      	lsls	r3, r0, #16
 800d406:	2010      	movs	r0, #16
 800d408:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d40c:	bf04      	itt	eq
 800d40e:	021b      	lsleq	r3, r3, #8
 800d410:	3008      	addeq	r0, #8
 800d412:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d416:	bf04      	itt	eq
 800d418:	011b      	lsleq	r3, r3, #4
 800d41a:	3004      	addeq	r0, #4
 800d41c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d420:	bf04      	itt	eq
 800d422:	009b      	lsleq	r3, r3, #2
 800d424:	3002      	addeq	r0, #2
 800d426:	2b00      	cmp	r3, #0
 800d428:	db06      	blt.n	800d438 <__hi0bits+0x3c>
 800d42a:	005b      	lsls	r3, r3, #1
 800d42c:	d503      	bpl.n	800d436 <__hi0bits+0x3a>
 800d42e:	3001      	adds	r0, #1
 800d430:	4770      	bx	lr
 800d432:	2000      	movs	r0, #0
 800d434:	e7e8      	b.n	800d408 <__hi0bits+0xc>
 800d436:	2020      	movs	r0, #32
 800d438:	4770      	bx	lr

0800d43a <__lo0bits>:
 800d43a:	6803      	ldr	r3, [r0, #0]
 800d43c:	f013 0207 	ands.w	r2, r3, #7
 800d440:	4601      	mov	r1, r0
 800d442:	d00b      	beq.n	800d45c <__lo0bits+0x22>
 800d444:	07da      	lsls	r2, r3, #31
 800d446:	d423      	bmi.n	800d490 <__lo0bits+0x56>
 800d448:	0798      	lsls	r0, r3, #30
 800d44a:	bf49      	itett	mi
 800d44c:	085b      	lsrmi	r3, r3, #1
 800d44e:	089b      	lsrpl	r3, r3, #2
 800d450:	2001      	movmi	r0, #1
 800d452:	600b      	strmi	r3, [r1, #0]
 800d454:	bf5c      	itt	pl
 800d456:	600b      	strpl	r3, [r1, #0]
 800d458:	2002      	movpl	r0, #2
 800d45a:	4770      	bx	lr
 800d45c:	b298      	uxth	r0, r3
 800d45e:	b9a8      	cbnz	r0, 800d48c <__lo0bits+0x52>
 800d460:	0c1b      	lsrs	r3, r3, #16
 800d462:	2010      	movs	r0, #16
 800d464:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d468:	bf04      	itt	eq
 800d46a:	0a1b      	lsreq	r3, r3, #8
 800d46c:	3008      	addeq	r0, #8
 800d46e:	071a      	lsls	r2, r3, #28
 800d470:	bf04      	itt	eq
 800d472:	091b      	lsreq	r3, r3, #4
 800d474:	3004      	addeq	r0, #4
 800d476:	079a      	lsls	r2, r3, #30
 800d478:	bf04      	itt	eq
 800d47a:	089b      	lsreq	r3, r3, #2
 800d47c:	3002      	addeq	r0, #2
 800d47e:	07da      	lsls	r2, r3, #31
 800d480:	d402      	bmi.n	800d488 <__lo0bits+0x4e>
 800d482:	085b      	lsrs	r3, r3, #1
 800d484:	d006      	beq.n	800d494 <__lo0bits+0x5a>
 800d486:	3001      	adds	r0, #1
 800d488:	600b      	str	r3, [r1, #0]
 800d48a:	4770      	bx	lr
 800d48c:	4610      	mov	r0, r2
 800d48e:	e7e9      	b.n	800d464 <__lo0bits+0x2a>
 800d490:	2000      	movs	r0, #0
 800d492:	4770      	bx	lr
 800d494:	2020      	movs	r0, #32
 800d496:	4770      	bx	lr

0800d498 <__i2b>:
 800d498:	b510      	push	{r4, lr}
 800d49a:	460c      	mov	r4, r1
 800d49c:	2101      	movs	r1, #1
 800d49e:	f7ff ff27 	bl	800d2f0 <_Balloc>
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	6144      	str	r4, [r0, #20]
 800d4a6:	6102      	str	r2, [r0, #16]
 800d4a8:	bd10      	pop	{r4, pc}

0800d4aa <__multiply>:
 800d4aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ae:	4614      	mov	r4, r2
 800d4b0:	690a      	ldr	r2, [r1, #16]
 800d4b2:	6923      	ldr	r3, [r4, #16]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	bfb8      	it	lt
 800d4b8:	460b      	movlt	r3, r1
 800d4ba:	4688      	mov	r8, r1
 800d4bc:	bfbc      	itt	lt
 800d4be:	46a0      	movlt	r8, r4
 800d4c0:	461c      	movlt	r4, r3
 800d4c2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d4c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d4ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d4d2:	eb07 0609 	add.w	r6, r7, r9
 800d4d6:	42b3      	cmp	r3, r6
 800d4d8:	bfb8      	it	lt
 800d4da:	3101      	addlt	r1, #1
 800d4dc:	f7ff ff08 	bl	800d2f0 <_Balloc>
 800d4e0:	f100 0514 	add.w	r5, r0, #20
 800d4e4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d4e8:	462b      	mov	r3, r5
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	4573      	cmp	r3, lr
 800d4ee:	d316      	bcc.n	800d51e <__multiply+0x74>
 800d4f0:	f104 0214 	add.w	r2, r4, #20
 800d4f4:	f108 0114 	add.w	r1, r8, #20
 800d4f8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d4fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d500:	9300      	str	r3, [sp, #0]
 800d502:	9b00      	ldr	r3, [sp, #0]
 800d504:	9201      	str	r2, [sp, #4]
 800d506:	4293      	cmp	r3, r2
 800d508:	d80c      	bhi.n	800d524 <__multiply+0x7a>
 800d50a:	2e00      	cmp	r6, #0
 800d50c:	dd03      	ble.n	800d516 <__multiply+0x6c>
 800d50e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d512:	2b00      	cmp	r3, #0
 800d514:	d05d      	beq.n	800d5d2 <__multiply+0x128>
 800d516:	6106      	str	r6, [r0, #16]
 800d518:	b003      	add	sp, #12
 800d51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51e:	f843 2b04 	str.w	r2, [r3], #4
 800d522:	e7e3      	b.n	800d4ec <__multiply+0x42>
 800d524:	f8b2 b000 	ldrh.w	fp, [r2]
 800d528:	f1bb 0f00 	cmp.w	fp, #0
 800d52c:	d023      	beq.n	800d576 <__multiply+0xcc>
 800d52e:	4689      	mov	r9, r1
 800d530:	46ac      	mov	ip, r5
 800d532:	f04f 0800 	mov.w	r8, #0
 800d536:	f859 4b04 	ldr.w	r4, [r9], #4
 800d53a:	f8dc a000 	ldr.w	sl, [ip]
 800d53e:	b2a3      	uxth	r3, r4
 800d540:	fa1f fa8a 	uxth.w	sl, sl
 800d544:	fb0b a303 	mla	r3, fp, r3, sl
 800d548:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d54c:	f8dc 4000 	ldr.w	r4, [ip]
 800d550:	4443      	add	r3, r8
 800d552:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d556:	fb0b 840a 	mla	r4, fp, sl, r8
 800d55a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d55e:	46e2      	mov	sl, ip
 800d560:	b29b      	uxth	r3, r3
 800d562:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d566:	454f      	cmp	r7, r9
 800d568:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d56c:	f84a 3b04 	str.w	r3, [sl], #4
 800d570:	d82b      	bhi.n	800d5ca <__multiply+0x120>
 800d572:	f8cc 8004 	str.w	r8, [ip, #4]
 800d576:	9b01      	ldr	r3, [sp, #4]
 800d578:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d57c:	3204      	adds	r2, #4
 800d57e:	f1ba 0f00 	cmp.w	sl, #0
 800d582:	d020      	beq.n	800d5c6 <__multiply+0x11c>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	4689      	mov	r9, r1
 800d588:	46a8      	mov	r8, r5
 800d58a:	f04f 0b00 	mov.w	fp, #0
 800d58e:	f8b9 c000 	ldrh.w	ip, [r9]
 800d592:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d596:	fb0a 440c 	mla	r4, sl, ip, r4
 800d59a:	445c      	add	r4, fp
 800d59c:	46c4      	mov	ip, r8
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d5a4:	f84c 3b04 	str.w	r3, [ip], #4
 800d5a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5ac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d5b0:	0c1b      	lsrs	r3, r3, #16
 800d5b2:	fb0a b303 	mla	r3, sl, r3, fp
 800d5b6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d5ba:	454f      	cmp	r7, r9
 800d5bc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d5c0:	d805      	bhi.n	800d5ce <__multiply+0x124>
 800d5c2:	f8c8 3004 	str.w	r3, [r8, #4]
 800d5c6:	3504      	adds	r5, #4
 800d5c8:	e79b      	b.n	800d502 <__multiply+0x58>
 800d5ca:	46d4      	mov	ip, sl
 800d5cc:	e7b3      	b.n	800d536 <__multiply+0x8c>
 800d5ce:	46e0      	mov	r8, ip
 800d5d0:	e7dd      	b.n	800d58e <__multiply+0xe4>
 800d5d2:	3e01      	subs	r6, #1
 800d5d4:	e799      	b.n	800d50a <__multiply+0x60>
	...

0800d5d8 <__pow5mult>:
 800d5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5dc:	4615      	mov	r5, r2
 800d5de:	f012 0203 	ands.w	r2, r2, #3
 800d5e2:	4606      	mov	r6, r0
 800d5e4:	460f      	mov	r7, r1
 800d5e6:	d007      	beq.n	800d5f8 <__pow5mult+0x20>
 800d5e8:	3a01      	subs	r2, #1
 800d5ea:	4c21      	ldr	r4, [pc, #132]	; (800d670 <__pow5mult+0x98>)
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5f2:	f7ff fec8 	bl	800d386 <__multadd>
 800d5f6:	4607      	mov	r7, r0
 800d5f8:	10ad      	asrs	r5, r5, #2
 800d5fa:	d035      	beq.n	800d668 <__pow5mult+0x90>
 800d5fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d5fe:	b93c      	cbnz	r4, 800d610 <__pow5mult+0x38>
 800d600:	2010      	movs	r0, #16
 800d602:	f7ff fe6d 	bl	800d2e0 <malloc>
 800d606:	6270      	str	r0, [r6, #36]	; 0x24
 800d608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d60c:	6004      	str	r4, [r0, #0]
 800d60e:	60c4      	str	r4, [r0, #12]
 800d610:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d618:	b94c      	cbnz	r4, 800d62e <__pow5mult+0x56>
 800d61a:	f240 2171 	movw	r1, #625	; 0x271
 800d61e:	4630      	mov	r0, r6
 800d620:	f7ff ff3a 	bl	800d498 <__i2b>
 800d624:	2300      	movs	r3, #0
 800d626:	f8c8 0008 	str.w	r0, [r8, #8]
 800d62a:	4604      	mov	r4, r0
 800d62c:	6003      	str	r3, [r0, #0]
 800d62e:	f04f 0800 	mov.w	r8, #0
 800d632:	07eb      	lsls	r3, r5, #31
 800d634:	d50a      	bpl.n	800d64c <__pow5mult+0x74>
 800d636:	4639      	mov	r1, r7
 800d638:	4622      	mov	r2, r4
 800d63a:	4630      	mov	r0, r6
 800d63c:	f7ff ff35 	bl	800d4aa <__multiply>
 800d640:	4639      	mov	r1, r7
 800d642:	4681      	mov	r9, r0
 800d644:	4630      	mov	r0, r6
 800d646:	f7ff fe87 	bl	800d358 <_Bfree>
 800d64a:	464f      	mov	r7, r9
 800d64c:	106d      	asrs	r5, r5, #1
 800d64e:	d00b      	beq.n	800d668 <__pow5mult+0x90>
 800d650:	6820      	ldr	r0, [r4, #0]
 800d652:	b938      	cbnz	r0, 800d664 <__pow5mult+0x8c>
 800d654:	4622      	mov	r2, r4
 800d656:	4621      	mov	r1, r4
 800d658:	4630      	mov	r0, r6
 800d65a:	f7ff ff26 	bl	800d4aa <__multiply>
 800d65e:	6020      	str	r0, [r4, #0]
 800d660:	f8c0 8000 	str.w	r8, [r0]
 800d664:	4604      	mov	r4, r0
 800d666:	e7e4      	b.n	800d632 <__pow5mult+0x5a>
 800d668:	4638      	mov	r0, r7
 800d66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d66e:	bf00      	nop
 800d670:	0800e8d0 	.word	0x0800e8d0

0800d674 <__lshift>:
 800d674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d678:	460c      	mov	r4, r1
 800d67a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d67e:	6923      	ldr	r3, [r4, #16]
 800d680:	6849      	ldr	r1, [r1, #4]
 800d682:	eb0a 0903 	add.w	r9, sl, r3
 800d686:	68a3      	ldr	r3, [r4, #8]
 800d688:	4607      	mov	r7, r0
 800d68a:	4616      	mov	r6, r2
 800d68c:	f109 0501 	add.w	r5, r9, #1
 800d690:	42ab      	cmp	r3, r5
 800d692:	db32      	blt.n	800d6fa <__lshift+0x86>
 800d694:	4638      	mov	r0, r7
 800d696:	f7ff fe2b 	bl	800d2f0 <_Balloc>
 800d69a:	2300      	movs	r3, #0
 800d69c:	4680      	mov	r8, r0
 800d69e:	f100 0114 	add.w	r1, r0, #20
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	4553      	cmp	r3, sl
 800d6a6:	db2b      	blt.n	800d700 <__lshift+0x8c>
 800d6a8:	6920      	ldr	r0, [r4, #16]
 800d6aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6ae:	f104 0314 	add.w	r3, r4, #20
 800d6b2:	f016 021f 	ands.w	r2, r6, #31
 800d6b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d6be:	d025      	beq.n	800d70c <__lshift+0x98>
 800d6c0:	f1c2 0e20 	rsb	lr, r2, #32
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	681e      	ldr	r6, [r3, #0]
 800d6c8:	468a      	mov	sl, r1
 800d6ca:	4096      	lsls	r6, r2
 800d6cc:	4330      	orrs	r0, r6
 800d6ce:	f84a 0b04 	str.w	r0, [sl], #4
 800d6d2:	f853 0b04 	ldr.w	r0, [r3], #4
 800d6d6:	459c      	cmp	ip, r3
 800d6d8:	fa20 f00e 	lsr.w	r0, r0, lr
 800d6dc:	d814      	bhi.n	800d708 <__lshift+0x94>
 800d6de:	6048      	str	r0, [r1, #4]
 800d6e0:	b108      	cbz	r0, 800d6e6 <__lshift+0x72>
 800d6e2:	f109 0502 	add.w	r5, r9, #2
 800d6e6:	3d01      	subs	r5, #1
 800d6e8:	4638      	mov	r0, r7
 800d6ea:	f8c8 5010 	str.w	r5, [r8, #16]
 800d6ee:	4621      	mov	r1, r4
 800d6f0:	f7ff fe32 	bl	800d358 <_Bfree>
 800d6f4:	4640      	mov	r0, r8
 800d6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6fa:	3101      	adds	r1, #1
 800d6fc:	005b      	lsls	r3, r3, #1
 800d6fe:	e7c7      	b.n	800d690 <__lshift+0x1c>
 800d700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d704:	3301      	adds	r3, #1
 800d706:	e7cd      	b.n	800d6a4 <__lshift+0x30>
 800d708:	4651      	mov	r1, sl
 800d70a:	e7dc      	b.n	800d6c6 <__lshift+0x52>
 800d70c:	3904      	subs	r1, #4
 800d70e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d712:	f841 2f04 	str.w	r2, [r1, #4]!
 800d716:	459c      	cmp	ip, r3
 800d718:	d8f9      	bhi.n	800d70e <__lshift+0x9a>
 800d71a:	e7e4      	b.n	800d6e6 <__lshift+0x72>

0800d71c <__mcmp>:
 800d71c:	6903      	ldr	r3, [r0, #16]
 800d71e:	690a      	ldr	r2, [r1, #16]
 800d720:	1a9b      	subs	r3, r3, r2
 800d722:	b530      	push	{r4, r5, lr}
 800d724:	d10c      	bne.n	800d740 <__mcmp+0x24>
 800d726:	0092      	lsls	r2, r2, #2
 800d728:	3014      	adds	r0, #20
 800d72a:	3114      	adds	r1, #20
 800d72c:	1884      	adds	r4, r0, r2
 800d72e:	4411      	add	r1, r2
 800d730:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d734:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d738:	4295      	cmp	r5, r2
 800d73a:	d003      	beq.n	800d744 <__mcmp+0x28>
 800d73c:	d305      	bcc.n	800d74a <__mcmp+0x2e>
 800d73e:	2301      	movs	r3, #1
 800d740:	4618      	mov	r0, r3
 800d742:	bd30      	pop	{r4, r5, pc}
 800d744:	42a0      	cmp	r0, r4
 800d746:	d3f3      	bcc.n	800d730 <__mcmp+0x14>
 800d748:	e7fa      	b.n	800d740 <__mcmp+0x24>
 800d74a:	f04f 33ff 	mov.w	r3, #4294967295
 800d74e:	e7f7      	b.n	800d740 <__mcmp+0x24>

0800d750 <__mdiff>:
 800d750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d754:	460d      	mov	r5, r1
 800d756:	4607      	mov	r7, r0
 800d758:	4611      	mov	r1, r2
 800d75a:	4628      	mov	r0, r5
 800d75c:	4614      	mov	r4, r2
 800d75e:	f7ff ffdd 	bl	800d71c <__mcmp>
 800d762:	1e06      	subs	r6, r0, #0
 800d764:	d108      	bne.n	800d778 <__mdiff+0x28>
 800d766:	4631      	mov	r1, r6
 800d768:	4638      	mov	r0, r7
 800d76a:	f7ff fdc1 	bl	800d2f0 <_Balloc>
 800d76e:	2301      	movs	r3, #1
 800d770:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d778:	bfa4      	itt	ge
 800d77a:	4623      	movge	r3, r4
 800d77c:	462c      	movge	r4, r5
 800d77e:	4638      	mov	r0, r7
 800d780:	6861      	ldr	r1, [r4, #4]
 800d782:	bfa6      	itte	ge
 800d784:	461d      	movge	r5, r3
 800d786:	2600      	movge	r6, #0
 800d788:	2601      	movlt	r6, #1
 800d78a:	f7ff fdb1 	bl	800d2f0 <_Balloc>
 800d78e:	692b      	ldr	r3, [r5, #16]
 800d790:	60c6      	str	r6, [r0, #12]
 800d792:	6926      	ldr	r6, [r4, #16]
 800d794:	f105 0914 	add.w	r9, r5, #20
 800d798:	f104 0214 	add.w	r2, r4, #20
 800d79c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d7a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d7a4:	f100 0514 	add.w	r5, r0, #20
 800d7a8:	f04f 0e00 	mov.w	lr, #0
 800d7ac:	f852 ab04 	ldr.w	sl, [r2], #4
 800d7b0:	f859 4b04 	ldr.w	r4, [r9], #4
 800d7b4:	fa1e f18a 	uxtah	r1, lr, sl
 800d7b8:	b2a3      	uxth	r3, r4
 800d7ba:	1ac9      	subs	r1, r1, r3
 800d7bc:	0c23      	lsrs	r3, r4, #16
 800d7be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d7c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d7c6:	b289      	uxth	r1, r1
 800d7c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d7cc:	45c8      	cmp	r8, r9
 800d7ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d7d2:	4694      	mov	ip, r2
 800d7d4:	f845 3b04 	str.w	r3, [r5], #4
 800d7d8:	d8e8      	bhi.n	800d7ac <__mdiff+0x5c>
 800d7da:	45bc      	cmp	ip, r7
 800d7dc:	d304      	bcc.n	800d7e8 <__mdiff+0x98>
 800d7de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d7e2:	b183      	cbz	r3, 800d806 <__mdiff+0xb6>
 800d7e4:	6106      	str	r6, [r0, #16]
 800d7e6:	e7c5      	b.n	800d774 <__mdiff+0x24>
 800d7e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d7ec:	fa1e f381 	uxtah	r3, lr, r1
 800d7f0:	141a      	asrs	r2, r3, #16
 800d7f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d800:	f845 3b04 	str.w	r3, [r5], #4
 800d804:	e7e9      	b.n	800d7da <__mdiff+0x8a>
 800d806:	3e01      	subs	r6, #1
 800d808:	e7e9      	b.n	800d7de <__mdiff+0x8e>

0800d80a <__d2b>:
 800d80a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d80e:	460e      	mov	r6, r1
 800d810:	2101      	movs	r1, #1
 800d812:	ec59 8b10 	vmov	r8, r9, d0
 800d816:	4615      	mov	r5, r2
 800d818:	f7ff fd6a 	bl	800d2f0 <_Balloc>
 800d81c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d820:	4607      	mov	r7, r0
 800d822:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d826:	bb34      	cbnz	r4, 800d876 <__d2b+0x6c>
 800d828:	9301      	str	r3, [sp, #4]
 800d82a:	f1b8 0300 	subs.w	r3, r8, #0
 800d82e:	d027      	beq.n	800d880 <__d2b+0x76>
 800d830:	a802      	add	r0, sp, #8
 800d832:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d836:	f7ff fe00 	bl	800d43a <__lo0bits>
 800d83a:	9900      	ldr	r1, [sp, #0]
 800d83c:	b1f0      	cbz	r0, 800d87c <__d2b+0x72>
 800d83e:	9a01      	ldr	r2, [sp, #4]
 800d840:	f1c0 0320 	rsb	r3, r0, #32
 800d844:	fa02 f303 	lsl.w	r3, r2, r3
 800d848:	430b      	orrs	r3, r1
 800d84a:	40c2      	lsrs	r2, r0
 800d84c:	617b      	str	r3, [r7, #20]
 800d84e:	9201      	str	r2, [sp, #4]
 800d850:	9b01      	ldr	r3, [sp, #4]
 800d852:	61bb      	str	r3, [r7, #24]
 800d854:	2b00      	cmp	r3, #0
 800d856:	bf14      	ite	ne
 800d858:	2102      	movne	r1, #2
 800d85a:	2101      	moveq	r1, #1
 800d85c:	6139      	str	r1, [r7, #16]
 800d85e:	b1c4      	cbz	r4, 800d892 <__d2b+0x88>
 800d860:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d864:	4404      	add	r4, r0
 800d866:	6034      	str	r4, [r6, #0]
 800d868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d86c:	6028      	str	r0, [r5, #0]
 800d86e:	4638      	mov	r0, r7
 800d870:	b003      	add	sp, #12
 800d872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d87a:	e7d5      	b.n	800d828 <__d2b+0x1e>
 800d87c:	6179      	str	r1, [r7, #20]
 800d87e:	e7e7      	b.n	800d850 <__d2b+0x46>
 800d880:	a801      	add	r0, sp, #4
 800d882:	f7ff fdda 	bl	800d43a <__lo0bits>
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	617b      	str	r3, [r7, #20]
 800d88a:	2101      	movs	r1, #1
 800d88c:	6139      	str	r1, [r7, #16]
 800d88e:	3020      	adds	r0, #32
 800d890:	e7e5      	b.n	800d85e <__d2b+0x54>
 800d892:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d896:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d89a:	6030      	str	r0, [r6, #0]
 800d89c:	6918      	ldr	r0, [r3, #16]
 800d89e:	f7ff fdad 	bl	800d3fc <__hi0bits>
 800d8a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d8a6:	e7e1      	b.n	800d86c <__d2b+0x62>

0800d8a8 <_calloc_r>:
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	fb02 f401 	mul.w	r4, r2, r1
 800d8ae:	4621      	mov	r1, r4
 800d8b0:	f000 f856 	bl	800d960 <_malloc_r>
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	b118      	cbz	r0, 800d8c0 <_calloc_r+0x18>
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	f7fd ff0d 	bl	800b6da <memset>
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	bd38      	pop	{r3, r4, r5, pc}

0800d8c4 <_free_r>:
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	4605      	mov	r5, r0
 800d8c8:	2900      	cmp	r1, #0
 800d8ca:	d045      	beq.n	800d958 <_free_r+0x94>
 800d8cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8d0:	1f0c      	subs	r4, r1, #4
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	bfb8      	it	lt
 800d8d6:	18e4      	addlt	r4, r4, r3
 800d8d8:	f000 fc03 	bl	800e0e2 <__malloc_lock>
 800d8dc:	4a1f      	ldr	r2, [pc, #124]	; (800d95c <_free_r+0x98>)
 800d8de:	6813      	ldr	r3, [r2, #0]
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	b933      	cbnz	r3, 800d8f2 <_free_r+0x2e>
 800d8e4:	6063      	str	r3, [r4, #4]
 800d8e6:	6014      	str	r4, [r2, #0]
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8ee:	f000 bbf9 	b.w	800e0e4 <__malloc_unlock>
 800d8f2:	42a3      	cmp	r3, r4
 800d8f4:	d90c      	bls.n	800d910 <_free_r+0x4c>
 800d8f6:	6821      	ldr	r1, [r4, #0]
 800d8f8:	1862      	adds	r2, r4, r1
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	bf04      	itt	eq
 800d8fe:	681a      	ldreq	r2, [r3, #0]
 800d900:	685b      	ldreq	r3, [r3, #4]
 800d902:	6063      	str	r3, [r4, #4]
 800d904:	bf04      	itt	eq
 800d906:	1852      	addeq	r2, r2, r1
 800d908:	6022      	streq	r2, [r4, #0]
 800d90a:	6004      	str	r4, [r0, #0]
 800d90c:	e7ec      	b.n	800d8e8 <_free_r+0x24>
 800d90e:	4613      	mov	r3, r2
 800d910:	685a      	ldr	r2, [r3, #4]
 800d912:	b10a      	cbz	r2, 800d918 <_free_r+0x54>
 800d914:	42a2      	cmp	r2, r4
 800d916:	d9fa      	bls.n	800d90e <_free_r+0x4a>
 800d918:	6819      	ldr	r1, [r3, #0]
 800d91a:	1858      	adds	r0, r3, r1
 800d91c:	42a0      	cmp	r0, r4
 800d91e:	d10b      	bne.n	800d938 <_free_r+0x74>
 800d920:	6820      	ldr	r0, [r4, #0]
 800d922:	4401      	add	r1, r0
 800d924:	1858      	adds	r0, r3, r1
 800d926:	4282      	cmp	r2, r0
 800d928:	6019      	str	r1, [r3, #0]
 800d92a:	d1dd      	bne.n	800d8e8 <_free_r+0x24>
 800d92c:	6810      	ldr	r0, [r2, #0]
 800d92e:	6852      	ldr	r2, [r2, #4]
 800d930:	605a      	str	r2, [r3, #4]
 800d932:	4401      	add	r1, r0
 800d934:	6019      	str	r1, [r3, #0]
 800d936:	e7d7      	b.n	800d8e8 <_free_r+0x24>
 800d938:	d902      	bls.n	800d940 <_free_r+0x7c>
 800d93a:	230c      	movs	r3, #12
 800d93c:	602b      	str	r3, [r5, #0]
 800d93e:	e7d3      	b.n	800d8e8 <_free_r+0x24>
 800d940:	6820      	ldr	r0, [r4, #0]
 800d942:	1821      	adds	r1, r4, r0
 800d944:	428a      	cmp	r2, r1
 800d946:	bf04      	itt	eq
 800d948:	6811      	ldreq	r1, [r2, #0]
 800d94a:	6852      	ldreq	r2, [r2, #4]
 800d94c:	6062      	str	r2, [r4, #4]
 800d94e:	bf04      	itt	eq
 800d950:	1809      	addeq	r1, r1, r0
 800d952:	6021      	streq	r1, [r4, #0]
 800d954:	605c      	str	r4, [r3, #4]
 800d956:	e7c7      	b.n	800d8e8 <_free_r+0x24>
 800d958:	bd38      	pop	{r3, r4, r5, pc}
 800d95a:	bf00      	nop
 800d95c:	200006cc 	.word	0x200006cc

0800d960 <_malloc_r>:
 800d960:	b570      	push	{r4, r5, r6, lr}
 800d962:	1ccd      	adds	r5, r1, #3
 800d964:	f025 0503 	bic.w	r5, r5, #3
 800d968:	3508      	adds	r5, #8
 800d96a:	2d0c      	cmp	r5, #12
 800d96c:	bf38      	it	cc
 800d96e:	250c      	movcc	r5, #12
 800d970:	2d00      	cmp	r5, #0
 800d972:	4606      	mov	r6, r0
 800d974:	db01      	blt.n	800d97a <_malloc_r+0x1a>
 800d976:	42a9      	cmp	r1, r5
 800d978:	d903      	bls.n	800d982 <_malloc_r+0x22>
 800d97a:	230c      	movs	r3, #12
 800d97c:	6033      	str	r3, [r6, #0]
 800d97e:	2000      	movs	r0, #0
 800d980:	bd70      	pop	{r4, r5, r6, pc}
 800d982:	f000 fbae 	bl	800e0e2 <__malloc_lock>
 800d986:	4a21      	ldr	r2, [pc, #132]	; (800da0c <_malloc_r+0xac>)
 800d988:	6814      	ldr	r4, [r2, #0]
 800d98a:	4621      	mov	r1, r4
 800d98c:	b991      	cbnz	r1, 800d9b4 <_malloc_r+0x54>
 800d98e:	4c20      	ldr	r4, [pc, #128]	; (800da10 <_malloc_r+0xb0>)
 800d990:	6823      	ldr	r3, [r4, #0]
 800d992:	b91b      	cbnz	r3, 800d99c <_malloc_r+0x3c>
 800d994:	4630      	mov	r0, r6
 800d996:	f000 facf 	bl	800df38 <_sbrk_r>
 800d99a:	6020      	str	r0, [r4, #0]
 800d99c:	4629      	mov	r1, r5
 800d99e:	4630      	mov	r0, r6
 800d9a0:	f000 faca 	bl	800df38 <_sbrk_r>
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	d124      	bne.n	800d9f2 <_malloc_r+0x92>
 800d9a8:	230c      	movs	r3, #12
 800d9aa:	6033      	str	r3, [r6, #0]
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	f000 fb99 	bl	800e0e4 <__malloc_unlock>
 800d9b2:	e7e4      	b.n	800d97e <_malloc_r+0x1e>
 800d9b4:	680b      	ldr	r3, [r1, #0]
 800d9b6:	1b5b      	subs	r3, r3, r5
 800d9b8:	d418      	bmi.n	800d9ec <_malloc_r+0x8c>
 800d9ba:	2b0b      	cmp	r3, #11
 800d9bc:	d90f      	bls.n	800d9de <_malloc_r+0x7e>
 800d9be:	600b      	str	r3, [r1, #0]
 800d9c0:	50cd      	str	r5, [r1, r3]
 800d9c2:	18cc      	adds	r4, r1, r3
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	f000 fb8d 	bl	800e0e4 <__malloc_unlock>
 800d9ca:	f104 000b 	add.w	r0, r4, #11
 800d9ce:	1d23      	adds	r3, r4, #4
 800d9d0:	f020 0007 	bic.w	r0, r0, #7
 800d9d4:	1ac3      	subs	r3, r0, r3
 800d9d6:	d0d3      	beq.n	800d980 <_malloc_r+0x20>
 800d9d8:	425a      	negs	r2, r3
 800d9da:	50e2      	str	r2, [r4, r3]
 800d9dc:	e7d0      	b.n	800d980 <_malloc_r+0x20>
 800d9de:	428c      	cmp	r4, r1
 800d9e0:	684b      	ldr	r3, [r1, #4]
 800d9e2:	bf16      	itet	ne
 800d9e4:	6063      	strne	r3, [r4, #4]
 800d9e6:	6013      	streq	r3, [r2, #0]
 800d9e8:	460c      	movne	r4, r1
 800d9ea:	e7eb      	b.n	800d9c4 <_malloc_r+0x64>
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	6849      	ldr	r1, [r1, #4]
 800d9f0:	e7cc      	b.n	800d98c <_malloc_r+0x2c>
 800d9f2:	1cc4      	adds	r4, r0, #3
 800d9f4:	f024 0403 	bic.w	r4, r4, #3
 800d9f8:	42a0      	cmp	r0, r4
 800d9fa:	d005      	beq.n	800da08 <_malloc_r+0xa8>
 800d9fc:	1a21      	subs	r1, r4, r0
 800d9fe:	4630      	mov	r0, r6
 800da00:	f000 fa9a 	bl	800df38 <_sbrk_r>
 800da04:	3001      	adds	r0, #1
 800da06:	d0cf      	beq.n	800d9a8 <_malloc_r+0x48>
 800da08:	6025      	str	r5, [r4, #0]
 800da0a:	e7db      	b.n	800d9c4 <_malloc_r+0x64>
 800da0c:	200006cc 	.word	0x200006cc
 800da10:	200006d0 	.word	0x200006d0

0800da14 <__ssputs_r>:
 800da14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da18:	688e      	ldr	r6, [r1, #8]
 800da1a:	429e      	cmp	r6, r3
 800da1c:	4682      	mov	sl, r0
 800da1e:	460c      	mov	r4, r1
 800da20:	4690      	mov	r8, r2
 800da22:	4699      	mov	r9, r3
 800da24:	d837      	bhi.n	800da96 <__ssputs_r+0x82>
 800da26:	898a      	ldrh	r2, [r1, #12]
 800da28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da2c:	d031      	beq.n	800da92 <__ssputs_r+0x7e>
 800da2e:	6825      	ldr	r5, [r4, #0]
 800da30:	6909      	ldr	r1, [r1, #16]
 800da32:	1a6f      	subs	r7, r5, r1
 800da34:	6965      	ldr	r5, [r4, #20]
 800da36:	2302      	movs	r3, #2
 800da38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da3c:	fb95 f5f3 	sdiv	r5, r5, r3
 800da40:	f109 0301 	add.w	r3, r9, #1
 800da44:	443b      	add	r3, r7
 800da46:	429d      	cmp	r5, r3
 800da48:	bf38      	it	cc
 800da4a:	461d      	movcc	r5, r3
 800da4c:	0553      	lsls	r3, r2, #21
 800da4e:	d530      	bpl.n	800dab2 <__ssputs_r+0x9e>
 800da50:	4629      	mov	r1, r5
 800da52:	f7ff ff85 	bl	800d960 <_malloc_r>
 800da56:	4606      	mov	r6, r0
 800da58:	b950      	cbnz	r0, 800da70 <__ssputs_r+0x5c>
 800da5a:	230c      	movs	r3, #12
 800da5c:	f8ca 3000 	str.w	r3, [sl]
 800da60:	89a3      	ldrh	r3, [r4, #12]
 800da62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da66:	81a3      	strh	r3, [r4, #12]
 800da68:	f04f 30ff 	mov.w	r0, #4294967295
 800da6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da70:	463a      	mov	r2, r7
 800da72:	6921      	ldr	r1, [r4, #16]
 800da74:	f7fd fe26 	bl	800b6c4 <memcpy>
 800da78:	89a3      	ldrh	r3, [r4, #12]
 800da7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da82:	81a3      	strh	r3, [r4, #12]
 800da84:	6126      	str	r6, [r4, #16]
 800da86:	6165      	str	r5, [r4, #20]
 800da88:	443e      	add	r6, r7
 800da8a:	1bed      	subs	r5, r5, r7
 800da8c:	6026      	str	r6, [r4, #0]
 800da8e:	60a5      	str	r5, [r4, #8]
 800da90:	464e      	mov	r6, r9
 800da92:	454e      	cmp	r6, r9
 800da94:	d900      	bls.n	800da98 <__ssputs_r+0x84>
 800da96:	464e      	mov	r6, r9
 800da98:	4632      	mov	r2, r6
 800da9a:	4641      	mov	r1, r8
 800da9c:	6820      	ldr	r0, [r4, #0]
 800da9e:	f000 fb07 	bl	800e0b0 <memmove>
 800daa2:	68a3      	ldr	r3, [r4, #8]
 800daa4:	1b9b      	subs	r3, r3, r6
 800daa6:	60a3      	str	r3, [r4, #8]
 800daa8:	6823      	ldr	r3, [r4, #0]
 800daaa:	441e      	add	r6, r3
 800daac:	6026      	str	r6, [r4, #0]
 800daae:	2000      	movs	r0, #0
 800dab0:	e7dc      	b.n	800da6c <__ssputs_r+0x58>
 800dab2:	462a      	mov	r2, r5
 800dab4:	f000 fb17 	bl	800e0e6 <_realloc_r>
 800dab8:	4606      	mov	r6, r0
 800daba:	2800      	cmp	r0, #0
 800dabc:	d1e2      	bne.n	800da84 <__ssputs_r+0x70>
 800dabe:	6921      	ldr	r1, [r4, #16]
 800dac0:	4650      	mov	r0, sl
 800dac2:	f7ff feff 	bl	800d8c4 <_free_r>
 800dac6:	e7c8      	b.n	800da5a <__ssputs_r+0x46>

0800dac8 <_svfiprintf_r>:
 800dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dacc:	461d      	mov	r5, r3
 800dace:	898b      	ldrh	r3, [r1, #12]
 800dad0:	061f      	lsls	r7, r3, #24
 800dad2:	b09d      	sub	sp, #116	; 0x74
 800dad4:	4680      	mov	r8, r0
 800dad6:	460c      	mov	r4, r1
 800dad8:	4616      	mov	r6, r2
 800dada:	d50f      	bpl.n	800dafc <_svfiprintf_r+0x34>
 800dadc:	690b      	ldr	r3, [r1, #16]
 800dade:	b96b      	cbnz	r3, 800dafc <_svfiprintf_r+0x34>
 800dae0:	2140      	movs	r1, #64	; 0x40
 800dae2:	f7ff ff3d 	bl	800d960 <_malloc_r>
 800dae6:	6020      	str	r0, [r4, #0]
 800dae8:	6120      	str	r0, [r4, #16]
 800daea:	b928      	cbnz	r0, 800daf8 <_svfiprintf_r+0x30>
 800daec:	230c      	movs	r3, #12
 800daee:	f8c8 3000 	str.w	r3, [r8]
 800daf2:	f04f 30ff 	mov.w	r0, #4294967295
 800daf6:	e0c8      	b.n	800dc8a <_svfiprintf_r+0x1c2>
 800daf8:	2340      	movs	r3, #64	; 0x40
 800dafa:	6163      	str	r3, [r4, #20]
 800dafc:	2300      	movs	r3, #0
 800dafe:	9309      	str	r3, [sp, #36]	; 0x24
 800db00:	2320      	movs	r3, #32
 800db02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db06:	2330      	movs	r3, #48	; 0x30
 800db08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db0c:	9503      	str	r5, [sp, #12]
 800db0e:	f04f 0b01 	mov.w	fp, #1
 800db12:	4637      	mov	r7, r6
 800db14:	463d      	mov	r5, r7
 800db16:	f815 3b01 	ldrb.w	r3, [r5], #1
 800db1a:	b10b      	cbz	r3, 800db20 <_svfiprintf_r+0x58>
 800db1c:	2b25      	cmp	r3, #37	; 0x25
 800db1e:	d13e      	bne.n	800db9e <_svfiprintf_r+0xd6>
 800db20:	ebb7 0a06 	subs.w	sl, r7, r6
 800db24:	d00b      	beq.n	800db3e <_svfiprintf_r+0x76>
 800db26:	4653      	mov	r3, sl
 800db28:	4632      	mov	r2, r6
 800db2a:	4621      	mov	r1, r4
 800db2c:	4640      	mov	r0, r8
 800db2e:	f7ff ff71 	bl	800da14 <__ssputs_r>
 800db32:	3001      	adds	r0, #1
 800db34:	f000 80a4 	beq.w	800dc80 <_svfiprintf_r+0x1b8>
 800db38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db3a:	4453      	add	r3, sl
 800db3c:	9309      	str	r3, [sp, #36]	; 0x24
 800db3e:	783b      	ldrb	r3, [r7, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	f000 809d 	beq.w	800dc80 <_svfiprintf_r+0x1b8>
 800db46:	2300      	movs	r3, #0
 800db48:	f04f 32ff 	mov.w	r2, #4294967295
 800db4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db50:	9304      	str	r3, [sp, #16]
 800db52:	9307      	str	r3, [sp, #28]
 800db54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db58:	931a      	str	r3, [sp, #104]	; 0x68
 800db5a:	462f      	mov	r7, r5
 800db5c:	2205      	movs	r2, #5
 800db5e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800db62:	4850      	ldr	r0, [pc, #320]	; (800dca4 <_svfiprintf_r+0x1dc>)
 800db64:	f7f2 fb3c 	bl	80001e0 <memchr>
 800db68:	9b04      	ldr	r3, [sp, #16]
 800db6a:	b9d0      	cbnz	r0, 800dba2 <_svfiprintf_r+0xda>
 800db6c:	06d9      	lsls	r1, r3, #27
 800db6e:	bf44      	itt	mi
 800db70:	2220      	movmi	r2, #32
 800db72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db76:	071a      	lsls	r2, r3, #28
 800db78:	bf44      	itt	mi
 800db7a:	222b      	movmi	r2, #43	; 0x2b
 800db7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db80:	782a      	ldrb	r2, [r5, #0]
 800db82:	2a2a      	cmp	r2, #42	; 0x2a
 800db84:	d015      	beq.n	800dbb2 <_svfiprintf_r+0xea>
 800db86:	9a07      	ldr	r2, [sp, #28]
 800db88:	462f      	mov	r7, r5
 800db8a:	2000      	movs	r0, #0
 800db8c:	250a      	movs	r5, #10
 800db8e:	4639      	mov	r1, r7
 800db90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db94:	3b30      	subs	r3, #48	; 0x30
 800db96:	2b09      	cmp	r3, #9
 800db98:	d94d      	bls.n	800dc36 <_svfiprintf_r+0x16e>
 800db9a:	b1b8      	cbz	r0, 800dbcc <_svfiprintf_r+0x104>
 800db9c:	e00f      	b.n	800dbbe <_svfiprintf_r+0xf6>
 800db9e:	462f      	mov	r7, r5
 800dba0:	e7b8      	b.n	800db14 <_svfiprintf_r+0x4c>
 800dba2:	4a40      	ldr	r2, [pc, #256]	; (800dca4 <_svfiprintf_r+0x1dc>)
 800dba4:	1a80      	subs	r0, r0, r2
 800dba6:	fa0b f000 	lsl.w	r0, fp, r0
 800dbaa:	4318      	orrs	r0, r3
 800dbac:	9004      	str	r0, [sp, #16]
 800dbae:	463d      	mov	r5, r7
 800dbb0:	e7d3      	b.n	800db5a <_svfiprintf_r+0x92>
 800dbb2:	9a03      	ldr	r2, [sp, #12]
 800dbb4:	1d11      	adds	r1, r2, #4
 800dbb6:	6812      	ldr	r2, [r2, #0]
 800dbb8:	9103      	str	r1, [sp, #12]
 800dbba:	2a00      	cmp	r2, #0
 800dbbc:	db01      	blt.n	800dbc2 <_svfiprintf_r+0xfa>
 800dbbe:	9207      	str	r2, [sp, #28]
 800dbc0:	e004      	b.n	800dbcc <_svfiprintf_r+0x104>
 800dbc2:	4252      	negs	r2, r2
 800dbc4:	f043 0302 	orr.w	r3, r3, #2
 800dbc8:	9207      	str	r2, [sp, #28]
 800dbca:	9304      	str	r3, [sp, #16]
 800dbcc:	783b      	ldrb	r3, [r7, #0]
 800dbce:	2b2e      	cmp	r3, #46	; 0x2e
 800dbd0:	d10c      	bne.n	800dbec <_svfiprintf_r+0x124>
 800dbd2:	787b      	ldrb	r3, [r7, #1]
 800dbd4:	2b2a      	cmp	r3, #42	; 0x2a
 800dbd6:	d133      	bne.n	800dc40 <_svfiprintf_r+0x178>
 800dbd8:	9b03      	ldr	r3, [sp, #12]
 800dbda:	1d1a      	adds	r2, r3, #4
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	9203      	str	r2, [sp, #12]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	bfb8      	it	lt
 800dbe4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbe8:	3702      	adds	r7, #2
 800dbea:	9305      	str	r3, [sp, #20]
 800dbec:	4d2e      	ldr	r5, [pc, #184]	; (800dca8 <_svfiprintf_r+0x1e0>)
 800dbee:	7839      	ldrb	r1, [r7, #0]
 800dbf0:	2203      	movs	r2, #3
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	f7f2 faf4 	bl	80001e0 <memchr>
 800dbf8:	b138      	cbz	r0, 800dc0a <_svfiprintf_r+0x142>
 800dbfa:	2340      	movs	r3, #64	; 0x40
 800dbfc:	1b40      	subs	r0, r0, r5
 800dbfe:	fa03 f000 	lsl.w	r0, r3, r0
 800dc02:	9b04      	ldr	r3, [sp, #16]
 800dc04:	4303      	orrs	r3, r0
 800dc06:	3701      	adds	r7, #1
 800dc08:	9304      	str	r3, [sp, #16]
 800dc0a:	7839      	ldrb	r1, [r7, #0]
 800dc0c:	4827      	ldr	r0, [pc, #156]	; (800dcac <_svfiprintf_r+0x1e4>)
 800dc0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc12:	2206      	movs	r2, #6
 800dc14:	1c7e      	adds	r6, r7, #1
 800dc16:	f7f2 fae3 	bl	80001e0 <memchr>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d038      	beq.n	800dc90 <_svfiprintf_r+0x1c8>
 800dc1e:	4b24      	ldr	r3, [pc, #144]	; (800dcb0 <_svfiprintf_r+0x1e8>)
 800dc20:	bb13      	cbnz	r3, 800dc68 <_svfiprintf_r+0x1a0>
 800dc22:	9b03      	ldr	r3, [sp, #12]
 800dc24:	3307      	adds	r3, #7
 800dc26:	f023 0307 	bic.w	r3, r3, #7
 800dc2a:	3308      	adds	r3, #8
 800dc2c:	9303      	str	r3, [sp, #12]
 800dc2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc30:	444b      	add	r3, r9
 800dc32:	9309      	str	r3, [sp, #36]	; 0x24
 800dc34:	e76d      	b.n	800db12 <_svfiprintf_r+0x4a>
 800dc36:	fb05 3202 	mla	r2, r5, r2, r3
 800dc3a:	2001      	movs	r0, #1
 800dc3c:	460f      	mov	r7, r1
 800dc3e:	e7a6      	b.n	800db8e <_svfiprintf_r+0xc6>
 800dc40:	2300      	movs	r3, #0
 800dc42:	3701      	adds	r7, #1
 800dc44:	9305      	str	r3, [sp, #20]
 800dc46:	4619      	mov	r1, r3
 800dc48:	250a      	movs	r5, #10
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc50:	3a30      	subs	r2, #48	; 0x30
 800dc52:	2a09      	cmp	r2, #9
 800dc54:	d903      	bls.n	800dc5e <_svfiprintf_r+0x196>
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d0c8      	beq.n	800dbec <_svfiprintf_r+0x124>
 800dc5a:	9105      	str	r1, [sp, #20]
 800dc5c:	e7c6      	b.n	800dbec <_svfiprintf_r+0x124>
 800dc5e:	fb05 2101 	mla	r1, r5, r1, r2
 800dc62:	2301      	movs	r3, #1
 800dc64:	4607      	mov	r7, r0
 800dc66:	e7f0      	b.n	800dc4a <_svfiprintf_r+0x182>
 800dc68:	ab03      	add	r3, sp, #12
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	4622      	mov	r2, r4
 800dc6e:	4b11      	ldr	r3, [pc, #68]	; (800dcb4 <_svfiprintf_r+0x1ec>)
 800dc70:	a904      	add	r1, sp, #16
 800dc72:	4640      	mov	r0, r8
 800dc74:	f7fd fdce 	bl	800b814 <_printf_float>
 800dc78:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dc7c:	4681      	mov	r9, r0
 800dc7e:	d1d6      	bne.n	800dc2e <_svfiprintf_r+0x166>
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	065b      	lsls	r3, r3, #25
 800dc84:	f53f af35 	bmi.w	800daf2 <_svfiprintf_r+0x2a>
 800dc88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc8a:	b01d      	add	sp, #116	; 0x74
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc90:	ab03      	add	r3, sp, #12
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	4622      	mov	r2, r4
 800dc96:	4b07      	ldr	r3, [pc, #28]	; (800dcb4 <_svfiprintf_r+0x1ec>)
 800dc98:	a904      	add	r1, sp, #16
 800dc9a:	4640      	mov	r0, r8
 800dc9c:	f7fe f870 	bl	800bd80 <_printf_i>
 800dca0:	e7ea      	b.n	800dc78 <_svfiprintf_r+0x1b0>
 800dca2:	bf00      	nop
 800dca4:	0800e8dc 	.word	0x0800e8dc
 800dca8:	0800e8e2 	.word	0x0800e8e2
 800dcac:	0800e8e6 	.word	0x0800e8e6
 800dcb0:	0800b815 	.word	0x0800b815
 800dcb4:	0800da15 	.word	0x0800da15

0800dcb8 <__sfputc_r>:
 800dcb8:	6893      	ldr	r3, [r2, #8]
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	b410      	push	{r4}
 800dcc0:	6093      	str	r3, [r2, #8]
 800dcc2:	da08      	bge.n	800dcd6 <__sfputc_r+0x1e>
 800dcc4:	6994      	ldr	r4, [r2, #24]
 800dcc6:	42a3      	cmp	r3, r4
 800dcc8:	db01      	blt.n	800dcce <__sfputc_r+0x16>
 800dcca:	290a      	cmp	r1, #10
 800dccc:	d103      	bne.n	800dcd6 <__sfputc_r+0x1e>
 800dcce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcd2:	f7fe ba13 	b.w	800c0fc <__swbuf_r>
 800dcd6:	6813      	ldr	r3, [r2, #0]
 800dcd8:	1c58      	adds	r0, r3, #1
 800dcda:	6010      	str	r0, [r2, #0]
 800dcdc:	7019      	strb	r1, [r3, #0]
 800dcde:	4608      	mov	r0, r1
 800dce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dce4:	4770      	bx	lr

0800dce6 <__sfputs_r>:
 800dce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce8:	4606      	mov	r6, r0
 800dcea:	460f      	mov	r7, r1
 800dcec:	4614      	mov	r4, r2
 800dcee:	18d5      	adds	r5, r2, r3
 800dcf0:	42ac      	cmp	r4, r5
 800dcf2:	d101      	bne.n	800dcf8 <__sfputs_r+0x12>
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	e007      	b.n	800dd08 <__sfputs_r+0x22>
 800dcf8:	463a      	mov	r2, r7
 800dcfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f7ff ffda 	bl	800dcb8 <__sfputc_r>
 800dd04:	1c43      	adds	r3, r0, #1
 800dd06:	d1f3      	bne.n	800dcf0 <__sfputs_r+0xa>
 800dd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd0c <_vfiprintf_r>:
 800dd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd10:	460c      	mov	r4, r1
 800dd12:	b09d      	sub	sp, #116	; 0x74
 800dd14:	4617      	mov	r7, r2
 800dd16:	461d      	mov	r5, r3
 800dd18:	4606      	mov	r6, r0
 800dd1a:	b118      	cbz	r0, 800dd24 <_vfiprintf_r+0x18>
 800dd1c:	6983      	ldr	r3, [r0, #24]
 800dd1e:	b90b      	cbnz	r3, 800dd24 <_vfiprintf_r+0x18>
 800dd20:	f7ff f9e2 	bl	800d0e8 <__sinit>
 800dd24:	4b7c      	ldr	r3, [pc, #496]	; (800df18 <_vfiprintf_r+0x20c>)
 800dd26:	429c      	cmp	r4, r3
 800dd28:	d158      	bne.n	800dddc <_vfiprintf_r+0xd0>
 800dd2a:	6874      	ldr	r4, [r6, #4]
 800dd2c:	89a3      	ldrh	r3, [r4, #12]
 800dd2e:	0718      	lsls	r0, r3, #28
 800dd30:	d55e      	bpl.n	800ddf0 <_vfiprintf_r+0xe4>
 800dd32:	6923      	ldr	r3, [r4, #16]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d05b      	beq.n	800ddf0 <_vfiprintf_r+0xe4>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd3c:	2320      	movs	r3, #32
 800dd3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd42:	2330      	movs	r3, #48	; 0x30
 800dd44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd48:	9503      	str	r5, [sp, #12]
 800dd4a:	f04f 0b01 	mov.w	fp, #1
 800dd4e:	46b8      	mov	r8, r7
 800dd50:	4645      	mov	r5, r8
 800dd52:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dd56:	b10b      	cbz	r3, 800dd5c <_vfiprintf_r+0x50>
 800dd58:	2b25      	cmp	r3, #37	; 0x25
 800dd5a:	d154      	bne.n	800de06 <_vfiprintf_r+0xfa>
 800dd5c:	ebb8 0a07 	subs.w	sl, r8, r7
 800dd60:	d00b      	beq.n	800dd7a <_vfiprintf_r+0x6e>
 800dd62:	4653      	mov	r3, sl
 800dd64:	463a      	mov	r2, r7
 800dd66:	4621      	mov	r1, r4
 800dd68:	4630      	mov	r0, r6
 800dd6a:	f7ff ffbc 	bl	800dce6 <__sfputs_r>
 800dd6e:	3001      	adds	r0, #1
 800dd70:	f000 80c2 	beq.w	800def8 <_vfiprintf_r+0x1ec>
 800dd74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd76:	4453      	add	r3, sl
 800dd78:	9309      	str	r3, [sp, #36]	; 0x24
 800dd7a:	f898 3000 	ldrb.w	r3, [r8]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	f000 80ba 	beq.w	800def8 <_vfiprintf_r+0x1ec>
 800dd84:	2300      	movs	r3, #0
 800dd86:	f04f 32ff 	mov.w	r2, #4294967295
 800dd8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd8e:	9304      	str	r3, [sp, #16]
 800dd90:	9307      	str	r3, [sp, #28]
 800dd92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd96:	931a      	str	r3, [sp, #104]	; 0x68
 800dd98:	46a8      	mov	r8, r5
 800dd9a:	2205      	movs	r2, #5
 800dd9c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dda0:	485e      	ldr	r0, [pc, #376]	; (800df1c <_vfiprintf_r+0x210>)
 800dda2:	f7f2 fa1d 	bl	80001e0 <memchr>
 800dda6:	9b04      	ldr	r3, [sp, #16]
 800dda8:	bb78      	cbnz	r0, 800de0a <_vfiprintf_r+0xfe>
 800ddaa:	06d9      	lsls	r1, r3, #27
 800ddac:	bf44      	itt	mi
 800ddae:	2220      	movmi	r2, #32
 800ddb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ddb4:	071a      	lsls	r2, r3, #28
 800ddb6:	bf44      	itt	mi
 800ddb8:	222b      	movmi	r2, #43	; 0x2b
 800ddba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ddbe:	782a      	ldrb	r2, [r5, #0]
 800ddc0:	2a2a      	cmp	r2, #42	; 0x2a
 800ddc2:	d02a      	beq.n	800de1a <_vfiprintf_r+0x10e>
 800ddc4:	9a07      	ldr	r2, [sp, #28]
 800ddc6:	46a8      	mov	r8, r5
 800ddc8:	2000      	movs	r0, #0
 800ddca:	250a      	movs	r5, #10
 800ddcc:	4641      	mov	r1, r8
 800ddce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddd2:	3b30      	subs	r3, #48	; 0x30
 800ddd4:	2b09      	cmp	r3, #9
 800ddd6:	d969      	bls.n	800deac <_vfiprintf_r+0x1a0>
 800ddd8:	b360      	cbz	r0, 800de34 <_vfiprintf_r+0x128>
 800ddda:	e024      	b.n	800de26 <_vfiprintf_r+0x11a>
 800dddc:	4b50      	ldr	r3, [pc, #320]	; (800df20 <_vfiprintf_r+0x214>)
 800ddde:	429c      	cmp	r4, r3
 800dde0:	d101      	bne.n	800dde6 <_vfiprintf_r+0xda>
 800dde2:	68b4      	ldr	r4, [r6, #8]
 800dde4:	e7a2      	b.n	800dd2c <_vfiprintf_r+0x20>
 800dde6:	4b4f      	ldr	r3, [pc, #316]	; (800df24 <_vfiprintf_r+0x218>)
 800dde8:	429c      	cmp	r4, r3
 800ddea:	bf08      	it	eq
 800ddec:	68f4      	ldreq	r4, [r6, #12]
 800ddee:	e79d      	b.n	800dd2c <_vfiprintf_r+0x20>
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f7fe f9d4 	bl	800c1a0 <__swsetup_r>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	d09d      	beq.n	800dd38 <_vfiprintf_r+0x2c>
 800ddfc:	f04f 30ff 	mov.w	r0, #4294967295
 800de00:	b01d      	add	sp, #116	; 0x74
 800de02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de06:	46a8      	mov	r8, r5
 800de08:	e7a2      	b.n	800dd50 <_vfiprintf_r+0x44>
 800de0a:	4a44      	ldr	r2, [pc, #272]	; (800df1c <_vfiprintf_r+0x210>)
 800de0c:	1a80      	subs	r0, r0, r2
 800de0e:	fa0b f000 	lsl.w	r0, fp, r0
 800de12:	4318      	orrs	r0, r3
 800de14:	9004      	str	r0, [sp, #16]
 800de16:	4645      	mov	r5, r8
 800de18:	e7be      	b.n	800dd98 <_vfiprintf_r+0x8c>
 800de1a:	9a03      	ldr	r2, [sp, #12]
 800de1c:	1d11      	adds	r1, r2, #4
 800de1e:	6812      	ldr	r2, [r2, #0]
 800de20:	9103      	str	r1, [sp, #12]
 800de22:	2a00      	cmp	r2, #0
 800de24:	db01      	blt.n	800de2a <_vfiprintf_r+0x11e>
 800de26:	9207      	str	r2, [sp, #28]
 800de28:	e004      	b.n	800de34 <_vfiprintf_r+0x128>
 800de2a:	4252      	negs	r2, r2
 800de2c:	f043 0302 	orr.w	r3, r3, #2
 800de30:	9207      	str	r2, [sp, #28]
 800de32:	9304      	str	r3, [sp, #16]
 800de34:	f898 3000 	ldrb.w	r3, [r8]
 800de38:	2b2e      	cmp	r3, #46	; 0x2e
 800de3a:	d10e      	bne.n	800de5a <_vfiprintf_r+0x14e>
 800de3c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800de40:	2b2a      	cmp	r3, #42	; 0x2a
 800de42:	d138      	bne.n	800deb6 <_vfiprintf_r+0x1aa>
 800de44:	9b03      	ldr	r3, [sp, #12]
 800de46:	1d1a      	adds	r2, r3, #4
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	9203      	str	r2, [sp, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	bfb8      	it	lt
 800de50:	f04f 33ff 	movlt.w	r3, #4294967295
 800de54:	f108 0802 	add.w	r8, r8, #2
 800de58:	9305      	str	r3, [sp, #20]
 800de5a:	4d33      	ldr	r5, [pc, #204]	; (800df28 <_vfiprintf_r+0x21c>)
 800de5c:	f898 1000 	ldrb.w	r1, [r8]
 800de60:	2203      	movs	r2, #3
 800de62:	4628      	mov	r0, r5
 800de64:	f7f2 f9bc 	bl	80001e0 <memchr>
 800de68:	b140      	cbz	r0, 800de7c <_vfiprintf_r+0x170>
 800de6a:	2340      	movs	r3, #64	; 0x40
 800de6c:	1b40      	subs	r0, r0, r5
 800de6e:	fa03 f000 	lsl.w	r0, r3, r0
 800de72:	9b04      	ldr	r3, [sp, #16]
 800de74:	4303      	orrs	r3, r0
 800de76:	f108 0801 	add.w	r8, r8, #1
 800de7a:	9304      	str	r3, [sp, #16]
 800de7c:	f898 1000 	ldrb.w	r1, [r8]
 800de80:	482a      	ldr	r0, [pc, #168]	; (800df2c <_vfiprintf_r+0x220>)
 800de82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de86:	2206      	movs	r2, #6
 800de88:	f108 0701 	add.w	r7, r8, #1
 800de8c:	f7f2 f9a8 	bl	80001e0 <memchr>
 800de90:	2800      	cmp	r0, #0
 800de92:	d037      	beq.n	800df04 <_vfiprintf_r+0x1f8>
 800de94:	4b26      	ldr	r3, [pc, #152]	; (800df30 <_vfiprintf_r+0x224>)
 800de96:	bb1b      	cbnz	r3, 800dee0 <_vfiprintf_r+0x1d4>
 800de98:	9b03      	ldr	r3, [sp, #12]
 800de9a:	3307      	adds	r3, #7
 800de9c:	f023 0307 	bic.w	r3, r3, #7
 800dea0:	3308      	adds	r3, #8
 800dea2:	9303      	str	r3, [sp, #12]
 800dea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dea6:	444b      	add	r3, r9
 800dea8:	9309      	str	r3, [sp, #36]	; 0x24
 800deaa:	e750      	b.n	800dd4e <_vfiprintf_r+0x42>
 800deac:	fb05 3202 	mla	r2, r5, r2, r3
 800deb0:	2001      	movs	r0, #1
 800deb2:	4688      	mov	r8, r1
 800deb4:	e78a      	b.n	800ddcc <_vfiprintf_r+0xc0>
 800deb6:	2300      	movs	r3, #0
 800deb8:	f108 0801 	add.w	r8, r8, #1
 800debc:	9305      	str	r3, [sp, #20]
 800debe:	4619      	mov	r1, r3
 800dec0:	250a      	movs	r5, #10
 800dec2:	4640      	mov	r0, r8
 800dec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dec8:	3a30      	subs	r2, #48	; 0x30
 800deca:	2a09      	cmp	r2, #9
 800decc:	d903      	bls.n	800ded6 <_vfiprintf_r+0x1ca>
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d0c3      	beq.n	800de5a <_vfiprintf_r+0x14e>
 800ded2:	9105      	str	r1, [sp, #20]
 800ded4:	e7c1      	b.n	800de5a <_vfiprintf_r+0x14e>
 800ded6:	fb05 2101 	mla	r1, r5, r1, r2
 800deda:	2301      	movs	r3, #1
 800dedc:	4680      	mov	r8, r0
 800dede:	e7f0      	b.n	800dec2 <_vfiprintf_r+0x1b6>
 800dee0:	ab03      	add	r3, sp, #12
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	4622      	mov	r2, r4
 800dee6:	4b13      	ldr	r3, [pc, #76]	; (800df34 <_vfiprintf_r+0x228>)
 800dee8:	a904      	add	r1, sp, #16
 800deea:	4630      	mov	r0, r6
 800deec:	f7fd fc92 	bl	800b814 <_printf_float>
 800def0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800def4:	4681      	mov	r9, r0
 800def6:	d1d5      	bne.n	800dea4 <_vfiprintf_r+0x198>
 800def8:	89a3      	ldrh	r3, [r4, #12]
 800defa:	065b      	lsls	r3, r3, #25
 800defc:	f53f af7e 	bmi.w	800ddfc <_vfiprintf_r+0xf0>
 800df00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df02:	e77d      	b.n	800de00 <_vfiprintf_r+0xf4>
 800df04:	ab03      	add	r3, sp, #12
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	4622      	mov	r2, r4
 800df0a:	4b0a      	ldr	r3, [pc, #40]	; (800df34 <_vfiprintf_r+0x228>)
 800df0c:	a904      	add	r1, sp, #16
 800df0e:	4630      	mov	r0, r6
 800df10:	f7fd ff36 	bl	800bd80 <_printf_i>
 800df14:	e7ec      	b.n	800def0 <_vfiprintf_r+0x1e4>
 800df16:	bf00      	nop
 800df18:	0800e7a0 	.word	0x0800e7a0
 800df1c:	0800e8dc 	.word	0x0800e8dc
 800df20:	0800e7c0 	.word	0x0800e7c0
 800df24:	0800e780 	.word	0x0800e780
 800df28:	0800e8e2 	.word	0x0800e8e2
 800df2c:	0800e8e6 	.word	0x0800e8e6
 800df30:	0800b815 	.word	0x0800b815
 800df34:	0800dce7 	.word	0x0800dce7

0800df38 <_sbrk_r>:
 800df38:	b538      	push	{r3, r4, r5, lr}
 800df3a:	4c06      	ldr	r4, [pc, #24]	; (800df54 <_sbrk_r+0x1c>)
 800df3c:	2300      	movs	r3, #0
 800df3e:	4605      	mov	r5, r0
 800df40:	4608      	mov	r0, r1
 800df42:	6023      	str	r3, [r4, #0]
 800df44:	f7f4 fd84 	bl	8002a50 <_sbrk>
 800df48:	1c43      	adds	r3, r0, #1
 800df4a:	d102      	bne.n	800df52 <_sbrk_r+0x1a>
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	b103      	cbz	r3, 800df52 <_sbrk_r+0x1a>
 800df50:	602b      	str	r3, [r5, #0]
 800df52:	bd38      	pop	{r3, r4, r5, pc}
 800df54:	20006dfc 	.word	0x20006dfc

0800df58 <__sread>:
 800df58:	b510      	push	{r4, lr}
 800df5a:	460c      	mov	r4, r1
 800df5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df60:	f000 f8e8 	bl	800e134 <_read_r>
 800df64:	2800      	cmp	r0, #0
 800df66:	bfab      	itete	ge
 800df68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df6a:	89a3      	ldrhlt	r3, [r4, #12]
 800df6c:	181b      	addge	r3, r3, r0
 800df6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df72:	bfac      	ite	ge
 800df74:	6563      	strge	r3, [r4, #84]	; 0x54
 800df76:	81a3      	strhlt	r3, [r4, #12]
 800df78:	bd10      	pop	{r4, pc}

0800df7a <__swrite>:
 800df7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df7e:	461f      	mov	r7, r3
 800df80:	898b      	ldrh	r3, [r1, #12]
 800df82:	05db      	lsls	r3, r3, #23
 800df84:	4605      	mov	r5, r0
 800df86:	460c      	mov	r4, r1
 800df88:	4616      	mov	r6, r2
 800df8a:	d505      	bpl.n	800df98 <__swrite+0x1e>
 800df8c:	2302      	movs	r3, #2
 800df8e:	2200      	movs	r2, #0
 800df90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df94:	f000 f868 	bl	800e068 <_lseek_r>
 800df98:	89a3      	ldrh	r3, [r4, #12]
 800df9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dfa2:	81a3      	strh	r3, [r4, #12]
 800dfa4:	4632      	mov	r2, r6
 800dfa6:	463b      	mov	r3, r7
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfae:	f000 b817 	b.w	800dfe0 <_write_r>

0800dfb2 <__sseek>:
 800dfb2:	b510      	push	{r4, lr}
 800dfb4:	460c      	mov	r4, r1
 800dfb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfba:	f000 f855 	bl	800e068 <_lseek_r>
 800dfbe:	1c43      	adds	r3, r0, #1
 800dfc0:	89a3      	ldrh	r3, [r4, #12]
 800dfc2:	bf15      	itete	ne
 800dfc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dfc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dfca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dfce:	81a3      	strheq	r3, [r4, #12]
 800dfd0:	bf18      	it	ne
 800dfd2:	81a3      	strhne	r3, [r4, #12]
 800dfd4:	bd10      	pop	{r4, pc}

0800dfd6 <__sclose>:
 800dfd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfda:	f000 b813 	b.w	800e004 <_close_r>
	...

0800dfe0 <_write_r>:
 800dfe0:	b538      	push	{r3, r4, r5, lr}
 800dfe2:	4c07      	ldr	r4, [pc, #28]	; (800e000 <_write_r+0x20>)
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	4608      	mov	r0, r1
 800dfe8:	4611      	mov	r1, r2
 800dfea:	2200      	movs	r2, #0
 800dfec:	6022      	str	r2, [r4, #0]
 800dfee:	461a      	mov	r2, r3
 800dff0:	f7f4 f95f 	bl	80022b2 <_write>
 800dff4:	1c43      	adds	r3, r0, #1
 800dff6:	d102      	bne.n	800dffe <_write_r+0x1e>
 800dff8:	6823      	ldr	r3, [r4, #0]
 800dffa:	b103      	cbz	r3, 800dffe <_write_r+0x1e>
 800dffc:	602b      	str	r3, [r5, #0]
 800dffe:	bd38      	pop	{r3, r4, r5, pc}
 800e000:	20006dfc 	.word	0x20006dfc

0800e004 <_close_r>:
 800e004:	b538      	push	{r3, r4, r5, lr}
 800e006:	4c06      	ldr	r4, [pc, #24]	; (800e020 <_close_r+0x1c>)
 800e008:	2300      	movs	r3, #0
 800e00a:	4605      	mov	r5, r0
 800e00c:	4608      	mov	r0, r1
 800e00e:	6023      	str	r3, [r4, #0]
 800e010:	f7f4 fce9 	bl	80029e6 <_close>
 800e014:	1c43      	adds	r3, r0, #1
 800e016:	d102      	bne.n	800e01e <_close_r+0x1a>
 800e018:	6823      	ldr	r3, [r4, #0]
 800e01a:	b103      	cbz	r3, 800e01e <_close_r+0x1a>
 800e01c:	602b      	str	r3, [r5, #0]
 800e01e:	bd38      	pop	{r3, r4, r5, pc}
 800e020:	20006dfc 	.word	0x20006dfc

0800e024 <_fstat_r>:
 800e024:	b538      	push	{r3, r4, r5, lr}
 800e026:	4c07      	ldr	r4, [pc, #28]	; (800e044 <_fstat_r+0x20>)
 800e028:	2300      	movs	r3, #0
 800e02a:	4605      	mov	r5, r0
 800e02c:	4608      	mov	r0, r1
 800e02e:	4611      	mov	r1, r2
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	f7f4 fce4 	bl	80029fe <_fstat>
 800e036:	1c43      	adds	r3, r0, #1
 800e038:	d102      	bne.n	800e040 <_fstat_r+0x1c>
 800e03a:	6823      	ldr	r3, [r4, #0]
 800e03c:	b103      	cbz	r3, 800e040 <_fstat_r+0x1c>
 800e03e:	602b      	str	r3, [r5, #0]
 800e040:	bd38      	pop	{r3, r4, r5, pc}
 800e042:	bf00      	nop
 800e044:	20006dfc 	.word	0x20006dfc

0800e048 <_isatty_r>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	4c06      	ldr	r4, [pc, #24]	; (800e064 <_isatty_r+0x1c>)
 800e04c:	2300      	movs	r3, #0
 800e04e:	4605      	mov	r5, r0
 800e050:	4608      	mov	r0, r1
 800e052:	6023      	str	r3, [r4, #0]
 800e054:	f7f4 fce3 	bl	8002a1e <_isatty>
 800e058:	1c43      	adds	r3, r0, #1
 800e05a:	d102      	bne.n	800e062 <_isatty_r+0x1a>
 800e05c:	6823      	ldr	r3, [r4, #0]
 800e05e:	b103      	cbz	r3, 800e062 <_isatty_r+0x1a>
 800e060:	602b      	str	r3, [r5, #0]
 800e062:	bd38      	pop	{r3, r4, r5, pc}
 800e064:	20006dfc 	.word	0x20006dfc

0800e068 <_lseek_r>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	4c07      	ldr	r4, [pc, #28]	; (800e088 <_lseek_r+0x20>)
 800e06c:	4605      	mov	r5, r0
 800e06e:	4608      	mov	r0, r1
 800e070:	4611      	mov	r1, r2
 800e072:	2200      	movs	r2, #0
 800e074:	6022      	str	r2, [r4, #0]
 800e076:	461a      	mov	r2, r3
 800e078:	f7f4 fcdc 	bl	8002a34 <_lseek>
 800e07c:	1c43      	adds	r3, r0, #1
 800e07e:	d102      	bne.n	800e086 <_lseek_r+0x1e>
 800e080:	6823      	ldr	r3, [r4, #0]
 800e082:	b103      	cbz	r3, 800e086 <_lseek_r+0x1e>
 800e084:	602b      	str	r3, [r5, #0]
 800e086:	bd38      	pop	{r3, r4, r5, pc}
 800e088:	20006dfc 	.word	0x20006dfc

0800e08c <__ascii_mbtowc>:
 800e08c:	b082      	sub	sp, #8
 800e08e:	b901      	cbnz	r1, 800e092 <__ascii_mbtowc+0x6>
 800e090:	a901      	add	r1, sp, #4
 800e092:	b142      	cbz	r2, 800e0a6 <__ascii_mbtowc+0x1a>
 800e094:	b14b      	cbz	r3, 800e0aa <__ascii_mbtowc+0x1e>
 800e096:	7813      	ldrb	r3, [r2, #0]
 800e098:	600b      	str	r3, [r1, #0]
 800e09a:	7812      	ldrb	r2, [r2, #0]
 800e09c:	1c10      	adds	r0, r2, #0
 800e09e:	bf18      	it	ne
 800e0a0:	2001      	movne	r0, #1
 800e0a2:	b002      	add	sp, #8
 800e0a4:	4770      	bx	lr
 800e0a6:	4610      	mov	r0, r2
 800e0a8:	e7fb      	b.n	800e0a2 <__ascii_mbtowc+0x16>
 800e0aa:	f06f 0001 	mvn.w	r0, #1
 800e0ae:	e7f8      	b.n	800e0a2 <__ascii_mbtowc+0x16>

0800e0b0 <memmove>:
 800e0b0:	4288      	cmp	r0, r1
 800e0b2:	b510      	push	{r4, lr}
 800e0b4:	eb01 0302 	add.w	r3, r1, r2
 800e0b8:	d807      	bhi.n	800e0ca <memmove+0x1a>
 800e0ba:	1e42      	subs	r2, r0, #1
 800e0bc:	4299      	cmp	r1, r3
 800e0be:	d00a      	beq.n	800e0d6 <memmove+0x26>
 800e0c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e0c8:	e7f8      	b.n	800e0bc <memmove+0xc>
 800e0ca:	4283      	cmp	r3, r0
 800e0cc:	d9f5      	bls.n	800e0ba <memmove+0xa>
 800e0ce:	1881      	adds	r1, r0, r2
 800e0d0:	1ad2      	subs	r2, r2, r3
 800e0d2:	42d3      	cmn	r3, r2
 800e0d4:	d100      	bne.n	800e0d8 <memmove+0x28>
 800e0d6:	bd10      	pop	{r4, pc}
 800e0d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e0e0:	e7f7      	b.n	800e0d2 <memmove+0x22>

0800e0e2 <__malloc_lock>:
 800e0e2:	4770      	bx	lr

0800e0e4 <__malloc_unlock>:
 800e0e4:	4770      	bx	lr

0800e0e6 <_realloc_r>:
 800e0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0e8:	4607      	mov	r7, r0
 800e0ea:	4614      	mov	r4, r2
 800e0ec:	460e      	mov	r6, r1
 800e0ee:	b921      	cbnz	r1, 800e0fa <_realloc_r+0x14>
 800e0f0:	4611      	mov	r1, r2
 800e0f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e0f6:	f7ff bc33 	b.w	800d960 <_malloc_r>
 800e0fa:	b922      	cbnz	r2, 800e106 <_realloc_r+0x20>
 800e0fc:	f7ff fbe2 	bl	800d8c4 <_free_r>
 800e100:	4625      	mov	r5, r4
 800e102:	4628      	mov	r0, r5
 800e104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e106:	f000 f834 	bl	800e172 <_malloc_usable_size_r>
 800e10a:	42a0      	cmp	r0, r4
 800e10c:	d20f      	bcs.n	800e12e <_realloc_r+0x48>
 800e10e:	4621      	mov	r1, r4
 800e110:	4638      	mov	r0, r7
 800e112:	f7ff fc25 	bl	800d960 <_malloc_r>
 800e116:	4605      	mov	r5, r0
 800e118:	2800      	cmp	r0, #0
 800e11a:	d0f2      	beq.n	800e102 <_realloc_r+0x1c>
 800e11c:	4631      	mov	r1, r6
 800e11e:	4622      	mov	r2, r4
 800e120:	f7fd fad0 	bl	800b6c4 <memcpy>
 800e124:	4631      	mov	r1, r6
 800e126:	4638      	mov	r0, r7
 800e128:	f7ff fbcc 	bl	800d8c4 <_free_r>
 800e12c:	e7e9      	b.n	800e102 <_realloc_r+0x1c>
 800e12e:	4635      	mov	r5, r6
 800e130:	e7e7      	b.n	800e102 <_realloc_r+0x1c>
	...

0800e134 <_read_r>:
 800e134:	b538      	push	{r3, r4, r5, lr}
 800e136:	4c07      	ldr	r4, [pc, #28]	; (800e154 <_read_r+0x20>)
 800e138:	4605      	mov	r5, r0
 800e13a:	4608      	mov	r0, r1
 800e13c:	4611      	mov	r1, r2
 800e13e:	2200      	movs	r2, #0
 800e140:	6022      	str	r2, [r4, #0]
 800e142:	461a      	mov	r2, r3
 800e144:	f7f4 fc32 	bl	80029ac <_read>
 800e148:	1c43      	adds	r3, r0, #1
 800e14a:	d102      	bne.n	800e152 <_read_r+0x1e>
 800e14c:	6823      	ldr	r3, [r4, #0]
 800e14e:	b103      	cbz	r3, 800e152 <_read_r+0x1e>
 800e150:	602b      	str	r3, [r5, #0]
 800e152:	bd38      	pop	{r3, r4, r5, pc}
 800e154:	20006dfc 	.word	0x20006dfc

0800e158 <__ascii_wctomb>:
 800e158:	b149      	cbz	r1, 800e16e <__ascii_wctomb+0x16>
 800e15a:	2aff      	cmp	r2, #255	; 0xff
 800e15c:	bf85      	ittet	hi
 800e15e:	238a      	movhi	r3, #138	; 0x8a
 800e160:	6003      	strhi	r3, [r0, #0]
 800e162:	700a      	strbls	r2, [r1, #0]
 800e164:	f04f 30ff 	movhi.w	r0, #4294967295
 800e168:	bf98      	it	ls
 800e16a:	2001      	movls	r0, #1
 800e16c:	4770      	bx	lr
 800e16e:	4608      	mov	r0, r1
 800e170:	4770      	bx	lr

0800e172 <_malloc_usable_size_r>:
 800e172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e176:	1f18      	subs	r0, r3, #4
 800e178:	2b00      	cmp	r3, #0
 800e17a:	bfbc      	itt	lt
 800e17c:	580b      	ldrlt	r3, [r1, r0]
 800e17e:	18c0      	addlt	r0, r0, r3
 800e180:	4770      	bx	lr
	...

0800e184 <_init>:
 800e184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e186:	bf00      	nop
 800e188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e18a:	bc08      	pop	{r3}
 800e18c:	469e      	mov	lr, r3
 800e18e:	4770      	bx	lr

0800e190 <_fini>:
 800e190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e192:	bf00      	nop
 800e194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e196:	bc08      	pop	{r3}
 800e198:	469e      	mov	lr, r3
 800e19a:	4770      	bx	lr
