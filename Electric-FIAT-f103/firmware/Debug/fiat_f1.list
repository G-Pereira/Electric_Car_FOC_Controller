
fiat_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d218  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800d328  0800d328  0001d328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da6c  0800da6c  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800da6c  0800da6c  0001da6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da74  0800da74  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da74  0800da74  0001da74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da78  0800da78  0001da78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800da7c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f48  2000025c  0800dcd8  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011a4  0800dcd8  000211a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001639b  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000356a  00000000  00000000  00036620  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001420  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  0003afb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017fb5  00000000  00000000  0003c218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001127b  00000000  00000000  000541cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e9c8  00000000  00000000  00065448  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3e10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa4  00000000  00000000  000e3e8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000025c 	.word	0x2000025c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d310 	.word	0x0800d310

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000260 	.word	0x20000260
 800014c:	0800d310 	.word	0x0800d310

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <strcmp>:
 8000160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000168:	2a01      	cmp	r2, #1
 800016a:	bf28      	it	cs
 800016c:	429a      	cmpcs	r2, r3
 800016e:	d0f7      	beq.n	8000160 <strcmp>
 8000170:	1ad0      	subs	r0, r2, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_ldivmod>:
 8000ff8:	b97b      	cbnz	r3, 800101a <__aeabi_ldivmod+0x22>
 8000ffa:	b972      	cbnz	r2, 800101a <__aeabi_ldivmod+0x22>
 8000ffc:	2900      	cmp	r1, #0
 8000ffe:	bfbe      	ittt	lt
 8001000:	2000      	movlt	r0, #0
 8001002:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001006:	e006      	blt.n	8001016 <__aeabi_ldivmod+0x1e>
 8001008:	bf08      	it	eq
 800100a:	2800      	cmpeq	r0, #0
 800100c:	bf1c      	itt	ne
 800100e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8001012:	f04f 30ff 	movne.w	r0, #4294967295
 8001016:	f000 b9a7 	b.w	8001368 <__aeabi_idiv0>
 800101a:	f1ad 0c08 	sub.w	ip, sp, #8
 800101e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001022:	2900      	cmp	r1, #0
 8001024:	db09      	blt.n	800103a <__aeabi_ldivmod+0x42>
 8001026:	2b00      	cmp	r3, #0
 8001028:	db1a      	blt.n	8001060 <__aeabi_ldivmod+0x68>
 800102a:	f000 f835 	bl	8001098 <__udivmoddi4>
 800102e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001032:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001036:	b004      	add	sp, #16
 8001038:	4770      	bx	lr
 800103a:	4240      	negs	r0, r0
 800103c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	db1b      	blt.n	800107c <__aeabi_ldivmod+0x84>
 8001044:	f000 f828 	bl	8001098 <__udivmoddi4>
 8001048:	f8dd e004 	ldr.w	lr, [sp, #4]
 800104c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001050:	b004      	add	sp, #16
 8001052:	4240      	negs	r0, r0
 8001054:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001058:	4252      	negs	r2, r2
 800105a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800105e:	4770      	bx	lr
 8001060:	4252      	negs	r2, r2
 8001062:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001066:	f000 f817 	bl	8001098 <__udivmoddi4>
 800106a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800106e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001072:	b004      	add	sp, #16
 8001074:	4240      	negs	r0, r0
 8001076:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800107a:	4770      	bx	lr
 800107c:	4252      	negs	r2, r2
 800107e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001082:	f000 f809 	bl	8001098 <__udivmoddi4>
 8001086:	f8dd e004 	ldr.w	lr, [sp, #4]
 800108a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800108e:	b004      	add	sp, #16
 8001090:	4252      	negs	r2, r2
 8001092:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001096:	4770      	bx	lr

08001098 <__udivmoddi4>:
 8001098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800109c:	468c      	mov	ip, r1
 800109e:	4604      	mov	r4, r0
 80010a0:	9e08      	ldr	r6, [sp, #32]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d14b      	bne.n	800113e <__udivmoddi4+0xa6>
 80010a6:	428a      	cmp	r2, r1
 80010a8:	4615      	mov	r5, r2
 80010aa:	d967      	bls.n	800117c <__udivmoddi4+0xe4>
 80010ac:	fab2 f282 	clz	r2, r2
 80010b0:	b14a      	cbz	r2, 80010c6 <__udivmoddi4+0x2e>
 80010b2:	f1c2 0720 	rsb	r7, r2, #32
 80010b6:	fa01 f302 	lsl.w	r3, r1, r2
 80010ba:	fa20 f707 	lsr.w	r7, r0, r7
 80010be:	4095      	lsls	r5, r2
 80010c0:	ea47 0c03 	orr.w	ip, r7, r3
 80010c4:	4094      	lsls	r4, r2
 80010c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010ca:	fbbc f7fe 	udiv	r7, ip, lr
 80010ce:	fa1f f885 	uxth.w	r8, r5
 80010d2:	fb0e c317 	mls	r3, lr, r7, ip
 80010d6:	fb07 f908 	mul.w	r9, r7, r8
 80010da:	0c21      	lsrs	r1, r4, #16
 80010dc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80010e0:	4599      	cmp	r9, r3
 80010e2:	d909      	bls.n	80010f8 <__udivmoddi4+0x60>
 80010e4:	18eb      	adds	r3, r5, r3
 80010e6:	f107 31ff 	add.w	r1, r7, #4294967295
 80010ea:	f080 811c 	bcs.w	8001326 <__udivmoddi4+0x28e>
 80010ee:	4599      	cmp	r9, r3
 80010f0:	f240 8119 	bls.w	8001326 <__udivmoddi4+0x28e>
 80010f4:	3f02      	subs	r7, #2
 80010f6:	442b      	add	r3, r5
 80010f8:	eba3 0309 	sub.w	r3, r3, r9
 80010fc:	fbb3 f0fe 	udiv	r0, r3, lr
 8001100:	fb0e 3310 	mls	r3, lr, r0, r3
 8001104:	fb00 f108 	mul.w	r1, r0, r8
 8001108:	b2a4      	uxth	r4, r4
 800110a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800110e:	42a1      	cmp	r1, r4
 8001110:	d909      	bls.n	8001126 <__udivmoddi4+0x8e>
 8001112:	192c      	adds	r4, r5, r4
 8001114:	f100 33ff 	add.w	r3, r0, #4294967295
 8001118:	f080 8107 	bcs.w	800132a <__udivmoddi4+0x292>
 800111c:	42a1      	cmp	r1, r4
 800111e:	f240 8104 	bls.w	800132a <__udivmoddi4+0x292>
 8001122:	3802      	subs	r0, #2
 8001124:	442c      	add	r4, r5
 8001126:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800112a:	2700      	movs	r7, #0
 800112c:	1a64      	subs	r4, r4, r1
 800112e:	b11e      	cbz	r6, 8001138 <__udivmoddi4+0xa0>
 8001130:	2300      	movs	r3, #0
 8001132:	40d4      	lsrs	r4, r2
 8001134:	e9c6 4300 	strd	r4, r3, [r6]
 8001138:	4639      	mov	r1, r7
 800113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113e:	428b      	cmp	r3, r1
 8001140:	d909      	bls.n	8001156 <__udivmoddi4+0xbe>
 8001142:	2e00      	cmp	r6, #0
 8001144:	f000 80ec 	beq.w	8001320 <__udivmoddi4+0x288>
 8001148:	2700      	movs	r7, #0
 800114a:	e9c6 0100 	strd	r0, r1, [r6]
 800114e:	4638      	mov	r0, r7
 8001150:	4639      	mov	r1, r7
 8001152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001156:	fab3 f783 	clz	r7, r3
 800115a:	2f00      	cmp	r7, #0
 800115c:	d148      	bne.n	80011f0 <__udivmoddi4+0x158>
 800115e:	428b      	cmp	r3, r1
 8001160:	d302      	bcc.n	8001168 <__udivmoddi4+0xd0>
 8001162:	4282      	cmp	r2, r0
 8001164:	f200 80fb 	bhi.w	800135e <__udivmoddi4+0x2c6>
 8001168:	1a84      	subs	r4, r0, r2
 800116a:	eb61 0303 	sbc.w	r3, r1, r3
 800116e:	2001      	movs	r0, #1
 8001170:	469c      	mov	ip, r3
 8001172:	2e00      	cmp	r6, #0
 8001174:	d0e0      	beq.n	8001138 <__udivmoddi4+0xa0>
 8001176:	e9c6 4c00 	strd	r4, ip, [r6]
 800117a:	e7dd      	b.n	8001138 <__udivmoddi4+0xa0>
 800117c:	b902      	cbnz	r2, 8001180 <__udivmoddi4+0xe8>
 800117e:	deff      	udf	#255	; 0xff
 8001180:	fab2 f282 	clz	r2, r2
 8001184:	2a00      	cmp	r2, #0
 8001186:	f040 808f 	bne.w	80012a8 <__udivmoddi4+0x210>
 800118a:	2701      	movs	r7, #1
 800118c:	1b49      	subs	r1, r1, r5
 800118e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001192:	fa1f f985 	uxth.w	r9, r5
 8001196:	fbb1 fef8 	udiv	lr, r1, r8
 800119a:	fb08 111e 	mls	r1, r8, lr, r1
 800119e:	fb09 f00e 	mul.w	r0, r9, lr
 80011a2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80011a6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80011aa:	4298      	cmp	r0, r3
 80011ac:	d907      	bls.n	80011be <__udivmoddi4+0x126>
 80011ae:	18eb      	adds	r3, r5, r3
 80011b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80011b4:	d202      	bcs.n	80011bc <__udivmoddi4+0x124>
 80011b6:	4298      	cmp	r0, r3
 80011b8:	f200 80cd 	bhi.w	8001356 <__udivmoddi4+0x2be>
 80011bc:	468e      	mov	lr, r1
 80011be:	1a1b      	subs	r3, r3, r0
 80011c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80011c4:	fb08 3310 	mls	r3, r8, r0, r3
 80011c8:	fb09 f900 	mul.w	r9, r9, r0
 80011cc:	b2a4      	uxth	r4, r4
 80011ce:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011d2:	45a1      	cmp	r9, r4
 80011d4:	d907      	bls.n	80011e6 <__udivmoddi4+0x14e>
 80011d6:	192c      	adds	r4, r5, r4
 80011d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80011dc:	d202      	bcs.n	80011e4 <__udivmoddi4+0x14c>
 80011de:	45a1      	cmp	r9, r4
 80011e0:	f200 80b6 	bhi.w	8001350 <__udivmoddi4+0x2b8>
 80011e4:	4618      	mov	r0, r3
 80011e6:	eba4 0409 	sub.w	r4, r4, r9
 80011ea:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80011ee:	e79e      	b.n	800112e <__udivmoddi4+0x96>
 80011f0:	f1c7 0520 	rsb	r5, r7, #32
 80011f4:	40bb      	lsls	r3, r7
 80011f6:	fa22 fc05 	lsr.w	ip, r2, r5
 80011fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80011fe:	fa21 f405 	lsr.w	r4, r1, r5
 8001202:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001206:	fbb4 f9fe 	udiv	r9, r4, lr
 800120a:	fa1f f88c 	uxth.w	r8, ip
 800120e:	fb0e 4419 	mls	r4, lr, r9, r4
 8001212:	fa20 f305 	lsr.w	r3, r0, r5
 8001216:	40b9      	lsls	r1, r7
 8001218:	fb09 fa08 	mul.w	sl, r9, r8
 800121c:	4319      	orrs	r1, r3
 800121e:	0c0b      	lsrs	r3, r1, #16
 8001220:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001224:	45a2      	cmp	sl, r4
 8001226:	fa02 f207 	lsl.w	r2, r2, r7
 800122a:	fa00 f307 	lsl.w	r3, r0, r7
 800122e:	d90b      	bls.n	8001248 <__udivmoddi4+0x1b0>
 8001230:	eb1c 0404 	adds.w	r4, ip, r4
 8001234:	f109 30ff 	add.w	r0, r9, #4294967295
 8001238:	f080 8088 	bcs.w	800134c <__udivmoddi4+0x2b4>
 800123c:	45a2      	cmp	sl, r4
 800123e:	f240 8085 	bls.w	800134c <__udivmoddi4+0x2b4>
 8001242:	f1a9 0902 	sub.w	r9, r9, #2
 8001246:	4464      	add	r4, ip
 8001248:	eba4 040a 	sub.w	r4, r4, sl
 800124c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001250:	fb0e 4410 	mls	r4, lr, r0, r4
 8001254:	fb00 fa08 	mul.w	sl, r0, r8
 8001258:	b289      	uxth	r1, r1
 800125a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800125e:	45a2      	cmp	sl, r4
 8001260:	d908      	bls.n	8001274 <__udivmoddi4+0x1dc>
 8001262:	eb1c 0404 	adds.w	r4, ip, r4
 8001266:	f100 31ff 	add.w	r1, r0, #4294967295
 800126a:	d26b      	bcs.n	8001344 <__udivmoddi4+0x2ac>
 800126c:	45a2      	cmp	sl, r4
 800126e:	d969      	bls.n	8001344 <__udivmoddi4+0x2ac>
 8001270:	3802      	subs	r0, #2
 8001272:	4464      	add	r4, ip
 8001274:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001278:	fba0 8902 	umull	r8, r9, r0, r2
 800127c:	eba4 040a 	sub.w	r4, r4, sl
 8001280:	454c      	cmp	r4, r9
 8001282:	4641      	mov	r1, r8
 8001284:	46ce      	mov	lr, r9
 8001286:	d354      	bcc.n	8001332 <__udivmoddi4+0x29a>
 8001288:	d051      	beq.n	800132e <__udivmoddi4+0x296>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d069      	beq.n	8001362 <__udivmoddi4+0x2ca>
 800128e:	1a5a      	subs	r2, r3, r1
 8001290:	eb64 040e 	sbc.w	r4, r4, lr
 8001294:	fa04 f505 	lsl.w	r5, r4, r5
 8001298:	fa22 f307 	lsr.w	r3, r2, r7
 800129c:	40fc      	lsrs	r4, r7
 800129e:	431d      	orrs	r5, r3
 80012a0:	e9c6 5400 	strd	r5, r4, [r6]
 80012a4:	2700      	movs	r7, #0
 80012a6:	e747      	b.n	8001138 <__udivmoddi4+0xa0>
 80012a8:	4095      	lsls	r5, r2
 80012aa:	f1c2 0320 	rsb	r3, r2, #32
 80012ae:	fa21 f003 	lsr.w	r0, r1, r3
 80012b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012b6:	fbb0 f7f8 	udiv	r7, r0, r8
 80012ba:	fa1f f985 	uxth.w	r9, r5
 80012be:	fb08 0017 	mls	r0, r8, r7, r0
 80012c2:	fa24 f303 	lsr.w	r3, r4, r3
 80012c6:	4091      	lsls	r1, r2
 80012c8:	fb07 fc09 	mul.w	ip, r7, r9
 80012cc:	430b      	orrs	r3, r1
 80012ce:	0c19      	lsrs	r1, r3, #16
 80012d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012d4:	458c      	cmp	ip, r1
 80012d6:	fa04 f402 	lsl.w	r4, r4, r2
 80012da:	d907      	bls.n	80012ec <__udivmoddi4+0x254>
 80012dc:	1869      	adds	r1, r5, r1
 80012de:	f107 30ff 	add.w	r0, r7, #4294967295
 80012e2:	d231      	bcs.n	8001348 <__udivmoddi4+0x2b0>
 80012e4:	458c      	cmp	ip, r1
 80012e6:	d92f      	bls.n	8001348 <__udivmoddi4+0x2b0>
 80012e8:	3f02      	subs	r7, #2
 80012ea:	4429      	add	r1, r5
 80012ec:	eba1 010c 	sub.w	r1, r1, ip
 80012f0:	fbb1 f0f8 	udiv	r0, r1, r8
 80012f4:	fb08 1c10 	mls	ip, r8, r0, r1
 80012f8:	fb00 fe09 	mul.w	lr, r0, r9
 80012fc:	b299      	uxth	r1, r3
 80012fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001302:	458e      	cmp	lr, r1
 8001304:	d907      	bls.n	8001316 <__udivmoddi4+0x27e>
 8001306:	1869      	adds	r1, r5, r1
 8001308:	f100 33ff 	add.w	r3, r0, #4294967295
 800130c:	d218      	bcs.n	8001340 <__udivmoddi4+0x2a8>
 800130e:	458e      	cmp	lr, r1
 8001310:	d916      	bls.n	8001340 <__udivmoddi4+0x2a8>
 8001312:	3802      	subs	r0, #2
 8001314:	4429      	add	r1, r5
 8001316:	eba1 010e 	sub.w	r1, r1, lr
 800131a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800131e:	e73a      	b.n	8001196 <__udivmoddi4+0xfe>
 8001320:	4637      	mov	r7, r6
 8001322:	4630      	mov	r0, r6
 8001324:	e708      	b.n	8001138 <__udivmoddi4+0xa0>
 8001326:	460f      	mov	r7, r1
 8001328:	e6e6      	b.n	80010f8 <__udivmoddi4+0x60>
 800132a:	4618      	mov	r0, r3
 800132c:	e6fb      	b.n	8001126 <__udivmoddi4+0x8e>
 800132e:	4543      	cmp	r3, r8
 8001330:	d2ab      	bcs.n	800128a <__udivmoddi4+0x1f2>
 8001332:	ebb8 0102 	subs.w	r1, r8, r2
 8001336:	eb69 020c 	sbc.w	r2, r9, ip
 800133a:	3801      	subs	r0, #1
 800133c:	4696      	mov	lr, r2
 800133e:	e7a4      	b.n	800128a <__udivmoddi4+0x1f2>
 8001340:	4618      	mov	r0, r3
 8001342:	e7e8      	b.n	8001316 <__udivmoddi4+0x27e>
 8001344:	4608      	mov	r0, r1
 8001346:	e795      	b.n	8001274 <__udivmoddi4+0x1dc>
 8001348:	4607      	mov	r7, r0
 800134a:	e7cf      	b.n	80012ec <__udivmoddi4+0x254>
 800134c:	4681      	mov	r9, r0
 800134e:	e77b      	b.n	8001248 <__udivmoddi4+0x1b0>
 8001350:	3802      	subs	r0, #2
 8001352:	442c      	add	r4, r5
 8001354:	e747      	b.n	80011e6 <__udivmoddi4+0x14e>
 8001356:	f1ae 0e02 	sub.w	lr, lr, #2
 800135a:	442b      	add	r3, r5
 800135c:	e72f      	b.n	80011be <__udivmoddi4+0x126>
 800135e:	4638      	mov	r0, r7
 8001360:	e707      	b.n	8001172 <__udivmoddi4+0xda>
 8001362:	4637      	mov	r7, r6
 8001364:	e6e8      	b.n	8001138 <__udivmoddi4+0xa0>
 8001366:	bf00      	nop

08001368 <__aeabi_idiv0>:
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop

0800136c <IMU_acc_read>:
	HAL_Delay(100);
	HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, SET);

}

void IMU_acc_read(SPI_HandleTypeDef *hspi, int *accel_data){
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_ACC_DATA_START_REG;
 8001376:	2382      	movs	r3, #130	; 0x82
 8001378:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(CS_accel_GPIO_Port, CS_accel_Pin, RESET); //read acceloremeter data
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001380:	4836      	ldr	r0, [pc, #216]	; (800145c <IMU_acc_read+0xf0>)
 8001382:	f002 fcb9 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001386:	f107 0113 	add.w	r1, r7, #19
 800138a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800138e:	2201      	movs	r2, #1
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f004 f8b2 	bl	80054fa <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e00c      	b.n	80013b6 <IMU_acc_read+0x4a>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f107 020c 	add.w	r2, r7, #12
 80013a2:	18d1      	adds	r1, r2, r3
 80013a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013a8:	2201      	movs	r2, #1
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f004 f9d9 	bl	8005762 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	ddef      	ble.n	800139c <IMU_acc_read+0x30>
		//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(CS_accel_GPIO_Port, CS_accel_Pin, SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c2:	4826      	ldr	r0, [pc, #152]	; (800145c <IMU_acc_read+0xf0>)
 80013c4:	f002 fc98 	bl	8003cf8 <HAL_GPIO_WritePin>
	accel_data[0]=((store_data[1]<<4)+(store_data[0]>>4));
 80013c8:	7b7b      	ldrb	r3, [r7, #13]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	7b3a      	ldrb	r2, [r7, #12]
 80013ce:	0912      	lsrs	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	441a      	add	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	601a      	str	r2, [r3, #0]
	accel_data[1]=((store_data[3]<<4)+(store_data[2]>>4));
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	011a      	lsls	r2, r3, #4
 80013dc:	7bbb      	ldrb	r3, [r7, #14]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3304      	adds	r3, #4
 80013e8:	440a      	add	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
	accel_data[2]=((store_data[5]<<4)+(store_data[4]>>4));
 80013ec:	7c7b      	ldrb	r3, [r7, #17]
 80013ee:	011a      	lsls	r2, r3, #4
 80013f0:	7c3b      	ldrb	r3, [r7, #16]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	3308      	adds	r3, #8
 80013fc:	440a      	add	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f001 ff13 	bl	800322c <HAL_Delay>

	if (accel_data[0] > 2047)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800140e:	db05      	blt.n	800141c <IMU_acc_read+0xb0>
	{
		accel_data[0] -= 4096;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (accel_data[1]> 2047)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	3304      	adds	r3, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001426:	db07      	blt.n	8001438 <IMU_acc_read+0xcc>
	{
		accel_data[1] -= 4096;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	3304      	adds	r3, #4
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	3304      	adds	r3, #4
 8001432:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8001436:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (accel_data[2] > 2047)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3308      	adds	r3, #8
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001442:	db07      	blt.n	8001454 <IMU_acc_read+0xe8>
	{
		accel_data[2] -= 4096;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	3308      	adds	r3, #8
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	3308      	adds	r3, #8
 800144e:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8001452:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40010800 	.word	0x40010800

08001460 <IMU_gyro_read>:

void IMU_gyro_read(SPI_HandleTypeDef *hspi, int *gyro_data){
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_GYRO_DATA_START_REG;
 800146a:	2382      	movs	r3, #130	; 0x82
 800146c:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(CS_gyro_GPIO_Port, CS_gyro_Pin, RESET); //read acceloremeter data
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001474:	4833      	ldr	r0, [pc, #204]	; (8001544 <IMU_gyro_read+0xe4>)
 8001476:	f002 fc3f 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 800147a:	f107 0113 	add.w	r1, r7, #19
 800147e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001482:	2201      	movs	r2, #1
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f004 f838 	bl	80054fa <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	e00c      	b.n	80014aa <IMU_gyro_read+0x4a>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f107 020c 	add.w	r2, r7, #12
 8001496:	18d1      	adds	r1, r2, r3
 8001498:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800149c:	2201      	movs	r2, #1
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f004 f95f 	bl	8005762 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	ddef      	ble.n	8001490 <IMU_gyro_read+0x30>
		//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(CS_gyro_GPIO_Port, CS_gyro_Pin, SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4823      	ldr	r0, [pc, #140]	; (8001544 <IMU_gyro_read+0xe4>)
 80014b8:	f002 fc1e 	bl	8003cf8 <HAL_GPIO_WritePin>
	gyro_data[0]=((store_data[1]<<8)+(store_data[0]));
 80014bc:	7b7b      	ldrb	r3, [r7, #13]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	7b3a      	ldrb	r2, [r7, #12]
 80014c2:	441a      	add	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	601a      	str	r2, [r3, #0]
	gyro_data[1]=((store_data[3]<<8)+(store_data[2]));
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	021a      	lsls	r2, r3, #8
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	4619      	mov	r1, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	3304      	adds	r3, #4
 80014d4:	440a      	add	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
	gyro_data[2]=((store_data[5]<<8)+(store_data[4]));
 80014d8:	7c7b      	ldrb	r3, [r7, #17]
 80014da:	021a      	lsls	r2, r3, #8
 80014dc:	7c3b      	ldrb	r3, [r7, #16]
 80014de:	4619      	mov	r1, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	3308      	adds	r3, #8
 80014e4:	440a      	add	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 80014e8:	2064      	movs	r0, #100	; 0x64
 80014ea:	f001 fe9f 	bl	800322c <HAL_Delay>

	if (gyro_data[0] > 32767)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014f6:	db05      	blt.n	8001504 <IMU_gyro_read+0xa4>
	{
		gyro_data[0] -= 65536;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (gyro_data[1]> 32767)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	3304      	adds	r3, #4
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800150e:	db07      	blt.n	8001520 <IMU_gyro_read+0xc0>
	{
		gyro_data[1] -= 65536;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3304      	adds	r3, #4
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	3304      	adds	r3, #4
 800151a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800151e:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (gyro_data[2] > 32767)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	3308      	adds	r3, #8
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800152a:	db07      	blt.n	800153c <IMU_gyro_read+0xdc>
	{
		gyro_data[2] -= 65536;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	3308      	adds	r3, #8
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	3308      	adds	r3, #8
 8001536:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800153a:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40010800 	.word	0x40010800

08001548 <IMU_mag_read>:

void IMU_mag_read(SPI_HandleTypeDef *hspi, int *mag_data){
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_MAG_DATA_START_REG;
 8001552:	23c2      	movs	r3, #194	; 0xc2
 8001554:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, RESET); //read acceloremeter data
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155c:	4835      	ldr	r0, [pc, #212]	; (8001634 <IMU_mag_read+0xec>)
 800155e:	f002 fbcb 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8001562:	f107 0113 	add.w	r1, r7, #19
 8001566:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800156a:	2201      	movs	r2, #1
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f003 ffc4 	bl	80054fa <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e00c      	b.n	8001592 <IMU_mag_read+0x4a>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f107 020c 	add.w	r2, r7, #12
 800157e:	18d1      	adds	r1, r2, r3
 8001580:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001584:	2201      	movs	r2, #1
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f004 f8eb 	bl	8005762 <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2b05      	cmp	r3, #5
 8001596:	ddef      	ble.n	8001578 <IMU_mag_read+0x30>
			//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, SET);
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159e:	4825      	ldr	r0, [pc, #148]	; (8001634 <IMU_mag_read+0xec>)
 80015a0:	f002 fbaa 	bl	8003cf8 <HAL_GPIO_WritePin>
	mag_data[0]=((store_data[1]<<5)+(store_data[0]>>3));
 80015a4:	7b7b      	ldrb	r3, [r7, #13]
 80015a6:	015b      	lsls	r3, r3, #5
 80015a8:	7b3a      	ldrb	r2, [r7, #12]
 80015aa:	08d2      	lsrs	r2, r2, #3
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	441a      	add	r2, r3
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	601a      	str	r2, [r3, #0]
	mag_data[1]=((store_data[3]<<5)+(store_data[2]>>3));
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	015a      	lsls	r2, r3, #5
 80015b8:	7bbb      	ldrb	r3, [r7, #14]
 80015ba:	08db      	lsrs	r3, r3, #3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3304      	adds	r3, #4
 80015c4:	440a      	add	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
	mag_data[2]=((store_data[5]<<5)+(store_data[4]>>4));
 80015c8:	7c7b      	ldrb	r3, [r7, #17]
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	7c3b      	ldrb	r3, [r7, #16]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4619      	mov	r1, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	3308      	adds	r3, #8
 80015d8:	440a      	add	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

	if (mag_data[0] > 4095)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e4:	db05      	blt.n	80015f2 <IMU_mag_read+0xaa>
	{
		mag_data[0] -= 8192;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (mag_data[1]> 4095)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3304      	adds	r3, #4
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015fc:	db07      	blt.n	800160e <IMU_mag_read+0xc6>
	{
		mag_data[1] -= 8192;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3304      	adds	r3, #4
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3304      	adds	r3, #4
 8001608:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800160c:	601a      	str	r2, [r3, #0]
			//accel_data[1] = accel_data[1]*0.00098;
	}
	if (mag_data[2] > 4095)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	3308      	adds	r3, #8
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001618:	db07      	blt.n	800162a <IMU_mag_read+0xe2>
	{
		mag_data[2] -= 8192;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3308      	adds	r3, #8
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	3308      	adds	r3, #8
 8001624:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8001628:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40010800 	.word	0x40010800

08001638 <motorSpeed>:

#include "main.h"
#include "encoderMode.h"


float motorSpeed (uint32_t *cnt1, uint32_t *tick, TIM_HandleTypeDef htim3){
 8001638:	b082      	sub	sp, #8
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
 8001644:	f107 0120 	add.w	r1, r7, #32
 8001648:	e881 000c 	stmia.w	r1, {r2, r3}

	uint32_t cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	613b      	str	r3, [r7, #16]
	int diff = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]

	printf("cnt1 = %lu counter2 = %lu\n",*cnt1,cnt2);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4619      	mov	r1, r3
 800165e:	482a      	ldr	r0, [pc, #168]	; (8001708 <motorSpeed+0xd0>)
 8001660:	f008 fe3a 	bl	800a2d8 <iprintf>

	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	2b10      	cmp	r3, #16
 800166e:	d113      	bne.n	8001698 <motorSpeed+0x60>
		if(cnt2 < *cnt1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	429a      	cmp	r2, r3
 8001678:	d205      	bcs.n	8001686 <motorSpeed+0x4e>
			diff = *cnt1 - cnt2;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e01b      	b.n	80016be <motorSpeed+0x86>
		else
			diff = (65535 - cnt2) + *cnt1;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001692:	33ff      	adds	r3, #255	; 0xff
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e012      	b.n	80016be <motorSpeed+0x86>
	} else {
		if(cnt2 > *cnt1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d905      	bls.n	80016ae <motorSpeed+0x76>
			diff = cnt2 - *cnt1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e007      	b.n	80016be <motorSpeed+0x86>
		else
			diff = (65535 - *cnt1) + cnt2;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80016ba:	33ff      	adds	r3, #255	; 0xff
 80016bc:	617b      	str	r3, [r7, #20]
	}



	printf("diff = %d\n", diff);
 80016be:	6979      	ldr	r1, [r7, #20]
 80016c0:	4812      	ldr	r0, [pc, #72]	; (800170c <motorSpeed+0xd4>)
 80016c2:	f008 fe09 	bl	800a2d8 <iprintf>
	//float speed = (((float)(diff)/8)*60)*2;  //((diff/8)*60)/0.02;  // change when sysTimer configured
	float speed = (((float)(diff)/2)*60);
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff faf2 	bl	8000cb0 <__aeabi_i2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fbf4 	bl	8000ec0 <__aeabi_fdiv>
 80016d8:	4603      	mov	r3, r0
 80016da:	490d      	ldr	r1, [pc, #52]	; (8001710 <motorSpeed+0xd8>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fb3b 	bl	8000d58 <__aeabi_fmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	60fb      	str	r3, [r7, #12]


	*tick = HAL_GetTick();
 80016e6:	f001 fd97 	bl	8003218 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	601a      	str	r2, [r3, #0]
	*cnt1 = cnt2;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	601a      	str	r2, [r3, #0]
	//printf("aqui %f\n",speed);
	return speed;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001702:	b002      	add	sp, #8
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	0800d328 	.word	0x0800d328
 800170c:	0800d344 	.word	0x0800d344
 8001710:	42700000 	.word	0x42700000

08001714 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171e:	4802      	ldr	r0, [pc, #8]	; (8001728 <SELECT+0x14>)
 8001720:	f002 faea 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40010c00 	.word	0x40010c00

0800172c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001736:	4802      	ldr	r0, [pc, #8]	; (8001740 <DESELECT+0x14>)
 8001738:	f002 fade 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40010c00 	.word	0x40010c00

08001744 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800174e:	bf00      	nop
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <SPI_TxByte+0x30>)
 8001752:	f004 fab1 	bl	8005cb8 <HAL_SPI_GetState>
 8001756:	4603      	mov	r3, r0
 8001758:	2b01      	cmp	r3, #1
 800175a:	d1f9      	bne.n	8001750 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 800175c:	1df9      	adds	r1, r7, #7
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	2201      	movs	r2, #1
 8001764:	4803      	ldr	r0, [pc, #12]	; (8001774 <SPI_TxByte+0x30>)
 8001766:	f003 fec8 	bl	80054fa <HAL_SPI_Transmit>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200002e0 	.word	0x200002e0

08001778 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800177e:	23ff      	movs	r3, #255	; 0xff
 8001780:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8001786:	bf00      	nop
 8001788:	4809      	ldr	r0, [pc, #36]	; (80017b0 <SPI_RxByte+0x38>)
 800178a:	f004 fa95 	bl	8005cb8 <HAL_SPI_GetState>
 800178e:	4603      	mov	r3, r0
 8001790:	2b01      	cmp	r3, #1
 8001792:	d1f9      	bne.n	8001788 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8001794:	1dba      	adds	r2, r7, #6
 8001796:	1df9      	adds	r1, r7, #7
 8001798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2301      	movs	r3, #1
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <SPI_RxByte+0x38>)
 80017a2:	f004 f8e7 	bl	8005974 <HAL_SPI_TransmitReceive>
  
  return data;
 80017a6:	79bb      	ldrb	r3, [r7, #6]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200002e0 	.word	0x200002e0

080017b4 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80017bc:	f7ff ffdc 	bl	8001778 <SPI_RxByte>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	701a      	strb	r2, [r3, #0]
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <SD_ReadyWait+0x34>)
 80017d8:	2232      	movs	r2, #50	; 0x32
 80017da:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 80017dc:	f7ff ffcc 	bl	8001778 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 80017e0:	f7ff ffca 	bl	8001778 <SPI_RxByte>
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	2bff      	cmp	r3, #255	; 0xff
 80017ec:	d004      	beq.n	80017f8 <SD_ReadyWait+0x28>
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SD_ReadyWait+0x34>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f3      	bne.n	80017e0 <SD_ReadyWait+0x10>
  
  return res;
 80017f8:	79fb      	ldrb	r3, [r7, #7]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000d34 	.word	0x20000d34

08001808 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800180e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001812:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8001814:	f7ff ff8a 	bl	800172c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	e005      	b.n	800182a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800181e:	20ff      	movs	r0, #255	; 0xff
 8001820:	f7ff ff90 	bl	8001744 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	3301      	adds	r3, #1
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	2b09      	cmp	r3, #9
 800182e:	ddf6      	ble.n	800181e <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8001830:	f7ff ff70 	bl	8001714 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8001834:	2340      	movs	r3, #64	; 0x40
 8001836:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001848:	2395      	movs	r3, #149	; 0x95
 800184a:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e009      	b.n	8001866 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001852:	1d3a      	adds	r2, r7, #4
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff72 	bl	8001744 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b05      	cmp	r3, #5
 800186a:	ddf2      	ble.n	8001852 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 800186c:	e002      	b.n	8001874 <SD_PowerOn+0x6c>
  {
    Count--;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3b01      	subs	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001874:	f7ff ff80 	bl	8001778 <SPI_RxByte>
 8001878:	4603      	mov	r3, r0
 800187a:	2b01      	cmp	r3, #1
 800187c:	d002      	beq.n	8001884 <SD_PowerOn+0x7c>
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f4      	bne.n	800186e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001884:	f7ff ff52 	bl	800172c <DESELECT>
  SPI_TxByte(0XFF);
 8001888:	20ff      	movs	r0, #255	; 0xff
 800188a:	f7ff ff5b 	bl	8001744 <SPI_TxByte>
  
  PowerFlag = 1;
 800188e:	4b03      	ldr	r3, [pc, #12]	; (800189c <SD_PowerOn+0x94>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000279 	.word	0x20000279

080018a0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <SD_PowerOff+0x14>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000279 	.word	0x20000279

080018b8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <SD_CheckPower+0x10>)
 80018be:	781b      	ldrb	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000279 	.word	0x20000279

080018cc <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <SD_RxDataBlock+0x68>)
 80018d8:	220a      	movs	r2, #10
 80018da:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 80018dc:	f7ff ff4c 	bl	8001778 <SPI_RxByte>
 80018e0:	4603      	mov	r3, r0
 80018e2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2bff      	cmp	r3, #255	; 0xff
 80018e8:	d104      	bne.n	80018f4 <SD_RxDataBlock+0x28>
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <SD_RxDataBlock+0x68>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f3      	bne.n	80018dc <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	2bfe      	cmp	r3, #254	; 0xfe
 80018f8:	d001      	beq.n	80018fe <SD_RxDataBlock+0x32>
    return FALSE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e016      	b.n	800192c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff55 	bl	80017b4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff4f 	bl	80017b4 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	3b02      	subs	r3, #2
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ed      	bne.n	80018fe <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8001922:	f7ff ff29 	bl	8001778 <SPI_RxByte>
  SPI_RxByte();
 8001926:	f7ff ff27 	bl	8001778 <SPI_RxByte>
  
  return TRUE;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000d35 	.word	0x20000d35

08001938 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001948:	f7ff ff42 	bl	80017d0 <SD_ReadyWait>
 800194c:	4603      	mov	r3, r0
 800194e:	2bff      	cmp	r3, #255	; 0xff
 8001950:	d001      	beq.n	8001956 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001952:	2300      	movs	r3, #0
 8001954:	e040      	b.n	80019d8 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fef3 	bl	8001744 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	2bfd      	cmp	r3, #253	; 0xfd
 8001962:	d031      	beq.n	80019c8 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fee7 	bl	8001744 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fee0 	bl	8001744 <SPI_TxByte>
    } while (--wc);
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	3b01      	subs	r3, #1
 8001988:	73bb      	strb	r3, [r7, #14]
 800198a:	7bbb      	ldrb	r3, [r7, #14]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1eb      	bne.n	8001968 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001990:	f7ff fef2 	bl	8001778 <SPI_RxByte>
    SPI_RxByte();
 8001994:	f7ff fef0 	bl	8001778 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001998:	e00b      	b.n	80019b2 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800199a:	f7ff feed 	bl	8001778 <SPI_RxByte>
 800199e:	4603      	mov	r3, r0
 80019a0:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d006      	beq.n	80019ba <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80019ac:	7b7b      	ldrb	r3, [r7, #13]
 80019ae:	3301      	adds	r3, #1
 80019b0:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80019b2:	7b7b      	ldrb	r3, [r7, #13]
 80019b4:	2b40      	cmp	r3, #64	; 0x40
 80019b6:	d9f0      	bls.n	800199a <SD_TxDataBlock+0x62>
 80019b8:	e000      	b.n	80019bc <SD_TxDataBlock+0x84>
        break;
 80019ba:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80019bc:	bf00      	nop
 80019be:	f7ff fedb 	bl	8001778 <SPI_RxByte>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0fa      	beq.n	80019be <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d101      	bne.n	80019d6 <SD_TxDataBlock+0x9e>
    return TRUE;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80019ec:	f7ff fef0 	bl	80017d0 <SD_ReadyWait>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2bff      	cmp	r3, #255	; 0xff
 80019f4:	d001      	beq.n	80019fa <SD_SendCmd+0x1a>
    return 0xFF;
 80019f6:	23ff      	movs	r3, #255	; 0xff
 80019f8:	e040      	b.n	8001a7c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fea1 	bl	8001744 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	0e1b      	lsrs	r3, r3, #24
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fe9b 	bl	8001744 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fe95 	bl	8001744 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fe8f 	bl	8001744 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fe8a 	bl	8001744 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b40      	cmp	r3, #64	; 0x40
 8001a38:	d101      	bne.n	8001a3e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001a3a:	2395      	movs	r3, #149	; 0x95
 8001a3c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b48      	cmp	r3, #72	; 0x48
 8001a42:	d101      	bne.n	8001a48 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001a44:	2387      	movs	r3, #135	; 0x87
 8001a46:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fe7a 	bl	8001744 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b4c      	cmp	r3, #76	; 0x4c
 8001a54:	d101      	bne.n	8001a5a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001a56:	f7ff fe8f 	bl	8001778 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001a5e:	f7ff fe8b 	bl	8001778 <SPI_RxByte>
 8001a62:	4603      	mov	r3, r0
 8001a64:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001a66:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	da05      	bge.n	8001a7a <SD_SendCmd+0x9a>
 8001a6e:	7bbb      	ldrb	r3, [r7, #14]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	73bb      	strb	r3, [r7, #14]
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f1      	bne.n	8001a5e <SD_SendCmd+0x7e>
  
  return res;
 8001a7a:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0d5      	b.n	8001c44 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001a98:	4b6c      	ldr	r3, [pc, #432]	; (8001c4c <SD_disk_initialize+0x1c8>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <SD_disk_initialize+0x2a>
    return Stat;        
 8001aa6:	4b69      	ldr	r3, [pc, #420]	; (8001c4c <SD_disk_initialize+0x1c8>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	e0ca      	b.n	8001c44 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001aae:	f7ff feab 	bl	8001808 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001ab2:	f7ff fe2f 	bl	8001714 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001aba:	2100      	movs	r1, #0
 8001abc:	2040      	movs	r0, #64	; 0x40
 8001abe:	f7ff ff8f 	bl	80019e0 <SD_SendCmd>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	f040 80a5 	bne.w	8001c14 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001aca:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <SD_disk_initialize+0x1cc>)
 8001acc:	2264      	movs	r2, #100	; 0x64
 8001ace:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001ad0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001ad4:	2048      	movs	r0, #72	; 0x48
 8001ad6:	f7ff ff83 	bl	80019e0 <SD_SendCmd>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d158      	bne.n	8001b92 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e00c      	b.n	8001b00 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001ae6:	7bfc      	ldrb	r4, [r7, #15]
 8001ae8:	f7ff fe46 	bl	8001778 <SPI_RxByte>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4423      	add	r3, r4
 8001af6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	3301      	adds	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d9ef      	bls.n	8001ae6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001b06:	7abb      	ldrb	r3, [r7, #10]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	f040 8083 	bne.w	8001c14 <SD_disk_initialize+0x190>
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	2baa      	cmp	r3, #170	; 0xaa
 8001b12:	d17f      	bne.n	8001c14 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001b14:	2100      	movs	r1, #0
 8001b16:	2077      	movs	r0, #119	; 0x77
 8001b18:	f7ff ff62 	bl	80019e0 <SD_SendCmd>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d807      	bhi.n	8001b32 <SD_disk_initialize+0xae>
 8001b22:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b26:	2069      	movs	r0, #105	; 0x69
 8001b28:	f7ff ff5a 	bl	80019e0 <SD_SendCmd>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <SD_disk_initialize+0x1cc>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1eb      	bne.n	8001b14 <SD_disk_initialize+0x90>
 8001b3c:	e000      	b.n	8001b40 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001b3e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <SD_disk_initialize+0x1cc>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d064      	beq.n	8001c14 <SD_disk_initialize+0x190>
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	207a      	movs	r0, #122	; 0x7a
 8001b4e:	f7ff ff47 	bl	80019e0 <SD_SendCmd>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d15d      	bne.n	8001c14 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e00c      	b.n	8001b78 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001b5e:	7bfc      	ldrb	r4, [r7, #15]
 8001b60:	f7ff fe0a 	bl	8001778 <SPI_RxByte>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	4423      	add	r3, r4
 8001b6e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	3301      	adds	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d9ef      	bls.n	8001b5e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001b7e:	7a3b      	ldrb	r3, [r7, #8]
 8001b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SD_disk_initialize+0x108>
 8001b88:	2306      	movs	r3, #6
 8001b8a:	e000      	b.n	8001b8e <SD_disk_initialize+0x10a>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	73bb      	strb	r3, [r7, #14]
 8001b90:	e040      	b.n	8001c14 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001b92:	2100      	movs	r1, #0
 8001b94:	2077      	movs	r0, #119	; 0x77
 8001b96:	f7ff ff23 	bl	80019e0 <SD_SendCmd>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d808      	bhi.n	8001bb2 <SD_disk_initialize+0x12e>
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2069      	movs	r0, #105	; 0x69
 8001ba4:	f7ff ff1c 	bl	80019e0 <SD_SendCmd>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d801      	bhi.n	8001bb2 <SD_disk_initialize+0x12e>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e000      	b.n	8001bb4 <SD_disk_initialize+0x130>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d10e      	bne.n	8001bda <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2077      	movs	r0, #119	; 0x77
 8001bc0:	f7ff ff0e 	bl	80019e0 <SD_SendCmd>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d80e      	bhi.n	8001be8 <SD_disk_initialize+0x164>
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2069      	movs	r0, #105	; 0x69
 8001bce:	f7ff ff07 	bl	80019e0 <SD_SendCmd>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001bd8:	e00d      	b.n	8001bf6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2041      	movs	r0, #65	; 0x41
 8001bde:	f7ff feff 	bl	80019e0 <SD_SendCmd>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <SD_disk_initialize+0x1cc>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1e1      	bne.n	8001bb6 <SD_disk_initialize+0x132>
 8001bf2:	e000      	b.n	8001bf6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001bf4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <SD_disk_initialize+0x1cc>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <SD_disk_initialize+0x18c>
 8001c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c04:	2050      	movs	r0, #80	; 0x50
 8001c06:	f7ff feeb 	bl	80019e0 <SD_SendCmd>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001c14:	4a0f      	ldr	r2, [pc, #60]	; (8001c54 <SD_disk_initialize+0x1d0>)
 8001c16:	7bbb      	ldrb	r3, [r7, #14]
 8001c18:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001c1a:	f7ff fd87 	bl	800172c <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001c1e:	f7ff fdab 	bl	8001778 <SPI_RxByte>
  
  if (type) 
 8001c22:	7bbb      	ldrb	r3, [r7, #14]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <SD_disk_initialize+0x1c8>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <SD_disk_initialize+0x1c8>)
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e001      	b.n	8001c3e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001c3a:	f7ff fe31 	bl	80018a0 <SD_PowerOff>
  }
  
  return Stat;
 8001c3e:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <SD_disk_initialize+0x1c8>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b2db      	uxtb	r3, r3
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000d35 	.word	0x20000d35
 8001c54:	20000278 	.word	0x20000278

08001c58 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e002      	b.n	8001c72 <SD_disk_status+0x1a>
  
  return Stat;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <SD_disk_status+0x24>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	20000000 	.word	0x20000000

08001c80 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <SD_disk_read+0x1c>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <SD_disk_read+0x20>
    return RES_PARERR;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	e051      	b.n	8001d44 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <SD_disk_read+0xcc>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e048      	b.n	8001d44 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001cb2:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <SD_disk_read+0xd0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	025b      	lsls	r3, r3, #9
 8001cc2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001cc4:	f7ff fd26 	bl	8001714 <SELECT>
  
  if (count == 1) 
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d111      	bne.n	8001cf2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	2051      	movs	r0, #81	; 0x51
 8001cd2:	f7ff fe85 	bl	80019e0 <SD_SendCmd>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d129      	bne.n	8001d30 <SD_disk_read+0xb0>
 8001cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ce0:	68b8      	ldr	r0, [r7, #8]
 8001ce2:	f7ff fdf3 	bl	80018cc <SD_RxDataBlock>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d021      	beq.n	8001d30 <SD_disk_read+0xb0>
      count = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	e01e      	b.n	8001d30 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	2052      	movs	r0, #82	; 0x52
 8001cf6:	f7ff fe73 	bl	80019e0 <SD_SendCmd>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d117      	bne.n	8001d30 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d04:	68b8      	ldr	r0, [r7, #8]
 8001d06:	f7ff fde1 	bl	80018cc <SD_RxDataBlock>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00a      	beq.n	8001d26 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d16:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ed      	bne.n	8001d00 <SD_disk_read+0x80>
 8001d24:	e000      	b.n	8001d28 <SD_disk_read+0xa8>
          break;
 8001d26:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001d28:	2100      	movs	r1, #0
 8001d2a:	204c      	movs	r0, #76	; 0x4c
 8001d2c:	f7ff fe58 	bl	80019e0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001d30:	f7ff fcfc 	bl	800172c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001d34:	f7ff fd20 	bl	8001778 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000278 	.word	0x20000278

08001d54 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4603      	mov	r3, r0
 8001d62:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <SD_disk_write+0x1c>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <SD_disk_write+0x20>
    return RES_PARERR;
 8001d70:	2304      	movs	r3, #4
 8001d72:	e06b      	b.n	8001e4c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001d74:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <SD_disk_write+0x100>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e062      	b.n	8001e4c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001d86:	4b33      	ldr	r3, [pc, #204]	; (8001e54 <SD_disk_write+0x100>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001d94:	2302      	movs	r3, #2
 8001d96:	e059      	b.n	8001e4c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001d98:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <SD_disk_write+0x104>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	025b      	lsls	r3, r3, #9
 8001da8:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001daa:	f7ff fcb3 	bl	8001714 <SELECT>
  
  if (count == 1) 
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d110      	bne.n	8001dd6 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	2058      	movs	r0, #88	; 0x58
 8001db8:	f7ff fe12 	bl	80019e0 <SD_SendCmd>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d13a      	bne.n	8001e38 <SD_disk_write+0xe4>
 8001dc2:	21fe      	movs	r1, #254	; 0xfe
 8001dc4:	68b8      	ldr	r0, [r7, #8]
 8001dc6:	f7ff fdb7 	bl	8001938 <SD_TxDataBlock>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d033      	beq.n	8001e38 <SD_disk_write+0xe4>
      count = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	e030      	b.n	8001e38 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <SD_disk_write+0x104>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001de2:	2100      	movs	r1, #0
 8001de4:	2077      	movs	r0, #119	; 0x77
 8001de6:	f7ff fdfb 	bl	80019e0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001dea:	6839      	ldr	r1, [r7, #0]
 8001dec:	2057      	movs	r0, #87	; 0x57
 8001dee:	f7ff fdf7 	bl	80019e0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	2059      	movs	r0, #89	; 0x59
 8001df6:	f7ff fdf3 	bl	80019e0 <SD_SendCmd>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d11b      	bne.n	8001e38 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001e00:	21fc      	movs	r1, #252	; 0xfc
 8001e02:	68b8      	ldr	r0, [r7, #8]
 8001e04:	f7ff fd98 	bl	8001938 <SD_TxDataBlock>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e14:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ee      	bne.n	8001e00 <SD_disk_write+0xac>
 8001e22:	e000      	b.n	8001e26 <SD_disk_write+0xd2>
          break;
 8001e24:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001e26:	21fd      	movs	r1, #253	; 0xfd
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff fd85 	bl	8001938 <SD_TxDataBlock>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001e38:	f7ff fc78 	bl	800172c <DESELECT>
  SPI_RxByte();
 8001e3c:	f7ff fc9c 	bl	8001778 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf14      	ite	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000278 	.word	0x20000278

08001e5c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b08b      	sub	sp, #44	; 0x2c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	603a      	str	r2, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001e76:	2304      	movs	r3, #4
 8001e78:	e117      	b.n	80020aa <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001e80:	79bb      	ldrb	r3, [r7, #6]
 8001e82:	2b05      	cmp	r3, #5
 8001e84:	d126      	bne.n	8001ed4 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d00e      	beq.n	8001eac <SD_disk_ioctl+0x50>
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d012      	beq.n	8001eb8 <SD_disk_ioctl+0x5c>
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d11a      	bne.n	8001ecc <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8001e96:	f7ff fd0f 	bl	80018b8 <SD_CheckPower>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8001ea0:	f7ff fcfe 	bl	80018a0 <SD_PowerOff>
      res = RES_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001eaa:	e0fc      	b.n	80020a6 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8001eac:	f7ff fcac 	bl	8001808 <SD_PowerOn>
      res = RES_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001eb6:	e0f6      	b.n	80020a6 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	1c5c      	adds	r4, r3, #1
 8001ebc:	f7ff fcfc 	bl	80018b8 <SD_CheckPower>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001eca:	e0ec      	b.n	80020a6 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ed2:	e0e8      	b.n	80020a6 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001ed4:	4b77      	ldr	r3, [pc, #476]	; (80020b4 <SD_disk_ioctl+0x258>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0e1      	b.n	80020aa <SD_disk_ioctl+0x24e>
    
    SELECT();
 8001ee6:	f7ff fc15 	bl	8001714 <SELECT>
    
    switch (ctrl) 
 8001eea:	79bb      	ldrb	r3, [r7, #6]
 8001eec:	2b0d      	cmp	r3, #13
 8001eee:	f200 80cb 	bhi.w	8002088 <SD_disk_ioctl+0x22c>
 8001ef2:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <SD_disk_ioctl+0x9c>)
 8001ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef8:	08001ff3 	.word	0x08001ff3
 8001efc:	08001f31 	.word	0x08001f31
 8001f00:	08001fe3 	.word	0x08001fe3
 8001f04:	08002089 	.word	0x08002089
 8001f08:	08002089 	.word	0x08002089
 8001f0c:	08002089 	.word	0x08002089
 8001f10:	08002089 	.word	0x08002089
 8001f14:	08002089 	.word	0x08002089
 8001f18:	08002089 	.word	0x08002089
 8001f1c:	08002089 	.word	0x08002089
 8001f20:	08002089 	.word	0x08002089
 8001f24:	08002005 	.word	0x08002005
 8001f28:	08002029 	.word	0x08002029
 8001f2c:	0800204d 	.word	0x0800204d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001f30:	2100      	movs	r1, #0
 8001f32:	2049      	movs	r0, #73	; 0x49
 8001f34:	f7ff fd54 	bl	80019e0 <SD_SendCmd>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 80a8 	bne.w	8002090 <SD_disk_ioctl+0x234>
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	2110      	movs	r1, #16
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fcc0 	bl	80018cc <SD_RxDataBlock>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 809e 	beq.w	8002090 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8001f54:	7b3b      	ldrb	r3, [r7, #12]
 8001f56:	099b      	lsrs	r3, r3, #6
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10e      	bne.n	8001f7c <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f5e:	7d7b      	ldrb	r3, [r7, #21]
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	7d3b      	ldrb	r3, [r7, #20]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001f72:	8bfb      	ldrh	r3, [r7, #30]
 8001f74:	029a      	lsls	r2, r3, #10
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e02e      	b.n	8001fda <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001f7c:	7c7b      	ldrb	r3, [r7, #17]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	7dbb      	ldrb	r3, [r7, #22]
 8001f86:	09db      	lsrs	r3, r3, #7
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	7d7b      	ldrb	r3, [r7, #21]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 0306 	and.w	r3, r3, #6
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001fa4:	7d3b      	ldrb	r3, [r7, #20]
 8001fa6:	099b      	lsrs	r3, r3, #6
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	7cbb      	ldrb	r3, [r7, #18]
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001fcc:	8bfa      	ldrh	r2, [r7, #30]
 8001fce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fd2:	3b09      	subs	r3, #9
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001fe0:	e056      	b.n	8002090 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ff0:	e055      	b.n	800209e <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001ff2:	f7ff fbed 	bl	80017d0 <SD_ReadyWait>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2bff      	cmp	r3, #255	; 0xff
 8001ffa:	d14b      	bne.n	8002094 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002002:	e047      	b.n	8002094 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002004:	2100      	movs	r1, #0
 8002006:	2049      	movs	r0, #73	; 0x49
 8002008:	f7ff fcea 	bl	80019e0 <SD_SendCmd>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d142      	bne.n	8002098 <SD_disk_ioctl+0x23c>
 8002012:	2110      	movs	r1, #16
 8002014:	6a38      	ldr	r0, [r7, #32]
 8002016:	f7ff fc59 	bl	80018cc <SD_RxDataBlock>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d03b      	beq.n	8002098 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002026:	e037      	b.n	8002098 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002028:	2100      	movs	r1, #0
 800202a:	204a      	movs	r0, #74	; 0x4a
 800202c:	f7ff fcd8 	bl	80019e0 <SD_SendCmd>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d132      	bne.n	800209c <SD_disk_ioctl+0x240>
 8002036:	2110      	movs	r1, #16
 8002038:	6a38      	ldr	r0, [r7, #32]
 800203a:	f7ff fc47 	bl	80018cc <SD_RxDataBlock>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d02b      	beq.n	800209c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800204a:	e027      	b.n	800209c <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 800204c:	2100      	movs	r1, #0
 800204e:	207a      	movs	r0, #122	; 0x7a
 8002050:	f7ff fcc6 	bl	80019e0 <SD_SendCmd>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d116      	bne.n	8002088 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 800205a:	2300      	movs	r3, #0
 800205c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002060:	e00b      	b.n	800207a <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8002062:	6a3c      	ldr	r4, [r7, #32]
 8002064:	1c63      	adds	r3, r4, #1
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	f7ff fb86 	bl	8001778 <SPI_RxByte>
 800206c:	4603      	mov	r3, r0
 800206e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002070:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002074:	3301      	adds	r3, #1
 8002076:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800207a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800207e:	2b03      	cmp	r3, #3
 8002080:	d9ef      	bls.n	8002062 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8002088:	2304      	movs	r3, #4
 800208a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800208e:	e006      	b.n	800209e <SD_disk_ioctl+0x242>
      break;
 8002090:	bf00      	nop
 8002092:	e004      	b.n	800209e <SD_disk_ioctl+0x242>
      break;
 8002094:	bf00      	nop
 8002096:	e002      	b.n	800209e <SD_disk_ioctl+0x242>
      break;
 8002098:	bf00      	nop
 800209a:	e000      	b.n	800209e <SD_disk_ioctl+0x242>
      break;
 800209c:	bf00      	nop
    }
    
    DESELECT();
 800209e:	f7ff fb45 	bl	800172c <DESELECT>
    SPI_RxByte();
 80020a2:	f7ff fb69 	bl	8001778 <SPI_RxByte>
  }
  
  return res;
 80020a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	372c      	adds	r7, #44	; 0x2c
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd90      	pop	{r4, r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000000 	.word	0x20000000

080020b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80020c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80020c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80020d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80020d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80020d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00b      	beq.n	80020f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80020e0:	e000      	b.n	80020e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80020e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80020e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f9      	beq.n	80020e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80020ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80020f8:	687b      	ldr	r3, [r7, #4]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	0000      	movs	r0, r0
	...

08002108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800210c:	b0a7      	sub	sp, #156	; 0x9c
 800210e:	af0e      	add	r7, sp, #56	; 0x38
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002110:	f001 f82a 	bl	8003168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002114:	f000 fa40 	bl	8002598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002118:	f000 fbf8 	bl	800290c <MX_GPIO_Init>
  MX_ADC1_Init();
 800211c:	f000 faa0 	bl	8002660 <MX_ADC1_Init>
  MX_CAN_Init();
 8002120:	f000 faec 	bl	80026fc <MX_CAN_Init>
  MX_FATFS_Init();
 8002124:	f004 f83e 	bl	80061a4 <MX_FATFS_Init>
  MX_RTC_Init();
 8002128:	f000 fb1c 	bl	8002764 <MX_RTC_Init>
  MX_SPI2_Init();
 800212c:	f000 fb64 	bl	80027f8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002130:	f000 fb98 	bl	8002864 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello!\n");
 8002134:	48ba      	ldr	r0, [pc, #744]	; (8002420 <main+0x318>)
 8002136:	f008 f957 	bl	800a3e8 <puts>
	  HAL_GPIO_WritePin(CS_accel_GPIO_Port, CS_accel_Pin, SET);
 800213a:	2201      	movs	r2, #1
 800213c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002140:	48b8      	ldr	r0, [pc, #736]	; (8002424 <main+0x31c>)
 8002142:	f001 fdd9 	bl	8003cf8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CS_gyro_GPIO_Port, CS_gyro_Pin, SET);
 8002146:	2201      	movs	r2, #1
 8002148:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800214c:	48b5      	ldr	r0, [pc, #724]	; (8002424 <main+0x31c>)
 800214e:	f001 fdd3 	bl	8003cf8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, SET);
 8002152:	2201      	movs	r2, #1
 8002154:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002158:	48b2      	ldr	r0, [pc, #712]	; (8002424 <main+0x31c>)
 800215a:	f001 fdcd 	bl	8003cf8 <HAL_GPIO_WritePin>
  fresult=mount_card (&fs);
 800215e:	48b2      	ldr	r0, [pc, #712]	; (8002428 <main+0x320>)
 8002160:	f000 fca4 	bl	8002aac <mount_card>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	4bb0      	ldr	r3, [pc, #704]	; (800242c <main+0x324>)
 800216a:	701a      	strb	r2, [r3, #0]
  card_capacity(&free_space, &total);
 800216c:	49b0      	ldr	r1, [pc, #704]	; (8002430 <main+0x328>)
 800216e:	48b1      	ldr	r0, [pc, #708]	; (8002434 <main+0x32c>)
 8002170:	f000 fcac 	bl	8002acc <card_capacity>
  printf("Hello!\nFree Space: %10lu KB", free_space/2);
 8002174:	4baf      	ldr	r3, [pc, #700]	; (8002434 <main+0x32c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	4619      	mov	r1, r3
 800217c:	48ae      	ldr	r0, [pc, #696]	; (8002438 <main+0x330>)
 800217e:	f008 f8ab 	bl	800a2d8 <iprintf>
  //update_file("enc.txt", "OLE OLE OLE",  &fil, &bw);
  //update_file("imu_acc.txt", "IMU IMU IMU", &fil2, &bw2);

  MX_CAN_Init();
 8002182:	f000 fabb 	bl	80026fc <MX_CAN_Init>


  //IMU_config(&hspi2);

  uint32_t counter = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	65bb      	str	r3, [r7, #88]	; 0x58
  char str[20];
  float speed = 0;
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002190:	213c      	movs	r1, #60	; 0x3c
 8002192:	48aa      	ldr	r0, [pc, #680]	; (800243c <main+0x334>)
 8002194:	f003 ff05 	bl	8005fa2 <HAL_TIM_Encoder_Start>
 // HAL_TIM_Encoder_Init(&htim3, sConfig)
  uint32_t tick = HAL_GetTick();
 8002198:	f001 f83e 	bl	8003218 <HAL_GetTick>
 800219c:	4603      	mov	r3, r0
 800219e:	643b      	str	r3, [r7, #64]	; 0x40
  counter = __HAL_TIM_GET_COUNTER(&htim3);
 80021a0:	4ba6      	ldr	r3, [pc, #664]	; (800243c <main+0x334>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	65bb      	str	r3, [r7, #88]	; 0x58
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  printf("counter encoder mode: %lu \n", counter);
 80021a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021aa:	4619      	mov	r1, r3
 80021ac:	48a4      	ldr	r0, [pc, #656]	; (8002440 <main+0x338>)
 80021ae:	f008 f893 	bl	800a2d8 <iprintf>
	  //HAL_Delay(500);
	  if (HAL_GetTick() - tick > 1000L){
 80021b2:	f001 f831 	bl	8003218 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c0:	d920      	bls.n	8002204 <main+0xfc>
		  printf("hal = %lu , tick = %lu, Aquii \n", HAL_GetTick(), tick);
 80021c2:	f001 f829 	bl	8003218 <HAL_GetTick>
 80021c6:	4601      	mov	r1, r0
 80021c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ca:	461a      	mov	r2, r3
 80021cc:	489d      	ldr	r0, [pc, #628]	; (8002444 <main+0x33c>)
 80021ce:	f008 f883 	bl	800a2d8 <iprintf>
		  speed = motorSpeed(&counter, &tick, htim3);
 80021d2:	4e9a      	ldr	r6, [pc, #616]	; (800243c <main+0x334>)
 80021d4:	f107 0e40 	add.w	lr, r7, #64	; 0x40
 80021d8:	f107 0c58 	add.w	ip, r7, #88	; 0x58
 80021dc:	466d      	mov	r5, sp
 80021de:	f106 0408 	add.w	r4, r6, #8
 80021e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80021fa:	4671      	mov	r1, lr
 80021fc:	4660      	mov	r0, ip
 80021fe:	f7ff fa1b 	bl	8001638 <motorSpeed>
 8002202:	65f8      	str	r0, [r7, #92]	; 0x5c
	  }


	 // speed = motorSpeed(counter, htim3);
	  printf("rpm = %f\n",speed);
 8002204:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002206:	f7fe f919 	bl	800043c <__aeabi_f2d>
 800220a:	4603      	mov	r3, r0
 800220c:	460c      	mov	r4, r1
 800220e:	461a      	mov	r2, r3
 8002210:	4623      	mov	r3, r4
 8002212:	488d      	ldr	r0, [pc, #564]	; (8002448 <main+0x340>)
 8002214:	f008 f860 	bl	800a2d8 <iprintf>

	  sprintf(str , "%f ", speed);
 8002218:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800221a:	f7fe f90f 	bl	800043c <__aeabi_f2d>
 800221e:	4603      	mov	r3, r0
 8002220:	460c      	mov	r4, r1
 8002222:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002226:	461a      	mov	r2, r3
 8002228:	4623      	mov	r3, r4
 800222a:	4988      	ldr	r1, [pc, #544]	; (800244c <main+0x344>)
 800222c:	f008 f8f4 	bl	800a418 <siprintf>

	  printf("speed %s\n", str);
 8002230:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002234:	4619      	mov	r1, r3
 8002236:	4886      	ldr	r0, [pc, #536]	; (8002450 <main+0x348>)
 8002238:	f008 f84e 	bl	800a2d8 <iprintf>
	  fresult=update_file("enc.txt", str, get_timestamp(&hrtc, &currentTime, &currentDate) , &fil, &bw);
 800223c:	4a85      	ldr	r2, [pc, #532]	; (8002454 <main+0x34c>)
 800223e:	4986      	ldr	r1, [pc, #536]	; (8002458 <main+0x350>)
 8002240:	4886      	ldr	r0, [pc, #536]	; (800245c <main+0x354>)
 8002242:	f000 fca3 	bl	8002b8c <get_timestamp>
 8002246:	4602      	mov	r2, r0
 8002248:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800224c:	4b84      	ldr	r3, [pc, #528]	; (8002460 <main+0x358>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	4b84      	ldr	r3, [pc, #528]	; (8002464 <main+0x35c>)
 8002252:	4885      	ldr	r0, [pc, #532]	; (8002468 <main+0x360>)
 8002254:	f000 fc62 	bl	8002b1c <update_file>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	4b73      	ldr	r3, [pc, #460]	; (800242c <main+0x324>)
 800225e:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002264:	4881      	ldr	r0, [pc, #516]	; (800246c <main+0x364>)
 8002266:	f001 fd5f 	bl	8003d28 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800226a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800226e:	f000 ffdd 	bl	800322c <HAL_Delay>
	  //printf("hello\n");

	  IMU_acc_read(&hspi2, accel_data);
 8002272:	497f      	ldr	r1, [pc, #508]	; (8002470 <main+0x368>)
 8002274:	487f      	ldr	r0, [pc, #508]	; (8002474 <main+0x36c>)
 8002276:	f7ff f879 	bl	800136c <IMU_acc_read>

	  printf("\raccel data x: %d accel data y: %d accel data z: %d ", accel_data[0], accel_data[1], accel_data[2]);
 800227a:	4b7d      	ldr	r3, [pc, #500]	; (8002470 <main+0x368>)
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	4b7c      	ldr	r3, [pc, #496]	; (8002470 <main+0x368>)
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4b7b      	ldr	r3, [pc, #492]	; (8002470 <main+0x368>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	487c      	ldr	r0, [pc, #496]	; (8002478 <main+0x370>)
 8002288:	f008 f826 	bl	800a2d8 <iprintf>
	  char acxstr[20];
	  char acystr[20];
	  char aczstr[20];

	  acx = accel_data[0]*0.00098;
 800228c:	4b78      	ldr	r3, [pc, #480]	; (8002470 <main+0x368>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f8c1 	bl	8000418 <__aeabi_i2d>
 8002296:	a35e      	add	r3, pc, #376	; (adr r3, 8002410 <main+0x308>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe f926 	bl	80004ec <__aeabi_dmul>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	4618      	mov	r0, r3
 80022a6:	4621      	mov	r1, r4
 80022a8:	f7fe fbf8 	bl	8000a9c <__aeabi_d2f>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b73      	ldr	r3, [pc, #460]	; (800247c <main+0x374>)
 80022b0:	601a      	str	r2, [r3, #0]
	  acy = accel_data[1]*0.00098;
 80022b2:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <main+0x368>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f8ae 	bl	8000418 <__aeabi_i2d>
 80022bc:	a354      	add	r3, pc, #336	; (adr r3, 8002410 <main+0x308>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f7fe f913 	bl	80004ec <__aeabi_dmul>
 80022c6:	4603      	mov	r3, r0
 80022c8:	460c      	mov	r4, r1
 80022ca:	4618      	mov	r0, r3
 80022cc:	4621      	mov	r1, r4
 80022ce:	f7fe fbe5 	bl	8000a9c <__aeabi_d2f>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <main+0x378>)
 80022d6:	601a      	str	r2, [r3, #0]
	  acz = accel_data[2]*0.00098;
 80022d8:	4b65      	ldr	r3, [pc, #404]	; (8002470 <main+0x368>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f89b 	bl	8000418 <__aeabi_i2d>
 80022e2:	a34b      	add	r3, pc, #300	; (adr r3, 8002410 <main+0x308>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fe f900 	bl	80004ec <__aeabi_dmul>
 80022ec:	4603      	mov	r3, r0
 80022ee:	460c      	mov	r4, r1
 80022f0:	4618      	mov	r0, r3
 80022f2:	4621      	mov	r1, r4
 80022f4:	f7fe fbd2 	bl	8000a9c <__aeabi_d2f>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b62      	ldr	r3, [pc, #392]	; (8002484 <main+0x37c>)
 80022fc:	601a      	str	r2, [r3, #0]
	  sprintf(acxstr, "acx - %f ", acx);
 80022fe:	4b5f      	ldr	r3, [pc, #380]	; (800247c <main+0x374>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f89a 	bl	800043c <__aeabi_f2d>
 8002308:	4603      	mov	r3, r0
 800230a:	460c      	mov	r4, r1
 800230c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002310:	461a      	mov	r2, r3
 8002312:	4623      	mov	r3, r4
 8002314:	495c      	ldr	r1, [pc, #368]	; (8002488 <main+0x380>)
 8002316:	f008 f87f 	bl	800a418 <siprintf>
	  sprintf(acystr, "acy - %f ", acy);
 800231a:	4b59      	ldr	r3, [pc, #356]	; (8002480 <main+0x378>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f88c 	bl	800043c <__aeabi_f2d>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	f107 0018 	add.w	r0, r7, #24
 800232c:	461a      	mov	r2, r3
 800232e:	4623      	mov	r3, r4
 8002330:	4956      	ldr	r1, [pc, #344]	; (800248c <main+0x384>)
 8002332:	f008 f871 	bl	800a418 <siprintf>
	  sprintf(aczstr, "acz - %f ", acz);
 8002336:	4b53      	ldr	r3, [pc, #332]	; (8002484 <main+0x37c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f87e 	bl	800043c <__aeabi_f2d>
 8002340:	4603      	mov	r3, r0
 8002342:	460c      	mov	r4, r1
 8002344:	1d38      	adds	r0, r7, #4
 8002346:	461a      	mov	r2, r3
 8002348:	4623      	mov	r3, r4
 800234a:	4951      	ldr	r1, [pc, #324]	; (8002490 <main+0x388>)
 800234c:	f008 f864 	bl	800a418 <siprintf>
	  HAL_Delay(100);
 8002350:	2064      	movs	r0, #100	; 0x64
 8002352:	f000 ff6b 	bl	800322c <HAL_Delay>
	  update_file("imu_acc.txt", acxstr, get_timestamp(&hrtc, &currentTime, &currentDate), &fil2, &bw2);
 8002356:	4a3f      	ldr	r2, [pc, #252]	; (8002454 <main+0x34c>)
 8002358:	493f      	ldr	r1, [pc, #252]	; (8002458 <main+0x350>)
 800235a:	4840      	ldr	r0, [pc, #256]	; (800245c <main+0x354>)
 800235c:	f000 fc16 	bl	8002b8c <get_timestamp>
 8002360:	4602      	mov	r2, r0
 8002362:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002366:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <main+0x38c>)
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <main+0x390>)
 800236c:	484b      	ldr	r0, [pc, #300]	; (800249c <main+0x394>)
 800236e:	f000 fbd5 	bl	8002b1c <update_file>

	  update_file("imu_acc.txt", acystr, get_timestamp(&hrtc, &currentTime, &currentDate), &fil2, &bw2);
 8002372:	4a38      	ldr	r2, [pc, #224]	; (8002454 <main+0x34c>)
 8002374:	4938      	ldr	r1, [pc, #224]	; (8002458 <main+0x350>)
 8002376:	4839      	ldr	r0, [pc, #228]	; (800245c <main+0x354>)
 8002378:	f000 fc08 	bl	8002b8c <get_timestamp>
 800237c:	4602      	mov	r2, r0
 800237e:	f107 0118 	add.w	r1, r7, #24
 8002382:	4b44      	ldr	r3, [pc, #272]	; (8002494 <main+0x38c>)
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	4b44      	ldr	r3, [pc, #272]	; (8002498 <main+0x390>)
 8002388:	4844      	ldr	r0, [pc, #272]	; (800249c <main+0x394>)
 800238a:	f000 fbc7 	bl	8002b1c <update_file>

	  update_file("imu_acc.txt", aczstr, get_timestamp(&hrtc, &currentTime, &currentDate), &fil2, &bw2);
 800238e:	4a31      	ldr	r2, [pc, #196]	; (8002454 <main+0x34c>)
 8002390:	4931      	ldr	r1, [pc, #196]	; (8002458 <main+0x350>)
 8002392:	4832      	ldr	r0, [pc, #200]	; (800245c <main+0x354>)
 8002394:	f000 fbfa 	bl	8002b8c <get_timestamp>
 8002398:	4602      	mov	r2, r0
 800239a:	1d39      	adds	r1, r7, #4
 800239c:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <main+0x38c>)
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <main+0x390>)
 80023a2:	483e      	ldr	r0, [pc, #248]	; (800249c <main+0x394>)
 80023a4:	f000 fbba 	bl	8002b1c <update_file>


	  printf("\rreal value x: %f G real value y: %f G real value z: %f G ", acx, acy, acz);
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <main+0x374>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f845 	bl	800043c <__aeabi_f2d>
 80023b2:	4680      	mov	r8, r0
 80023b4:	4689      	mov	r9, r1
 80023b6:	4b32      	ldr	r3, [pc, #200]	; (8002480 <main+0x378>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f83e 	bl	800043c <__aeabi_f2d>
 80023c0:	4604      	mov	r4, r0
 80023c2:	460d      	mov	r5, r1
 80023c4:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <main+0x37c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f837 	bl	800043c <__aeabi_f2d>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023d6:	e9cd 4500 	strd	r4, r5, [sp]
 80023da:	4642      	mov	r2, r8
 80023dc:	464b      	mov	r3, r9
 80023de:	4830      	ldr	r0, [pc, #192]	; (80024a0 <main+0x398>)
 80023e0:	f007 ff7a 	bl	800a2d8 <iprintf>

	  IMU_gyro_read(&hspi2, gyro_data);
 80023e4:	492f      	ldr	r1, [pc, #188]	; (80024a4 <main+0x39c>)
 80023e6:	4823      	ldr	r0, [pc, #140]	; (8002474 <main+0x36c>)
 80023e8:	f7ff f83a 	bl	8001460 <IMU_gyro_read>

	  printf("\rgyro data x: %d gyro data y: %d gyro data z: %d ", gyro_data[0], gyro_data[1], gyro_data[2]);
 80023ec:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <main+0x39c>)
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <main+0x39c>)
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <main+0x39c>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	482b      	ldr	r0, [pc, #172]	; (80024a8 <main+0x3a0>)
 80023fa:	f007 ff6d 	bl	800a2d8 <iprintf>

	  gyx = (262.4/32767)*gyro_data[0];
 80023fe:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <main+0x39c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f808 	bl	8000418 <__aeabi_i2d>
 8002408:	a303      	add	r3, pc, #12	; (adr r3, 8002418 <main+0x310>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	e04d      	b.n	80024ac <main+0x3a4>
 8002410:	fcce1c58 	.word	0xfcce1c58
 8002414:	3f500e6a 	.word	0x3f500e6a
 8002418:	3374cd50 	.word	0x3374cd50
 800241c:	3f806687 	.word	0x3f806687
 8002420:	0800d350 	.word	0x0800d350
 8002424:	40010800 	.word	0x40010800
 8002428:	20000338 	.word	0x20000338
 800242c:	20000878 	.word	0x20000878
 8002430:	20000888 	.word	0x20000888
 8002434:	20000630 	.word	0x20000630
 8002438:	0800d358 	.word	0x0800d358
 800243c:	200005c0 	.word	0x200005c0
 8002440:	0800d374 	.word	0x0800d374
 8002444:	0800d390 	.word	0x0800d390
 8002448:	0800d3b0 	.word	0x0800d3b0
 800244c:	0800d3bc 	.word	0x0800d3bc
 8002450:	0800d3c0 	.word	0x0800d3c0
 8002454:	2000088c 	.word	0x2000088c
 8002458:	20000b00 	.word	0x20000b00
 800245c:	2000083c 	.word	0x2000083c
 8002460:	20000870 	.word	0x20000870
 8002464:	200008c4 	.word	0x200008c4
 8002468:	0800d3cc 	.word	0x0800d3cc
 800246c:	40011000 	.word	0x40011000
 8002470:	20000858 	.word	0x20000858
 8002474:	200002e0 	.word	0x200002e0
 8002478:	0800d3d4 	.word	0x0800d3d4
 800247c:	20000afc 	.word	0x20000afc
 8002480:	20000638 	.word	0x20000638
 8002484:	20000884 	.word	0x20000884
 8002488:	0800d40c 	.word	0x0800d40c
 800248c:	0800d418 	.word	0x0800d418
 8002490:	0800d424 	.word	0x0800d424
 8002494:	20000634 	.word	0x20000634
 8002498:	20000b08 	.word	0x20000b08
 800249c:	0800d430 	.word	0x0800d430
 80024a0:	0800d43c 	.word	0x0800d43c
 80024a4:	20000864 	.word	0x20000864
 80024a8:	0800d478 	.word	0x0800d478
 80024ac:	f7fe f81e 	bl	80004ec <__aeabi_dmul>
 80024b0:	4603      	mov	r3, r0
 80024b2:	460c      	mov	r4, r1
 80024b4:	4618      	mov	r0, r3
 80024b6:	4621      	mov	r1, r4
 80024b8:	f7fe faf0 	bl	8000a9c <__aeabi_d2f>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <main+0x470>)
 80024c0:	601a      	str	r2, [r3, #0]
	  gyy = (262.4/32767)*gyro_data[1];
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <main+0x474>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fd ffa6 	bl	8000418 <__aeabi_i2d>
 80024cc:	a328      	add	r3, pc, #160	; (adr r3, 8002570 <main+0x468>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	f7fe f80b 	bl	80004ec <__aeabi_dmul>
 80024d6:	4603      	mov	r3, r0
 80024d8:	460c      	mov	r4, r1
 80024da:	4618      	mov	r0, r3
 80024dc:	4621      	mov	r1, r4
 80024de:	f7fe fadd 	bl	8000a9c <__aeabi_d2f>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <main+0x478>)
 80024e6:	601a      	str	r2, [r3, #0]
	  gyz = (262.4/32767)*gyro_data[2];
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <main+0x474>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fd ff93 	bl	8000418 <__aeabi_i2d>
 80024f2:	a31f      	add	r3, pc, #124	; (adr r3, 8002570 <main+0x468>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fd fff8 	bl	80004ec <__aeabi_dmul>
 80024fc:	4603      	mov	r3, r0
 80024fe:	460c      	mov	r4, r1
 8002500:	4618      	mov	r0, r3
 8002502:	4621      	mov	r1, r4
 8002504:	f7fe faca 	bl	8000a9c <__aeabi_d2f>
 8002508:	4602      	mov	r2, r0
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <main+0x47c>)
 800250c:	601a      	str	r2, [r3, #0]

	  printf("\rgyro real value x: %f gyro real value y: %f gyro real value z: %f  ", gyx, gyy, gyz);
 800250e:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <main+0x470>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fd ff92 	bl	800043c <__aeabi_f2d>
 8002518:	4680      	mov	r8, r0
 800251a:	4689      	mov	r9, r1
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <main+0x478>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fd ff8b 	bl	800043c <__aeabi_f2d>
 8002526:	4604      	mov	r4, r0
 8002528:	460d      	mov	r5, r1
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <main+0x47c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fd ff84 	bl	800043c <__aeabi_f2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800253c:	e9cd 4500 	strd	r4, r5, [sp]
 8002540:	4642      	mov	r2, r8
 8002542:	464b      	mov	r3, r9
 8002544:	4810      	ldr	r0, [pc, #64]	; (8002588 <main+0x480>)
 8002546:	f007 fec7 	bl	800a2d8 <iprintf>

	  IMU_mag_read(&hspi2, mag_data);
 800254a:	4910      	ldr	r1, [pc, #64]	; (800258c <main+0x484>)
 800254c:	4810      	ldr	r0, [pc, #64]	; (8002590 <main+0x488>)
 800254e:	f7fe fffb 	bl	8001548 <IMU_mag_read>

	  printf("\rmag data x: %d mag data y: %d mag data z: %d ", mag_data[0], mag_data[1], mag_data[2]);
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <main+0x484>)
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <main+0x484>)
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <main+0x484>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	480d      	ldr	r0, [pc, #52]	; (8002594 <main+0x48c>)
 8002560:	f007 feba 	bl	800a2d8 <iprintf>
	  printf("\n");
 8002564:	200a      	movs	r0, #10
 8002566:	f007 fecf 	bl	800a308 <putchar>
  {
 800256a:	e61d      	b.n	80021a8 <main+0xa0>
 800256c:	f3af 8000 	nop.w
 8002570:	3374cd50 	.word	0x3374cd50
 8002574:	3f806687 	.word	0x3f806687
 8002578:	20000568 	.word	0x20000568
 800257c:	20000864 	.word	0x20000864
 8002580:	200002dc 	.word	0x200002dc
 8002584:	20000b04 	.word	0x20000b04
 8002588:	0800d4ac 	.word	0x0800d4ac
 800258c:	20000af0 	.word	0x20000af0
 8002590:	200002e0 	.word	0x200002e0
 8002594:	0800d4f4 	.word	0x0800d4f4

08002598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b094      	sub	sp, #80	; 0x50
 800259c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800259e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a2:	2228      	movs	r2, #40	; 0x28
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f006 ff04 	bl	80093b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80025c8:	2309      	movs	r3, #9
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025d2:	2300      	movs	r3, #0
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d6:	2301      	movs	r3, #1
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80025da:	2301      	movs	r3, #1
 80025dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025de:	2302      	movs	r3, #2
 80025e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80025e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025f2:	4618      	mov	r0, r3
 80025f4:	f001 fbbc 	bl	8003d70 <HAL_RCC_OscConfig>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80025fe:	f000 fa4e 	bl	8002a9e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002602:	230f      	movs	r3, #15
 8002604:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002606:	2302      	movs	r3, #2
 8002608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f001 fe27 	bl	8004270 <HAL_RCC_ClockConfig>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002628:	f000 fa39 	bl	8002a9e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800262c:	2303      	movs	r3, #3
 800262e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002634:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	4618      	mov	r0, r3
 800263e:	f001 ffd7 	bl	80045f0 <HAL_RCCEx_PeriphCLKConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002648:	f000 fa29 	bl	8002a9e <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 800264c:	2200      	movs	r2, #0
 800264e:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8002652:	2000      	movs	r0, #0
 8002654:	f001 fef6 	bl	8004444 <HAL_RCC_MCOConfig>
}
 8002658:	bf00      	nop
 800265a:	3750      	adds	r7, #80	; 0x50
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <MX_ADC1_Init+0x94>)
 8002672:	4a21      	ldr	r2, [pc, #132]	; (80026f8 <MX_ADC1_Init+0x98>)
 8002674:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <MX_ADC1_Init+0x94>)
 8002678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <MX_ADC1_Init+0x94>)
 8002680:	2201      	movs	r2, #1
 8002682:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <MX_ADC1_Init+0x94>)
 8002686:	2200      	movs	r2, #0
 8002688:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <MX_ADC1_Init+0x94>)
 800268c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002690:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <MX_ADC1_Init+0x94>)
 8002694:	2200      	movs	r2, #0
 8002696:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002698:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <MX_ADC1_Init+0x94>)
 800269a:	2202      	movs	r2, #2
 800269c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800269e:	4815      	ldr	r0, [pc, #84]	; (80026f4 <MX_ADC1_Init+0x94>)
 80026a0:	f000 fde6 	bl	8003270 <HAL_ADC_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80026aa:	f000 f9f8 	bl	8002a9e <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	4619      	mov	r1, r3
 80026be:	480d      	ldr	r0, [pc, #52]	; (80026f4 <MX_ADC1_Init+0x94>)
 80026c0:	f000 feae 	bl	8003420 <HAL_ADC_ConfigChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80026ca:	f000 f9e8 	bl	8002a9e <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026d2:	2302      	movs	r3, #2
 80026d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4806      	ldr	r0, [pc, #24]	; (80026f4 <MX_ADC1_Init+0x94>)
 80026dc:	f000 fea0 	bl	8003420 <HAL_ADC_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80026e6:	f000 f9da 	bl	8002a9e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000600 	.word	0x20000600
 80026f8:	40012400 	.word	0x40012400

080026fc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <MX_CAN_Init+0x60>)
 8002702:	4a17      	ldr	r2, [pc, #92]	; (8002760 <MX_CAN_Init+0x64>)
 8002704:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <MX_CAN_Init+0x60>)
 8002708:	2210      	movs	r2, #16
 800270a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <MX_CAN_Init+0x60>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <MX_CAN_Init+0x60>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <MX_CAN_Init+0x60>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <MX_CAN_Init+0x60>)
 8002720:	2200      	movs	r2, #0
 8002722:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002724:	4b0d      	ldr	r3, [pc, #52]	; (800275c <MX_CAN_Init+0x60>)
 8002726:	2200      	movs	r2, #0
 8002728:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <MX_CAN_Init+0x60>)
 800272c:	2200      	movs	r2, #0
 800272e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <MX_CAN_Init+0x60>)
 8002732:	2200      	movs	r2, #0
 8002734:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <MX_CAN_Init+0x60>)
 8002738:	2200      	movs	r2, #0
 800273a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <MX_CAN_Init+0x60>)
 800273e:	2200      	movs	r2, #0
 8002740:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_CAN_Init+0x60>)
 8002744:	2200      	movs	r2, #0
 8002746:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002748:	4804      	ldr	r0, [pc, #16]	; (800275c <MX_CAN_Init+0x60>)
 800274a:	f000 ff9b 	bl	8003684 <HAL_CAN_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8002754:	f000 f9a3 	bl	8002a9e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000594 	.word	0x20000594
 8002760:	40006400 	.word	0x40006400

08002764 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	2100      	movs	r1, #0
 800276e:	460a      	mov	r2, r1
 8002770:	801a      	strh	r2, [r3, #0]
 8002772:	460a      	mov	r2, r1
 8002774:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <MX_RTC_Init+0x8c>)
 800277c:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <MX_RTC_Init+0x90>)
 800277e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <MX_RTC_Init+0x8c>)
 8002782:	f04f 32ff 	mov.w	r2, #4294967295
 8002786:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <MX_RTC_Init+0x8c>)
 800278a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800278e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002790:	4817      	ldr	r0, [pc, #92]	; (80027f0 <MX_RTC_Init+0x8c>)
 8002792:	f002 f89f 	bl	80048d4 <HAL_RTC_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 800279c:	f000 f97f 	bl	8002a9e <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x21;
 80027a0:	2321      	movs	r3, #33	; 0x21
 80027a2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x7;
 80027a4:	2307      	movs	r3, #7
 80027a6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	2201      	movs	r2, #1
 80027b0:	4619      	mov	r1, r3
 80027b2:	480f      	ldr	r0, [pc, #60]	; (80027f0 <MX_RTC_Init+0x8c>)
 80027b4:	f002 f924 	bl	8004a00 <HAL_RTC_SetTime>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80027be:	f000 f96e 	bl	8002a9e <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80027c2:	2303      	movs	r3, #3
 80027c4:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80027c6:	2301      	movs	r3, #1
 80027c8:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x8;
 80027ca:	2308      	movs	r3, #8
 80027cc:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80027d2:	463b      	mov	r3, r7
 80027d4:	2201      	movs	r2, #1
 80027d6:	4619      	mov	r1, r3
 80027d8:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_RTC_Init+0x8c>)
 80027da:	f002 fa81 	bl	8004ce0 <HAL_RTC_SetDate>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80027e4:	f000 f95b 	bl	8002a9e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	2000083c 	.word	0x2000083c
 80027f4:	40002800 	.word	0x40002800

080027f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <MX_SPI2_Init+0x64>)
 80027fe:	4a18      	ldr	r2, [pc, #96]	; (8002860 <MX_SPI2_Init+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <MX_SPI2_Init+0x64>)
 8002804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002808:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <MX_SPI2_Init+0x64>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <MX_SPI2_Init+0x64>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <MX_SPI2_Init+0x64>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <MX_SPI2_Init+0x64>)
 800281e:	2200      	movs	r2, #0
 8002820:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <MX_SPI2_Init+0x64>)
 8002824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002828:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MX_SPI2_Init+0x64>)
 800282c:	2200      	movs	r2, #0
 800282e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <MX_SPI2_Init+0x64>)
 8002832:	2200      	movs	r2, #0
 8002834:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_SPI2_Init+0x64>)
 8002838:	2200      	movs	r2, #0
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <MX_SPI2_Init+0x64>)
 800283e:	2200      	movs	r2, #0
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <MX_SPI2_Init+0x64>)
 8002844:	220a      	movs	r2, #10
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002848:	4804      	ldr	r0, [pc, #16]	; (800285c <MX_SPI2_Init+0x64>)
 800284a:	f002 fdf5 	bl	8005438 <HAL_SPI_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002854:	f000 f923 	bl	8002a9e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200002e0 	.word	0x200002e0
 8002860:	40003800 	.word	0x40003800

08002864 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	; 0x30
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f006 fd9e 	bl	80093b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002880:	4b20      	ldr	r3, [pc, #128]	; (8002904 <MX_TIM3_Init+0xa0>)
 8002882:	4a21      	ldr	r2, [pc, #132]	; (8002908 <MX_TIM3_Init+0xa4>)
 8002884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002886:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <MX_TIM3_Init+0xa0>)
 8002888:	2200      	movs	r2, #0
 800288a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <MX_TIM3_Init+0xa0>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <MX_TIM3_Init+0xa0>)
 8002894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002898:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <MX_TIM3_Init+0xa0>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <MX_TIM3_Init+0xa0>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028ae:	2301      	movs	r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80028b6:	230a      	movs	r3, #10
 80028b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028be:	2301      	movs	r3, #1
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	4619      	mov	r1, r3
 80028d0:	480c      	ldr	r0, [pc, #48]	; (8002904 <MX_TIM3_Init+0xa0>)
 80028d2:	f003 fad8 	bl	8005e86 <HAL_TIM_Encoder_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80028dc:	f000 f8df 	bl	8002a9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	4619      	mov	r1, r3
 80028ec:	4805      	ldr	r0, [pc, #20]	; (8002904 <MX_TIM3_Init+0xa0>)
 80028ee:	f003 fc15 	bl	800611c <HAL_TIMEx_MasterConfigSynchronization>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80028f8:	f000 f8d1 	bl	8002a9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	3730      	adds	r7, #48	; 0x30
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200005c0 	.word	0x200005c0
 8002908:	40000400 	.word	0x40000400

0800290c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002912:	f107 0310 	add.w	r3, r7, #16
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <MX_GPIO_Init+0x130>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	4a45      	ldr	r2, [pc, #276]	; (8002a3c <MX_GPIO_Init+0x130>)
 8002926:	f043 0310 	orr.w	r3, r3, #16
 800292a:	6193      	str	r3, [r2, #24]
 800292c:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <MX_GPIO_Init+0x130>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002938:	4b40      	ldr	r3, [pc, #256]	; (8002a3c <MX_GPIO_Init+0x130>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	4a3f      	ldr	r2, [pc, #252]	; (8002a3c <MX_GPIO_Init+0x130>)
 800293e:	f043 0320 	orr.w	r3, r3, #32
 8002942:	6193      	str	r3, [r2, #24]
 8002944:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <MX_GPIO_Init+0x130>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002950:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <MX_GPIO_Init+0x130>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a39      	ldr	r2, [pc, #228]	; (8002a3c <MX_GPIO_Init+0x130>)
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	6193      	str	r3, [r2, #24]
 800295c:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <MX_GPIO_Init+0x130>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002968:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <MX_GPIO_Init+0x130>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	4a33      	ldr	r2, [pc, #204]	; (8002a3c <MX_GPIO_Init+0x130>)
 800296e:	f043 0308 	orr.w	r3, r3, #8
 8002972:	6193      	str	r3, [r2, #24]
 8002974:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <MX_GPIO_Init+0x130>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002980:	2200      	movs	r2, #0
 8002982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002986:	482e      	ldr	r0, [pc, #184]	; (8002a40 <MX_GPIO_Init+0x134>)
 8002988:	f001 f9b6 	bl	8003cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCard_CS_GPIO_Port, SDCard_CS_Pin, GPIO_PIN_RESET);
 800298c:	2200      	movs	r2, #0
 800298e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002992:	482c      	ldr	r0, [pc, #176]	; (8002a44 <MX_GPIO_Init+0x138>)
 8002994:	f001 f9b0 	bl	8003cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FOC_CS_Pin|CS_magnet_Pin|CS_gyro_Pin|CS_accel_Pin 
 8002998:	2200      	movs	r2, #0
 800299a:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 800299e:	482a      	ldr	r0, [pc, #168]	; (8002a48 <MX_GPIO_Init+0x13c>)
 80029a0:	f001 f9aa 	bl	8003cf8 <HAL_GPIO_WritePin>
                          |CAN_Stand_By_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80029a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029aa:	2301      	movs	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80029b6:	f107 0310 	add.w	r3, r7, #16
 80029ba:	4619      	mov	r1, r3
 80029bc:	4820      	ldr	r0, [pc, #128]	; (8002a40 <MX_GPIO_Init+0x134>)
 80029be:	f001 f841 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SDCard_CS_Pin;
 80029c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c8:	2301      	movs	r3, #1
 80029ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2302      	movs	r3, #2
 80029d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4619      	mov	r1, r3
 80029da:	481a      	ldr	r0, [pc, #104]	; (8002a44 <MX_GPIO_Init+0x138>)
 80029dc:	f001 f832 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCard_Detect_Pin */
  GPIO_InitStruct.Pin = SDCard_Detect_Pin;
 80029e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDCard_Detect_GPIO_Port, &GPIO_InitStruct);
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	4619      	mov	r1, r3
 80029f4:	4813      	ldr	r0, [pc, #76]	; (8002a44 <MX_GPIO_Init+0x138>)
 80029f6:	f001 f825 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Clock_Output_Pin */
  GPIO_InitStruct.Pin = Clock_Output_Pin;
 80029fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2302      	movs	r3, #2
 8002a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Clock_Output_GPIO_Port, &GPIO_InitStruct);
 8002a08:	f107 0310 	add.w	r3, r7, #16
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	480e      	ldr	r0, [pc, #56]	; (8002a48 <MX_GPIO_Init+0x13c>)
 8002a10:	f001 f818 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : FOC_CS_Pin CS_magnet_Pin CS_gyro_Pin CS_accel_Pin 
                           CAN_Stand_By_Pin */
  GPIO_InitStruct.Pin = FOC_CS_Pin|CS_magnet_Pin|CS_gyro_Pin|CS_accel_Pin 
 8002a14:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 8002a18:	613b      	str	r3, [r7, #16]
                          |CAN_Stand_By_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2302      	movs	r3, #2
 8002a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a26:	f107 0310 	add.w	r3, r7, #16
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4806      	ldr	r0, [pc, #24]	; (8002a48 <MX_GPIO_Init+0x13c>)
 8002a2e:	f001 f809 	bl	8003a44 <HAL_GPIO_Init>

}
 8002a32:	bf00      	nop
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40011000 	.word	0x40011000
 8002a44:	40010c00 	.word	0x40010c00
 8002a48:	40010800 	.word	0x40010800

08002a4c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fb2e 	bl	80020b8 <ITM_SendChar>
	return ch;
 8002a5c:	687b      	ldr	r3, [r7, #4]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <_write>:

int _write(int file, char *ptr, int len){
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e009      	b.n	8002a8c <_write+0x26>
		__io_putchar(*ptr++);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	60ba      	str	r2, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ffe3 	bl	8002a4c <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbf1      	blt.n	8002a78 <_write+0x12>
	}
	return len;
 8002a94:	687b      	ldr	r3, [r7, #4]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
	...

08002aac <mount_card>:
	}
}

/* Mount SD Card */
FRESULT mount_card (FATFS *fs)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
      return f_mount(fs, "", 0);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4904      	ldr	r1, [pc, #16]	; (8002ac8 <mount_card+0x1c>)
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f005 fa69 	bl	8007f90 <f_mount>
 8002abe:	4603      	mov	r3, r0
      //if fresult <>
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	0800d524 	.word	0x0800d524

08002acc <card_capacity>:
}

/*************** Card capacity details ********************/

void card_capacity (DWORD *free_space, DWORD *total_space)//, DWORD *fre_clust)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
	FATFS *pfs;
	DWORD fre_clust;

	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 8002ad6:	f107 020c 	add.w	r2, r7, #12
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	4619      	mov	r1, r3
 8002ae0:	480d      	ldr	r0, [pc, #52]	; (8002b18 <card_capacity+0x4c>)
 8002ae2:	f006 f995 	bl	8008e10 <f_getfree>
	*total_space = ((pfs->n_fatent - 2) * (pfs->csize)); //total number of sectors
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002aec:	3b02      	subs	r3, #2
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8002af4:	fb02 f203 	mul.w	r2, r2, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	601a      	str	r2, [r3, #0]
	*free_space = (fre_clust * (pfs->csize)); //number of free sectors
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002b02:	461a      	mov	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	fb03 f202 	mul.w	r2, r3, r2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	0800d524 	.word	0x0800d524

08002b1c <update_file>:
	return fresult;
}

/*********************UPDATING an existing file ***************************/
FRESULT update_file(char *filename, char *data, char *timestamp, FIL *fil, UINT *bw)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
	FRESULT fresult;

	strcat(data,timestamp);
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	68b8      	ldr	r0, [r7, #8]
 8002b2e:	f007 fc93 	bl	800a458 <strcat>
	strcat(data,"\n");
 8002b32:	68b8      	ldr	r0, [r7, #8]
 8002b34:	f7fd fb0c 	bl	8000150 <strlen>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4911      	ldr	r1, [pc, #68]	; (8002b88 <update_file+0x6c>)
 8002b42:	461a      	mov	r2, r3
 8002b44:	460b      	mov	r3, r1
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	8013      	strh	r3, [r2, #0]

	/* Open the file with write access */
	fresult = f_open(fil, filename, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002b4a:	2213      	movs	r2, #19
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	6838      	ldr	r0, [r7, #0]
 8002b50:	f005 fa66 	bl	8008020 <f_open>
 8002b54:	4603      	mov	r3, r0
 8002b56:	75fb      	strb	r3, [r7, #23]


	/* Move to offset to the end of the file */
	fresult = f_lseek(fil, fil->fsize);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6838      	ldr	r0, [r7, #0]
 8002b62:	f005 fef7 	bl	8008954 <f_lseek>
 8002b66:	4603      	mov	r3, r0
 8002b68:	75fb      	strb	r3, [r7, #23]

	/* write the string to the file */
	fresult = f_puts(data, fil); //pode precisar de um "\n"
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	68b8      	ldr	r0, [r7, #8]
 8002b6e:	f006 fa59 	bl	8009024 <f_puts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	75fb      	strb	r3, [r7, #23]

	f_close (fil);
 8002b76:	6838      	ldr	r0, [r7, #0]
 8002b78:	f005 fec4 	bl	8008904 <f_close>
	return fresult;
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	0800d528 	.word	0x0800d528

08002b8c <get_timestamp>:

char *get_timestamp(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currentTime, RTC_DateTypeDef *currentDate){
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b091      	sub	sp, #68	; 0x44
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]

	time_t timestamp;
	struct tm currTime;

	HAL_RTC_GetTime(hrtc, currentTime, RTC_FORMAT_BIN);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f001 ffc7 	bl	8004b30 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currentDate, RTC_FORMAT_BIN);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f002 f950 	bl	8004e4c <HAL_RTC_GetDate>


	currTime.tm_year = currentDate->Year-16;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	78db      	ldrb	r3, [r3, #3]
 8002bb0:	3b10      	subs	r3, #16
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
	currTime.tm_mday = currentDate->Date-6;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	789b      	ldrb	r3, [r3, #2]
 8002bb8:	3b06      	subs	r3, #6
 8002bba:	623b      	str	r3, [r7, #32]
	currTime.tm_mon  = currentDate->Month-2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	3b02      	subs	r3, #2
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24

	currTime.tm_hour = currentTime->Hours+8;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	3308      	adds	r3, #8
 8002bca:	61fb      	str	r3, [r7, #28]
	currTime.tm_min  = currentTime->Minutes-23;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	785b      	ldrb	r3, [r3, #1]
 8002bd0:	3b17      	subs	r3, #23
 8002bd2:	61bb      	str	r3, [r7, #24]
	currTime.tm_sec  = currentTime->Seconds;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	789b      	ldrb	r3, [r3, #2]
 8002bd8:	617b      	str	r3, [r7, #20]

	timestamp = mktime(&currTime);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4618      	mov	r0, r3
 8002be0:	f006 fcca 	bl	8009578 <mktime>
 8002be4:	4603      	mov	r3, r0
 8002be6:	460c      	mov	r4, r1
 8002be8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	return asctime(gmtime(&timestamp));
 8002bec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f006 faed 	bl	80091d0 <gmtime>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f006 faa7 	bl	800914c <asctime>
 8002bfe:	4603      	mov	r3, r0

}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3744      	adds	r7, #68	; 0x44
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd90      	pop	{r4, r7, pc}

08002c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <HAL_MspInit+0x5c>)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_MspInit+0x5c>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6193      	str	r3, [r2, #24]
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_MspInit+0x5c>)
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_MspInit+0x5c>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <HAL_MspInit+0x5c>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	61d3      	str	r3, [r2, #28]
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_MspInit+0x5c>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <HAL_MspInit+0x60>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_MspInit+0x60>)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40010000 	.word	0x40010000

08002c6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0310 	add.w	r3, r7, #16
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a14      	ldr	r2, [pc, #80]	; (8002cd8 <HAL_ADC_MspInit+0x6c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d121      	bne.n	8002cd0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_ADC_MspInit+0x70>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <HAL_ADC_MspInit+0x70>)
 8002c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c96:	6193      	str	r3, [r2, #24]
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_ADC_MspInit+0x70>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_ADC_MspInit+0x70>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a0c      	ldr	r2, [pc, #48]	; (8002cdc <HAL_ADC_MspInit+0x70>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <HAL_ADC_MspInit+0x70>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <HAL_ADC_MspInit+0x74>)
 8002ccc:	f000 feba 	bl	8003a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cd0:	bf00      	nop
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40012400 	.word	0x40012400
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010800 	.word	0x40010800

08002ce4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a25      	ldr	r2, [pc, #148]	; (8002d94 <HAL_CAN_MspInit+0xb0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d143      	bne.n	8002d8c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_CAN_MspInit+0xb4>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	4a23      	ldr	r2, [pc, #140]	; (8002d98 <HAL_CAN_MspInit+0xb4>)
 8002d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	61d3      	str	r3, [r2, #28]
 8002d10:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <HAL_CAN_MspInit+0xb4>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <HAL_CAN_MspInit+0xb4>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <HAL_CAN_MspInit+0xb4>)
 8002d22:	f043 0308 	orr.w	r3, r3, #8
 8002d26:	6193      	str	r3, [r2, #24]
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_CAN_MspInit+0xb4>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d42:	f107 0314 	add.w	r3, r7, #20
 8002d46:	4619      	mov	r1, r3
 8002d48:	4814      	ldr	r0, [pc, #80]	; (8002d9c <HAL_CAN_MspInit+0xb8>)
 8002d4a:	f000 fe7b 	bl	8003a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	480e      	ldr	r0, [pc, #56]	; (8002d9c <HAL_CAN_MspInit+0xb8>)
 8002d64:	f000 fe6e 	bl	8003a44 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002d68:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_CAN_MspInit+0xbc>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
 8002d86:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <HAL_CAN_MspInit+0xbc>)
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40006400 	.word	0x40006400
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40010c00 	.word	0x40010c00
 8002da0:	40010000 	.word	0x40010000

08002da4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <HAL_RTC_MspInit+0x3c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d110      	bne.n	8002dd8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002db6:	f000 ffcf 	bl	8003d58 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_RTC_MspInit+0x40>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <HAL_RTC_MspInit+0x40>)
 8002dc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002dc4:	61d3      	str	r3, [r2, #28]
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_RTC_MspInit+0x40>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RTC_MspInit+0x44>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40002800 	.word	0x40002800
 8002de4:	40021000 	.word	0x40021000
 8002de8:	4242043c 	.word	0x4242043c

08002dec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0310 	add.w	r3, r7, #16
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <HAL_SPI_MspInit+0x8c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d131      	bne.n	8002e70 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	4a1a      	ldr	r2, [pc, #104]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e16:	61d3      	str	r3, [r2, #28]
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	6193      	str	r3, [r2, #24]
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002e3c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002e40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e46:	2303      	movs	r3, #3
 8002e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4a:	f107 0310 	add.w	r3, r7, #16
 8002e4e:	4619      	mov	r1, r3
 8002e50:	480b      	ldr	r0, [pc, #44]	; (8002e80 <HAL_SPI_MspInit+0x94>)
 8002e52:	f000 fdf7 	bl	8003a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e64:	f107 0310 	add.w	r3, r7, #16
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4805      	ldr	r0, [pc, #20]	; (8002e80 <HAL_SPI_MspInit+0x94>)
 8002e6c:	f000 fdea 	bl	8003a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e70:	bf00      	nop
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40003800 	.word	0x40003800
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40010c00 	.word	0x40010c00

08002e84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_TIM_Encoder_MspInit+0x70>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d123      	bne.n	8002eec <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x74>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x74>)
 8002eaa:	f043 0302 	orr.w	r3, r3, #2
 8002eae:	61d3      	str	r3, [r2, #28]
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x74>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x74>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x74>)
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	6193      	str	r3, [r2, #24]
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x74>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = encoder_va_Pin|encoder_vb_Pin;
 8002ed4:	23c0      	movs	r3, #192	; 0xc0
 8002ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4805      	ldr	r0, [pc, #20]	; (8002efc <HAL_TIM_Encoder_MspInit+0x78>)
 8002ee8:	f000 fdac 	bl	8003a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002eec:	bf00      	nop
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010800 	.word	0x40010800

08002f00 <SDTimer_handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8002f04:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <SDTimer_handler+0x3c>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <SDTimer_handler+0x1c>
		Timer1--;
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <SDTimer_handler+0x3c>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <SDTimer_handler+0x3c>)
 8002f1a:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <SDTimer_handler+0x40>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <SDTimer_handler+0x34>
		Timer2--;
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <SDTimer_handler+0x40>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <SDTimer_handler+0x40>)
 8002f32:	701a      	strb	r2, [r3, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	20000d35 	.word	0x20000d35
 8002f40:	20000d34 	.word	0x20000d34

08002f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <HardFault_Handler+0x4>

08002f56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f5a:	e7fe      	b.n	8002f5a <MemManage_Handler+0x4>

08002f5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f60:	e7fe      	b.n	8002f60 <BusFault_Handler+0x4>

08002f62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f66:	e7fe      	b.n	8002f66 <UsageFault_Handler+0x4>

08002f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <SysTick_Handler+0x30>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <SysTick_Handler+0x30>)
 8002f9c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt > 10){
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <SysTick_Handler+0x30>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b0a      	cmp	r3, #10
 8002fa6:	d904      	bls.n	8002fb2 <SysTick_Handler+0x26>
		FatFsCnt=0;
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <SysTick_Handler+0x30>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
		SDTimer_handler();
 8002fae:	f7ff ffa7 	bl	8002f00 <SDTimer_handler>
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb2:	f000 f91f 	bl	80031f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000027a 	.word	0x2000027a

08002fc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	e00a      	b.n	8002fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fd2:	f3af 8000 	nop.w
 8002fd6:	4601      	mov	r1, r0
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	60ba      	str	r2, [r7, #8]
 8002fde:	b2ca      	uxtb	r2, r1
 8002fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	dbf0      	blt.n	8002fd2 <_read+0x12>
	}

return len;
 8002ff0:	687b      	ldr	r3, [r7, #4]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
	return -1;
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003020:	605a      	str	r2, [r3, #4]
	return 0;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr

0800302e <_isatty>:

int _isatty(int file)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
	return 1;
 8003036:	2301      	movs	r3, #1
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr

08003042 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
	return 0;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
	...

0800305c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <_sbrk+0x50>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <_sbrk+0x16>
		heap_end = &end;
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <_sbrk+0x50>)
 800306e:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <_sbrk+0x54>)
 8003070:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <_sbrk+0x50>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <_sbrk+0x50>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4413      	add	r3, r2
 8003080:	466a      	mov	r2, sp
 8003082:	4293      	cmp	r3, r2
 8003084:	d907      	bls.n	8003096 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003086:	f006 f89d 	bl	80091c4 <__errno>
 800308a:	4602      	mov	r2, r0
 800308c:	230c      	movs	r3, #12
 800308e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
 8003094:	e006      	b.n	80030a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <_sbrk+0x50>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	4a03      	ldr	r2, [pc, #12]	; (80030ac <_sbrk+0x50>)
 80030a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80030a2:	68fb      	ldr	r3, [r7, #12]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000280 	.word	0x20000280
 80030b0:	200011a8 	.word	0x200011a8

080030b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80030b8:	4b15      	ldr	r3, [pc, #84]	; (8003110 <SystemInit+0x5c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <SystemInit+0x5c>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <SystemInit+0x5c>)
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	4911      	ldr	r1, [pc, #68]	; (8003110 <SystemInit+0x5c>)
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <SystemInit+0x60>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80030d0:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <SystemInit+0x5c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0e      	ldr	r2, [pc, #56]	; (8003110 <SystemInit+0x5c>)
 80030d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80030da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <SystemInit+0x5c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <SystemInit+0x5c>)
 80030e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <SystemInit+0x5c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <SystemInit+0x5c>)
 80030f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80030f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <SystemInit+0x5c>)
 80030fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80030fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SystemInit+0x64>)
 8003102:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003106:	609a      	str	r2, [r3, #8]
#endif 
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	40021000 	.word	0x40021000
 8003114:	f8ff0000 	.word	0xf8ff0000
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800311c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800311e:	e003      	b.n	8003128 <LoopCopyDataInit>

08003120 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003122:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003124:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003126:	3104      	adds	r1, #4

08003128 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003128:	480a      	ldr	r0, [pc, #40]	; (8003154 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800312c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800312e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003130:	d3f6      	bcc.n	8003120 <CopyDataInit>
  ldr r2, =_sbss
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003134:	e002      	b.n	800313c <LoopFillZerobss>

08003136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003136:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003138:	f842 3b04 	str.w	r3, [r2], #4

0800313c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800313e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003140:	d3f9      	bcc.n	8003136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003142:	f7ff ffb7 	bl	80030b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003146:	f006 f901 	bl	800934c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800314a:	f7fe ffdd 	bl	8002108 <main>
  bx lr
 800314e:	4770      	bx	lr
  ldr r3, =_sidata
 8003150:	0800da7c 	.word	0x0800da7c
  ldr r0, =_sdata
 8003154:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003158:	2000025c 	.word	0x2000025c
  ldr r2, =_sbss
 800315c:	2000025c 	.word	0x2000025c
  ldr r3, = _ebss
 8003160:	200011a4 	.word	0x200011a4

08003164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003164:	e7fe      	b.n	8003164 <ADC1_2_IRQHandler>
	...

08003168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_Init+0x28>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a07      	ldr	r2, [pc, #28]	; (8003190 <HAL_Init+0x28>)
 8003172:	f043 0310 	orr.w	r3, r3, #16
 8003176:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003178:	2003      	movs	r0, #3
 800317a:	f000 fc2f 	bl	80039dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800317e:	2000      	movs	r0, #0
 8003180:	f000 f808 	bl	8003194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003184:	f7ff fd40 	bl	8002c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40022000 	.word	0x40022000

08003194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800319c:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_InitTick+0x54>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_InitTick+0x58>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	4619      	mov	r1, r3
 80031a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fc39 	bl	8003a2a <HAL_SYSTICK_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e00e      	b.n	80031e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b0f      	cmp	r3, #15
 80031c6:	d80a      	bhi.n	80031de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031c8:	2200      	movs	r2, #0
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295
 80031d0:	f000 fc0f 	bl	80039f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031d4:	4a06      	ldr	r2, [pc, #24]	; (80031f0 <HAL_InitTick+0x5c>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e000      	b.n	80031e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000008 	.word	0x20000008
 80031ec:	20000010 	.word	0x20000010
 80031f0:	2000000c 	.word	0x2000000c

080031f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_IncTick+0x1c>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_IncTick+0x20>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4413      	add	r3, r2
 8003204:	4a03      	ldr	r2, [pc, #12]	; (8003214 <HAL_IncTick+0x20>)
 8003206:	6013      	str	r3, [r2, #0]
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	20000010 	.word	0x20000010
 8003214:	20000d38 	.word	0x20000d38

08003218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return uwTick;
 800321c:	4b02      	ldr	r3, [pc, #8]	; (8003228 <HAL_GetTick+0x10>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	20000d38 	.word	0x20000d38

0800322c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7ff fff0 	bl	8003218 <HAL_GetTick>
 8003238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d005      	beq.n	8003252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_Delay+0x40>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003252:	bf00      	nop
 8003254:	f7ff ffe0 	bl	8003218 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	429a      	cmp	r2, r3
 8003262:	d8f7      	bhi.n	8003254 <HAL_Delay+0x28>
  {
  }
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000010 	.word	0x20000010

08003270 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e0be      	b.n	8003410 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fcdc 	bl	8002c6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f9ab 	bl	8003610 <ADC_ConversionStop_Disable>
 80032ba:	4603      	mov	r3, r0
 80032bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f040 8099 	bne.w	80033fe <HAL_ADC_Init+0x18e>
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f040 8095 	bne.w	80033fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032dc:	f023 0302 	bic.w	r3, r3, #2
 80032e0:	f043 0202 	orr.w	r2, r3, #2
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7b1b      	ldrb	r3, [r3, #12]
 80032f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80032f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003308:	d003      	beq.n	8003312 <HAL_ADC_Init+0xa2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d102      	bne.n	8003318 <HAL_ADC_Init+0xa8>
 8003312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003316:	e000      	b.n	800331a <HAL_ADC_Init+0xaa>
 8003318:	2300      	movs	r3, #0
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7d1b      	ldrb	r3, [r3, #20]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d119      	bne.n	800335c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7b1b      	ldrb	r3, [r3, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	3b01      	subs	r3, #1
 8003336:	035a      	lsls	r2, r3, #13
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	e00b      	b.n	800335c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	f043 0220 	orr.w	r2, r3, #32
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	430a      	orrs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_ADC_Init+0x1a8>)
 8003378:	4013      	ands	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	430b      	orrs	r3, r1
 8003382:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d003      	beq.n	8003396 <HAL_ADC_Init+0x126>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d104      	bne.n	80033a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	3b01      	subs	r3, #1
 800339c:	051b      	lsls	r3, r3, #20
 800339e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	4b18      	ldr	r3, [pc, #96]	; (800341c <HAL_ADC_Init+0x1ac>)
 80033bc:	4013      	ands	r3, r2
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d10b      	bne.n	80033dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033da:	e018      	b.n	800340e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	f023 0312 	bic.w	r3, r3, #18
 80033e4:	f043 0210 	orr.w	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033fc:	e007      	b.n	800340e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	f043 0210 	orr.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800340e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	ffe1f7fd 	.word	0xffe1f7fd
 800341c:	ff1f0efe 	.word	0xff1f0efe

08003420 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x20>
 800343c:	2302      	movs	r3, #2
 800343e:	e0dc      	b.n	80035fa <HAL_ADC_ConfigChannel+0x1da>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b06      	cmp	r3, #6
 800344e:	d81c      	bhi.n	800348a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	3b05      	subs	r3, #5
 8003462:	221f      	movs	r2, #31
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	4019      	ands	r1, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	3b05      	subs	r3, #5
 800347c:	fa00 f203 	lsl.w	r2, r0, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	635a      	str	r2, [r3, #52]	; 0x34
 8003488:	e03c      	b.n	8003504 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d81c      	bhi.n	80034cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	3b23      	subs	r3, #35	; 0x23
 80034a4:	221f      	movs	r2, #31
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	4019      	ands	r1, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	3b23      	subs	r3, #35	; 0x23
 80034be:	fa00 f203 	lsl.w	r2, r0, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
 80034ca:	e01b      	b.n	8003504 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	3b41      	subs	r3, #65	; 0x41
 80034de:	221f      	movs	r2, #31
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	4019      	ands	r1, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	3b41      	subs	r3, #65	; 0x41
 80034f8:	fa00 f203 	lsl.w	r2, r0, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b09      	cmp	r3, #9
 800350a:	d91c      	bls.n	8003546 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68d9      	ldr	r1, [r3, #12]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	3b1e      	subs	r3, #30
 800351e:	2207      	movs	r2, #7
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	4019      	ands	r1, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6898      	ldr	r0, [r3, #8]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4413      	add	r3, r2
 8003536:	3b1e      	subs	r3, #30
 8003538:	fa00 f203 	lsl.w	r2, r0, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	60da      	str	r2, [r3, #12]
 8003544:	e019      	b.n	800357a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6919      	ldr	r1, [r3, #16]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	2207      	movs	r2, #7
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	4019      	ands	r1, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6898      	ldr	r0, [r3, #8]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	fa00 f203 	lsl.w	r2, r0, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b10      	cmp	r3, #16
 8003580:	d003      	beq.n	800358a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003586:	2b11      	cmp	r3, #17
 8003588:	d132      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_ADC_ConfigChannel+0x1e4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d125      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d126      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035b0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d11a      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_ADC_ConfigChannel+0x1e8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a13      	ldr	r2, [pc, #76]	; (800360c <HAL_ADC_ConfigChannel+0x1ec>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	0c9a      	lsrs	r2, r3, #18
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035d0:	e002      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f9      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x1b2>
 80035de:	e007      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	40012400 	.word	0x40012400
 8003608:	20000008 	.word	0x20000008
 800360c:	431bde83 	.word	0x431bde83

08003610 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d127      	bne.n	800367a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800363a:	f7ff fded 	bl	8003218 <HAL_GetTick>
 800363e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003640:	e014      	b.n	800366c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003642:	f7ff fde9 	bl	8003218 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d90d      	bls.n	800366c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	f043 0210 	orr.w	r2, r3, #16
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d0e3      	beq.n	8003642 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e0ed      	b.n	8003872 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fb1e 	bl	8002ce4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0202 	bic.w	r2, r2, #2
 80036b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b8:	f7ff fdae 	bl	8003218 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036be:	e012      	b.n	80036e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036c0:	f7ff fdaa 	bl	8003218 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b0a      	cmp	r3, #10
 80036cc:	d90b      	bls.n	80036e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2205      	movs	r2, #5
 80036de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0c5      	b.n	8003872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e5      	bne.n	80036c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003704:	f7ff fd88 	bl	8003218 <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800370a:	e012      	b.n	8003732 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800370c:	f7ff fd84 	bl	8003218 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b0a      	cmp	r3, #10
 8003718:	d90b      	bls.n	8003732 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2205      	movs	r2, #5
 800372a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e09f      	b.n	8003872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0e5      	beq.n	800370c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7e1b      	ldrb	r3, [r3, #24]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d108      	bne.n	800375a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e007      	b.n	800376a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	7e5b      	ldrb	r3, [r3, #25]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d108      	bne.n	8003784 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e007      	b.n	8003794 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003792:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	7e9b      	ldrb	r3, [r3, #26]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d108      	bne.n	80037ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0220 	orr.w	r2, r2, #32
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e007      	b.n	80037be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0220 	bic.w	r2, r2, #32
 80037bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7edb      	ldrb	r3, [r3, #27]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d108      	bne.n	80037d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0210 	bic.w	r2, r2, #16
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e007      	b.n	80037e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0210 	orr.w	r2, r2, #16
 80037e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7f1b      	ldrb	r3, [r3, #28]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0208 	orr.w	r2, r2, #8
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e007      	b.n	8003812 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0208 	bic.w	r2, r2, #8
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7f5b      	ldrb	r3, [r3, #29]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d108      	bne.n	800382c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0204 	orr.w	r2, r2, #4
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e007      	b.n	800383c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0204 	bic.w	r2, r2, #4
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	ea42 0103 	orr.w	r1, r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	1e5a      	subs	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <__NVIC_SetPriorityGrouping>:
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003898:	4013      	ands	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ae:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	60d3      	str	r3, [r2, #12]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <__NVIC_GetPriorityGrouping>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <__NVIC_GetPriorityGrouping+0x18>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 0307 	and.w	r3, r3, #7
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_SetPriority>:
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	6039      	str	r1, [r7, #0]
 80038ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	db0a      	blt.n	800390a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	490c      	ldr	r1, [pc, #48]	; (800392c <__NVIC_SetPriority+0x4c>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	0112      	lsls	r2, r2, #4
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	440b      	add	r3, r1
 8003904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003908:	e00a      	b.n	8003920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	4908      	ldr	r1, [pc, #32]	; (8003930 <__NVIC_SetPriority+0x50>)
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	3b04      	subs	r3, #4
 8003918:	0112      	lsls	r2, r2, #4
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	440b      	add	r3, r1
 800391e:	761a      	strb	r2, [r3, #24]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000e100 	.word	0xe000e100
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <NVIC_EncodePriority>:
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	; 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f1c3 0307 	rsb	r3, r3, #7
 800394e:	2b04      	cmp	r3, #4
 8003950:	bf28      	it	cs
 8003952:	2304      	movcs	r3, #4
 8003954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3304      	adds	r3, #4
 800395a:	2b06      	cmp	r3, #6
 800395c:	d902      	bls.n	8003964 <NVIC_EncodePriority+0x30>
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3b03      	subs	r3, #3
 8003962:	e000      	b.n	8003966 <NVIC_EncodePriority+0x32>
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003968:	f04f 32ff 	mov.w	r2, #4294967295
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43da      	mvns	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	401a      	ands	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800397c:	f04f 31ff 	mov.w	r1, #4294967295
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43d9      	mvns	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800398c:	4313      	orrs	r3, r2
}
 800398e:	4618      	mov	r0, r3
 8003990:	3724      	adds	r7, #36	; 0x24
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <SysTick_Config>:
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039a8:	d301      	bcc.n	80039ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80039aa:	2301      	movs	r3, #1
 80039ac:	e00f      	b.n	80039ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ae:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <SysTick_Config+0x40>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039b6:	210f      	movs	r1, #15
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	f7ff ff90 	bl	80038e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <SysTick_Config+0x40>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039c6:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <SysTick_Config+0x40>)
 80039c8:	2207      	movs	r2, #7
 80039ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	e000e010 	.word	0xe000e010

080039dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff49 	bl	800387c <__NVIC_SetPriorityGrouping>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	4603      	mov	r3, r0
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a04:	f7ff ff5e 	bl	80038c4 <__NVIC_GetPriorityGrouping>
 8003a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	6978      	ldr	r0, [r7, #20]
 8003a10:	f7ff ff90 	bl	8003934 <NVIC_EncodePriority>
 8003a14:	4602      	mov	r2, r0
 8003a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff5f 	bl	80038e0 <__NVIC_SetPriority>
}
 8003a22:	bf00      	nop
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ffb0 	bl	8003998 <SysTick_Config>
 8003a38:	4603      	mov	r3, r0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b08b      	sub	sp, #44	; 0x2c
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a52:	2300      	movs	r3, #0
 8003a54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a56:	e127      	b.n	8003ca8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a58:	2201      	movs	r2, #1
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	f040 8116 	bne.w	8003ca2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b12      	cmp	r3, #18
 8003a7c:	d034      	beq.n	8003ae8 <HAL_GPIO_Init+0xa4>
 8003a7e:	2b12      	cmp	r3, #18
 8003a80:	d80d      	bhi.n	8003a9e <HAL_GPIO_Init+0x5a>
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d02b      	beq.n	8003ade <HAL_GPIO_Init+0x9a>
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d804      	bhi.n	8003a94 <HAL_GPIO_Init+0x50>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d031      	beq.n	8003af2 <HAL_GPIO_Init+0xae>
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d01c      	beq.n	8003acc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a92:	e048      	b.n	8003b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d043      	beq.n	8003b20 <HAL_GPIO_Init+0xdc>
 8003a98:	2b11      	cmp	r3, #17
 8003a9a:	d01b      	beq.n	8003ad4 <HAL_GPIO_Init+0x90>
          break;
 8003a9c:	e043      	b.n	8003b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003a9e:	4a89      	ldr	r2, [pc, #548]	; (8003cc4 <HAL_GPIO_Init+0x280>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d026      	beq.n	8003af2 <HAL_GPIO_Init+0xae>
 8003aa4:	4a87      	ldr	r2, [pc, #540]	; (8003cc4 <HAL_GPIO_Init+0x280>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d806      	bhi.n	8003ab8 <HAL_GPIO_Init+0x74>
 8003aaa:	4a87      	ldr	r2, [pc, #540]	; (8003cc8 <HAL_GPIO_Init+0x284>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d020      	beq.n	8003af2 <HAL_GPIO_Init+0xae>
 8003ab0:	4a86      	ldr	r2, [pc, #536]	; (8003ccc <HAL_GPIO_Init+0x288>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d01d      	beq.n	8003af2 <HAL_GPIO_Init+0xae>
          break;
 8003ab6:	e036      	b.n	8003b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ab8:	4a85      	ldr	r2, [pc, #532]	; (8003cd0 <HAL_GPIO_Init+0x28c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d019      	beq.n	8003af2 <HAL_GPIO_Init+0xae>
 8003abe:	4a85      	ldr	r2, [pc, #532]	; (8003cd4 <HAL_GPIO_Init+0x290>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d016      	beq.n	8003af2 <HAL_GPIO_Init+0xae>
 8003ac4:	4a84      	ldr	r2, [pc, #528]	; (8003cd8 <HAL_GPIO_Init+0x294>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_GPIO_Init+0xae>
          break;
 8003aca:	e02c      	b.n	8003b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	623b      	str	r3, [r7, #32]
          break;
 8003ad2:	e028      	b.n	8003b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	623b      	str	r3, [r7, #32]
          break;
 8003adc:	e023      	b.n	8003b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	623b      	str	r3, [r7, #32]
          break;
 8003ae6:	e01e      	b.n	8003b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	330c      	adds	r3, #12
 8003aee:	623b      	str	r3, [r7, #32]
          break;
 8003af0:	e019      	b.n	8003b26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d102      	bne.n	8003b00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003afa:	2304      	movs	r3, #4
 8003afc:	623b      	str	r3, [r7, #32]
          break;
 8003afe:	e012      	b.n	8003b26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b08:	2308      	movs	r3, #8
 8003b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	611a      	str	r2, [r3, #16]
          break;
 8003b12:	e008      	b.n	8003b26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b14:	2308      	movs	r3, #8
 8003b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	615a      	str	r2, [r3, #20]
          break;
 8003b1e:	e002      	b.n	8003b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b20:	2300      	movs	r3, #0
 8003b22:	623b      	str	r3, [r7, #32]
          break;
 8003b24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2bff      	cmp	r3, #255	; 0xff
 8003b2a:	d801      	bhi.n	8003b30 <HAL_GPIO_Init+0xec>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	e001      	b.n	8003b34 <HAL_GPIO_Init+0xf0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2bff      	cmp	r3, #255	; 0xff
 8003b3a:	d802      	bhi.n	8003b42 <HAL_GPIO_Init+0xfe>
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	e002      	b.n	8003b48 <HAL_GPIO_Init+0x104>
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	3b08      	subs	r3, #8
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	210f      	movs	r1, #15
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	401a      	ands	r2, r3
 8003b5a:	6a39      	ldr	r1, [r7, #32]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	431a      	orrs	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8096 	beq.w	8003ca2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b76:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <HAL_GPIO_Init+0x298>)
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	4a58      	ldr	r2, [pc, #352]	; (8003cdc <HAL_GPIO_Init+0x298>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6193      	str	r3, [r2, #24]
 8003b82:	4b56      	ldr	r3, [pc, #344]	; (8003cdc <HAL_GPIO_Init+0x298>)
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b8e:	4a54      	ldr	r2, [pc, #336]	; (8003ce0 <HAL_GPIO_Init+0x29c>)
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	3302      	adds	r3, #2
 8003b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	220f      	movs	r2, #15
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4b      	ldr	r2, [pc, #300]	; (8003ce4 <HAL_GPIO_Init+0x2a0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <HAL_GPIO_Init+0x19e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4a      	ldr	r2, [pc, #296]	; (8003ce8 <HAL_GPIO_Init+0x2a4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00d      	beq.n	8003bde <HAL_GPIO_Init+0x19a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a49      	ldr	r2, [pc, #292]	; (8003cec <HAL_GPIO_Init+0x2a8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d007      	beq.n	8003bda <HAL_GPIO_Init+0x196>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a48      	ldr	r2, [pc, #288]	; (8003cf0 <HAL_GPIO_Init+0x2ac>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d101      	bne.n	8003bd6 <HAL_GPIO_Init+0x192>
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e006      	b.n	8003be4 <HAL_GPIO_Init+0x1a0>
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	e004      	b.n	8003be4 <HAL_GPIO_Init+0x1a0>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e002      	b.n	8003be4 <HAL_GPIO_Init+0x1a0>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <HAL_GPIO_Init+0x1a0>
 8003be2:	2300      	movs	r3, #0
 8003be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be6:	f002 0203 	and.w	r2, r2, #3
 8003bea:	0092      	lsls	r2, r2, #2
 8003bec:	4093      	lsls	r3, r2
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bf4:	493a      	ldr	r1, [pc, #232]	; (8003ce0 <HAL_GPIO_Init+0x29c>)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	089b      	lsrs	r3, r3, #2
 8003bfa:	3302      	adds	r3, #2
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c0e:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4938      	ldr	r1, [pc, #224]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
 8003c1a:	e006      	b.n	8003c2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c1c:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	4933      	ldr	r1, [pc, #204]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d006      	beq.n	8003c44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	492e      	ldr	r1, [pc, #184]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]
 8003c42:	e006      	b.n	8003c52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	4929      	ldr	r1, [pc, #164]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c5e:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	4924      	ldr	r1, [pc, #144]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
 8003c6a:	e006      	b.n	8003c7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	491f      	ldr	r1, [pc, #124]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	491a      	ldr	r1, [pc, #104]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60cb      	str	r3, [r1, #12]
 8003c92:	e006      	b.n	8003ca2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c94:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	4915      	ldr	r1, [pc, #84]	; (8003cf4 <HAL_GPIO_Init+0x2b0>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f47f aed0 	bne.w	8003a58 <HAL_GPIO_Init+0x14>
  }
}
 8003cb8:	bf00      	nop
 8003cba:	372c      	adds	r7, #44	; 0x2c
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	10210000 	.word	0x10210000
 8003cc8:	10110000 	.word	0x10110000
 8003ccc:	10120000 	.word	0x10120000
 8003cd0:	10310000 	.word	0x10310000
 8003cd4:	10320000 	.word	0x10320000
 8003cd8:	10220000 	.word	0x10220000
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40010800 	.word	0x40010800
 8003ce8:	40010c00 	.word	0x40010c00
 8003cec:	40011000 	.word	0x40011000
 8003cf0:	40011400 	.word	0x40011400
 8003cf4:	40010400 	.word	0x40010400

08003cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
 8003d04:	4613      	mov	r3, r2
 8003d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d08:	787b      	ldrb	r3, [r7, #1]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d0e:	887a      	ldrh	r2, [r7, #2]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d14:	e003      	b.n	8003d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d16:	887b      	ldrh	r3, [r7, #2]
 8003d18:	041a      	lsls	r2, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	611a      	str	r2, [r3, #16]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	887b      	ldrh	r3, [r7, #2]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d40:	887a      	ldrh	r2, [r7, #2]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003d46:	e002      	b.n	8003d4e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d48:	887a      	ldrh	r2, [r7, #2]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	611a      	str	r2, [r3, #16]
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <HAL_PWR_EnableBkUpAccess+0x14>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
}
 8003d62:	bf00      	nop
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	420e0020 	.word	0x420e0020

08003d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e26c      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8087 	beq.w	8003e9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d90:	4b92      	ldr	r3, [pc, #584]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d00c      	beq.n	8003db6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d9c:	4b8f      	ldr	r3, [pc, #572]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d112      	bne.n	8003dce <HAL_RCC_OscConfig+0x5e>
 8003da8:	4b8c      	ldr	r3, [pc, #560]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d10b      	bne.n	8003dce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db6:	4b89      	ldr	r3, [pc, #548]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d06c      	beq.n	8003e9c <HAL_RCC_OscConfig+0x12c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d168      	bne.n	8003e9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e246      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x76>
 8003dd8:	4b80      	ldr	r3, [pc, #512]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a7f      	ldr	r2, [pc, #508]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e02e      	b.n	8003e44 <HAL_RCC_OscConfig+0xd4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x98>
 8003dee:	4b7b      	ldr	r3, [pc, #492]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7a      	ldr	r2, [pc, #488]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b78      	ldr	r3, [pc, #480]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a77      	ldr	r2, [pc, #476]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e01d      	b.n	8003e44 <HAL_RCC_OscConfig+0xd4>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0xbc>
 8003e12:	4b72      	ldr	r3, [pc, #456]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a71      	ldr	r2, [pc, #452]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b6f      	ldr	r3, [pc, #444]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6e      	ldr	r2, [pc, #440]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0xd4>
 8003e2c:	4b6b      	ldr	r3, [pc, #428]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6a      	ldr	r2, [pc, #424]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b68      	ldr	r3, [pc, #416]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a67      	ldr	r2, [pc, #412]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7ff f9e4 	bl	8003218 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e54:	f7ff f9e0 	bl	8003218 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e1fa      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	4b5d      	ldr	r3, [pc, #372]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0xe4>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7ff f9d0 	bl	8003218 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7ff f9cc 	bl	8003218 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e1e6      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8e:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x10c>
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d063      	beq.n	8003f72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eaa:	4b4c      	ldr	r3, [pc, #304]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eb6:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d11c      	bne.n	8003efc <HAL_RCC_OscConfig+0x18c>
 8003ec2:	4b46      	ldr	r3, [pc, #280]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d116      	bne.n	8003efc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x176>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e1ba      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4939      	ldr	r1, [pc, #228]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	e03a      	b.n	8003f72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f04:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <HAL_RCC_OscConfig+0x270>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7ff f985 	bl	8003218 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f12:	f7ff f981 	bl	8003218 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e19b      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f24:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b2a      	ldr	r3, [pc, #168]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4927      	ldr	r1, [pc, #156]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
 8003f44:	e015      	b.n	8003f72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f46:	4b26      	ldr	r3, [pc, #152]	; (8003fe0 <HAL_RCC_OscConfig+0x270>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7ff f964 	bl	8003218 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f54:	f7ff f960 	bl	8003218 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e17a      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f66:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d03a      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d019      	beq.n	8003fba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f86:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <HAL_RCC_OscConfig+0x274>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8c:	f7ff f944 	bl	8003218 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f94:	f7ff f940 	bl	8003218 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e15a      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	f000 fafe 	bl	80045b4 <RCC_Delay>
 8003fb8:	e01c      	b.n	8003ff4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc0:	f7ff f92a 	bl	8003218 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc6:	e00f      	b.n	8003fe8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc8:	f7ff f926 	bl	8003218 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d908      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e140      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	42420000 	.word	0x42420000
 8003fe4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe8:	4b9e      	ldr	r3, [pc, #632]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e9      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a6 	beq.w	800414e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004002:	2300      	movs	r3, #0
 8004004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004006:	4b97      	ldr	r3, [pc, #604]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10d      	bne.n	800402e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	4b94      	ldr	r3, [pc, #592]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4a93      	ldr	r2, [pc, #588]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401c:	61d3      	str	r3, [r2, #28]
 800401e:	4b91      	ldr	r3, [pc, #580]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402a:	2301      	movs	r3, #1
 800402c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402e:	4b8e      	ldr	r3, [pc, #568]	; (8004268 <HAL_RCC_OscConfig+0x4f8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d118      	bne.n	800406c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800403a:	4b8b      	ldr	r3, [pc, #556]	; (8004268 <HAL_RCC_OscConfig+0x4f8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a8a      	ldr	r2, [pc, #552]	; (8004268 <HAL_RCC_OscConfig+0x4f8>)
 8004040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004046:	f7ff f8e7 	bl	8003218 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404e:	f7ff f8e3 	bl	8003218 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b64      	cmp	r3, #100	; 0x64
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0fd      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	4b81      	ldr	r3, [pc, #516]	; (8004268 <HAL_RCC_OscConfig+0x4f8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d106      	bne.n	8004082 <HAL_RCC_OscConfig+0x312>
 8004074:	4b7b      	ldr	r3, [pc, #492]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4a7a      	ldr	r2, [pc, #488]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6213      	str	r3, [r2, #32]
 8004080:	e02d      	b.n	80040de <HAL_RCC_OscConfig+0x36e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x334>
 800408a:	4b76      	ldr	r3, [pc, #472]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4a75      	ldr	r2, [pc, #468]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	6213      	str	r3, [r2, #32]
 8004096:	4b73      	ldr	r3, [pc, #460]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	4a72      	ldr	r2, [pc, #456]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 800409c:	f023 0304 	bic.w	r3, r3, #4
 80040a0:	6213      	str	r3, [r2, #32]
 80040a2:	e01c      	b.n	80040de <HAL_RCC_OscConfig+0x36e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b05      	cmp	r3, #5
 80040aa:	d10c      	bne.n	80040c6 <HAL_RCC_OscConfig+0x356>
 80040ac:	4b6d      	ldr	r3, [pc, #436]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	4a6c      	ldr	r2, [pc, #432]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80040b2:	f043 0304 	orr.w	r3, r3, #4
 80040b6:	6213      	str	r3, [r2, #32]
 80040b8:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	4a69      	ldr	r2, [pc, #420]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6213      	str	r3, [r2, #32]
 80040c4:	e00b      	b.n	80040de <HAL_RCC_OscConfig+0x36e>
 80040c6:	4b67      	ldr	r3, [pc, #412]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4a66      	ldr	r2, [pc, #408]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	6213      	str	r3, [r2, #32]
 80040d2:	4b64      	ldr	r3, [pc, #400]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	4a63      	ldr	r2, [pc, #396]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d015      	beq.n	8004112 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e6:	f7ff f897 	bl	8003218 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7ff f893 	bl	8003218 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0ab      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004104:	4b57      	ldr	r3, [pc, #348]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0ee      	beq.n	80040ee <HAL_RCC_OscConfig+0x37e>
 8004110:	e014      	b.n	800413c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004112:	f7ff f881 	bl	8003218 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	e00a      	b.n	8004130 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7ff f87d 	bl	8003218 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	; 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e095      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004130:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1ee      	bne.n	800411a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d105      	bne.n	800414e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	4b48      	ldr	r3, [pc, #288]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4a47      	ldr	r2, [pc, #284]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 8081 	beq.w	800425a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004158:	4b42      	ldr	r3, [pc, #264]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b08      	cmp	r3, #8
 8004162:	d061      	beq.n	8004228 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d146      	bne.n	80041fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416c:	4b3f      	ldr	r3, [pc, #252]	; (800426c <HAL_RCC_OscConfig+0x4fc>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004172:	f7ff f851 	bl	8003218 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417a:	f7ff f84d 	bl	8003218 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e067      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418c:	4b35      	ldr	r3, [pc, #212]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a0:	d108      	bne.n	80041b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041a2:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	492d      	ldr	r1, [pc, #180]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041b4:	4b2b      	ldr	r3, [pc, #172]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a19      	ldr	r1, [r3, #32]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	430b      	orrs	r3, r1
 80041c6:	4927      	ldr	r1, [pc, #156]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041cc:	4b27      	ldr	r3, [pc, #156]	; (800426c <HAL_RCC_OscConfig+0x4fc>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d2:	f7ff f821 	bl	8003218 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041da:	f7ff f81d 	bl	8003218 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e037      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ec:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x46a>
 80041f8:	e02f      	b.n	800425a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fa:	4b1c      	ldr	r3, [pc, #112]	; (800426c <HAL_RCC_OscConfig+0x4fc>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7ff f80a 	bl	8003218 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004208:	f7ff f806 	bl	8003218 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e020      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x498>
 8004226:	e018      	b.n	800425a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e013      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_RCC_OscConfig+0x4f4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	429a      	cmp	r2, r3
 8004246:	d106      	bne.n	8004256 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40021000 	.word	0x40021000
 8004268:	40007000 	.word	0x40007000
 800426c:	42420060 	.word	0x42420060

08004270 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0d0      	b.n	8004426 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004284:	4b6a      	ldr	r3, [pc, #424]	; (8004430 <HAL_RCC_ClockConfig+0x1c0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d910      	bls.n	80042b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b67      	ldr	r3, [pc, #412]	; (8004430 <HAL_RCC_ClockConfig+0x1c0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 0207 	bic.w	r2, r3, #7
 800429a:	4965      	ldr	r1, [pc, #404]	; (8004430 <HAL_RCC_ClockConfig+0x1c0>)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b63      	ldr	r3, [pc, #396]	; (8004430 <HAL_RCC_ClockConfig+0x1c0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0b8      	b.n	8004426 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d020      	beq.n	8004302 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042cc:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4a58      	ldr	r2, [pc, #352]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e4:	4b53      	ldr	r3, [pc, #332]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a52      	ldr	r2, [pc, #328]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f0:	4b50      	ldr	r3, [pc, #320]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	494d      	ldr	r1, [pc, #308]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d040      	beq.n	8004390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b47      	ldr	r3, [pc, #284]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d115      	bne.n	800434e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e07f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432e:	4b41      	ldr	r3, [pc, #260]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e073      	b.n	8004426 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433e:	4b3d      	ldr	r3, [pc, #244]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e06b      	b.n	8004426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800434e:	4b39      	ldr	r3, [pc, #228]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f023 0203 	bic.w	r2, r3, #3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4936      	ldr	r1, [pc, #216]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004360:	f7fe ff5a 	bl	8003218 <HAL_GetTick>
 8004364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004366:	e00a      	b.n	800437e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004368:	f7fe ff56 	bl	8003218 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	; 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e053      	b.n	8004426 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	4b2d      	ldr	r3, [pc, #180]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f003 020c 	and.w	r2, r3, #12
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	429a      	cmp	r2, r3
 800438e:	d1eb      	bne.n	8004368 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004390:	4b27      	ldr	r3, [pc, #156]	; (8004430 <HAL_RCC_ClockConfig+0x1c0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d210      	bcs.n	80043c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <HAL_RCC_ClockConfig+0x1c0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 0207 	bic.w	r2, r3, #7
 80043a6:	4922      	ldr	r1, [pc, #136]	; (8004430 <HAL_RCC_ClockConfig+0x1c0>)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <HAL_RCC_ClockConfig+0x1c0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e032      	b.n	8004426 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043cc:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4916      	ldr	r1, [pc, #88]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	490e      	ldr	r1, [pc, #56]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043fe:	f000 f859 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 8004402:	4601      	mov	r1, r0
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <HAL_RCC_ClockConfig+0x1c8>)
 8004410:	5cd3      	ldrb	r3, [r2, r3]
 8004412:	fa21 f303 	lsr.w	r3, r1, r3
 8004416:	4a09      	ldr	r2, [pc, #36]	; (800443c <HAL_RCC_ClockConfig+0x1cc>)
 8004418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <HAL_RCC_ClockConfig+0x1d0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe feb8 	bl	8003194 <HAL_InitTick>

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40022000 	.word	0x40022000
 8004434:	40021000 	.word	0x40021000
 8004438:	0800d5a4 	.word	0x0800d5a4
 800443c:	20000008 	.word	0x20000008
 8004440:	2000000c 	.word	0x2000000c

08004444 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	; 0x28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8004450:	f107 0318 	add.w	r3, r7, #24
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800445e:	2302      	movs	r3, #2
 8004460:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004462:	2303      	movs	r3, #3
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800446a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800446e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_RCC_MCOConfig+0x68>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	4a0d      	ldr	r2, [pc, #52]	; (80044ac <HAL_RCC_MCOConfig+0x68>)
 8004476:	f043 0304 	orr.w	r3, r3, #4
 800447a:	6193      	str	r3, [r2, #24]
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCC_MCOConfig+0x68>)
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8004488:	f107 0318 	add.w	r3, r7, #24
 800448c:	4619      	mov	r1, r3
 800448e:	4808      	ldr	r0, [pc, #32]	; (80044b0 <HAL_RCC_MCOConfig+0x6c>)
 8004490:	f7ff fad8 	bl	8003a44 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RCC_MCOConfig+0x68>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <HAL_RCC_MCOConfig+0x68>)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	604b      	str	r3, [r1, #4]
}
 80044a4:	bf00      	nop
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40010800 	.word	0x40010800

080044b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b4:	b490      	push	{r4, r7}
 80044b6:	b08a      	sub	sp, #40	; 0x28
 80044b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80044ba:	4b2a      	ldr	r3, [pc, #168]	; (8004564 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044bc:	1d3c      	adds	r4, r7, #4
 80044be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044c4:	4b28      	ldr	r3, [pc, #160]	; (8004568 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044de:	4b23      	ldr	r3, [pc, #140]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d002      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x40>
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d003      	beq.n	80044fa <HAL_RCC_GetSysClockFreq+0x46>
 80044f2:	e02d      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044f4:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044f6:	623b      	str	r3, [r7, #32]
      break;
 80044f8:	e02d      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	0c9b      	lsrs	r3, r3, #18
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004506:	4413      	add	r3, r2
 8004508:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800450c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d013      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004518:	4b14      	ldr	r3, [pc, #80]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	0c5b      	lsrs	r3, r3, #17
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004526:	4413      	add	r3, r2
 8004528:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800452c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004532:	fb02 f203 	mul.w	r2, r2, r3
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
 800453e:	e004      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	4a0c      	ldr	r2, [pc, #48]	; (8004574 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004544:	fb02 f303 	mul.w	r3, r2, r3
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	623b      	str	r3, [r7, #32]
      break;
 800454e:	e002      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004552:	623b      	str	r3, [r7, #32]
      break;
 8004554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004556:	6a3b      	ldr	r3, [r7, #32]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3728      	adds	r7, #40	; 0x28
 800455c:	46bd      	mov	sp, r7
 800455e:	bc90      	pop	{r4, r7}
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	0800d52c 	.word	0x0800d52c
 8004568:	0800d53c 	.word	0x0800d53c
 800456c:	40021000 	.word	0x40021000
 8004570:	007a1200 	.word	0x007a1200
 8004574:	003d0900 	.word	0x003d0900

08004578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800457c:	4b02      	ldr	r3, [pc, #8]	; (8004588 <HAL_RCC_GetHCLKFreq+0x10>)
 800457e:	681b      	ldr	r3, [r3, #0]
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	20000008 	.word	0x20000008

0800458c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004590:	f7ff fff2 	bl	8004578 <HAL_RCC_GetHCLKFreq>
 8004594:	4601      	mov	r1, r0
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	0adb      	lsrs	r3, r3, #11
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	4a03      	ldr	r2, [pc, #12]	; (80045b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000
 80045b0:	0800d5b4 	.word	0x0800d5b4

080045b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <RCC_Delay+0x34>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <RCC_Delay+0x38>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	0a5b      	lsrs	r3, r3, #9
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045d0:	bf00      	nop
  }
  while (Delay --);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1e5a      	subs	r2, r3, #1
 80045d6:	60fa      	str	r2, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f9      	bne.n	80045d0 <RCC_Delay+0x1c>
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000008 	.word	0x20000008
 80045ec:	10624dd3 	.word	0x10624dd3

080045f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d07d      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800460c:	2300      	movs	r3, #0
 800460e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004610:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461c:	4b4c      	ldr	r3, [pc, #304]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	4a4b      	ldr	r2, [pc, #300]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004626:	61d3      	str	r3, [r2, #28]
 8004628:	4b49      	ldr	r3, [pc, #292]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004634:	2301      	movs	r3, #1
 8004636:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004638:	4b46      	ldr	r3, [pc, #280]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d118      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004644:	4b43      	ldr	r3, [pc, #268]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a42      	ldr	r2, [pc, #264]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800464a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004650:	f7fe fde2 	bl	8003218 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	e008      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004658:	f7fe fdde 	bl	8003218 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e06d      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466a:	4b3a      	ldr	r3, [pc, #232]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004676:	4b36      	ldr	r3, [pc, #216]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d02e      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	429a      	cmp	r2, r3
 8004692:	d027      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004694:	4b2e      	ldr	r3, [pc, #184]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800469e:	4b2e      	ldr	r3, [pc, #184]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046a4:	4b2c      	ldr	r3, [pc, #176]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046aa:	4a29      	ldr	r2, [pc, #164]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d014      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ba:	f7fe fdad 	bl	8003218 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c0:	e00a      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fe fda9 	bl	8003218 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e036      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d8:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0ee      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046e4:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4917      	ldr	r1, [pc, #92]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d105      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fc:	4b14      	ldr	r3, [pc, #80]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004706:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004714:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	490b      	ldr	r1, [pc, #44]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004732:	4b07      	ldr	r3, [pc, #28]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	4904      	ldr	r1, [pc, #16]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000
 8004754:	40007000 	.word	0x40007000
 8004758:	42420440 	.word	0x42420440

0800475c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b08d      	sub	sp, #52	; 0x34
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004764:	4b55      	ldr	r3, [pc, #340]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004766:	f107 040c 	add.w	r4, r7, #12
 800476a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800476c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004770:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
 800477a:	2300      	movs	r3, #0
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800477e:	2300      	movs	r3, #0
 8004780:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	2300      	movs	r3, #0
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d07f      	beq.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004790:	2b10      	cmp	r3, #16
 8004792:	d002      	beq.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004794:	2b01      	cmp	r3, #1
 8004796:	d048      	beq.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004798:	e08b      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800479a:	4b4a      	ldr	r3, [pc, #296]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80047a0:	4b48      	ldr	r3, [pc, #288]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d07f      	beq.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	0c9b      	lsrs	r3, r3, #18
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047b8:	4413      	add	r3, r2
 80047ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047be:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d018      	beq.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047ca:	4b3e      	ldr	r3, [pc, #248]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	0c5b      	lsrs	r3, r3, #17
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047d8:	4413      	add	r3, r2
 80047da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80047ea:	4a37      	ldr	r2, [pc, #220]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047fa:	e004      	b.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	4a33      	ldr	r2, [pc, #204]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004800:	fb02 f303 	mul.w	r3, r2, r3
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004806:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004812:	d102      	bne.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004818:	e048      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4a2c      	ldr	r2, [pc, #176]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004820:	fba2 2303 	umull	r2, r3, r2, r3
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004828:	e040      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800482a:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483a:	d108      	bne.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
 800484c:	e01f      	b.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004858:	d109      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800485a:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004866:	f649 4340 	movw	r3, #40000	; 0x9c40
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
 800486c:	e00f      	b.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004878:	d11a      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800487a:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d014      	beq.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004886:	f24f 4324 	movw	r3, #62500	; 0xf424
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800488c:	e010      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800488e:	e00f      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004890:	f7ff fe7c 	bl	800458c <HAL_RCC_GetPCLK2Freq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	0b9b      	lsrs	r3, r3, #14
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	3301      	adds	r3, #1
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048aa:	e002      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80048ac:	bf00      	nop
 80048ae:	e000      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80048b0:	bf00      	nop
    }
  }
  return (frequency);
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3734      	adds	r7, #52	; 0x34
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd90      	pop	{r4, r7, pc}
 80048bc:	0800d540 	.word	0x0800d540
 80048c0:	0800d550 	.word	0x0800d550
 80048c4:	40021000 	.word	0x40021000
 80048c8:	007a1200 	.word	0x007a1200
 80048cc:	003d0900 	.word	0x003d0900
 80048d0:	aaaaaaab 	.word	0xaaaaaaab

080048d4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e084      	b.n	80049f4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7c5b      	ldrb	r3, [r3, #17]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fe fa52 	bl	8002da4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 faf4 	bl	8004ef4 <HAL_RTC_WaitForSynchro>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2204      	movs	r2, #4
 8004916:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e06b      	b.n	80049f4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fbad 	bl	800507c <RTC_EnterInitMode>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2204      	movs	r2, #4
 800492c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e060      	b.n	80049f4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0207 	bic.w	r2, r2, #7
 8004940:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800494a:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <HAL_RTC_Init+0x128>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	4a2b      	ldr	r2, [pc, #172]	; (80049fc <HAL_RTC_Init+0x128>)
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004956:	4b29      	ldr	r3, [pc, #164]	; (80049fc <HAL_RTC_Init+0x128>)
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	4926      	ldr	r1, [pc, #152]	; (80049fc <HAL_RTC_Init+0x128>)
 8004964:	4313      	orrs	r3, r2
 8004966:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d003      	beq.n	800497a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e00e      	b.n	8004998 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800497a:	2001      	movs	r0, #1
 800497c:	f7ff feee 	bl	800475c <HAL_RCCEx_GetPeriphCLKFreq>
 8004980:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d104      	bne.n	8004992 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2204      	movs	r2, #4
 800498c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e030      	b.n	80049f4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3b01      	subs	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 010f 	bic.w	r1, r3, #15
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	0c1a      	lsrs	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	041b      	lsls	r3, r3, #16
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	b291      	uxth	r1, r2
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	430b      	orrs	r3, r1
 80049c2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fb81 	bl	80050cc <RTC_ExitInitMode>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2204      	movs	r2, #4
 80049d4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00c      	b.n	80049f4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80049f2:	2300      	movs	r3, #0
  }
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40006c00 	.word	0x40006c00

08004a00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_RTC_SetTime+0x20>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e080      	b.n	8004b26 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	7c1b      	ldrb	r3, [r3, #16]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_RTC_SetTime+0x30>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e07a      	b.n	8004b26 <HAL_RTC_SetTime+0x126>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d113      	bne.n	8004a6a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a4c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	4619      	mov	r1, r3
 8004a56:	460b      	mov	r3, r1
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	1a5b      	subs	r3, r3, r1
 8004a5c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004a5e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004a64:	4413      	add	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e01e      	b.n	8004aa8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fb71 	bl	8005156 <RTC_Bcd2ToByte>
 8004a74:	4603      	mov	r3, r0
 8004a76:	461a      	mov	r2, r3
 8004a78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a7c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	785b      	ldrb	r3, [r3, #1]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fb66 	bl	8005156 <RTC_Bcd2ToByte>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4613      	mov	r3, r2
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a96:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	789b      	ldrb	r3, [r3, #2]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fb5a 	bl	8005156 <RTC_Bcd2ToByte>
 8004aa2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004aa4:	4423      	add	r3, r4
 8004aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004aa8:	6979      	ldr	r1, [r7, #20]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 fa7f 	bl	8004fae <RTC_WriteTimeCounter>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2204      	movs	r2, #4
 8004aba:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e02f      	b.n	8004b26 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0205 	bic.w	r2, r2, #5
 8004ad4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fa90 	bl	8004ffc <RTC_ReadAlarmCounter>
 8004adc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d018      	beq.n	8004b18 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d214      	bcs.n	8004b18 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004af4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004af8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004afa:	6939      	ldr	r1, [r7, #16]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fa96 	bl	800502e <RTC_WriteAlarmCounter>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e006      	b.n	8004b26 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004b24:	2300      	movs	r3, #0
  }
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd90      	pop	{r4, r7, pc}
	...

08004b30 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_RTC_GetTime+0x28>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0b5      	b.n	8004cc8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0ac      	b.n	8004cc8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f9ed 	bl	8004f4e <RTC_ReadTimeCounter>
 8004b74:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	4a55      	ldr	r2, [pc, #340]	; (8004cd0 <HAL_RTC_GetTime+0x1a0>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	0adb      	lsrs	r3, r3, #11
 8004b80:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4b52      	ldr	r3, [pc, #328]	; (8004cd0 <HAL_RTC_GetTime+0x1a0>)
 8004b86:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8a:	0adb      	lsrs	r3, r3, #11
 8004b8c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	4a4f      	ldr	r2, [pc, #316]	; (8004cd4 <HAL_RTC_GetTime+0x1a4>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	4a4a      	ldr	r2, [pc, #296]	; (8004cd0 <HAL_RTC_GetTime+0x1a0>)
 8004ba8:	fba2 1203 	umull	r1, r2, r2, r3
 8004bac:	0ad2      	lsrs	r2, r2, #11
 8004bae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004bb2:	fb01 f202 	mul.w	r2, r1, r2
 8004bb6:	1a9a      	subs	r2, r3, r2
 8004bb8:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <HAL_RTC_GetTime+0x1a4>)
 8004bba:	fba3 1302 	umull	r1, r3, r3, r2
 8004bbe:	0959      	lsrs	r1, r3, #5
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	1a5b      	subs	r3, r3, r1
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	1ad1      	subs	r1, r2, r3
 8004bca:	b2ca      	uxtb	r2, r1
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b17      	cmp	r3, #23
 8004bd4:	d955      	bls.n	8004c82 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4a3f      	ldr	r2, [pc, #252]	; (8004cd8 <HAL_RTC_GetTime+0x1a8>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004be2:	6939      	ldr	r1, [r7, #16]
 8004be4:	4b3c      	ldr	r3, [pc, #240]	; (8004cd8 <HAL_RTC_GetTime+0x1a8>)
 8004be6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bea:	091a      	lsrs	r2, r3, #4
 8004bec:	4613      	mov	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	1aca      	subs	r2, r1, r3
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f9fd 	bl	8004ffc <RTC_ReadAlarmCounter>
 8004c02:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d008      	beq.n	8004c1e <HAL_RTC_GetTime+0xee>
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d904      	bls.n	8004c1e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	61fb      	str	r3, [r7, #28]
 8004c1c:	e002      	b.n	8004c24 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c22:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	4a2d      	ldr	r2, [pc, #180]	; (8004cdc <HAL_RTC_GetTime+0x1ac>)
 8004c28:	fb02 f303 	mul.w	r3, r2, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004c32:	69b9      	ldr	r1, [r7, #24]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f9ba 	bl	8004fae <RTC_WriteTimeCounter>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e041      	b.n	8004cc8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d00c      	beq.n	8004c66 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	4413      	add	r3, r2
 8004c52:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c54:	69f9      	ldr	r1, [r7, #28]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f9e9 	bl	800502e <RTC_WriteAlarmCounter>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e030      	b.n	8004cc8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c66:	69f9      	ldr	r1, [r7, #28]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f9e0 	bl	800502e <RTC_WriteAlarmCounter>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e027      	b.n	8004cc8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004c78:	6979      	ldr	r1, [r7, #20]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fa88 	bl	8005190 <RTC_DateUpdate>
 8004c80:	e003      	b.n	8004c8a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01a      	beq.n	8004cc6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fa41 	bl	800511c <RTC_ByteToBcd2>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	785b      	ldrb	r3, [r3, #1]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fa38 	bl	800511c <RTC_ByteToBcd2>
 8004cac:	4603      	mov	r3, r0
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	789b      	ldrb	r3, [r3, #2]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fa2f 	bl	800511c <RTC_ByteToBcd2>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	91a2b3c5 	.word	0x91a2b3c5
 8004cd4:	88888889 	.word	0x88888889
 8004cd8:	aaaaaaab 	.word	0xaaaaaaab
 8004cdc:	00015180 	.word	0x00015180

08004ce0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_RTC_SetDate+0x24>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e097      	b.n	8004e38 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	7c1b      	ldrb	r3, [r3, #16]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_RTC_SetDate+0x34>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e091      	b.n	8004e38 <HAL_RTC_SetDate+0x158>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10c      	bne.n	8004d40 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	78da      	ldrb	r2, [r3, #3]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	785a      	ldrb	r2, [r3, #1]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	789a      	ldrb	r2, [r3, #2]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	739a      	strb	r2, [r3, #14]
 8004d3e:	e01a      	b.n	8004d76 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	78db      	ldrb	r3, [r3, #3]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fa06 	bl	8005156 <RTC_Bcd2ToByte>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f9fd 	bl	8005156 <RTC_Bcd2ToByte>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	789b      	ldrb	r3, [r3, #2]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 f9f4 	bl	8005156 <RTC_Bcd2ToByte>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	461a      	mov	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	7bdb      	ldrb	r3, [r3, #15]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	7b59      	ldrb	r1, [r3, #13]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	7b9b      	ldrb	r3, [r3, #14]
 8004d84:	461a      	mov	r2, r3
 8004d86:	f000 fadf 	bl	8005348 <RTC_WeekDayNum>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	7b1a      	ldrb	r2, [r3, #12]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f8d7 	bl	8004f4e <RTC_ReadTimeCounter>
 8004da0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <HAL_RTC_SetDate+0x160>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	0adb      	lsrs	r3, r3, #11
 8004dac:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b18      	cmp	r3, #24
 8004db2:	d93a      	bls.n	8004e2a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	4a23      	ldr	r2, [pc, #140]	; (8004e44 <HAL_RTC_SetDate+0x164>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	4a22      	ldr	r2, [pc, #136]	; (8004e48 <HAL_RTC_SetDate+0x168>)
 8004dc0:	fb02 f303 	mul.w	r3, r2, r3
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004dca:	69f9      	ldr	r1, [r7, #28]
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f8ee 	bl	8004fae <RTC_WriteTimeCounter>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2204      	movs	r2, #4
 8004ddc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e027      	b.n	8004e38 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f907 	bl	8004ffc <RTC_ReadAlarmCounter>
 8004dee:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d018      	beq.n	8004e2a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d214      	bcs.n	8004e2a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004e06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004e0a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004e0c:	69b9      	ldr	r1, [r7, #24]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f90d 	bl	800502e <RTC_WriteAlarmCounter>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e006      	b.n	8004e38 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3720      	adds	r7, #32
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	91a2b3c5 	.word	0x91a2b3c5
 8004e44:	aaaaaaab 	.word	0xaaaaaaab
 8004e48:	00015180 	.word	0x00015180

08004e4c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	460a      	mov	r2, r1
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	460a      	mov	r2, r1
 8004e64:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_RTC_GetDate+0x26>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e03a      	b.n	8004eec <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004e76:	f107 0314 	add.w	r3, r7, #20
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff fe56 	bl	8004b30 <HAL_RTC_GetTime>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e02e      	b.n	8004eec <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	7b1a      	ldrb	r2, [r3, #12]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	7bda      	ldrb	r2, [r3, #15]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	7b5a      	ldrb	r2, [r3, #13]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	7b9a      	ldrb	r2, [r3, #14]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01a      	beq.n	8004eea <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	78db      	ldrb	r3, [r3, #3]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f92f 	bl	800511c <RTC_ByteToBcd2>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f926 	bl	800511c <RTC_ByteToBcd2>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	789b      	ldrb	r3, [r3, #2]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f91d 	bl	800511c <RTC_ByteToBcd2>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e01d      	b.n	8004f46 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0208 	bic.w	r2, r2, #8
 8004f18:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004f1a:	f7fe f97d 	bl	8003218 <HAL_GetTick>
 8004f1e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f20:	e009      	b.n	8004f36 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004f22:	f7fe f979 	bl	8003218 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f30:	d901      	bls.n	8004f36 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e007      	b.n	8004f46 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0ee      	beq.n	8004f22 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b087      	sub	sp, #28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	827b      	strh	r3, [r7, #18]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	823b      	strh	r3, [r7, #16]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004f7e:	8a7a      	ldrh	r2, [r7, #18]
 8004f80:	8a3b      	ldrh	r3, [r7, #16]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d008      	beq.n	8004f98 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004f86:	8a3b      	ldrh	r3, [r7, #16]
 8004f88:	041a      	lsls	r2, r3, #16
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	e004      	b.n	8004fa2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004f98:	8a7b      	ldrh	r3, [r7, #18]
 8004f9a:	041a      	lsls	r2, r3, #16
 8004f9c:	89fb      	ldrh	r3, [r7, #14]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004fa2:	697b      	ldr	r3, [r7, #20]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f85d 	bl	800507c <RTC_EnterInitMode>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
 8004fcc:	e011      	b.n	8004ff2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	0c12      	lsrs	r2, r2, #16
 8004fd6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	b292      	uxth	r2, r2
 8004fe0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f872 	bl	80050cc <RTC_ExitInitMode>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	81fb      	strh	r3, [r7, #14]
 8005008:	2300      	movs	r3, #0
 800500a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800501c:	89fb      	ldrh	r3, [r7, #14]
 800501e:	041a      	lsls	r2, r3, #16
 8005020:	89bb      	ldrh	r3, [r7, #12]
 8005022:	4313      	orrs	r3, r2
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr

0800502e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f81d 	bl	800507c <RTC_EnterInitMode>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
 800504c:	e011      	b.n	8005072 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	0c12      	lsrs	r2, r2, #16
 8005056:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	b292      	uxth	r2, r2
 8005060:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f832 	bl	80050cc <RTC_ExitInitMode>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005072:	7bfb      	ldrb	r3, [r7, #15]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005088:	f7fe f8c6 	bl	8003218 <HAL_GetTick>
 800508c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800508e:	e009      	b.n	80050a4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005090:	f7fe f8c2 	bl	8003218 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800509e:	d901      	bls.n	80050a4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e00f      	b.n	80050c4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0ee      	beq.n	8005090 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0210 	orr.w	r2, r2, #16
 80050c0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0210 	bic.w	r2, r2, #16
 80050e6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80050e8:	f7fe f896 	bl	8003218 <HAL_GetTick>
 80050ec:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050ee:	e009      	b.n	8005104 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80050f0:	f7fe f892 	bl	8003218 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050fe:	d901      	bls.n	8005104 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e007      	b.n	8005114 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0ee      	beq.n	80050f0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800512a:	e005      	b.n	8005138 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	3b0a      	subs	r3, #10
 8005136:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	2b09      	cmp	r3, #9
 800513c:	d8f6      	bhi.n	800512c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	b2da      	uxtb	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	4313      	orrs	r3, r2
 800514a:	b2db      	uxtb	r3, r3
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	4603      	mov	r3, r0
 800515e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	b2da      	uxtb	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	4413      	add	r3, r2
 8005184:	b2db      	uxtb	r3, r3
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	7bdb      	ldrb	r3, [r3, #15]
 80051ae:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	7b5b      	ldrb	r3, [r3, #13]
 80051b4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	7b9b      	ldrb	r3, [r3, #14]
 80051ba:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80051bc:	2300      	movs	r3, #0
 80051be:	60bb      	str	r3, [r7, #8]
 80051c0:	e06f      	b.n	80052a2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d011      	beq.n	80051ec <RTC_DateUpdate+0x5c>
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d00e      	beq.n	80051ec <RTC_DateUpdate+0x5c>
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b05      	cmp	r3, #5
 80051d2:	d00b      	beq.n	80051ec <RTC_DateUpdate+0x5c>
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b07      	cmp	r3, #7
 80051d8:	d008      	beq.n	80051ec <RTC_DateUpdate+0x5c>
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d005      	beq.n	80051ec <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	2b0a      	cmp	r3, #10
 80051e4:	d002      	beq.n	80051ec <RTC_DateUpdate+0x5c>
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b0c      	cmp	r3, #12
 80051ea:	d117      	bne.n	800521c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b1e      	cmp	r3, #30
 80051f0:	d803      	bhi.n	80051fa <RTC_DateUpdate+0x6a>
      {
        day++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80051f8:	e050      	b.n	800529c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2b0c      	cmp	r3, #12
 80051fe:	d005      	beq.n	800520c <RTC_DateUpdate+0x7c>
        {
          month++;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	3301      	adds	r3, #1
 8005204:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005206:	2301      	movs	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800520a:	e047      	b.n	800529c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800520c:	2301      	movs	r3, #1
 800520e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005210:	2301      	movs	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]
          year++;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	3301      	adds	r3, #1
 8005218:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800521a:	e03f      	b.n	800529c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b04      	cmp	r3, #4
 8005220:	d008      	beq.n	8005234 <RTC_DateUpdate+0xa4>
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b06      	cmp	r3, #6
 8005226:	d005      	beq.n	8005234 <RTC_DateUpdate+0xa4>
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b09      	cmp	r3, #9
 800522c:	d002      	beq.n	8005234 <RTC_DateUpdate+0xa4>
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b0b      	cmp	r3, #11
 8005232:	d10c      	bne.n	800524e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b1d      	cmp	r3, #29
 8005238:	d803      	bhi.n	8005242 <RTC_DateUpdate+0xb2>
      {
        day++;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3301      	adds	r3, #1
 800523e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005240:	e02c      	b.n	800529c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3301      	adds	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005248:	2301      	movs	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800524c:	e026      	b.n	800529c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d123      	bne.n	800529c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b1b      	cmp	r3, #27
 8005258:	d803      	bhi.n	8005262 <RTC_DateUpdate+0xd2>
      {
        day++;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3301      	adds	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e01c      	b.n	800529c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b1c      	cmp	r3, #28
 8005266:	d111      	bne.n	800528c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	b29b      	uxth	r3, r3
 800526c:	4618      	mov	r0, r3
 800526e:	f000 f839 	bl	80052e4 <RTC_IsLeapYear>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e00d      	b.n	800529c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	3301      	adds	r3, #1
 8005284:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005286:	2301      	movs	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e007      	b.n	800529c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b1d      	cmp	r3, #29
 8005290:	d104      	bne.n	800529c <RTC_DateUpdate+0x10c>
      {
        month++;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3301      	adds	r3, #1
 8005296:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005298:	2301      	movs	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	3301      	adds	r3, #1
 80052a0:	60bb      	str	r3, [r7, #8]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d38b      	bcc.n	80051c2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f000 f83b 	bl	8005348 <RTC_WeekDayNum>
 80052d2:	4603      	mov	r3, r0
 80052d4:	461a      	mov	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	731a      	strb	r2, [r3, #12]
}
 80052da:	bf00      	nop
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e01d      	b.n	800533a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	4a10      	ldr	r2, [pc, #64]	; (8005344 <RTC_IsLeapYear+0x60>)
 8005302:	fba2 1203 	umull	r1, r2, r2, r3
 8005306:	0952      	lsrs	r2, r2, #5
 8005308:	2164      	movs	r1, #100	; 0x64
 800530a:	fb01 f202 	mul.w	r2, r1, r2
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005316:	2301      	movs	r3, #1
 8005318:	e00f      	b.n	800533a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	4a09      	ldr	r2, [pc, #36]	; (8005344 <RTC_IsLeapYear+0x60>)
 800531e:	fba2 1203 	umull	r1, r2, r2, r3
 8005322:	09d2      	lsrs	r2, r2, #7
 8005324:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005328:	fb01 f202 	mul.w	r2, r1, r2
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005338:	2300      	movs	r3, #0
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	51eb851f 	.word	0x51eb851f

08005348 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
 8005354:	4613      	mov	r3, r2
 8005356:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	60bb      	str	r3, [r7, #8]
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005366:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d82d      	bhi.n	80053ca <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800536e:	78fa      	ldrb	r2, [r7, #3]
 8005370:	4613      	mov	r3, r2
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4413      	add	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	4a2c      	ldr	r2, [pc, #176]	; (800542c <RTC_WeekDayNum+0xe4>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	085a      	lsrs	r2, r3, #1
 8005382:	78bb      	ldrb	r3, [r7, #2]
 8005384:	441a      	add	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	441a      	add	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	3b01      	subs	r3, #1
 800538e:	089b      	lsrs	r3, r3, #2
 8005390:	441a      	add	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	3b01      	subs	r3, #1
 8005396:	4926      	ldr	r1, [pc, #152]	; (8005430 <RTC_WeekDayNum+0xe8>)
 8005398:	fba1 1303 	umull	r1, r3, r1, r3
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	4922      	ldr	r1, [pc, #136]	; (8005430 <RTC_WeekDayNum+0xe8>)
 80053a6:	fba1 1303 	umull	r1, r3, r1, r3
 80053aa:	09db      	lsrs	r3, r3, #7
 80053ac:	4413      	add	r3, r2
 80053ae:	1d1a      	adds	r2, r3, #4
 80053b0:	4b20      	ldr	r3, [pc, #128]	; (8005434 <RTC_WeekDayNum+0xec>)
 80053b2:	fba3 1302 	umull	r1, r3, r3, r2
 80053b6:	1ad1      	subs	r1, r2, r3
 80053b8:	0849      	lsrs	r1, r1, #1
 80053ba:	440b      	add	r3, r1
 80053bc:	0899      	lsrs	r1, r3, #2
 80053be:	460b      	mov	r3, r1
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	1a5b      	subs	r3, r3, r1
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e029      	b.n	800541e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80053ca:	78fa      	ldrb	r2, [r7, #3]
 80053cc:	4613      	mov	r3, r2
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	4413      	add	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	1a9b      	subs	r3, r3, r2
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <RTC_WeekDayNum+0xe4>)
 80053d8:	fba2 2303 	umull	r2, r3, r2, r3
 80053dc:	085a      	lsrs	r2, r3, #1
 80053de:	78bb      	ldrb	r3, [r7, #2]
 80053e0:	441a      	add	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	441a      	add	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	089b      	lsrs	r3, r3, #2
 80053ea:	441a      	add	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4910      	ldr	r1, [pc, #64]	; (8005430 <RTC_WeekDayNum+0xe8>)
 80053f0:	fba1 1303 	umull	r1, r3, r1, r3
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	490d      	ldr	r1, [pc, #52]	; (8005430 <RTC_WeekDayNum+0xe8>)
 80053fc:	fba1 1303 	umull	r1, r3, r1, r3
 8005400:	09db      	lsrs	r3, r3, #7
 8005402:	4413      	add	r3, r2
 8005404:	1c9a      	adds	r2, r3, #2
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <RTC_WeekDayNum+0xec>)
 8005408:	fba3 1302 	umull	r1, r3, r3, r2
 800540c:	1ad1      	subs	r1, r2, r3
 800540e:	0849      	lsrs	r1, r1, #1
 8005410:	440b      	add	r3, r1
 8005412:	0899      	lsrs	r1, r3, #2
 8005414:	460b      	mov	r3, r1
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	1a5b      	subs	r3, r3, r1
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	b2db      	uxtb	r3, r3
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr
 800542c:	38e38e39 	.word	0x38e38e39
 8005430:	51eb851f 	.word	0x51eb851f
 8005434:	24924925 	.word	0x24924925

08005438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e053      	b.n	80054f2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fd fcc1 	bl	8002dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005480:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	ea42 0103 	orr.w	r1, r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	0c1a      	lsrs	r2, r3, #16
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f002 0204 	and.w	r2, r2, #4
 80054d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b088      	sub	sp, #32
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_SPI_Transmit+0x22>
 8005518:	2302      	movs	r3, #2
 800551a:	e11e      	b.n	800575a <HAL_SPI_Transmit+0x260>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005524:	f7fd fe78 	bl	8003218 <HAL_GetTick>
 8005528:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	d002      	beq.n	8005540 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800553a:	2302      	movs	r3, #2
 800553c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800553e:	e103      	b.n	8005748 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_SPI_Transmit+0x52>
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005550:	e0fa      	b.n	8005748 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2203      	movs	r2, #3
 8005556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	88fa      	ldrh	r2, [r7, #6]
 800556a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	88fa      	ldrh	r2, [r7, #6]
 8005570:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005598:	d107      	bne.n	80055aa <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	d007      	beq.n	80055c8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d0:	d14b      	bne.n	800566a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_Transmit+0xe6>
 80055da:	8afb      	ldrh	r3, [r7, #22]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d13e      	bne.n	800565e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	881a      	ldrh	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	1c9a      	adds	r2, r3, #2
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005604:	e02b      	b.n	800565e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b02      	cmp	r3, #2
 8005612:	d112      	bne.n	800563a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	881a      	ldrh	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	1c9a      	adds	r2, r3, #2
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	86da      	strh	r2, [r3, #54]	; 0x36
 8005638:	e011      	b.n	800565e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800563a:	f7fd fded 	bl	8003218 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d803      	bhi.n	8005652 <HAL_SPI_Transmit+0x158>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d102      	bne.n	8005658 <HAL_SPI_Transmit+0x15e>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800565c:	e074      	b.n	8005748 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1ce      	bne.n	8005606 <HAL_SPI_Transmit+0x10c>
 8005668:	e04c      	b.n	8005704 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Transmit+0x17e>
 8005672:	8afb      	ldrh	r3, [r7, #22]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d140      	bne.n	80056fa <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	7812      	ldrb	r2, [r2, #0]
 8005684:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800569e:	e02c      	b.n	80056fa <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d113      	bne.n	80056d6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	7812      	ldrb	r2, [r2, #0]
 80056ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80056d4:	e011      	b.n	80056fa <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d6:	f7fd fd9f 	bl	8003218 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d803      	bhi.n	80056ee <HAL_SPI_Transmit+0x1f4>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d102      	bne.n	80056f4 <HAL_SPI_Transmit+0x1fa>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d102      	bne.n	80056fa <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056f8:	e026      	b.n	8005748 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1cd      	bne.n	80056a0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fb9e 	bl	8005e4a <SPI_EndRxTxTransaction>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005722:	2300      	movs	r3, #0
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e000      	b.n	8005748 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005746:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005758:	7ffb      	ldrb	r3, [r7, #31]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b088      	sub	sp, #32
 8005766:	af02      	add	r7, sp, #8
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	4613      	mov	r3, r2
 8005770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577e:	d112      	bne.n	80057a6 <HAL_SPI_Receive+0x44>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10e      	bne.n	80057a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2204      	movs	r2, #4
 800578c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	4613      	mov	r3, r2
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f8e9 	bl	8005974 <HAL_SPI_TransmitReceive>
 80057a2:	4603      	mov	r3, r0
 80057a4:	e0e2      	b.n	800596c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_SPI_Receive+0x52>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e0db      	b.n	800596c <HAL_SPI_Receive+0x20a>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057bc:	f7fd fd2c 	bl	8003218 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d002      	beq.n	80057d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
 80057d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057d2:	e0c2      	b.n	800595a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_SPI_Receive+0x7e>
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057e4:	e0b9      	b.n	800595a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2204      	movs	r2, #4
 80057ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	88fa      	ldrh	r2, [r7, #6]
 80057fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582c:	d107      	bne.n	800583e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800583c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d007      	beq.n	800585c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800585a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d162      	bne.n	800592a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005864:	e02e      	b.n	80058c4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b01      	cmp	r3, #1
 8005872:	d115      	bne.n	80058a0 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f103 020c 	add.w	r2, r3, #12
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	7812      	ldrb	r2, [r2, #0]
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800589e:	e011      	b.n	80058c4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058a0:	f7fd fcba 	bl	8003218 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d803      	bhi.n	80058b8 <HAL_SPI_Receive+0x156>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d102      	bne.n	80058be <HAL_SPI_Receive+0x15c>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058c2:	e04a      	b.n	800595a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1cb      	bne.n	8005866 <HAL_SPI_Receive+0x104>
 80058ce:	e031      	b.n	8005934 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d113      	bne.n	8005906 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	b292      	uxth	r2, r2
 80058ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	1c9a      	adds	r2, r3, #2
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005904:	e011      	b.n	800592a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005906:	f7fd fc87 	bl	8003218 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d803      	bhi.n	800591e <HAL_SPI_Receive+0x1bc>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d102      	bne.n	8005924 <HAL_SPI_Receive+0x1c2>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005928:	e017      	b.n	800595a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1cd      	bne.n	80058d0 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fa34 	bl	8005da6 <SPI_EndRxTransaction>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	75fb      	strb	r3, [r7, #23]
 8005956:	e000      	b.n	800595a <HAL_SPI_Receive+0x1f8>
  }

error :
 8005958:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800596a:	7dfb      	ldrb	r3, [r7, #23]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08c      	sub	sp, #48	; 0x30
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005982:	2301      	movs	r3, #1
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_SPI_TransmitReceive+0x26>
 8005996:	2302      	movs	r3, #2
 8005998:	e18a      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x33c>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059a2:	f7fd fc39 	bl	8003218 <HAL_GetTick>
 80059a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80059b8:	887b      	ldrh	r3, [r7, #2]
 80059ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d00f      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x70>
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ca:	d107      	bne.n	80059dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d103      	bne.n	80059dc <HAL_SPI_TransmitReceive+0x68>
 80059d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d003      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059dc:	2302      	movs	r3, #2
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059e2:	e15b      	b.n	8005c9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <HAL_SPI_TransmitReceive+0x82>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_SPI_TransmitReceive+0x82>
 80059f0:	887b      	ldrh	r3, [r7, #2]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d103      	bne.n	80059fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059fc:	e14e      	b.n	8005c9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d003      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2205      	movs	r2, #5
 8005a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	887a      	ldrh	r2, [r7, #2]
 8005a22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	887a      	ldrh	r2, [r7, #2]
 8005a28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	887a      	ldrh	r2, [r7, #2]
 8005a34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	887a      	ldrh	r2, [r7, #2]
 8005a3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d007      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6e:	d178      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x10a>
 8005a78:	8b7b      	ldrh	r3, [r7, #26]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d166      	bne.n	8005b4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	881a      	ldrh	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	1c9a      	adds	r2, r3, #2
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aa2:	e053      	b.n	8005b4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d11b      	bne.n	8005aea <HAL_SPI_TransmitReceive+0x176>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d016      	beq.n	8005aea <HAL_SPI_TransmitReceive+0x176>
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d113      	bne.n	8005aea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	881a      	ldrh	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	1c9a      	adds	r2, r3, #2
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d119      	bne.n	8005b2c <HAL_SPI_TransmitReceive+0x1b8>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d014      	beq.n	8005b2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	b292      	uxth	r2, r2
 8005b0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	1c9a      	adds	r2, r3, #2
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b2c:	f7fd fb74 	bl	8003218 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d807      	bhi.n	8005b4c <HAL_SPI_TransmitReceive+0x1d8>
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b42:	d003      	beq.n	8005b4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b4a:	e0a7      	b.n	8005c9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1a6      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x130>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1a1      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x130>
 8005b60:	e07c      	b.n	8005c5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_SPI_TransmitReceive+0x1fc>
 8005b6a:	8b7b      	ldrh	r3, [r7, #26]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d16b      	bne.n	8005c48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	330c      	adds	r3, #12
 8005b7a:	7812      	ldrb	r2, [r2, #0]
 8005b7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b96:	e057      	b.n	8005c48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d11c      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x26c>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d017      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0x26c>
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d114      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	7812      	ldrb	r2, [r2, #0]
 8005bc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d119      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x2ae>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d014      	beq.n	8005c22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c22:	f7fd faf9 	bl	8003218 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d803      	bhi.n	8005c3a <HAL_SPI_TransmitReceive+0x2c6>
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c38:	d102      	bne.n	8005c40 <HAL_SPI_TransmitReceive+0x2cc>
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d103      	bne.n	8005c48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c46:	e029      	b.n	8005c9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1a2      	bne.n	8005b98 <HAL_SPI_TransmitReceive+0x224>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d19d      	bne.n	8005b98 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f8f2 	bl	8005e4a <SPI_EndRxTxTransaction>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d006      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c78:	e010      	b.n	8005c9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	e000      	b.n	8005c9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3730      	adds	r7, #48	; 0x30
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cc6:	b2db      	uxtb	r3, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr

08005cd2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ce2:	e04c      	b.n	8005d7e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d048      	beq.n	8005d7e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005cec:	f7fd fa94 	bl	8003218 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d902      	bls.n	8005d02 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d13d      	bne.n	8005d7e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d1a:	d111      	bne.n	8005d40 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d24:	d004      	beq.n	8005d30 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2e:	d107      	bne.n	8005d40 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d48:	d10f      	bne.n	8005d6a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e00f      	b.n	8005d9e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4013      	ands	r3, r2
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	bf0c      	ite	eq
 8005d8e:	2301      	moveq	r3, #1
 8005d90:	2300      	movne	r3, #0
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d1a3      	bne.n	8005ce4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b086      	sub	sp, #24
 8005daa:	af02      	add	r7, sp, #8
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dba:	d111      	bne.n	8005de0 <SPI_EndRxTransaction+0x3a>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc4:	d004      	beq.n	8005dd0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dce:	d107      	bne.n	8005de0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dde:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de8:	d117      	bne.n	8005e1a <SPI_EndRxTransaction+0x74>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df2:	d112      	bne.n	8005e1a <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f7ff ff67 	bl	8005cd2 <SPI_WaitFlagStateUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d01a      	beq.n	8005e40 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0e:	f043 0220 	orr.w	r2, r3, #32
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e013      	b.n	8005e42 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2200      	movs	r2, #0
 8005e22:	2180      	movs	r1, #128	; 0x80
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff ff54 	bl	8005cd2 <SPI_WaitFlagStateUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e34:	f043 0220 	orr.w	r2, r3, #32
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e000      	b.n	8005e42 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b086      	sub	sp, #24
 8005e4e:	af02      	add	r7, sp, #8
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2180      	movs	r1, #128	; 0x80
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7ff ff36 	bl	8005cd2 <SPI_WaitFlagStateUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e70:	f043 0220 	orr.w	r2, r3, #32
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e000      	b.n	8005e7e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b086      	sub	sp, #24
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e07f      	b.n	8005f9a <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fc ffe8 	bl	8002e84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eca:	f023 0307 	bic.w	r3, r3, #7
 8005ece:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f000 f898 	bl	8006010 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f08:	f023 0303 	bic.w	r3, r3, #3
 8005f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f26:	f023 030c 	bic.w	r3, r3, #12
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	4313      	orrs	r3, r2
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	011a      	lsls	r2, r3, #4
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	031b      	lsls	r3, r3, #12
 8005f56:	4313      	orrs	r3, r2
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f64:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4313      	orrs	r3, r2
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_TIM_Encoder_Start+0x16>
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d008      	beq.n	8005fc8 <HAL_TIM_Encoder_Start+0x26>
 8005fb6:	e00f      	b.n	8005fd8 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 f887 	bl	80060d4 <TIM_CCxChannelCmd>
      break;
 8005fc6:	e016      	b.n	8005ff6 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	2104      	movs	r1, #4
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 f87f 	bl	80060d4 <TIM_CCxChannelCmd>
      break;
 8005fd6:	e00e      	b.n	8005ff6 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 f877 	bl	80060d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2201      	movs	r2, #1
 8005fec:	2104      	movs	r1, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 f870 	bl	80060d4 <TIM_CCxChannelCmd>
      break;
 8005ff4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0201 	orr.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a29      	ldr	r2, [pc, #164]	; (80060c8 <TIM_Base_SetConfig+0xb8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00b      	beq.n	8006040 <TIM_Base_SetConfig+0x30>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602e:	d007      	beq.n	8006040 <TIM_Base_SetConfig+0x30>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a26      	ldr	r2, [pc, #152]	; (80060cc <TIM_Base_SetConfig+0xbc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_Base_SetConfig+0x30>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <TIM_Base_SetConfig+0xc0>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d108      	bne.n	8006052 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1c      	ldr	r2, [pc, #112]	; (80060c8 <TIM_Base_SetConfig+0xb8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00b      	beq.n	8006072 <TIM_Base_SetConfig+0x62>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006060:	d007      	beq.n	8006072 <TIM_Base_SetConfig+0x62>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a19      	ldr	r2, [pc, #100]	; (80060cc <TIM_Base_SetConfig+0xbc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_Base_SetConfig+0x62>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <TIM_Base_SetConfig+0xc0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d108      	bne.n	8006084 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a07      	ldr	r2, [pc, #28]	; (80060c8 <TIM_Base_SetConfig+0xb8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d103      	bne.n	80060b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	615a      	str	r2, [r3, #20]
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800

080060d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	2201      	movs	r2, #1
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1a      	ldr	r2, [r3, #32]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	43db      	mvns	r3, r3
 80060f6:	401a      	ands	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a1a      	ldr	r2, [r3, #32]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	fa01 f303 	lsl.w	r3, r1, r3
 800610c:	431a      	orrs	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr

0800611c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006130:	2302      	movs	r3, #2
 8006132:	e032      	b.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800616c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	4313      	orrs	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr

080061a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80061a8:	4904      	ldr	r1, [pc, #16]	; (80061bc <MX_FATFS_Init+0x18>)
 80061aa:	4805      	ldr	r0, [pc, #20]	; (80061c0 <MX_FATFS_Init+0x1c>)
 80061ac:	f002 ffbe 	bl	800912c <FATFS_LinkDriver>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	4b03      	ldr	r3, [pc, #12]	; (80061c4 <MX_FATFS_Init+0x20>)
 80061b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80061b8:	bf00      	nop
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20000d3c 	.word	0x20000d3c
 80061c0:	20000014 	.word	0x20000014
 80061c4:	20000d40 	.word	0x20000d40

080061c8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bc80      	pop	{r7}
 80061d4:	4770      	bx	lr

080061d6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	4603      	mov	r3, r0
 80061de:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fb fc4e 	bl	8001a84 <SD_disk_initialize>
 80061e8:	4603      	mov	r3, r0
 80061ea:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	4603      	mov	r3, r0
 80061fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	4618      	mov	r0, r3
 8006202:	f7fb fd29 	bl	8001c58 <SD_disk_status>
 8006206:	4603      	mov	r3, r0
 8006208:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800620a:	4618      	mov	r0, r3
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
 800621e:	4603      	mov	r3, r0
 8006220:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006222:	7bf8      	ldrb	r0, [r7, #15]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	f7fb fd29 	bl	8001c80 <SD_disk_read>
 800622e:	4603      	mov	r3, r0
 8006230:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
 8006246:	4603      	mov	r3, r0
 8006248:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800624a:	7bf8      	ldrb	r0, [r7, #15]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	f7fb fd7f 	bl	8001d54 <SD_disk_write>
 8006256:	4603      	mov	r3, r0
 8006258:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	4603      	mov	r3, r0
 800626a:	603a      	str	r2, [r7, #0]
 800626c:	71fb      	strb	r3, [r7, #7]
 800626e:	460b      	mov	r3, r1
 8006270:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	79b9      	ldrb	r1, [r7, #6]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	4618      	mov	r0, r3
 800627a:	f7fb fdef 	bl	8001e5c <SD_disk_ioctl>
 800627e:	4603      	mov	r3, r0
 8006280:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	4a08      	ldr	r2, [pc, #32]	; (80062bc <disk_status+0x30>)
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	79fa      	ldrb	r2, [r7, #7]
 80062a4:	4905      	ldr	r1, [pc, #20]	; (80062bc <disk_status+0x30>)
 80062a6:	440a      	add	r2, r1
 80062a8:	7a12      	ldrb	r2, [r2, #8]
 80062aa:	4610      	mov	r0, r2
 80062ac:	4798      	blx	r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	200002a4 	.word	0x200002a4

080062c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	4a0d      	ldr	r2, [pc, #52]	; (8006308 <disk_initialize+0x48>)
 80062d2:	5cd3      	ldrb	r3, [r2, r3]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d111      	bne.n	80062fc <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	4a0b      	ldr	r2, [pc, #44]	; (8006308 <disk_initialize+0x48>)
 80062dc:	2101      	movs	r1, #1
 80062de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	4a09      	ldr	r2, [pc, #36]	; (8006308 <disk_initialize+0x48>)
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	79fa      	ldrb	r2, [r7, #7]
 80062ee:	4906      	ldr	r1, [pc, #24]	; (8006308 <disk_initialize+0x48>)
 80062f0:	440a      	add	r2, r1
 80062f2:	7a12      	ldrb	r2, [r2, #8]
 80062f4:	4610      	mov	r0, r2
 80062f6:	4798      	blx	r3
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	200002a4 	.word	0x200002a4

0800630c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4603      	mov	r3, r0
 800631a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <disk_read+0x3c>)
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	689c      	ldr	r4, [r3, #8]
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	4a07      	ldr	r2, [pc, #28]	; (8006348 <disk_read+0x3c>)
 800632c:	4413      	add	r3, r2
 800632e:	7a18      	ldrb	r0, [r3, #8]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	47a0      	blx	r4
 8006338:	4603      	mov	r3, r0
 800633a:	75fb      	strb	r3, [r7, #23]
  return res;
 800633c:	7dfb      	ldrb	r3, [r7, #23]
}
 800633e:	4618      	mov	r0, r3
 8006340:	371c      	adds	r7, #28
 8006342:	46bd      	mov	sp, r7
 8006344:	bd90      	pop	{r4, r7, pc}
 8006346:	bf00      	nop
 8006348:	200002a4 	.word	0x200002a4

0800634c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	607a      	str	r2, [r7, #4]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	4603      	mov	r3, r0
 800635a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	4a0a      	ldr	r2, [pc, #40]	; (8006388 <disk_write+0x3c>)
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	68dc      	ldr	r4, [r3, #12]
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	4a07      	ldr	r2, [pc, #28]	; (8006388 <disk_write+0x3c>)
 800636c:	4413      	add	r3, r2
 800636e:	7a18      	ldrb	r0, [r3, #8]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	47a0      	blx	r4
 8006378:	4603      	mov	r3, r0
 800637a:	75fb      	strb	r3, [r7, #23]
  return res;
 800637c:	7dfb      	ldrb	r3, [r7, #23]
}
 800637e:	4618      	mov	r0, r3
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd90      	pop	{r4, r7, pc}
 8006386:	bf00      	nop
 8006388:	200002a4 	.word	0x200002a4

0800638c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	603a      	str	r2, [r7, #0]
 8006396:	71fb      	strb	r3, [r7, #7]
 8006398:	460b      	mov	r3, r1
 800639a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <disk_ioctl+0x38>)
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	79fa      	ldrb	r2, [r7, #7]
 80063aa:	4906      	ldr	r1, [pc, #24]	; (80063c4 <disk_ioctl+0x38>)
 80063ac:	440a      	add	r2, r1
 80063ae:	7a10      	ldrb	r0, [r2, #8]
 80063b0:	79b9      	ldrb	r1, [r7, #6]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	4798      	blx	r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	200002a4 	.word	0x200002a4

080063c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80063dc:	e007      	b.n	80063ee <mem_cpy+0x26>
		*d++ = *s++;
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	1c53      	adds	r3, r2, #1
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	1c59      	adds	r1, r3, #1
 80063e8:	6179      	str	r1, [r7, #20]
 80063ea:	7812      	ldrb	r2, [r2, #0]
 80063ec:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	1e5a      	subs	r2, r3, #1
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1f2      	bne.n	80063de <mem_cpy+0x16>
}
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr

08006402 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006402:	b480      	push	{r7}
 8006404:	b087      	sub	sp, #28
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006412:	e005      	b.n	8006420 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	617a      	str	r2, [r7, #20]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	1e5a      	subs	r2, r3, #1
 8006424:	607a      	str	r2, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f4      	bne.n	8006414 <mem_set+0x12>
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	bc80      	pop	{r7}
 8006432:	4770      	bx	lr

08006434 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006434:	b480      	push	{r7}
 8006436:	b089      	sub	sp, #36	; 0x24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800644c:	bf00      	nop
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	1e5a      	subs	r2, r3, #1
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00d      	beq.n	8006474 <mem_cmp+0x40>
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	61fa      	str	r2, [r7, #28]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	4619      	mov	r1, r3
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	61ba      	str	r2, [r7, #24]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	1acb      	subs	r3, r1, r3
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0ec      	beq.n	800644e <mem_cmp+0x1a>
	return r;
 8006474:	697b      	ldr	r3, [r7, #20]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3724      	adds	r7, #36	; 0x24
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr

08006480 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800648a:	e002      	b.n	8006492 <chk_chr+0x12>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3301      	adds	r3, #1
 8006490:	607b      	str	r3, [r7, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <chk_chr+0x26>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d1f2      	bne.n	800648c <chk_chr+0xc>
	return *str;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	781b      	ldrb	r3, [r3, #0]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr

080064b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80064be:	2300      	movs	r3, #0
 80064c0:	60bb      	str	r3, [r7, #8]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	e038      	b.n	800653a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80064c8:	492f      	ldr	r1, [pc, #188]	; (8006588 <chk_lock+0xd4>)
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4613      	mov	r3, r2
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d029      	beq.n	8006530 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80064dc:	492a      	ldr	r1, [pc, #168]	; (8006588 <chk_lock+0xd4>)
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4613      	mov	r3, r2
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d11e      	bne.n	8006534 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80064f6:	4924      	ldr	r1, [pc, #144]	; (8006588 <chk_lock+0xd4>)
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4613      	mov	r3, r2
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	3304      	adds	r3, #4
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800650e:	429a      	cmp	r2, r3
 8006510:	d110      	bne.n	8006534 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006512:	491d      	ldr	r1, [pc, #116]	; (8006588 <chk_lock+0xd4>)
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4613      	mov	r3, r2
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	440b      	add	r3, r1
 8006520:	3308      	adds	r3, #8
 8006522:	881a      	ldrh	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800652a:	429a      	cmp	r2, r3
 800652c:	d102      	bne.n	8006534 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800652e:	e007      	b.n	8006540 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8006530:	2301      	movs	r3, #1
 8006532:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d9c3      	bls.n	80064c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d109      	bne.n	800655a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <chk_lock+0x9e>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d101      	bne.n	8006556 <chk_lock+0xa2>
 8006552:	2300      	movs	r3, #0
 8006554:	e013      	b.n	800657e <chk_lock+0xca>
 8006556:	2312      	movs	r3, #18
 8006558:	e011      	b.n	800657e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10b      	bne.n	8006578 <chk_lock+0xc4>
 8006560:	4909      	ldr	r1, [pc, #36]	; (8006588 <chk_lock+0xd4>)
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4613      	mov	r3, r2
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	330a      	adds	r3, #10
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006576:	d101      	bne.n	800657c <chk_lock+0xc8>
 8006578:	2310      	movs	r3, #16
 800657a:	e000      	b.n	800657e <chk_lock+0xca>
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr
 8006588:	2000028c 	.word	0x2000028c

0800658c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006592:	2300      	movs	r3, #0
 8006594:	607b      	str	r3, [r7, #4]
 8006596:	e002      	b.n	800659e <enq_lock+0x12>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3301      	adds	r3, #1
 800659c:	607b      	str	r3, [r7, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d809      	bhi.n	80065b8 <enq_lock+0x2c>
 80065a4:	490a      	ldr	r1, [pc, #40]	; (80065d0 <enq_lock+0x44>)
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	4613      	mov	r3, r2
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	440b      	add	r3, r1
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1ef      	bne.n	8006598 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	bf14      	ite	ne
 80065be:	2301      	movne	r3, #1
 80065c0:	2300      	moveq	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	2000028c 	.word	0x2000028c

080065d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	e02b      	b.n	800663c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80065e4:	4955      	ldr	r1, [pc, #340]	; (800673c <inc_lock+0x168>)
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4613      	mov	r3, r2
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d11b      	bne.n	8006636 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80065fe:	494f      	ldr	r1, [pc, #316]	; (800673c <inc_lock+0x168>)
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4613      	mov	r3, r2
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	3304      	adds	r3, #4
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8006616:	429a      	cmp	r2, r3
 8006618:	d10d      	bne.n	8006636 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800661a:	4948      	ldr	r1, [pc, #288]	; (800673c <inc_lock+0x168>)
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4613      	mov	r3, r2
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	440b      	add	r3, r1
 8006628:	3308      	adds	r3, #8
 800662a:	881a      	ldrh	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8006632:	429a      	cmp	r2, r3
 8006634:	d006      	beq.n	8006644 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d9d0      	bls.n	80065e4 <inc_lock+0x10>
 8006642:	e000      	b.n	8006646 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8006644:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d145      	bne.n	80066d8 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	e002      	b.n	8006658 <inc_lock+0x84>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3301      	adds	r3, #1
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d809      	bhi.n	8006672 <inc_lock+0x9e>
 800665e:	4937      	ldr	r1, [pc, #220]	; (800673c <inc_lock+0x168>)
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4613      	mov	r3, r2
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1ef      	bne.n	8006652 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d101      	bne.n	800667c <inc_lock+0xa8>
 8006678:	2300      	movs	r3, #0
 800667a:	e05a      	b.n	8006732 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8006682:	482e      	ldr	r0, [pc, #184]	; (800673c <inc_lock+0x168>)
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4613      	mov	r3, r2
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4403      	add	r3, r0
 8006690:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8006698:	4828      	ldr	r0, [pc, #160]	; (800673c <inc_lock+0x168>)
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4613      	mov	r3, r2
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4403      	add	r3, r0
 80066a6:	3304      	adds	r3, #4
 80066a8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80066b0:	4922      	ldr	r1, [pc, #136]	; (800673c <inc_lock+0x168>)
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4613      	mov	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	3308      	adds	r3, #8
 80066c0:	4602      	mov	r2, r0
 80066c2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80066c4:	491d      	ldr	r1, [pc, #116]	; (800673c <inc_lock+0x168>)
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4613      	mov	r3, r2
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	330a      	adds	r3, #10
 80066d4:	2200      	movs	r2, #0
 80066d6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00c      	beq.n	80066f8 <inc_lock+0x124>
 80066de:	4917      	ldr	r1, [pc, #92]	; (800673c <inc_lock+0x168>)
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4613      	mov	r3, r2
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	440b      	add	r3, r1
 80066ec:	330a      	adds	r3, #10
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <inc_lock+0x124>
 80066f4:	2300      	movs	r3, #0
 80066f6:	e01c      	b.n	8006732 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <inc_lock+0x142>
 80066fe:	490f      	ldr	r1, [pc, #60]	; (800673c <inc_lock+0x168>)
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4613      	mov	r3, r2
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	440b      	add	r3, r1
 800670c:	330a      	adds	r3, #10
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	b299      	uxth	r1, r3
 8006714:	e001      	b.n	800671a <inc_lock+0x146>
 8006716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800671a:	4808      	ldr	r0, [pc, #32]	; (800673c <inc_lock+0x168>)
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4613      	mov	r3, r2
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4403      	add	r3, r0
 8006728:	330a      	adds	r3, #10
 800672a:	460a      	mov	r2, r1
 800672c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3301      	adds	r3, #1
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr
 800673c:	2000028c 	.word	0x2000028c

08006740 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3b01      	subs	r3, #1
 800674c:	607b      	str	r3, [r7, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d82e      	bhi.n	80067b2 <dec_lock+0x72>
		n = Files[i].ctr;
 8006754:	491b      	ldr	r1, [pc, #108]	; (80067c4 <dec_lock+0x84>)
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	4613      	mov	r3, r2
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	330a      	adds	r3, #10
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006768:	89fb      	ldrh	r3, [r7, #14]
 800676a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800676e:	d101      	bne.n	8006774 <dec_lock+0x34>
 8006770:	2300      	movs	r3, #0
 8006772:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006774:	89fb      	ldrh	r3, [r7, #14]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <dec_lock+0x40>
 800677a:	89fb      	ldrh	r3, [r7, #14]
 800677c:	3b01      	subs	r3, #1
 800677e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006780:	4910      	ldr	r1, [pc, #64]	; (80067c4 <dec_lock+0x84>)
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	4613      	mov	r3, r2
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	330a      	adds	r3, #10
 8006790:	89fa      	ldrh	r2, [r7, #14]
 8006792:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006794:	89fb      	ldrh	r3, [r7, #14]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d108      	bne.n	80067ac <dec_lock+0x6c>
 800679a:	490a      	ldr	r1, [pc, #40]	; (80067c4 <dec_lock+0x84>)
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	737b      	strb	r3, [r7, #13]
 80067b0:	e001      	b.n	80067b6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80067b2:	2302      	movs	r3, #2
 80067b4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80067b6:	7b7b      	ldrb	r3, [r7, #13]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	2000028c 	.word	0x2000028c

080067c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80067d0:	2300      	movs	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	e016      	b.n	8006804 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80067d6:	490f      	ldr	r1, [pc, #60]	; (8006814 <clear_lock+0x4c>)
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4613      	mov	r3, r2
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d108      	bne.n	80067fe <clear_lock+0x36>
 80067ec:	4909      	ldr	r1, [pc, #36]	; (8006814 <clear_lock+0x4c>)
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4613      	mov	r3, r2
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3301      	adds	r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d9e5      	bls.n	80067d6 <clear_lock+0xe>
	}
}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr
 8006814:	2000028c 	.word	0x2000028c

08006818 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800682a:	2b00      	cmp	r3, #0
 800682c:	d038      	beq.n	80068a0 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006834:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	2301      	movs	r3, #1
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	f7ff fd83 	bl	800634c <disk_write>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800684c:	2301      	movs	r3, #1
 800684e:	73fb      	strb	r3, [r7, #15]
 8006850:	e026      	b.n	80068a0 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	1ad2      	subs	r2, r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800686a:	429a      	cmp	r2, r3
 800686c:	d218      	bcs.n	80068a0 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	e010      	b.n	800689a <sync_window+0x82>
					wsect += fs->fsize;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4413      	add	r3, r2
 8006882:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	2301      	movs	r3, #1
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	f7ff fd5c 	bl	800634c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	3b01      	subs	r3, #1
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d8eb      	bhi.n	8006878 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d01b      	beq.n	80068fc <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff ffa7 	bl	8006818 <sync_window>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d113      	bne.n	80068fc <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	2301      	movs	r3, #1
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	f7ff fd14 	bl	800630c <disk_read>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d004      	beq.n	80068f4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80068ea:	f04f 33ff 	mov.w	r3, #4294967295
 80068ee:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff ff82 	bl	8006818 <sync_window>
 8006914:	4603      	mov	r3, r0
 8006916:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f040 809b 	bne.w	8006a56 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006926:	2b03      	cmp	r3, #3
 8006928:	f040 8088 	bne.w	8006a3c <sync_fs+0x136>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006932:	2b01      	cmp	r3, #1
 8006934:	f040 8082 	bne.w	8006a3c <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800693e:	2100      	movs	r1, #0
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff fd5e 	bl	8006402 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2255      	movs	r2, #85	; 0x55
 800694a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	22aa      	movs	r2, #170	; 0xaa
 8006952:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2252      	movs	r2, #82	; 0x52
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2252      	movs	r2, #82	; 0x52
 8006960:	705a      	strb	r2, [r3, #1]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2261      	movs	r2, #97	; 0x61
 8006966:	709a      	strb	r2, [r3, #2]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2241      	movs	r2, #65	; 0x41
 800696c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2272      	movs	r2, #114	; 0x72
 8006972:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2272      	movs	r2, #114	; 0x72
 800697a:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2241      	movs	r2, #65	; 0x41
 8006982:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2261      	movs	r2, #97	; 0x61
 800698a:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006994:	b2da      	uxtb	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	0a1b      	lsrs	r3, r3, #8
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80069b6:	0c1b      	lsrs	r3, r3, #16
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80069c6:	0e1b      	lsrs	r3, r3, #24
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	0a1b      	lsrs	r3, r3, #8
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80069f8:	0c1b      	lsrs	r3, r3, #16
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006a08:	0e1b      	lsrs	r3, r3, #24
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006a2e:	2301      	movs	r3, #1
 8006a30:	f7ff fc8c 	bl	800634c <disk_write>
			fs->fsi_flag = 0;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a42:	2200      	movs	r2, #0
 8006a44:	2100      	movs	r1, #0
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fca0 	bl	800638c <disk_ioctl>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	3b02      	subs	r3, #2
 8006a6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a76:	3b02      	subs	r3, #2
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d301      	bcc.n	8006a82 <clust2sect+0x22>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e00a      	b.n	8006a98 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006a88:	461a      	mov	r2, r3
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	fb03 f202 	mul.w	r2, r3, r2
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006a96:	4413      	add	r3, r2
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr

08006aa2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b086      	sub	sp, #24
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d905      	bls.n	8006abe <get_fat+0x1c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d302      	bcc.n	8006ac4 <get_fat+0x22>
		val = 1;	/* Internal error */
 8006abe:	2301      	movs	r3, #1
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	e0a0      	b.n	8006c06 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d044      	beq.n	8006b5e <get_fat+0xbc>
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d063      	beq.n	8006ba0 <get_fat+0xfe>
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	f040 808a 	bne.w	8006bf2 <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	085b      	lsrs	r3, r3, #1
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	0a5b      	lsrs	r3, r3, #9
 8006af6:	4413      	add	r3, r2
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff fed5 	bl	80068aa <move_window>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d178      	bne.n	8006bf8 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	60fa      	str	r2, [r7, #12]
 8006b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	5cd3      	ldrb	r3, [r2, r3]
 8006b14:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	0a5b      	lsrs	r3, r3, #9
 8006b20:	4413      	add	r3, r2
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fec0 	bl	80068aa <move_window>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d165      	bne.n	8006bfc <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	5cd3      	ldrb	r3, [r2, r3]
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <get_fat+0xb2>
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	091b      	lsrs	r3, r3, #4
 8006b52:	e002      	b.n	8006b5a <get_fat+0xb8>
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b5a:	617b      	str	r3, [r7, #20]
			break;
 8006b5c:	e053      	b.n	8006c06 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	0a1b      	lsrs	r3, r3, #8
 8006b68:	4413      	add	r3, r2
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff fe9c 	bl	80068aa <move_window>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d143      	bne.n	8006c00 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	4413      	add	r3, r2
 8006b84:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	b21a      	sxth	r2, r3
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	b21b      	sxth	r3, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b21b      	sxth	r3, r3
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	617b      	str	r3, [r7, #20]
			break;
 8006b9e:	e032      	b.n	8006c06 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	09db      	lsrs	r3, r3, #7
 8006baa:	4413      	add	r3, r2
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff fe7b 	bl	80068aa <move_window>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d124      	bne.n	8006c04 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	3303      	adds	r3, #3
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	061a      	lsls	r2, r3, #24
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	3302      	adds	r3, #2
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	3201      	adds	r2, #1
 8006bde:	7812      	ldrb	r2, [r2, #0]
 8006be0:	0212      	lsls	r2, r2, #8
 8006be2:	4313      	orrs	r3, r2
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	7812      	ldrb	r2, [r2, #0]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006bee:	617b      	str	r3, [r7, #20]
			break;
 8006bf0:	e009      	b.n	8006c06 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e006      	b.n	8006c06 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bf8:	bf00      	nop
 8006bfa:	e004      	b.n	8006c06 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bfc:	bf00      	nop
 8006bfe:	e002      	b.n	8006c06 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c00:	bf00      	nop
 8006c02:	e000      	b.n	8006c06 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c04:	bf00      	nop
		}
	}

	return val;
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d905      	bls.n	8006c2e <put_fat+0x1e>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d302      	bcc.n	8006c34 <put_fat+0x24>
		res = FR_INT_ERR;
 8006c2e:	2302      	movs	r3, #2
 8006c30:	77fb      	strb	r3, [r7, #31]
 8006c32:	e0f3      	b.n	8006e1c <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d074      	beq.n	8006d28 <put_fat+0x118>
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	f000 8099 	beq.w	8006d76 <put_fat+0x166>
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	f040 80df 	bne.w	8006e08 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4413      	add	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	0a5b      	lsrs	r3, r3, #9
 8006c62:	4413      	add	r3, r2
 8006c64:	4619      	mov	r1, r3
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff fe1f 	bl	80068aa <move_window>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c70:	7ffb      	ldrb	r3, [r7, #31]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f040 80cb 	bne.w	8006e0e <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	617a      	str	r2, [r7, #20]
 8006c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00d      	beq.n	8006cae <put_fat+0x9e>
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	b25b      	sxtb	r3, r3
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	b25a      	sxtb	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	b25b      	sxtb	r3, r3
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	b25b      	sxtb	r3, r3
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	e001      	b.n	8006cb2 <put_fat+0xa2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	0a5b      	lsrs	r3, r3, #9
 8006cc8:	4413      	add	r3, r2
 8006cca:	4619      	mov	r1, r3
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7ff fdec 	bl	80068aa <move_window>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cd6:	7ffb      	ldrb	r3, [r7, #31]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 809a 	bne.w	8006e12 <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <put_fat+0xec>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	091b      	lsrs	r3, r3, #4
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	e00e      	b.n	8006d1a <put_fat+0x10a>
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	b25b      	sxtb	r3, r3
 8006d02:	f023 030f 	bic.w	r3, r3, #15
 8006d06:	b25a      	sxtb	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	0a1b      	lsrs	r3, r3, #8
 8006d0c:	b25b      	sxtb	r3, r3
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	b25b      	sxtb	r3, r3
 8006d14:	4313      	orrs	r3, r2
 8006d16:	b25b      	sxtb	r3, r3
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006d26:	e079      	b.n	8006e1c <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	0a1b      	lsrs	r3, r3, #8
 8006d32:	4413      	add	r3, r2
 8006d34:	4619      	mov	r1, r3
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff fdb7 	bl	80068aa <move_window>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d40:	7ffb      	ldrb	r3, [r7, #31]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d167      	bne.n	8006e16 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	0a1b      	lsrs	r3, r3, #8
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	3301      	adds	r3, #1
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006d74:	e052      	b.n	8006e1c <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	09db      	lsrs	r3, r3, #7
 8006d80:	4413      	add	r3, r2
 8006d82:	4619      	mov	r1, r3
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f7ff fd90 	bl	80068aa <move_window>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d8e:	7ffb      	ldrb	r3, [r7, #31]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d142      	bne.n	8006e1a <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	3303      	adds	r3, #3
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	061a      	lsls	r2, r3, #24
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	3302      	adds	r3, #2
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	041b      	lsls	r3, r3, #16
 8006db2:	4313      	orrs	r3, r2
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	3201      	adds	r2, #1
 8006db8:	7812      	ldrb	r2, [r2, #0]
 8006dba:	0212      	lsls	r2, r2, #8
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	7812      	ldrb	r2, [r2, #0]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	0a1b      	lsrs	r3, r3, #8
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	3301      	adds	r3, #1
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0c1a      	lsrs	r2, r3, #16
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	3302      	adds	r3, #2
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	0e1a      	lsrs	r2, r3, #24
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	3303      	adds	r3, #3
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006e06:	e009      	b.n	8006e1c <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e006      	b.n	8006e1c <put_fat+0x20c>
			if (res != FR_OK) break;
 8006e0e:	bf00      	nop
 8006e10:	e004      	b.n	8006e1c <put_fat+0x20c>
			if (res != FR_OK) break;
 8006e12:	bf00      	nop
 8006e14:	e002      	b.n	8006e1c <put_fat+0x20c>
			if (res != FR_OK) break;
 8006e16:	bf00      	nop
 8006e18:	e000      	b.n	8006e1c <put_fat+0x20c>
			if (res != FR_OK) break;
 8006e1a:	bf00      	nop
		}
	}

	return res;
 8006e1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3720      	adds	r7, #32
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d905      	bls.n	8006e42 <remove_chain+0x1c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d302      	bcc.n	8006e48 <remove_chain+0x22>
		res = FR_INT_ERR;
 8006e42:	2302      	movs	r3, #2
 8006e44:	73fb      	strb	r3, [r7, #15]
 8006e46:	e043      	b.n	8006ed0 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006e4c:	e036      	b.n	8006ebc <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7ff fe26 	bl	8006aa2 <get_fat>
 8006e56:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d035      	beq.n	8006eca <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d102      	bne.n	8006e6a <remove_chain+0x44>
 8006e64:	2302      	movs	r3, #2
 8006e66:	73fb      	strb	r3, [r7, #15]
 8006e68:	e032      	b.n	8006ed0 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e70:	d102      	bne.n	8006e78 <remove_chain+0x52>
 8006e72:	2301      	movs	r3, #1
 8006e74:	73fb      	strb	r3, [r7, #15]
 8006e76:	e02b      	b.n	8006ed0 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006e78:	2200      	movs	r2, #0
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff fec7 	bl	8006c10 <put_fat>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d120      	bne.n	8006ece <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e96:	d00f      	beq.n	8006eb8 <remove_chain+0x92>
				fs->free_clust++;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d3c2      	bcc.n	8006e4e <remove_chain+0x28>
 8006ec8:	e002      	b.n	8006ed0 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8006eca:	bf00      	nop
 8006ecc:	e000      	b.n	8006ed0 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8006ece:	bf00      	nop
		}
	}

	return res;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b086      	sub	sp, #24
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10f      	bne.n	8006f0a <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006ef0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <create_chain+0x2a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d31c      	bcc.n	8006f3e <create_chain+0x64>
 8006f04:	2301      	movs	r3, #1
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	e019      	b.n	8006f3e <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff fdc8 	bl	8006aa2 <get_fat>
 8006f12:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d801      	bhi.n	8006f1e <create_chain+0x44>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e076      	b.n	800700c <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f24:	d101      	bne.n	8006f2a <create_chain+0x50>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	e070      	b.n	800700c <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d201      	bcs.n	8006f3a <create_chain+0x60>
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	e068      	b.n	800700c <create_chain+0x132>
		scl = clst;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	3301      	adds	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d307      	bcc.n	8006f64 <create_chain+0x8a>
			ncl = 2;
 8006f54:	2302      	movs	r3, #2
 8006f56:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d901      	bls.n	8006f64 <create_chain+0x8a>
 8006f60:	2300      	movs	r3, #0
 8006f62:	e053      	b.n	800700c <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006f64:	6979      	ldr	r1, [r7, #20]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff fd9b 	bl	8006aa2 <get_fat>
 8006f6c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00e      	beq.n	8006f92 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d002      	beq.n	8006f82 <create_chain+0xa8>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <create_chain+0xac>
			return cs;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	e042      	b.n	800700c <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d1d9      	bne.n	8006f42 <create_chain+0x68>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e03c      	b.n	800700c <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8006f92:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006f94:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006f98:	6979      	ldr	r1, [r7, #20]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff fe38 	bl	8006c10 <put_fat>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <create_chain+0xe4>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d006      	beq.n	8006fbe <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff fe2b 	bl	8006c10 <put_fat>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d11a      	bne.n	8006ffa <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d018      	beq.n	800700a <create_chain+0x130>
			fs->free_clust--;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006fde:	1e5a      	subs	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006fec:	f043 0301 	orr.w	r3, r3, #1
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8006ff8:	e007      	b.n	800700a <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d102      	bne.n	8007006 <create_chain+0x12c>
 8007000:	f04f 33ff 	mov.w	r3, #4294967295
 8007004:	e000      	b.n	8007008 <create_chain+0x12e>
 8007006:	2301      	movs	r3, #1
 8007008:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800700a:	697b      	ldr	r3, [r7, #20]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007024:	3304      	adds	r3, #4
 8007026:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	0a5b      	lsrs	r3, r3, #9
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007032:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007036:	fbb3 f3f2 	udiv	r3, r3, r2
 800703a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1d1a      	adds	r2, r3, #4
 8007040:	613a      	str	r2, [r7, #16]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <clmt_clust+0x3c>
 800704c:	2300      	movs	r3, #0
 800704e:	e010      	b.n	8007072 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	429a      	cmp	r2, r3
 8007056:	d307      	bcc.n	8007068 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	3304      	adds	r3, #4
 8007064:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007066:	e7e9      	b.n	800703c <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8007068:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	4413      	add	r3, r2
}
 8007072:	4618      	mov	r0, r3
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	bc80      	pop	{r7}
 800707a:	4770      	bx	lr

0800707c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	b29a      	uxth	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007096:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d007      	beq.n	80070ae <dir_sdi+0x32>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d301      	bcc.n	80070b2 <dir_sdi+0x36>
		return FR_INT_ERR;
 80070ae:	2302      	movs	r3, #2
 80070b0:	e074      	b.n	800719c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10c      	bne.n	80070d2 <dir_sdi+0x56>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d105      	bne.n	80070d2 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070cc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80070d0:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d111      	bne.n	80070fc <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070de:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80070e2:	461a      	mov	r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d301      	bcc.n	80070ee <dir_sdi+0x72>
			return FR_INT_ERR;
 80070ea:	2302      	movs	r3, #2
 80070ec:	e056      	b.n	800719c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070f4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	e032      	b.n	8007162 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007102:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800710a:	e01e      	b.n	800714a <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007112:	6979      	ldr	r1, [r7, #20]
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff fcc4 	bl	8006aa2 <get_fat>
 800711a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007122:	d101      	bne.n	8007128 <dir_sdi+0xac>
 8007124:	2301      	movs	r3, #1
 8007126:	e039      	b.n	800719c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d907      	bls.n	800713e <dir_sdi+0xc2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007134:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	429a      	cmp	r2, r3
 800713c:	d301      	bcc.n	8007142 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800713e:	2302      	movs	r3, #2
 8007140:	e02c      	b.n	800719c <dir_sdi+0x120>
			idx -= ic;
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	429a      	cmp	r2, r3
 8007150:	d2dc      	bcs.n	800710c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007158:	6979      	ldr	r1, [r7, #20]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fc80 	bl	8006a60 <clust2sect>
 8007160:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <dir_sdi+0xf8>
 8007170:	2302      	movs	r3, #2
 8007172:	e013      	b.n	800719c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	091a      	lsrs	r2, r3, #4
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	441a      	add	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007188:	461a      	mov	r2, r3
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	f003 030f 	and.w	r3, r3, #15
 8007190:	015b      	lsls	r3, r3, #5
 8007192:	441a      	add	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80071a4:	b590      	push	{r4, r7, lr}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80071b4:	3301      	adds	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <dir_next+0x26>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <dir_next+0x2a>
		return FR_NO_FILE;
 80071ca:	2304      	movs	r3, #4
 80071cc:	e0dd      	b.n	800738a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f040 80c6 	bne.w	8007366 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071f8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80071fc:	461a      	mov	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4293      	cmp	r3, r2
 8007202:	f0c0 80b0 	bcc.w	8007366 <dir_next+0x1c2>
				return FR_NO_FILE;
 8007206:	2304      	movs	r3, #4
 8007208:	e0bf      	b.n	800738a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	091b      	lsrs	r3, r3, #4
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007214:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007218:	3a01      	subs	r2, #1
 800721a:	4013      	ands	r3, r2
 800721c:	2b00      	cmp	r3, #0
 800721e:	f040 80a2 	bne.w	8007366 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800722e:	4619      	mov	r1, r3
 8007230:	4610      	mov	r0, r2
 8007232:	f7ff fc36 	bl	8006aa2 <get_fat>
 8007236:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d801      	bhi.n	8007242 <dir_next+0x9e>
 800723e:	2302      	movs	r3, #2
 8007240:	e0a3      	b.n	800738a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d101      	bne.n	800724e <dir_next+0xaa>
 800724a:	2301      	movs	r3, #1
 800724c:	e09d      	b.n	800738a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007254:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	429a      	cmp	r2, r3
 800725c:	d374      	bcc.n	8007348 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <dir_next+0xc4>
 8007264:	2304      	movs	r3, #4
 8007266:	e090      	b.n	800738a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007274:	4619      	mov	r1, r3
 8007276:	4610      	mov	r0, r2
 8007278:	f7ff fe2f 	bl	8006eda <create_chain>
 800727c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <dir_next+0xe4>
 8007284:	2307      	movs	r3, #7
 8007286:	e080      	b.n	800738a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <dir_next+0xee>
 800728e:	2302      	movs	r3, #2
 8007290:	e07b      	b.n	800738a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d101      	bne.n	800729e <dir_next+0xfa>
 800729a:	2301      	movs	r3, #1
 800729c:	e075      	b.n	800738a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff fab7 	bl	8006818 <sync_window>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <dir_next+0x110>
 80072b0:	2301      	movs	r3, #1
 80072b2:	e06a      	b.n	800738a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072be:	2100      	movs	r1, #0
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff f89e 	bl	8006402 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80072d2:	6979      	ldr	r1, [r7, #20]
 80072d4:	4610      	mov	r0, r2
 80072d6:	f7ff fbc3 	bl	8006a60 <clust2sect>
 80072da:	4603      	mov	r3, r0
 80072dc:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80072e0:	2300      	movs	r3, #0
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	e01b      	b.n	800731e <dir_next+0x17a>
						dp->fs->wflag = 1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff fa8d 	bl	8006818 <sync_window>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <dir_next+0x164>
 8007304:	2301      	movs	r3, #1
 8007306:	e040      	b.n	800738a <dir_next+0x1e6>
						dp->fs->winsect++;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800730e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007312:	3201      	adds	r2, #1
 8007314:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	3301      	adds	r3, #1
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007324:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007328:	461a      	mov	r2, r3
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	4293      	cmp	r3, r2
 800732e:	d3da      	bcc.n	80072e6 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007336:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	1a8a      	subs	r2, r1, r2
 8007344:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007356:	6979      	ldr	r1, [r7, #20]
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff fb81 	bl	8006a60 <clust2sect>
 800735e:	4602      	mov	r2, r0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	b29a      	uxth	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007376:	461a      	mov	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	015b      	lsls	r3, r3, #5
 8007380:	441a      	add	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	bd90      	pop	{r4, r7, pc}

08007392 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800739c:	2100      	movs	r1, #0
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff fe6c 	bl	800707c <dir_sdi>
 80073a4:	4603      	mov	r3, r0
 80073a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d131      	bne.n	8007412 <dir_alloc+0x80>
		n = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80073be:	4619      	mov	r1, r3
 80073c0:	4610      	mov	r0, r2
 80073c2:	f7ff fa72 	bl	80068aa <move_window>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d11f      	bne.n	8007410 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2be5      	cmp	r3, #229	; 0xe5
 80073da:	d005      	beq.n	80073e8 <dir_alloc+0x56>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d107      	bne.n	80073f8 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60bb      	str	r3, [r7, #8]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d102      	bne.n	80073fc <dir_alloc+0x6a>
 80073f6:	e00c      	b.n	8007412 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80073f8:	2300      	movs	r3, #0
 80073fa:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80073fc:	2101      	movs	r1, #1
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff fed0 	bl	80071a4 <dir_next>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0d1      	beq.n	80073b2 <dir_alloc+0x20>
 800740e:	e000      	b.n	8007412 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8007410:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	2b04      	cmp	r3, #4
 8007416:	d101      	bne.n	800741c <dir_alloc+0x8a>
 8007418:	2307      	movs	r3, #7
 800741a:	73fb      	strb	r3, [r7, #15]
	return res;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	331b      	adds	r3, #27
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	b21a      	sxth	r2, r3
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	331a      	adds	r3, #26
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	b21b      	sxth	r3, r3
 8007442:	4313      	orrs	r3, r2
 8007444:	b21b      	sxth	r3, r3
 8007446:	b29b      	uxth	r3, r3
 8007448:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007450:	2b03      	cmp	r3, #3
 8007452:	d10f      	bne.n	8007474 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	3315      	adds	r3, #21
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	b21a      	sxth	r2, r3
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	3314      	adds	r3, #20
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b21b      	sxth	r3, r3
 8007466:	4313      	orrs	r3, r2
 8007468:	b21b      	sxth	r3, r3
 800746a:	b29b      	uxth	r3, r3
 800746c:	041b      	lsls	r3, r3, #16
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]

	return cl;
 8007474:	68fb      	ldr	r3, [r7, #12]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr

08007480 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	331a      	adds	r3, #26
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	b29b      	uxth	r3, r3
 8007498:	0a1b      	lsrs	r3, r3, #8
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	331b      	adds	r3, #27
 80074a0:	b2d2      	uxtb	r2, r2
 80074a2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	0c1a      	lsrs	r2, r3, #16
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3314      	adds	r3, #20
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	0c1b      	lsrs	r3, r3, #16
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	0a1b      	lsrs	r3, r3, #8
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3315      	adds	r3, #21
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bc80      	pop	{r7}
 80074ca:	4770      	bx	lr

080074cc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80074d4:	2100      	movs	r1, #0
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff fdd0 	bl	800707c <dir_sdi>
 80074dc:	4603      	mov	r3, r0
 80074de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <dir_find+0x1e>
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	e03b      	b.n	8007562 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f7ff f9d6 	bl	80068aa <move_window>
 80074fe:	4603      	mov	r3, r0
 8007500:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d128      	bne.n	800755a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800750e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d102      	bne.n	8007522 <dir_find+0x56>
 800751c:	2304      	movs	r3, #4
 800751e:	75fb      	strb	r3, [r7, #23]
 8007520:	e01e      	b.n	8007560 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	330b      	adds	r3, #11
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <dir_find+0x7a>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007536:	220b      	movs	r2, #11
 8007538:	4619      	mov	r1, r3
 800753a:	6938      	ldr	r0, [r7, #16]
 800753c:	f7fe ff7a 	bl	8006434 <mem_cmp>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8007546:	2100      	movs	r1, #0
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7ff fe2b 	bl	80071a4 <dir_next>
 800754e:	4603      	mov	r3, r0
 8007550:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0c8      	beq.n	80074ea <dir_find+0x1e>
 8007558:	e002      	b.n	8007560 <dir_find+0x94>
		if (res != FR_OK) break;
 800755a:	bf00      	nop
 800755c:	e000      	b.n	8007560 <dir_find+0x94>
			break;
 800755e:	bf00      	nop

	return res;
 8007560:	7dfb      	ldrb	r3, [r7, #23]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007572:	2101      	movs	r1, #1
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff ff0c 	bl	8007392 <dir_alloc>
 800757a:	4603      	mov	r3, r0
 800757c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d126      	bne.n	80075d2 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f7ff f989 	bl	80068aa <move_window>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d117      	bne.n	80075d2 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075a8:	2220      	movs	r2, #32
 80075aa:	2100      	movs	r1, #0
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe ff28 	bl	8006402 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80075be:	220b      	movs	r2, #11
 80075c0:	4619      	mov	r1, r3
 80075c2:	f7fe ff01 	bl	80063c8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e002      	b.n	80075f4 <create_name+0x18>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3301      	adds	r3, #1
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b2f      	cmp	r3, #47	; 0x2f
 80075fa:	d0f8      	beq.n	80075ee <create_name+0x12>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b5c      	cmp	r3, #92	; 0x5c
 8007602:	d0f4      	beq.n	80075ee <create_name+0x12>
	sfn = dp->fn;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800760a:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800760c:	220b      	movs	r2, #11
 800760e:	2120      	movs	r1, #32
 8007610:	68b8      	ldr	r0, [r7, #8]
 8007612:	f7fe fef6 	bl	8006402 <mem_set>
	si = i = b = 0; ni = 8;
 8007616:	2300      	movs	r3, #0
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	2300      	movs	r3, #0
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	617b      	str	r3, [r7, #20]
 8007622:	2308      	movs	r3, #8
 8007624:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	617a      	str	r2, [r7, #20]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007634:	7fbb      	ldrb	r3, [r7, #30]
 8007636:	2b20      	cmp	r3, #32
 8007638:	d953      	bls.n	80076e2 <create_name+0x106>
 800763a:	7fbb      	ldrb	r3, [r7, #30]
 800763c:	2b2f      	cmp	r3, #47	; 0x2f
 800763e:	d050      	beq.n	80076e2 <create_name+0x106>
 8007640:	7fbb      	ldrb	r3, [r7, #30]
 8007642:	2b5c      	cmp	r3, #92	; 0x5c
 8007644:	d04d      	beq.n	80076e2 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8007646:	7fbb      	ldrb	r3, [r7, #30]
 8007648:	2b2e      	cmp	r3, #46	; 0x2e
 800764a:	d003      	beq.n	8007654 <create_name+0x78>
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	429a      	cmp	r2, r3
 8007652:	d30f      	bcc.n	8007674 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	2b08      	cmp	r3, #8
 8007658:	d102      	bne.n	8007660 <create_name+0x84>
 800765a:	7fbb      	ldrb	r3, [r7, #30]
 800765c:	2b2e      	cmp	r3, #46	; 0x2e
 800765e:	d001      	beq.n	8007664 <create_name+0x88>
 8007660:	2306      	movs	r3, #6
 8007662:	e073      	b.n	800774c <create_name+0x170>
			i = 8; ni = 11;
 8007664:	2308      	movs	r3, #8
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	230b      	movs	r3, #11
 800766a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800766c:	7ffb      	ldrb	r3, [r7, #31]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	77fb      	strb	r3, [r7, #31]
 8007672:	e035      	b.n	80076e0 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007674:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007678:	2b00      	cmp	r3, #0
 800767a:	da08      	bge.n	800768e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800767c:	7ffb      	ldrb	r3, [r7, #31]
 800767e:	f043 0303 	orr.w	r3, r3, #3
 8007682:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007684:	7fbb      	ldrb	r3, [r7, #30]
 8007686:	3b80      	subs	r3, #128	; 0x80
 8007688:	4a32      	ldr	r2, [pc, #200]	; (8007754 <create_name+0x178>)
 800768a:	5cd3      	ldrb	r3, [r2, r3]
 800768c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800768e:	7fbb      	ldrb	r3, [r7, #30]
 8007690:	4619      	mov	r1, r3
 8007692:	4831      	ldr	r0, [pc, #196]	; (8007758 <create_name+0x17c>)
 8007694:	f7fe fef4 	bl	8006480 <chk_chr>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <create_name+0xc6>
				return FR_INVALID_NAME;
 800769e:	2306      	movs	r3, #6
 80076a0:	e054      	b.n	800774c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80076a2:	7fbb      	ldrb	r3, [r7, #30]
 80076a4:	2b40      	cmp	r3, #64	; 0x40
 80076a6:	d907      	bls.n	80076b8 <create_name+0xdc>
 80076a8:	7fbb      	ldrb	r3, [r7, #30]
 80076aa:	2b5a      	cmp	r3, #90	; 0x5a
 80076ac:	d804      	bhi.n	80076b8 <create_name+0xdc>
				b |= 2;
 80076ae:	7ffb      	ldrb	r3, [r7, #31]
 80076b0:	f043 0302 	orr.w	r3, r3, #2
 80076b4:	77fb      	strb	r3, [r7, #31]
 80076b6:	e00c      	b.n	80076d2 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80076b8:	7fbb      	ldrb	r3, [r7, #30]
 80076ba:	2b60      	cmp	r3, #96	; 0x60
 80076bc:	d909      	bls.n	80076d2 <create_name+0xf6>
 80076be:	7fbb      	ldrb	r3, [r7, #30]
 80076c0:	2b7a      	cmp	r3, #122	; 0x7a
 80076c2:	d806      	bhi.n	80076d2 <create_name+0xf6>
					b |= 1; c -= 0x20;
 80076c4:	7ffb      	ldrb	r3, [r7, #31]
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	7fbb      	ldrb	r3, [r7, #30]
 80076ce:	3b20      	subs	r3, #32
 80076d0:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	613a      	str	r2, [r7, #16]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	4413      	add	r3, r2
 80076dc:	7fba      	ldrb	r2, [r7, #30]
 80076de:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80076e0:	e7a1      	b.n	8007626 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	441a      	add	r2, r3
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80076ec:	7fbb      	ldrb	r3, [r7, #30]
 80076ee:	2b20      	cmp	r3, #32
 80076f0:	d801      	bhi.n	80076f6 <create_name+0x11a>
 80076f2:	2304      	movs	r3, #4
 80076f4:	e000      	b.n	80076f8 <create_name+0x11c>
 80076f6:	2300      	movs	r3, #0
 80076f8:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <create_name+0x128>
 8007700:	2306      	movs	r3, #6
 8007702:	e023      	b.n	800774c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2be5      	cmp	r3, #229	; 0xe5
 800770a:	d102      	bne.n	8007712 <create_name+0x136>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2205      	movs	r2, #5
 8007710:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2b08      	cmp	r3, #8
 8007716:	d102      	bne.n	800771e <create_name+0x142>
 8007718:	7ffb      	ldrb	r3, [r7, #31]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800771e:	7ffb      	ldrb	r3, [r7, #31]
 8007720:	f003 0303 	and.w	r3, r3, #3
 8007724:	2b01      	cmp	r3, #1
 8007726:	d103      	bne.n	8007730 <create_name+0x154>
 8007728:	7fbb      	ldrb	r3, [r7, #30]
 800772a:	f043 0310 	orr.w	r3, r3, #16
 800772e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007730:	7ffb      	ldrb	r3, [r7, #31]
 8007732:	f003 030c 	and.w	r3, r3, #12
 8007736:	2b04      	cmp	r3, #4
 8007738:	d103      	bne.n	8007742 <create_name+0x166>
 800773a:	7fbb      	ldrb	r3, [r7, #30]
 800773c:	f043 0308 	orr.w	r3, r3, #8
 8007740:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	330b      	adds	r3, #11
 8007746:	7fba      	ldrb	r2, [r7, #30]
 8007748:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800774a:	2300      	movs	r3, #0
#endif
}
 800774c:	4618      	mov	r0, r3
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	0800d5bc 	.word	0x0800d5bc
 8007758:	0800d554 	.word	0x0800d554

0800775c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b2f      	cmp	r3, #47	; 0x2f
 800776c:	d003      	beq.n	8007776 <follow_path+0x1a>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b5c      	cmp	r3, #92	; 0x5c
 8007774:	d102      	bne.n	800777c <follow_path+0x20>
		path++;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	3301      	adds	r3, #1
 800777a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b1f      	cmp	r3, #31
 800778a:	d80a      	bhi.n	80077a2 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800778c:	2100      	movs	r1, #0
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff fc74 	bl	800707c <dir_sdi>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80077a0:	e045      	b.n	800782e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077a2:	463b      	mov	r3, r7
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff ff18 	bl	80075dc <create_name>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d136      	bne.n	8007824 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff fe88 	bl	80074cc <dir_find>
 80077bc:	4603      	mov	r3, r0
 80077be:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80077c6:	7adb      	ldrb	r3, [r3, #11]
 80077c8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d128      	bne.n	8007828 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d123      	bne.n	8007828 <follow_path+0xcc>
 80077e0:	2305      	movs	r3, #5
 80077e2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80077e4:	e020      	b.n	8007828 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d11d      	bne.n	800782c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077f6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	330b      	adds	r3, #11
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	f003 0310 	and.w	r3, r3, #16
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8007806:	2305      	movs	r3, #5
 8007808:	73fb      	strb	r3, [r7, #15]
 800780a:	e010      	b.n	800782e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff fe06 	bl	8007426 <ld_clust>
 800781a:	4602      	mov	r2, r0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007822:	e7be      	b.n	80077a2 <follow_path+0x46>
			if (res != FR_OK) break;
 8007824:	bf00      	nop
 8007826:	e002      	b.n	800782e <follow_path+0xd2>
				break;
 8007828:	bf00      	nop
 800782a:	e000      	b.n	800782e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800782c:	bf00      	nop
		}
	}

	return res;
 800782e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007840:	f04f 33ff 	mov.w	r3, #4294967295
 8007844:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d031      	beq.n	80078b2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	e002      	b.n	800785c <get_ldnumber+0x24>
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	3301      	adds	r3, #1
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b20      	cmp	r3, #32
 8007862:	d903      	bls.n	800786c <get_ldnumber+0x34>
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b3a      	cmp	r3, #58	; 0x3a
 800786a:	d1f4      	bne.n	8007856 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b3a      	cmp	r3, #58	; 0x3a
 8007872:	d11c      	bne.n	80078ae <get_ldnumber+0x76>
			tp = *path;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	60fa      	str	r2, [r7, #12]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	3b30      	subs	r3, #48	; 0x30
 8007884:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b09      	cmp	r3, #9
 800788a:	d80e      	bhi.n	80078aa <get_ldnumber+0x72>
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	429a      	cmp	r2, r3
 8007892:	d10a      	bne.n	80078aa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d107      	bne.n	80078aa <get_ldnumber+0x72>
					vol = (int)i;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	3301      	adds	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	e002      	b.n	80078b4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80078ae:	2300      	movs	r3, #0
 80078b0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80078b2:	693b      	ldr	r3, [r7, #16]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr
	...

080078c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f04f 32ff 	mov.w	r2, #4294967295
 80078d8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fe ffe3 	bl	80068aa <move_window>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <check_fs+0x2e>
		return 3;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e04a      	b.n	8007984 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078f4:	3301      	adds	r3, #1
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	b21a      	sxth	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007902:	b21b      	sxth	r3, r3
 8007904:	4313      	orrs	r3, r2
 8007906:	b21b      	sxth	r3, r3
 8007908:	4a20      	ldr	r2, [pc, #128]	; (800798c <check_fs+0xcc>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d001      	beq.n	8007912 <check_fs+0x52>
		return 2;
 800790e:	2302      	movs	r3, #2
 8007910:	e038      	b.n	8007984 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3336      	adds	r3, #54	; 0x36
 8007916:	3303      	adds	r3, #3
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	061a      	lsls	r2, r3, #24
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3336      	adds	r3, #54	; 0x36
 8007920:	3302      	adds	r3, #2
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	041b      	lsls	r3, r3, #16
 8007926:	4313      	orrs	r3, r2
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	3236      	adds	r2, #54	; 0x36
 800792c:	3201      	adds	r2, #1
 800792e:	7812      	ldrb	r2, [r2, #0]
 8007930:	0212      	lsls	r2, r2, #8
 8007932:	4313      	orrs	r3, r2
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800793a:	4313      	orrs	r3, r2
 800793c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007940:	4a13      	ldr	r2, [pc, #76]	; (8007990 <check_fs+0xd0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d101      	bne.n	800794a <check_fs+0x8a>
		return 0;
 8007946:	2300      	movs	r3, #0
 8007948:	e01c      	b.n	8007984 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	3352      	adds	r3, #82	; 0x52
 800794e:	3303      	adds	r3, #3
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	061a      	lsls	r2, r3, #24
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3352      	adds	r3, #82	; 0x52
 8007958:	3302      	adds	r3, #2
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	041b      	lsls	r3, r3, #16
 800795e:	4313      	orrs	r3, r2
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	3252      	adds	r2, #82	; 0x52
 8007964:	3201      	adds	r2, #1
 8007966:	7812      	ldrb	r2, [r2, #0]
 8007968:	0212      	lsls	r2, r2, #8
 800796a:	4313      	orrs	r3, r2
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007972:	4313      	orrs	r3, r2
 8007974:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007978:	4a05      	ldr	r2, [pc, #20]	; (8007990 <check_fs+0xd0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d101      	bne.n	8007982 <check_fs+0xc2>
		return 0;
 800797e:	2300      	movs	r3, #0
 8007980:	e000      	b.n	8007984 <check_fs+0xc4>

	return 1;
 8007982:	2301      	movs	r3, #1
}
 8007984:	4618      	mov	r0, r3
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	ffffaa55 	.word	0xffffaa55
 8007990:	00544146 	.word	0x00544146

08007994 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b096      	sub	sp, #88	; 0x58
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80079a8:	68b8      	ldr	r0, [r7, #8]
 80079aa:	f7ff ff45 	bl	8007838 <get_ldnumber>
 80079ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80079b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	da01      	bge.n	80079ba <find_volume+0x26>
 80079b6:	230b      	movs	r3, #11
 80079b8:	e2aa      	b.n	8007f10 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80079ba:	4a9e      	ldr	r2, [pc, #632]	; (8007c34 <find_volume+0x2a0>)
 80079bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <find_volume+0x3a>
 80079ca:	230c      	movs	r3, #12
 80079cc:	e2a0      	b.n	8007f10 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079d2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d01b      	beq.n	8007a16 <find_volume+0x82>
		stat = disk_status(fs->drv);
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe fc51 	bl	800628c <disk_status>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80079f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10c      	bne.n	8007a16 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d007      	beq.n	8007a12 <find_volume+0x7e>
 8007a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8007a0e:	230a      	movs	r3, #10
 8007a10:	e27e      	b.n	8007f10 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8007a12:	2300      	movs	r3, #0
 8007a14:	e27c      	b.n	8007f10 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fc46 	bl	80062c0 <disk_initialize>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007a3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a46:	2303      	movs	r3, #3
 8007a48:	e262      	b.n	8007f10 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d007      	beq.n	8007a60 <find_volume+0xcc>
 8007a50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007a5c:	230a      	movs	r3, #10
 8007a5e:	e257      	b.n	8007f10 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007a64:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a68:	f7ff ff2a 	bl	80078c0 <check_fs>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007a72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d155      	bne.n	8007b26 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a7e:	e029      	b.n	8007ad4 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007a8a:	4413      	add	r3, r2
 8007a8c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	3304      	adds	r3, #4
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d012      	beq.n	8007abe <find_volume+0x12a>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	330b      	adds	r3, #11
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	061a      	lsls	r2, r3, #24
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	330a      	adds	r3, #10
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aac:	3209      	adds	r2, #9
 8007aae:	7812      	ldrb	r2, [r2, #0]
 8007ab0:	0212      	lsls	r2, r2, #8
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab6:	3208      	adds	r2, #8
 8007ab8:	7812      	ldrb	r2, [r2, #0]
 8007aba:	431a      	orrs	r2, r3
 8007abc:	e000      	b.n	8007ac0 <find_volume+0x12c>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007ac8:	440b      	add	r3, r1
 8007aca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d9d2      	bls.n	8007a80 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007ada:	2300      	movs	r3, #0
 8007adc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <find_volume+0x156>
 8007ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007af2:	4413      	add	r3, r2
 8007af4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007af8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d005      	beq.n	8007b0c <find_volume+0x178>
 8007b00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b04:	f7ff fedc 	bl	80078c0 <check_fs>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	e000      	b.n	8007b0e <find_volume+0x17a>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007b12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <find_volume+0x192>
 8007b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	643b      	str	r3, [r7, #64]	; 0x40
 8007b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d9e1      	bls.n	8007aea <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007b26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d101      	bne.n	8007b32 <find_volume+0x19e>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e1ee      	b.n	8007f10 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007b32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <find_volume+0x1aa>
 8007b3a:	230d      	movs	r3, #13
 8007b3c:	e1e8      	b.n	8007f10 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	7b1b      	ldrb	r3, [r3, #12]
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	b21a      	sxth	r2, r3
 8007b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b48:	7adb      	ldrb	r3, [r3, #11]
 8007b4a:	b21b      	sxth	r3, r3
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	b21b      	sxth	r3, r3
 8007b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b54:	d001      	beq.n	8007b5a <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8007b56:	230d      	movs	r3, #13
 8007b58:	e1da      	b.n	8007f10 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	7ddb      	ldrb	r3, [r3, #23]
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	b21a      	sxth	r2, r3
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	7d9b      	ldrb	r3, [r3, #22]
 8007b66:	b21b      	sxth	r3, r3
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	b21b      	sxth	r3, r3
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d112      	bne.n	8007b9c <find_volume+0x208>
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007b7c:	061a      	lsls	r2, r3, #24
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007b84:	041b      	lsls	r3, r3, #16
 8007b86:	4313      	orrs	r3, r2
 8007b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b8a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007b8e:	0212      	lsls	r2, r2, #8
 8007b90:	4313      	orrs	r3, r2
 8007b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b94:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ba0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba6:	7c1a      	ldrb	r2, [r3, #16]
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d006      	beq.n	8007bc6 <find_volume+0x232>
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d001      	beq.n	8007bc6 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8007bc2:	230d      	movs	r3, #13
 8007bc4:	e1a4      	b.n	8007f10 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007bcc:	461a      	mov	r2, r3
 8007bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd0:	fb02 f303 	mul.w	r3, r2, r3
 8007bd4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	7b5a      	ldrb	r2, [r3, #13]
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <find_volume+0x26c>
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8007c00:	230d      	movs	r3, #13
 8007c02:	e185      	b.n	8007f10 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	7c9b      	ldrb	r3, [r3, #18]
 8007c08:	021b      	lsls	r3, r3, #8
 8007c0a:	b21a      	sxth	r2, r3
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	7c5b      	ldrb	r3, [r3, #17]
 8007c10:	b21b      	sxth	r3, r3
 8007c12:	4313      	orrs	r3, r2
 8007c14:	b21b      	sxth	r3, r3
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d004      	beq.n	8007c38 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8007c2e:	230d      	movs	r3, #13
 8007c30:	e16e      	b.n	8007f10 <find_volume+0x57c>
 8007c32:	bf00      	nop
 8007c34:	20000284 	.word	0x20000284

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3a:	7d1b      	ldrb	r3, [r3, #20]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	b21a      	sxth	r2, r3
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	7cdb      	ldrb	r3, [r3, #19]
 8007c44:	b21b      	sxth	r3, r3
 8007c46:	4313      	orrs	r3, r2
 8007c48:	b21b      	sxth	r3, r3
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d112      	bne.n	8007c7a <find_volume+0x2e6>
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007c5a:	061a      	lsls	r2, r3, #24
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007c62:	041b      	lsls	r3, r3, #16
 8007c64:	4313      	orrs	r3, r2
 8007c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c68:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007c6c:	0212      	lsls	r2, r2, #8
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c72:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	7bdb      	ldrb	r3, [r3, #15]
 8007c7e:	021b      	lsls	r3, r3, #8
 8007c80:	b21a      	sxth	r2, r3
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	7b9b      	ldrb	r3, [r3, #14]
 8007c86:	b21b      	sxth	r3, r3
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	b21b      	sxth	r3, r3
 8007c8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007c8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <find_volume+0x304>
 8007c94:	230d      	movs	r3, #13
 8007c96:	e13b      	b.n	8007f10 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007c98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c9c:	4413      	add	r3, r2
 8007c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ca0:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8007ca4:	0912      	lsrs	r2, r2, #4
 8007ca6:	b292      	uxth	r2, r2
 8007ca8:	4413      	add	r3, r2
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d201      	bcs.n	8007cb8 <find_volume+0x324>
 8007cb4:	230d      	movs	r3, #13
 8007cb6:	e12b      	b.n	8007f10 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cc0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <find_volume+0x340>
 8007cd0:	230d      	movs	r3, #13
 8007cd2:	e11d      	b.n	8007f10 <find_volume+0x57c>
	fmt = FS_FAT12;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d902      	bls.n	8007cea <find_volume+0x356>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d902      	bls.n	8007cfa <find_volume+0x366>
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	1c9a      	adds	r2, r3, #2
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d08:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007d0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d10:	441a      	add	r2, r3
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8007d18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	441a      	add	r2, r3
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d20:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8007d24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	d121      	bne.n	8007d70 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <find_volume+0x3a6>
 8007d36:	230d      	movs	r3, #13
 8007d38:	e0ea      	b.n	8007f10 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007d40:	061a      	lsls	r2, r3, #24
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007d48:	041b      	lsls	r3, r3, #16
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d4e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007d52:	0212      	lsls	r2, r2, #8
 8007d54:	4313      	orrs	r3, r2
 8007d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d58:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d6e:	e025      	b.n	8007dbc <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <find_volume+0x3ea>
 8007d7a:	230d      	movs	r3, #13
 8007d7c:	e0c8      	b.n	8007f10 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d86:	441a      	add	r2, r3
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d104      	bne.n	8007da0 <find_volume+0x40c>
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	e00c      	b.n	8007dba <find_volume+0x426>
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007da6:	4613      	mov	r3, r2
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	4413      	add	r3, r2
 8007dac:	085a      	lsrs	r2, r3, #1
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007dba:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007dc8:	0a5b      	lsrs	r3, r3, #9
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d201      	bcs.n	8007dd2 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 8007dce:	230d      	movs	r3, #13
 8007dd0:	e09e      	b.n	8007f10 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	2280      	movs	r2, #128	; 0x80
 8007dec:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d177      	bne.n	8007ee8 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007dfe:	021b      	lsls	r3, r3, #8
 8007e00:	b21a      	sxth	r2, r3
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e08:	b21b      	sxth	r3, r3
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	b21b      	sxth	r3, r3
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d16a      	bne.n	8007ee8 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e14:	3301      	adds	r3, #1
 8007e16:	4619      	mov	r1, r3
 8007e18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e1a:	f7fe fd46 	bl	80068aa <move_window>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d161      	bne.n	8007ee8 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	b21a      	sxth	r2, r3
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007e3c:	b21b      	sxth	r3, r3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	b21b      	sxth	r3, r3
 8007e42:	4a35      	ldr	r2, [pc, #212]	; (8007f18 <find_volume+0x584>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d14f      	bne.n	8007ee8 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	78db      	ldrb	r3, [r3, #3]
 8007e4c:	061a      	lsls	r2, r3, #24
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	789b      	ldrb	r3, [r3, #2]
 8007e52:	041b      	lsls	r3, r3, #16
 8007e54:	4313      	orrs	r3, r2
 8007e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e58:	7852      	ldrb	r2, [r2, #1]
 8007e5a:	0212      	lsls	r2, r2, #8
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e60:	7812      	ldrb	r2, [r2, #0]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	4a2d      	ldr	r2, [pc, #180]	; (8007f1c <find_volume+0x588>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d13e      	bne.n	8007ee8 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007e70:	061a      	lsls	r2, r3, #24
 8007e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e74:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007e78:	041b      	lsls	r3, r3, #16
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e7e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007e82:	0212      	lsls	r2, r2, #8
 8007e84:	4313      	orrs	r3, r2
 8007e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e88:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	4a24      	ldr	r2, [pc, #144]	; (8007f20 <find_volume+0x58c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d129      	bne.n	8007ee8 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007e9a:	061a      	lsls	r2, r3, #24
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007ea2:	041b      	lsls	r3, r3, #16
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ea8:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007eac:	0212      	lsls	r2, r2, #8
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eb2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec0:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007ec4:	061a      	lsls	r2, r3, #24
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007ecc:	041b      	lsls	r3, r3, #16
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ed2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007ed6:	0212      	lsls	r2, r2, #8
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007edc:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007eee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8007ef2:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <find_volume+0x590>)
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <find_volume+0x590>)
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <find_volume+0x590>)
 8007f00:	881a      	ldrh	r2, [r3, #0]
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007f08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f0a:	f7fe fc5d 	bl	80067c8 <clear_lock>
#endif

	return FR_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3758      	adds	r7, #88	; 0x58
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	ffffaa55 	.word	0xffffaa55
 8007f1c:	41615252 	.word	0x41615252
 8007f20:	61417272 	.word	0x61417272
 8007f24:	20000288 	.word	0x20000288

08007f28 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d022      	beq.n	8007f80 <validate+0x58>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d01d      	beq.n	8007f80 <validate+0x58>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d016      	beq.n	8007f80 <validate+0x58>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f58:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d10c      	bne.n	8007f80 <validate+0x58>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f6c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe f98b 	bl	800628c <disk_status>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007f80:	2309      	movs	r3, #9
 8007f82:	e000      	b.n	8007f86 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007fa2:	f107 0310 	add.w	r3, r7, #16
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff fc46 	bl	8007838 <get_ldnumber>
 8007fac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	da01      	bge.n	8007fb8 <f_mount+0x28>
 8007fb4:	230b      	movs	r3, #11
 8007fb6:	e02d      	b.n	8008014 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fb8:	4a18      	ldr	r2, [pc, #96]	; (800801c <f_mount+0x8c>)
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fc0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d006      	beq.n	8007fd6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007fc8:	69b8      	ldr	r0, [r7, #24]
 8007fca:	f7fe fbfd 	bl	80067c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	490d      	ldr	r1, [pc, #52]	; (800801c <f_mount+0x8c>)
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <f_mount+0x6a>
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d001      	beq.n	8007ffe <f_mount+0x6e>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e00a      	b.n	8008014 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007ffe:	f107 0108 	add.w	r1, r7, #8
 8008002:	f107 030c 	add.w	r3, r7, #12
 8008006:	2200      	movs	r2, #0
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff fcc3 	bl	8007994 <find_volume>
 800800e:	4603      	mov	r3, r0
 8008010:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008012:	7dfb      	ldrb	r3, [r7, #23]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3720      	adds	r7, #32
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20000284 	.word	0x20000284

08008020 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8008026:	af00      	add	r7, sp, #0
 8008028:	f107 030c 	add.w	r3, r7, #12
 800802c:	6018      	str	r0, [r3, #0]
 800802e:	f107 0308 	add.w	r3, r7, #8
 8008032:	6019      	str	r1, [r3, #0]
 8008034:	1dfb      	adds	r3, r7, #7
 8008036:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008038:	f107 030c 	add.w	r3, r7, #12
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <f_open+0x26>
 8008042:	2309      	movs	r3, #9
 8008044:	e1f2      	b.n	800842c <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 8008046:	f107 030c 	add.w	r3, r7, #12
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2200      	movs	r2, #0
 800804e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008052:	1dfb      	adds	r3, r7, #7
 8008054:	1dfa      	adds	r2, r7, #7
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	f002 021f 	and.w	r2, r2, #31
 800805c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800805e:	1dfb      	adds	r3, r7, #7
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	f023 0301 	bic.w	r3, r3, #1
 8008066:	b2da      	uxtb	r2, r3
 8008068:	f107 0108 	add.w	r1, r7, #8
 800806c:	f107 0320 	add.w	r3, r7, #32
 8008070:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff fc8d 	bl	8007994 <find_volume>
 800807a:	4603      	mov	r3, r0
 800807c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008080:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008084:	2b00      	cmp	r3, #0
 8008086:	f040 81cf 	bne.w	8008428 <f_open+0x408>
		INIT_BUF(dj);
 800808a:	f107 0320 	add.w	r3, r7, #32
 800808e:	f107 0214 	add.w	r2, r7, #20
 8008092:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8008096:	f107 0308 	add.w	r3, r7, #8
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	f107 0320 	add.w	r3, r7, #32
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff fb5a 	bl	800775c <follow_path>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80080ae:	f107 0320 	add.w	r3, r7, #32
 80080b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080b6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80080ba:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d11a      	bne.n	80080f8 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 80080c2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d103      	bne.n	80080d2 <f_open+0xb2>
				res = FR_INVALID_NAME;
 80080ca:	2306      	movs	r3, #6
 80080cc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80080d0:	e012      	b.n	80080f8 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080d2:	1dfb      	adds	r3, r7, #7
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	f023 0301 	bic.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	bf14      	ite	ne
 80080de:	2301      	movne	r3, #1
 80080e0:	2300      	moveq	r3, #0
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	461a      	mov	r2, r3
 80080e6:	f107 0320 	add.w	r3, r7, #32
 80080ea:	4611      	mov	r1, r2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe f9e1 	bl	80064b4 <chk_lock>
 80080f2:	4603      	mov	r3, r0
 80080f4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80080f8:	1dfb      	adds	r3, r7, #7
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f003 031c 	and.w	r3, r3, #28
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 80cc 	beq.w	800829e <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8008106:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800810a:	2b00      	cmp	r3, #0
 800810c:	d01f      	beq.n	800814e <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800810e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008112:	2b04      	cmp	r3, #4
 8008114:	d10e      	bne.n	8008134 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008116:	f7fe fa39 	bl	800658c <enq_lock>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d006      	beq.n	800812e <f_open+0x10e>
 8008120:	f107 0320 	add.w	r3, r7, #32
 8008124:	4618      	mov	r0, r3
 8008126:	f7ff fa20 	bl	800756a <dir_register>
 800812a:	4603      	mov	r3, r0
 800812c:	e000      	b.n	8008130 <f_open+0x110>
 800812e:	2312      	movs	r3, #18
 8008130:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008134:	1dfb      	adds	r3, r7, #7
 8008136:	1dfa      	adds	r2, r7, #7
 8008138:	7812      	ldrb	r2, [r2, #0]
 800813a:	f042 0208 	orr.w	r2, r2, #8
 800813e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8008140:	f107 0320 	add.w	r3, r7, #32
 8008144:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008148:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800814c:	e014      	b.n	8008178 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800814e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008152:	330b      	adds	r3, #11
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	f003 0311 	and.w	r3, r3, #17
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <f_open+0x146>
					res = FR_DENIED;
 800815e:	2307      	movs	r3, #7
 8008160:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008164:	e008      	b.n	8008178 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008166:	1dfb      	adds	r3, r7, #7
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <f_open+0x158>
						res = FR_EXIST;
 8008172:	2308      	movs	r3, #8
 8008174:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008178:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800817c:	2b00      	cmp	r3, #0
 800817e:	f040 80af 	bne.w	80082e0 <f_open+0x2c0>
 8008182:	1dfb      	adds	r3, r7, #7
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	f003 0308 	and.w	r3, r3, #8
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80a8 	beq.w	80082e0 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8008190:	f7fe f81a 	bl	80061c8 <get_fattime>
 8008194:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008198:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800819c:	330e      	adds	r3, #14
 800819e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	0a1b      	lsrs	r3, r3, #8
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80081b4:	330f      	adds	r3, #15
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80081be:	0c1a      	lsrs	r2, r3, #16
 80081c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80081c4:	3310      	adds	r3, #16
 80081c6:	b2d2      	uxtb	r2, r2
 80081c8:	701a      	strb	r2, [r3, #0]
 80081ca:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80081ce:	0e1a      	lsrs	r2, r3, #24
 80081d0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80081d4:	3311      	adds	r3, #17
 80081d6:	b2d2      	uxtb	r2, r2
 80081d8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80081da:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80081de:	330b      	adds	r3, #11
 80081e0:	2200      	movs	r2, #0
 80081e2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80081e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80081e8:	331c      	adds	r3, #28
 80081ea:	2200      	movs	r2, #0
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80081f2:	331d      	adds	r3, #29
 80081f4:	2200      	movs	r2, #0
 80081f6:	701a      	strb	r2, [r3, #0]
 80081f8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80081fc:	331e      	adds	r3, #30
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008206:	331f      	adds	r3, #31
 8008208:	2200      	movs	r2, #0
 800820a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800820c:	f107 0320 	add.w	r3, r7, #32
 8008210:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008214:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff f904 	bl	8007426 <ld_clust>
 800821e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8008222:	2100      	movs	r1, #0
 8008224:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8008228:	f7ff f92a 	bl	8007480 <st_clust>
				dj.fs->wflag = 1;
 800822c:	f107 0320 	add.w	r3, r7, #32
 8008230:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800823a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800823e:	2b00      	cmp	r3, #0
 8008240:	d04e      	beq.n	80082e0 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8008242:	f107 0320 	add.w	r3, r7, #32
 8008246:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800824a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800824e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8008252:	f107 0320 	add.w	r3, r7, #32
 8008256:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800825a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fde1 	bl	8006e26 <remove_chain>
 8008264:	4603      	mov	r3, r0
 8008266:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800826a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800826e:	2b00      	cmp	r3, #0
 8008270:	d136      	bne.n	80082e0 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008272:	f107 0320 	add.w	r3, r7, #32
 8008276:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800827a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800827e:	3a01      	subs	r2, #1
 8008280:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8008284:	f107 0320 	add.w	r3, r7, #32
 8008288:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800828c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8008290:	4618      	mov	r0, r3
 8008292:	f7fe fb0a 	bl	80068aa <move_window>
 8008296:	4603      	mov	r3, r0
 8008298:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800829c:	e020      	b.n	80082e0 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800829e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d11c      	bne.n	80082e0 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80082a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80082aa:	330b      	adds	r3, #11
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	f003 0310 	and.w	r3, r3, #16
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <f_open+0x29e>
					res = FR_NO_FILE;
 80082b6:	2304      	movs	r3, #4
 80082b8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80082bc:	e010      	b.n	80082e0 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80082be:	1dfb      	adds	r3, r7, #7
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f003 0302 	and.w	r3, r3, #2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <f_open+0x2c0>
 80082ca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80082ce:	330b      	adds	r3, #11
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <f_open+0x2c0>
						res = FR_DENIED;
 80082da:	2307      	movs	r3, #7
 80082dc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80082e0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d13d      	bne.n	8008364 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80082e8:	1dfb      	adds	r3, r7, #7
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	f003 0308 	and.w	r3, r3, #8
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 80082f4:	1dfb      	adds	r3, r7, #7
 80082f6:	1dfa      	adds	r2, r7, #7
 80082f8:	7812      	ldrb	r2, [r2, #0]
 80082fa:	f042 0220 	orr.w	r2, r2, #32
 80082fe:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008300:	f107 0320 	add.w	r3, r7, #32
 8008304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008308:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800830c:	f107 030c 	add.w	r3, r7, #12
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8008316:	f107 030c 	add.w	r3, r7, #12
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008320:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008324:	1dfb      	adds	r3, r7, #7
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	f023 0301 	bic.w	r3, r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	bf14      	ite	ne
 8008330:	2301      	movne	r3, #1
 8008332:	2300      	moveq	r3, #0
 8008334:	b2db      	uxtb	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	f107 0320 	add.w	r3, r7, #32
 800833c:	4611      	mov	r1, r2
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe f948 	bl	80065d4 <inc_lock>
 8008344:	4602      	mov	r2, r0
 8008346:	f107 030c 	add.w	r3, r7, #12
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8008350:	f107 030c 	add.w	r3, r7, #12
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800835a:	2b00      	cmp	r3, #0
 800835c:	d102      	bne.n	8008364 <f_open+0x344>
 800835e:	2302      	movs	r3, #2
 8008360:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008364:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008368:	2b00      	cmp	r3, #0
 800836a:	d15d      	bne.n	8008428 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800836c:	f107 030c 	add.w	r3, r7, #12
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	1dfa      	adds	r2, r7, #7
 8008374:	7812      	ldrb	r2, [r2, #0]
 8008376:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800837a:	f107 030c 	add.w	r3, r7, #12
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008386:	f107 0320 	add.w	r3, r7, #32
 800838a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800838e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff f847 	bl	8007426 <ld_clust>
 8008398:	4602      	mov	r2, r0
 800839a:	f107 030c 	add.w	r3, r7, #12
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80083a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80083a8:	331f      	adds	r3, #31
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	061a      	lsls	r2, r3, #24
 80083ae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80083b2:	331e      	adds	r3, #30
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	041b      	lsls	r3, r3, #16
 80083b8:	4313      	orrs	r3, r2
 80083ba:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80083be:	321d      	adds	r2, #29
 80083c0:	7812      	ldrb	r2, [r2, #0]
 80083c2:	0212      	lsls	r2, r2, #8
 80083c4:	4313      	orrs	r3, r2
 80083c6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80083ca:	321c      	adds	r2, #28
 80083cc:	7812      	ldrb	r2, [r2, #0]
 80083ce:	431a      	orrs	r2, r3
 80083d0:	f107 030c 	add.w	r3, r7, #12
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80083da:	f107 030c 	add.w	r3, r7, #12
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80083e6:	f107 030c 	add.w	r3, r7, #12
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80083f2:	f107 030c 	add.w	r3, r7, #12
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80083fe:	f107 0320 	add.w	r3, r7, #32
 8008402:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008406:	f107 030c 	add.w	r3, r7, #12
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8008410:	f107 030c 	add.w	r3, r7, #12
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800841a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800841e:	f107 030c 	add.w	r3, r7, #12
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8008428:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800842c:	4618      	mov	r0, r3
 800842e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b08a      	sub	sp, #40	; 0x28
 800843a:	af00      	add	r7, sp, #0
 800843c:	60f8      	str	r0, [r7, #12]
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	607a      	str	r2, [r7, #4]
 8008442:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff fd6a 	bl	8007f28 <validate>
 8008454:	4603      	mov	r3, r0
 8008456:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008458:	7dfb      	ldrb	r3, [r7, #23]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <f_write+0x2c>
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	e192      	b.n	8008788 <f_write+0x352>
	if (fp->err)							/* Check error */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8008472:	e189      	b.n	8008788 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008482:	2307      	movs	r3, #7
 8008484:	e180      	b.n	8008788 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	441a      	add	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008496:	429a      	cmp	r2, r3
 8008498:	f080 8158 	bcs.w	800874c <f_write+0x316>
 800849c:	2300      	movs	r3, #0
 800849e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80084a0:	e154      	b.n	800874c <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80084a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f040 8114 	bne.w	80086da <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80084b8:	0a5b      	lsrs	r3, r3, #9
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80084c2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80084c6:	3b01      	subs	r3, #1
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	4013      	ands	r3, r2
 80084cc:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80084ce:	7dbb      	ldrb	r3, [r7, #22]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d151      	bne.n	8008578 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10f      	bne.n	80084fe <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d121      	bne.n	8008530 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80084f2:	2100      	movs	r1, #0
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fcf0 	bl	8006eda <create_chain>
 80084fa:	6278      	str	r0, [r7, #36]	; 0x24
 80084fc:	e018      	b.n	8008530 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008504:	2b00      	cmp	r3, #0
 8008506:	d008      	beq.n	800851a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800850e:	4619      	mov	r1, r3
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f7fe fd7f 	bl	8007014 <clmt_clust>
 8008516:	6278      	str	r0, [r7, #36]	; 0x24
 8008518:	e00a      	b.n	8008530 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008526:	4619      	mov	r1, r3
 8008528:	4610      	mov	r0, r2
 800852a:	f7fe fcd6 	bl	8006eda <create_chain>
 800852e:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 810f 	beq.w	8008756 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	2b01      	cmp	r3, #1
 800853c:	d105      	bne.n	800854a <f_write+0x114>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2202      	movs	r2, #2
 8008542:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008546:	2302      	movs	r3, #2
 8008548:	e11e      	b.n	8008788 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d105      	bne.n	800855e <f_write+0x128>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800855a:	2301      	movs	r3, #1
 800855c:	e114      	b.n	8008788 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008562:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800856c:	2b00      	cmp	r3, #0
 800856e:	d103      	bne.n	8008578 <f_write+0x142>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008574:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800857e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d01d      	beq.n	80085c2 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800858c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008590:	68f9      	ldr	r1, [r7, #12]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008598:	2301      	movs	r3, #1
 800859a:	f7fd fed7 	bl	800634c <disk_write>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80085ac:	2301      	movs	r3, #1
 80085ae:	e0eb      	b.n	8008788 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80085b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7fe fa45 	bl	8006a60 <clust2sect>
 80085d6:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d105      	bne.n	80085ea <f_write+0x1b4>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2202      	movs	r2, #2
 80085e2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80085e6:	2302      	movs	r3, #2
 80085e8:	e0ce      	b.n	8008788 <f_write+0x352>
			sect += csect;
 80085ea:	7dbb      	ldrb	r3, [r7, #22]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	4413      	add	r3, r2
 80085f0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	0a5b      	lsrs	r3, r3, #9
 80085f6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d048      	beq.n	8008690 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80085fe:	7dba      	ldrb	r2, [r7, #22]
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	4413      	add	r3, r2
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800860a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800860e:	4293      	cmp	r3, r2
 8008610:	d908      	bls.n	8008624 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008618:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800861c:	461a      	mov	r2, r3
 800861e:	7dbb      	ldrb	r3, [r7, #22]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800862a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	69b9      	ldr	r1, [r7, #24]
 8008634:	f7fd fe8a 	bl	800634c <disk_write>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008646:	2301      	movs	r3, #1
 8008648:	e09e      	b.n	8008788 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	69fa      	ldr	r2, [r7, #28]
 8008656:	429a      	cmp	r2, r3
 8008658:	d916      	bls.n	8008688 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	025b      	lsls	r3, r3, #9
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	4413      	add	r3, r2
 800866c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008670:	4619      	mov	r1, r3
 8008672:	f7fd fea9 	bl	80063c8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800867c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008680:	b2da      	uxtb	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	025b      	lsls	r3, r3, #9
 800868c:	623b      	str	r3, [r7, #32]
				continue;
 800868e:	e047      	b.n	8008720 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	429a      	cmp	r2, r3
 800869a:	d01a      	beq.n	80086d2 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d212      	bcs.n	80086d2 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80086b2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80086b6:	68f9      	ldr	r1, [r7, #12]
 80086b8:	2301      	movs	r3, #1
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	f7fd fe26 	bl	800630c <disk_read>
 80086c0:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d005      	beq.n	80086d2 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80086ce:	2301      	movs	r3, #1
 80086d0:	e05a      	b.n	8008788 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80086e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80086e8:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80086ea:	6a3a      	ldr	r2, [r7, #32]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d901      	bls.n	80086f6 <f_write+0x2c0>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80086fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4413      	add	r3, r2
 8008704:	6a3a      	ldr	r2, [r7, #32]
 8008706:	69b9      	ldr	r1, [r7, #24]
 8008708:	4618      	mov	r0, r3
 800870a:	f7fd fe5d 	bl	80063c8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008718:	b2da      	uxtb	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	4413      	add	r3, r2
 8008726:	61bb      	str	r3, [r7, #24]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	441a      	add	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	441a      	add	r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	f47f aea7 	bne.w	80084a2 <f_write+0x6c>
 8008754:	e000      	b.n	8008758 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008756:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008764:	429a      	cmp	r2, r3
 8008766:	d905      	bls.n	8008774 <f_write+0x33e>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800877a:	f043 0320 	orr.w	r3, r3, #32
 800877e:	b2da      	uxtb	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3728      	adds	r7, #40	; 0x28
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff fbc5 	bl	8007f28 <validate>
 800879e:	4603      	mov	r3, r0
 80087a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80087a2:	7dfb      	ldrb	r3, [r7, #23]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f040 80a8 	bne.w	80088fa <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80087b0:	f003 0320 	and.w	r3, r3, #32
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 80a0 	beq.w	80088fa <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80087c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d019      	beq.n	80087fc <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80087ce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80087da:	2301      	movs	r3, #1
 80087dc:	f7fd fdb6 	bl	800634c <disk_write>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80087e6:	2301      	movs	r3, #1
 80087e8:	e088      	b.n	80088fc <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80087f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f7fe f84d 	bl	80068aa <move_window>
 8008810:	4603      	mov	r3, r0
 8008812:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d16f      	bne.n	80088fa <f_sync+0x16a>
				dir = fp->dir_ptr;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008820:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	330b      	adds	r3, #11
 8008826:	781a      	ldrb	r2, [r3, #0]
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	330b      	adds	r3, #11
 800882c:	f042 0220 	orr.w	r2, r2, #32
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	331c      	adds	r3, #28
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008848:	b29b      	uxth	r3, r3
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	b29a      	uxth	r2, r3
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	331d      	adds	r3, #29
 8008852:	b2d2      	uxtb	r2, r2
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800885c:	0c1a      	lsrs	r2, r3, #16
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	331e      	adds	r3, #30
 8008862:	b2d2      	uxtb	r2, r2
 8008864:	701a      	strb	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800886c:	0e1a      	lsrs	r2, r3, #24
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	331f      	adds	r3, #31
 8008872:	b2d2      	uxtb	r2, r2
 8008874:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800887c:	4619      	mov	r1, r3
 800887e:	6938      	ldr	r0, [r7, #16]
 8008880:	f7fe fdfe 	bl	8007480 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008884:	f7fd fca0 	bl	80061c8 <get_fattime>
 8008888:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	3316      	adds	r3, #22
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	b2d2      	uxtb	r2, r2
 8008892:	701a      	strb	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	b29b      	uxth	r3, r3
 8008898:	0a1b      	lsrs	r3, r3, #8
 800889a:	b29a      	uxth	r2, r3
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	3317      	adds	r3, #23
 80088a0:	b2d2      	uxtb	r2, r2
 80088a2:	701a      	strb	r2, [r3, #0]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	0c1a      	lsrs	r2, r3, #16
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	3318      	adds	r3, #24
 80088ac:	b2d2      	uxtb	r2, r2
 80088ae:	701a      	strb	r2, [r3, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	0e1a      	lsrs	r2, r3, #24
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	3319      	adds	r3, #25
 80088b8:	b2d2      	uxtb	r2, r2
 80088ba:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	3312      	adds	r3, #18
 80088c0:	2200      	movs	r2, #0
 80088c2:	701a      	strb	r2, [r3, #0]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	3313      	adds	r3, #19
 80088c8:	2200      	movs	r2, #0
 80088ca:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80088d2:	f023 0320 	bic.w	r3, r3, #32
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fe f808 	bl	8006906 <sync_fs>
 80088f6:	4603      	mov	r3, r0
 80088f8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7ff ff3f 	bl	8008790 <f_sync>
 8008912:	4603      	mov	r3, r0
 8008914:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d116      	bne.n	800894a <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff fb03 	bl	8007f28 <validate>
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10e      	bne.n	800894a <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8008932:	4618      	mov	r0, r3
 8008934:	f7fd ff04 	bl	8006740 <dec_lock>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d103      	bne.n	800894a <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800894a:	7bfb      	ldrb	r3, [r7, #15]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b090      	sub	sp, #64	; 0x40
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff fae2 	bl	8007f28 <validate>
 8008964:	4603      	mov	r3, r0
 8008966:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800896a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <f_lseek+0x24>
 8008972:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008976:	e247      	b.n	8008e08 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8008988:	e23e      	b.n	8008e08 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 80f2 	beq.w	8008b7a <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899c:	d164      	bne.n	8008a68 <f_lseek+0x114>
			tbl = fp->cltbl;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80089a4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	1d1a      	adds	r2, r3, #4
 80089aa:	627a      	str	r2, [r7, #36]	; 0x24
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	2302      	movs	r3, #2
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80089ba:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d041      	beq.n	8008a46 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	613b      	str	r3, [r7, #16]
 80089c6:	2300      	movs	r3, #0
 80089c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	3302      	adds	r3, #2
 80089ce:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d6:	3301      	adds	r3, #1
 80089d8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe f85d 	bl	8006aa2 <get_fat>
 80089e8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d805      	bhi.n	80089fc <f_lseek+0xa8>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80089f8:	2302      	movs	r3, #2
 80089fa:	e205      	b.n	8008e08 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a02:	d105      	bne.n	8008a10 <f_lseek+0xbc>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e1fb      	b.n	8008e08 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3301      	adds	r3, #1
 8008a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d0da      	beq.n	80089d0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d809      	bhi.n	8008a36 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	1d1a      	adds	r2, r3, #4
 8008a26:	627a      	str	r2, [r7, #36]	; 0x24
 8008a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	1d1a      	adds	r2, r3, #4
 8008a30:	627a      	str	r2, [r7, #36]	; 0x24
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d3bd      	bcc.n	80089c2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a4e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8008a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d803      	bhi.n	8008a60 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e1d1      	b.n	8008e04 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008a60:	2311      	movs	r3, #17
 8008a62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008a66:	e1cd      	b.n	8008e04 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d903      	bls.n	8008a7c <f_lseek+0x128>
				ofs = fp->fsize;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008a7a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 81bc 	beq.w	8008e04 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7fe fabe 	bl	8007014 <clmt_clust>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008aac:	4619      	mov	r1, r3
 8008aae:	4610      	mov	r0, r2
 8008ab0:	f7fd ffd6 	bl	8006a60 <clust2sect>
 8008ab4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d105      	bne.n	8008ac8 <f_lseek+0x174>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e19f      	b.n	8008e08 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	3b01      	subs	r3, #1
 8008acc:	0a5b      	lsrs	r3, r3, #9
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8008ad4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008ad8:	3a01      	subs	r2, #1
 8008ada:	4013      	ands	r3, r2
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	4413      	add	r3, r2
 8008ae0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 8189 	beq.w	8008e04 <f_lseek+0x4b0>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	f000 8182 	beq.w	8008e04 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d01d      	beq.n	8008b4a <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b14:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008b18:	6879      	ldr	r1, [r7, #4]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008b20:	2301      	movs	r3, #1
 8008b22:	f7fd fc13 	bl	800634c <disk_write>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008b34:	2301      	movs	r3, #1
 8008b36:	e167      	b.n	8008e08 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b50:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008b54:	6879      	ldr	r1, [r7, #4]
 8008b56:	2301      	movs	r3, #1
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	f7fd fbd7 	bl	800630c <disk_read>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d005      	beq.n	8008b70 <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e14b      	b.n	8008e08 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8008b78:	e144      	b.n	8008e04 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d90a      	bls.n	8008b9c <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d103      	bne.n	8008b9c <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008b9a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008ba2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f000 80c6 	beq.w	8008d44 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008bbe:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008bc2:	025b      	lsls	r3, r3, #9
 8008bc4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01e      	beq.n	8008c0a <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	1e5a      	subs	r2, r3, #1
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	1e59      	subs	r1, r3, #1
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d312      	bcc.n	8008c0a <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	1e5a      	subs	r2, r3, #1
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	425b      	negs	r3, r3
 8008bec:	401a      	ands	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c08:	e029      	b.n	8008c5e <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008c10:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d11e      	bne.n	8008c56 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c1e:	2100      	movs	r1, #0
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe f95a 	bl	8006eda <create_chain>
 8008c26:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d105      	bne.n	8008c3a <f_lseek+0x2e6>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2202      	movs	r2, #2
 8008c32:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008c36:	2302      	movs	r3, #2
 8008c38:	e0e6      	b.n	8008e08 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c40:	d105      	bne.n	8008c4e <f_lseek+0x2fa>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e0dc      	b.n	8008e08 <f_lseek+0x4b4>
					fp->sclust = clst;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d06f      	beq.n	8008d44 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 8008c64:	e047      	b.n	8008cf6 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00d      	beq.n	8008c90 <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe f92c 	bl	8006eda <create_chain>
 8008c82:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8008c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <f_lseek+0x34c>
							ofs = bcs; break;
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	603b      	str	r3, [r7, #0]
 8008c8e:	e036      	b.n	8008cfe <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fd ff02 	bl	8006aa2 <get_fat>
 8008c9e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca6:	d105      	bne.n	8008cb4 <f_lseek+0x360>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e0a9      	b.n	8008e08 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d907      	bls.n	8008cca <f_lseek+0x376>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008cc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d305      	bcc.n	8008cd6 <f_lseek+0x382>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	e098      	b.n	8008e08 <f_lseek+0x4b4>
					fp->clust = clst;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	441a      	add	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d8b3      	bhi.n	8008c66 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	441a      	add	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d015      	beq.n	8008d44 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fd fe9d 	bl	8006a60 <clust2sect>
 8008d26:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d105      	bne.n	8008d3a <f_lseek+0x3e6>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2202      	movs	r2, #2
 8008d32:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008d36:	2302      	movs	r3, #2
 8008d38:	e066      	b.n	8008e08 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	0a5b      	lsrs	r3, r3, #9
 8008d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d40:	4413      	add	r3, r2
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d041      	beq.n	8008dd6 <f_lseek+0x482>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d03b      	beq.n	8008dd6 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01d      	beq.n	8008da8 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d72:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008d7e:	2301      	movs	r3, #1
 8008d80:	f7fd fae4 	bl	800634c <disk_write>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008d92:	2301      	movs	r3, #1
 8008d94:	e038      	b.n	8008e08 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008dae:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	2301      	movs	r3, #1
 8008db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db8:	f7fd faa8 	bl	800630c <disk_read>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d005      	beq.n	8008dce <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e01c      	b.n	8008e08 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d90e      	bls.n	8008e04 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008df8:	f043 0320 	orr.w	r3, r3, #32
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8008e04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3740      	adds	r7, #64	; 0x40
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08e      	sub	sp, #56	; 0x38
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8008e1c:	f107 030c 	add.w	r3, r7, #12
 8008e20:	2200      	movs	r2, #0
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7fe fdb5 	bl	8007994 <find_volume>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8008e36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f040 80af 	bne.w	8008f9e <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e4c:	3b02      	subs	r3, #2
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d805      	bhi.n	8008e5e <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e09f      	b.n	8008f9e <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e64:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8008e6a:	7efb      	ldrb	r3, [r7, #27]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d125      	bne.n	8008ebc <f_getfree+0xac>
				clst = 2;
 8008e70:	2302      	movs	r3, #2
 8008e72:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8008e74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e76:	69f8      	ldr	r0, [r7, #28]
 8008e78:	f7fd fe13 	bl	8006aa2 <get_fat>
 8008e7c:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e84:	d103      	bne.n	8008e8e <f_getfree+0x7e>
 8008e86:	2301      	movs	r3, #1
 8008e88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008e8c:	e077      	b.n	8008f7e <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d103      	bne.n	8008e9c <f_getfree+0x8c>
 8008e94:	2302      	movs	r3, #2
 8008e96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008e9a:	e070      	b.n	8008f7e <f_getfree+0x16e>
					if (stat == 0) n++;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d102      	bne.n	8008ea8 <f_getfree+0x98>
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	3301      	adds	r3, #1
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d3dc      	bcc.n	8008e74 <f_getfree+0x64>
 8008eba:	e060      	b.n	8008f7e <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008eca:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d112      	bne.n	8008f00 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8008eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	62ba      	str	r2, [r7, #40]	; 0x28
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	69f8      	ldr	r0, [r7, #28]
 8008ee4:	f7fd fce1 	bl	80068aa <move_window>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8008eee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d142      	bne.n	8008f7c <f_getfree+0x16c>
						p = fs->win.d8;
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8008efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8008f00:	7efb      	ldrb	r3, [r7, #27]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d115      	bne.n	8008f32 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	b21a      	sxth	r2, r3
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	b21b      	sxth	r3, r3
 8008f16:	4313      	orrs	r3, r2
 8008f18:	b21b      	sxth	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d102      	bne.n	8008f24 <f_getfree+0x114>
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	3301      	adds	r3, #1
 8008f22:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	3302      	adds	r3, #2
 8008f28:	623b      	str	r3, [r7, #32]
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	3b02      	subs	r3, #2
 8008f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f30:	e01d      	b.n	8008f6e <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	3303      	adds	r3, #3
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	061a      	lsls	r2, r3, #24
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	3302      	adds	r3, #2
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	041b      	lsls	r3, r3, #16
 8008f42:	4313      	orrs	r3, r2
 8008f44:	6a3a      	ldr	r2, [r7, #32]
 8008f46:	3201      	adds	r2, #1
 8008f48:	7812      	ldrb	r2, [r2, #0]
 8008f4a:	0212      	lsls	r2, r2, #8
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	6a3a      	ldr	r2, [r7, #32]
 8008f50:	7812      	ldrb	r2, [r2, #0]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d102      	bne.n	8008f62 <f_getfree+0x152>
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5e:	3301      	adds	r3, #1
 8008f60:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	3304      	adds	r3, #4
 8008f66:	623b      	str	r3, [r7, #32]
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	3b04      	subs	r3, #4
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	3b01      	subs	r3, #1
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1ac      	bne.n	8008ed4 <f_getfree+0xc4>
 8008f7a:	e000      	b.n	8008f7e <f_getfree+0x16e>
						if (res != FR_OK) break;
 8008f7c:	bf00      	nop
			}
			fs->free_clust = n;
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8008f8c:	f043 0301 	orr.w	r3, r3, #1
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f9c:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8008f9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3738      	adds	r7, #56	; 0x38
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8008fb6:	78fb      	ldrb	r3, [r7, #3]
 8008fb8:	2b0a      	cmp	r3, #10
 8008fba:	d103      	bne.n	8008fc4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008fbc:	210d      	movs	r1, #13
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff fff3 	bl	8008faa <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	db25      	blt.n	800901c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	60fa      	str	r2, [r7, #12]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	78fa      	ldrb	r2, [r7, #3]
 8008fdc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b3c      	cmp	r3, #60	; 0x3c
 8008fe2:	dd12      	ble.n	800900a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f103 010c 	add.w	r1, r3, #12
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	f107 0308 	add.w	r3, r7, #8
 8008ff4:	f7ff fa1f 	bl	8008436 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d101      	bne.n	8009004 <putc_bfd+0x5a>
 8009000:	2300      	movs	r3, #0
 8009002:	e001      	b.n	8009008 <putc_bfd+0x5e>
 8009004:	f04f 33ff 	mov.w	r3, #4294967295
 8009008:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	609a      	str	r2, [r3, #8]
 800901a:	e000      	b.n	800901e <putc_bfd+0x74>
	if (i < 0) return;
 800901c:	bf00      	nop
}
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009024:	b590      	push	{r4, r7, lr}
 8009026:	b097      	sub	sp, #92	; 0x5c
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	613b      	str	r3, [r7, #16]
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800903a:	e009      	b.n	8009050 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	607a      	str	r2, [r7, #4]
 8009042:	781a      	ldrb	r2, [r3, #0]
 8009044:	f107 030c 	add.w	r3, r7, #12
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff ffad 	bl	8008faa <putc_bfd>
	while (*str)			/* Put the string */
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1f1      	bne.n	800903c <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	db16      	blt.n	800908c <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	461c      	mov	r4, r3
 8009064:	f107 0208 	add.w	r2, r7, #8
 8009068:	f107 030c 	add.w	r3, r7, #12
 800906c:	f103 010c 	add.w	r1, r3, #12
 8009070:	4613      	mov	r3, r2
 8009072:	4622      	mov	r2, r4
 8009074:	f7ff f9df 	bl	8008436 <f_write>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d106      	bne.n	800908c <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	461a      	mov	r2, r3
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	429a      	cmp	r2, r3
 8009086:	d101      	bne.n	800908c <f_puts+0x68>
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	e001      	b.n	8009090 <f_puts+0x6c>
	return EOF;
 800908c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009090:	4618      	mov	r0, r3
 8009092:	375c      	adds	r7, #92	; 0x5c
 8009094:	46bd      	mov	sp, r7
 8009096:	bd90      	pop	{r4, r7, pc}

08009098 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	4613      	mov	r3, r2
 80090a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80090a6:	2301      	movs	r3, #1
 80090a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80090ae:	4b1e      	ldr	r3, [pc, #120]	; (8009128 <FATFS_LinkDriverEx+0x90>)
 80090b0:	7a5b      	ldrb	r3, [r3, #9]
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d831      	bhi.n	800911c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80090b8:	4b1b      	ldr	r3, [pc, #108]	; (8009128 <FATFS_LinkDriverEx+0x90>)
 80090ba:	7a5b      	ldrb	r3, [r3, #9]
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	461a      	mov	r2, r3
 80090c0:	4b19      	ldr	r3, [pc, #100]	; (8009128 <FATFS_LinkDriverEx+0x90>)
 80090c2:	2100      	movs	r1, #0
 80090c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80090c6:	4b18      	ldr	r3, [pc, #96]	; (8009128 <FATFS_LinkDriverEx+0x90>)
 80090c8:	7a5b      	ldrb	r3, [r3, #9]
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	4a16      	ldr	r2, [pc, #88]	; (8009128 <FATFS_LinkDriverEx+0x90>)
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80090d6:	4b14      	ldr	r3, [pc, #80]	; (8009128 <FATFS_LinkDriverEx+0x90>)
 80090d8:	7a5b      	ldrb	r3, [r3, #9]
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	461a      	mov	r2, r3
 80090de:	4b12      	ldr	r3, [pc, #72]	; (8009128 <FATFS_LinkDriverEx+0x90>)
 80090e0:	4413      	add	r3, r2
 80090e2:	79fa      	ldrb	r2, [r7, #7]
 80090e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80090e6:	4b10      	ldr	r3, [pc, #64]	; (8009128 <FATFS_LinkDriverEx+0x90>)
 80090e8:	7a5b      	ldrb	r3, [r3, #9]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	1c5a      	adds	r2, r3, #1
 80090ee:	b2d1      	uxtb	r1, r2
 80090f0:	4a0d      	ldr	r2, [pc, #52]	; (8009128 <FATFS_LinkDriverEx+0x90>)
 80090f2:	7251      	strb	r1, [r2, #9]
 80090f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80090f6:	7dbb      	ldrb	r3, [r7, #22]
 80090f8:	3330      	adds	r3, #48	; 0x30
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	3301      	adds	r3, #1
 8009104:	223a      	movs	r2, #58	; 0x3a
 8009106:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	3302      	adds	r3, #2
 800910c:	222f      	movs	r2, #47	; 0x2f
 800910e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	3303      	adds	r3, #3
 8009114:	2200      	movs	r2, #0
 8009116:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800911c:	7dfb      	ldrb	r3, [r7, #23]
}
 800911e:	4618      	mov	r0, r3
 8009120:	371c      	adds	r7, #28
 8009122:	46bd      	mov	sp, r7
 8009124:	bc80      	pop	{r7}
 8009126:	4770      	bx	lr
 8009128:	200002a4 	.word	0x200002a4

0800912c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009136:	2200      	movs	r2, #0
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff ffac 	bl	8009098 <FATFS_LinkDriverEx>
 8009140:	4603      	mov	r3, r0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <asctime>:
 800914c:	4b09      	ldr	r3, [pc, #36]	; (8009174 <asctime+0x28>)
 800914e:	b570      	push	{r4, r5, r6, lr}
 8009150:	681c      	ldr	r4, [r3, #0]
 8009152:	4606      	mov	r6, r0
 8009154:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8009156:	b93d      	cbnz	r5, 8009168 <asctime+0x1c>
 8009158:	201a      	movs	r0, #26
 800915a:	f000 f91b 	bl	8009394 <malloc>
 800915e:	221a      	movs	r2, #26
 8009160:	6420      	str	r0, [r4, #64]	; 0x40
 8009162:	4629      	mov	r1, r5
 8009164:	f000 f926 	bl	80093b4 <memset>
 8009168:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800916a:	4630      	mov	r0, r6
 800916c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009170:	f000 b802 	b.w	8009178 <asctime_r>
 8009174:	20000028 	.word	0x20000028

08009178 <asctime_r>:
 8009178:	b510      	push	{r4, lr}
 800917a:	460c      	mov	r4, r1
 800917c:	6941      	ldr	r1, [r0, #20]
 800917e:	b086      	sub	sp, #24
 8009180:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8009184:	6903      	ldr	r3, [r0, #16]
 8009186:	6982      	ldr	r2, [r0, #24]
 8009188:	9104      	str	r1, [sp, #16]
 800918a:	6801      	ldr	r1, [r0, #0]
 800918c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009190:	9103      	str	r1, [sp, #12]
 8009192:	6841      	ldr	r1, [r0, #4]
 8009194:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009198:	9102      	str	r1, [sp, #8]
 800919a:	6881      	ldr	r1, [r0, #8]
 800919c:	9101      	str	r1, [sp, #4]
 800919e:	68c1      	ldr	r1, [r0, #12]
 80091a0:	4620      	mov	r0, r4
 80091a2:	9100      	str	r1, [sp, #0]
 80091a4:	4904      	ldr	r1, [pc, #16]	; (80091b8 <asctime_r+0x40>)
 80091a6:	440b      	add	r3, r1
 80091a8:	4904      	ldr	r1, [pc, #16]	; (80091bc <asctime_r+0x44>)
 80091aa:	440a      	add	r2, r1
 80091ac:	4904      	ldr	r1, [pc, #16]	; (80091c0 <asctime_r+0x48>)
 80091ae:	f001 f933 	bl	800a418 <siprintf>
 80091b2:	4620      	mov	r0, r4
 80091b4:	b006      	add	sp, #24
 80091b6:	bd10      	pop	{r4, pc}
 80091b8:	0800d671 	.word	0x0800d671
 80091bc:	0800d65c 	.word	0x0800d65c
 80091c0:	0800d63c 	.word	0x0800d63c

080091c4 <__errno>:
 80091c4:	4b01      	ldr	r3, [pc, #4]	; (80091cc <__errno+0x8>)
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	20000028 	.word	0x20000028

080091d0 <gmtime>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4b07      	ldr	r3, [pc, #28]	; (80091f0 <gmtime+0x20>)
 80091d4:	4605      	mov	r5, r0
 80091d6:	681c      	ldr	r4, [r3, #0]
 80091d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091da:	b91b      	cbnz	r3, 80091e4 <gmtime+0x14>
 80091dc:	2024      	movs	r0, #36	; 0x24
 80091de:	f000 f8d9 	bl	8009394 <malloc>
 80091e2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80091e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80091e6:	4628      	mov	r0, r5
 80091e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ec:	f000 b802 	b.w	80091f4 <gmtime_r>
 80091f0:	20000028 	.word	0x20000028

080091f4 <gmtime_r>:
 80091f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f8:	e9d0 8900 	ldrd	r8, r9, [r0]
 80091fc:	460c      	mov	r4, r1
 80091fe:	4a4f      	ldr	r2, [pc, #316]	; (800933c <gmtime_r+0x148>)
 8009200:	2300      	movs	r3, #0
 8009202:	4640      	mov	r0, r8
 8009204:	4649      	mov	r1, r9
 8009206:	f7f7 fef7 	bl	8000ff8 <__aeabi_ldivmod>
 800920a:	4a4c      	ldr	r2, [pc, #304]	; (800933c <gmtime_r+0x148>)
 800920c:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8009210:	2300      	movs	r3, #0
 8009212:	4640      	mov	r0, r8
 8009214:	4649      	mov	r1, r9
 8009216:	f7f7 feef 	bl	8000ff8 <__aeabi_ldivmod>
 800921a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800921e:	2a00      	cmp	r2, #0
 8009220:	bfbc      	itt	lt
 8009222:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8009226:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800922a:	fb92 f3f1 	sdiv	r3, r2, r1
 800922e:	fb01 2213 	mls	r2, r1, r3, r2
 8009232:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8009236:	60a3      	str	r3, [r4, #8]
 8009238:	fb92 f3f1 	sdiv	r3, r2, r1
 800923c:	fb01 2213 	mls	r2, r1, r3, r2
 8009240:	6022      	str	r2, [r4, #0]
 8009242:	f04f 0207 	mov.w	r2, #7
 8009246:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 800924a:	bfb8      	it	lt
 800924c:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 8009250:	6063      	str	r3, [r4, #4]
 8009252:	1ceb      	adds	r3, r5, #3
 8009254:	fb93 f2f2 	sdiv	r2, r3, r2
 8009258:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800925c:	1a9b      	subs	r3, r3, r2
 800925e:	bf48      	it	mi
 8009260:	3307      	addmi	r3, #7
 8009262:	2d00      	cmp	r5, #0
 8009264:	4836      	ldr	r0, [pc, #216]	; (8009340 <gmtime_r+0x14c>)
 8009266:	61a3      	str	r3, [r4, #24]
 8009268:	bfbd      	ittte	lt
 800926a:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 800926e:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8009272:	fb93 f0f0 	sdivlt	r0, r3, r0
 8009276:	fb95 f0f0 	sdivge	r0, r5, r0
 800927a:	f648 61ac 	movw	r1, #36524	; 0x8eac
 800927e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8009282:	4b30      	ldr	r3, [pc, #192]	; (8009344 <gmtime_r+0x150>)
 8009284:	f240 166d 	movw	r6, #365	; 0x16d
 8009288:	fb03 5300 	mla	r3, r3, r0, r5
 800928c:	fbb3 f1f1 	udiv	r1, r3, r1
 8009290:	fbb3 f2f7 	udiv	r2, r3, r7
 8009294:	4419      	add	r1, r3
 8009296:	1a89      	subs	r1, r1, r2
 8009298:	4a2b      	ldr	r2, [pc, #172]	; (8009348 <gmtime_r+0x154>)
 800929a:	fbb3 f2f2 	udiv	r2, r3, r2
 800929e:	1a8a      	subs	r2, r1, r2
 80092a0:	f648 6194 	movw	r1, #36500	; 0x8e94
 80092a4:	fbb2 f1f1 	udiv	r1, r2, r1
 80092a8:	fbb2 f5f6 	udiv	r5, r2, r6
 80092ac:	fbb2 f2f7 	udiv	r2, r2, r7
 80092b0:	440b      	add	r3, r1
 80092b2:	2199      	movs	r1, #153	; 0x99
 80092b4:	1a9a      	subs	r2, r3, r2
 80092b6:	fb06 2315 	mls	r3, r6, r5, r2
 80092ba:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80092be:	3202      	adds	r2, #2
 80092c0:	fbb2 f2f1 	udiv	r2, r2, r1
 80092c4:	2705      	movs	r7, #5
 80092c6:	4351      	muls	r1, r2
 80092c8:	3102      	adds	r1, #2
 80092ca:	fbb1 f1f7 	udiv	r1, r1, r7
 80092ce:	2a0a      	cmp	r2, #10
 80092d0:	f103 0601 	add.w	r6, r3, #1
 80092d4:	eba6 0101 	sub.w	r1, r6, r1
 80092d8:	bf34      	ite	cc
 80092da:	2602      	movcc	r6, #2
 80092dc:	f06f 0609 	mvncs.w	r6, #9
 80092e0:	4416      	add	r6, r2
 80092e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80092e6:	fb02 5000 	mla	r0, r2, r0, r5
 80092ea:	2e01      	cmp	r6, #1
 80092ec:	bf98      	it	ls
 80092ee:	3001      	addls	r0, #1
 80092f0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80092f4:	d30c      	bcc.n	8009310 <gmtime_r+0x11c>
 80092f6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80092fa:	61e3      	str	r3, [r4, #28]
 80092fc:	2300      	movs	r3, #0
 80092fe:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8009302:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8009306:	60e1      	str	r1, [r4, #12]
 8009308:	6223      	str	r3, [r4, #32]
 800930a:	4620      	mov	r0, r4
 800930c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009310:	07aa      	lsls	r2, r5, #30
 8009312:	d105      	bne.n	8009320 <gmtime_r+0x12c>
 8009314:	2764      	movs	r7, #100	; 0x64
 8009316:	fbb5 f2f7 	udiv	r2, r5, r7
 800931a:	fb07 5212 	mls	r2, r7, r2, r5
 800931e:	b95a      	cbnz	r2, 8009338 <gmtime_r+0x144>
 8009320:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8009324:	fbb5 f2f7 	udiv	r2, r5, r7
 8009328:	fb07 5212 	mls	r2, r7, r2, r5
 800932c:	fab2 f282 	clz	r2, r2
 8009330:	0952      	lsrs	r2, r2, #5
 8009332:	333b      	adds	r3, #59	; 0x3b
 8009334:	4413      	add	r3, r2
 8009336:	e7e0      	b.n	80092fa <gmtime_r+0x106>
 8009338:	2201      	movs	r2, #1
 800933a:	e7fa      	b.n	8009332 <gmtime_r+0x13e>
 800933c:	00015180 	.word	0x00015180
 8009340:	00023ab1 	.word	0x00023ab1
 8009344:	fffdc54f 	.word	0xfffdc54f
 8009348:	00023ab0 	.word	0x00023ab0

0800934c <__libc_init_array>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	2500      	movs	r5, #0
 8009350:	4e0c      	ldr	r6, [pc, #48]	; (8009384 <__libc_init_array+0x38>)
 8009352:	4c0d      	ldr	r4, [pc, #52]	; (8009388 <__libc_init_array+0x3c>)
 8009354:	1ba4      	subs	r4, r4, r6
 8009356:	10a4      	asrs	r4, r4, #2
 8009358:	42a5      	cmp	r5, r4
 800935a:	d109      	bne.n	8009370 <__libc_init_array+0x24>
 800935c:	f003 ffd8 	bl	800d310 <_init>
 8009360:	2500      	movs	r5, #0
 8009362:	4e0a      	ldr	r6, [pc, #40]	; (800938c <__libc_init_array+0x40>)
 8009364:	4c0a      	ldr	r4, [pc, #40]	; (8009390 <__libc_init_array+0x44>)
 8009366:	1ba4      	subs	r4, r4, r6
 8009368:	10a4      	asrs	r4, r4, #2
 800936a:	42a5      	cmp	r5, r4
 800936c:	d105      	bne.n	800937a <__libc_init_array+0x2e>
 800936e:	bd70      	pop	{r4, r5, r6, pc}
 8009370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009374:	4798      	blx	r3
 8009376:	3501      	adds	r5, #1
 8009378:	e7ee      	b.n	8009358 <__libc_init_array+0xc>
 800937a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800937e:	4798      	blx	r3
 8009380:	3501      	adds	r5, #1
 8009382:	e7f2      	b.n	800936a <__libc_init_array+0x1e>
 8009384:	0800da74 	.word	0x0800da74
 8009388:	0800da74 	.word	0x0800da74
 800938c:	0800da74 	.word	0x0800da74
 8009390:	0800da78 	.word	0x0800da78

08009394 <malloc>:
 8009394:	4b02      	ldr	r3, [pc, #8]	; (80093a0 <malloc+0xc>)
 8009396:	4601      	mov	r1, r0
 8009398:	6818      	ldr	r0, [r3, #0]
 800939a:	f000 baf3 	b.w	8009984 <_malloc_r>
 800939e:	bf00      	nop
 80093a0:	20000028 	.word	0x20000028

080093a4 <free>:
 80093a4:	4b02      	ldr	r3, [pc, #8]	; (80093b0 <free+0xc>)
 80093a6:	4601      	mov	r1, r0
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	f000 ba9f 	b.w	80098ec <_free_r>
 80093ae:	bf00      	nop
 80093b0:	20000028 	.word	0x20000028

080093b4 <memset>:
 80093b4:	4603      	mov	r3, r0
 80093b6:	4402      	add	r2, r0
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d100      	bne.n	80093be <memset+0xa>
 80093bc:	4770      	bx	lr
 80093be:	f803 1b01 	strb.w	r1, [r3], #1
 80093c2:	e7f9      	b.n	80093b8 <memset+0x4>

080093c4 <validate_structure>:
 80093c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093c6:	6801      	ldr	r1, [r0, #0]
 80093c8:	4604      	mov	r4, r0
 80093ca:	293b      	cmp	r1, #59	; 0x3b
 80093cc:	d911      	bls.n	80093f2 <validate_structure+0x2e>
 80093ce:	223c      	movs	r2, #60	; 0x3c
 80093d0:	4668      	mov	r0, sp
 80093d2:	f001 fb3f 	bl	800aa54 <div>
 80093d6:	9a01      	ldr	r2, [sp, #4]
 80093d8:	6863      	ldr	r3, [r4, #4]
 80093da:	9900      	ldr	r1, [sp, #0]
 80093dc:	2a00      	cmp	r2, #0
 80093de:	440b      	add	r3, r1
 80093e0:	6063      	str	r3, [r4, #4]
 80093e2:	bfbb      	ittet	lt
 80093e4:	323c      	addlt	r2, #60	; 0x3c
 80093e6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80093ea:	6022      	strge	r2, [r4, #0]
 80093ec:	6022      	strlt	r2, [r4, #0]
 80093ee:	bfb8      	it	lt
 80093f0:	6063      	strlt	r3, [r4, #4]
 80093f2:	6861      	ldr	r1, [r4, #4]
 80093f4:	293b      	cmp	r1, #59	; 0x3b
 80093f6:	d911      	bls.n	800941c <validate_structure+0x58>
 80093f8:	223c      	movs	r2, #60	; 0x3c
 80093fa:	4668      	mov	r0, sp
 80093fc:	f001 fb2a 	bl	800aa54 <div>
 8009400:	9a01      	ldr	r2, [sp, #4]
 8009402:	68a3      	ldr	r3, [r4, #8]
 8009404:	9900      	ldr	r1, [sp, #0]
 8009406:	2a00      	cmp	r2, #0
 8009408:	440b      	add	r3, r1
 800940a:	60a3      	str	r3, [r4, #8]
 800940c:	bfbb      	ittet	lt
 800940e:	323c      	addlt	r2, #60	; 0x3c
 8009410:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009414:	6062      	strge	r2, [r4, #4]
 8009416:	6062      	strlt	r2, [r4, #4]
 8009418:	bfb8      	it	lt
 800941a:	60a3      	strlt	r3, [r4, #8]
 800941c:	68a1      	ldr	r1, [r4, #8]
 800941e:	2917      	cmp	r1, #23
 8009420:	d911      	bls.n	8009446 <validate_structure+0x82>
 8009422:	2218      	movs	r2, #24
 8009424:	4668      	mov	r0, sp
 8009426:	f001 fb15 	bl	800aa54 <div>
 800942a:	9a01      	ldr	r2, [sp, #4]
 800942c:	68e3      	ldr	r3, [r4, #12]
 800942e:	9900      	ldr	r1, [sp, #0]
 8009430:	2a00      	cmp	r2, #0
 8009432:	440b      	add	r3, r1
 8009434:	60e3      	str	r3, [r4, #12]
 8009436:	bfbb      	ittet	lt
 8009438:	3218      	addlt	r2, #24
 800943a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800943e:	60a2      	strge	r2, [r4, #8]
 8009440:	60a2      	strlt	r2, [r4, #8]
 8009442:	bfb8      	it	lt
 8009444:	60e3      	strlt	r3, [r4, #12]
 8009446:	6921      	ldr	r1, [r4, #16]
 8009448:	290b      	cmp	r1, #11
 800944a:	d911      	bls.n	8009470 <validate_structure+0xac>
 800944c:	220c      	movs	r2, #12
 800944e:	4668      	mov	r0, sp
 8009450:	f001 fb00 	bl	800aa54 <div>
 8009454:	9a01      	ldr	r2, [sp, #4]
 8009456:	6963      	ldr	r3, [r4, #20]
 8009458:	9900      	ldr	r1, [sp, #0]
 800945a:	2a00      	cmp	r2, #0
 800945c:	440b      	add	r3, r1
 800945e:	6163      	str	r3, [r4, #20]
 8009460:	bfbb      	ittet	lt
 8009462:	320c      	addlt	r2, #12
 8009464:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009468:	6122      	strge	r2, [r4, #16]
 800946a:	6122      	strlt	r2, [r4, #16]
 800946c:	bfb8      	it	lt
 800946e:	6163      	strlt	r3, [r4, #20]
 8009470:	6963      	ldr	r3, [r4, #20]
 8009472:	0799      	lsls	r1, r3, #30
 8009474:	d120      	bne.n	80094b8 <validate_structure+0xf4>
 8009476:	2164      	movs	r1, #100	; 0x64
 8009478:	fb93 f2f1 	sdiv	r2, r3, r1
 800947c:	fb01 3212 	mls	r2, r1, r2, r3
 8009480:	b9e2      	cbnz	r2, 80094bc <validate_structure+0xf8>
 8009482:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009486:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800948a:	fb93 f2f1 	sdiv	r2, r3, r1
 800948e:	fb01 3312 	mls	r3, r1, r2, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	bf14      	ite	ne
 8009496:	231c      	movne	r3, #28
 8009498:	231d      	moveq	r3, #29
 800949a:	68e2      	ldr	r2, [r4, #12]
 800949c:	2a00      	cmp	r2, #0
 800949e:	dc0f      	bgt.n	80094c0 <validate_structure+0xfc>
 80094a0:	260b      	movs	r6, #11
 80094a2:	2064      	movs	r0, #100	; 0x64
 80094a4:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80094a8:	4f32      	ldr	r7, [pc, #200]	; (8009574 <validate_structure+0x1b0>)
 80094aa:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80094ae:	f1bc 0f00 	cmp.w	ip, #0
 80094b2:	dd14      	ble.n	80094de <validate_structure+0x11a>
 80094b4:	b003      	add	sp, #12
 80094b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b8:	231c      	movs	r3, #28
 80094ba:	e7ee      	b.n	800949a <validate_structure+0xd6>
 80094bc:	231d      	movs	r3, #29
 80094be:	e7ec      	b.n	800949a <validate_structure+0xd6>
 80094c0:	f04f 0c00 	mov.w	ip, #0
 80094c4:	2564      	movs	r5, #100	; 0x64
 80094c6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80094ca:	4f2a      	ldr	r7, [pc, #168]	; (8009574 <validate_structure+0x1b0>)
 80094cc:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80094d0:	2a01      	cmp	r2, #1
 80094d2:	d02f      	beq.n	8009534 <validate_structure+0x170>
 80094d4:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 80094d8:	4281      	cmp	r1, r0
 80094da:	dc2e      	bgt.n	800953a <validate_structure+0x176>
 80094dc:	e7ea      	b.n	80094b4 <validate_structure+0xf0>
 80094de:	6921      	ldr	r1, [r4, #16]
 80094e0:	3901      	subs	r1, #1
 80094e2:	6121      	str	r1, [r4, #16]
 80094e4:	3101      	adds	r1, #1
 80094e6:	d114      	bne.n	8009512 <validate_structure+0x14e>
 80094e8:	6963      	ldr	r3, [r4, #20]
 80094ea:	1e59      	subs	r1, r3, #1
 80094ec:	078a      	lsls	r2, r1, #30
 80094ee:	e9c4 6104 	strd	r6, r1, [r4, #16]
 80094f2:	d117      	bne.n	8009524 <validate_structure+0x160>
 80094f4:	fb91 f2f0 	sdiv	r2, r1, r0
 80094f8:	fb00 1112 	mls	r1, r0, r2, r1
 80094fc:	b9a1      	cbnz	r1, 8009528 <validate_structure+0x164>
 80094fe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8009502:	fb93 f2f5 	sdiv	r2, r3, r5
 8009506:	fb05 3312 	mls	r3, r5, r2, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	bf14      	ite	ne
 800950e:	231c      	movne	r3, #28
 8009510:	231d      	moveq	r3, #29
 8009512:	6922      	ldr	r2, [r4, #16]
 8009514:	2a01      	cmp	r2, #1
 8009516:	bf0c      	ite	eq
 8009518:	461a      	moveq	r2, r3
 800951a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800951e:	4462      	add	r2, ip
 8009520:	60e2      	str	r2, [r4, #12]
 8009522:	e7c2      	b.n	80094aa <validate_structure+0xe6>
 8009524:	231c      	movs	r3, #28
 8009526:	e7f4      	b.n	8009512 <validate_structure+0x14e>
 8009528:	231d      	movs	r3, #29
 800952a:	e7f2      	b.n	8009512 <validate_structure+0x14e>
 800952c:	231c      	movs	r3, #28
 800952e:	e7cd      	b.n	80094cc <validate_structure+0x108>
 8009530:	231d      	movs	r3, #29
 8009532:	e7cb      	b.n	80094cc <validate_structure+0x108>
 8009534:	428b      	cmp	r3, r1
 8009536:	dabd      	bge.n	80094b4 <validate_structure+0xf0>
 8009538:	4618      	mov	r0, r3
 800953a:	3201      	adds	r2, #1
 800953c:	1a09      	subs	r1, r1, r0
 800953e:	2a0c      	cmp	r2, #12
 8009540:	60e1      	str	r1, [r4, #12]
 8009542:	6122      	str	r2, [r4, #16]
 8009544:	d1c2      	bne.n	80094cc <validate_structure+0x108>
 8009546:	6963      	ldr	r3, [r4, #20]
 8009548:	1c5a      	adds	r2, r3, #1
 800954a:	0791      	lsls	r1, r2, #30
 800954c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8009550:	d1ec      	bne.n	800952c <validate_structure+0x168>
 8009552:	fb92 f1f5 	sdiv	r1, r2, r5
 8009556:	fb05 2211 	mls	r2, r5, r1, r2
 800955a:	2a00      	cmp	r2, #0
 800955c:	d1e8      	bne.n	8009530 <validate_structure+0x16c>
 800955e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8009562:	fb93 f2f6 	sdiv	r2, r3, r6
 8009566:	fb06 3312 	mls	r3, r6, r2, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	bf14      	ite	ne
 800956e:	231c      	movne	r3, #28
 8009570:	231d      	moveq	r3, #29
 8009572:	e7ab      	b.n	80094cc <validate_structure+0x108>
 8009574:	0800d69c 	.word	0x0800d69c

08009578 <mktime>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	b089      	sub	sp, #36	; 0x24
 800957e:	4606      	mov	r6, r0
 8009580:	f002 fa7c 	bl	800ba7c <__gettzinfo>
 8009584:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8009588:	4680      	mov	r8, r0
 800958a:	4630      	mov	r0, r6
 800958c:	f7ff ff1a 	bl	80093c4 <validate_structure>
 8009590:	e9d6 3000 	ldrd	r3, r0, [r6]
 8009594:	fb0a 3a00 	mla	sl, sl, r0, r3
 8009598:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800959c:	68b0      	ldr	r0, [r6, #8]
 800959e:	4abd      	ldr	r2, [pc, #756]	; (8009894 <mktime+0x31c>)
 80095a0:	fb03 aa00 	mla	sl, r3, r0, sl
 80095a4:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 80095a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80095ac:	3c01      	subs	r4, #1
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80095b4:	4414      	add	r4, r2
 80095b6:	6975      	ldr	r5, [r6, #20]
 80095b8:	dd11      	ble.n	80095de <mktime+0x66>
 80095ba:	07a9      	lsls	r1, r5, #30
 80095bc:	d10f      	bne.n	80095de <mktime+0x66>
 80095be:	2264      	movs	r2, #100	; 0x64
 80095c0:	fb95 f3f2 	sdiv	r3, r5, r2
 80095c4:	fb02 5313 	mls	r3, r2, r3, r5
 80095c8:	b943      	cbnz	r3, 80095dc <mktime+0x64>
 80095ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80095ce:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 80095d2:	fb91 f3f2 	sdiv	r3, r1, r2
 80095d6:	fb02 1313 	mls	r3, r2, r3, r1
 80095da:	b903      	cbnz	r3, 80095de <mktime+0x66>
 80095dc:	3401      	adds	r4, #1
 80095de:	f644 6220 	movw	r2, #20000	; 0x4e20
 80095e2:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 80095e6:	3310      	adds	r3, #16
 80095e8:	4293      	cmp	r3, r2
 80095ea:	61f4      	str	r4, [r6, #28]
 80095ec:	f200 8179 	bhi.w	80098e2 <mktime+0x36a>
 80095f0:	2d46      	cmp	r5, #70	; 0x46
 80095f2:	f340 8084 	ble.w	80096fe <mktime+0x186>
 80095f6:	2346      	movs	r3, #70	; 0x46
 80095f8:	f240 176d 	movw	r7, #365	; 0x16d
 80095fc:	2164      	movs	r1, #100	; 0x64
 80095fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009602:	079a      	lsls	r2, r3, #30
 8009604:	d175      	bne.n	80096f2 <mktime+0x17a>
 8009606:	fb93 f2f1 	sdiv	r2, r3, r1
 800960a:	fb01 3212 	mls	r2, r1, r2, r3
 800960e:	2a00      	cmp	r2, #0
 8009610:	d172      	bne.n	80096f8 <mktime+0x180>
 8009612:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8009616:	fb9c f2f0 	sdiv	r2, ip, r0
 800961a:	fb00 c212 	mls	r2, r0, r2, ip
 800961e:	2a00      	cmp	r2, #0
 8009620:	bf14      	ite	ne
 8009622:	463a      	movne	r2, r7
 8009624:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009628:	3301      	adds	r3, #1
 800962a:	429d      	cmp	r5, r3
 800962c:	4414      	add	r4, r2
 800962e:	d1e8      	bne.n	8009602 <mktime+0x8a>
 8009630:	4b99      	ldr	r3, [pc, #612]	; (8009898 <mktime+0x320>)
 8009632:	4363      	muls	r3, r4
 8009634:	eb1a 0103 	adds.w	r1, sl, r3
 8009638:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 800963c:	e9cd 1200 	strd	r1, r2, [sp]
 8009640:	f000 ffc2 	bl	800a5c8 <__tz_lock>
 8009644:	f000 ffc2 	bl	800a5cc <_tzset_unlocked>
 8009648:	4b94      	ldr	r3, [pc, #592]	; (800989c <mktime+0x324>)
 800964a:	f8d3 9000 	ldr.w	r9, [r3]
 800964e:	f1b9 0f00 	cmp.w	r9, #0
 8009652:	d045      	beq.n	80096e0 <mktime+0x168>
 8009654:	f8d6 9020 	ldr.w	r9, [r6, #32]
 8009658:	6970      	ldr	r0, [r6, #20]
 800965a:	464f      	mov	r7, r9
 800965c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009660:	2f01      	cmp	r7, #1
 8009662:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009666:	bfa8      	it	ge
 8009668:	2701      	movge	r7, #1
 800966a:	4283      	cmp	r3, r0
 800966c:	f040 8089 	bne.w	8009782 <mktime+0x20a>
 8009670:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8009674:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8009678:	460a      	mov	r2, r1
 800967a:	17cb      	asrs	r3, r1, #31
 800967c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009680:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8009684:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009688:	1a12      	subs	r2, r2, r0
 800968a:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 800968e:	4692      	mov	sl, r2
 8009690:	469b      	mov	fp, r3
 8009692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009696:	4552      	cmp	r2, sl
 8009698:	eb73 0c0b 	sbcs.w	ip, r3, fp
 800969c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80096a0:	da76      	bge.n	8009790 <mktime+0x218>
 80096a2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80096a6:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80096aa:	ebb2 0a0a 	subs.w	sl, r2, sl
 80096ae:	eb63 0b0b 	sbc.w	fp, r3, fp
 80096b2:	f8d8 3000 	ldr.w	r3, [r8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d079      	beq.n	80097ae <mktime+0x236>
 80096ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096be:	4552      	cmp	r2, sl
 80096c0:	eb73 030b 	sbcs.w	r3, r3, fp
 80096c4:	db07      	blt.n	80096d6 <mktime+0x15e>
 80096c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096ca:	e9dd ab00 	ldrd	sl, fp, [sp]
 80096ce:	4592      	cmp	sl, r2
 80096d0:	eb7b 0303 	sbcs.w	r3, fp, r3
 80096d4:	db71      	blt.n	80097ba <mktime+0x242>
 80096d6:	f1b9 0f00 	cmp.w	r9, #0
 80096da:	f04f 0900 	mov.w	r9, #0
 80096de:	da71      	bge.n	80097c4 <mktime+0x24c>
 80096e0:	e9dd ab00 	ldrd	sl, fp, [sp]
 80096e4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80096e8:	eb1a 0a03 	adds.w	sl, sl, r3
 80096ec:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80096f0:	e0b4      	b.n	800985c <mktime+0x2e4>
 80096f2:	f240 126d 	movw	r2, #365	; 0x16d
 80096f6:	e797      	b.n	8009628 <mktime+0xb0>
 80096f8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80096fc:	e794      	b.n	8009628 <mktime+0xb0>
 80096fe:	d097      	beq.n	8009630 <mktime+0xb8>
 8009700:	2345      	movs	r3, #69	; 0x45
 8009702:	f240 176d 	movw	r7, #365	; 0x16d
 8009706:	2164      	movs	r1, #100	; 0x64
 8009708:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800970c:	e012      	b.n	8009734 <mktime+0x1bc>
 800970e:	bb62      	cbnz	r2, 800976a <mktime+0x1f2>
 8009710:	fb93 f2f1 	sdiv	r2, r3, r1
 8009714:	fb01 3212 	mls	r2, r1, r2, r3
 8009718:	bb52      	cbnz	r2, 8009770 <mktime+0x1f8>
 800971a:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800971e:	fb9c f2f0 	sdiv	r2, ip, r0
 8009722:	fb00 c212 	mls	r2, r0, r2, ip
 8009726:	2a00      	cmp	r2, #0
 8009728:	bf14      	ite	ne
 800972a:	463a      	movne	r2, r7
 800972c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009730:	1aa4      	subs	r4, r4, r2
 8009732:	3b01      	subs	r3, #1
 8009734:	429d      	cmp	r5, r3
 8009736:	f003 0203 	and.w	r2, r3, #3
 800973a:	dbe8      	blt.n	800970e <mktime+0x196>
 800973c:	b9da      	cbnz	r2, 8009776 <mktime+0x1fe>
 800973e:	2264      	movs	r2, #100	; 0x64
 8009740:	fb95 f3f2 	sdiv	r3, r5, r2
 8009744:	fb02 5313 	mls	r3, r2, r3, r5
 8009748:	b9c3      	cbnz	r3, 800977c <mktime+0x204>
 800974a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800974e:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8009752:	fb91 f3f2 	sdiv	r3, r1, r2
 8009756:	fb02 1313 	mls	r3, r2, r3, r1
 800975a:	2b00      	cmp	r3, #0
 800975c:	f240 136d 	movw	r3, #365	; 0x16d
 8009760:	bf08      	it	eq
 8009762:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8009766:	1ae4      	subs	r4, r4, r3
 8009768:	e762      	b.n	8009630 <mktime+0xb8>
 800976a:	f240 126d 	movw	r2, #365	; 0x16d
 800976e:	e7df      	b.n	8009730 <mktime+0x1b8>
 8009770:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009774:	e7dc      	b.n	8009730 <mktime+0x1b8>
 8009776:	f240 136d 	movw	r3, #365	; 0x16d
 800977a:	e7f4      	b.n	8009766 <mktime+0x1ee>
 800977c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8009780:	e7f1      	b.n	8009766 <mktime+0x1ee>
 8009782:	f000 fe79 	bl	800a478 <__tzcalc_limits>
 8009786:	2800      	cmp	r0, #0
 8009788:	f47f af72 	bne.w	8009670 <mktime+0xf8>
 800978c:	46b9      	mov	r9, r7
 800978e:	e057      	b.n	8009840 <mktime+0x2c8>
 8009790:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009794:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009798:	ebb2 020a 	subs.w	r2, r2, sl
 800979c:	eb63 030b 	sbc.w	r3, r3, fp
 80097a0:	e9dd ab00 	ldrd	sl, fp, [sp]
 80097a4:	4592      	cmp	sl, r2
 80097a6:	eb7b 0303 	sbcs.w	r3, fp, r3
 80097aa:	dbef      	blt.n	800978c <mktime+0x214>
 80097ac:	e779      	b.n	80096a2 <mktime+0x12a>
 80097ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097b2:	4552      	cmp	r2, sl
 80097b4:	eb73 030b 	sbcs.w	r3, r3, fp
 80097b8:	db85      	blt.n	80096c6 <mktime+0x14e>
 80097ba:	f1b9 0f00 	cmp.w	r9, #0
 80097be:	db43      	blt.n	8009848 <mktime+0x2d0>
 80097c0:	f04f 0901 	mov.w	r9, #1
 80097c4:	ea87 0709 	eor.w	r7, r7, r9
 80097c8:	2f01      	cmp	r7, #1
 80097ca:	d139      	bne.n	8009840 <mktime+0x2c8>
 80097cc:	1a40      	subs	r0, r0, r1
 80097ce:	f1b9 0f00 	cmp.w	r9, #0
 80097d2:	d100      	bne.n	80097d6 <mktime+0x25e>
 80097d4:	4240      	negs	r0, r0
 80097d6:	6833      	ldr	r3, [r6, #0]
 80097d8:	4403      	add	r3, r0
 80097da:	6033      	str	r3, [r6, #0]
 80097dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097e0:	1812      	adds	r2, r2, r0
 80097e2:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 80097e6:	e9cd 2300 	strd	r2, r3, [sp]
 80097ea:	68f2      	ldr	r2, [r6, #12]
 80097ec:	4630      	mov	r0, r6
 80097ee:	9202      	str	r2, [sp, #8]
 80097f0:	f7ff fde8 	bl	80093c4 <validate_structure>
 80097f4:	68f3      	ldr	r3, [r6, #12]
 80097f6:	9a02      	ldr	r2, [sp, #8]
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	d021      	beq.n	8009840 <mktime+0x2c8>
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	dc40      	bgt.n	8009882 <mktime+0x30a>
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	bfa8      	it	ge
 8009806:	461f      	movge	r7, r3
 8009808:	69f3      	ldr	r3, [r6, #28]
 800980a:	443c      	add	r4, r7
 800980c:	18ff      	adds	r7, r7, r3
 800980e:	d547      	bpl.n	80098a0 <mktime+0x328>
 8009810:	1e6a      	subs	r2, r5, #1
 8009812:	0791      	lsls	r1, r2, #30
 8009814:	d138      	bne.n	8009888 <mktime+0x310>
 8009816:	2164      	movs	r1, #100	; 0x64
 8009818:	fb92 f3f1 	sdiv	r3, r2, r1
 800981c:	fb01 2313 	mls	r3, r1, r3, r2
 8009820:	bbab      	cbnz	r3, 800988e <mktime+0x316>
 8009822:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009826:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 800982a:	fb95 f3f2 	sdiv	r3, r5, r2
 800982e:	fb02 5513 	mls	r5, r2, r3, r5
 8009832:	2d00      	cmp	r5, #0
 8009834:	f240 136d 	movw	r3, #365	; 0x16d
 8009838:	bf18      	it	ne
 800983a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800983e:	61f3      	str	r3, [r6, #28]
 8009840:	f1b9 0f01 	cmp.w	r9, #1
 8009844:	f47f af4c 	bne.w	80096e0 <mktime+0x168>
 8009848:	e9dd ab00 	ldrd	sl, fp, [sp]
 800984c:	f04f 0901 	mov.w	r9, #1
 8009850:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8009854:	eb1a 0a03 	adds.w	sl, sl, r3
 8009858:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800985c:	f000 feb5 	bl	800a5ca <__tz_unlock>
 8009860:	2307      	movs	r3, #7
 8009862:	3404      	adds	r4, #4
 8009864:	fb94 f3f3 	sdiv	r3, r4, r3
 8009868:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800986c:	1ae4      	subs	r4, r4, r3
 800986e:	bf48      	it	mi
 8009870:	3407      	addmi	r4, #7
 8009872:	f8c6 9020 	str.w	r9, [r6, #32]
 8009876:	61b4      	str	r4, [r6, #24]
 8009878:	4650      	mov	r0, sl
 800987a:	4659      	mov	r1, fp
 800987c:	b009      	add	sp, #36	; 0x24
 800987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009882:	f04f 37ff 	mov.w	r7, #4294967295
 8009886:	e7bf      	b.n	8009808 <mktime+0x290>
 8009888:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800988c:	e7d7      	b.n	800983e <mktime+0x2c6>
 800988e:	f240 136d 	movw	r3, #365	; 0x16d
 8009892:	e7d4      	b.n	800983e <mktime+0x2c6>
 8009894:	0800d6cc 	.word	0x0800d6cc
 8009898:	00015180 	.word	0x00015180
 800989c:	200002d4 	.word	0x200002d4
 80098a0:	07ab      	lsls	r3, r5, #30
 80098a2:	d118      	bne.n	80098d6 <mktime+0x35e>
 80098a4:	2264      	movs	r2, #100	; 0x64
 80098a6:	fb95 f3f2 	sdiv	r3, r5, r2
 80098aa:	fb02 5313 	mls	r3, r2, r3, r5
 80098ae:	b9ab      	cbnz	r3, 80098dc <mktime+0x364>
 80098b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80098b4:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 80098b8:	fb95 f3f2 	sdiv	r3, r5, r2
 80098bc:	fb02 5513 	mls	r5, r2, r3, r5
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	f240 136d 	movw	r3, #365	; 0x16d
 80098c6:	bf08      	it	eq
 80098c8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80098cc:	429f      	cmp	r7, r3
 80098ce:	bfa8      	it	ge
 80098d0:	1aff      	subge	r7, r7, r3
 80098d2:	61f7      	str	r7, [r6, #28]
 80098d4:	e7b4      	b.n	8009840 <mktime+0x2c8>
 80098d6:	f240 136d 	movw	r3, #365	; 0x16d
 80098da:	e7f7      	b.n	80098cc <mktime+0x354>
 80098dc:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80098e0:	e7f4      	b.n	80098cc <mktime+0x354>
 80098e2:	f04f 3aff 	mov.w	sl, #4294967295
 80098e6:	f04f 3bff 	mov.w	fp, #4294967295
 80098ea:	e7c5      	b.n	8009878 <mktime+0x300>

080098ec <_free_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4605      	mov	r5, r0
 80098f0:	2900      	cmp	r1, #0
 80098f2:	d043      	beq.n	800997c <_free_r+0x90>
 80098f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f8:	1f0c      	subs	r4, r1, #4
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	bfb8      	it	lt
 80098fe:	18e4      	addlt	r4, r4, r3
 8009900:	f002 f94b 	bl	800bb9a <__malloc_lock>
 8009904:	4a1e      	ldr	r2, [pc, #120]	; (8009980 <_free_r+0x94>)
 8009906:	6813      	ldr	r3, [r2, #0]
 8009908:	4610      	mov	r0, r2
 800990a:	b933      	cbnz	r3, 800991a <_free_r+0x2e>
 800990c:	6063      	str	r3, [r4, #4]
 800990e:	6014      	str	r4, [r2, #0]
 8009910:	4628      	mov	r0, r5
 8009912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009916:	f002 b941 	b.w	800bb9c <__malloc_unlock>
 800991a:	42a3      	cmp	r3, r4
 800991c:	d90b      	bls.n	8009936 <_free_r+0x4a>
 800991e:	6821      	ldr	r1, [r4, #0]
 8009920:	1862      	adds	r2, r4, r1
 8009922:	4293      	cmp	r3, r2
 8009924:	bf01      	itttt	eq
 8009926:	681a      	ldreq	r2, [r3, #0]
 8009928:	685b      	ldreq	r3, [r3, #4]
 800992a:	1852      	addeq	r2, r2, r1
 800992c:	6022      	streq	r2, [r4, #0]
 800992e:	6063      	str	r3, [r4, #4]
 8009930:	6004      	str	r4, [r0, #0]
 8009932:	e7ed      	b.n	8009910 <_free_r+0x24>
 8009934:	4613      	mov	r3, r2
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	b10a      	cbz	r2, 800993e <_free_r+0x52>
 800993a:	42a2      	cmp	r2, r4
 800993c:	d9fa      	bls.n	8009934 <_free_r+0x48>
 800993e:	6819      	ldr	r1, [r3, #0]
 8009940:	1858      	adds	r0, r3, r1
 8009942:	42a0      	cmp	r0, r4
 8009944:	d10b      	bne.n	800995e <_free_r+0x72>
 8009946:	6820      	ldr	r0, [r4, #0]
 8009948:	4401      	add	r1, r0
 800994a:	1858      	adds	r0, r3, r1
 800994c:	4282      	cmp	r2, r0
 800994e:	6019      	str	r1, [r3, #0]
 8009950:	d1de      	bne.n	8009910 <_free_r+0x24>
 8009952:	6810      	ldr	r0, [r2, #0]
 8009954:	6852      	ldr	r2, [r2, #4]
 8009956:	4401      	add	r1, r0
 8009958:	6019      	str	r1, [r3, #0]
 800995a:	605a      	str	r2, [r3, #4]
 800995c:	e7d8      	b.n	8009910 <_free_r+0x24>
 800995e:	d902      	bls.n	8009966 <_free_r+0x7a>
 8009960:	230c      	movs	r3, #12
 8009962:	602b      	str	r3, [r5, #0]
 8009964:	e7d4      	b.n	8009910 <_free_r+0x24>
 8009966:	6820      	ldr	r0, [r4, #0]
 8009968:	1821      	adds	r1, r4, r0
 800996a:	428a      	cmp	r2, r1
 800996c:	bf01      	itttt	eq
 800996e:	6811      	ldreq	r1, [r2, #0]
 8009970:	6852      	ldreq	r2, [r2, #4]
 8009972:	1809      	addeq	r1, r1, r0
 8009974:	6021      	streq	r1, [r4, #0]
 8009976:	6062      	str	r2, [r4, #4]
 8009978:	605c      	str	r4, [r3, #4]
 800997a:	e7c9      	b.n	8009910 <_free_r+0x24>
 800997c:	bd38      	pop	{r3, r4, r5, pc}
 800997e:	bf00      	nop
 8009980:	200002b0 	.word	0x200002b0

08009984 <_malloc_r>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	1ccd      	adds	r5, r1, #3
 8009988:	f025 0503 	bic.w	r5, r5, #3
 800998c:	3508      	adds	r5, #8
 800998e:	2d0c      	cmp	r5, #12
 8009990:	bf38      	it	cc
 8009992:	250c      	movcc	r5, #12
 8009994:	2d00      	cmp	r5, #0
 8009996:	4606      	mov	r6, r0
 8009998:	db01      	blt.n	800999e <_malloc_r+0x1a>
 800999a:	42a9      	cmp	r1, r5
 800999c:	d903      	bls.n	80099a6 <_malloc_r+0x22>
 800999e:	230c      	movs	r3, #12
 80099a0:	6033      	str	r3, [r6, #0]
 80099a2:	2000      	movs	r0, #0
 80099a4:	bd70      	pop	{r4, r5, r6, pc}
 80099a6:	f002 f8f8 	bl	800bb9a <__malloc_lock>
 80099aa:	4a21      	ldr	r2, [pc, #132]	; (8009a30 <_malloc_r+0xac>)
 80099ac:	6814      	ldr	r4, [r2, #0]
 80099ae:	4621      	mov	r1, r4
 80099b0:	b991      	cbnz	r1, 80099d8 <_malloc_r+0x54>
 80099b2:	4c20      	ldr	r4, [pc, #128]	; (8009a34 <_malloc_r+0xb0>)
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	b91b      	cbnz	r3, 80099c0 <_malloc_r+0x3c>
 80099b8:	4630      	mov	r0, r6
 80099ba:	f000 fd1d 	bl	800a3f8 <_sbrk_r>
 80099be:	6020      	str	r0, [r4, #0]
 80099c0:	4629      	mov	r1, r5
 80099c2:	4630      	mov	r0, r6
 80099c4:	f000 fd18 	bl	800a3f8 <_sbrk_r>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d124      	bne.n	8009a16 <_malloc_r+0x92>
 80099cc:	230c      	movs	r3, #12
 80099ce:	4630      	mov	r0, r6
 80099d0:	6033      	str	r3, [r6, #0]
 80099d2:	f002 f8e3 	bl	800bb9c <__malloc_unlock>
 80099d6:	e7e4      	b.n	80099a2 <_malloc_r+0x1e>
 80099d8:	680b      	ldr	r3, [r1, #0]
 80099da:	1b5b      	subs	r3, r3, r5
 80099dc:	d418      	bmi.n	8009a10 <_malloc_r+0x8c>
 80099de:	2b0b      	cmp	r3, #11
 80099e0:	d90f      	bls.n	8009a02 <_malloc_r+0x7e>
 80099e2:	600b      	str	r3, [r1, #0]
 80099e4:	18cc      	adds	r4, r1, r3
 80099e6:	50cd      	str	r5, [r1, r3]
 80099e8:	4630      	mov	r0, r6
 80099ea:	f002 f8d7 	bl	800bb9c <__malloc_unlock>
 80099ee:	f104 000b 	add.w	r0, r4, #11
 80099f2:	1d23      	adds	r3, r4, #4
 80099f4:	f020 0007 	bic.w	r0, r0, #7
 80099f8:	1ac3      	subs	r3, r0, r3
 80099fa:	d0d3      	beq.n	80099a4 <_malloc_r+0x20>
 80099fc:	425a      	negs	r2, r3
 80099fe:	50e2      	str	r2, [r4, r3]
 8009a00:	e7d0      	b.n	80099a4 <_malloc_r+0x20>
 8009a02:	684b      	ldr	r3, [r1, #4]
 8009a04:	428c      	cmp	r4, r1
 8009a06:	bf16      	itet	ne
 8009a08:	6063      	strne	r3, [r4, #4]
 8009a0a:	6013      	streq	r3, [r2, #0]
 8009a0c:	460c      	movne	r4, r1
 8009a0e:	e7eb      	b.n	80099e8 <_malloc_r+0x64>
 8009a10:	460c      	mov	r4, r1
 8009a12:	6849      	ldr	r1, [r1, #4]
 8009a14:	e7cc      	b.n	80099b0 <_malloc_r+0x2c>
 8009a16:	1cc4      	adds	r4, r0, #3
 8009a18:	f024 0403 	bic.w	r4, r4, #3
 8009a1c:	42a0      	cmp	r0, r4
 8009a1e:	d005      	beq.n	8009a2c <_malloc_r+0xa8>
 8009a20:	1a21      	subs	r1, r4, r0
 8009a22:	4630      	mov	r0, r6
 8009a24:	f000 fce8 	bl	800a3f8 <_sbrk_r>
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d0cf      	beq.n	80099cc <_malloc_r+0x48>
 8009a2c:	6025      	str	r5, [r4, #0]
 8009a2e:	e7db      	b.n	80099e8 <_malloc_r+0x64>
 8009a30:	200002b0 	.word	0x200002b0
 8009a34:	200002b4 	.word	0x200002b4

08009a38 <__cvt>:
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a3e:	461e      	mov	r6, r3
 8009a40:	bfbb      	ittet	lt
 8009a42:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009a46:	461e      	movlt	r6, r3
 8009a48:	2300      	movge	r3, #0
 8009a4a:	232d      	movlt	r3, #45	; 0x2d
 8009a4c:	b088      	sub	sp, #32
 8009a4e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009a50:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009a54:	f027 0720 	bic.w	r7, r7, #32
 8009a58:	2f46      	cmp	r7, #70	; 0x46
 8009a5a:	4614      	mov	r4, r2
 8009a5c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009a5e:	700b      	strb	r3, [r1, #0]
 8009a60:	d004      	beq.n	8009a6c <__cvt+0x34>
 8009a62:	2f45      	cmp	r7, #69	; 0x45
 8009a64:	d100      	bne.n	8009a68 <__cvt+0x30>
 8009a66:	3501      	adds	r5, #1
 8009a68:	2302      	movs	r3, #2
 8009a6a:	e000      	b.n	8009a6e <__cvt+0x36>
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	aa07      	add	r2, sp, #28
 8009a70:	9204      	str	r2, [sp, #16]
 8009a72:	aa06      	add	r2, sp, #24
 8009a74:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009a78:	e9cd 3500 	strd	r3, r5, [sp]
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	4633      	mov	r3, r6
 8009a80:	f001 f88a 	bl	800ab98 <_dtoa_r>
 8009a84:	2f47      	cmp	r7, #71	; 0x47
 8009a86:	4680      	mov	r8, r0
 8009a88:	d102      	bne.n	8009a90 <__cvt+0x58>
 8009a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a8c:	07db      	lsls	r3, r3, #31
 8009a8e:	d526      	bpl.n	8009ade <__cvt+0xa6>
 8009a90:	2f46      	cmp	r7, #70	; 0x46
 8009a92:	eb08 0905 	add.w	r9, r8, r5
 8009a96:	d111      	bne.n	8009abc <__cvt+0x84>
 8009a98:	f898 3000 	ldrb.w	r3, [r8]
 8009a9c:	2b30      	cmp	r3, #48	; 0x30
 8009a9e:	d10a      	bne.n	8009ab6 <__cvt+0x7e>
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	f7f6 ff88 	bl	80009bc <__aeabi_dcmpeq>
 8009aac:	b918      	cbnz	r0, 8009ab6 <__cvt+0x7e>
 8009aae:	f1c5 0501 	rsb	r5, r5, #1
 8009ab2:	f8ca 5000 	str.w	r5, [sl]
 8009ab6:	f8da 3000 	ldr.w	r3, [sl]
 8009aba:	4499      	add	r9, r3
 8009abc:	2200      	movs	r2, #0
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	f7f6 ff7a 	bl	80009bc <__aeabi_dcmpeq>
 8009ac8:	b938      	cbnz	r0, 8009ada <__cvt+0xa2>
 8009aca:	2230      	movs	r2, #48	; 0x30
 8009acc:	9b07      	ldr	r3, [sp, #28]
 8009ace:	454b      	cmp	r3, r9
 8009ad0:	d205      	bcs.n	8009ade <__cvt+0xa6>
 8009ad2:	1c59      	adds	r1, r3, #1
 8009ad4:	9107      	str	r1, [sp, #28]
 8009ad6:	701a      	strb	r2, [r3, #0]
 8009ad8:	e7f8      	b.n	8009acc <__cvt+0x94>
 8009ada:	f8cd 901c 	str.w	r9, [sp, #28]
 8009ade:	4640      	mov	r0, r8
 8009ae0:	9b07      	ldr	r3, [sp, #28]
 8009ae2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ae4:	eba3 0308 	sub.w	r3, r3, r8
 8009ae8:	6013      	str	r3, [r2, #0]
 8009aea:	b008      	add	sp, #32
 8009aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009af0 <__exponent>:
 8009af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009af2:	2900      	cmp	r1, #0
 8009af4:	bfb4      	ite	lt
 8009af6:	232d      	movlt	r3, #45	; 0x2d
 8009af8:	232b      	movge	r3, #43	; 0x2b
 8009afa:	4604      	mov	r4, r0
 8009afc:	bfb8      	it	lt
 8009afe:	4249      	neglt	r1, r1
 8009b00:	2909      	cmp	r1, #9
 8009b02:	f804 2b02 	strb.w	r2, [r4], #2
 8009b06:	7043      	strb	r3, [r0, #1]
 8009b08:	dd21      	ble.n	8009b4e <__exponent+0x5e>
 8009b0a:	f10d 0307 	add.w	r3, sp, #7
 8009b0e:	461f      	mov	r7, r3
 8009b10:	260a      	movs	r6, #10
 8009b12:	fb91 f5f6 	sdiv	r5, r1, r6
 8009b16:	fb06 1115 	mls	r1, r6, r5, r1
 8009b1a:	2d09      	cmp	r5, #9
 8009b1c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009b20:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b24:	f103 32ff 	add.w	r2, r3, #4294967295
 8009b28:	4629      	mov	r1, r5
 8009b2a:	dc09      	bgt.n	8009b40 <__exponent+0x50>
 8009b2c:	3130      	adds	r1, #48	; 0x30
 8009b2e:	3b02      	subs	r3, #2
 8009b30:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009b34:	42bb      	cmp	r3, r7
 8009b36:	4622      	mov	r2, r4
 8009b38:	d304      	bcc.n	8009b44 <__exponent+0x54>
 8009b3a:	1a10      	subs	r0, r2, r0
 8009b3c:	b003      	add	sp, #12
 8009b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b40:	4613      	mov	r3, r2
 8009b42:	e7e6      	b.n	8009b12 <__exponent+0x22>
 8009b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b48:	f804 2b01 	strb.w	r2, [r4], #1
 8009b4c:	e7f2      	b.n	8009b34 <__exponent+0x44>
 8009b4e:	2330      	movs	r3, #48	; 0x30
 8009b50:	4419      	add	r1, r3
 8009b52:	7083      	strb	r3, [r0, #2]
 8009b54:	1d02      	adds	r2, r0, #4
 8009b56:	70c1      	strb	r1, [r0, #3]
 8009b58:	e7ef      	b.n	8009b3a <__exponent+0x4a>
	...

08009b5c <_printf_float>:
 8009b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	b091      	sub	sp, #68	; 0x44
 8009b62:	460c      	mov	r4, r1
 8009b64:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009b66:	4693      	mov	fp, r2
 8009b68:	461e      	mov	r6, r3
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	f001 ff8a 	bl	800ba84 <_localeconv_r>
 8009b70:	6803      	ldr	r3, [r0, #0]
 8009b72:	4618      	mov	r0, r3
 8009b74:	9309      	str	r3, [sp, #36]	; 0x24
 8009b76:	f7f6 faeb 	bl	8000150 <strlen>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	900a      	str	r0, [sp, #40]	; 0x28
 8009b82:	3307      	adds	r3, #7
 8009b84:	f023 0307 	bic.w	r3, r3, #7
 8009b88:	f103 0208 	add.w	r2, r3, #8
 8009b8c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009b90:	f8d4 a000 	ldr.w	sl, [r4]
 8009b94:	603a      	str	r2, [r7, #0]
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b9e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009ba2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bac:	4ba6      	ldr	r3, [pc, #664]	; (8009e48 <_printf_float+0x2ec>)
 8009bae:	4638      	mov	r0, r7
 8009bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bb2:	f7f6 ff35 	bl	8000a20 <__aeabi_dcmpun>
 8009bb6:	bb68      	cbnz	r0, 8009c14 <_printf_float+0xb8>
 8009bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bbc:	4ba2      	ldr	r3, [pc, #648]	; (8009e48 <_printf_float+0x2ec>)
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bc2:	f7f6 ff0f 	bl	80009e4 <__aeabi_dcmple>
 8009bc6:	bb28      	cbnz	r0, 8009c14 <_printf_float+0xb8>
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2300      	movs	r3, #0
 8009bcc:	4638      	mov	r0, r7
 8009bce:	4649      	mov	r1, r9
 8009bd0:	f7f6 fefe 	bl	80009d0 <__aeabi_dcmplt>
 8009bd4:	b110      	cbz	r0, 8009bdc <_printf_float+0x80>
 8009bd6:	232d      	movs	r3, #45	; 0x2d
 8009bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bdc:	4f9b      	ldr	r7, [pc, #620]	; (8009e4c <_printf_float+0x2f0>)
 8009bde:	4b9c      	ldr	r3, [pc, #624]	; (8009e50 <_printf_float+0x2f4>)
 8009be0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009be4:	bf98      	it	ls
 8009be6:	461f      	movls	r7, r3
 8009be8:	2303      	movs	r3, #3
 8009bea:	f04f 0900 	mov.w	r9, #0
 8009bee:	6123      	str	r3, [r4, #16]
 8009bf0:	f02a 0304 	bic.w	r3, sl, #4
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	9600      	str	r6, [sp, #0]
 8009bf8:	465b      	mov	r3, fp
 8009bfa:	aa0f      	add	r2, sp, #60	; 0x3c
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f000 f9e2 	bl	8009fc8 <_printf_common>
 8009c04:	3001      	adds	r0, #1
 8009c06:	f040 8090 	bne.w	8009d2a <_printf_float+0x1ce>
 8009c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0e:	b011      	add	sp, #68	; 0x44
 8009c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c14:	463a      	mov	r2, r7
 8009c16:	464b      	mov	r3, r9
 8009c18:	4638      	mov	r0, r7
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f6 ff00 	bl	8000a20 <__aeabi_dcmpun>
 8009c20:	b110      	cbz	r0, 8009c28 <_printf_float+0xcc>
 8009c22:	4f8c      	ldr	r7, [pc, #560]	; (8009e54 <_printf_float+0x2f8>)
 8009c24:	4b8c      	ldr	r3, [pc, #560]	; (8009e58 <_printf_float+0x2fc>)
 8009c26:	e7db      	b.n	8009be0 <_printf_float+0x84>
 8009c28:	6863      	ldr	r3, [r4, #4]
 8009c2a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009c2e:	1c59      	adds	r1, r3, #1
 8009c30:	a80d      	add	r0, sp, #52	; 0x34
 8009c32:	a90e      	add	r1, sp, #56	; 0x38
 8009c34:	d140      	bne.n	8009cb8 <_printf_float+0x15c>
 8009c36:	2306      	movs	r3, #6
 8009c38:	6063      	str	r3, [r4, #4]
 8009c3a:	f04f 0c00 	mov.w	ip, #0
 8009c3e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009c42:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009c46:	6863      	ldr	r3, [r4, #4]
 8009c48:	6022      	str	r2, [r4, #0]
 8009c4a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	463a      	mov	r2, r7
 8009c52:	464b      	mov	r3, r9
 8009c54:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009c58:	4628      	mov	r0, r5
 8009c5a:	f7ff feed 	bl	8009a38 <__cvt>
 8009c5e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8009c62:	2b47      	cmp	r3, #71	; 0x47
 8009c64:	4607      	mov	r7, r0
 8009c66:	d109      	bne.n	8009c7c <_printf_float+0x120>
 8009c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c6a:	1cd8      	adds	r0, r3, #3
 8009c6c:	db02      	blt.n	8009c74 <_printf_float+0x118>
 8009c6e:	6862      	ldr	r2, [r4, #4]
 8009c70:	4293      	cmp	r3, r2
 8009c72:	dd47      	ble.n	8009d04 <_printf_float+0x1a8>
 8009c74:	f1a8 0802 	sub.w	r8, r8, #2
 8009c78:	fa5f f888 	uxtb.w	r8, r8
 8009c7c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009c80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c82:	d824      	bhi.n	8009cce <_printf_float+0x172>
 8009c84:	3901      	subs	r1, #1
 8009c86:	4642      	mov	r2, r8
 8009c88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c8c:	910d      	str	r1, [sp, #52]	; 0x34
 8009c8e:	f7ff ff2f 	bl	8009af0 <__exponent>
 8009c92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c94:	4681      	mov	r9, r0
 8009c96:	1813      	adds	r3, r2, r0
 8009c98:	2a01      	cmp	r2, #1
 8009c9a:	6123      	str	r3, [r4, #16]
 8009c9c:	dc02      	bgt.n	8009ca4 <_printf_float+0x148>
 8009c9e:	6822      	ldr	r2, [r4, #0]
 8009ca0:	07d1      	lsls	r1, r2, #31
 8009ca2:	d501      	bpl.n	8009ca8 <_printf_float+0x14c>
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	6123      	str	r3, [r4, #16]
 8009ca8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0a2      	beq.n	8009bf6 <_printf_float+0x9a>
 8009cb0:	232d      	movs	r3, #45	; 0x2d
 8009cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cb6:	e79e      	b.n	8009bf6 <_printf_float+0x9a>
 8009cb8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009cbc:	f000 816e 	beq.w	8009f9c <_printf_float+0x440>
 8009cc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009cc4:	d1b9      	bne.n	8009c3a <_printf_float+0xde>
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1b7      	bne.n	8009c3a <_printf_float+0xde>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e7b4      	b.n	8009c38 <_printf_float+0xdc>
 8009cce:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009cd2:	d119      	bne.n	8009d08 <_printf_float+0x1ac>
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	6863      	ldr	r3, [r4, #4]
 8009cd8:	dd0c      	ble.n	8009cf4 <_printf_float+0x198>
 8009cda:	6121      	str	r1, [r4, #16]
 8009cdc:	b913      	cbnz	r3, 8009ce4 <_printf_float+0x188>
 8009cde:	6822      	ldr	r2, [r4, #0]
 8009ce0:	07d2      	lsls	r2, r2, #31
 8009ce2:	d502      	bpl.n	8009cea <_printf_float+0x18e>
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	440b      	add	r3, r1
 8009ce8:	6123      	str	r3, [r4, #16]
 8009cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cec:	f04f 0900 	mov.w	r9, #0
 8009cf0:	65a3      	str	r3, [r4, #88]	; 0x58
 8009cf2:	e7d9      	b.n	8009ca8 <_printf_float+0x14c>
 8009cf4:	b913      	cbnz	r3, 8009cfc <_printf_float+0x1a0>
 8009cf6:	6822      	ldr	r2, [r4, #0]
 8009cf8:	07d0      	lsls	r0, r2, #31
 8009cfa:	d501      	bpl.n	8009d00 <_printf_float+0x1a4>
 8009cfc:	3302      	adds	r3, #2
 8009cfe:	e7f3      	b.n	8009ce8 <_printf_float+0x18c>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e7f1      	b.n	8009ce8 <_printf_float+0x18c>
 8009d04:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009d08:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	db05      	blt.n	8009d1c <_printf_float+0x1c0>
 8009d10:	6822      	ldr	r2, [r4, #0]
 8009d12:	6123      	str	r3, [r4, #16]
 8009d14:	07d1      	lsls	r1, r2, #31
 8009d16:	d5e8      	bpl.n	8009cea <_printf_float+0x18e>
 8009d18:	3301      	adds	r3, #1
 8009d1a:	e7e5      	b.n	8009ce8 <_printf_float+0x18c>
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	bfcc      	ite	gt
 8009d20:	2301      	movgt	r3, #1
 8009d22:	f1c3 0302 	rsble	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	e7de      	b.n	8009ce8 <_printf_float+0x18c>
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	055a      	lsls	r2, r3, #21
 8009d2e:	d407      	bmi.n	8009d40 <_printf_float+0x1e4>
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	463a      	mov	r2, r7
 8009d34:	4659      	mov	r1, fp
 8009d36:	4628      	mov	r0, r5
 8009d38:	47b0      	blx	r6
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	d129      	bne.n	8009d92 <_printf_float+0x236>
 8009d3e:	e764      	b.n	8009c0a <_printf_float+0xae>
 8009d40:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009d44:	f240 80d7 	bls.w	8009ef6 <_printf_float+0x39a>
 8009d48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f7f6 fe34 	bl	80009bc <__aeabi_dcmpeq>
 8009d54:	b388      	cbz	r0, 8009dba <_printf_float+0x25e>
 8009d56:	2301      	movs	r3, #1
 8009d58:	4a40      	ldr	r2, [pc, #256]	; (8009e5c <_printf_float+0x300>)
 8009d5a:	4659      	mov	r1, fp
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	47b0      	blx	r6
 8009d60:	3001      	adds	r0, #1
 8009d62:	f43f af52 	beq.w	8009c0a <_printf_float+0xae>
 8009d66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	db02      	blt.n	8009d74 <_printf_float+0x218>
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	07d8      	lsls	r0, r3, #31
 8009d72:	d50e      	bpl.n	8009d92 <_printf_float+0x236>
 8009d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d78:	4659      	mov	r1, fp
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	47b0      	blx	r6
 8009d7e:	3001      	adds	r0, #1
 8009d80:	f43f af43 	beq.w	8009c0a <_printf_float+0xae>
 8009d84:	2700      	movs	r7, #0
 8009d86:	f104 081a 	add.w	r8, r4, #26
 8009d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	42bb      	cmp	r3, r7
 8009d90:	dc09      	bgt.n	8009da6 <_printf_float+0x24a>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	079f      	lsls	r7, r3, #30
 8009d96:	f100 80fd 	bmi.w	8009f94 <_printf_float+0x438>
 8009d9a:	68e0      	ldr	r0, [r4, #12]
 8009d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d9e:	4298      	cmp	r0, r3
 8009da0:	bfb8      	it	lt
 8009da2:	4618      	movlt	r0, r3
 8009da4:	e733      	b.n	8009c0e <_printf_float+0xb2>
 8009da6:	2301      	movs	r3, #1
 8009da8:	4642      	mov	r2, r8
 8009daa:	4659      	mov	r1, fp
 8009dac:	4628      	mov	r0, r5
 8009dae:	47b0      	blx	r6
 8009db0:	3001      	adds	r0, #1
 8009db2:	f43f af2a 	beq.w	8009c0a <_printf_float+0xae>
 8009db6:	3701      	adds	r7, #1
 8009db8:	e7e7      	b.n	8009d8a <_printf_float+0x22e>
 8009dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dc2b      	bgt.n	8009e18 <_printf_float+0x2bc>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4a26      	ldr	r2, [pc, #152]	; (8009e5c <_printf_float+0x300>)
 8009dc4:	4659      	mov	r1, fp
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	47b0      	blx	r6
 8009dca:	3001      	adds	r0, #1
 8009dcc:	f43f af1d 	beq.w	8009c0a <_printf_float+0xae>
 8009dd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dd2:	b923      	cbnz	r3, 8009dde <_printf_float+0x282>
 8009dd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dd6:	b913      	cbnz	r3, 8009dde <_printf_float+0x282>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	07d9      	lsls	r1, r3, #31
 8009ddc:	d5d9      	bpl.n	8009d92 <_printf_float+0x236>
 8009dde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009de2:	4659      	mov	r1, fp
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b0      	blx	r6
 8009de8:	3001      	adds	r0, #1
 8009dea:	f43f af0e 	beq.w	8009c0a <_printf_float+0xae>
 8009dee:	f04f 0800 	mov.w	r8, #0
 8009df2:	f104 091a 	add.w	r9, r4, #26
 8009df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009df8:	425b      	negs	r3, r3
 8009dfa:	4543      	cmp	r3, r8
 8009dfc:	dc01      	bgt.n	8009e02 <_printf_float+0x2a6>
 8009dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e00:	e797      	b.n	8009d32 <_printf_float+0x1d6>
 8009e02:	2301      	movs	r3, #1
 8009e04:	464a      	mov	r2, r9
 8009e06:	4659      	mov	r1, fp
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b0      	blx	r6
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	f43f aefc 	beq.w	8009c0a <_printf_float+0xae>
 8009e12:	f108 0801 	add.w	r8, r8, #1
 8009e16:	e7ee      	b.n	8009df6 <_printf_float+0x29a>
 8009e18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	bfa8      	it	ge
 8009e20:	461a      	movge	r2, r3
 8009e22:	2a00      	cmp	r2, #0
 8009e24:	4690      	mov	r8, r2
 8009e26:	dd07      	ble.n	8009e38 <_printf_float+0x2dc>
 8009e28:	4613      	mov	r3, r2
 8009e2a:	4659      	mov	r1, fp
 8009e2c:	463a      	mov	r2, r7
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b0      	blx	r6
 8009e32:	3001      	adds	r0, #1
 8009e34:	f43f aee9 	beq.w	8009c0a <_printf_float+0xae>
 8009e38:	f104 031a 	add.w	r3, r4, #26
 8009e3c:	f04f 0a00 	mov.w	sl, #0
 8009e40:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e46:	e015      	b.n	8009e74 <_printf_float+0x318>
 8009e48:	7fefffff 	.word	0x7fefffff
 8009e4c:	0800d700 	.word	0x0800d700
 8009e50:	0800d6fc 	.word	0x0800d6fc
 8009e54:	0800d708 	.word	0x0800d708
 8009e58:	0800d704 	.word	0x0800d704
 8009e5c:	0800d965 	.word	0x0800d965
 8009e60:	2301      	movs	r3, #1
 8009e62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e64:	4659      	mov	r1, fp
 8009e66:	4628      	mov	r0, r5
 8009e68:	47b0      	blx	r6
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	f43f aecd 	beq.w	8009c0a <_printf_float+0xae>
 8009e70:	f10a 0a01 	add.w	sl, sl, #1
 8009e74:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009e78:	eba9 0308 	sub.w	r3, r9, r8
 8009e7c:	4553      	cmp	r3, sl
 8009e7e:	dcef      	bgt.n	8009e60 <_printf_float+0x304>
 8009e80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009e84:	429a      	cmp	r2, r3
 8009e86:	444f      	add	r7, r9
 8009e88:	db14      	blt.n	8009eb4 <_printf_float+0x358>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	07da      	lsls	r2, r3, #31
 8009e8e:	d411      	bmi.n	8009eb4 <_printf_float+0x358>
 8009e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e94:	eba3 0209 	sub.w	r2, r3, r9
 8009e98:	eba3 0901 	sub.w	r9, r3, r1
 8009e9c:	4591      	cmp	r9, r2
 8009e9e:	bfa8      	it	ge
 8009ea0:	4691      	movge	r9, r2
 8009ea2:	f1b9 0f00 	cmp.w	r9, #0
 8009ea6:	dc0d      	bgt.n	8009ec4 <_printf_float+0x368>
 8009ea8:	2700      	movs	r7, #0
 8009eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eae:	f104 081a 	add.w	r8, r4, #26
 8009eb2:	e018      	b.n	8009ee6 <_printf_float+0x38a>
 8009eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eb8:	4659      	mov	r1, fp
 8009eba:	4628      	mov	r0, r5
 8009ebc:	47b0      	blx	r6
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	d1e6      	bne.n	8009e90 <_printf_float+0x334>
 8009ec2:	e6a2      	b.n	8009c0a <_printf_float+0xae>
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	463a      	mov	r2, r7
 8009ec8:	4659      	mov	r1, fp
 8009eca:	4628      	mov	r0, r5
 8009ecc:	47b0      	blx	r6
 8009ece:	3001      	adds	r0, #1
 8009ed0:	d1ea      	bne.n	8009ea8 <_printf_float+0x34c>
 8009ed2:	e69a      	b.n	8009c0a <_printf_float+0xae>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	4642      	mov	r2, r8
 8009ed8:	4659      	mov	r1, fp
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b0      	blx	r6
 8009ede:	3001      	adds	r0, #1
 8009ee0:	f43f ae93 	beq.w	8009c0a <_printf_float+0xae>
 8009ee4:	3701      	adds	r7, #1
 8009ee6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009eea:	1a9b      	subs	r3, r3, r2
 8009eec:	eba3 0309 	sub.w	r3, r3, r9
 8009ef0:	42bb      	cmp	r3, r7
 8009ef2:	dcef      	bgt.n	8009ed4 <_printf_float+0x378>
 8009ef4:	e74d      	b.n	8009d92 <_printf_float+0x236>
 8009ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ef8:	2a01      	cmp	r2, #1
 8009efa:	dc01      	bgt.n	8009f00 <_printf_float+0x3a4>
 8009efc:	07db      	lsls	r3, r3, #31
 8009efe:	d538      	bpl.n	8009f72 <_printf_float+0x416>
 8009f00:	2301      	movs	r3, #1
 8009f02:	463a      	mov	r2, r7
 8009f04:	4659      	mov	r1, fp
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b0      	blx	r6
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	f43f ae7d 	beq.w	8009c0a <_printf_float+0xae>
 8009f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f14:	4659      	mov	r1, fp
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b0      	blx	r6
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	f107 0701 	add.w	r7, r7, #1
 8009f20:	f43f ae73 	beq.w	8009c0a <_printf_float+0xae>
 8009f24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f103 38ff 	add.w	r8, r3, #4294967295
 8009f30:	2300      	movs	r3, #0
 8009f32:	f7f6 fd43 	bl	80009bc <__aeabi_dcmpeq>
 8009f36:	b9c0      	cbnz	r0, 8009f6a <_printf_float+0x40e>
 8009f38:	4643      	mov	r3, r8
 8009f3a:	463a      	mov	r2, r7
 8009f3c:	4659      	mov	r1, fp
 8009f3e:	4628      	mov	r0, r5
 8009f40:	47b0      	blx	r6
 8009f42:	3001      	adds	r0, #1
 8009f44:	d10d      	bne.n	8009f62 <_printf_float+0x406>
 8009f46:	e660      	b.n	8009c0a <_printf_float+0xae>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	4642      	mov	r2, r8
 8009f4c:	4659      	mov	r1, fp
 8009f4e:	4628      	mov	r0, r5
 8009f50:	47b0      	blx	r6
 8009f52:	3001      	adds	r0, #1
 8009f54:	f43f ae59 	beq.w	8009c0a <_printf_float+0xae>
 8009f58:	3701      	adds	r7, #1
 8009f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	42bb      	cmp	r3, r7
 8009f60:	dcf2      	bgt.n	8009f48 <_printf_float+0x3ec>
 8009f62:	464b      	mov	r3, r9
 8009f64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f68:	e6e4      	b.n	8009d34 <_printf_float+0x1d8>
 8009f6a:	2700      	movs	r7, #0
 8009f6c:	f104 081a 	add.w	r8, r4, #26
 8009f70:	e7f3      	b.n	8009f5a <_printf_float+0x3fe>
 8009f72:	2301      	movs	r3, #1
 8009f74:	e7e1      	b.n	8009f3a <_printf_float+0x3de>
 8009f76:	2301      	movs	r3, #1
 8009f78:	4642      	mov	r2, r8
 8009f7a:	4659      	mov	r1, fp
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	47b0      	blx	r6
 8009f80:	3001      	adds	r0, #1
 8009f82:	f43f ae42 	beq.w	8009c0a <_printf_float+0xae>
 8009f86:	3701      	adds	r7, #1
 8009f88:	68e3      	ldr	r3, [r4, #12]
 8009f8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f8c:	1a9b      	subs	r3, r3, r2
 8009f8e:	42bb      	cmp	r3, r7
 8009f90:	dcf1      	bgt.n	8009f76 <_printf_float+0x41a>
 8009f92:	e702      	b.n	8009d9a <_printf_float+0x23e>
 8009f94:	2700      	movs	r7, #0
 8009f96:	f104 0819 	add.w	r8, r4, #25
 8009f9a:	e7f5      	b.n	8009f88 <_printf_float+0x42c>
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f43f ae94 	beq.w	8009cca <_printf_float+0x16e>
 8009fa2:	f04f 0c00 	mov.w	ip, #0
 8009fa6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009faa:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8009fae:	6022      	str	r2, [r4, #0]
 8009fb0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009fb4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	463a      	mov	r2, r7
 8009fbc:	464b      	mov	r3, r9
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f7ff fd3a 	bl	8009a38 <__cvt>
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	e64f      	b.n	8009c68 <_printf_float+0x10c>

08009fc8 <_printf_common>:
 8009fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fcc:	4691      	mov	r9, r2
 8009fce:	461f      	mov	r7, r3
 8009fd0:	688a      	ldr	r2, [r1, #8]
 8009fd2:	690b      	ldr	r3, [r1, #16]
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	bfb8      	it	lt
 8009fda:	4613      	movlt	r3, r2
 8009fdc:	f8c9 3000 	str.w	r3, [r9]
 8009fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fea:	b112      	cbz	r2, 8009ff2 <_printf_common+0x2a>
 8009fec:	3301      	adds	r3, #1
 8009fee:	f8c9 3000 	str.w	r3, [r9]
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	0699      	lsls	r1, r3, #26
 8009ff6:	bf42      	ittt	mi
 8009ff8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ffc:	3302      	addmi	r3, #2
 8009ffe:	f8c9 3000 	strmi.w	r3, [r9]
 800a002:	6825      	ldr	r5, [r4, #0]
 800a004:	f015 0506 	ands.w	r5, r5, #6
 800a008:	d107      	bne.n	800a01a <_printf_common+0x52>
 800a00a:	f104 0a19 	add.w	sl, r4, #25
 800a00e:	68e3      	ldr	r3, [r4, #12]
 800a010:	f8d9 2000 	ldr.w	r2, [r9]
 800a014:	1a9b      	subs	r3, r3, r2
 800a016:	42ab      	cmp	r3, r5
 800a018:	dc29      	bgt.n	800a06e <_printf_common+0xa6>
 800a01a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a01e:	6822      	ldr	r2, [r4, #0]
 800a020:	3300      	adds	r3, #0
 800a022:	bf18      	it	ne
 800a024:	2301      	movne	r3, #1
 800a026:	0692      	lsls	r2, r2, #26
 800a028:	d42e      	bmi.n	800a088 <_printf_common+0xc0>
 800a02a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a02e:	4639      	mov	r1, r7
 800a030:	4630      	mov	r0, r6
 800a032:	47c0      	blx	r8
 800a034:	3001      	adds	r0, #1
 800a036:	d021      	beq.n	800a07c <_printf_common+0xb4>
 800a038:	6823      	ldr	r3, [r4, #0]
 800a03a:	68e5      	ldr	r5, [r4, #12]
 800a03c:	f003 0306 	and.w	r3, r3, #6
 800a040:	2b04      	cmp	r3, #4
 800a042:	bf18      	it	ne
 800a044:	2500      	movne	r5, #0
 800a046:	f8d9 2000 	ldr.w	r2, [r9]
 800a04a:	f04f 0900 	mov.w	r9, #0
 800a04e:	bf08      	it	eq
 800a050:	1aad      	subeq	r5, r5, r2
 800a052:	68a3      	ldr	r3, [r4, #8]
 800a054:	6922      	ldr	r2, [r4, #16]
 800a056:	bf08      	it	eq
 800a058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a05c:	4293      	cmp	r3, r2
 800a05e:	bfc4      	itt	gt
 800a060:	1a9b      	subgt	r3, r3, r2
 800a062:	18ed      	addgt	r5, r5, r3
 800a064:	341a      	adds	r4, #26
 800a066:	454d      	cmp	r5, r9
 800a068:	d11a      	bne.n	800a0a0 <_printf_common+0xd8>
 800a06a:	2000      	movs	r0, #0
 800a06c:	e008      	b.n	800a080 <_printf_common+0xb8>
 800a06e:	2301      	movs	r3, #1
 800a070:	4652      	mov	r2, sl
 800a072:	4639      	mov	r1, r7
 800a074:	4630      	mov	r0, r6
 800a076:	47c0      	blx	r8
 800a078:	3001      	adds	r0, #1
 800a07a:	d103      	bne.n	800a084 <_printf_common+0xbc>
 800a07c:	f04f 30ff 	mov.w	r0, #4294967295
 800a080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a084:	3501      	adds	r5, #1
 800a086:	e7c2      	b.n	800a00e <_printf_common+0x46>
 800a088:	2030      	movs	r0, #48	; 0x30
 800a08a:	18e1      	adds	r1, r4, r3
 800a08c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a096:	4422      	add	r2, r4
 800a098:	3302      	adds	r3, #2
 800a09a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a09e:	e7c4      	b.n	800a02a <_printf_common+0x62>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	4639      	mov	r1, r7
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	47c0      	blx	r8
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	d0e6      	beq.n	800a07c <_printf_common+0xb4>
 800a0ae:	f109 0901 	add.w	r9, r9, #1
 800a0b2:	e7d8      	b.n	800a066 <_printf_common+0x9e>

0800a0b4 <_printf_i>:
 800a0b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a0bc:	460c      	mov	r4, r1
 800a0be:	7e09      	ldrb	r1, [r1, #24]
 800a0c0:	b085      	sub	sp, #20
 800a0c2:	296e      	cmp	r1, #110	; 0x6e
 800a0c4:	4617      	mov	r7, r2
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	4698      	mov	r8, r3
 800a0ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0cc:	f000 80b3 	beq.w	800a236 <_printf_i+0x182>
 800a0d0:	d822      	bhi.n	800a118 <_printf_i+0x64>
 800a0d2:	2963      	cmp	r1, #99	; 0x63
 800a0d4:	d036      	beq.n	800a144 <_printf_i+0x90>
 800a0d6:	d80a      	bhi.n	800a0ee <_printf_i+0x3a>
 800a0d8:	2900      	cmp	r1, #0
 800a0da:	f000 80b9 	beq.w	800a250 <_printf_i+0x19c>
 800a0de:	2958      	cmp	r1, #88	; 0x58
 800a0e0:	f000 8083 	beq.w	800a1ea <_printf_i+0x136>
 800a0e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a0ec:	e032      	b.n	800a154 <_printf_i+0xa0>
 800a0ee:	2964      	cmp	r1, #100	; 0x64
 800a0f0:	d001      	beq.n	800a0f6 <_printf_i+0x42>
 800a0f2:	2969      	cmp	r1, #105	; 0x69
 800a0f4:	d1f6      	bne.n	800a0e4 <_printf_i+0x30>
 800a0f6:	6820      	ldr	r0, [r4, #0]
 800a0f8:	6813      	ldr	r3, [r2, #0]
 800a0fa:	0605      	lsls	r5, r0, #24
 800a0fc:	f103 0104 	add.w	r1, r3, #4
 800a100:	d52a      	bpl.n	800a158 <_printf_i+0xa4>
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6011      	str	r1, [r2, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	da03      	bge.n	800a112 <_printf_i+0x5e>
 800a10a:	222d      	movs	r2, #45	; 0x2d
 800a10c:	425b      	negs	r3, r3
 800a10e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a112:	486f      	ldr	r0, [pc, #444]	; (800a2d0 <_printf_i+0x21c>)
 800a114:	220a      	movs	r2, #10
 800a116:	e039      	b.n	800a18c <_printf_i+0xd8>
 800a118:	2973      	cmp	r1, #115	; 0x73
 800a11a:	f000 809d 	beq.w	800a258 <_printf_i+0x1a4>
 800a11e:	d808      	bhi.n	800a132 <_printf_i+0x7e>
 800a120:	296f      	cmp	r1, #111	; 0x6f
 800a122:	d020      	beq.n	800a166 <_printf_i+0xb2>
 800a124:	2970      	cmp	r1, #112	; 0x70
 800a126:	d1dd      	bne.n	800a0e4 <_printf_i+0x30>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	f043 0320 	orr.w	r3, r3, #32
 800a12e:	6023      	str	r3, [r4, #0]
 800a130:	e003      	b.n	800a13a <_printf_i+0x86>
 800a132:	2975      	cmp	r1, #117	; 0x75
 800a134:	d017      	beq.n	800a166 <_printf_i+0xb2>
 800a136:	2978      	cmp	r1, #120	; 0x78
 800a138:	d1d4      	bne.n	800a0e4 <_printf_i+0x30>
 800a13a:	2378      	movs	r3, #120	; 0x78
 800a13c:	4865      	ldr	r0, [pc, #404]	; (800a2d4 <_printf_i+0x220>)
 800a13e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a142:	e055      	b.n	800a1f0 <_printf_i+0x13c>
 800a144:	6813      	ldr	r3, [r2, #0]
 800a146:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a14a:	1d19      	adds	r1, r3, #4
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6011      	str	r1, [r2, #0]
 800a150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a154:	2301      	movs	r3, #1
 800a156:	e08c      	b.n	800a272 <_printf_i+0x1be>
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a15e:	6011      	str	r1, [r2, #0]
 800a160:	bf18      	it	ne
 800a162:	b21b      	sxthne	r3, r3
 800a164:	e7cf      	b.n	800a106 <_printf_i+0x52>
 800a166:	6813      	ldr	r3, [r2, #0]
 800a168:	6825      	ldr	r5, [r4, #0]
 800a16a:	1d18      	adds	r0, r3, #4
 800a16c:	6010      	str	r0, [r2, #0]
 800a16e:	0628      	lsls	r0, r5, #24
 800a170:	d501      	bpl.n	800a176 <_printf_i+0xc2>
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	e002      	b.n	800a17c <_printf_i+0xc8>
 800a176:	0668      	lsls	r0, r5, #25
 800a178:	d5fb      	bpl.n	800a172 <_printf_i+0xbe>
 800a17a:	881b      	ldrh	r3, [r3, #0]
 800a17c:	296f      	cmp	r1, #111	; 0x6f
 800a17e:	bf14      	ite	ne
 800a180:	220a      	movne	r2, #10
 800a182:	2208      	moveq	r2, #8
 800a184:	4852      	ldr	r0, [pc, #328]	; (800a2d0 <_printf_i+0x21c>)
 800a186:	2100      	movs	r1, #0
 800a188:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a18c:	6865      	ldr	r5, [r4, #4]
 800a18e:	2d00      	cmp	r5, #0
 800a190:	60a5      	str	r5, [r4, #8]
 800a192:	f2c0 8095 	blt.w	800a2c0 <_printf_i+0x20c>
 800a196:	6821      	ldr	r1, [r4, #0]
 800a198:	f021 0104 	bic.w	r1, r1, #4
 800a19c:	6021      	str	r1, [r4, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d13d      	bne.n	800a21e <_printf_i+0x16a>
 800a1a2:	2d00      	cmp	r5, #0
 800a1a4:	f040 808e 	bne.w	800a2c4 <_printf_i+0x210>
 800a1a8:	4665      	mov	r5, ip
 800a1aa:	2a08      	cmp	r2, #8
 800a1ac:	d10b      	bne.n	800a1c6 <_printf_i+0x112>
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	07db      	lsls	r3, r3, #31
 800a1b2:	d508      	bpl.n	800a1c6 <_printf_i+0x112>
 800a1b4:	6923      	ldr	r3, [r4, #16]
 800a1b6:	6862      	ldr	r2, [r4, #4]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	bfde      	ittt	le
 800a1bc:	2330      	movle	r3, #48	; 0x30
 800a1be:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1c6:	ebac 0305 	sub.w	r3, ip, r5
 800a1ca:	6123      	str	r3, [r4, #16]
 800a1cc:	f8cd 8000 	str.w	r8, [sp]
 800a1d0:	463b      	mov	r3, r7
 800a1d2:	aa03      	add	r2, sp, #12
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f7ff fef6 	bl	8009fc8 <_printf_common>
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d14d      	bne.n	800a27c <_printf_i+0x1c8>
 800a1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e4:	b005      	add	sp, #20
 800a1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1ea:	4839      	ldr	r0, [pc, #228]	; (800a2d0 <_printf_i+0x21c>)
 800a1ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a1f0:	6813      	ldr	r3, [r2, #0]
 800a1f2:	6821      	ldr	r1, [r4, #0]
 800a1f4:	1d1d      	adds	r5, r3, #4
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6015      	str	r5, [r2, #0]
 800a1fa:	060a      	lsls	r2, r1, #24
 800a1fc:	d50b      	bpl.n	800a216 <_printf_i+0x162>
 800a1fe:	07ca      	lsls	r2, r1, #31
 800a200:	bf44      	itt	mi
 800a202:	f041 0120 	orrmi.w	r1, r1, #32
 800a206:	6021      	strmi	r1, [r4, #0]
 800a208:	b91b      	cbnz	r3, 800a212 <_printf_i+0x15e>
 800a20a:	6822      	ldr	r2, [r4, #0]
 800a20c:	f022 0220 	bic.w	r2, r2, #32
 800a210:	6022      	str	r2, [r4, #0]
 800a212:	2210      	movs	r2, #16
 800a214:	e7b7      	b.n	800a186 <_printf_i+0xd2>
 800a216:	064d      	lsls	r5, r1, #25
 800a218:	bf48      	it	mi
 800a21a:	b29b      	uxthmi	r3, r3
 800a21c:	e7ef      	b.n	800a1fe <_printf_i+0x14a>
 800a21e:	4665      	mov	r5, ip
 800a220:	fbb3 f1f2 	udiv	r1, r3, r2
 800a224:	fb02 3311 	mls	r3, r2, r1, r3
 800a228:	5cc3      	ldrb	r3, [r0, r3]
 800a22a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a22e:	460b      	mov	r3, r1
 800a230:	2900      	cmp	r1, #0
 800a232:	d1f5      	bne.n	800a220 <_printf_i+0x16c>
 800a234:	e7b9      	b.n	800a1aa <_printf_i+0xf6>
 800a236:	6813      	ldr	r3, [r2, #0]
 800a238:	6825      	ldr	r5, [r4, #0]
 800a23a:	1d18      	adds	r0, r3, #4
 800a23c:	6961      	ldr	r1, [r4, #20]
 800a23e:	6010      	str	r0, [r2, #0]
 800a240:	0628      	lsls	r0, r5, #24
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	d501      	bpl.n	800a24a <_printf_i+0x196>
 800a246:	6019      	str	r1, [r3, #0]
 800a248:	e002      	b.n	800a250 <_printf_i+0x19c>
 800a24a:	066a      	lsls	r2, r5, #25
 800a24c:	d5fb      	bpl.n	800a246 <_printf_i+0x192>
 800a24e:	8019      	strh	r1, [r3, #0]
 800a250:	2300      	movs	r3, #0
 800a252:	4665      	mov	r5, ip
 800a254:	6123      	str	r3, [r4, #16]
 800a256:	e7b9      	b.n	800a1cc <_printf_i+0x118>
 800a258:	6813      	ldr	r3, [r2, #0]
 800a25a:	1d19      	adds	r1, r3, #4
 800a25c:	6011      	str	r1, [r2, #0]
 800a25e:	681d      	ldr	r5, [r3, #0]
 800a260:	6862      	ldr	r2, [r4, #4]
 800a262:	2100      	movs	r1, #0
 800a264:	4628      	mov	r0, r5
 800a266:	f001 fc7f 	bl	800bb68 <memchr>
 800a26a:	b108      	cbz	r0, 800a270 <_printf_i+0x1bc>
 800a26c:	1b40      	subs	r0, r0, r5
 800a26e:	6060      	str	r0, [r4, #4]
 800a270:	6863      	ldr	r3, [r4, #4]
 800a272:	6123      	str	r3, [r4, #16]
 800a274:	2300      	movs	r3, #0
 800a276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a27a:	e7a7      	b.n	800a1cc <_printf_i+0x118>
 800a27c:	6923      	ldr	r3, [r4, #16]
 800a27e:	462a      	mov	r2, r5
 800a280:	4639      	mov	r1, r7
 800a282:	4630      	mov	r0, r6
 800a284:	47c0      	blx	r8
 800a286:	3001      	adds	r0, #1
 800a288:	d0aa      	beq.n	800a1e0 <_printf_i+0x12c>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	079b      	lsls	r3, r3, #30
 800a28e:	d413      	bmi.n	800a2b8 <_printf_i+0x204>
 800a290:	68e0      	ldr	r0, [r4, #12]
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	4298      	cmp	r0, r3
 800a296:	bfb8      	it	lt
 800a298:	4618      	movlt	r0, r3
 800a29a:	e7a3      	b.n	800a1e4 <_printf_i+0x130>
 800a29c:	2301      	movs	r3, #1
 800a29e:	464a      	mov	r2, r9
 800a2a0:	4639      	mov	r1, r7
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	47c0      	blx	r8
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d09a      	beq.n	800a1e0 <_printf_i+0x12c>
 800a2aa:	3501      	adds	r5, #1
 800a2ac:	68e3      	ldr	r3, [r4, #12]
 800a2ae:	9a03      	ldr	r2, [sp, #12]
 800a2b0:	1a9b      	subs	r3, r3, r2
 800a2b2:	42ab      	cmp	r3, r5
 800a2b4:	dcf2      	bgt.n	800a29c <_printf_i+0x1e8>
 800a2b6:	e7eb      	b.n	800a290 <_printf_i+0x1dc>
 800a2b8:	2500      	movs	r5, #0
 800a2ba:	f104 0919 	add.w	r9, r4, #25
 800a2be:	e7f5      	b.n	800a2ac <_printf_i+0x1f8>
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1ac      	bne.n	800a21e <_printf_i+0x16a>
 800a2c4:	7803      	ldrb	r3, [r0, #0]
 800a2c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2ce:	e76c      	b.n	800a1aa <_printf_i+0xf6>
 800a2d0:	0800d70c 	.word	0x0800d70c
 800a2d4:	0800d71d 	.word	0x0800d71d

0800a2d8 <iprintf>:
 800a2d8:	b40f      	push	{r0, r1, r2, r3}
 800a2da:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <iprintf+0x2c>)
 800a2dc:	b513      	push	{r0, r1, r4, lr}
 800a2de:	681c      	ldr	r4, [r3, #0]
 800a2e0:	b124      	cbz	r4, 800a2ec <iprintf+0x14>
 800a2e2:	69a3      	ldr	r3, [r4, #24]
 800a2e4:	b913      	cbnz	r3, 800a2ec <iprintf+0x14>
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f001 fafa 	bl	800b8e0 <__sinit>
 800a2ec:	ab05      	add	r3, sp, #20
 800a2ee:	9a04      	ldr	r2, [sp, #16]
 800a2f0:	68a1      	ldr	r1, [r4, #8]
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	f002 f8b7 	bl	800c468 <_vfiprintf_r>
 800a2fa:	b002      	add	sp, #8
 800a2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a300:	b004      	add	sp, #16
 800a302:	4770      	bx	lr
 800a304:	20000028 	.word	0x20000028

0800a308 <putchar>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4b08      	ldr	r3, [pc, #32]	; (800a32c <putchar+0x24>)
 800a30c:	4605      	mov	r5, r0
 800a30e:	681c      	ldr	r4, [r3, #0]
 800a310:	b124      	cbz	r4, 800a31c <putchar+0x14>
 800a312:	69a3      	ldr	r3, [r4, #24]
 800a314:	b913      	cbnz	r3, 800a31c <putchar+0x14>
 800a316:	4620      	mov	r0, r4
 800a318:	f001 fae2 	bl	800b8e0 <__sinit>
 800a31c:	68a2      	ldr	r2, [r4, #8]
 800a31e:	4629      	mov	r1, r5
 800a320:	4620      	mov	r0, r4
 800a322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a326:	f002 b9b5 	b.w	800c694 <_putc_r>
 800a32a:	bf00      	nop
 800a32c:	20000028 	.word	0x20000028

0800a330 <_puts_r>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	460e      	mov	r6, r1
 800a334:	4605      	mov	r5, r0
 800a336:	b118      	cbz	r0, 800a340 <_puts_r+0x10>
 800a338:	6983      	ldr	r3, [r0, #24]
 800a33a:	b90b      	cbnz	r3, 800a340 <_puts_r+0x10>
 800a33c:	f001 fad0 	bl	800b8e0 <__sinit>
 800a340:	69ab      	ldr	r3, [r5, #24]
 800a342:	68ac      	ldr	r4, [r5, #8]
 800a344:	b913      	cbnz	r3, 800a34c <_puts_r+0x1c>
 800a346:	4628      	mov	r0, r5
 800a348:	f001 faca 	bl	800b8e0 <__sinit>
 800a34c:	4b23      	ldr	r3, [pc, #140]	; (800a3dc <_puts_r+0xac>)
 800a34e:	429c      	cmp	r4, r3
 800a350:	d117      	bne.n	800a382 <_puts_r+0x52>
 800a352:	686c      	ldr	r4, [r5, #4]
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	071b      	lsls	r3, r3, #28
 800a358:	d51d      	bpl.n	800a396 <_puts_r+0x66>
 800a35a:	6923      	ldr	r3, [r4, #16]
 800a35c:	b1db      	cbz	r3, 800a396 <_puts_r+0x66>
 800a35e:	3e01      	subs	r6, #1
 800a360:	68a3      	ldr	r3, [r4, #8]
 800a362:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a366:	3b01      	subs	r3, #1
 800a368:	60a3      	str	r3, [r4, #8]
 800a36a:	b9e9      	cbnz	r1, 800a3a8 <_puts_r+0x78>
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	da2e      	bge.n	800a3ce <_puts_r+0x9e>
 800a370:	4622      	mov	r2, r4
 800a372:	210a      	movs	r1, #10
 800a374:	4628      	mov	r0, r5
 800a376:	f000 faad 	bl	800a8d4 <__swbuf_r>
 800a37a:	3001      	adds	r0, #1
 800a37c:	d011      	beq.n	800a3a2 <_puts_r+0x72>
 800a37e:	200a      	movs	r0, #10
 800a380:	e011      	b.n	800a3a6 <_puts_r+0x76>
 800a382:	4b17      	ldr	r3, [pc, #92]	; (800a3e0 <_puts_r+0xb0>)
 800a384:	429c      	cmp	r4, r3
 800a386:	d101      	bne.n	800a38c <_puts_r+0x5c>
 800a388:	68ac      	ldr	r4, [r5, #8]
 800a38a:	e7e3      	b.n	800a354 <_puts_r+0x24>
 800a38c:	4b15      	ldr	r3, [pc, #84]	; (800a3e4 <_puts_r+0xb4>)
 800a38e:	429c      	cmp	r4, r3
 800a390:	bf08      	it	eq
 800a392:	68ec      	ldreq	r4, [r5, #12]
 800a394:	e7de      	b.n	800a354 <_puts_r+0x24>
 800a396:	4621      	mov	r1, r4
 800a398:	4628      	mov	r0, r5
 800a39a:	f000 faed 	bl	800a978 <__swsetup_r>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d0dd      	beq.n	800a35e <_puts_r+0x2e>
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	da04      	bge.n	800a3b6 <_puts_r+0x86>
 800a3ac:	69a2      	ldr	r2, [r4, #24]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	dc06      	bgt.n	800a3c0 <_puts_r+0x90>
 800a3b2:	290a      	cmp	r1, #10
 800a3b4:	d004      	beq.n	800a3c0 <_puts_r+0x90>
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	6022      	str	r2, [r4, #0]
 800a3bc:	7019      	strb	r1, [r3, #0]
 800a3be:	e7cf      	b.n	800a360 <_puts_r+0x30>
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f000 fa86 	bl	800a8d4 <__swbuf_r>
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	d1c9      	bne.n	800a360 <_puts_r+0x30>
 800a3cc:	e7e9      	b.n	800a3a2 <_puts_r+0x72>
 800a3ce:	200a      	movs	r0, #10
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	6022      	str	r2, [r4, #0]
 800a3d6:	7018      	strb	r0, [r3, #0]
 800a3d8:	e7e5      	b.n	800a3a6 <_puts_r+0x76>
 800a3da:	bf00      	nop
 800a3dc:	0800d798 	.word	0x0800d798
 800a3e0:	0800d7b8 	.word	0x0800d7b8
 800a3e4:	0800d778 	.word	0x0800d778

0800a3e8 <puts>:
 800a3e8:	4b02      	ldr	r3, [pc, #8]	; (800a3f4 <puts+0xc>)
 800a3ea:	4601      	mov	r1, r0
 800a3ec:	6818      	ldr	r0, [r3, #0]
 800a3ee:	f7ff bf9f 	b.w	800a330 <_puts_r>
 800a3f2:	bf00      	nop
 800a3f4:	20000028 	.word	0x20000028

0800a3f8 <_sbrk_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4c05      	ldr	r4, [pc, #20]	; (800a414 <_sbrk_r+0x1c>)
 800a3fe:	4605      	mov	r5, r0
 800a400:	4608      	mov	r0, r1
 800a402:	6023      	str	r3, [r4, #0]
 800a404:	f7f8 fe2a 	bl	800305c <_sbrk>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_sbrk_r+0x1a>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_sbrk_r+0x1a>
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	200011a0 	.word	0x200011a0

0800a418 <siprintf>:
 800a418:	b40e      	push	{r1, r2, r3}
 800a41a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a41e:	b500      	push	{lr}
 800a420:	b09c      	sub	sp, #112	; 0x70
 800a422:	ab1d      	add	r3, sp, #116	; 0x74
 800a424:	9002      	str	r0, [sp, #8]
 800a426:	9006      	str	r0, [sp, #24]
 800a428:	9107      	str	r1, [sp, #28]
 800a42a:	9104      	str	r1, [sp, #16]
 800a42c:	4808      	ldr	r0, [pc, #32]	; (800a450 <siprintf+0x38>)
 800a42e:	4909      	ldr	r1, [pc, #36]	; (800a454 <siprintf+0x3c>)
 800a430:	f853 2b04 	ldr.w	r2, [r3], #4
 800a434:	9105      	str	r1, [sp, #20]
 800a436:	6800      	ldr	r0, [r0, #0]
 800a438:	a902      	add	r1, sp, #8
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	f001 fef4 	bl	800c228 <_svfiprintf_r>
 800a440:	2200      	movs	r2, #0
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	701a      	strb	r2, [r3, #0]
 800a446:	b01c      	add	sp, #112	; 0x70
 800a448:	f85d eb04 	ldr.w	lr, [sp], #4
 800a44c:	b003      	add	sp, #12
 800a44e:	4770      	bx	lr
 800a450:	20000028 	.word	0x20000028
 800a454:	ffff0208 	.word	0xffff0208

0800a458 <strcat>:
 800a458:	4603      	mov	r3, r0
 800a45a:	b510      	push	{r4, lr}
 800a45c:	781a      	ldrb	r2, [r3, #0]
 800a45e:	1c5c      	adds	r4, r3, #1
 800a460:	b93a      	cbnz	r2, 800a472 <strcat+0x1a>
 800a462:	3b01      	subs	r3, #1
 800a464:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a468:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	d1f9      	bne.n	800a464 <strcat+0xc>
 800a470:	bd10      	pop	{r4, pc}
 800a472:	4623      	mov	r3, r4
 800a474:	e7f2      	b.n	800a45c <strcat+0x4>
	...

0800a478 <__tzcalc_limits>:
 800a478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	4680      	mov	r8, r0
 800a47e:	f001 fafd 	bl	800ba7c <__gettzinfo>
 800a482:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800a486:	4598      	cmp	r8, r3
 800a488:	f340 8097 	ble.w	800a5ba <__tzcalc_limits+0x142>
 800a48c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800a490:	f240 126d 	movw	r2, #365	; 0x16d
 800a494:	4443      	add	r3, r8
 800a496:	109b      	asrs	r3, r3, #2
 800a498:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800a49c:	fb02 3505 	mla	r5, r2, r5, r3
 800a4a0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800a4a4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800a4a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4ac:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800a4b0:	441d      	add	r5, r3
 800a4b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a4b6:	4442      	add	r2, r8
 800a4b8:	fb92 f2f3 	sdiv	r2, r2, r3
 800a4bc:	fb98 f7f3 	sdiv	r7, r8, r3
 800a4c0:	4415      	add	r5, r2
 800a4c2:	2264      	movs	r2, #100	; 0x64
 800a4c4:	fb03 8717 	mls	r7, r3, r7, r8
 800a4c8:	fb98 f6f2 	sdiv	r6, r8, r2
 800a4cc:	fab7 fc87 	clz	ip, r7
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	f04f 0e07 	mov.w	lr, #7
 800a4d6:	fb02 8616 	mls	r6, r2, r6, r8
 800a4da:	f008 0303 	and.w	r3, r8, #3
 800a4de:	f8c0 8004 	str.w	r8, [r0, #4]
 800a4e2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800a4e6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	7a22      	ldrb	r2, [r4, #8]
 800a4ee:	6963      	ldr	r3, [r4, #20]
 800a4f0:	2a4a      	cmp	r2, #74	; 0x4a
 800a4f2:	d128      	bne.n	800a546 <__tzcalc_limits+0xce>
 800a4f4:	9900      	ldr	r1, [sp, #0]
 800a4f6:	18ea      	adds	r2, r5, r3
 800a4f8:	b901      	cbnz	r1, 800a4fc <__tzcalc_limits+0x84>
 800a4fa:	b906      	cbnz	r6, 800a4fe <__tzcalc_limits+0x86>
 800a4fc:	bb0f      	cbnz	r7, 800a542 <__tzcalc_limits+0xca>
 800a4fe:	2b3b      	cmp	r3, #59	; 0x3b
 800a500:	bfd4      	ite	le
 800a502:	2300      	movle	r3, #0
 800a504:	2301      	movgt	r3, #1
 800a506:	4413      	add	r3, r2
 800a508:	1e5a      	subs	r2, r3, #1
 800a50a:	69a3      	ldr	r3, [r4, #24]
 800a50c:	492c      	ldr	r1, [pc, #176]	; (800a5c0 <__tzcalc_limits+0x148>)
 800a50e:	3428      	adds	r4, #40	; 0x28
 800a510:	fb01 3202 	mla	r2, r1, r2, r3
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	4413      	add	r3, r2
 800a518:	461a      	mov	r2, r3
 800a51a:	17db      	asrs	r3, r3, #31
 800a51c:	e944 2302 	strd	r2, r3, [r4, #-8]
 800a520:	45a3      	cmp	fp, r4
 800a522:	d1e3      	bne.n	800a4ec <__tzcalc_limits+0x74>
 800a524:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 800a528:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800a52c:	4294      	cmp	r4, r2
 800a52e:	eb75 0303 	sbcs.w	r3, r5, r3
 800a532:	bfb4      	ite	lt
 800a534:	2301      	movlt	r3, #1
 800a536:	2300      	movge	r3, #0
 800a538:	6003      	str	r3, [r0, #0]
 800a53a:	2001      	movs	r0, #1
 800a53c:	b003      	add	sp, #12
 800a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a542:	2300      	movs	r3, #0
 800a544:	e7df      	b.n	800a506 <__tzcalc_limits+0x8e>
 800a546:	2a44      	cmp	r2, #68	; 0x44
 800a548:	d101      	bne.n	800a54e <__tzcalc_limits+0xd6>
 800a54a:	18ea      	adds	r2, r5, r3
 800a54c:	e7dd      	b.n	800a50a <__tzcalc_limits+0x92>
 800a54e:	9a00      	ldr	r2, [sp, #0]
 800a550:	bb6a      	cbnz	r2, 800a5ae <__tzcalc_limits+0x136>
 800a552:	2e00      	cmp	r6, #0
 800a554:	bf0c      	ite	eq
 800a556:	46e1      	moveq	r9, ip
 800a558:	f04f 0901 	movne.w	r9, #1
 800a55c:	2230      	movs	r2, #48	; 0x30
 800a55e:	fb02 f909 	mul.w	r9, r2, r9
 800a562:	68e2      	ldr	r2, [r4, #12]
 800a564:	f04f 0800 	mov.w	r8, #0
 800a568:	9201      	str	r2, [sp, #4]
 800a56a:	462a      	mov	r2, r5
 800a56c:	f108 0801 	add.w	r8, r8, #1
 800a570:	4914      	ldr	r1, [pc, #80]	; (800a5c4 <__tzcalc_limits+0x14c>)
 800a572:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 800a576:	448a      	add	sl, r1
 800a578:	9901      	ldr	r1, [sp, #4]
 800a57a:	f85a ac04 	ldr.w	sl, [sl, #-4]
 800a57e:	4541      	cmp	r1, r8
 800a580:	dc17      	bgt.n	800a5b2 <__tzcalc_limits+0x13a>
 800a582:	f102 0804 	add.w	r8, r2, #4
 800a586:	fb98 f9fe 	sdiv	r9, r8, lr
 800a58a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800a58e:	eba8 0909 	sub.w	r9, r8, r9
 800a592:	ebb3 0909 	subs.w	r9, r3, r9
 800a596:	6923      	ldr	r3, [r4, #16]
 800a598:	bf48      	it	mi
 800a59a:	f109 0907 	addmi.w	r9, r9, #7
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a5a4:	444b      	add	r3, r9
 800a5a6:	4553      	cmp	r3, sl
 800a5a8:	da05      	bge.n	800a5b6 <__tzcalc_limits+0x13e>
 800a5aa:	441a      	add	r2, r3
 800a5ac:	e7ad      	b.n	800a50a <__tzcalc_limits+0x92>
 800a5ae:	46e1      	mov	r9, ip
 800a5b0:	e7d4      	b.n	800a55c <__tzcalc_limits+0xe4>
 800a5b2:	4452      	add	r2, sl
 800a5b4:	e7da      	b.n	800a56c <__tzcalc_limits+0xf4>
 800a5b6:	3b07      	subs	r3, #7
 800a5b8:	e7f5      	b.n	800a5a6 <__tzcalc_limits+0x12e>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	e7be      	b.n	800a53c <__tzcalc_limits+0xc4>
 800a5be:	bf00      	nop
 800a5c0:	00015180 	.word	0x00015180
 800a5c4:	0800d7d8 	.word	0x0800d7d8

0800a5c8 <__tz_lock>:
 800a5c8:	4770      	bx	lr

0800a5ca <__tz_unlock>:
 800a5ca:	4770      	bx	lr

0800a5cc <_tzset_unlocked>:
 800a5cc:	4b01      	ldr	r3, [pc, #4]	; (800a5d4 <_tzset_unlocked+0x8>)
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	f000 b802 	b.w	800a5d8 <_tzset_unlocked_r>
 800a5d4:	20000028 	.word	0x20000028

0800a5d8 <_tzset_unlocked_r>:
 800a5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5dc:	b08d      	sub	sp, #52	; 0x34
 800a5de:	4607      	mov	r7, r0
 800a5e0:	f001 fa4c 	bl	800ba7c <__gettzinfo>
 800a5e4:	49af      	ldr	r1, [pc, #700]	; (800a8a4 <_tzset_unlocked_r+0x2cc>)
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	f001 fa3f 	bl	800ba6c <_getenv_r>
 800a5ee:	4eae      	ldr	r6, [pc, #696]	; (800a8a8 <_tzset_unlocked_r+0x2d0>)
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	b970      	cbnz	r0, 800a612 <_tzset_unlocked_r+0x3a>
 800a5f4:	4bad      	ldr	r3, [pc, #692]	; (800a8ac <_tzset_unlocked_r+0x2d4>)
 800a5f6:	4aae      	ldr	r2, [pc, #696]	; (800a8b0 <_tzset_unlocked_r+0x2d8>)
 800a5f8:	6018      	str	r0, [r3, #0]
 800a5fa:	4bae      	ldr	r3, [pc, #696]	; (800a8b4 <_tzset_unlocked_r+0x2dc>)
 800a5fc:	6018      	str	r0, [r3, #0]
 800a5fe:	4bae      	ldr	r3, [pc, #696]	; (800a8b8 <_tzset_unlocked_r+0x2e0>)
 800a600:	6830      	ldr	r0, [r6, #0]
 800a602:	e9c3 2200 	strd	r2, r2, [r3]
 800a606:	f7fe fecd 	bl	80093a4 <free>
 800a60a:	6034      	str	r4, [r6, #0]
 800a60c:	b00d      	add	sp, #52	; 0x34
 800a60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a612:	6831      	ldr	r1, [r6, #0]
 800a614:	2900      	cmp	r1, #0
 800a616:	d15f      	bne.n	800a6d8 <_tzset_unlocked_r+0x100>
 800a618:	6830      	ldr	r0, [r6, #0]
 800a61a:	f7fe fec3 	bl	80093a4 <free>
 800a61e:	4620      	mov	r0, r4
 800a620:	f7f5 fd96 	bl	8000150 <strlen>
 800a624:	1c41      	adds	r1, r0, #1
 800a626:	4638      	mov	r0, r7
 800a628:	f7ff f9ac 	bl	8009984 <_malloc_r>
 800a62c:	6030      	str	r0, [r6, #0]
 800a62e:	2800      	cmp	r0, #0
 800a630:	d157      	bne.n	800a6e2 <_tzset_unlocked_r+0x10a>
 800a632:	7823      	ldrb	r3, [r4, #0]
 800a634:	ae0a      	add	r6, sp, #40	; 0x28
 800a636:	2b3a      	cmp	r3, #58	; 0x3a
 800a638:	bf08      	it	eq
 800a63a:	3401      	addeq	r4, #1
 800a63c:	4633      	mov	r3, r6
 800a63e:	4a9f      	ldr	r2, [pc, #636]	; (800a8bc <_tzset_unlocked_r+0x2e4>)
 800a640:	499f      	ldr	r1, [pc, #636]	; (800a8c0 <_tzset_unlocked_r+0x2e8>)
 800a642:	4620      	mov	r0, r4
 800a644:	f002 f85c 	bl	800c700 <siscanf>
 800a648:	2800      	cmp	r0, #0
 800a64a:	dddf      	ble.n	800a60c <_tzset_unlocked_r+0x34>
 800a64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a64e:	18e7      	adds	r7, r4, r3
 800a650:	5ce3      	ldrb	r3, [r4, r3]
 800a652:	2b2d      	cmp	r3, #45	; 0x2d
 800a654:	d149      	bne.n	800a6ea <_tzset_unlocked_r+0x112>
 800a656:	f04f 34ff 	mov.w	r4, #4294967295
 800a65a:	3701      	adds	r7, #1
 800a65c:	f04f 0800 	mov.w	r8, #0
 800a660:	f10d 0a20 	add.w	sl, sp, #32
 800a664:	f10d 0b1e 	add.w	fp, sp, #30
 800a668:	9603      	str	r6, [sp, #12]
 800a66a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800a66e:	f8cd b000 	str.w	fp, [sp]
 800a672:	4633      	mov	r3, r6
 800a674:	aa07      	add	r2, sp, #28
 800a676:	4993      	ldr	r1, [pc, #588]	; (800a8c4 <_tzset_unlocked_r+0x2ec>)
 800a678:	4638      	mov	r0, r7
 800a67a:	f8ad 801e 	strh.w	r8, [sp, #30]
 800a67e:	f8ad 8020 	strh.w	r8, [sp, #32]
 800a682:	f002 f83d 	bl	800c700 <siscanf>
 800a686:	4540      	cmp	r0, r8
 800a688:	ddc0      	ble.n	800a60c <_tzset_unlocked_r+0x34>
 800a68a:	213c      	movs	r1, #60	; 0x3c
 800a68c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a690:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a694:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800a8d0 <_tzset_unlocked_r+0x2f8>
 800a698:	fb01 2203 	mla	r2, r1, r3, r2
 800a69c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a6a0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a6a4:	fb01 2303 	mla	r3, r1, r3, r2
 800a6a8:	435c      	muls	r4, r3
 800a6aa:	4b84      	ldr	r3, [pc, #528]	; (800a8bc <_tzset_unlocked_r+0x2e4>)
 800a6ac:	62ac      	str	r4, [r5, #40]	; 0x28
 800a6ae:	4c82      	ldr	r4, [pc, #520]	; (800a8b8 <_tzset_unlocked_r+0x2e0>)
 800a6b0:	464a      	mov	r2, r9
 800a6b2:	6023      	str	r3, [r4, #0]
 800a6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b6:	4982      	ldr	r1, [pc, #520]	; (800a8c0 <_tzset_unlocked_r+0x2e8>)
 800a6b8:	441f      	add	r7, r3
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	4633      	mov	r3, r6
 800a6be:	f002 f81f 	bl	800c700 <siscanf>
 800a6c2:	4540      	cmp	r0, r8
 800a6c4:	dc16      	bgt.n	800a6f4 <_tzset_unlocked_r+0x11c>
 800a6c6:	6823      	ldr	r3, [r4, #0]
 800a6c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a6ca:	6063      	str	r3, [r4, #4]
 800a6cc:	4b77      	ldr	r3, [pc, #476]	; (800a8ac <_tzset_unlocked_r+0x2d4>)
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	4b78      	ldr	r3, [pc, #480]	; (800a8b4 <_tzset_unlocked_r+0x2dc>)
 800a6d2:	f8c3 8000 	str.w	r8, [r3]
 800a6d6:	e799      	b.n	800a60c <_tzset_unlocked_r+0x34>
 800a6d8:	f7f5 fd42 	bl	8000160 <strcmp>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d095      	beq.n	800a60c <_tzset_unlocked_r+0x34>
 800a6e0:	e79a      	b.n	800a618 <_tzset_unlocked_r+0x40>
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	f002 f87b 	bl	800c7de <strcpy>
 800a6e8:	e7a3      	b.n	800a632 <_tzset_unlocked_r+0x5a>
 800a6ea:	2b2b      	cmp	r3, #43	; 0x2b
 800a6ec:	bf08      	it	eq
 800a6ee:	3701      	addeq	r7, #1
 800a6f0:	2401      	movs	r4, #1
 800a6f2:	e7b3      	b.n	800a65c <_tzset_unlocked_r+0x84>
 800a6f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f6:	f8c4 9004 	str.w	r9, [r4, #4]
 800a6fa:	18fc      	adds	r4, r7, r3
 800a6fc:	5cfb      	ldrb	r3, [r7, r3]
 800a6fe:	2b2d      	cmp	r3, #45	; 0x2d
 800a700:	f040 808c 	bne.w	800a81c <_tzset_unlocked_r+0x244>
 800a704:	f04f 37ff 	mov.w	r7, #4294967295
 800a708:	3401      	adds	r4, #1
 800a70a:	2300      	movs	r3, #0
 800a70c:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a710:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a714:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a718:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a71c:	930a      	str	r3, [sp, #40]	; 0x28
 800a71e:	e9cd b600 	strd	fp, r6, [sp]
 800a722:	4633      	mov	r3, r6
 800a724:	aa07      	add	r2, sp, #28
 800a726:	4967      	ldr	r1, [pc, #412]	; (800a8c4 <_tzset_unlocked_r+0x2ec>)
 800a728:	4620      	mov	r0, r4
 800a72a:	f001 ffe9 	bl	800c700 <siscanf>
 800a72e:	2800      	cmp	r0, #0
 800a730:	dc79      	bgt.n	800a826 <_tzset_unlocked_r+0x24e>
 800a732:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a734:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800a738:	652b      	str	r3, [r5, #80]	; 0x50
 800a73a:	462f      	mov	r7, r5
 800a73c:	f04f 0900 	mov.w	r9, #0
 800a740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a742:	441c      	add	r4, r3
 800a744:	7823      	ldrb	r3, [r4, #0]
 800a746:	2b2c      	cmp	r3, #44	; 0x2c
 800a748:	bf08      	it	eq
 800a74a:	3401      	addeq	r4, #1
 800a74c:	f894 8000 	ldrb.w	r8, [r4]
 800a750:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800a754:	d17a      	bne.n	800a84c <_tzset_unlocked_r+0x274>
 800a756:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800a75a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800a75e:	ab09      	add	r3, sp, #36	; 0x24
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	9603      	str	r6, [sp, #12]
 800a764:	4633      	mov	r3, r6
 800a766:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800a76a:	4957      	ldr	r1, [pc, #348]	; (800a8c8 <_tzset_unlocked_r+0x2f0>)
 800a76c:	4620      	mov	r0, r4
 800a76e:	f001 ffc7 	bl	800c700 <siscanf>
 800a772:	2803      	cmp	r0, #3
 800a774:	f47f af4a 	bne.w	800a60c <_tzset_unlocked_r+0x34>
 800a778:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800a77c:	1e4b      	subs	r3, r1, #1
 800a77e:	2b0b      	cmp	r3, #11
 800a780:	f63f af44 	bhi.w	800a60c <_tzset_unlocked_r+0x34>
 800a784:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800a788:	1e53      	subs	r3, r2, #1
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	f63f af3e 	bhi.w	800a60c <_tzset_unlocked_r+0x34>
 800a790:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a794:	2b06      	cmp	r3, #6
 800a796:	f63f af39 	bhi.w	800a60c <_tzset_unlocked_r+0x34>
 800a79a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800a79e:	f887 8008 	strb.w	r8, [r7, #8]
 800a7a2:	617b      	str	r3, [r7, #20]
 800a7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a6:	eb04 0803 	add.w	r8, r4, r3
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a7b6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a7ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a7bc:	f898 3000 	ldrb.w	r3, [r8]
 800a7c0:	2b2f      	cmp	r3, #47	; 0x2f
 800a7c2:	d109      	bne.n	800a7d8 <_tzset_unlocked_r+0x200>
 800a7c4:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a7c8:	e9cd b600 	strd	fp, r6, [sp]
 800a7cc:	4633      	mov	r3, r6
 800a7ce:	aa07      	add	r2, sp, #28
 800a7d0:	493e      	ldr	r1, [pc, #248]	; (800a8cc <_tzset_unlocked_r+0x2f4>)
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	f001 ff94 	bl	800c700 <siscanf>
 800a7d8:	213c      	movs	r1, #60	; 0x3c
 800a7da:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a7de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a7e2:	3728      	adds	r7, #40	; 0x28
 800a7e4:	fb01 2203 	mla	r2, r1, r3, r2
 800a7e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a7ec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a7f0:	fb01 2303 	mla	r3, r1, r3, r2
 800a7f4:	f847 3c10 	str.w	r3, [r7, #-16]
 800a7f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a7fa:	4444      	add	r4, r8
 800a7fc:	f1b9 0f00 	cmp.w	r9, #0
 800a800:	d021      	beq.n	800a846 <_tzset_unlocked_r+0x26e>
 800a802:	6868      	ldr	r0, [r5, #4]
 800a804:	f7ff fe38 	bl	800a478 <__tzcalc_limits>
 800a808:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a80a:	4b28      	ldr	r3, [pc, #160]	; (800a8ac <_tzset_unlocked_r+0x2d4>)
 800a80c:	601a      	str	r2, [r3, #0]
 800a80e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a810:	1a9b      	subs	r3, r3, r2
 800a812:	bf18      	it	ne
 800a814:	2301      	movne	r3, #1
 800a816:	4a27      	ldr	r2, [pc, #156]	; (800a8b4 <_tzset_unlocked_r+0x2dc>)
 800a818:	6013      	str	r3, [r2, #0]
 800a81a:	e6f7      	b.n	800a60c <_tzset_unlocked_r+0x34>
 800a81c:	2b2b      	cmp	r3, #43	; 0x2b
 800a81e:	bf08      	it	eq
 800a820:	3401      	addeq	r4, #1
 800a822:	2701      	movs	r7, #1
 800a824:	e771      	b.n	800a70a <_tzset_unlocked_r+0x132>
 800a826:	213c      	movs	r1, #60	; 0x3c
 800a828:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a82c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a830:	fb01 2203 	mla	r2, r1, r3, r2
 800a834:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a838:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a83c:	fb01 2303 	mla	r3, r1, r3, r2
 800a840:	435f      	muls	r7, r3
 800a842:	652f      	str	r7, [r5, #80]	; 0x50
 800a844:	e779      	b.n	800a73a <_tzset_unlocked_r+0x162>
 800a846:	f04f 0901 	mov.w	r9, #1
 800a84a:	e77b      	b.n	800a744 <_tzset_unlocked_r+0x16c>
 800a84c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a850:	bf0a      	itet	eq
 800a852:	4643      	moveq	r3, r8
 800a854:	2344      	movne	r3, #68	; 0x44
 800a856:	3401      	addeq	r4, #1
 800a858:	220a      	movs	r2, #10
 800a85a:	a90b      	add	r1, sp, #44	; 0x2c
 800a85c:	4620      	mov	r0, r4
 800a85e:	9305      	str	r3, [sp, #20]
 800a860:	f002 f864 	bl	800c92c <strtoul>
 800a864:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a868:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a86c:	45a0      	cmp	r8, r4
 800a86e:	9b05      	ldr	r3, [sp, #20]
 800a870:	d114      	bne.n	800a89c <_tzset_unlocked_r+0x2c4>
 800a872:	234d      	movs	r3, #77	; 0x4d
 800a874:	f1b9 0f00 	cmp.w	r9, #0
 800a878:	d107      	bne.n	800a88a <_tzset_unlocked_r+0x2b2>
 800a87a:	722b      	strb	r3, [r5, #8]
 800a87c:	2103      	movs	r1, #3
 800a87e:	2302      	movs	r3, #2
 800a880:	f8c5 9014 	str.w	r9, [r5, #20]
 800a884:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a888:	e78f      	b.n	800a7aa <_tzset_unlocked_r+0x1d2>
 800a88a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a88e:	220b      	movs	r2, #11
 800a890:	2301      	movs	r3, #1
 800a892:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a896:	2300      	movs	r3, #0
 800a898:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a89a:	e786      	b.n	800a7aa <_tzset_unlocked_r+0x1d2>
 800a89c:	b280      	uxth	r0, r0
 800a89e:	723b      	strb	r3, [r7, #8]
 800a8a0:	6178      	str	r0, [r7, #20]
 800a8a2:	e782      	b.n	800a7aa <_tzset_unlocked_r+0x1d2>
 800a8a4:	0800d72e 	.word	0x0800d72e
 800a8a8:	200002d0 	.word	0x200002d0
 800a8ac:	200002d8 	.word	0x200002d8
 800a8b0:	0800d731 	.word	0x0800d731
 800a8b4:	200002d4 	.word	0x200002d4
 800a8b8:	2000008c 	.word	0x2000008c
 800a8bc:	200002c3 	.word	0x200002c3
 800a8c0:	0800d735 	.word	0x0800d735
 800a8c4:	0800d758 	.word	0x0800d758
 800a8c8:	0800d744 	.word	0x0800d744
 800a8cc:	0800d757 	.word	0x0800d757
 800a8d0:	200002b8 	.word	0x200002b8

0800a8d4 <__swbuf_r>:
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d6:	460e      	mov	r6, r1
 800a8d8:	4614      	mov	r4, r2
 800a8da:	4605      	mov	r5, r0
 800a8dc:	b118      	cbz	r0, 800a8e6 <__swbuf_r+0x12>
 800a8de:	6983      	ldr	r3, [r0, #24]
 800a8e0:	b90b      	cbnz	r3, 800a8e6 <__swbuf_r+0x12>
 800a8e2:	f000 fffd 	bl	800b8e0 <__sinit>
 800a8e6:	4b21      	ldr	r3, [pc, #132]	; (800a96c <__swbuf_r+0x98>)
 800a8e8:	429c      	cmp	r4, r3
 800a8ea:	d12a      	bne.n	800a942 <__swbuf_r+0x6e>
 800a8ec:	686c      	ldr	r4, [r5, #4]
 800a8ee:	69a3      	ldr	r3, [r4, #24]
 800a8f0:	60a3      	str	r3, [r4, #8]
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	071a      	lsls	r2, r3, #28
 800a8f6:	d52e      	bpl.n	800a956 <__swbuf_r+0x82>
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	b363      	cbz	r3, 800a956 <__swbuf_r+0x82>
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	6820      	ldr	r0, [r4, #0]
 800a900:	b2f6      	uxtb	r6, r6
 800a902:	1ac0      	subs	r0, r0, r3
 800a904:	6963      	ldr	r3, [r4, #20]
 800a906:	4637      	mov	r7, r6
 800a908:	4283      	cmp	r3, r0
 800a90a:	dc04      	bgt.n	800a916 <__swbuf_r+0x42>
 800a90c:	4621      	mov	r1, r4
 800a90e:	4628      	mov	r0, r5
 800a910:	f000 ff7c 	bl	800b80c <_fflush_r>
 800a914:	bb28      	cbnz	r0, 800a962 <__swbuf_r+0x8e>
 800a916:	68a3      	ldr	r3, [r4, #8]
 800a918:	3001      	adds	r0, #1
 800a91a:	3b01      	subs	r3, #1
 800a91c:	60a3      	str	r3, [r4, #8]
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	6022      	str	r2, [r4, #0]
 800a924:	701e      	strb	r6, [r3, #0]
 800a926:	6963      	ldr	r3, [r4, #20]
 800a928:	4283      	cmp	r3, r0
 800a92a:	d004      	beq.n	800a936 <__swbuf_r+0x62>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	07db      	lsls	r3, r3, #31
 800a930:	d519      	bpl.n	800a966 <__swbuf_r+0x92>
 800a932:	2e0a      	cmp	r6, #10
 800a934:	d117      	bne.n	800a966 <__swbuf_r+0x92>
 800a936:	4621      	mov	r1, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	f000 ff67 	bl	800b80c <_fflush_r>
 800a93e:	b190      	cbz	r0, 800a966 <__swbuf_r+0x92>
 800a940:	e00f      	b.n	800a962 <__swbuf_r+0x8e>
 800a942:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <__swbuf_r+0x9c>)
 800a944:	429c      	cmp	r4, r3
 800a946:	d101      	bne.n	800a94c <__swbuf_r+0x78>
 800a948:	68ac      	ldr	r4, [r5, #8]
 800a94a:	e7d0      	b.n	800a8ee <__swbuf_r+0x1a>
 800a94c:	4b09      	ldr	r3, [pc, #36]	; (800a974 <__swbuf_r+0xa0>)
 800a94e:	429c      	cmp	r4, r3
 800a950:	bf08      	it	eq
 800a952:	68ec      	ldreq	r4, [r5, #12]
 800a954:	e7cb      	b.n	800a8ee <__swbuf_r+0x1a>
 800a956:	4621      	mov	r1, r4
 800a958:	4628      	mov	r0, r5
 800a95a:	f000 f80d 	bl	800a978 <__swsetup_r>
 800a95e:	2800      	cmp	r0, #0
 800a960:	d0cc      	beq.n	800a8fc <__swbuf_r+0x28>
 800a962:	f04f 37ff 	mov.w	r7, #4294967295
 800a966:	4638      	mov	r0, r7
 800a968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a96a:	bf00      	nop
 800a96c:	0800d798 	.word	0x0800d798
 800a970:	0800d7b8 	.word	0x0800d7b8
 800a974:	0800d778 	.word	0x0800d778

0800a978 <__swsetup_r>:
 800a978:	4b32      	ldr	r3, [pc, #200]	; (800aa44 <__swsetup_r+0xcc>)
 800a97a:	b570      	push	{r4, r5, r6, lr}
 800a97c:	681d      	ldr	r5, [r3, #0]
 800a97e:	4606      	mov	r6, r0
 800a980:	460c      	mov	r4, r1
 800a982:	b125      	cbz	r5, 800a98e <__swsetup_r+0x16>
 800a984:	69ab      	ldr	r3, [r5, #24]
 800a986:	b913      	cbnz	r3, 800a98e <__swsetup_r+0x16>
 800a988:	4628      	mov	r0, r5
 800a98a:	f000 ffa9 	bl	800b8e0 <__sinit>
 800a98e:	4b2e      	ldr	r3, [pc, #184]	; (800aa48 <__swsetup_r+0xd0>)
 800a990:	429c      	cmp	r4, r3
 800a992:	d10f      	bne.n	800a9b4 <__swsetup_r+0x3c>
 800a994:	686c      	ldr	r4, [r5, #4]
 800a996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	0715      	lsls	r5, r2, #28
 800a99e:	d42c      	bmi.n	800a9fa <__swsetup_r+0x82>
 800a9a0:	06d0      	lsls	r0, r2, #27
 800a9a2:	d411      	bmi.n	800a9c8 <__swsetup_r+0x50>
 800a9a4:	2209      	movs	r2, #9
 800a9a6:	6032      	str	r2, [r6, #0]
 800a9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ac:	81a3      	strh	r3, [r4, #12]
 800a9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b2:	e03e      	b.n	800aa32 <__swsetup_r+0xba>
 800a9b4:	4b25      	ldr	r3, [pc, #148]	; (800aa4c <__swsetup_r+0xd4>)
 800a9b6:	429c      	cmp	r4, r3
 800a9b8:	d101      	bne.n	800a9be <__swsetup_r+0x46>
 800a9ba:	68ac      	ldr	r4, [r5, #8]
 800a9bc:	e7eb      	b.n	800a996 <__swsetup_r+0x1e>
 800a9be:	4b24      	ldr	r3, [pc, #144]	; (800aa50 <__swsetup_r+0xd8>)
 800a9c0:	429c      	cmp	r4, r3
 800a9c2:	bf08      	it	eq
 800a9c4:	68ec      	ldreq	r4, [r5, #12]
 800a9c6:	e7e6      	b.n	800a996 <__swsetup_r+0x1e>
 800a9c8:	0751      	lsls	r1, r2, #29
 800a9ca:	d512      	bpl.n	800a9f2 <__swsetup_r+0x7a>
 800a9cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9ce:	b141      	cbz	r1, 800a9e2 <__swsetup_r+0x6a>
 800a9d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9d4:	4299      	cmp	r1, r3
 800a9d6:	d002      	beq.n	800a9de <__swsetup_r+0x66>
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f7fe ff87 	bl	80098ec <_free_r>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9e8:	81a3      	strh	r3, [r4, #12]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	6063      	str	r3, [r4, #4]
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	f043 0308 	orr.w	r3, r3, #8
 800a9f8:	81a3      	strh	r3, [r4, #12]
 800a9fa:	6923      	ldr	r3, [r4, #16]
 800a9fc:	b94b      	cbnz	r3, 800aa12 <__swsetup_r+0x9a>
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa08:	d003      	beq.n	800aa12 <__swsetup_r+0x9a>
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f001 f86b 	bl	800bae8 <__smakebuf_r>
 800aa12:	89a2      	ldrh	r2, [r4, #12]
 800aa14:	f012 0301 	ands.w	r3, r2, #1
 800aa18:	d00c      	beq.n	800aa34 <__swsetup_r+0xbc>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60a3      	str	r3, [r4, #8]
 800aa1e:	6963      	ldr	r3, [r4, #20]
 800aa20:	425b      	negs	r3, r3
 800aa22:	61a3      	str	r3, [r4, #24]
 800aa24:	6923      	ldr	r3, [r4, #16]
 800aa26:	b953      	cbnz	r3, 800aa3e <__swsetup_r+0xc6>
 800aa28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800aa30:	d1ba      	bne.n	800a9a8 <__swsetup_r+0x30>
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	0792      	lsls	r2, r2, #30
 800aa36:	bf58      	it	pl
 800aa38:	6963      	ldrpl	r3, [r4, #20]
 800aa3a:	60a3      	str	r3, [r4, #8]
 800aa3c:	e7f2      	b.n	800aa24 <__swsetup_r+0xac>
 800aa3e:	2000      	movs	r0, #0
 800aa40:	e7f7      	b.n	800aa32 <__swsetup_r+0xba>
 800aa42:	bf00      	nop
 800aa44:	20000028 	.word	0x20000028
 800aa48:	0800d798 	.word	0x0800d798
 800aa4c:	0800d7b8 	.word	0x0800d7b8
 800aa50:	0800d778 	.word	0x0800d778

0800aa54 <div>:
 800aa54:	b510      	push	{r4, lr}
 800aa56:	fb91 f4f2 	sdiv	r4, r1, r2
 800aa5a:	2900      	cmp	r1, #0
 800aa5c:	fb02 1314 	mls	r3, r2, r4, r1
 800aa60:	db06      	blt.n	800aa70 <div+0x1c>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	da01      	bge.n	800aa6a <div+0x16>
 800aa66:	3401      	adds	r4, #1
 800aa68:	1a9b      	subs	r3, r3, r2
 800aa6a:	e9c0 4300 	strd	r4, r3, [r0]
 800aa6e:	bd10      	pop	{r4, pc}
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	bfc4      	itt	gt
 800aa74:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800aa78:	189b      	addgt	r3, r3, r2
 800aa7a:	e7f6      	b.n	800aa6a <div+0x16>

0800aa7c <quorem>:
 800aa7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa80:	6903      	ldr	r3, [r0, #16]
 800aa82:	690c      	ldr	r4, [r1, #16]
 800aa84:	4680      	mov	r8, r0
 800aa86:	42a3      	cmp	r3, r4
 800aa88:	f2c0 8084 	blt.w	800ab94 <quorem+0x118>
 800aa8c:	3c01      	subs	r4, #1
 800aa8e:	f101 0714 	add.w	r7, r1, #20
 800aa92:	f100 0614 	add.w	r6, r0, #20
 800aa96:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800aa9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800aa9e:	3501      	adds	r5, #1
 800aaa0:	fbb0 f5f5 	udiv	r5, r0, r5
 800aaa4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800aaa8:	eb06 030c 	add.w	r3, r6, ip
 800aaac:	eb07 090c 	add.w	r9, r7, ip
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	b39d      	cbz	r5, 800ab1c <quorem+0xa0>
 800aab4:	f04f 0a00 	mov.w	sl, #0
 800aab8:	4638      	mov	r0, r7
 800aaba:	46b6      	mov	lr, r6
 800aabc:	46d3      	mov	fp, sl
 800aabe:	f850 2b04 	ldr.w	r2, [r0], #4
 800aac2:	b293      	uxth	r3, r2
 800aac4:	fb05 a303 	mla	r3, r5, r3, sl
 800aac8:	0c12      	lsrs	r2, r2, #16
 800aaca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aace:	fb05 a202 	mla	r2, r5, r2, sl
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	ebab 0303 	sub.w	r3, fp, r3
 800aad8:	f8de b000 	ldr.w	fp, [lr]
 800aadc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800aae0:	fa1f fb8b 	uxth.w	fp, fp
 800aae4:	445b      	add	r3, fp
 800aae6:	fa1f fb82 	uxth.w	fp, r2
 800aaea:	f8de 2000 	ldr.w	r2, [lr]
 800aaee:	4581      	cmp	r9, r0
 800aaf0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800aaf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aafe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ab02:	f84e 3b04 	str.w	r3, [lr], #4
 800ab06:	d2da      	bcs.n	800aabe <quorem+0x42>
 800ab08:	f856 300c 	ldr.w	r3, [r6, ip]
 800ab0c:	b933      	cbnz	r3, 800ab1c <quorem+0xa0>
 800ab0e:	9b01      	ldr	r3, [sp, #4]
 800ab10:	3b04      	subs	r3, #4
 800ab12:	429e      	cmp	r6, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	d331      	bcc.n	800ab7c <quorem+0x100>
 800ab18:	f8c8 4010 	str.w	r4, [r8, #16]
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	f001 fa53 	bl	800bfc8 <__mcmp>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	db26      	blt.n	800ab74 <quorem+0xf8>
 800ab26:	4630      	mov	r0, r6
 800ab28:	f04f 0c00 	mov.w	ip, #0
 800ab2c:	3501      	adds	r5, #1
 800ab2e:	f857 1b04 	ldr.w	r1, [r7], #4
 800ab32:	f8d0 e000 	ldr.w	lr, [r0]
 800ab36:	b28b      	uxth	r3, r1
 800ab38:	ebac 0303 	sub.w	r3, ip, r3
 800ab3c:	fa1f f28e 	uxth.w	r2, lr
 800ab40:	4413      	add	r3, r2
 800ab42:	0c0a      	lsrs	r2, r1, #16
 800ab44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab52:	45b9      	cmp	r9, r7
 800ab54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab58:	f840 3b04 	str.w	r3, [r0], #4
 800ab5c:	d2e7      	bcs.n	800ab2e <quorem+0xb2>
 800ab5e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ab62:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ab66:	b92a      	cbnz	r2, 800ab74 <quorem+0xf8>
 800ab68:	3b04      	subs	r3, #4
 800ab6a:	429e      	cmp	r6, r3
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	d30b      	bcc.n	800ab88 <quorem+0x10c>
 800ab70:	f8c8 4010 	str.w	r4, [r8, #16]
 800ab74:	4628      	mov	r0, r5
 800ab76:	b003      	add	sp, #12
 800ab78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7c:	6812      	ldr	r2, [r2, #0]
 800ab7e:	3b04      	subs	r3, #4
 800ab80:	2a00      	cmp	r2, #0
 800ab82:	d1c9      	bne.n	800ab18 <quorem+0x9c>
 800ab84:	3c01      	subs	r4, #1
 800ab86:	e7c4      	b.n	800ab12 <quorem+0x96>
 800ab88:	6812      	ldr	r2, [r2, #0]
 800ab8a:	3b04      	subs	r3, #4
 800ab8c:	2a00      	cmp	r2, #0
 800ab8e:	d1ef      	bne.n	800ab70 <quorem+0xf4>
 800ab90:	3c01      	subs	r4, #1
 800ab92:	e7ea      	b.n	800ab6a <quorem+0xee>
 800ab94:	2000      	movs	r0, #0
 800ab96:	e7ee      	b.n	800ab76 <quorem+0xfa>

0800ab98 <_dtoa_r>:
 800ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9c:	4616      	mov	r6, r2
 800ab9e:	461f      	mov	r7, r3
 800aba0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aba2:	b095      	sub	sp, #84	; 0x54
 800aba4:	4604      	mov	r4, r0
 800aba6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800abaa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800abae:	b93d      	cbnz	r5, 800abc0 <_dtoa_r+0x28>
 800abb0:	2010      	movs	r0, #16
 800abb2:	f7fe fbef 	bl	8009394 <malloc>
 800abb6:	6260      	str	r0, [r4, #36]	; 0x24
 800abb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800abbc:	6005      	str	r5, [r0, #0]
 800abbe:	60c5      	str	r5, [r0, #12]
 800abc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abc2:	6819      	ldr	r1, [r3, #0]
 800abc4:	b151      	cbz	r1, 800abdc <_dtoa_r+0x44>
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	2301      	movs	r3, #1
 800abca:	4093      	lsls	r3, r2
 800abcc:	604a      	str	r2, [r1, #4]
 800abce:	608b      	str	r3, [r1, #8]
 800abd0:	4620      	mov	r0, r4
 800abd2:	f001 f818 	bl	800bc06 <_Bfree>
 800abd6:	2200      	movs	r2, #0
 800abd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	1e3b      	subs	r3, r7, #0
 800abde:	bfaf      	iteee	ge
 800abe0:	2300      	movge	r3, #0
 800abe2:	2201      	movlt	r2, #1
 800abe4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800abe8:	9303      	strlt	r3, [sp, #12]
 800abea:	bfac      	ite	ge
 800abec:	f8c8 3000 	strge.w	r3, [r8]
 800abf0:	f8c8 2000 	strlt.w	r2, [r8]
 800abf4:	4bae      	ldr	r3, [pc, #696]	; (800aeb0 <_dtoa_r+0x318>)
 800abf6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800abfa:	ea33 0308 	bics.w	r3, r3, r8
 800abfe:	d11b      	bne.n	800ac38 <_dtoa_r+0xa0>
 800ac00:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	9b02      	ldr	r3, [sp, #8]
 800ac0a:	b923      	cbnz	r3, 800ac16 <_dtoa_r+0x7e>
 800ac0c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ac10:	2800      	cmp	r0, #0
 800ac12:	f000 8545 	beq.w	800b6a0 <_dtoa_r+0xb08>
 800ac16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac18:	b953      	cbnz	r3, 800ac30 <_dtoa_r+0x98>
 800ac1a:	4ba6      	ldr	r3, [pc, #664]	; (800aeb4 <_dtoa_r+0x31c>)
 800ac1c:	e021      	b.n	800ac62 <_dtoa_r+0xca>
 800ac1e:	4ba6      	ldr	r3, [pc, #664]	; (800aeb8 <_dtoa_r+0x320>)
 800ac20:	9306      	str	r3, [sp, #24]
 800ac22:	3308      	adds	r3, #8
 800ac24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac26:	6013      	str	r3, [r2, #0]
 800ac28:	9806      	ldr	r0, [sp, #24]
 800ac2a:	b015      	add	sp, #84	; 0x54
 800ac2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac30:	4ba0      	ldr	r3, [pc, #640]	; (800aeb4 <_dtoa_r+0x31c>)
 800ac32:	9306      	str	r3, [sp, #24]
 800ac34:	3303      	adds	r3, #3
 800ac36:	e7f5      	b.n	800ac24 <_dtoa_r+0x8c>
 800ac38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	2300      	movs	r3, #0
 800ac40:	4630      	mov	r0, r6
 800ac42:	4639      	mov	r1, r7
 800ac44:	f7f5 feba 	bl	80009bc <__aeabi_dcmpeq>
 800ac48:	4682      	mov	sl, r0
 800ac4a:	b160      	cbz	r0, 800ac66 <_dtoa_r+0xce>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 8520 	beq.w	800b69a <_dtoa_r+0xb02>
 800ac5a:	4b98      	ldr	r3, [pc, #608]	; (800aebc <_dtoa_r+0x324>)
 800ac5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	9306      	str	r3, [sp, #24]
 800ac64:	e7e0      	b.n	800ac28 <_dtoa_r+0x90>
 800ac66:	ab12      	add	r3, sp, #72	; 0x48
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	ab13      	add	r3, sp, #76	; 0x4c
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	4632      	mov	r2, r6
 800ac70:	463b      	mov	r3, r7
 800ac72:	4620      	mov	r0, r4
 800ac74:	f001 fa20 	bl	800c0b8 <__d2b>
 800ac78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ac7c:	4683      	mov	fp, r0
 800ac7e:	2d00      	cmp	r5, #0
 800ac80:	d07d      	beq.n	800ad7e <_dtoa_r+0x1e6>
 800ac82:	46b0      	mov	r8, r6
 800ac84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac88:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800ac8c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800ac90:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ac94:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800ac98:	2200      	movs	r2, #0
 800ac9a:	4b89      	ldr	r3, [pc, #548]	; (800aec0 <_dtoa_r+0x328>)
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	4649      	mov	r1, r9
 800aca0:	f7f5 fa6c 	bl	800017c <__aeabi_dsub>
 800aca4:	a37c      	add	r3, pc, #496	; (adr r3, 800ae98 <_dtoa_r+0x300>)
 800aca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acaa:	f7f5 fc1f 	bl	80004ec <__aeabi_dmul>
 800acae:	a37c      	add	r3, pc, #496	; (adr r3, 800aea0 <_dtoa_r+0x308>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f7f5 fa64 	bl	8000180 <__adddf3>
 800acb8:	4606      	mov	r6, r0
 800acba:	4628      	mov	r0, r5
 800acbc:	460f      	mov	r7, r1
 800acbe:	f7f5 fbab 	bl	8000418 <__aeabi_i2d>
 800acc2:	a379      	add	r3, pc, #484	; (adr r3, 800aea8 <_dtoa_r+0x310>)
 800acc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc8:	f7f5 fc10 	bl	80004ec <__aeabi_dmul>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	4630      	mov	r0, r6
 800acd2:	4639      	mov	r1, r7
 800acd4:	f7f5 fa54 	bl	8000180 <__adddf3>
 800acd8:	4606      	mov	r6, r0
 800acda:	460f      	mov	r7, r1
 800acdc:	f7f5 feb6 	bl	8000a4c <__aeabi_d2iz>
 800ace0:	2200      	movs	r2, #0
 800ace2:	4682      	mov	sl, r0
 800ace4:	2300      	movs	r3, #0
 800ace6:	4630      	mov	r0, r6
 800ace8:	4639      	mov	r1, r7
 800acea:	f7f5 fe71 	bl	80009d0 <__aeabi_dcmplt>
 800acee:	b148      	cbz	r0, 800ad04 <_dtoa_r+0x16c>
 800acf0:	4650      	mov	r0, sl
 800acf2:	f7f5 fb91 	bl	8000418 <__aeabi_i2d>
 800acf6:	4632      	mov	r2, r6
 800acf8:	463b      	mov	r3, r7
 800acfa:	f7f5 fe5f 	bl	80009bc <__aeabi_dcmpeq>
 800acfe:	b908      	cbnz	r0, 800ad04 <_dtoa_r+0x16c>
 800ad00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad04:	f1ba 0f16 	cmp.w	sl, #22
 800ad08:	d85a      	bhi.n	800adc0 <_dtoa_r+0x228>
 800ad0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad0e:	496d      	ldr	r1, [pc, #436]	; (800aec4 <_dtoa_r+0x32c>)
 800ad10:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ad14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad18:	f7f5 fe78 	bl	8000a0c <__aeabi_dcmpgt>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d051      	beq.n	800adc4 <_dtoa_r+0x22c>
 800ad20:	2300      	movs	r3, #0
 800ad22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad26:	930d      	str	r3, [sp, #52]	; 0x34
 800ad28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad2a:	1b5d      	subs	r5, r3, r5
 800ad2c:	1e6b      	subs	r3, r5, #1
 800ad2e:	9307      	str	r3, [sp, #28]
 800ad30:	bf43      	ittte	mi
 800ad32:	2300      	movmi	r3, #0
 800ad34:	f1c5 0901 	rsbmi	r9, r5, #1
 800ad38:	9307      	strmi	r3, [sp, #28]
 800ad3a:	f04f 0900 	movpl.w	r9, #0
 800ad3e:	f1ba 0f00 	cmp.w	sl, #0
 800ad42:	db41      	blt.n	800adc8 <_dtoa_r+0x230>
 800ad44:	9b07      	ldr	r3, [sp, #28]
 800ad46:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800ad4a:	4453      	add	r3, sl
 800ad4c:	9307      	str	r3, [sp, #28]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	9308      	str	r3, [sp, #32]
 800ad52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ad54:	2b09      	cmp	r3, #9
 800ad56:	f200 808f 	bhi.w	800ae78 <_dtoa_r+0x2e0>
 800ad5a:	2b05      	cmp	r3, #5
 800ad5c:	bfc4      	itt	gt
 800ad5e:	3b04      	subgt	r3, #4
 800ad60:	931e      	strgt	r3, [sp, #120]	; 0x78
 800ad62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ad64:	bfc8      	it	gt
 800ad66:	2500      	movgt	r5, #0
 800ad68:	f1a3 0302 	sub.w	r3, r3, #2
 800ad6c:	bfd8      	it	le
 800ad6e:	2501      	movle	r5, #1
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	f200 808d 	bhi.w	800ae90 <_dtoa_r+0x2f8>
 800ad76:	e8df f003 	tbb	[pc, r3]
 800ad7a:	7d7b      	.short	0x7d7b
 800ad7c:	6f2f      	.short	0x6f2f
 800ad7e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ad82:	441d      	add	r5, r3
 800ad84:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ad88:	2820      	cmp	r0, #32
 800ad8a:	dd13      	ble.n	800adb4 <_dtoa_r+0x21c>
 800ad8c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ad90:	9b02      	ldr	r3, [sp, #8]
 800ad92:	fa08 f800 	lsl.w	r8, r8, r0
 800ad96:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ad9a:	fa23 f000 	lsr.w	r0, r3, r0
 800ad9e:	ea48 0000 	orr.w	r0, r8, r0
 800ada2:	f7f5 fb29 	bl	80003f8 <__aeabi_ui2d>
 800ada6:	2301      	movs	r3, #1
 800ada8:	4680      	mov	r8, r0
 800adaa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800adae:	3d01      	subs	r5, #1
 800adb0:	9310      	str	r3, [sp, #64]	; 0x40
 800adb2:	e771      	b.n	800ac98 <_dtoa_r+0x100>
 800adb4:	9b02      	ldr	r3, [sp, #8]
 800adb6:	f1c0 0020 	rsb	r0, r0, #32
 800adba:	fa03 f000 	lsl.w	r0, r3, r0
 800adbe:	e7f0      	b.n	800ada2 <_dtoa_r+0x20a>
 800adc0:	2301      	movs	r3, #1
 800adc2:	e7b0      	b.n	800ad26 <_dtoa_r+0x18e>
 800adc4:	900d      	str	r0, [sp, #52]	; 0x34
 800adc6:	e7af      	b.n	800ad28 <_dtoa_r+0x190>
 800adc8:	f1ca 0300 	rsb	r3, sl, #0
 800adcc:	9308      	str	r3, [sp, #32]
 800adce:	2300      	movs	r3, #0
 800add0:	eba9 090a 	sub.w	r9, r9, sl
 800add4:	930c      	str	r3, [sp, #48]	; 0x30
 800add6:	e7bc      	b.n	800ad52 <_dtoa_r+0x1ba>
 800add8:	2301      	movs	r3, #1
 800adda:	9309      	str	r3, [sp, #36]	; 0x24
 800addc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800adde:	2b00      	cmp	r3, #0
 800ade0:	dd74      	ble.n	800aecc <_dtoa_r+0x334>
 800ade2:	4698      	mov	r8, r3
 800ade4:	9304      	str	r3, [sp, #16]
 800ade6:	2200      	movs	r2, #0
 800ade8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800adea:	6072      	str	r2, [r6, #4]
 800adec:	2204      	movs	r2, #4
 800adee:	f102 0014 	add.w	r0, r2, #20
 800adf2:	4298      	cmp	r0, r3
 800adf4:	6871      	ldr	r1, [r6, #4]
 800adf6:	d96e      	bls.n	800aed6 <_dtoa_r+0x33e>
 800adf8:	4620      	mov	r0, r4
 800adfa:	f000 fed0 	bl	800bb9e <_Balloc>
 800adfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae00:	6030      	str	r0, [r6, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f1b8 0f0e 	cmp.w	r8, #14
 800ae08:	9306      	str	r3, [sp, #24]
 800ae0a:	f200 80ed 	bhi.w	800afe8 <_dtoa_r+0x450>
 800ae0e:	2d00      	cmp	r5, #0
 800ae10:	f000 80ea 	beq.w	800afe8 <_dtoa_r+0x450>
 800ae14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae18:	f1ba 0f00 	cmp.w	sl, #0
 800ae1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ae20:	dd77      	ble.n	800af12 <_dtoa_r+0x37a>
 800ae22:	4a28      	ldr	r2, [pc, #160]	; (800aec4 <_dtoa_r+0x32c>)
 800ae24:	f00a 030f 	and.w	r3, sl, #15
 800ae28:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ae2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae30:	06f0      	lsls	r0, r6, #27
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ae3a:	d568      	bpl.n	800af0e <_dtoa_r+0x376>
 800ae3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae40:	4b21      	ldr	r3, [pc, #132]	; (800aec8 <_dtoa_r+0x330>)
 800ae42:	2503      	movs	r5, #3
 800ae44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae48:	f7f5 fc7a 	bl	8000740 <__aeabi_ddiv>
 800ae4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae50:	f006 060f 	and.w	r6, r6, #15
 800ae54:	4f1c      	ldr	r7, [pc, #112]	; (800aec8 <_dtoa_r+0x330>)
 800ae56:	e04f      	b.n	800aef8 <_dtoa_r+0x360>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ae5e:	4453      	add	r3, sl
 800ae60:	f103 0801 	add.w	r8, r3, #1
 800ae64:	9304      	str	r3, [sp, #16]
 800ae66:	4643      	mov	r3, r8
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	bfb8      	it	lt
 800ae6c:	2301      	movlt	r3, #1
 800ae6e:	e7ba      	b.n	800ade6 <_dtoa_r+0x24e>
 800ae70:	2300      	movs	r3, #0
 800ae72:	e7b2      	b.n	800adda <_dtoa_r+0x242>
 800ae74:	2300      	movs	r3, #0
 800ae76:	e7f0      	b.n	800ae5a <_dtoa_r+0x2c2>
 800ae78:	2501      	movs	r5, #1
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9509      	str	r5, [sp, #36]	; 0x24
 800ae7e:	931e      	str	r3, [sp, #120]	; 0x78
 800ae80:	f04f 33ff 	mov.w	r3, #4294967295
 800ae84:	2200      	movs	r2, #0
 800ae86:	9304      	str	r3, [sp, #16]
 800ae88:	4698      	mov	r8, r3
 800ae8a:	2312      	movs	r3, #18
 800ae8c:	921f      	str	r2, [sp, #124]	; 0x7c
 800ae8e:	e7aa      	b.n	800ade6 <_dtoa_r+0x24e>
 800ae90:	2301      	movs	r3, #1
 800ae92:	9309      	str	r3, [sp, #36]	; 0x24
 800ae94:	e7f4      	b.n	800ae80 <_dtoa_r+0x2e8>
 800ae96:	bf00      	nop
 800ae98:	636f4361 	.word	0x636f4361
 800ae9c:	3fd287a7 	.word	0x3fd287a7
 800aea0:	8b60c8b3 	.word	0x8b60c8b3
 800aea4:	3fc68a28 	.word	0x3fc68a28
 800aea8:	509f79fb 	.word	0x509f79fb
 800aeac:	3fd34413 	.word	0x3fd34413
 800aeb0:	7ff00000 	.word	0x7ff00000
 800aeb4:	0800d773 	.word	0x0800d773
 800aeb8:	0800d76a 	.word	0x0800d76a
 800aebc:	0800d966 	.word	0x0800d966
 800aec0:	3ff80000 	.word	0x3ff80000
 800aec4:	0800d860 	.word	0x0800d860
 800aec8:	0800d838 	.word	0x0800d838
 800aecc:	2301      	movs	r3, #1
 800aece:	9304      	str	r3, [sp, #16]
 800aed0:	4698      	mov	r8, r3
 800aed2:	461a      	mov	r2, r3
 800aed4:	e7da      	b.n	800ae8c <_dtoa_r+0x2f4>
 800aed6:	3101      	adds	r1, #1
 800aed8:	6071      	str	r1, [r6, #4]
 800aeda:	0052      	lsls	r2, r2, #1
 800aedc:	e787      	b.n	800adee <_dtoa_r+0x256>
 800aede:	07f1      	lsls	r1, r6, #31
 800aee0:	d508      	bpl.n	800aef4 <_dtoa_r+0x35c>
 800aee2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeea:	f7f5 faff 	bl	80004ec <__aeabi_dmul>
 800aeee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aef2:	3501      	adds	r5, #1
 800aef4:	1076      	asrs	r6, r6, #1
 800aef6:	3708      	adds	r7, #8
 800aef8:	2e00      	cmp	r6, #0
 800aefa:	d1f0      	bne.n	800aede <_dtoa_r+0x346>
 800aefc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af04:	f7f5 fc1c 	bl	8000740 <__aeabi_ddiv>
 800af08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af0c:	e01b      	b.n	800af46 <_dtoa_r+0x3ae>
 800af0e:	2502      	movs	r5, #2
 800af10:	e7a0      	b.n	800ae54 <_dtoa_r+0x2bc>
 800af12:	f000 80a4 	beq.w	800b05e <_dtoa_r+0x4c6>
 800af16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800af1a:	f1ca 0600 	rsb	r6, sl, #0
 800af1e:	4ba0      	ldr	r3, [pc, #640]	; (800b1a0 <_dtoa_r+0x608>)
 800af20:	f006 020f 	and.w	r2, r6, #15
 800af24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	f7f5 fade 	bl	80004ec <__aeabi_dmul>
 800af30:	2502      	movs	r5, #2
 800af32:	2300      	movs	r3, #0
 800af34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af38:	4f9a      	ldr	r7, [pc, #616]	; (800b1a4 <_dtoa_r+0x60c>)
 800af3a:	1136      	asrs	r6, r6, #4
 800af3c:	2e00      	cmp	r6, #0
 800af3e:	f040 8083 	bne.w	800b048 <_dtoa_r+0x4b0>
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e0      	bne.n	800af08 <_dtoa_r+0x370>
 800af46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 808a 	beq.w	800b062 <_dtoa_r+0x4ca>
 800af4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800af56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af5a:	2200      	movs	r2, #0
 800af5c:	4b92      	ldr	r3, [pc, #584]	; (800b1a8 <_dtoa_r+0x610>)
 800af5e:	f7f5 fd37 	bl	80009d0 <__aeabi_dcmplt>
 800af62:	2800      	cmp	r0, #0
 800af64:	d07d      	beq.n	800b062 <_dtoa_r+0x4ca>
 800af66:	f1b8 0f00 	cmp.w	r8, #0
 800af6a:	d07a      	beq.n	800b062 <_dtoa_r+0x4ca>
 800af6c:	9b04      	ldr	r3, [sp, #16]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	dd36      	ble.n	800afe0 <_dtoa_r+0x448>
 800af72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af76:	2200      	movs	r2, #0
 800af78:	4b8c      	ldr	r3, [pc, #560]	; (800b1ac <_dtoa_r+0x614>)
 800af7a:	f7f5 fab7 	bl	80004ec <__aeabi_dmul>
 800af7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af82:	9e04      	ldr	r6, [sp, #16]
 800af84:	f10a 37ff 	add.w	r7, sl, #4294967295
 800af88:	3501      	adds	r5, #1
 800af8a:	4628      	mov	r0, r5
 800af8c:	f7f5 fa44 	bl	8000418 <__aeabi_i2d>
 800af90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af94:	f7f5 faaa 	bl	80004ec <__aeabi_dmul>
 800af98:	2200      	movs	r2, #0
 800af9a:	4b85      	ldr	r3, [pc, #532]	; (800b1b0 <_dtoa_r+0x618>)
 800af9c:	f7f5 f8f0 	bl	8000180 <__adddf3>
 800afa0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800afa4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800afa8:	950b      	str	r5, [sp, #44]	; 0x2c
 800afaa:	2e00      	cmp	r6, #0
 800afac:	d15c      	bne.n	800b068 <_dtoa_r+0x4d0>
 800afae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afb2:	2200      	movs	r2, #0
 800afb4:	4b7f      	ldr	r3, [pc, #508]	; (800b1b4 <_dtoa_r+0x61c>)
 800afb6:	f7f5 f8e1 	bl	800017c <__aeabi_dsub>
 800afba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afbc:	462b      	mov	r3, r5
 800afbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afc2:	f7f5 fd23 	bl	8000a0c <__aeabi_dcmpgt>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	f040 8281 	bne.w	800b4ce <_dtoa_r+0x936>
 800afcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afd2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800afd6:	f7f5 fcfb 	bl	80009d0 <__aeabi_dcmplt>
 800afda:	2800      	cmp	r0, #0
 800afdc:	f040 8275 	bne.w	800b4ca <_dtoa_r+0x932>
 800afe0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800afe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afea:	2b00      	cmp	r3, #0
 800afec:	f2c0 814b 	blt.w	800b286 <_dtoa_r+0x6ee>
 800aff0:	f1ba 0f0e 	cmp.w	sl, #14
 800aff4:	f300 8147 	bgt.w	800b286 <_dtoa_r+0x6ee>
 800aff8:	4b69      	ldr	r3, [pc, #420]	; (800b1a0 <_dtoa_r+0x608>)
 800affa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b006:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f280 80d7 	bge.w	800b1bc <_dtoa_r+0x624>
 800b00e:	f1b8 0f00 	cmp.w	r8, #0
 800b012:	f300 80d3 	bgt.w	800b1bc <_dtoa_r+0x624>
 800b016:	f040 8257 	bne.w	800b4c8 <_dtoa_r+0x930>
 800b01a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b01e:	2200      	movs	r2, #0
 800b020:	4b64      	ldr	r3, [pc, #400]	; (800b1b4 <_dtoa_r+0x61c>)
 800b022:	f7f5 fa63 	bl	80004ec <__aeabi_dmul>
 800b026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b02a:	f7f5 fce5 	bl	80009f8 <__aeabi_dcmpge>
 800b02e:	4646      	mov	r6, r8
 800b030:	4647      	mov	r7, r8
 800b032:	2800      	cmp	r0, #0
 800b034:	f040 822d 	bne.w	800b492 <_dtoa_r+0x8fa>
 800b038:	9b06      	ldr	r3, [sp, #24]
 800b03a:	9a06      	ldr	r2, [sp, #24]
 800b03c:	1c5d      	adds	r5, r3, #1
 800b03e:	2331      	movs	r3, #49	; 0x31
 800b040:	f10a 0a01 	add.w	sl, sl, #1
 800b044:	7013      	strb	r3, [r2, #0]
 800b046:	e228      	b.n	800b49a <_dtoa_r+0x902>
 800b048:	07f2      	lsls	r2, r6, #31
 800b04a:	d505      	bpl.n	800b058 <_dtoa_r+0x4c0>
 800b04c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b050:	f7f5 fa4c 	bl	80004ec <__aeabi_dmul>
 800b054:	2301      	movs	r3, #1
 800b056:	3501      	adds	r5, #1
 800b058:	1076      	asrs	r6, r6, #1
 800b05a:	3708      	adds	r7, #8
 800b05c:	e76e      	b.n	800af3c <_dtoa_r+0x3a4>
 800b05e:	2502      	movs	r5, #2
 800b060:	e771      	b.n	800af46 <_dtoa_r+0x3ae>
 800b062:	4657      	mov	r7, sl
 800b064:	4646      	mov	r6, r8
 800b066:	e790      	b.n	800af8a <_dtoa_r+0x3f2>
 800b068:	4b4d      	ldr	r3, [pc, #308]	; (800b1a0 <_dtoa_r+0x608>)
 800b06a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b06e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b074:	2b00      	cmp	r3, #0
 800b076:	d048      	beq.n	800b10a <_dtoa_r+0x572>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	2000      	movs	r0, #0
 800b07e:	494e      	ldr	r1, [pc, #312]	; (800b1b8 <_dtoa_r+0x620>)
 800b080:	f7f5 fb5e 	bl	8000740 <__aeabi_ddiv>
 800b084:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b088:	f7f5 f878 	bl	800017c <__aeabi_dsub>
 800b08c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b090:	9d06      	ldr	r5, [sp, #24]
 800b092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b096:	f7f5 fcd9 	bl	8000a4c <__aeabi_d2iz>
 800b09a:	9011      	str	r0, [sp, #68]	; 0x44
 800b09c:	f7f5 f9bc 	bl	8000418 <__aeabi_i2d>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0a8:	f7f5 f868 	bl	800017c <__aeabi_dsub>
 800b0ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0b2:	3330      	adds	r3, #48	; 0x30
 800b0b4:	f805 3b01 	strb.w	r3, [r5], #1
 800b0b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b0bc:	f7f5 fc88 	bl	80009d0 <__aeabi_dcmplt>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d163      	bne.n	800b18c <_dtoa_r+0x5f4>
 800b0c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	4937      	ldr	r1, [pc, #220]	; (800b1a8 <_dtoa_r+0x610>)
 800b0cc:	f7f5 f856 	bl	800017c <__aeabi_dsub>
 800b0d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b0d4:	f7f5 fc7c 	bl	80009d0 <__aeabi_dcmplt>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	f040 80b5 	bne.w	800b248 <_dtoa_r+0x6b0>
 800b0de:	9b06      	ldr	r3, [sp, #24]
 800b0e0:	1aeb      	subs	r3, r5, r3
 800b0e2:	429e      	cmp	r6, r3
 800b0e4:	f77f af7c 	ble.w	800afe0 <_dtoa_r+0x448>
 800b0e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	4b2f      	ldr	r3, [pc, #188]	; (800b1ac <_dtoa_r+0x614>)
 800b0f0:	f7f5 f9fc 	bl	80004ec <__aeabi_dmul>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0fe:	4b2b      	ldr	r3, [pc, #172]	; (800b1ac <_dtoa_r+0x614>)
 800b100:	f7f5 f9f4 	bl	80004ec <__aeabi_dmul>
 800b104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b108:	e7c3      	b.n	800b092 <_dtoa_r+0x4fa>
 800b10a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b10e:	f7f5 f9ed 	bl	80004ec <__aeabi_dmul>
 800b112:	9b06      	ldr	r3, [sp, #24]
 800b114:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b118:	199d      	adds	r5, r3, r6
 800b11a:	461e      	mov	r6, r3
 800b11c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b120:	f7f5 fc94 	bl	8000a4c <__aeabi_d2iz>
 800b124:	9011      	str	r0, [sp, #68]	; 0x44
 800b126:	f7f5 f977 	bl	8000418 <__aeabi_i2d>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b132:	f7f5 f823 	bl	800017c <__aeabi_dsub>
 800b136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b13c:	3330      	adds	r3, #48	; 0x30
 800b13e:	f806 3b01 	strb.w	r3, [r6], #1
 800b142:	42ae      	cmp	r6, r5
 800b144:	f04f 0200 	mov.w	r2, #0
 800b148:	d124      	bne.n	800b194 <_dtoa_r+0x5fc>
 800b14a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b14e:	4b1a      	ldr	r3, [pc, #104]	; (800b1b8 <_dtoa_r+0x620>)
 800b150:	f7f5 f816 	bl	8000180 <__adddf3>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b15c:	f7f5 fc56 	bl	8000a0c <__aeabi_dcmpgt>
 800b160:	2800      	cmp	r0, #0
 800b162:	d171      	bne.n	800b248 <_dtoa_r+0x6b0>
 800b164:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b168:	2000      	movs	r0, #0
 800b16a:	4913      	ldr	r1, [pc, #76]	; (800b1b8 <_dtoa_r+0x620>)
 800b16c:	f7f5 f806 	bl	800017c <__aeabi_dsub>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b178:	f7f5 fc2a 	bl	80009d0 <__aeabi_dcmplt>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	f43f af2f 	beq.w	800afe0 <_dtoa_r+0x448>
 800b182:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b186:	1e6a      	subs	r2, r5, #1
 800b188:	2b30      	cmp	r3, #48	; 0x30
 800b18a:	d001      	beq.n	800b190 <_dtoa_r+0x5f8>
 800b18c:	46ba      	mov	sl, r7
 800b18e:	e04a      	b.n	800b226 <_dtoa_r+0x68e>
 800b190:	4615      	mov	r5, r2
 800b192:	e7f6      	b.n	800b182 <_dtoa_r+0x5ea>
 800b194:	4b05      	ldr	r3, [pc, #20]	; (800b1ac <_dtoa_r+0x614>)
 800b196:	f7f5 f9a9 	bl	80004ec <__aeabi_dmul>
 800b19a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b19e:	e7bd      	b.n	800b11c <_dtoa_r+0x584>
 800b1a0:	0800d860 	.word	0x0800d860
 800b1a4:	0800d838 	.word	0x0800d838
 800b1a8:	3ff00000 	.word	0x3ff00000
 800b1ac:	40240000 	.word	0x40240000
 800b1b0:	401c0000 	.word	0x401c0000
 800b1b4:	40140000 	.word	0x40140000
 800b1b8:	3fe00000 	.word	0x3fe00000
 800b1bc:	9d06      	ldr	r5, [sp, #24]
 800b1be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b1c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	f7f5 fab9 	bl	8000740 <__aeabi_ddiv>
 800b1ce:	f7f5 fc3d 	bl	8000a4c <__aeabi_d2iz>
 800b1d2:	4681      	mov	r9, r0
 800b1d4:	f7f5 f920 	bl	8000418 <__aeabi_i2d>
 800b1d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1dc:	f7f5 f986 	bl	80004ec <__aeabi_dmul>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	4639      	mov	r1, r7
 800b1e8:	f7f4 ffc8 	bl	800017c <__aeabi_dsub>
 800b1ec:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800b1f0:	f805 6b01 	strb.w	r6, [r5], #1
 800b1f4:	9e06      	ldr	r6, [sp, #24]
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	1bae      	subs	r6, r5, r6
 800b1fa:	45b0      	cmp	r8, r6
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	d135      	bne.n	800b26c <_dtoa_r+0x6d4>
 800b200:	f7f4 ffbe 	bl	8000180 <__adddf3>
 800b204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b208:	4606      	mov	r6, r0
 800b20a:	460f      	mov	r7, r1
 800b20c:	f7f5 fbfe 	bl	8000a0c <__aeabi_dcmpgt>
 800b210:	b9c8      	cbnz	r0, 800b246 <_dtoa_r+0x6ae>
 800b212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b216:	4630      	mov	r0, r6
 800b218:	4639      	mov	r1, r7
 800b21a:	f7f5 fbcf 	bl	80009bc <__aeabi_dcmpeq>
 800b21e:	b110      	cbz	r0, 800b226 <_dtoa_r+0x68e>
 800b220:	f019 0f01 	tst.w	r9, #1
 800b224:	d10f      	bne.n	800b246 <_dtoa_r+0x6ae>
 800b226:	4659      	mov	r1, fp
 800b228:	4620      	mov	r0, r4
 800b22a:	f000 fcec 	bl	800bc06 <_Bfree>
 800b22e:	2300      	movs	r3, #0
 800b230:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b232:	702b      	strb	r3, [r5, #0]
 800b234:	f10a 0301 	add.w	r3, sl, #1
 800b238:	6013      	str	r3, [r2, #0]
 800b23a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f43f acf3 	beq.w	800ac28 <_dtoa_r+0x90>
 800b242:	601d      	str	r5, [r3, #0]
 800b244:	e4f0      	b.n	800ac28 <_dtoa_r+0x90>
 800b246:	4657      	mov	r7, sl
 800b248:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b24c:	1e6b      	subs	r3, r5, #1
 800b24e:	2a39      	cmp	r2, #57	; 0x39
 800b250:	d106      	bne.n	800b260 <_dtoa_r+0x6c8>
 800b252:	9a06      	ldr	r2, [sp, #24]
 800b254:	429a      	cmp	r2, r3
 800b256:	d107      	bne.n	800b268 <_dtoa_r+0x6d0>
 800b258:	2330      	movs	r3, #48	; 0x30
 800b25a:	7013      	strb	r3, [r2, #0]
 800b25c:	4613      	mov	r3, r2
 800b25e:	3701      	adds	r7, #1
 800b260:	781a      	ldrb	r2, [r3, #0]
 800b262:	3201      	adds	r2, #1
 800b264:	701a      	strb	r2, [r3, #0]
 800b266:	e791      	b.n	800b18c <_dtoa_r+0x5f4>
 800b268:	461d      	mov	r5, r3
 800b26a:	e7ed      	b.n	800b248 <_dtoa_r+0x6b0>
 800b26c:	2200      	movs	r2, #0
 800b26e:	4b99      	ldr	r3, [pc, #612]	; (800b4d4 <_dtoa_r+0x93c>)
 800b270:	f7f5 f93c 	bl	80004ec <__aeabi_dmul>
 800b274:	2200      	movs	r2, #0
 800b276:	2300      	movs	r3, #0
 800b278:	4606      	mov	r6, r0
 800b27a:	460f      	mov	r7, r1
 800b27c:	f7f5 fb9e 	bl	80009bc <__aeabi_dcmpeq>
 800b280:	2800      	cmp	r0, #0
 800b282:	d09e      	beq.n	800b1c2 <_dtoa_r+0x62a>
 800b284:	e7cf      	b.n	800b226 <_dtoa_r+0x68e>
 800b286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b288:	2a00      	cmp	r2, #0
 800b28a:	f000 8088 	beq.w	800b39e <_dtoa_r+0x806>
 800b28e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b290:	2a01      	cmp	r2, #1
 800b292:	dc6d      	bgt.n	800b370 <_dtoa_r+0x7d8>
 800b294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b296:	2a00      	cmp	r2, #0
 800b298:	d066      	beq.n	800b368 <_dtoa_r+0x7d0>
 800b29a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b29e:	464d      	mov	r5, r9
 800b2a0:	9e08      	ldr	r6, [sp, #32]
 800b2a2:	9a07      	ldr	r2, [sp, #28]
 800b2a4:	2101      	movs	r1, #1
 800b2a6:	441a      	add	r2, r3
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	4499      	add	r9, r3
 800b2ac:	9207      	str	r2, [sp, #28]
 800b2ae:	f000 fd4a 	bl	800bd46 <__i2b>
 800b2b2:	4607      	mov	r7, r0
 800b2b4:	2d00      	cmp	r5, #0
 800b2b6:	dd0b      	ble.n	800b2d0 <_dtoa_r+0x738>
 800b2b8:	9b07      	ldr	r3, [sp, #28]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	dd08      	ble.n	800b2d0 <_dtoa_r+0x738>
 800b2be:	42ab      	cmp	r3, r5
 800b2c0:	bfa8      	it	ge
 800b2c2:	462b      	movge	r3, r5
 800b2c4:	9a07      	ldr	r2, [sp, #28]
 800b2c6:	eba9 0903 	sub.w	r9, r9, r3
 800b2ca:	1aed      	subs	r5, r5, r3
 800b2cc:	1ad3      	subs	r3, r2, r3
 800b2ce:	9307      	str	r3, [sp, #28]
 800b2d0:	9b08      	ldr	r3, [sp, #32]
 800b2d2:	b1eb      	cbz	r3, 800b310 <_dtoa_r+0x778>
 800b2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d065      	beq.n	800b3a6 <_dtoa_r+0x80e>
 800b2da:	b18e      	cbz	r6, 800b300 <_dtoa_r+0x768>
 800b2dc:	4639      	mov	r1, r7
 800b2de:	4632      	mov	r2, r6
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f000 fdcf 	bl	800be84 <__pow5mult>
 800b2e6:	465a      	mov	r2, fp
 800b2e8:	4601      	mov	r1, r0
 800b2ea:	4607      	mov	r7, r0
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f000 fd33 	bl	800bd58 <__multiply>
 800b2f2:	4659      	mov	r1, fp
 800b2f4:	900a      	str	r0, [sp, #40]	; 0x28
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f000 fc85 	bl	800bc06 <_Bfree>
 800b2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2fe:	469b      	mov	fp, r3
 800b300:	9b08      	ldr	r3, [sp, #32]
 800b302:	1b9a      	subs	r2, r3, r6
 800b304:	d004      	beq.n	800b310 <_dtoa_r+0x778>
 800b306:	4659      	mov	r1, fp
 800b308:	4620      	mov	r0, r4
 800b30a:	f000 fdbb 	bl	800be84 <__pow5mult>
 800b30e:	4683      	mov	fp, r0
 800b310:	2101      	movs	r1, #1
 800b312:	4620      	mov	r0, r4
 800b314:	f000 fd17 	bl	800bd46 <__i2b>
 800b318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b31a:	4606      	mov	r6, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 81c6 	beq.w	800b6ae <_dtoa_r+0xb16>
 800b322:	461a      	mov	r2, r3
 800b324:	4601      	mov	r1, r0
 800b326:	4620      	mov	r0, r4
 800b328:	f000 fdac 	bl	800be84 <__pow5mult>
 800b32c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b32e:	4606      	mov	r6, r0
 800b330:	2b01      	cmp	r3, #1
 800b332:	dc3e      	bgt.n	800b3b2 <_dtoa_r+0x81a>
 800b334:	9b02      	ldr	r3, [sp, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d137      	bne.n	800b3aa <_dtoa_r+0x812>
 800b33a:	9b03      	ldr	r3, [sp, #12]
 800b33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b340:	2b00      	cmp	r3, #0
 800b342:	d134      	bne.n	800b3ae <_dtoa_r+0x816>
 800b344:	9b03      	ldr	r3, [sp, #12]
 800b346:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b34a:	0d1b      	lsrs	r3, r3, #20
 800b34c:	051b      	lsls	r3, r3, #20
 800b34e:	b12b      	cbz	r3, 800b35c <_dtoa_r+0x7c4>
 800b350:	9b07      	ldr	r3, [sp, #28]
 800b352:	f109 0901 	add.w	r9, r9, #1
 800b356:	3301      	adds	r3, #1
 800b358:	9307      	str	r3, [sp, #28]
 800b35a:	2301      	movs	r3, #1
 800b35c:	9308      	str	r3, [sp, #32]
 800b35e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b360:	2b00      	cmp	r3, #0
 800b362:	d128      	bne.n	800b3b6 <_dtoa_r+0x81e>
 800b364:	2001      	movs	r0, #1
 800b366:	e02e      	b.n	800b3c6 <_dtoa_r+0x82e>
 800b368:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b36a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b36e:	e796      	b.n	800b29e <_dtoa_r+0x706>
 800b370:	9b08      	ldr	r3, [sp, #32]
 800b372:	f108 36ff 	add.w	r6, r8, #4294967295
 800b376:	42b3      	cmp	r3, r6
 800b378:	bfb7      	itett	lt
 800b37a:	9b08      	ldrlt	r3, [sp, #32]
 800b37c:	1b9e      	subge	r6, r3, r6
 800b37e:	1af2      	sublt	r2, r6, r3
 800b380:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800b382:	bfbf      	itttt	lt
 800b384:	9608      	strlt	r6, [sp, #32]
 800b386:	189b      	addlt	r3, r3, r2
 800b388:	930c      	strlt	r3, [sp, #48]	; 0x30
 800b38a:	2600      	movlt	r6, #0
 800b38c:	f1b8 0f00 	cmp.w	r8, #0
 800b390:	bfb9      	ittee	lt
 800b392:	eba9 0508 	sublt.w	r5, r9, r8
 800b396:	2300      	movlt	r3, #0
 800b398:	464d      	movge	r5, r9
 800b39a:	4643      	movge	r3, r8
 800b39c:	e781      	b.n	800b2a2 <_dtoa_r+0x70a>
 800b39e:	9e08      	ldr	r6, [sp, #32]
 800b3a0:	464d      	mov	r5, r9
 800b3a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b3a4:	e786      	b.n	800b2b4 <_dtoa_r+0x71c>
 800b3a6:	9a08      	ldr	r2, [sp, #32]
 800b3a8:	e7ad      	b.n	800b306 <_dtoa_r+0x76e>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	e7d6      	b.n	800b35c <_dtoa_r+0x7c4>
 800b3ae:	9b02      	ldr	r3, [sp, #8]
 800b3b0:	e7d4      	b.n	800b35c <_dtoa_r+0x7c4>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	9308      	str	r3, [sp, #32]
 800b3b6:	6933      	ldr	r3, [r6, #16]
 800b3b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b3bc:	6918      	ldr	r0, [r3, #16]
 800b3be:	f000 fc74 	bl	800bcaa <__hi0bits>
 800b3c2:	f1c0 0020 	rsb	r0, r0, #32
 800b3c6:	9b07      	ldr	r3, [sp, #28]
 800b3c8:	4418      	add	r0, r3
 800b3ca:	f010 001f 	ands.w	r0, r0, #31
 800b3ce:	d047      	beq.n	800b460 <_dtoa_r+0x8c8>
 800b3d0:	f1c0 0320 	rsb	r3, r0, #32
 800b3d4:	2b04      	cmp	r3, #4
 800b3d6:	dd3b      	ble.n	800b450 <_dtoa_r+0x8b8>
 800b3d8:	9b07      	ldr	r3, [sp, #28]
 800b3da:	f1c0 001c 	rsb	r0, r0, #28
 800b3de:	4481      	add	r9, r0
 800b3e0:	4405      	add	r5, r0
 800b3e2:	4403      	add	r3, r0
 800b3e4:	9307      	str	r3, [sp, #28]
 800b3e6:	f1b9 0f00 	cmp.w	r9, #0
 800b3ea:	dd05      	ble.n	800b3f8 <_dtoa_r+0x860>
 800b3ec:	4659      	mov	r1, fp
 800b3ee:	464a      	mov	r2, r9
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f000 fd95 	bl	800bf20 <__lshift>
 800b3f6:	4683      	mov	fp, r0
 800b3f8:	9b07      	ldr	r3, [sp, #28]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	dd05      	ble.n	800b40a <_dtoa_r+0x872>
 800b3fe:	4631      	mov	r1, r6
 800b400:	461a      	mov	r2, r3
 800b402:	4620      	mov	r0, r4
 800b404:	f000 fd8c 	bl	800bf20 <__lshift>
 800b408:	4606      	mov	r6, r0
 800b40a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b40c:	b353      	cbz	r3, 800b464 <_dtoa_r+0x8cc>
 800b40e:	4631      	mov	r1, r6
 800b410:	4658      	mov	r0, fp
 800b412:	f000 fdd9 	bl	800bfc8 <__mcmp>
 800b416:	2800      	cmp	r0, #0
 800b418:	da24      	bge.n	800b464 <_dtoa_r+0x8cc>
 800b41a:	2300      	movs	r3, #0
 800b41c:	4659      	mov	r1, fp
 800b41e:	220a      	movs	r2, #10
 800b420:	4620      	mov	r0, r4
 800b422:	f000 fc07 	bl	800bc34 <__multadd>
 800b426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b428:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b42c:	4683      	mov	fp, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f000 8144 	beq.w	800b6bc <_dtoa_r+0xb24>
 800b434:	2300      	movs	r3, #0
 800b436:	4639      	mov	r1, r7
 800b438:	220a      	movs	r2, #10
 800b43a:	4620      	mov	r0, r4
 800b43c:	f000 fbfa 	bl	800bc34 <__multadd>
 800b440:	9b04      	ldr	r3, [sp, #16]
 800b442:	4607      	mov	r7, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	dc4d      	bgt.n	800b4e4 <_dtoa_r+0x94c>
 800b448:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	dd4a      	ble.n	800b4e4 <_dtoa_r+0x94c>
 800b44e:	e011      	b.n	800b474 <_dtoa_r+0x8dc>
 800b450:	d0c9      	beq.n	800b3e6 <_dtoa_r+0x84e>
 800b452:	9a07      	ldr	r2, [sp, #28]
 800b454:	331c      	adds	r3, #28
 800b456:	441a      	add	r2, r3
 800b458:	4499      	add	r9, r3
 800b45a:	441d      	add	r5, r3
 800b45c:	4613      	mov	r3, r2
 800b45e:	e7c1      	b.n	800b3e4 <_dtoa_r+0x84c>
 800b460:	4603      	mov	r3, r0
 800b462:	e7f6      	b.n	800b452 <_dtoa_r+0x8ba>
 800b464:	f1b8 0f00 	cmp.w	r8, #0
 800b468:	dc36      	bgt.n	800b4d8 <_dtoa_r+0x940>
 800b46a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	dd33      	ble.n	800b4d8 <_dtoa_r+0x940>
 800b470:	f8cd 8010 	str.w	r8, [sp, #16]
 800b474:	9b04      	ldr	r3, [sp, #16]
 800b476:	b963      	cbnz	r3, 800b492 <_dtoa_r+0x8fa>
 800b478:	4631      	mov	r1, r6
 800b47a:	2205      	movs	r2, #5
 800b47c:	4620      	mov	r0, r4
 800b47e:	f000 fbd9 	bl	800bc34 <__multadd>
 800b482:	4601      	mov	r1, r0
 800b484:	4606      	mov	r6, r0
 800b486:	4658      	mov	r0, fp
 800b488:	f000 fd9e 	bl	800bfc8 <__mcmp>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	f73f add3 	bgt.w	800b038 <_dtoa_r+0x4a0>
 800b492:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b494:	9d06      	ldr	r5, [sp, #24]
 800b496:	ea6f 0a03 	mvn.w	sl, r3
 800b49a:	f04f 0900 	mov.w	r9, #0
 800b49e:	4631      	mov	r1, r6
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 fbb0 	bl	800bc06 <_Bfree>
 800b4a6:	2f00      	cmp	r7, #0
 800b4a8:	f43f aebd 	beq.w	800b226 <_dtoa_r+0x68e>
 800b4ac:	f1b9 0f00 	cmp.w	r9, #0
 800b4b0:	d005      	beq.n	800b4be <_dtoa_r+0x926>
 800b4b2:	45b9      	cmp	r9, r7
 800b4b4:	d003      	beq.n	800b4be <_dtoa_r+0x926>
 800b4b6:	4649      	mov	r1, r9
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f000 fba4 	bl	800bc06 <_Bfree>
 800b4be:	4639      	mov	r1, r7
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f000 fba0 	bl	800bc06 <_Bfree>
 800b4c6:	e6ae      	b.n	800b226 <_dtoa_r+0x68e>
 800b4c8:	2600      	movs	r6, #0
 800b4ca:	4637      	mov	r7, r6
 800b4cc:	e7e1      	b.n	800b492 <_dtoa_r+0x8fa>
 800b4ce:	46ba      	mov	sl, r7
 800b4d0:	4637      	mov	r7, r6
 800b4d2:	e5b1      	b.n	800b038 <_dtoa_r+0x4a0>
 800b4d4:	40240000 	.word	0x40240000
 800b4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4da:	f8cd 8010 	str.w	r8, [sp, #16]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 80f3 	beq.w	800b6ca <_dtoa_r+0xb32>
 800b4e4:	2d00      	cmp	r5, #0
 800b4e6:	dd05      	ble.n	800b4f4 <_dtoa_r+0x95c>
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 fd17 	bl	800bf20 <__lshift>
 800b4f2:	4607      	mov	r7, r0
 800b4f4:	9b08      	ldr	r3, [sp, #32]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d04c      	beq.n	800b594 <_dtoa_r+0x9fc>
 800b4fa:	6879      	ldr	r1, [r7, #4]
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f000 fb4e 	bl	800bb9e <_Balloc>
 800b502:	4605      	mov	r5, r0
 800b504:	693a      	ldr	r2, [r7, #16]
 800b506:	f107 010c 	add.w	r1, r7, #12
 800b50a:	3202      	adds	r2, #2
 800b50c:	0092      	lsls	r2, r2, #2
 800b50e:	300c      	adds	r0, #12
 800b510:	f000 fb38 	bl	800bb84 <memcpy>
 800b514:	2201      	movs	r2, #1
 800b516:	4629      	mov	r1, r5
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 fd01 	bl	800bf20 <__lshift>
 800b51e:	46b9      	mov	r9, r7
 800b520:	4607      	mov	r7, r0
 800b522:	9b06      	ldr	r3, [sp, #24]
 800b524:	9307      	str	r3, [sp, #28]
 800b526:	9b02      	ldr	r3, [sp, #8]
 800b528:	f003 0301 	and.w	r3, r3, #1
 800b52c:	9308      	str	r3, [sp, #32]
 800b52e:	4631      	mov	r1, r6
 800b530:	4658      	mov	r0, fp
 800b532:	f7ff faa3 	bl	800aa7c <quorem>
 800b536:	4649      	mov	r1, r9
 800b538:	4605      	mov	r5, r0
 800b53a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b53e:	4658      	mov	r0, fp
 800b540:	f000 fd42 	bl	800bfc8 <__mcmp>
 800b544:	463a      	mov	r2, r7
 800b546:	9002      	str	r0, [sp, #8]
 800b548:	4631      	mov	r1, r6
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 fd56 	bl	800bffc <__mdiff>
 800b550:	68c3      	ldr	r3, [r0, #12]
 800b552:	4602      	mov	r2, r0
 800b554:	bb03      	cbnz	r3, 800b598 <_dtoa_r+0xa00>
 800b556:	4601      	mov	r1, r0
 800b558:	9009      	str	r0, [sp, #36]	; 0x24
 800b55a:	4658      	mov	r0, fp
 800b55c:	f000 fd34 	bl	800bfc8 <__mcmp>
 800b560:	4603      	mov	r3, r0
 800b562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b564:	4611      	mov	r1, r2
 800b566:	4620      	mov	r0, r4
 800b568:	9309      	str	r3, [sp, #36]	; 0x24
 800b56a:	f000 fb4c 	bl	800bc06 <_Bfree>
 800b56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b570:	b9a3      	cbnz	r3, 800b59c <_dtoa_r+0xa04>
 800b572:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b574:	b992      	cbnz	r2, 800b59c <_dtoa_r+0xa04>
 800b576:	9a08      	ldr	r2, [sp, #32]
 800b578:	b982      	cbnz	r2, 800b59c <_dtoa_r+0xa04>
 800b57a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b57e:	d029      	beq.n	800b5d4 <_dtoa_r+0xa3c>
 800b580:	9b02      	ldr	r3, [sp, #8]
 800b582:	2b00      	cmp	r3, #0
 800b584:	dd01      	ble.n	800b58a <_dtoa_r+0x9f2>
 800b586:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b58a:	9b07      	ldr	r3, [sp, #28]
 800b58c:	1c5d      	adds	r5, r3, #1
 800b58e:	f883 8000 	strb.w	r8, [r3]
 800b592:	e784      	b.n	800b49e <_dtoa_r+0x906>
 800b594:	4638      	mov	r0, r7
 800b596:	e7c2      	b.n	800b51e <_dtoa_r+0x986>
 800b598:	2301      	movs	r3, #1
 800b59a:	e7e3      	b.n	800b564 <_dtoa_r+0x9cc>
 800b59c:	9a02      	ldr	r2, [sp, #8]
 800b59e:	2a00      	cmp	r2, #0
 800b5a0:	db04      	blt.n	800b5ac <_dtoa_r+0xa14>
 800b5a2:	d123      	bne.n	800b5ec <_dtoa_r+0xa54>
 800b5a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b5a6:	bb0a      	cbnz	r2, 800b5ec <_dtoa_r+0xa54>
 800b5a8:	9a08      	ldr	r2, [sp, #32]
 800b5aa:	b9fa      	cbnz	r2, 800b5ec <_dtoa_r+0xa54>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	ddec      	ble.n	800b58a <_dtoa_r+0x9f2>
 800b5b0:	4659      	mov	r1, fp
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	f000 fcb3 	bl	800bf20 <__lshift>
 800b5ba:	4631      	mov	r1, r6
 800b5bc:	4683      	mov	fp, r0
 800b5be:	f000 fd03 	bl	800bfc8 <__mcmp>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	dc03      	bgt.n	800b5ce <_dtoa_r+0xa36>
 800b5c6:	d1e0      	bne.n	800b58a <_dtoa_r+0x9f2>
 800b5c8:	f018 0f01 	tst.w	r8, #1
 800b5cc:	d0dd      	beq.n	800b58a <_dtoa_r+0x9f2>
 800b5ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b5d2:	d1d8      	bne.n	800b586 <_dtoa_r+0x9ee>
 800b5d4:	9b07      	ldr	r3, [sp, #28]
 800b5d6:	9a07      	ldr	r2, [sp, #28]
 800b5d8:	1c5d      	adds	r5, r3, #1
 800b5da:	2339      	movs	r3, #57	; 0x39
 800b5dc:	7013      	strb	r3, [r2, #0]
 800b5de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5e2:	1e6a      	subs	r2, r5, #1
 800b5e4:	2b39      	cmp	r3, #57	; 0x39
 800b5e6:	d04d      	beq.n	800b684 <_dtoa_r+0xaec>
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	e052      	b.n	800b692 <_dtoa_r+0xafa>
 800b5ec:	9a07      	ldr	r2, [sp, #28]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f102 0501 	add.w	r5, r2, #1
 800b5f4:	dd06      	ble.n	800b604 <_dtoa_r+0xa6c>
 800b5f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b5fa:	d0eb      	beq.n	800b5d4 <_dtoa_r+0xa3c>
 800b5fc:	f108 0801 	add.w	r8, r8, #1
 800b600:	9b07      	ldr	r3, [sp, #28]
 800b602:	e7c4      	b.n	800b58e <_dtoa_r+0x9f6>
 800b604:	9b06      	ldr	r3, [sp, #24]
 800b606:	9a04      	ldr	r2, [sp, #16]
 800b608:	1aeb      	subs	r3, r5, r3
 800b60a:	4293      	cmp	r3, r2
 800b60c:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b610:	d021      	beq.n	800b656 <_dtoa_r+0xabe>
 800b612:	4659      	mov	r1, fp
 800b614:	2300      	movs	r3, #0
 800b616:	220a      	movs	r2, #10
 800b618:	4620      	mov	r0, r4
 800b61a:	f000 fb0b 	bl	800bc34 <__multadd>
 800b61e:	45b9      	cmp	r9, r7
 800b620:	4683      	mov	fp, r0
 800b622:	f04f 0300 	mov.w	r3, #0
 800b626:	f04f 020a 	mov.w	r2, #10
 800b62a:	4649      	mov	r1, r9
 800b62c:	4620      	mov	r0, r4
 800b62e:	d105      	bne.n	800b63c <_dtoa_r+0xaa4>
 800b630:	f000 fb00 	bl	800bc34 <__multadd>
 800b634:	4681      	mov	r9, r0
 800b636:	4607      	mov	r7, r0
 800b638:	9507      	str	r5, [sp, #28]
 800b63a:	e778      	b.n	800b52e <_dtoa_r+0x996>
 800b63c:	f000 fafa 	bl	800bc34 <__multadd>
 800b640:	4639      	mov	r1, r7
 800b642:	4681      	mov	r9, r0
 800b644:	2300      	movs	r3, #0
 800b646:	220a      	movs	r2, #10
 800b648:	4620      	mov	r0, r4
 800b64a:	f000 faf3 	bl	800bc34 <__multadd>
 800b64e:	4607      	mov	r7, r0
 800b650:	e7f2      	b.n	800b638 <_dtoa_r+0xaa0>
 800b652:	f04f 0900 	mov.w	r9, #0
 800b656:	4659      	mov	r1, fp
 800b658:	2201      	movs	r2, #1
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 fc60 	bl	800bf20 <__lshift>
 800b660:	4631      	mov	r1, r6
 800b662:	4683      	mov	fp, r0
 800b664:	f000 fcb0 	bl	800bfc8 <__mcmp>
 800b668:	2800      	cmp	r0, #0
 800b66a:	dcb8      	bgt.n	800b5de <_dtoa_r+0xa46>
 800b66c:	d102      	bne.n	800b674 <_dtoa_r+0xadc>
 800b66e:	f018 0f01 	tst.w	r8, #1
 800b672:	d1b4      	bne.n	800b5de <_dtoa_r+0xa46>
 800b674:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b678:	1e6a      	subs	r2, r5, #1
 800b67a:	2b30      	cmp	r3, #48	; 0x30
 800b67c:	f47f af0f 	bne.w	800b49e <_dtoa_r+0x906>
 800b680:	4615      	mov	r5, r2
 800b682:	e7f7      	b.n	800b674 <_dtoa_r+0xadc>
 800b684:	9b06      	ldr	r3, [sp, #24]
 800b686:	4293      	cmp	r3, r2
 800b688:	d105      	bne.n	800b696 <_dtoa_r+0xafe>
 800b68a:	2331      	movs	r3, #49	; 0x31
 800b68c:	9a06      	ldr	r2, [sp, #24]
 800b68e:	f10a 0a01 	add.w	sl, sl, #1
 800b692:	7013      	strb	r3, [r2, #0]
 800b694:	e703      	b.n	800b49e <_dtoa_r+0x906>
 800b696:	4615      	mov	r5, r2
 800b698:	e7a1      	b.n	800b5de <_dtoa_r+0xa46>
 800b69a:	4b17      	ldr	r3, [pc, #92]	; (800b6f8 <_dtoa_r+0xb60>)
 800b69c:	f7ff bae1 	b.w	800ac62 <_dtoa_r+0xca>
 800b6a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f47f aabb 	bne.w	800ac1e <_dtoa_r+0x86>
 800b6a8:	4b14      	ldr	r3, [pc, #80]	; (800b6fc <_dtoa_r+0xb64>)
 800b6aa:	f7ff bada 	b.w	800ac62 <_dtoa_r+0xca>
 800b6ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	f77f ae3f 	ble.w	800b334 <_dtoa_r+0x79c>
 800b6b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6b8:	9308      	str	r3, [sp, #32]
 800b6ba:	e653      	b.n	800b364 <_dtoa_r+0x7cc>
 800b6bc:	9b04      	ldr	r3, [sp, #16]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	dc03      	bgt.n	800b6ca <_dtoa_r+0xb32>
 800b6c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	f73f aed5 	bgt.w	800b474 <_dtoa_r+0x8dc>
 800b6ca:	9d06      	ldr	r5, [sp, #24]
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	4658      	mov	r0, fp
 800b6d0:	f7ff f9d4 	bl	800aa7c <quorem>
 800b6d4:	9b06      	ldr	r3, [sp, #24]
 800b6d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b6da:	f805 8b01 	strb.w	r8, [r5], #1
 800b6de:	9a04      	ldr	r2, [sp, #16]
 800b6e0:	1aeb      	subs	r3, r5, r3
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	ddb5      	ble.n	800b652 <_dtoa_r+0xaba>
 800b6e6:	4659      	mov	r1, fp
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	220a      	movs	r2, #10
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f000 faa1 	bl	800bc34 <__multadd>
 800b6f2:	4683      	mov	fp, r0
 800b6f4:	e7ea      	b.n	800b6cc <_dtoa_r+0xb34>
 800b6f6:	bf00      	nop
 800b6f8:	0800d965 	.word	0x0800d965
 800b6fc:	0800d76a 	.word	0x0800d76a

0800b700 <__sflush_r>:
 800b700:	898a      	ldrh	r2, [r1, #12]
 800b702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b706:	4605      	mov	r5, r0
 800b708:	0710      	lsls	r0, r2, #28
 800b70a:	460c      	mov	r4, r1
 800b70c:	d458      	bmi.n	800b7c0 <__sflush_r+0xc0>
 800b70e:	684b      	ldr	r3, [r1, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	dc05      	bgt.n	800b720 <__sflush_r+0x20>
 800b714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b716:	2b00      	cmp	r3, #0
 800b718:	dc02      	bgt.n	800b720 <__sflush_r+0x20>
 800b71a:	2000      	movs	r0, #0
 800b71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b722:	2e00      	cmp	r6, #0
 800b724:	d0f9      	beq.n	800b71a <__sflush_r+0x1a>
 800b726:	2300      	movs	r3, #0
 800b728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b72c:	682f      	ldr	r7, [r5, #0]
 800b72e:	6a21      	ldr	r1, [r4, #32]
 800b730:	602b      	str	r3, [r5, #0]
 800b732:	d032      	beq.n	800b79a <__sflush_r+0x9a>
 800b734:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b736:	89a3      	ldrh	r3, [r4, #12]
 800b738:	075a      	lsls	r2, r3, #29
 800b73a:	d505      	bpl.n	800b748 <__sflush_r+0x48>
 800b73c:	6863      	ldr	r3, [r4, #4]
 800b73e:	1ac0      	subs	r0, r0, r3
 800b740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b742:	b10b      	cbz	r3, 800b748 <__sflush_r+0x48>
 800b744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b746:	1ac0      	subs	r0, r0, r3
 800b748:	2300      	movs	r3, #0
 800b74a:	4602      	mov	r2, r0
 800b74c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b74e:	6a21      	ldr	r1, [r4, #32]
 800b750:	4628      	mov	r0, r5
 800b752:	47b0      	blx	r6
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	89a3      	ldrh	r3, [r4, #12]
 800b758:	d106      	bne.n	800b768 <__sflush_r+0x68>
 800b75a:	6829      	ldr	r1, [r5, #0]
 800b75c:	291d      	cmp	r1, #29
 800b75e:	d848      	bhi.n	800b7f2 <__sflush_r+0xf2>
 800b760:	4a29      	ldr	r2, [pc, #164]	; (800b808 <__sflush_r+0x108>)
 800b762:	40ca      	lsrs	r2, r1
 800b764:	07d6      	lsls	r6, r2, #31
 800b766:	d544      	bpl.n	800b7f2 <__sflush_r+0xf2>
 800b768:	2200      	movs	r2, #0
 800b76a:	6062      	str	r2, [r4, #4]
 800b76c:	6922      	ldr	r2, [r4, #16]
 800b76e:	04d9      	lsls	r1, r3, #19
 800b770:	6022      	str	r2, [r4, #0]
 800b772:	d504      	bpl.n	800b77e <__sflush_r+0x7e>
 800b774:	1c42      	adds	r2, r0, #1
 800b776:	d101      	bne.n	800b77c <__sflush_r+0x7c>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b903      	cbnz	r3, 800b77e <__sflush_r+0x7e>
 800b77c:	6560      	str	r0, [r4, #84]	; 0x54
 800b77e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b780:	602f      	str	r7, [r5, #0]
 800b782:	2900      	cmp	r1, #0
 800b784:	d0c9      	beq.n	800b71a <__sflush_r+0x1a>
 800b786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b78a:	4299      	cmp	r1, r3
 800b78c:	d002      	beq.n	800b794 <__sflush_r+0x94>
 800b78e:	4628      	mov	r0, r5
 800b790:	f7fe f8ac 	bl	80098ec <_free_r>
 800b794:	2000      	movs	r0, #0
 800b796:	6360      	str	r0, [r4, #52]	; 0x34
 800b798:	e7c0      	b.n	800b71c <__sflush_r+0x1c>
 800b79a:	2301      	movs	r3, #1
 800b79c:	4628      	mov	r0, r5
 800b79e:	47b0      	blx	r6
 800b7a0:	1c41      	adds	r1, r0, #1
 800b7a2:	d1c8      	bne.n	800b736 <__sflush_r+0x36>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d0c5      	beq.n	800b736 <__sflush_r+0x36>
 800b7aa:	2b1d      	cmp	r3, #29
 800b7ac:	d001      	beq.n	800b7b2 <__sflush_r+0xb2>
 800b7ae:	2b16      	cmp	r3, #22
 800b7b0:	d101      	bne.n	800b7b6 <__sflush_r+0xb6>
 800b7b2:	602f      	str	r7, [r5, #0]
 800b7b4:	e7b1      	b.n	800b71a <__sflush_r+0x1a>
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7bc:	81a3      	strh	r3, [r4, #12]
 800b7be:	e7ad      	b.n	800b71c <__sflush_r+0x1c>
 800b7c0:	690f      	ldr	r7, [r1, #16]
 800b7c2:	2f00      	cmp	r7, #0
 800b7c4:	d0a9      	beq.n	800b71a <__sflush_r+0x1a>
 800b7c6:	0793      	lsls	r3, r2, #30
 800b7c8:	bf18      	it	ne
 800b7ca:	2300      	movne	r3, #0
 800b7cc:	680e      	ldr	r6, [r1, #0]
 800b7ce:	bf08      	it	eq
 800b7d0:	694b      	ldreq	r3, [r1, #20]
 800b7d2:	eba6 0807 	sub.w	r8, r6, r7
 800b7d6:	600f      	str	r7, [r1, #0]
 800b7d8:	608b      	str	r3, [r1, #8]
 800b7da:	f1b8 0f00 	cmp.w	r8, #0
 800b7de:	dd9c      	ble.n	800b71a <__sflush_r+0x1a>
 800b7e0:	4643      	mov	r3, r8
 800b7e2:	463a      	mov	r2, r7
 800b7e4:	6a21      	ldr	r1, [r4, #32]
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7ea:	47b0      	blx	r6
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	dc06      	bgt.n	800b7fe <__sflush_r+0xfe>
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f6:	81a3      	strh	r3, [r4, #12]
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fc:	e78e      	b.n	800b71c <__sflush_r+0x1c>
 800b7fe:	4407      	add	r7, r0
 800b800:	eba8 0800 	sub.w	r8, r8, r0
 800b804:	e7e9      	b.n	800b7da <__sflush_r+0xda>
 800b806:	bf00      	nop
 800b808:	20400001 	.word	0x20400001

0800b80c <_fflush_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	690b      	ldr	r3, [r1, #16]
 800b810:	4605      	mov	r5, r0
 800b812:	460c      	mov	r4, r1
 800b814:	b1db      	cbz	r3, 800b84e <_fflush_r+0x42>
 800b816:	b118      	cbz	r0, 800b820 <_fflush_r+0x14>
 800b818:	6983      	ldr	r3, [r0, #24]
 800b81a:	b90b      	cbnz	r3, 800b820 <_fflush_r+0x14>
 800b81c:	f000 f860 	bl	800b8e0 <__sinit>
 800b820:	4b0c      	ldr	r3, [pc, #48]	; (800b854 <_fflush_r+0x48>)
 800b822:	429c      	cmp	r4, r3
 800b824:	d109      	bne.n	800b83a <_fflush_r+0x2e>
 800b826:	686c      	ldr	r4, [r5, #4]
 800b828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82c:	b17b      	cbz	r3, 800b84e <_fflush_r+0x42>
 800b82e:	4621      	mov	r1, r4
 800b830:	4628      	mov	r0, r5
 800b832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b836:	f7ff bf63 	b.w	800b700 <__sflush_r>
 800b83a:	4b07      	ldr	r3, [pc, #28]	; (800b858 <_fflush_r+0x4c>)
 800b83c:	429c      	cmp	r4, r3
 800b83e:	d101      	bne.n	800b844 <_fflush_r+0x38>
 800b840:	68ac      	ldr	r4, [r5, #8]
 800b842:	e7f1      	b.n	800b828 <_fflush_r+0x1c>
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <_fflush_r+0x50>)
 800b846:	429c      	cmp	r4, r3
 800b848:	bf08      	it	eq
 800b84a:	68ec      	ldreq	r4, [r5, #12]
 800b84c:	e7ec      	b.n	800b828 <_fflush_r+0x1c>
 800b84e:	2000      	movs	r0, #0
 800b850:	bd38      	pop	{r3, r4, r5, pc}
 800b852:	bf00      	nop
 800b854:	0800d798 	.word	0x0800d798
 800b858:	0800d7b8 	.word	0x0800d7b8
 800b85c:	0800d778 	.word	0x0800d778

0800b860 <std>:
 800b860:	2300      	movs	r3, #0
 800b862:	b510      	push	{r4, lr}
 800b864:	4604      	mov	r4, r0
 800b866:	e9c0 3300 	strd	r3, r3, [r0]
 800b86a:	6083      	str	r3, [r0, #8]
 800b86c:	8181      	strh	r1, [r0, #12]
 800b86e:	6643      	str	r3, [r0, #100]	; 0x64
 800b870:	81c2      	strh	r2, [r0, #14]
 800b872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b876:	6183      	str	r3, [r0, #24]
 800b878:	4619      	mov	r1, r3
 800b87a:	2208      	movs	r2, #8
 800b87c:	305c      	adds	r0, #92	; 0x5c
 800b87e:	f7fd fd99 	bl	80093b4 <memset>
 800b882:	4b05      	ldr	r3, [pc, #20]	; (800b898 <std+0x38>)
 800b884:	6224      	str	r4, [r4, #32]
 800b886:	6263      	str	r3, [r4, #36]	; 0x24
 800b888:	4b04      	ldr	r3, [pc, #16]	; (800b89c <std+0x3c>)
 800b88a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b88c:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <std+0x40>)
 800b88e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b890:	4b04      	ldr	r3, [pc, #16]	; (800b8a4 <std+0x44>)
 800b892:	6323      	str	r3, [r4, #48]	; 0x30
 800b894:	bd10      	pop	{r4, pc}
 800b896:	bf00      	nop
 800b898:	0800c755 	.word	0x0800c755
 800b89c:	0800c77b 	.word	0x0800c77b
 800b8a0:	0800c7b3 	.word	0x0800c7b3
 800b8a4:	0800c7d7 	.word	0x0800c7d7

0800b8a8 <_cleanup_r>:
 800b8a8:	4901      	ldr	r1, [pc, #4]	; (800b8b0 <_cleanup_r+0x8>)
 800b8aa:	f000 b885 	b.w	800b9b8 <_fwalk_reent>
 800b8ae:	bf00      	nop
 800b8b0:	0800b80d 	.word	0x0800b80d

0800b8b4 <__sfmoreglue>:
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	2568      	movs	r5, #104	; 0x68
 800b8b8:	1e4a      	subs	r2, r1, #1
 800b8ba:	4355      	muls	r5, r2
 800b8bc:	460e      	mov	r6, r1
 800b8be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8c2:	f7fe f85f 	bl	8009984 <_malloc_r>
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	b140      	cbz	r0, 800b8dc <__sfmoreglue+0x28>
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	e9c0 1600 	strd	r1, r6, [r0]
 800b8d0:	300c      	adds	r0, #12
 800b8d2:	60a0      	str	r0, [r4, #8]
 800b8d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8d8:	f7fd fd6c 	bl	80093b4 <memset>
 800b8dc:	4620      	mov	r0, r4
 800b8de:	bd70      	pop	{r4, r5, r6, pc}

0800b8e0 <__sinit>:
 800b8e0:	6983      	ldr	r3, [r0, #24]
 800b8e2:	b510      	push	{r4, lr}
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	bb33      	cbnz	r3, 800b936 <__sinit+0x56>
 800b8e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b8ec:	6503      	str	r3, [r0, #80]	; 0x50
 800b8ee:	4b12      	ldr	r3, [pc, #72]	; (800b938 <__sinit+0x58>)
 800b8f0:	4a12      	ldr	r2, [pc, #72]	; (800b93c <__sinit+0x5c>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6282      	str	r2, [r0, #40]	; 0x28
 800b8f6:	4298      	cmp	r0, r3
 800b8f8:	bf04      	itt	eq
 800b8fa:	2301      	moveq	r3, #1
 800b8fc:	6183      	streq	r3, [r0, #24]
 800b8fe:	f000 f81f 	bl	800b940 <__sfp>
 800b902:	6060      	str	r0, [r4, #4]
 800b904:	4620      	mov	r0, r4
 800b906:	f000 f81b 	bl	800b940 <__sfp>
 800b90a:	60a0      	str	r0, [r4, #8]
 800b90c:	4620      	mov	r0, r4
 800b90e:	f000 f817 	bl	800b940 <__sfp>
 800b912:	2200      	movs	r2, #0
 800b914:	60e0      	str	r0, [r4, #12]
 800b916:	2104      	movs	r1, #4
 800b918:	6860      	ldr	r0, [r4, #4]
 800b91a:	f7ff ffa1 	bl	800b860 <std>
 800b91e:	2201      	movs	r2, #1
 800b920:	2109      	movs	r1, #9
 800b922:	68a0      	ldr	r0, [r4, #8]
 800b924:	f7ff ff9c 	bl	800b860 <std>
 800b928:	2202      	movs	r2, #2
 800b92a:	2112      	movs	r1, #18
 800b92c:	68e0      	ldr	r0, [r4, #12]
 800b92e:	f7ff ff97 	bl	800b860 <std>
 800b932:	2301      	movs	r3, #1
 800b934:	61a3      	str	r3, [r4, #24]
 800b936:	bd10      	pop	{r4, pc}
 800b938:	0800d698 	.word	0x0800d698
 800b93c:	0800b8a9 	.word	0x0800b8a9

0800b940 <__sfp>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	4b1b      	ldr	r3, [pc, #108]	; (800b9b0 <__sfp+0x70>)
 800b944:	4607      	mov	r7, r0
 800b946:	681e      	ldr	r6, [r3, #0]
 800b948:	69b3      	ldr	r3, [r6, #24]
 800b94a:	b913      	cbnz	r3, 800b952 <__sfp+0x12>
 800b94c:	4630      	mov	r0, r6
 800b94e:	f7ff ffc7 	bl	800b8e0 <__sinit>
 800b952:	3648      	adds	r6, #72	; 0x48
 800b954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b958:	3b01      	subs	r3, #1
 800b95a:	d503      	bpl.n	800b964 <__sfp+0x24>
 800b95c:	6833      	ldr	r3, [r6, #0]
 800b95e:	b133      	cbz	r3, 800b96e <__sfp+0x2e>
 800b960:	6836      	ldr	r6, [r6, #0]
 800b962:	e7f7      	b.n	800b954 <__sfp+0x14>
 800b964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b968:	b16d      	cbz	r5, 800b986 <__sfp+0x46>
 800b96a:	3468      	adds	r4, #104	; 0x68
 800b96c:	e7f4      	b.n	800b958 <__sfp+0x18>
 800b96e:	2104      	movs	r1, #4
 800b970:	4638      	mov	r0, r7
 800b972:	f7ff ff9f 	bl	800b8b4 <__sfmoreglue>
 800b976:	6030      	str	r0, [r6, #0]
 800b978:	2800      	cmp	r0, #0
 800b97a:	d1f1      	bne.n	800b960 <__sfp+0x20>
 800b97c:	230c      	movs	r3, #12
 800b97e:	4604      	mov	r4, r0
 800b980:	603b      	str	r3, [r7, #0]
 800b982:	4620      	mov	r0, r4
 800b984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b986:	4b0b      	ldr	r3, [pc, #44]	; (800b9b4 <__sfp+0x74>)
 800b988:	6665      	str	r5, [r4, #100]	; 0x64
 800b98a:	e9c4 5500 	strd	r5, r5, [r4]
 800b98e:	60a5      	str	r5, [r4, #8]
 800b990:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b994:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b998:	2208      	movs	r2, #8
 800b99a:	4629      	mov	r1, r5
 800b99c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9a0:	f7fd fd08 	bl	80093b4 <memset>
 800b9a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9ac:	e7e9      	b.n	800b982 <__sfp+0x42>
 800b9ae:	bf00      	nop
 800b9b0:	0800d698 	.word	0x0800d698
 800b9b4:	ffff0001 	.word	0xffff0001

0800b9b8 <_fwalk_reent>:
 800b9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9bc:	4680      	mov	r8, r0
 800b9be:	4689      	mov	r9, r1
 800b9c0:	2600      	movs	r6, #0
 800b9c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9c6:	b914      	cbnz	r4, 800b9ce <_fwalk_reent+0x16>
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b9d2:	3f01      	subs	r7, #1
 800b9d4:	d501      	bpl.n	800b9da <_fwalk_reent+0x22>
 800b9d6:	6824      	ldr	r4, [r4, #0]
 800b9d8:	e7f5      	b.n	800b9c6 <_fwalk_reent+0xe>
 800b9da:	89ab      	ldrh	r3, [r5, #12]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d907      	bls.n	800b9f0 <_fwalk_reent+0x38>
 800b9e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	d003      	beq.n	800b9f0 <_fwalk_reent+0x38>
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	47c8      	blx	r9
 800b9ee:	4306      	orrs	r6, r0
 800b9f0:	3568      	adds	r5, #104	; 0x68
 800b9f2:	e7ee      	b.n	800b9d2 <_fwalk_reent+0x1a>

0800b9f4 <_findenv_r>:
 800b9f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	4607      	mov	r7, r0
 800b9fa:	468b      	mov	fp, r1
 800b9fc:	4690      	mov	r8, r2
 800b9fe:	f000 ffcd 	bl	800c99c <__env_lock>
 800ba02:	4b19      	ldr	r3, [pc, #100]	; (800ba68 <_findenv_r+0x74>)
 800ba04:	681d      	ldr	r5, [r3, #0]
 800ba06:	469a      	mov	sl, r3
 800ba08:	b13d      	cbz	r5, 800ba1a <_findenv_r+0x26>
 800ba0a:	465c      	mov	r4, fp
 800ba0c:	4623      	mov	r3, r4
 800ba0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba12:	b32a      	cbz	r2, 800ba60 <_findenv_r+0x6c>
 800ba14:	2a3d      	cmp	r2, #61	; 0x3d
 800ba16:	461c      	mov	r4, r3
 800ba18:	d1f8      	bne.n	800ba0c <_findenv_r+0x18>
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	f000 ffbf 	bl	800c99e <__env_unlock>
 800ba20:	2000      	movs	r0, #0
 800ba22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba26:	464d      	mov	r5, r9
 800ba28:	46a9      	mov	r9, r5
 800ba2a:	f859 0b04 	ldr.w	r0, [r9], #4
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d0f3      	beq.n	800ba1a <_findenv_r+0x26>
 800ba32:	4622      	mov	r2, r4
 800ba34:	4659      	mov	r1, fp
 800ba36:	f000 feda 	bl	800c7ee <strncmp>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d1f3      	bne.n	800ba26 <_findenv_r+0x32>
 800ba3e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800ba42:	191e      	adds	r6, r3, r4
 800ba44:	5d1b      	ldrb	r3, [r3, r4]
 800ba46:	2b3d      	cmp	r3, #61	; 0x3d
 800ba48:	d1ed      	bne.n	800ba26 <_findenv_r+0x32>
 800ba4a:	f8da 3000 	ldr.w	r3, [sl]
 800ba4e:	4638      	mov	r0, r7
 800ba50:	1aed      	subs	r5, r5, r3
 800ba52:	10ad      	asrs	r5, r5, #2
 800ba54:	f8c8 5000 	str.w	r5, [r8]
 800ba58:	f000 ffa1 	bl	800c99e <__env_unlock>
 800ba5c:	1c70      	adds	r0, r6, #1
 800ba5e:	e7e0      	b.n	800ba22 <_findenv_r+0x2e>
 800ba60:	eba4 040b 	sub.w	r4, r4, fp
 800ba64:	e7e0      	b.n	800ba28 <_findenv_r+0x34>
 800ba66:	bf00      	nop
 800ba68:	20000004 	.word	0x20000004

0800ba6c <_getenv_r>:
 800ba6c:	b507      	push	{r0, r1, r2, lr}
 800ba6e:	aa01      	add	r2, sp, #4
 800ba70:	f7ff ffc0 	bl	800b9f4 <_findenv_r>
 800ba74:	b003      	add	sp, #12
 800ba76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ba7c <__gettzinfo>:
 800ba7c:	4800      	ldr	r0, [pc, #0]	; (800ba80 <__gettzinfo+0x4>)
 800ba7e:	4770      	bx	lr
 800ba80:	20000098 	.word	0x20000098

0800ba84 <_localeconv_r>:
 800ba84:	4b04      	ldr	r3, [pc, #16]	; (800ba98 <_localeconv_r+0x14>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6a18      	ldr	r0, [r3, #32]
 800ba8a:	4b04      	ldr	r3, [pc, #16]	; (800ba9c <_localeconv_r+0x18>)
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	bf08      	it	eq
 800ba90:	4618      	moveq	r0, r3
 800ba92:	30f0      	adds	r0, #240	; 0xf0
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	20000028 	.word	0x20000028
 800ba9c:	200000f0 	.word	0x200000f0

0800baa0 <__swhatbuf_r>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	460e      	mov	r6, r1
 800baa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa8:	b096      	sub	sp, #88	; 0x58
 800baaa:	2900      	cmp	r1, #0
 800baac:	4614      	mov	r4, r2
 800baae:	461d      	mov	r5, r3
 800bab0:	da07      	bge.n	800bac2 <__swhatbuf_r+0x22>
 800bab2:	2300      	movs	r3, #0
 800bab4:	602b      	str	r3, [r5, #0]
 800bab6:	89b3      	ldrh	r3, [r6, #12]
 800bab8:	061a      	lsls	r2, r3, #24
 800baba:	d410      	bmi.n	800bade <__swhatbuf_r+0x3e>
 800babc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bac0:	e00e      	b.n	800bae0 <__swhatbuf_r+0x40>
 800bac2:	466a      	mov	r2, sp
 800bac4:	f000 ff6c 	bl	800c9a0 <_fstat_r>
 800bac8:	2800      	cmp	r0, #0
 800baca:	dbf2      	blt.n	800bab2 <__swhatbuf_r+0x12>
 800bacc:	9a01      	ldr	r2, [sp, #4]
 800bace:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bad2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bad6:	425a      	negs	r2, r3
 800bad8:	415a      	adcs	r2, r3
 800bada:	602a      	str	r2, [r5, #0]
 800badc:	e7ee      	b.n	800babc <__swhatbuf_r+0x1c>
 800bade:	2340      	movs	r3, #64	; 0x40
 800bae0:	2000      	movs	r0, #0
 800bae2:	6023      	str	r3, [r4, #0]
 800bae4:	b016      	add	sp, #88	; 0x58
 800bae6:	bd70      	pop	{r4, r5, r6, pc}

0800bae8 <__smakebuf_r>:
 800bae8:	898b      	ldrh	r3, [r1, #12]
 800baea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800baec:	079d      	lsls	r5, r3, #30
 800baee:	4606      	mov	r6, r0
 800baf0:	460c      	mov	r4, r1
 800baf2:	d507      	bpl.n	800bb04 <__smakebuf_r+0x1c>
 800baf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	6123      	str	r3, [r4, #16]
 800bafc:	2301      	movs	r3, #1
 800bafe:	6163      	str	r3, [r4, #20]
 800bb00:	b002      	add	sp, #8
 800bb02:	bd70      	pop	{r4, r5, r6, pc}
 800bb04:	ab01      	add	r3, sp, #4
 800bb06:	466a      	mov	r2, sp
 800bb08:	f7ff ffca 	bl	800baa0 <__swhatbuf_r>
 800bb0c:	9900      	ldr	r1, [sp, #0]
 800bb0e:	4605      	mov	r5, r0
 800bb10:	4630      	mov	r0, r6
 800bb12:	f7fd ff37 	bl	8009984 <_malloc_r>
 800bb16:	b948      	cbnz	r0, 800bb2c <__smakebuf_r+0x44>
 800bb18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb1c:	059a      	lsls	r2, r3, #22
 800bb1e:	d4ef      	bmi.n	800bb00 <__smakebuf_r+0x18>
 800bb20:	f023 0303 	bic.w	r3, r3, #3
 800bb24:	f043 0302 	orr.w	r3, r3, #2
 800bb28:	81a3      	strh	r3, [r4, #12]
 800bb2a:	e7e3      	b.n	800baf4 <__smakebuf_r+0xc>
 800bb2c:	4b0d      	ldr	r3, [pc, #52]	; (800bb64 <__smakebuf_r+0x7c>)
 800bb2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb30:	89a3      	ldrh	r3, [r4, #12]
 800bb32:	6020      	str	r0, [r4, #0]
 800bb34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb38:	81a3      	strh	r3, [r4, #12]
 800bb3a:	9b00      	ldr	r3, [sp, #0]
 800bb3c:	6120      	str	r0, [r4, #16]
 800bb3e:	6163      	str	r3, [r4, #20]
 800bb40:	9b01      	ldr	r3, [sp, #4]
 800bb42:	b15b      	cbz	r3, 800bb5c <__smakebuf_r+0x74>
 800bb44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f000 ff3b 	bl	800c9c4 <_isatty_r>
 800bb4e:	b128      	cbz	r0, 800bb5c <__smakebuf_r+0x74>
 800bb50:	89a3      	ldrh	r3, [r4, #12]
 800bb52:	f023 0303 	bic.w	r3, r3, #3
 800bb56:	f043 0301 	orr.w	r3, r3, #1
 800bb5a:	81a3      	strh	r3, [r4, #12]
 800bb5c:	89a3      	ldrh	r3, [r4, #12]
 800bb5e:	431d      	orrs	r5, r3
 800bb60:	81a5      	strh	r5, [r4, #12]
 800bb62:	e7cd      	b.n	800bb00 <__smakebuf_r+0x18>
 800bb64:	0800b8a9 	.word	0x0800b8a9

0800bb68 <memchr>:
 800bb68:	b510      	push	{r4, lr}
 800bb6a:	b2c9      	uxtb	r1, r1
 800bb6c:	4402      	add	r2, r0
 800bb6e:	4290      	cmp	r0, r2
 800bb70:	4603      	mov	r3, r0
 800bb72:	d101      	bne.n	800bb78 <memchr+0x10>
 800bb74:	2300      	movs	r3, #0
 800bb76:	e003      	b.n	800bb80 <memchr+0x18>
 800bb78:	781c      	ldrb	r4, [r3, #0]
 800bb7a:	3001      	adds	r0, #1
 800bb7c:	428c      	cmp	r4, r1
 800bb7e:	d1f6      	bne.n	800bb6e <memchr+0x6>
 800bb80:	4618      	mov	r0, r3
 800bb82:	bd10      	pop	{r4, pc}

0800bb84 <memcpy>:
 800bb84:	b510      	push	{r4, lr}
 800bb86:	1e43      	subs	r3, r0, #1
 800bb88:	440a      	add	r2, r1
 800bb8a:	4291      	cmp	r1, r2
 800bb8c:	d100      	bne.n	800bb90 <memcpy+0xc>
 800bb8e:	bd10      	pop	{r4, pc}
 800bb90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb98:	e7f7      	b.n	800bb8a <memcpy+0x6>

0800bb9a <__malloc_lock>:
 800bb9a:	4770      	bx	lr

0800bb9c <__malloc_unlock>:
 800bb9c:	4770      	bx	lr

0800bb9e <_Balloc>:
 800bb9e:	b570      	push	{r4, r5, r6, lr}
 800bba0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bba2:	4604      	mov	r4, r0
 800bba4:	460e      	mov	r6, r1
 800bba6:	b93d      	cbnz	r5, 800bbb8 <_Balloc+0x1a>
 800bba8:	2010      	movs	r0, #16
 800bbaa:	f7fd fbf3 	bl	8009394 <malloc>
 800bbae:	6260      	str	r0, [r4, #36]	; 0x24
 800bbb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bbb4:	6005      	str	r5, [r0, #0]
 800bbb6:	60c5      	str	r5, [r0, #12]
 800bbb8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bbba:	68eb      	ldr	r3, [r5, #12]
 800bbbc:	b183      	cbz	r3, 800bbe0 <_Balloc+0x42>
 800bbbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bbc6:	b9b8      	cbnz	r0, 800bbf8 <_Balloc+0x5a>
 800bbc8:	2101      	movs	r1, #1
 800bbca:	fa01 f506 	lsl.w	r5, r1, r6
 800bbce:	1d6a      	adds	r2, r5, #5
 800bbd0:	0092      	lsls	r2, r2, #2
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 fabf 	bl	800c156 <_calloc_r>
 800bbd8:	b160      	cbz	r0, 800bbf4 <_Balloc+0x56>
 800bbda:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bbde:	e00e      	b.n	800bbfe <_Balloc+0x60>
 800bbe0:	2221      	movs	r2, #33	; 0x21
 800bbe2:	2104      	movs	r1, #4
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f000 fab6 	bl	800c156 <_calloc_r>
 800bbea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbec:	60e8      	str	r0, [r5, #12]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1e4      	bne.n	800bbbe <_Balloc+0x20>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	bd70      	pop	{r4, r5, r6, pc}
 800bbf8:	6802      	ldr	r2, [r0, #0]
 800bbfa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc04:	e7f7      	b.n	800bbf6 <_Balloc+0x58>

0800bc06 <_Bfree>:
 800bc06:	b570      	push	{r4, r5, r6, lr}
 800bc08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	460d      	mov	r5, r1
 800bc0e:	b93c      	cbnz	r4, 800bc20 <_Bfree+0x1a>
 800bc10:	2010      	movs	r0, #16
 800bc12:	f7fd fbbf 	bl	8009394 <malloc>
 800bc16:	6270      	str	r0, [r6, #36]	; 0x24
 800bc18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc1c:	6004      	str	r4, [r0, #0]
 800bc1e:	60c4      	str	r4, [r0, #12]
 800bc20:	b13d      	cbz	r5, 800bc32 <_Bfree+0x2c>
 800bc22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bc24:	686a      	ldr	r2, [r5, #4]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc2c:	6029      	str	r1, [r5, #0]
 800bc2e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bc32:	bd70      	pop	{r4, r5, r6, pc}

0800bc34 <__multadd>:
 800bc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc38:	461f      	mov	r7, r3
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	2300      	movs	r3, #0
 800bc40:	690d      	ldr	r5, [r1, #16]
 800bc42:	f101 0c14 	add.w	ip, r1, #20
 800bc46:	f8dc 0000 	ldr.w	r0, [ip]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	b281      	uxth	r1, r0
 800bc4e:	fb02 7101 	mla	r1, r2, r1, r7
 800bc52:	0c00      	lsrs	r0, r0, #16
 800bc54:	0c0f      	lsrs	r7, r1, #16
 800bc56:	fb02 7000 	mla	r0, r2, r0, r7
 800bc5a:	b289      	uxth	r1, r1
 800bc5c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bc60:	429d      	cmp	r5, r3
 800bc62:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bc66:	f84c 1b04 	str.w	r1, [ip], #4
 800bc6a:	dcec      	bgt.n	800bc46 <__multadd+0x12>
 800bc6c:	b1d7      	cbz	r7, 800bca4 <__multadd+0x70>
 800bc6e:	68a3      	ldr	r3, [r4, #8]
 800bc70:	42ab      	cmp	r3, r5
 800bc72:	dc12      	bgt.n	800bc9a <__multadd+0x66>
 800bc74:	6861      	ldr	r1, [r4, #4]
 800bc76:	4630      	mov	r0, r6
 800bc78:	3101      	adds	r1, #1
 800bc7a:	f7ff ff90 	bl	800bb9e <_Balloc>
 800bc7e:	4680      	mov	r8, r0
 800bc80:	6922      	ldr	r2, [r4, #16]
 800bc82:	f104 010c 	add.w	r1, r4, #12
 800bc86:	3202      	adds	r2, #2
 800bc88:	0092      	lsls	r2, r2, #2
 800bc8a:	300c      	adds	r0, #12
 800bc8c:	f7ff ff7a 	bl	800bb84 <memcpy>
 800bc90:	4621      	mov	r1, r4
 800bc92:	4630      	mov	r0, r6
 800bc94:	f7ff ffb7 	bl	800bc06 <_Bfree>
 800bc98:	4644      	mov	r4, r8
 800bc9a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc9e:	3501      	adds	r5, #1
 800bca0:	615f      	str	r7, [r3, #20]
 800bca2:	6125      	str	r5, [r4, #16]
 800bca4:	4620      	mov	r0, r4
 800bca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bcaa <__hi0bits>:
 800bcaa:	0c02      	lsrs	r2, r0, #16
 800bcac:	0412      	lsls	r2, r2, #16
 800bcae:	4603      	mov	r3, r0
 800bcb0:	b9b2      	cbnz	r2, 800bce0 <__hi0bits+0x36>
 800bcb2:	0403      	lsls	r3, r0, #16
 800bcb4:	2010      	movs	r0, #16
 800bcb6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bcba:	bf04      	itt	eq
 800bcbc:	021b      	lsleq	r3, r3, #8
 800bcbe:	3008      	addeq	r0, #8
 800bcc0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bcc4:	bf04      	itt	eq
 800bcc6:	011b      	lsleq	r3, r3, #4
 800bcc8:	3004      	addeq	r0, #4
 800bcca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bcce:	bf04      	itt	eq
 800bcd0:	009b      	lsleq	r3, r3, #2
 800bcd2:	3002      	addeq	r0, #2
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	db06      	blt.n	800bce6 <__hi0bits+0x3c>
 800bcd8:	005b      	lsls	r3, r3, #1
 800bcda:	d503      	bpl.n	800bce4 <__hi0bits+0x3a>
 800bcdc:	3001      	adds	r0, #1
 800bcde:	4770      	bx	lr
 800bce0:	2000      	movs	r0, #0
 800bce2:	e7e8      	b.n	800bcb6 <__hi0bits+0xc>
 800bce4:	2020      	movs	r0, #32
 800bce6:	4770      	bx	lr

0800bce8 <__lo0bits>:
 800bce8:	6803      	ldr	r3, [r0, #0]
 800bcea:	4601      	mov	r1, r0
 800bcec:	f013 0207 	ands.w	r2, r3, #7
 800bcf0:	d00b      	beq.n	800bd0a <__lo0bits+0x22>
 800bcf2:	07da      	lsls	r2, r3, #31
 800bcf4:	d423      	bmi.n	800bd3e <__lo0bits+0x56>
 800bcf6:	0798      	lsls	r0, r3, #30
 800bcf8:	bf49      	itett	mi
 800bcfa:	085b      	lsrmi	r3, r3, #1
 800bcfc:	089b      	lsrpl	r3, r3, #2
 800bcfe:	2001      	movmi	r0, #1
 800bd00:	600b      	strmi	r3, [r1, #0]
 800bd02:	bf5c      	itt	pl
 800bd04:	600b      	strpl	r3, [r1, #0]
 800bd06:	2002      	movpl	r0, #2
 800bd08:	4770      	bx	lr
 800bd0a:	b298      	uxth	r0, r3
 800bd0c:	b9a8      	cbnz	r0, 800bd3a <__lo0bits+0x52>
 800bd0e:	2010      	movs	r0, #16
 800bd10:	0c1b      	lsrs	r3, r3, #16
 800bd12:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bd16:	bf04      	itt	eq
 800bd18:	0a1b      	lsreq	r3, r3, #8
 800bd1a:	3008      	addeq	r0, #8
 800bd1c:	071a      	lsls	r2, r3, #28
 800bd1e:	bf04      	itt	eq
 800bd20:	091b      	lsreq	r3, r3, #4
 800bd22:	3004      	addeq	r0, #4
 800bd24:	079a      	lsls	r2, r3, #30
 800bd26:	bf04      	itt	eq
 800bd28:	089b      	lsreq	r3, r3, #2
 800bd2a:	3002      	addeq	r0, #2
 800bd2c:	07da      	lsls	r2, r3, #31
 800bd2e:	d402      	bmi.n	800bd36 <__lo0bits+0x4e>
 800bd30:	085b      	lsrs	r3, r3, #1
 800bd32:	d006      	beq.n	800bd42 <__lo0bits+0x5a>
 800bd34:	3001      	adds	r0, #1
 800bd36:	600b      	str	r3, [r1, #0]
 800bd38:	4770      	bx	lr
 800bd3a:	4610      	mov	r0, r2
 800bd3c:	e7e9      	b.n	800bd12 <__lo0bits+0x2a>
 800bd3e:	2000      	movs	r0, #0
 800bd40:	4770      	bx	lr
 800bd42:	2020      	movs	r0, #32
 800bd44:	4770      	bx	lr

0800bd46 <__i2b>:
 800bd46:	b510      	push	{r4, lr}
 800bd48:	460c      	mov	r4, r1
 800bd4a:	2101      	movs	r1, #1
 800bd4c:	f7ff ff27 	bl	800bb9e <_Balloc>
 800bd50:	2201      	movs	r2, #1
 800bd52:	6144      	str	r4, [r0, #20]
 800bd54:	6102      	str	r2, [r0, #16]
 800bd56:	bd10      	pop	{r4, pc}

0800bd58 <__multiply>:
 800bd58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	4614      	mov	r4, r2
 800bd5e:	690a      	ldr	r2, [r1, #16]
 800bd60:	6923      	ldr	r3, [r4, #16]
 800bd62:	4688      	mov	r8, r1
 800bd64:	429a      	cmp	r2, r3
 800bd66:	bfbe      	ittt	lt
 800bd68:	460b      	movlt	r3, r1
 800bd6a:	46a0      	movlt	r8, r4
 800bd6c:	461c      	movlt	r4, r3
 800bd6e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd72:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd7e:	eb07 0609 	add.w	r6, r7, r9
 800bd82:	42b3      	cmp	r3, r6
 800bd84:	bfb8      	it	lt
 800bd86:	3101      	addlt	r1, #1
 800bd88:	f7ff ff09 	bl	800bb9e <_Balloc>
 800bd8c:	f100 0514 	add.w	r5, r0, #20
 800bd90:	462b      	mov	r3, r5
 800bd92:	2200      	movs	r2, #0
 800bd94:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bd98:	4573      	cmp	r3, lr
 800bd9a:	d316      	bcc.n	800bdca <__multiply+0x72>
 800bd9c:	f104 0214 	add.w	r2, r4, #20
 800bda0:	f108 0114 	add.w	r1, r8, #20
 800bda4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bda8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	9b00      	ldr	r3, [sp, #0]
 800bdb0:	9201      	str	r2, [sp, #4]
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d80c      	bhi.n	800bdd0 <__multiply+0x78>
 800bdb6:	2e00      	cmp	r6, #0
 800bdb8:	dd03      	ble.n	800bdc2 <__multiply+0x6a>
 800bdba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d05d      	beq.n	800be7e <__multiply+0x126>
 800bdc2:	6106      	str	r6, [r0, #16]
 800bdc4:	b003      	add	sp, #12
 800bdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdca:	f843 2b04 	str.w	r2, [r3], #4
 800bdce:	e7e3      	b.n	800bd98 <__multiply+0x40>
 800bdd0:	f8b2 b000 	ldrh.w	fp, [r2]
 800bdd4:	f1bb 0f00 	cmp.w	fp, #0
 800bdd8:	d023      	beq.n	800be22 <__multiply+0xca>
 800bdda:	4689      	mov	r9, r1
 800bddc:	46ac      	mov	ip, r5
 800bdde:	f04f 0800 	mov.w	r8, #0
 800bde2:	f859 4b04 	ldr.w	r4, [r9], #4
 800bde6:	f8dc a000 	ldr.w	sl, [ip]
 800bdea:	b2a3      	uxth	r3, r4
 800bdec:	fa1f fa8a 	uxth.w	sl, sl
 800bdf0:	fb0b a303 	mla	r3, fp, r3, sl
 800bdf4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bdf8:	f8dc 4000 	ldr.w	r4, [ip]
 800bdfc:	4443      	add	r3, r8
 800bdfe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800be02:	fb0b 840a 	mla	r4, fp, sl, r8
 800be06:	46e2      	mov	sl, ip
 800be08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800be12:	454f      	cmp	r7, r9
 800be14:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800be18:	f84a 3b04 	str.w	r3, [sl], #4
 800be1c:	d82b      	bhi.n	800be76 <__multiply+0x11e>
 800be1e:	f8cc 8004 	str.w	r8, [ip, #4]
 800be22:	9b01      	ldr	r3, [sp, #4]
 800be24:	3204      	adds	r2, #4
 800be26:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800be2a:	f1ba 0f00 	cmp.w	sl, #0
 800be2e:	d020      	beq.n	800be72 <__multiply+0x11a>
 800be30:	4689      	mov	r9, r1
 800be32:	46a8      	mov	r8, r5
 800be34:	f04f 0b00 	mov.w	fp, #0
 800be38:	682b      	ldr	r3, [r5, #0]
 800be3a:	f8b9 c000 	ldrh.w	ip, [r9]
 800be3e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800be42:	b29b      	uxth	r3, r3
 800be44:	fb0a 440c 	mla	r4, sl, ip, r4
 800be48:	46c4      	mov	ip, r8
 800be4a:	445c      	add	r4, fp
 800be4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800be50:	f84c 3b04 	str.w	r3, [ip], #4
 800be54:	f859 3b04 	ldr.w	r3, [r9], #4
 800be58:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800be5c:	0c1b      	lsrs	r3, r3, #16
 800be5e:	fb0a b303 	mla	r3, sl, r3, fp
 800be62:	454f      	cmp	r7, r9
 800be64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800be68:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800be6c:	d805      	bhi.n	800be7a <__multiply+0x122>
 800be6e:	f8c8 3004 	str.w	r3, [r8, #4]
 800be72:	3504      	adds	r5, #4
 800be74:	e79b      	b.n	800bdae <__multiply+0x56>
 800be76:	46d4      	mov	ip, sl
 800be78:	e7b3      	b.n	800bde2 <__multiply+0x8a>
 800be7a:	46e0      	mov	r8, ip
 800be7c:	e7dd      	b.n	800be3a <__multiply+0xe2>
 800be7e:	3e01      	subs	r6, #1
 800be80:	e799      	b.n	800bdb6 <__multiply+0x5e>
	...

0800be84 <__pow5mult>:
 800be84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be88:	4615      	mov	r5, r2
 800be8a:	f012 0203 	ands.w	r2, r2, #3
 800be8e:	4606      	mov	r6, r0
 800be90:	460f      	mov	r7, r1
 800be92:	d007      	beq.n	800bea4 <__pow5mult+0x20>
 800be94:	4c21      	ldr	r4, [pc, #132]	; (800bf1c <__pow5mult+0x98>)
 800be96:	3a01      	subs	r2, #1
 800be98:	2300      	movs	r3, #0
 800be9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be9e:	f7ff fec9 	bl	800bc34 <__multadd>
 800bea2:	4607      	mov	r7, r0
 800bea4:	10ad      	asrs	r5, r5, #2
 800bea6:	d035      	beq.n	800bf14 <__pow5mult+0x90>
 800bea8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800beaa:	b93c      	cbnz	r4, 800bebc <__pow5mult+0x38>
 800beac:	2010      	movs	r0, #16
 800beae:	f7fd fa71 	bl	8009394 <malloc>
 800beb2:	6270      	str	r0, [r6, #36]	; 0x24
 800beb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800beb8:	6004      	str	r4, [r0, #0]
 800beba:	60c4      	str	r4, [r0, #12]
 800bebc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bec0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bec4:	b94c      	cbnz	r4, 800beda <__pow5mult+0x56>
 800bec6:	f240 2171 	movw	r1, #625	; 0x271
 800beca:	4630      	mov	r0, r6
 800becc:	f7ff ff3b 	bl	800bd46 <__i2b>
 800bed0:	2300      	movs	r3, #0
 800bed2:	4604      	mov	r4, r0
 800bed4:	f8c8 0008 	str.w	r0, [r8, #8]
 800bed8:	6003      	str	r3, [r0, #0]
 800beda:	f04f 0800 	mov.w	r8, #0
 800bede:	07eb      	lsls	r3, r5, #31
 800bee0:	d50a      	bpl.n	800bef8 <__pow5mult+0x74>
 800bee2:	4639      	mov	r1, r7
 800bee4:	4622      	mov	r2, r4
 800bee6:	4630      	mov	r0, r6
 800bee8:	f7ff ff36 	bl	800bd58 <__multiply>
 800beec:	4681      	mov	r9, r0
 800beee:	4639      	mov	r1, r7
 800bef0:	4630      	mov	r0, r6
 800bef2:	f7ff fe88 	bl	800bc06 <_Bfree>
 800bef6:	464f      	mov	r7, r9
 800bef8:	106d      	asrs	r5, r5, #1
 800befa:	d00b      	beq.n	800bf14 <__pow5mult+0x90>
 800befc:	6820      	ldr	r0, [r4, #0]
 800befe:	b938      	cbnz	r0, 800bf10 <__pow5mult+0x8c>
 800bf00:	4622      	mov	r2, r4
 800bf02:	4621      	mov	r1, r4
 800bf04:	4630      	mov	r0, r6
 800bf06:	f7ff ff27 	bl	800bd58 <__multiply>
 800bf0a:	6020      	str	r0, [r4, #0]
 800bf0c:	f8c0 8000 	str.w	r8, [r0]
 800bf10:	4604      	mov	r4, r0
 800bf12:	e7e4      	b.n	800bede <__pow5mult+0x5a>
 800bf14:	4638      	mov	r0, r7
 800bf16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf1a:	bf00      	nop
 800bf1c:	0800d928 	.word	0x0800d928

0800bf20 <__lshift>:
 800bf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf24:	460c      	mov	r4, r1
 800bf26:	4607      	mov	r7, r0
 800bf28:	4616      	mov	r6, r2
 800bf2a:	6923      	ldr	r3, [r4, #16]
 800bf2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf30:	eb0a 0903 	add.w	r9, sl, r3
 800bf34:	6849      	ldr	r1, [r1, #4]
 800bf36:	68a3      	ldr	r3, [r4, #8]
 800bf38:	f109 0501 	add.w	r5, r9, #1
 800bf3c:	42ab      	cmp	r3, r5
 800bf3e:	db32      	blt.n	800bfa6 <__lshift+0x86>
 800bf40:	4638      	mov	r0, r7
 800bf42:	f7ff fe2c 	bl	800bb9e <_Balloc>
 800bf46:	2300      	movs	r3, #0
 800bf48:	4680      	mov	r8, r0
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	f100 0114 	add.w	r1, r0, #20
 800bf50:	4553      	cmp	r3, sl
 800bf52:	db2b      	blt.n	800bfac <__lshift+0x8c>
 800bf54:	6920      	ldr	r0, [r4, #16]
 800bf56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf5a:	f104 0314 	add.w	r3, r4, #20
 800bf5e:	f016 021f 	ands.w	r2, r6, #31
 800bf62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf6a:	d025      	beq.n	800bfb8 <__lshift+0x98>
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	f1c2 0e20 	rsb	lr, r2, #32
 800bf72:	468a      	mov	sl, r1
 800bf74:	681e      	ldr	r6, [r3, #0]
 800bf76:	4096      	lsls	r6, r2
 800bf78:	4330      	orrs	r0, r6
 800bf7a:	f84a 0b04 	str.w	r0, [sl], #4
 800bf7e:	f853 0b04 	ldr.w	r0, [r3], #4
 800bf82:	459c      	cmp	ip, r3
 800bf84:	fa20 f00e 	lsr.w	r0, r0, lr
 800bf88:	d814      	bhi.n	800bfb4 <__lshift+0x94>
 800bf8a:	6048      	str	r0, [r1, #4]
 800bf8c:	b108      	cbz	r0, 800bf92 <__lshift+0x72>
 800bf8e:	f109 0502 	add.w	r5, r9, #2
 800bf92:	3d01      	subs	r5, #1
 800bf94:	4638      	mov	r0, r7
 800bf96:	f8c8 5010 	str.w	r5, [r8, #16]
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	f7ff fe33 	bl	800bc06 <_Bfree>
 800bfa0:	4640      	mov	r0, r8
 800bfa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfa6:	3101      	adds	r1, #1
 800bfa8:	005b      	lsls	r3, r3, #1
 800bfaa:	e7c7      	b.n	800bf3c <__lshift+0x1c>
 800bfac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	e7cd      	b.n	800bf50 <__lshift+0x30>
 800bfb4:	4651      	mov	r1, sl
 800bfb6:	e7dc      	b.n	800bf72 <__lshift+0x52>
 800bfb8:	3904      	subs	r1, #4
 800bfba:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfbe:	459c      	cmp	ip, r3
 800bfc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfc4:	d8f9      	bhi.n	800bfba <__lshift+0x9a>
 800bfc6:	e7e4      	b.n	800bf92 <__lshift+0x72>

0800bfc8 <__mcmp>:
 800bfc8:	6903      	ldr	r3, [r0, #16]
 800bfca:	690a      	ldr	r2, [r1, #16]
 800bfcc:	b530      	push	{r4, r5, lr}
 800bfce:	1a9b      	subs	r3, r3, r2
 800bfd0:	d10c      	bne.n	800bfec <__mcmp+0x24>
 800bfd2:	0092      	lsls	r2, r2, #2
 800bfd4:	3014      	adds	r0, #20
 800bfd6:	3114      	adds	r1, #20
 800bfd8:	1884      	adds	r4, r0, r2
 800bfda:	4411      	add	r1, r2
 800bfdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bfe0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bfe4:	4295      	cmp	r5, r2
 800bfe6:	d003      	beq.n	800bff0 <__mcmp+0x28>
 800bfe8:	d305      	bcc.n	800bff6 <__mcmp+0x2e>
 800bfea:	2301      	movs	r3, #1
 800bfec:	4618      	mov	r0, r3
 800bfee:	bd30      	pop	{r4, r5, pc}
 800bff0:	42a0      	cmp	r0, r4
 800bff2:	d3f3      	bcc.n	800bfdc <__mcmp+0x14>
 800bff4:	e7fa      	b.n	800bfec <__mcmp+0x24>
 800bff6:	f04f 33ff 	mov.w	r3, #4294967295
 800bffa:	e7f7      	b.n	800bfec <__mcmp+0x24>

0800bffc <__mdiff>:
 800bffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c000:	460d      	mov	r5, r1
 800c002:	4607      	mov	r7, r0
 800c004:	4611      	mov	r1, r2
 800c006:	4628      	mov	r0, r5
 800c008:	4614      	mov	r4, r2
 800c00a:	f7ff ffdd 	bl	800bfc8 <__mcmp>
 800c00e:	1e06      	subs	r6, r0, #0
 800c010:	d108      	bne.n	800c024 <__mdiff+0x28>
 800c012:	4631      	mov	r1, r6
 800c014:	4638      	mov	r0, r7
 800c016:	f7ff fdc2 	bl	800bb9e <_Balloc>
 800c01a:	2301      	movs	r3, #1
 800c01c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c024:	bfa4      	itt	ge
 800c026:	4623      	movge	r3, r4
 800c028:	462c      	movge	r4, r5
 800c02a:	4638      	mov	r0, r7
 800c02c:	6861      	ldr	r1, [r4, #4]
 800c02e:	bfa6      	itte	ge
 800c030:	461d      	movge	r5, r3
 800c032:	2600      	movge	r6, #0
 800c034:	2601      	movlt	r6, #1
 800c036:	f7ff fdb2 	bl	800bb9e <_Balloc>
 800c03a:	f04f 0e00 	mov.w	lr, #0
 800c03e:	60c6      	str	r6, [r0, #12]
 800c040:	692b      	ldr	r3, [r5, #16]
 800c042:	6926      	ldr	r6, [r4, #16]
 800c044:	f104 0214 	add.w	r2, r4, #20
 800c048:	f105 0914 	add.w	r9, r5, #20
 800c04c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c050:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c054:	f100 0114 	add.w	r1, r0, #20
 800c058:	f852 ab04 	ldr.w	sl, [r2], #4
 800c05c:	f859 5b04 	ldr.w	r5, [r9], #4
 800c060:	fa1f f38a 	uxth.w	r3, sl
 800c064:	4473      	add	r3, lr
 800c066:	b2ac      	uxth	r4, r5
 800c068:	1b1b      	subs	r3, r3, r4
 800c06a:	0c2c      	lsrs	r4, r5, #16
 800c06c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800c070:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800c074:	b29b      	uxth	r3, r3
 800c076:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800c07a:	45c8      	cmp	r8, r9
 800c07c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c080:	4694      	mov	ip, r2
 800c082:	f841 4b04 	str.w	r4, [r1], #4
 800c086:	d8e7      	bhi.n	800c058 <__mdiff+0x5c>
 800c088:	45bc      	cmp	ip, r7
 800c08a:	d304      	bcc.n	800c096 <__mdiff+0x9a>
 800c08c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c090:	b183      	cbz	r3, 800c0b4 <__mdiff+0xb8>
 800c092:	6106      	str	r6, [r0, #16]
 800c094:	e7c4      	b.n	800c020 <__mdiff+0x24>
 800c096:	f85c 4b04 	ldr.w	r4, [ip], #4
 800c09a:	b2a2      	uxth	r2, r4
 800c09c:	4472      	add	r2, lr
 800c09e:	1413      	asrs	r3, r2, #16
 800c0a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c0a4:	b292      	uxth	r2, r2
 800c0a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c0aa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c0ae:	f841 2b04 	str.w	r2, [r1], #4
 800c0b2:	e7e9      	b.n	800c088 <__mdiff+0x8c>
 800c0b4:	3e01      	subs	r6, #1
 800c0b6:	e7e9      	b.n	800c08c <__mdiff+0x90>

0800c0b8 <__d2b>:
 800c0b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c0bc:	461c      	mov	r4, r3
 800c0be:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	4690      	mov	r8, r2
 800c0c6:	f7ff fd6a 	bl	800bb9e <_Balloc>
 800c0ca:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800c0ce:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c0d2:	4607      	mov	r7, r0
 800c0d4:	bb34      	cbnz	r4, 800c124 <__d2b+0x6c>
 800c0d6:	9201      	str	r2, [sp, #4]
 800c0d8:	f1b8 0200 	subs.w	r2, r8, #0
 800c0dc:	d027      	beq.n	800c12e <__d2b+0x76>
 800c0de:	a802      	add	r0, sp, #8
 800c0e0:	f840 2d08 	str.w	r2, [r0, #-8]!
 800c0e4:	f7ff fe00 	bl	800bce8 <__lo0bits>
 800c0e8:	9900      	ldr	r1, [sp, #0]
 800c0ea:	b1f0      	cbz	r0, 800c12a <__d2b+0x72>
 800c0ec:	9a01      	ldr	r2, [sp, #4]
 800c0ee:	f1c0 0320 	rsb	r3, r0, #32
 800c0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f6:	430b      	orrs	r3, r1
 800c0f8:	40c2      	lsrs	r2, r0
 800c0fa:	617b      	str	r3, [r7, #20]
 800c0fc:	9201      	str	r2, [sp, #4]
 800c0fe:	9b01      	ldr	r3, [sp, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	bf14      	ite	ne
 800c104:	2102      	movne	r1, #2
 800c106:	2101      	moveq	r1, #1
 800c108:	61bb      	str	r3, [r7, #24]
 800c10a:	6139      	str	r1, [r7, #16]
 800c10c:	b1c4      	cbz	r4, 800c140 <__d2b+0x88>
 800c10e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c112:	4404      	add	r4, r0
 800c114:	6034      	str	r4, [r6, #0]
 800c116:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c11a:	6028      	str	r0, [r5, #0]
 800c11c:	4638      	mov	r0, r7
 800c11e:	b002      	add	sp, #8
 800c120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c124:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c128:	e7d5      	b.n	800c0d6 <__d2b+0x1e>
 800c12a:	6179      	str	r1, [r7, #20]
 800c12c:	e7e7      	b.n	800c0fe <__d2b+0x46>
 800c12e:	a801      	add	r0, sp, #4
 800c130:	f7ff fdda 	bl	800bce8 <__lo0bits>
 800c134:	2101      	movs	r1, #1
 800c136:	9b01      	ldr	r3, [sp, #4]
 800c138:	6139      	str	r1, [r7, #16]
 800c13a:	617b      	str	r3, [r7, #20]
 800c13c:	3020      	adds	r0, #32
 800c13e:	e7e5      	b.n	800c10c <__d2b+0x54>
 800c140:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c144:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c148:	6030      	str	r0, [r6, #0]
 800c14a:	6918      	ldr	r0, [r3, #16]
 800c14c:	f7ff fdad 	bl	800bcaa <__hi0bits>
 800c150:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c154:	e7e1      	b.n	800c11a <__d2b+0x62>

0800c156 <_calloc_r>:
 800c156:	b538      	push	{r3, r4, r5, lr}
 800c158:	fb02 f401 	mul.w	r4, r2, r1
 800c15c:	4621      	mov	r1, r4
 800c15e:	f7fd fc11 	bl	8009984 <_malloc_r>
 800c162:	4605      	mov	r5, r0
 800c164:	b118      	cbz	r0, 800c16e <_calloc_r+0x18>
 800c166:	4622      	mov	r2, r4
 800c168:	2100      	movs	r1, #0
 800c16a:	f7fd f923 	bl	80093b4 <memset>
 800c16e:	4628      	mov	r0, r5
 800c170:	bd38      	pop	{r3, r4, r5, pc}

0800c172 <__ssputs_r>:
 800c172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c176:	688e      	ldr	r6, [r1, #8]
 800c178:	4682      	mov	sl, r0
 800c17a:	429e      	cmp	r6, r3
 800c17c:	460c      	mov	r4, r1
 800c17e:	4690      	mov	r8, r2
 800c180:	4699      	mov	r9, r3
 800c182:	d837      	bhi.n	800c1f4 <__ssputs_r+0x82>
 800c184:	898a      	ldrh	r2, [r1, #12]
 800c186:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c18a:	d031      	beq.n	800c1f0 <__ssputs_r+0x7e>
 800c18c:	2302      	movs	r3, #2
 800c18e:	6825      	ldr	r5, [r4, #0]
 800c190:	6909      	ldr	r1, [r1, #16]
 800c192:	1a6f      	subs	r7, r5, r1
 800c194:	6965      	ldr	r5, [r4, #20]
 800c196:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c19a:	fb95 f5f3 	sdiv	r5, r5, r3
 800c19e:	f109 0301 	add.w	r3, r9, #1
 800c1a2:	443b      	add	r3, r7
 800c1a4:	429d      	cmp	r5, r3
 800c1a6:	bf38      	it	cc
 800c1a8:	461d      	movcc	r5, r3
 800c1aa:	0553      	lsls	r3, r2, #21
 800c1ac:	d530      	bpl.n	800c210 <__ssputs_r+0x9e>
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	f7fd fbe8 	bl	8009984 <_malloc_r>
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	b950      	cbnz	r0, 800c1ce <__ssputs_r+0x5c>
 800c1b8:	230c      	movs	r3, #12
 800c1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c1be:	f8ca 3000 	str.w	r3, [sl]
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1c8:	81a3      	strh	r3, [r4, #12]
 800c1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ce:	463a      	mov	r2, r7
 800c1d0:	6921      	ldr	r1, [r4, #16]
 800c1d2:	f7ff fcd7 	bl	800bb84 <memcpy>
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e0:	81a3      	strh	r3, [r4, #12]
 800c1e2:	6126      	str	r6, [r4, #16]
 800c1e4:	443e      	add	r6, r7
 800c1e6:	6026      	str	r6, [r4, #0]
 800c1e8:	464e      	mov	r6, r9
 800c1ea:	6165      	str	r5, [r4, #20]
 800c1ec:	1bed      	subs	r5, r5, r7
 800c1ee:	60a5      	str	r5, [r4, #8]
 800c1f0:	454e      	cmp	r6, r9
 800c1f2:	d900      	bls.n	800c1f6 <__ssputs_r+0x84>
 800c1f4:	464e      	mov	r6, r9
 800c1f6:	4632      	mov	r2, r6
 800c1f8:	4641      	mov	r1, r8
 800c1fa:	6820      	ldr	r0, [r4, #0]
 800c1fc:	f000 fc28 	bl	800ca50 <memmove>
 800c200:	68a3      	ldr	r3, [r4, #8]
 800c202:	2000      	movs	r0, #0
 800c204:	1b9b      	subs	r3, r3, r6
 800c206:	60a3      	str	r3, [r4, #8]
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	441e      	add	r6, r3
 800c20c:	6026      	str	r6, [r4, #0]
 800c20e:	e7dc      	b.n	800c1ca <__ssputs_r+0x58>
 800c210:	462a      	mov	r2, r5
 800c212:	f000 fc36 	bl	800ca82 <_realloc_r>
 800c216:	4606      	mov	r6, r0
 800c218:	2800      	cmp	r0, #0
 800c21a:	d1e2      	bne.n	800c1e2 <__ssputs_r+0x70>
 800c21c:	6921      	ldr	r1, [r4, #16]
 800c21e:	4650      	mov	r0, sl
 800c220:	f7fd fb64 	bl	80098ec <_free_r>
 800c224:	e7c8      	b.n	800c1b8 <__ssputs_r+0x46>
	...

0800c228 <_svfiprintf_r>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	461d      	mov	r5, r3
 800c22e:	898b      	ldrh	r3, [r1, #12]
 800c230:	b09d      	sub	sp, #116	; 0x74
 800c232:	061f      	lsls	r7, r3, #24
 800c234:	4680      	mov	r8, r0
 800c236:	460c      	mov	r4, r1
 800c238:	4616      	mov	r6, r2
 800c23a:	d50f      	bpl.n	800c25c <_svfiprintf_r+0x34>
 800c23c:	690b      	ldr	r3, [r1, #16]
 800c23e:	b96b      	cbnz	r3, 800c25c <_svfiprintf_r+0x34>
 800c240:	2140      	movs	r1, #64	; 0x40
 800c242:	f7fd fb9f 	bl	8009984 <_malloc_r>
 800c246:	6020      	str	r0, [r4, #0]
 800c248:	6120      	str	r0, [r4, #16]
 800c24a:	b928      	cbnz	r0, 800c258 <_svfiprintf_r+0x30>
 800c24c:	230c      	movs	r3, #12
 800c24e:	f8c8 3000 	str.w	r3, [r8]
 800c252:	f04f 30ff 	mov.w	r0, #4294967295
 800c256:	e0c8      	b.n	800c3ea <_svfiprintf_r+0x1c2>
 800c258:	2340      	movs	r3, #64	; 0x40
 800c25a:	6163      	str	r3, [r4, #20]
 800c25c:	2300      	movs	r3, #0
 800c25e:	9309      	str	r3, [sp, #36]	; 0x24
 800c260:	2320      	movs	r3, #32
 800c262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c266:	2330      	movs	r3, #48	; 0x30
 800c268:	f04f 0b01 	mov.w	fp, #1
 800c26c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c270:	9503      	str	r5, [sp, #12]
 800c272:	4637      	mov	r7, r6
 800c274:	463d      	mov	r5, r7
 800c276:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c27a:	b10b      	cbz	r3, 800c280 <_svfiprintf_r+0x58>
 800c27c:	2b25      	cmp	r3, #37	; 0x25
 800c27e:	d13e      	bne.n	800c2fe <_svfiprintf_r+0xd6>
 800c280:	ebb7 0a06 	subs.w	sl, r7, r6
 800c284:	d00b      	beq.n	800c29e <_svfiprintf_r+0x76>
 800c286:	4653      	mov	r3, sl
 800c288:	4632      	mov	r2, r6
 800c28a:	4621      	mov	r1, r4
 800c28c:	4640      	mov	r0, r8
 800c28e:	f7ff ff70 	bl	800c172 <__ssputs_r>
 800c292:	3001      	adds	r0, #1
 800c294:	f000 80a4 	beq.w	800c3e0 <_svfiprintf_r+0x1b8>
 800c298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c29a:	4453      	add	r3, sl
 800c29c:	9309      	str	r3, [sp, #36]	; 0x24
 800c29e:	783b      	ldrb	r3, [r7, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f000 809d 	beq.w	800c3e0 <_svfiprintf_r+0x1b8>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2b0:	9304      	str	r3, [sp, #16]
 800c2b2:	9307      	str	r3, [sp, #28]
 800c2b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2b8:	931a      	str	r3, [sp, #104]	; 0x68
 800c2ba:	462f      	mov	r7, r5
 800c2bc:	2205      	movs	r2, #5
 800c2be:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c2c2:	4850      	ldr	r0, [pc, #320]	; (800c404 <_svfiprintf_r+0x1dc>)
 800c2c4:	f7ff fc50 	bl	800bb68 <memchr>
 800c2c8:	9b04      	ldr	r3, [sp, #16]
 800c2ca:	b9d0      	cbnz	r0, 800c302 <_svfiprintf_r+0xda>
 800c2cc:	06d9      	lsls	r1, r3, #27
 800c2ce:	bf44      	itt	mi
 800c2d0:	2220      	movmi	r2, #32
 800c2d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c2d6:	071a      	lsls	r2, r3, #28
 800c2d8:	bf44      	itt	mi
 800c2da:	222b      	movmi	r2, #43	; 0x2b
 800c2dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c2e0:	782a      	ldrb	r2, [r5, #0]
 800c2e2:	2a2a      	cmp	r2, #42	; 0x2a
 800c2e4:	d015      	beq.n	800c312 <_svfiprintf_r+0xea>
 800c2e6:	462f      	mov	r7, r5
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	250a      	movs	r5, #10
 800c2ec:	9a07      	ldr	r2, [sp, #28]
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2f4:	3b30      	subs	r3, #48	; 0x30
 800c2f6:	2b09      	cmp	r3, #9
 800c2f8:	d94d      	bls.n	800c396 <_svfiprintf_r+0x16e>
 800c2fa:	b1b8      	cbz	r0, 800c32c <_svfiprintf_r+0x104>
 800c2fc:	e00f      	b.n	800c31e <_svfiprintf_r+0xf6>
 800c2fe:	462f      	mov	r7, r5
 800c300:	e7b8      	b.n	800c274 <_svfiprintf_r+0x4c>
 800c302:	4a40      	ldr	r2, [pc, #256]	; (800c404 <_svfiprintf_r+0x1dc>)
 800c304:	463d      	mov	r5, r7
 800c306:	1a80      	subs	r0, r0, r2
 800c308:	fa0b f000 	lsl.w	r0, fp, r0
 800c30c:	4318      	orrs	r0, r3
 800c30e:	9004      	str	r0, [sp, #16]
 800c310:	e7d3      	b.n	800c2ba <_svfiprintf_r+0x92>
 800c312:	9a03      	ldr	r2, [sp, #12]
 800c314:	1d11      	adds	r1, r2, #4
 800c316:	6812      	ldr	r2, [r2, #0]
 800c318:	9103      	str	r1, [sp, #12]
 800c31a:	2a00      	cmp	r2, #0
 800c31c:	db01      	blt.n	800c322 <_svfiprintf_r+0xfa>
 800c31e:	9207      	str	r2, [sp, #28]
 800c320:	e004      	b.n	800c32c <_svfiprintf_r+0x104>
 800c322:	4252      	negs	r2, r2
 800c324:	f043 0302 	orr.w	r3, r3, #2
 800c328:	9207      	str	r2, [sp, #28]
 800c32a:	9304      	str	r3, [sp, #16]
 800c32c:	783b      	ldrb	r3, [r7, #0]
 800c32e:	2b2e      	cmp	r3, #46	; 0x2e
 800c330:	d10c      	bne.n	800c34c <_svfiprintf_r+0x124>
 800c332:	787b      	ldrb	r3, [r7, #1]
 800c334:	2b2a      	cmp	r3, #42	; 0x2a
 800c336:	d133      	bne.n	800c3a0 <_svfiprintf_r+0x178>
 800c338:	9b03      	ldr	r3, [sp, #12]
 800c33a:	3702      	adds	r7, #2
 800c33c:	1d1a      	adds	r2, r3, #4
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	9203      	str	r2, [sp, #12]
 800c342:	2b00      	cmp	r3, #0
 800c344:	bfb8      	it	lt
 800c346:	f04f 33ff 	movlt.w	r3, #4294967295
 800c34a:	9305      	str	r3, [sp, #20]
 800c34c:	4d2e      	ldr	r5, [pc, #184]	; (800c408 <_svfiprintf_r+0x1e0>)
 800c34e:	2203      	movs	r2, #3
 800c350:	7839      	ldrb	r1, [r7, #0]
 800c352:	4628      	mov	r0, r5
 800c354:	f7ff fc08 	bl	800bb68 <memchr>
 800c358:	b138      	cbz	r0, 800c36a <_svfiprintf_r+0x142>
 800c35a:	2340      	movs	r3, #64	; 0x40
 800c35c:	1b40      	subs	r0, r0, r5
 800c35e:	fa03 f000 	lsl.w	r0, r3, r0
 800c362:	9b04      	ldr	r3, [sp, #16]
 800c364:	3701      	adds	r7, #1
 800c366:	4303      	orrs	r3, r0
 800c368:	9304      	str	r3, [sp, #16]
 800c36a:	7839      	ldrb	r1, [r7, #0]
 800c36c:	2206      	movs	r2, #6
 800c36e:	4827      	ldr	r0, [pc, #156]	; (800c40c <_svfiprintf_r+0x1e4>)
 800c370:	1c7e      	adds	r6, r7, #1
 800c372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c376:	f7ff fbf7 	bl	800bb68 <memchr>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	d038      	beq.n	800c3f0 <_svfiprintf_r+0x1c8>
 800c37e:	4b24      	ldr	r3, [pc, #144]	; (800c410 <_svfiprintf_r+0x1e8>)
 800c380:	bb13      	cbnz	r3, 800c3c8 <_svfiprintf_r+0x1a0>
 800c382:	9b03      	ldr	r3, [sp, #12]
 800c384:	3307      	adds	r3, #7
 800c386:	f023 0307 	bic.w	r3, r3, #7
 800c38a:	3308      	adds	r3, #8
 800c38c:	9303      	str	r3, [sp, #12]
 800c38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c390:	444b      	add	r3, r9
 800c392:	9309      	str	r3, [sp, #36]	; 0x24
 800c394:	e76d      	b.n	800c272 <_svfiprintf_r+0x4a>
 800c396:	fb05 3202 	mla	r2, r5, r2, r3
 800c39a:	2001      	movs	r0, #1
 800c39c:	460f      	mov	r7, r1
 800c39e:	e7a6      	b.n	800c2ee <_svfiprintf_r+0xc6>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	250a      	movs	r5, #10
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	3701      	adds	r7, #1
 800c3a8:	9305      	str	r3, [sp, #20]
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3b0:	3a30      	subs	r2, #48	; 0x30
 800c3b2:	2a09      	cmp	r2, #9
 800c3b4:	d903      	bls.n	800c3be <_svfiprintf_r+0x196>
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0c8      	beq.n	800c34c <_svfiprintf_r+0x124>
 800c3ba:	9105      	str	r1, [sp, #20]
 800c3bc:	e7c6      	b.n	800c34c <_svfiprintf_r+0x124>
 800c3be:	fb05 2101 	mla	r1, r5, r1, r2
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	4607      	mov	r7, r0
 800c3c6:	e7f0      	b.n	800c3aa <_svfiprintf_r+0x182>
 800c3c8:	ab03      	add	r3, sp, #12
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	4622      	mov	r2, r4
 800c3ce:	4b11      	ldr	r3, [pc, #68]	; (800c414 <_svfiprintf_r+0x1ec>)
 800c3d0:	a904      	add	r1, sp, #16
 800c3d2:	4640      	mov	r0, r8
 800c3d4:	f7fd fbc2 	bl	8009b5c <_printf_float>
 800c3d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c3dc:	4681      	mov	r9, r0
 800c3de:	d1d6      	bne.n	800c38e <_svfiprintf_r+0x166>
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	065b      	lsls	r3, r3, #25
 800c3e4:	f53f af35 	bmi.w	800c252 <_svfiprintf_r+0x2a>
 800c3e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3ea:	b01d      	add	sp, #116	; 0x74
 800c3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f0:	ab03      	add	r3, sp, #12
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	4622      	mov	r2, r4
 800c3f6:	4b07      	ldr	r3, [pc, #28]	; (800c414 <_svfiprintf_r+0x1ec>)
 800c3f8:	a904      	add	r1, sp, #16
 800c3fa:	4640      	mov	r0, r8
 800c3fc:	f7fd fe5a 	bl	800a0b4 <_printf_i>
 800c400:	e7ea      	b.n	800c3d8 <_svfiprintf_r+0x1b0>
 800c402:	bf00      	nop
 800c404:	0800d934 	.word	0x0800d934
 800c408:	0800d93a 	.word	0x0800d93a
 800c40c:	0800d93e 	.word	0x0800d93e
 800c410:	08009b5d 	.word	0x08009b5d
 800c414:	0800c173 	.word	0x0800c173

0800c418 <__sfputc_r>:
 800c418:	6893      	ldr	r3, [r2, #8]
 800c41a:	b410      	push	{r4}
 800c41c:	3b01      	subs	r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	6093      	str	r3, [r2, #8]
 800c422:	da07      	bge.n	800c434 <__sfputc_r+0x1c>
 800c424:	6994      	ldr	r4, [r2, #24]
 800c426:	42a3      	cmp	r3, r4
 800c428:	db01      	blt.n	800c42e <__sfputc_r+0x16>
 800c42a:	290a      	cmp	r1, #10
 800c42c:	d102      	bne.n	800c434 <__sfputc_r+0x1c>
 800c42e:	bc10      	pop	{r4}
 800c430:	f7fe ba50 	b.w	800a8d4 <__swbuf_r>
 800c434:	6813      	ldr	r3, [r2, #0]
 800c436:	1c58      	adds	r0, r3, #1
 800c438:	6010      	str	r0, [r2, #0]
 800c43a:	7019      	strb	r1, [r3, #0]
 800c43c:	4608      	mov	r0, r1
 800c43e:	bc10      	pop	{r4}
 800c440:	4770      	bx	lr

0800c442 <__sfputs_r>:
 800c442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c444:	4606      	mov	r6, r0
 800c446:	460f      	mov	r7, r1
 800c448:	4614      	mov	r4, r2
 800c44a:	18d5      	adds	r5, r2, r3
 800c44c:	42ac      	cmp	r4, r5
 800c44e:	d101      	bne.n	800c454 <__sfputs_r+0x12>
 800c450:	2000      	movs	r0, #0
 800c452:	e007      	b.n	800c464 <__sfputs_r+0x22>
 800c454:	463a      	mov	r2, r7
 800c456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c45a:	4630      	mov	r0, r6
 800c45c:	f7ff ffdc 	bl	800c418 <__sfputc_r>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d1f3      	bne.n	800c44c <__sfputs_r+0xa>
 800c464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c468 <_vfiprintf_r>:
 800c468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46c:	460c      	mov	r4, r1
 800c46e:	b09d      	sub	sp, #116	; 0x74
 800c470:	4617      	mov	r7, r2
 800c472:	461d      	mov	r5, r3
 800c474:	4606      	mov	r6, r0
 800c476:	b118      	cbz	r0, 800c480 <_vfiprintf_r+0x18>
 800c478:	6983      	ldr	r3, [r0, #24]
 800c47a:	b90b      	cbnz	r3, 800c480 <_vfiprintf_r+0x18>
 800c47c:	f7ff fa30 	bl	800b8e0 <__sinit>
 800c480:	4b7c      	ldr	r3, [pc, #496]	; (800c674 <_vfiprintf_r+0x20c>)
 800c482:	429c      	cmp	r4, r3
 800c484:	d158      	bne.n	800c538 <_vfiprintf_r+0xd0>
 800c486:	6874      	ldr	r4, [r6, #4]
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	0718      	lsls	r0, r3, #28
 800c48c:	d55e      	bpl.n	800c54c <_vfiprintf_r+0xe4>
 800c48e:	6923      	ldr	r3, [r4, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d05b      	beq.n	800c54c <_vfiprintf_r+0xe4>
 800c494:	2300      	movs	r3, #0
 800c496:	9309      	str	r3, [sp, #36]	; 0x24
 800c498:	2320      	movs	r3, #32
 800c49a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c49e:	2330      	movs	r3, #48	; 0x30
 800c4a0:	f04f 0b01 	mov.w	fp, #1
 800c4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4a8:	9503      	str	r5, [sp, #12]
 800c4aa:	46b8      	mov	r8, r7
 800c4ac:	4645      	mov	r5, r8
 800c4ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c4b2:	b10b      	cbz	r3, 800c4b8 <_vfiprintf_r+0x50>
 800c4b4:	2b25      	cmp	r3, #37	; 0x25
 800c4b6:	d154      	bne.n	800c562 <_vfiprintf_r+0xfa>
 800c4b8:	ebb8 0a07 	subs.w	sl, r8, r7
 800c4bc:	d00b      	beq.n	800c4d6 <_vfiprintf_r+0x6e>
 800c4be:	4653      	mov	r3, sl
 800c4c0:	463a      	mov	r2, r7
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	f7ff ffbc 	bl	800c442 <__sfputs_r>
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	f000 80c2 	beq.w	800c654 <_vfiprintf_r+0x1ec>
 800c4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4d2:	4453      	add	r3, sl
 800c4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4d6:	f898 3000 	ldrb.w	r3, [r8]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 80ba 	beq.w	800c654 <_vfiprintf_r+0x1ec>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4ea:	9304      	str	r3, [sp, #16]
 800c4ec:	9307      	str	r3, [sp, #28]
 800c4ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4f2:	931a      	str	r3, [sp, #104]	; 0x68
 800c4f4:	46a8      	mov	r8, r5
 800c4f6:	2205      	movs	r2, #5
 800c4f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c4fc:	485e      	ldr	r0, [pc, #376]	; (800c678 <_vfiprintf_r+0x210>)
 800c4fe:	f7ff fb33 	bl	800bb68 <memchr>
 800c502:	9b04      	ldr	r3, [sp, #16]
 800c504:	bb78      	cbnz	r0, 800c566 <_vfiprintf_r+0xfe>
 800c506:	06d9      	lsls	r1, r3, #27
 800c508:	bf44      	itt	mi
 800c50a:	2220      	movmi	r2, #32
 800c50c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c510:	071a      	lsls	r2, r3, #28
 800c512:	bf44      	itt	mi
 800c514:	222b      	movmi	r2, #43	; 0x2b
 800c516:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c51a:	782a      	ldrb	r2, [r5, #0]
 800c51c:	2a2a      	cmp	r2, #42	; 0x2a
 800c51e:	d02a      	beq.n	800c576 <_vfiprintf_r+0x10e>
 800c520:	46a8      	mov	r8, r5
 800c522:	2000      	movs	r0, #0
 800c524:	250a      	movs	r5, #10
 800c526:	9a07      	ldr	r2, [sp, #28]
 800c528:	4641      	mov	r1, r8
 800c52a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c52e:	3b30      	subs	r3, #48	; 0x30
 800c530:	2b09      	cmp	r3, #9
 800c532:	d969      	bls.n	800c608 <_vfiprintf_r+0x1a0>
 800c534:	b360      	cbz	r0, 800c590 <_vfiprintf_r+0x128>
 800c536:	e024      	b.n	800c582 <_vfiprintf_r+0x11a>
 800c538:	4b50      	ldr	r3, [pc, #320]	; (800c67c <_vfiprintf_r+0x214>)
 800c53a:	429c      	cmp	r4, r3
 800c53c:	d101      	bne.n	800c542 <_vfiprintf_r+0xda>
 800c53e:	68b4      	ldr	r4, [r6, #8]
 800c540:	e7a2      	b.n	800c488 <_vfiprintf_r+0x20>
 800c542:	4b4f      	ldr	r3, [pc, #316]	; (800c680 <_vfiprintf_r+0x218>)
 800c544:	429c      	cmp	r4, r3
 800c546:	bf08      	it	eq
 800c548:	68f4      	ldreq	r4, [r6, #12]
 800c54a:	e79d      	b.n	800c488 <_vfiprintf_r+0x20>
 800c54c:	4621      	mov	r1, r4
 800c54e:	4630      	mov	r0, r6
 800c550:	f7fe fa12 	bl	800a978 <__swsetup_r>
 800c554:	2800      	cmp	r0, #0
 800c556:	d09d      	beq.n	800c494 <_vfiprintf_r+0x2c>
 800c558:	f04f 30ff 	mov.w	r0, #4294967295
 800c55c:	b01d      	add	sp, #116	; 0x74
 800c55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c562:	46a8      	mov	r8, r5
 800c564:	e7a2      	b.n	800c4ac <_vfiprintf_r+0x44>
 800c566:	4a44      	ldr	r2, [pc, #272]	; (800c678 <_vfiprintf_r+0x210>)
 800c568:	4645      	mov	r5, r8
 800c56a:	1a80      	subs	r0, r0, r2
 800c56c:	fa0b f000 	lsl.w	r0, fp, r0
 800c570:	4318      	orrs	r0, r3
 800c572:	9004      	str	r0, [sp, #16]
 800c574:	e7be      	b.n	800c4f4 <_vfiprintf_r+0x8c>
 800c576:	9a03      	ldr	r2, [sp, #12]
 800c578:	1d11      	adds	r1, r2, #4
 800c57a:	6812      	ldr	r2, [r2, #0]
 800c57c:	9103      	str	r1, [sp, #12]
 800c57e:	2a00      	cmp	r2, #0
 800c580:	db01      	blt.n	800c586 <_vfiprintf_r+0x11e>
 800c582:	9207      	str	r2, [sp, #28]
 800c584:	e004      	b.n	800c590 <_vfiprintf_r+0x128>
 800c586:	4252      	negs	r2, r2
 800c588:	f043 0302 	orr.w	r3, r3, #2
 800c58c:	9207      	str	r2, [sp, #28]
 800c58e:	9304      	str	r3, [sp, #16]
 800c590:	f898 3000 	ldrb.w	r3, [r8]
 800c594:	2b2e      	cmp	r3, #46	; 0x2e
 800c596:	d10e      	bne.n	800c5b6 <_vfiprintf_r+0x14e>
 800c598:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c59c:	2b2a      	cmp	r3, #42	; 0x2a
 800c59e:	d138      	bne.n	800c612 <_vfiprintf_r+0x1aa>
 800c5a0:	9b03      	ldr	r3, [sp, #12]
 800c5a2:	f108 0802 	add.w	r8, r8, #2
 800c5a6:	1d1a      	adds	r2, r3, #4
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	9203      	str	r2, [sp, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	bfb8      	it	lt
 800c5b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5b4:	9305      	str	r3, [sp, #20]
 800c5b6:	4d33      	ldr	r5, [pc, #204]	; (800c684 <_vfiprintf_r+0x21c>)
 800c5b8:	2203      	movs	r2, #3
 800c5ba:	f898 1000 	ldrb.w	r1, [r8]
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f7ff fad2 	bl	800bb68 <memchr>
 800c5c4:	b140      	cbz	r0, 800c5d8 <_vfiprintf_r+0x170>
 800c5c6:	2340      	movs	r3, #64	; 0x40
 800c5c8:	1b40      	subs	r0, r0, r5
 800c5ca:	fa03 f000 	lsl.w	r0, r3, r0
 800c5ce:	9b04      	ldr	r3, [sp, #16]
 800c5d0:	f108 0801 	add.w	r8, r8, #1
 800c5d4:	4303      	orrs	r3, r0
 800c5d6:	9304      	str	r3, [sp, #16]
 800c5d8:	f898 1000 	ldrb.w	r1, [r8]
 800c5dc:	2206      	movs	r2, #6
 800c5de:	482a      	ldr	r0, [pc, #168]	; (800c688 <_vfiprintf_r+0x220>)
 800c5e0:	f108 0701 	add.w	r7, r8, #1
 800c5e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5e8:	f7ff fabe 	bl	800bb68 <memchr>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d037      	beq.n	800c660 <_vfiprintf_r+0x1f8>
 800c5f0:	4b26      	ldr	r3, [pc, #152]	; (800c68c <_vfiprintf_r+0x224>)
 800c5f2:	bb1b      	cbnz	r3, 800c63c <_vfiprintf_r+0x1d4>
 800c5f4:	9b03      	ldr	r3, [sp, #12]
 800c5f6:	3307      	adds	r3, #7
 800c5f8:	f023 0307 	bic.w	r3, r3, #7
 800c5fc:	3308      	adds	r3, #8
 800c5fe:	9303      	str	r3, [sp, #12]
 800c600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c602:	444b      	add	r3, r9
 800c604:	9309      	str	r3, [sp, #36]	; 0x24
 800c606:	e750      	b.n	800c4aa <_vfiprintf_r+0x42>
 800c608:	fb05 3202 	mla	r2, r5, r2, r3
 800c60c:	2001      	movs	r0, #1
 800c60e:	4688      	mov	r8, r1
 800c610:	e78a      	b.n	800c528 <_vfiprintf_r+0xc0>
 800c612:	2300      	movs	r3, #0
 800c614:	250a      	movs	r5, #10
 800c616:	4619      	mov	r1, r3
 800c618:	f108 0801 	add.w	r8, r8, #1
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	4640      	mov	r0, r8
 800c620:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c624:	3a30      	subs	r2, #48	; 0x30
 800c626:	2a09      	cmp	r2, #9
 800c628:	d903      	bls.n	800c632 <_vfiprintf_r+0x1ca>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d0c3      	beq.n	800c5b6 <_vfiprintf_r+0x14e>
 800c62e:	9105      	str	r1, [sp, #20]
 800c630:	e7c1      	b.n	800c5b6 <_vfiprintf_r+0x14e>
 800c632:	fb05 2101 	mla	r1, r5, r1, r2
 800c636:	2301      	movs	r3, #1
 800c638:	4680      	mov	r8, r0
 800c63a:	e7f0      	b.n	800c61e <_vfiprintf_r+0x1b6>
 800c63c:	ab03      	add	r3, sp, #12
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	4622      	mov	r2, r4
 800c642:	4b13      	ldr	r3, [pc, #76]	; (800c690 <_vfiprintf_r+0x228>)
 800c644:	a904      	add	r1, sp, #16
 800c646:	4630      	mov	r0, r6
 800c648:	f7fd fa88 	bl	8009b5c <_printf_float>
 800c64c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c650:	4681      	mov	r9, r0
 800c652:	d1d5      	bne.n	800c600 <_vfiprintf_r+0x198>
 800c654:	89a3      	ldrh	r3, [r4, #12]
 800c656:	065b      	lsls	r3, r3, #25
 800c658:	f53f af7e 	bmi.w	800c558 <_vfiprintf_r+0xf0>
 800c65c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c65e:	e77d      	b.n	800c55c <_vfiprintf_r+0xf4>
 800c660:	ab03      	add	r3, sp, #12
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	4622      	mov	r2, r4
 800c666:	4b0a      	ldr	r3, [pc, #40]	; (800c690 <_vfiprintf_r+0x228>)
 800c668:	a904      	add	r1, sp, #16
 800c66a:	4630      	mov	r0, r6
 800c66c:	f7fd fd22 	bl	800a0b4 <_printf_i>
 800c670:	e7ec      	b.n	800c64c <_vfiprintf_r+0x1e4>
 800c672:	bf00      	nop
 800c674:	0800d798 	.word	0x0800d798
 800c678:	0800d934 	.word	0x0800d934
 800c67c:	0800d7b8 	.word	0x0800d7b8
 800c680:	0800d778 	.word	0x0800d778
 800c684:	0800d93a 	.word	0x0800d93a
 800c688:	0800d93e 	.word	0x0800d93e
 800c68c:	08009b5d 	.word	0x08009b5d
 800c690:	0800c443 	.word	0x0800c443

0800c694 <_putc_r>:
 800c694:	b570      	push	{r4, r5, r6, lr}
 800c696:	460d      	mov	r5, r1
 800c698:	4614      	mov	r4, r2
 800c69a:	4606      	mov	r6, r0
 800c69c:	b118      	cbz	r0, 800c6a6 <_putc_r+0x12>
 800c69e:	6983      	ldr	r3, [r0, #24]
 800c6a0:	b90b      	cbnz	r3, 800c6a6 <_putc_r+0x12>
 800c6a2:	f7ff f91d 	bl	800b8e0 <__sinit>
 800c6a6:	4b13      	ldr	r3, [pc, #76]	; (800c6f4 <_putc_r+0x60>)
 800c6a8:	429c      	cmp	r4, r3
 800c6aa:	d112      	bne.n	800c6d2 <_putc_r+0x3e>
 800c6ac:	6874      	ldr	r4, [r6, #4]
 800c6ae:	68a3      	ldr	r3, [r4, #8]
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	60a3      	str	r3, [r4, #8]
 800c6b6:	da16      	bge.n	800c6e6 <_putc_r+0x52>
 800c6b8:	69a2      	ldr	r2, [r4, #24]
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	db02      	blt.n	800c6c4 <_putc_r+0x30>
 800c6be:	b2eb      	uxtb	r3, r5
 800c6c0:	2b0a      	cmp	r3, #10
 800c6c2:	d110      	bne.n	800c6e6 <_putc_r+0x52>
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6ce:	f7fe b901 	b.w	800a8d4 <__swbuf_r>
 800c6d2:	4b09      	ldr	r3, [pc, #36]	; (800c6f8 <_putc_r+0x64>)
 800c6d4:	429c      	cmp	r4, r3
 800c6d6:	d101      	bne.n	800c6dc <_putc_r+0x48>
 800c6d8:	68b4      	ldr	r4, [r6, #8]
 800c6da:	e7e8      	b.n	800c6ae <_putc_r+0x1a>
 800c6dc:	4b07      	ldr	r3, [pc, #28]	; (800c6fc <_putc_r+0x68>)
 800c6de:	429c      	cmp	r4, r3
 800c6e0:	bf08      	it	eq
 800c6e2:	68f4      	ldreq	r4, [r6, #12]
 800c6e4:	e7e3      	b.n	800c6ae <_putc_r+0x1a>
 800c6e6:	6823      	ldr	r3, [r4, #0]
 800c6e8:	b2e8      	uxtb	r0, r5
 800c6ea:	1c5a      	adds	r2, r3, #1
 800c6ec:	6022      	str	r2, [r4, #0]
 800c6ee:	701d      	strb	r5, [r3, #0]
 800c6f0:	bd70      	pop	{r4, r5, r6, pc}
 800c6f2:	bf00      	nop
 800c6f4:	0800d798 	.word	0x0800d798
 800c6f8:	0800d7b8 	.word	0x0800d7b8
 800c6fc:	0800d778 	.word	0x0800d778

0800c700 <siscanf>:
 800c700:	b40e      	push	{r1, r2, r3}
 800c702:	f44f 7201 	mov.w	r2, #516	; 0x204
 800c706:	b530      	push	{r4, r5, lr}
 800c708:	b09c      	sub	sp, #112	; 0x70
 800c70a:	ac1f      	add	r4, sp, #124	; 0x7c
 800c70c:	f854 5b04 	ldr.w	r5, [r4], #4
 800c710:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c714:	9002      	str	r0, [sp, #8]
 800c716:	9006      	str	r0, [sp, #24]
 800c718:	f7f3 fd1a 	bl	8000150 <strlen>
 800c71c:	4b0b      	ldr	r3, [pc, #44]	; (800c74c <siscanf+0x4c>)
 800c71e:	9003      	str	r0, [sp, #12]
 800c720:	930b      	str	r3, [sp, #44]	; 0x2c
 800c722:	2300      	movs	r3, #0
 800c724:	930f      	str	r3, [sp, #60]	; 0x3c
 800c726:	9314      	str	r3, [sp, #80]	; 0x50
 800c728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c72c:	9007      	str	r0, [sp, #28]
 800c72e:	4808      	ldr	r0, [pc, #32]	; (800c750 <siscanf+0x50>)
 800c730:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c734:	462a      	mov	r2, r5
 800c736:	4623      	mov	r3, r4
 800c738:	a902      	add	r1, sp, #8
 800c73a:	6800      	ldr	r0, [r0, #0]
 800c73c:	9401      	str	r4, [sp, #4]
 800c73e:	f000 fa21 	bl	800cb84 <__ssvfiscanf_r>
 800c742:	b01c      	add	sp, #112	; 0x70
 800c744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c748:	b003      	add	sp, #12
 800c74a:	4770      	bx	lr
 800c74c:	0800c777 	.word	0x0800c777
 800c750:	20000028 	.word	0x20000028

0800c754 <__sread>:
 800c754:	b510      	push	{r4, lr}
 800c756:	460c      	mov	r4, r1
 800c758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c75c:	f000 fcba 	bl	800d0d4 <_read_r>
 800c760:	2800      	cmp	r0, #0
 800c762:	bfab      	itete	ge
 800c764:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c766:	89a3      	ldrhlt	r3, [r4, #12]
 800c768:	181b      	addge	r3, r3, r0
 800c76a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c76e:	bfac      	ite	ge
 800c770:	6563      	strge	r3, [r4, #84]	; 0x54
 800c772:	81a3      	strhlt	r3, [r4, #12]
 800c774:	bd10      	pop	{r4, pc}

0800c776 <__seofread>:
 800c776:	2000      	movs	r0, #0
 800c778:	4770      	bx	lr

0800c77a <__swrite>:
 800c77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c77e:	461f      	mov	r7, r3
 800c780:	898b      	ldrh	r3, [r1, #12]
 800c782:	4605      	mov	r5, r0
 800c784:	05db      	lsls	r3, r3, #23
 800c786:	460c      	mov	r4, r1
 800c788:	4616      	mov	r6, r2
 800c78a:	d505      	bpl.n	800c798 <__swrite+0x1e>
 800c78c:	2302      	movs	r3, #2
 800c78e:	2200      	movs	r2, #0
 800c790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c794:	f000 f938 	bl	800ca08 <_lseek_r>
 800c798:	89a3      	ldrh	r3, [r4, #12]
 800c79a:	4632      	mov	r2, r6
 800c79c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7a0:	81a3      	strh	r3, [r4, #12]
 800c7a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7a6:	463b      	mov	r3, r7
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ae:	f000 b8d3 	b.w	800c958 <_write_r>

0800c7b2 <__sseek>:
 800c7b2:	b510      	push	{r4, lr}
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ba:	f000 f925 	bl	800ca08 <_lseek_r>
 800c7be:	1c43      	adds	r3, r0, #1
 800c7c0:	89a3      	ldrh	r3, [r4, #12]
 800c7c2:	bf15      	itete	ne
 800c7c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7ce:	81a3      	strheq	r3, [r4, #12]
 800c7d0:	bf18      	it	ne
 800c7d2:	81a3      	strhne	r3, [r4, #12]
 800c7d4:	bd10      	pop	{r4, pc}

0800c7d6 <__sclose>:
 800c7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7da:	f000 b8cf 	b.w	800c97c <_close_r>

0800c7de <strcpy>:
 800c7de:	4603      	mov	r3, r0
 800c7e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7e4:	f803 2b01 	strb.w	r2, [r3], #1
 800c7e8:	2a00      	cmp	r2, #0
 800c7ea:	d1f9      	bne.n	800c7e0 <strcpy+0x2>
 800c7ec:	4770      	bx	lr

0800c7ee <strncmp>:
 800c7ee:	b510      	push	{r4, lr}
 800c7f0:	b16a      	cbz	r2, 800c80e <strncmp+0x20>
 800c7f2:	3901      	subs	r1, #1
 800c7f4:	1884      	adds	r4, r0, r2
 800c7f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c7fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d103      	bne.n	800c80a <strncmp+0x1c>
 800c802:	42a0      	cmp	r0, r4
 800c804:	d001      	beq.n	800c80a <strncmp+0x1c>
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1f5      	bne.n	800c7f6 <strncmp+0x8>
 800c80a:	1a98      	subs	r0, r3, r2
 800c80c:	bd10      	pop	{r4, pc}
 800c80e:	4610      	mov	r0, r2
 800c810:	e7fc      	b.n	800c80c <strncmp+0x1e>

0800c812 <_strtoul_l.isra.0>:
 800c812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c816:	4680      	mov	r8, r0
 800c818:	4689      	mov	r9, r1
 800c81a:	4692      	mov	sl, r2
 800c81c:	461e      	mov	r6, r3
 800c81e:	460f      	mov	r7, r1
 800c820:	463d      	mov	r5, r7
 800c822:	9808      	ldr	r0, [sp, #32]
 800c824:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c828:	f000 f8dc 	bl	800c9e4 <__locale_ctype_ptr_l>
 800c82c:	4420      	add	r0, r4
 800c82e:	7843      	ldrb	r3, [r0, #1]
 800c830:	f013 0308 	ands.w	r3, r3, #8
 800c834:	d130      	bne.n	800c898 <_strtoul_l.isra.0+0x86>
 800c836:	2c2d      	cmp	r4, #45	; 0x2d
 800c838:	d130      	bne.n	800c89c <_strtoul_l.isra.0+0x8a>
 800c83a:	2101      	movs	r1, #1
 800c83c:	787c      	ldrb	r4, [r7, #1]
 800c83e:	1cbd      	adds	r5, r7, #2
 800c840:	2e00      	cmp	r6, #0
 800c842:	d05c      	beq.n	800c8fe <_strtoul_l.isra.0+0xec>
 800c844:	2e10      	cmp	r6, #16
 800c846:	d109      	bne.n	800c85c <_strtoul_l.isra.0+0x4a>
 800c848:	2c30      	cmp	r4, #48	; 0x30
 800c84a:	d107      	bne.n	800c85c <_strtoul_l.isra.0+0x4a>
 800c84c:	782b      	ldrb	r3, [r5, #0]
 800c84e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c852:	2b58      	cmp	r3, #88	; 0x58
 800c854:	d14e      	bne.n	800c8f4 <_strtoul_l.isra.0+0xe2>
 800c856:	2610      	movs	r6, #16
 800c858:	786c      	ldrb	r4, [r5, #1]
 800c85a:	3502      	adds	r5, #2
 800c85c:	f04f 32ff 	mov.w	r2, #4294967295
 800c860:	fbb2 f2f6 	udiv	r2, r2, r6
 800c864:	2300      	movs	r3, #0
 800c866:	fb06 fc02 	mul.w	ip, r6, r2
 800c86a:	4618      	mov	r0, r3
 800c86c:	ea6f 0c0c 	mvn.w	ip, ip
 800c870:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c874:	2f09      	cmp	r7, #9
 800c876:	d817      	bhi.n	800c8a8 <_strtoul_l.isra.0+0x96>
 800c878:	463c      	mov	r4, r7
 800c87a:	42a6      	cmp	r6, r4
 800c87c:	dd23      	ble.n	800c8c6 <_strtoul_l.isra.0+0xb4>
 800c87e:	2b00      	cmp	r3, #0
 800c880:	db1e      	blt.n	800c8c0 <_strtoul_l.isra.0+0xae>
 800c882:	4282      	cmp	r2, r0
 800c884:	d31c      	bcc.n	800c8c0 <_strtoul_l.isra.0+0xae>
 800c886:	d101      	bne.n	800c88c <_strtoul_l.isra.0+0x7a>
 800c888:	45a4      	cmp	ip, r4
 800c88a:	db19      	blt.n	800c8c0 <_strtoul_l.isra.0+0xae>
 800c88c:	2301      	movs	r3, #1
 800c88e:	fb00 4006 	mla	r0, r0, r6, r4
 800c892:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c896:	e7eb      	b.n	800c870 <_strtoul_l.isra.0+0x5e>
 800c898:	462f      	mov	r7, r5
 800c89a:	e7c1      	b.n	800c820 <_strtoul_l.isra.0+0xe>
 800c89c:	2c2b      	cmp	r4, #43	; 0x2b
 800c89e:	bf04      	itt	eq
 800c8a0:	1cbd      	addeq	r5, r7, #2
 800c8a2:	787c      	ldrbeq	r4, [r7, #1]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	e7cb      	b.n	800c840 <_strtoul_l.isra.0+0x2e>
 800c8a8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c8ac:	2f19      	cmp	r7, #25
 800c8ae:	d801      	bhi.n	800c8b4 <_strtoul_l.isra.0+0xa2>
 800c8b0:	3c37      	subs	r4, #55	; 0x37
 800c8b2:	e7e2      	b.n	800c87a <_strtoul_l.isra.0+0x68>
 800c8b4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c8b8:	2f19      	cmp	r7, #25
 800c8ba:	d804      	bhi.n	800c8c6 <_strtoul_l.isra.0+0xb4>
 800c8bc:	3c57      	subs	r4, #87	; 0x57
 800c8be:	e7dc      	b.n	800c87a <_strtoul_l.isra.0+0x68>
 800c8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c4:	e7e5      	b.n	800c892 <_strtoul_l.isra.0+0x80>
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	da09      	bge.n	800c8de <_strtoul_l.isra.0+0xcc>
 800c8ca:	2322      	movs	r3, #34	; 0x22
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	f8c8 3000 	str.w	r3, [r8]
 800c8d4:	f1ba 0f00 	cmp.w	sl, #0
 800c8d8:	d107      	bne.n	800c8ea <_strtoul_l.isra.0+0xd8>
 800c8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8de:	b101      	cbz	r1, 800c8e2 <_strtoul_l.isra.0+0xd0>
 800c8e0:	4240      	negs	r0, r0
 800c8e2:	f1ba 0f00 	cmp.w	sl, #0
 800c8e6:	d0f8      	beq.n	800c8da <_strtoul_l.isra.0+0xc8>
 800c8e8:	b10b      	cbz	r3, 800c8ee <_strtoul_l.isra.0+0xdc>
 800c8ea:	f105 39ff 	add.w	r9, r5, #4294967295
 800c8ee:	f8ca 9000 	str.w	r9, [sl]
 800c8f2:	e7f2      	b.n	800c8da <_strtoul_l.isra.0+0xc8>
 800c8f4:	2430      	movs	r4, #48	; 0x30
 800c8f6:	2e00      	cmp	r6, #0
 800c8f8:	d1b0      	bne.n	800c85c <_strtoul_l.isra.0+0x4a>
 800c8fa:	2608      	movs	r6, #8
 800c8fc:	e7ae      	b.n	800c85c <_strtoul_l.isra.0+0x4a>
 800c8fe:	2c30      	cmp	r4, #48	; 0x30
 800c900:	d0a4      	beq.n	800c84c <_strtoul_l.isra.0+0x3a>
 800c902:	260a      	movs	r6, #10
 800c904:	e7aa      	b.n	800c85c <_strtoul_l.isra.0+0x4a>
	...

0800c908 <_strtoul_r>:
 800c908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c90a:	4c06      	ldr	r4, [pc, #24]	; (800c924 <_strtoul_r+0x1c>)
 800c90c:	4d06      	ldr	r5, [pc, #24]	; (800c928 <_strtoul_r+0x20>)
 800c90e:	6824      	ldr	r4, [r4, #0]
 800c910:	6a24      	ldr	r4, [r4, #32]
 800c912:	2c00      	cmp	r4, #0
 800c914:	bf08      	it	eq
 800c916:	462c      	moveq	r4, r5
 800c918:	9400      	str	r4, [sp, #0]
 800c91a:	f7ff ff7a 	bl	800c812 <_strtoul_l.isra.0>
 800c91e:	b003      	add	sp, #12
 800c920:	bd30      	pop	{r4, r5, pc}
 800c922:	bf00      	nop
 800c924:	20000028 	.word	0x20000028
 800c928:	200000f0 	.word	0x200000f0

0800c92c <strtoul>:
 800c92c:	4b08      	ldr	r3, [pc, #32]	; (800c950 <strtoul+0x24>)
 800c92e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c930:	681c      	ldr	r4, [r3, #0]
 800c932:	4d08      	ldr	r5, [pc, #32]	; (800c954 <strtoul+0x28>)
 800c934:	6a23      	ldr	r3, [r4, #32]
 800c936:	2b00      	cmp	r3, #0
 800c938:	bf08      	it	eq
 800c93a:	462b      	moveq	r3, r5
 800c93c:	9300      	str	r3, [sp, #0]
 800c93e:	4613      	mov	r3, r2
 800c940:	460a      	mov	r2, r1
 800c942:	4601      	mov	r1, r0
 800c944:	4620      	mov	r0, r4
 800c946:	f7ff ff64 	bl	800c812 <_strtoul_l.isra.0>
 800c94a:	b003      	add	sp, #12
 800c94c:	bd30      	pop	{r4, r5, pc}
 800c94e:	bf00      	nop
 800c950:	20000028 	.word	0x20000028
 800c954:	200000f0 	.word	0x200000f0

0800c958 <_write_r>:
 800c958:	b538      	push	{r3, r4, r5, lr}
 800c95a:	4605      	mov	r5, r0
 800c95c:	4608      	mov	r0, r1
 800c95e:	4611      	mov	r1, r2
 800c960:	2200      	movs	r2, #0
 800c962:	4c05      	ldr	r4, [pc, #20]	; (800c978 <_write_r+0x20>)
 800c964:	6022      	str	r2, [r4, #0]
 800c966:	461a      	mov	r2, r3
 800c968:	f7f6 f87d 	bl	8002a66 <_write>
 800c96c:	1c43      	adds	r3, r0, #1
 800c96e:	d102      	bne.n	800c976 <_write_r+0x1e>
 800c970:	6823      	ldr	r3, [r4, #0]
 800c972:	b103      	cbz	r3, 800c976 <_write_r+0x1e>
 800c974:	602b      	str	r3, [r5, #0]
 800c976:	bd38      	pop	{r3, r4, r5, pc}
 800c978:	200011a0 	.word	0x200011a0

0800c97c <_close_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	2300      	movs	r3, #0
 800c980:	4c05      	ldr	r4, [pc, #20]	; (800c998 <_close_r+0x1c>)
 800c982:	4605      	mov	r5, r0
 800c984:	4608      	mov	r0, r1
 800c986:	6023      	str	r3, [r4, #0]
 800c988:	f7f6 fb37 	bl	8002ffa <_close>
 800c98c:	1c43      	adds	r3, r0, #1
 800c98e:	d102      	bne.n	800c996 <_close_r+0x1a>
 800c990:	6823      	ldr	r3, [r4, #0]
 800c992:	b103      	cbz	r3, 800c996 <_close_r+0x1a>
 800c994:	602b      	str	r3, [r5, #0]
 800c996:	bd38      	pop	{r3, r4, r5, pc}
 800c998:	200011a0 	.word	0x200011a0

0800c99c <__env_lock>:
 800c99c:	4770      	bx	lr

0800c99e <__env_unlock>:
 800c99e:	4770      	bx	lr

0800c9a0 <_fstat_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	4c06      	ldr	r4, [pc, #24]	; (800c9c0 <_fstat_r+0x20>)
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	4608      	mov	r0, r1
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	f7f6 fb2f 	bl	8003010 <_fstat>
 800c9b2:	1c43      	adds	r3, r0, #1
 800c9b4:	d102      	bne.n	800c9bc <_fstat_r+0x1c>
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	b103      	cbz	r3, 800c9bc <_fstat_r+0x1c>
 800c9ba:	602b      	str	r3, [r5, #0]
 800c9bc:	bd38      	pop	{r3, r4, r5, pc}
 800c9be:	bf00      	nop
 800c9c0:	200011a0 	.word	0x200011a0

0800c9c4 <_isatty_r>:
 800c9c4:	b538      	push	{r3, r4, r5, lr}
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	4c05      	ldr	r4, [pc, #20]	; (800c9e0 <_isatty_r+0x1c>)
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	4608      	mov	r0, r1
 800c9ce:	6023      	str	r3, [r4, #0]
 800c9d0:	f7f6 fb2d 	bl	800302e <_isatty>
 800c9d4:	1c43      	adds	r3, r0, #1
 800c9d6:	d102      	bne.n	800c9de <_isatty_r+0x1a>
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	b103      	cbz	r3, 800c9de <_isatty_r+0x1a>
 800c9dc:	602b      	str	r3, [r5, #0]
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	200011a0 	.word	0x200011a0

0800c9e4 <__locale_ctype_ptr_l>:
 800c9e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c9e8:	4770      	bx	lr
	...

0800c9ec <__locale_ctype_ptr>:
 800c9ec:	4b04      	ldr	r3, [pc, #16]	; (800ca00 <__locale_ctype_ptr+0x14>)
 800c9ee:	4a05      	ldr	r2, [pc, #20]	; (800ca04 <__locale_ctype_ptr+0x18>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	6a1b      	ldr	r3, [r3, #32]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	bf08      	it	eq
 800c9f8:	4613      	moveq	r3, r2
 800c9fa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c9fe:	4770      	bx	lr
 800ca00:	20000028 	.word	0x20000028
 800ca04:	200000f0 	.word	0x200000f0

0800ca08 <_lseek_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	4608      	mov	r0, r1
 800ca0e:	4611      	mov	r1, r2
 800ca10:	2200      	movs	r2, #0
 800ca12:	4c05      	ldr	r4, [pc, #20]	; (800ca28 <_lseek_r+0x20>)
 800ca14:	6022      	str	r2, [r4, #0]
 800ca16:	461a      	mov	r2, r3
 800ca18:	f7f6 fb13 	bl	8003042 <_lseek>
 800ca1c:	1c43      	adds	r3, r0, #1
 800ca1e:	d102      	bne.n	800ca26 <_lseek_r+0x1e>
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	b103      	cbz	r3, 800ca26 <_lseek_r+0x1e>
 800ca24:	602b      	str	r3, [r5, #0]
 800ca26:	bd38      	pop	{r3, r4, r5, pc}
 800ca28:	200011a0 	.word	0x200011a0

0800ca2c <__ascii_mbtowc>:
 800ca2c:	b082      	sub	sp, #8
 800ca2e:	b901      	cbnz	r1, 800ca32 <__ascii_mbtowc+0x6>
 800ca30:	a901      	add	r1, sp, #4
 800ca32:	b142      	cbz	r2, 800ca46 <__ascii_mbtowc+0x1a>
 800ca34:	b14b      	cbz	r3, 800ca4a <__ascii_mbtowc+0x1e>
 800ca36:	7813      	ldrb	r3, [r2, #0]
 800ca38:	600b      	str	r3, [r1, #0]
 800ca3a:	7812      	ldrb	r2, [r2, #0]
 800ca3c:	1c10      	adds	r0, r2, #0
 800ca3e:	bf18      	it	ne
 800ca40:	2001      	movne	r0, #1
 800ca42:	b002      	add	sp, #8
 800ca44:	4770      	bx	lr
 800ca46:	4610      	mov	r0, r2
 800ca48:	e7fb      	b.n	800ca42 <__ascii_mbtowc+0x16>
 800ca4a:	f06f 0001 	mvn.w	r0, #1
 800ca4e:	e7f8      	b.n	800ca42 <__ascii_mbtowc+0x16>

0800ca50 <memmove>:
 800ca50:	4288      	cmp	r0, r1
 800ca52:	b510      	push	{r4, lr}
 800ca54:	eb01 0302 	add.w	r3, r1, r2
 800ca58:	d807      	bhi.n	800ca6a <memmove+0x1a>
 800ca5a:	1e42      	subs	r2, r0, #1
 800ca5c:	4299      	cmp	r1, r3
 800ca5e:	d00a      	beq.n	800ca76 <memmove+0x26>
 800ca60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca64:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ca68:	e7f8      	b.n	800ca5c <memmove+0xc>
 800ca6a:	4283      	cmp	r3, r0
 800ca6c:	d9f5      	bls.n	800ca5a <memmove+0xa>
 800ca6e:	1881      	adds	r1, r0, r2
 800ca70:	1ad2      	subs	r2, r2, r3
 800ca72:	42d3      	cmn	r3, r2
 800ca74:	d100      	bne.n	800ca78 <memmove+0x28>
 800ca76:	bd10      	pop	{r4, pc}
 800ca78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca7c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ca80:	e7f7      	b.n	800ca72 <memmove+0x22>

0800ca82 <_realloc_r>:
 800ca82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca84:	4607      	mov	r7, r0
 800ca86:	4614      	mov	r4, r2
 800ca88:	460e      	mov	r6, r1
 800ca8a:	b921      	cbnz	r1, 800ca96 <_realloc_r+0x14>
 800ca8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ca90:	4611      	mov	r1, r2
 800ca92:	f7fc bf77 	b.w	8009984 <_malloc_r>
 800ca96:	b922      	cbnz	r2, 800caa2 <_realloc_r+0x20>
 800ca98:	f7fc ff28 	bl	80098ec <_free_r>
 800ca9c:	4625      	mov	r5, r4
 800ca9e:	4628      	mov	r0, r5
 800caa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caa2:	f000 fc2c 	bl	800d2fe <_malloc_usable_size_r>
 800caa6:	42a0      	cmp	r0, r4
 800caa8:	d20f      	bcs.n	800caca <_realloc_r+0x48>
 800caaa:	4621      	mov	r1, r4
 800caac:	4638      	mov	r0, r7
 800caae:	f7fc ff69 	bl	8009984 <_malloc_r>
 800cab2:	4605      	mov	r5, r0
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d0f2      	beq.n	800ca9e <_realloc_r+0x1c>
 800cab8:	4631      	mov	r1, r6
 800caba:	4622      	mov	r2, r4
 800cabc:	f7ff f862 	bl	800bb84 <memcpy>
 800cac0:	4631      	mov	r1, r6
 800cac2:	4638      	mov	r0, r7
 800cac4:	f7fc ff12 	bl	80098ec <_free_r>
 800cac8:	e7e9      	b.n	800ca9e <_realloc_r+0x1c>
 800caca:	4635      	mov	r5, r6
 800cacc:	e7e7      	b.n	800ca9e <_realloc_r+0x1c>

0800cace <_sungetc_r>:
 800cace:	b538      	push	{r3, r4, r5, lr}
 800cad0:	1c4b      	adds	r3, r1, #1
 800cad2:	4614      	mov	r4, r2
 800cad4:	d103      	bne.n	800cade <_sungetc_r+0x10>
 800cad6:	f04f 35ff 	mov.w	r5, #4294967295
 800cada:	4628      	mov	r0, r5
 800cadc:	bd38      	pop	{r3, r4, r5, pc}
 800cade:	8993      	ldrh	r3, [r2, #12]
 800cae0:	b2cd      	uxtb	r5, r1
 800cae2:	f023 0320 	bic.w	r3, r3, #32
 800cae6:	8193      	strh	r3, [r2, #12]
 800cae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caea:	6852      	ldr	r2, [r2, #4]
 800caec:	b18b      	cbz	r3, 800cb12 <_sungetc_r+0x44>
 800caee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800caf0:	4293      	cmp	r3, r2
 800caf2:	dd08      	ble.n	800cb06 <_sungetc_r+0x38>
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	1e5a      	subs	r2, r3, #1
 800caf8:	6022      	str	r2, [r4, #0]
 800cafa:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cafe:	6863      	ldr	r3, [r4, #4]
 800cb00:	3301      	adds	r3, #1
 800cb02:	6063      	str	r3, [r4, #4]
 800cb04:	e7e9      	b.n	800cada <_sungetc_r+0xc>
 800cb06:	4621      	mov	r1, r4
 800cb08:	f000 fbb4 	bl	800d274 <__submore>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d0f1      	beq.n	800caf4 <_sungetc_r+0x26>
 800cb10:	e7e1      	b.n	800cad6 <_sungetc_r+0x8>
 800cb12:	6921      	ldr	r1, [r4, #16]
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	b151      	cbz	r1, 800cb2e <_sungetc_r+0x60>
 800cb18:	4299      	cmp	r1, r3
 800cb1a:	d208      	bcs.n	800cb2e <_sungetc_r+0x60>
 800cb1c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cb20:	42a9      	cmp	r1, r5
 800cb22:	d104      	bne.n	800cb2e <_sungetc_r+0x60>
 800cb24:	3b01      	subs	r3, #1
 800cb26:	3201      	adds	r2, #1
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	6062      	str	r2, [r4, #4]
 800cb2c:	e7d5      	b.n	800cada <_sungetc_r+0xc>
 800cb2e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cb32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb36:	6363      	str	r3, [r4, #52]	; 0x34
 800cb38:	2303      	movs	r3, #3
 800cb3a:	63a3      	str	r3, [r4, #56]	; 0x38
 800cb3c:	4623      	mov	r3, r4
 800cb3e:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cb42:	6023      	str	r3, [r4, #0]
 800cb44:	2301      	movs	r3, #1
 800cb46:	e7dc      	b.n	800cb02 <_sungetc_r+0x34>

0800cb48 <__ssrefill_r>:
 800cb48:	b510      	push	{r4, lr}
 800cb4a:	460c      	mov	r4, r1
 800cb4c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cb4e:	b169      	cbz	r1, 800cb6c <__ssrefill_r+0x24>
 800cb50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb54:	4299      	cmp	r1, r3
 800cb56:	d001      	beq.n	800cb5c <__ssrefill_r+0x14>
 800cb58:	f7fc fec8 	bl	80098ec <_free_r>
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb60:	6360      	str	r0, [r4, #52]	; 0x34
 800cb62:	6063      	str	r3, [r4, #4]
 800cb64:	b113      	cbz	r3, 800cb6c <__ssrefill_r+0x24>
 800cb66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	bd10      	pop	{r4, pc}
 800cb6c:	6923      	ldr	r3, [r4, #16]
 800cb6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb72:	6023      	str	r3, [r4, #0]
 800cb74:	2300      	movs	r3, #0
 800cb76:	6063      	str	r3, [r4, #4]
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	f043 0320 	orr.w	r3, r3, #32
 800cb7e:	81a3      	strh	r3, [r4, #12]
 800cb80:	e7f3      	b.n	800cb6a <__ssrefill_r+0x22>
	...

0800cb84 <__ssvfiscanf_r>:
 800cb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb88:	460c      	mov	r4, r1
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	4606      	mov	r6, r0
 800cb8e:	4692      	mov	sl, r2
 800cb90:	270a      	movs	r7, #10
 800cb92:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800cb96:	9144      	str	r1, [sp, #272]	; 0x110
 800cb98:	9145      	str	r1, [sp, #276]	; 0x114
 800cb9a:	499e      	ldr	r1, [pc, #632]	; (800ce14 <__ssvfiscanf_r+0x290>)
 800cb9c:	f10d 0804 	add.w	r8, sp, #4
 800cba0:	91a0      	str	r1, [sp, #640]	; 0x280
 800cba2:	499d      	ldr	r1, [pc, #628]	; (800ce18 <__ssvfiscanf_r+0x294>)
 800cba4:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800ce1c <__ssvfiscanf_r+0x298>
 800cba8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cbac:	91a1      	str	r1, [sp, #644]	; 0x284
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	f89a 3000 	ldrb.w	r3, [sl]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 812a 	beq.w	800ce0e <__ssvfiscanf_r+0x28a>
 800cbba:	4655      	mov	r5, sl
 800cbbc:	f7ff ff16 	bl	800c9ec <__locale_ctype_ptr>
 800cbc0:	f815 bb01 	ldrb.w	fp, [r5], #1
 800cbc4:	4458      	add	r0, fp
 800cbc6:	7843      	ldrb	r3, [r0, #1]
 800cbc8:	f013 0308 	ands.w	r3, r3, #8
 800cbcc:	d01c      	beq.n	800cc08 <__ssvfiscanf_r+0x84>
 800cbce:	6863      	ldr	r3, [r4, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	dd12      	ble.n	800cbfa <__ssvfiscanf_r+0x76>
 800cbd4:	f7ff ff0a 	bl	800c9ec <__locale_ctype_ptr>
 800cbd8:	6823      	ldr	r3, [r4, #0]
 800cbda:	781a      	ldrb	r2, [r3, #0]
 800cbdc:	4410      	add	r0, r2
 800cbde:	7842      	ldrb	r2, [r0, #1]
 800cbe0:	0712      	lsls	r2, r2, #28
 800cbe2:	d401      	bmi.n	800cbe8 <__ssvfiscanf_r+0x64>
 800cbe4:	46aa      	mov	sl, r5
 800cbe6:	e7e3      	b.n	800cbb0 <__ssvfiscanf_r+0x2c>
 800cbe8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cbea:	3301      	adds	r3, #1
 800cbec:	3201      	adds	r2, #1
 800cbee:	9245      	str	r2, [sp, #276]	; 0x114
 800cbf0:	6862      	ldr	r2, [r4, #4]
 800cbf2:	6023      	str	r3, [r4, #0]
 800cbf4:	3a01      	subs	r2, #1
 800cbf6:	6062      	str	r2, [r4, #4]
 800cbf8:	e7e9      	b.n	800cbce <__ssvfiscanf_r+0x4a>
 800cbfa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	4630      	mov	r0, r6
 800cc00:	4798      	blx	r3
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0e6      	beq.n	800cbd4 <__ssvfiscanf_r+0x50>
 800cc06:	e7ed      	b.n	800cbe4 <__ssvfiscanf_r+0x60>
 800cc08:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800cc0c:	f040 8082 	bne.w	800cd14 <__ssvfiscanf_r+0x190>
 800cc10:	9343      	str	r3, [sp, #268]	; 0x10c
 800cc12:	9341      	str	r3, [sp, #260]	; 0x104
 800cc14:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800cc18:	2b2a      	cmp	r3, #42	; 0x2a
 800cc1a:	d103      	bne.n	800cc24 <__ssvfiscanf_r+0xa0>
 800cc1c:	2310      	movs	r3, #16
 800cc1e:	f10a 0502 	add.w	r5, sl, #2
 800cc22:	9341      	str	r3, [sp, #260]	; 0x104
 800cc24:	46aa      	mov	sl, r5
 800cc26:	f815 1b01 	ldrb.w	r1, [r5], #1
 800cc2a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800cc2e:	2a09      	cmp	r2, #9
 800cc30:	d922      	bls.n	800cc78 <__ssvfiscanf_r+0xf4>
 800cc32:	2203      	movs	r2, #3
 800cc34:	4879      	ldr	r0, [pc, #484]	; (800ce1c <__ssvfiscanf_r+0x298>)
 800cc36:	f7fe ff97 	bl	800bb68 <memchr>
 800cc3a:	b138      	cbz	r0, 800cc4c <__ssvfiscanf_r+0xc8>
 800cc3c:	eba0 0309 	sub.w	r3, r0, r9
 800cc40:	2001      	movs	r0, #1
 800cc42:	46aa      	mov	sl, r5
 800cc44:	4098      	lsls	r0, r3
 800cc46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cc48:	4318      	orrs	r0, r3
 800cc4a:	9041      	str	r0, [sp, #260]	; 0x104
 800cc4c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc50:	f10a 0501 	add.w	r5, sl, #1
 800cc54:	2b67      	cmp	r3, #103	; 0x67
 800cc56:	d82b      	bhi.n	800ccb0 <__ssvfiscanf_r+0x12c>
 800cc58:	2b65      	cmp	r3, #101	; 0x65
 800cc5a:	f080 809f 	bcs.w	800cd9c <__ssvfiscanf_r+0x218>
 800cc5e:	2b47      	cmp	r3, #71	; 0x47
 800cc60:	d810      	bhi.n	800cc84 <__ssvfiscanf_r+0x100>
 800cc62:	2b45      	cmp	r3, #69	; 0x45
 800cc64:	f080 809a 	bcs.w	800cd9c <__ssvfiscanf_r+0x218>
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d06c      	beq.n	800cd46 <__ssvfiscanf_r+0x1c2>
 800cc6c:	2b25      	cmp	r3, #37	; 0x25
 800cc6e:	d051      	beq.n	800cd14 <__ssvfiscanf_r+0x190>
 800cc70:	2303      	movs	r3, #3
 800cc72:	9742      	str	r7, [sp, #264]	; 0x108
 800cc74:	9347      	str	r3, [sp, #284]	; 0x11c
 800cc76:	e027      	b.n	800ccc8 <__ssvfiscanf_r+0x144>
 800cc78:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cc7a:	fb07 1303 	mla	r3, r7, r3, r1
 800cc7e:	3b30      	subs	r3, #48	; 0x30
 800cc80:	9343      	str	r3, [sp, #268]	; 0x10c
 800cc82:	e7cf      	b.n	800cc24 <__ssvfiscanf_r+0xa0>
 800cc84:	2b5b      	cmp	r3, #91	; 0x5b
 800cc86:	d06a      	beq.n	800cd5e <__ssvfiscanf_r+0x1da>
 800cc88:	d80c      	bhi.n	800cca4 <__ssvfiscanf_r+0x120>
 800cc8a:	2b58      	cmp	r3, #88	; 0x58
 800cc8c:	d1f0      	bne.n	800cc70 <__ssvfiscanf_r+0xec>
 800cc8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cc90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc94:	9241      	str	r2, [sp, #260]	; 0x104
 800cc96:	2210      	movs	r2, #16
 800cc98:	9242      	str	r2, [sp, #264]	; 0x108
 800cc9a:	2b6e      	cmp	r3, #110	; 0x6e
 800cc9c:	bf8c      	ite	hi
 800cc9e:	2304      	movhi	r3, #4
 800cca0:	2303      	movls	r3, #3
 800cca2:	e010      	b.n	800ccc6 <__ssvfiscanf_r+0x142>
 800cca4:	2b63      	cmp	r3, #99	; 0x63
 800cca6:	d065      	beq.n	800cd74 <__ssvfiscanf_r+0x1f0>
 800cca8:	2b64      	cmp	r3, #100	; 0x64
 800ccaa:	d1e1      	bne.n	800cc70 <__ssvfiscanf_r+0xec>
 800ccac:	9742      	str	r7, [sp, #264]	; 0x108
 800ccae:	e7f4      	b.n	800cc9a <__ssvfiscanf_r+0x116>
 800ccb0:	2b70      	cmp	r3, #112	; 0x70
 800ccb2:	d04b      	beq.n	800cd4c <__ssvfiscanf_r+0x1c8>
 800ccb4:	d826      	bhi.n	800cd04 <__ssvfiscanf_r+0x180>
 800ccb6:	2b6e      	cmp	r3, #110	; 0x6e
 800ccb8:	d062      	beq.n	800cd80 <__ssvfiscanf_r+0x1fc>
 800ccba:	d84c      	bhi.n	800cd56 <__ssvfiscanf_r+0x1d2>
 800ccbc:	2b69      	cmp	r3, #105	; 0x69
 800ccbe:	d1d7      	bne.n	800cc70 <__ssvfiscanf_r+0xec>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	9342      	str	r3, [sp, #264]	; 0x108
 800ccc4:	2303      	movs	r3, #3
 800ccc6:	9347      	str	r3, [sp, #284]	; 0x11c
 800ccc8:	6863      	ldr	r3, [r4, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	dd68      	ble.n	800cda0 <__ssvfiscanf_r+0x21c>
 800ccce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ccd0:	0659      	lsls	r1, r3, #25
 800ccd2:	d407      	bmi.n	800cce4 <__ssvfiscanf_r+0x160>
 800ccd4:	f7ff fe8a 	bl	800c9ec <__locale_ctype_ptr>
 800ccd8:	6823      	ldr	r3, [r4, #0]
 800ccda:	781a      	ldrb	r2, [r3, #0]
 800ccdc:	4410      	add	r0, r2
 800ccde:	7842      	ldrb	r2, [r0, #1]
 800cce0:	0712      	lsls	r2, r2, #28
 800cce2:	d464      	bmi.n	800cdae <__ssvfiscanf_r+0x22a>
 800cce4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	dc73      	bgt.n	800cdd2 <__ssvfiscanf_r+0x24e>
 800ccea:	466b      	mov	r3, sp
 800ccec:	4622      	mov	r2, r4
 800ccee:	a941      	add	r1, sp, #260	; 0x104
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f000 f897 	bl	800ce24 <_scanf_chars>
 800ccf6:	2801      	cmp	r0, #1
 800ccf8:	f000 8089 	beq.w	800ce0e <__ssvfiscanf_r+0x28a>
 800ccfc:	2802      	cmp	r0, #2
 800ccfe:	f47f af71 	bne.w	800cbe4 <__ssvfiscanf_r+0x60>
 800cd02:	e01d      	b.n	800cd40 <__ssvfiscanf_r+0x1bc>
 800cd04:	2b75      	cmp	r3, #117	; 0x75
 800cd06:	d0d1      	beq.n	800ccac <__ssvfiscanf_r+0x128>
 800cd08:	2b78      	cmp	r3, #120	; 0x78
 800cd0a:	d0c0      	beq.n	800cc8e <__ssvfiscanf_r+0x10a>
 800cd0c:	2b73      	cmp	r3, #115	; 0x73
 800cd0e:	d1af      	bne.n	800cc70 <__ssvfiscanf_r+0xec>
 800cd10:	2302      	movs	r3, #2
 800cd12:	e7d8      	b.n	800ccc6 <__ssvfiscanf_r+0x142>
 800cd14:	6863      	ldr	r3, [r4, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	dd0c      	ble.n	800cd34 <__ssvfiscanf_r+0x1b0>
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	781a      	ldrb	r2, [r3, #0]
 800cd1e:	455a      	cmp	r2, fp
 800cd20:	d175      	bne.n	800ce0e <__ssvfiscanf_r+0x28a>
 800cd22:	3301      	adds	r3, #1
 800cd24:	6862      	ldr	r2, [r4, #4]
 800cd26:	6023      	str	r3, [r4, #0]
 800cd28:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cd2a:	3a01      	subs	r2, #1
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	6062      	str	r2, [r4, #4]
 800cd30:	9345      	str	r3, [sp, #276]	; 0x114
 800cd32:	e757      	b.n	800cbe4 <__ssvfiscanf_r+0x60>
 800cd34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cd36:	4621      	mov	r1, r4
 800cd38:	4630      	mov	r0, r6
 800cd3a:	4798      	blx	r3
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d0ec      	beq.n	800cd1a <__ssvfiscanf_r+0x196>
 800cd40:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d159      	bne.n	800cdfa <__ssvfiscanf_r+0x276>
 800cd46:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4a:	e05c      	b.n	800ce06 <__ssvfiscanf_r+0x282>
 800cd4c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cd4e:	f042 0220 	orr.w	r2, r2, #32
 800cd52:	9241      	str	r2, [sp, #260]	; 0x104
 800cd54:	e79b      	b.n	800cc8e <__ssvfiscanf_r+0x10a>
 800cd56:	2308      	movs	r3, #8
 800cd58:	9342      	str	r3, [sp, #264]	; 0x108
 800cd5a:	2304      	movs	r3, #4
 800cd5c:	e7b3      	b.n	800ccc6 <__ssvfiscanf_r+0x142>
 800cd5e:	4629      	mov	r1, r5
 800cd60:	4640      	mov	r0, r8
 800cd62:	f000 f9c9 	bl	800d0f8 <__sccl>
 800cd66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd68:	4605      	mov	r5, r0
 800cd6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd6e:	9341      	str	r3, [sp, #260]	; 0x104
 800cd70:	2301      	movs	r3, #1
 800cd72:	e7a8      	b.n	800ccc6 <__ssvfiscanf_r+0x142>
 800cd74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd7a:	9341      	str	r3, [sp, #260]	; 0x104
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	e7a2      	b.n	800ccc6 <__ssvfiscanf_r+0x142>
 800cd80:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cd82:	06c3      	lsls	r3, r0, #27
 800cd84:	f53f af2e 	bmi.w	800cbe4 <__ssvfiscanf_r+0x60>
 800cd88:	9b00      	ldr	r3, [sp, #0]
 800cd8a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cd8c:	1d19      	adds	r1, r3, #4
 800cd8e:	9100      	str	r1, [sp, #0]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	07c0      	lsls	r0, r0, #31
 800cd94:	bf4c      	ite	mi
 800cd96:	801a      	strhmi	r2, [r3, #0]
 800cd98:	601a      	strpl	r2, [r3, #0]
 800cd9a:	e723      	b.n	800cbe4 <__ssvfiscanf_r+0x60>
 800cd9c:	2305      	movs	r3, #5
 800cd9e:	e792      	b.n	800ccc6 <__ssvfiscanf_r+0x142>
 800cda0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cda2:	4621      	mov	r1, r4
 800cda4:	4630      	mov	r0, r6
 800cda6:	4798      	blx	r3
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d090      	beq.n	800ccce <__ssvfiscanf_r+0x14a>
 800cdac:	e7c8      	b.n	800cd40 <__ssvfiscanf_r+0x1bc>
 800cdae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cdb0:	3201      	adds	r2, #1
 800cdb2:	9245      	str	r2, [sp, #276]	; 0x114
 800cdb4:	6862      	ldr	r2, [r4, #4]
 800cdb6:	3a01      	subs	r2, #1
 800cdb8:	2a00      	cmp	r2, #0
 800cdba:	6062      	str	r2, [r4, #4]
 800cdbc:	dd02      	ble.n	800cdc4 <__ssvfiscanf_r+0x240>
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	e787      	b.n	800ccd4 <__ssvfiscanf_r+0x150>
 800cdc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cdc6:	4621      	mov	r1, r4
 800cdc8:	4630      	mov	r0, r6
 800cdca:	4798      	blx	r3
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d081      	beq.n	800ccd4 <__ssvfiscanf_r+0x150>
 800cdd0:	e7b6      	b.n	800cd40 <__ssvfiscanf_r+0x1bc>
 800cdd2:	2b04      	cmp	r3, #4
 800cdd4:	dc06      	bgt.n	800cde4 <__ssvfiscanf_r+0x260>
 800cdd6:	466b      	mov	r3, sp
 800cdd8:	4622      	mov	r2, r4
 800cdda:	a941      	add	r1, sp, #260	; 0x104
 800cddc:	4630      	mov	r0, r6
 800cdde:	f000 f883 	bl	800cee8 <_scanf_i>
 800cde2:	e788      	b.n	800ccf6 <__ssvfiscanf_r+0x172>
 800cde4:	4b0e      	ldr	r3, [pc, #56]	; (800ce20 <__ssvfiscanf_r+0x29c>)
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f43f aefc 	beq.w	800cbe4 <__ssvfiscanf_r+0x60>
 800cdec:	466b      	mov	r3, sp
 800cdee:	4622      	mov	r2, r4
 800cdf0:	a941      	add	r1, sp, #260	; 0x104
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f3af 8000 	nop.w
 800cdf8:	e77d      	b.n	800ccf6 <__ssvfiscanf_r+0x172>
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ce00:	bf18      	it	ne
 800ce02:	f04f 30ff 	movne.w	r0, #4294967295
 800ce06:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800ce0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ce10:	e7f9      	b.n	800ce06 <__ssvfiscanf_r+0x282>
 800ce12:	bf00      	nop
 800ce14:	0800cacf 	.word	0x0800cacf
 800ce18:	0800cb49 	.word	0x0800cb49
 800ce1c:	0800d93a 	.word	0x0800d93a
 800ce20:	00000000 	.word	0x00000000

0800ce24 <_scanf_chars>:
 800ce24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce28:	4615      	mov	r5, r2
 800ce2a:	688a      	ldr	r2, [r1, #8]
 800ce2c:	4680      	mov	r8, r0
 800ce2e:	460c      	mov	r4, r1
 800ce30:	b932      	cbnz	r2, 800ce40 <_scanf_chars+0x1c>
 800ce32:	698a      	ldr	r2, [r1, #24]
 800ce34:	2a00      	cmp	r2, #0
 800ce36:	bf14      	ite	ne
 800ce38:	f04f 32ff 	movne.w	r2, #4294967295
 800ce3c:	2201      	moveq	r2, #1
 800ce3e:	608a      	str	r2, [r1, #8]
 800ce40:	2600      	movs	r6, #0
 800ce42:	6822      	ldr	r2, [r4, #0]
 800ce44:	06d1      	lsls	r1, r2, #27
 800ce46:	bf5f      	itttt	pl
 800ce48:	681a      	ldrpl	r2, [r3, #0]
 800ce4a:	1d11      	addpl	r1, r2, #4
 800ce4c:	6019      	strpl	r1, [r3, #0]
 800ce4e:	6817      	ldrpl	r7, [r2, #0]
 800ce50:	69a3      	ldr	r3, [r4, #24]
 800ce52:	b1db      	cbz	r3, 800ce8c <_scanf_chars+0x68>
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d107      	bne.n	800ce68 <_scanf_chars+0x44>
 800ce58:	682b      	ldr	r3, [r5, #0]
 800ce5a:	6962      	ldr	r2, [r4, #20]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	5cd3      	ldrb	r3, [r2, r3]
 800ce60:	b9a3      	cbnz	r3, 800ce8c <_scanf_chars+0x68>
 800ce62:	2e00      	cmp	r6, #0
 800ce64:	d131      	bne.n	800ceca <_scanf_chars+0xa6>
 800ce66:	e006      	b.n	800ce76 <_scanf_chars+0x52>
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d007      	beq.n	800ce7c <_scanf_chars+0x58>
 800ce6c:	2e00      	cmp	r6, #0
 800ce6e:	d12c      	bne.n	800ceca <_scanf_chars+0xa6>
 800ce70:	69a3      	ldr	r3, [r4, #24]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d129      	bne.n	800ceca <_scanf_chars+0xa6>
 800ce76:	2001      	movs	r0, #1
 800ce78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce7c:	f7ff fdb6 	bl	800c9ec <__locale_ctype_ptr>
 800ce80:	682b      	ldr	r3, [r5, #0]
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	4418      	add	r0, r3
 800ce86:	7843      	ldrb	r3, [r0, #1]
 800ce88:	071b      	lsls	r3, r3, #28
 800ce8a:	d4ef      	bmi.n	800ce6c <_scanf_chars+0x48>
 800ce8c:	6823      	ldr	r3, [r4, #0]
 800ce8e:	3601      	adds	r6, #1
 800ce90:	06da      	lsls	r2, r3, #27
 800ce92:	bf5e      	ittt	pl
 800ce94:	682b      	ldrpl	r3, [r5, #0]
 800ce96:	781b      	ldrbpl	r3, [r3, #0]
 800ce98:	703b      	strbpl	r3, [r7, #0]
 800ce9a:	682a      	ldr	r2, [r5, #0]
 800ce9c:	686b      	ldr	r3, [r5, #4]
 800ce9e:	f102 0201 	add.w	r2, r2, #1
 800cea2:	602a      	str	r2, [r5, #0]
 800cea4:	68a2      	ldr	r2, [r4, #8]
 800cea6:	f103 33ff 	add.w	r3, r3, #4294967295
 800ceaa:	f102 32ff 	add.w	r2, r2, #4294967295
 800ceae:	606b      	str	r3, [r5, #4]
 800ceb0:	bf58      	it	pl
 800ceb2:	3701      	addpl	r7, #1
 800ceb4:	60a2      	str	r2, [r4, #8]
 800ceb6:	b142      	cbz	r2, 800ceca <_scanf_chars+0xa6>
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	dcc9      	bgt.n	800ce50 <_scanf_chars+0x2c>
 800cebc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cec0:	4629      	mov	r1, r5
 800cec2:	4640      	mov	r0, r8
 800cec4:	4798      	blx	r3
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d0c2      	beq.n	800ce50 <_scanf_chars+0x2c>
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	f013 0310 	ands.w	r3, r3, #16
 800ced0:	d105      	bne.n	800cede <_scanf_chars+0xba>
 800ced2:	68e2      	ldr	r2, [r4, #12]
 800ced4:	3201      	adds	r2, #1
 800ced6:	60e2      	str	r2, [r4, #12]
 800ced8:	69a2      	ldr	r2, [r4, #24]
 800ceda:	b102      	cbz	r2, 800cede <_scanf_chars+0xba>
 800cedc:	703b      	strb	r3, [r7, #0]
 800cede:	6923      	ldr	r3, [r4, #16]
 800cee0:	2000      	movs	r0, #0
 800cee2:	441e      	add	r6, r3
 800cee4:	6126      	str	r6, [r4, #16]
 800cee6:	e7c7      	b.n	800ce78 <_scanf_chars+0x54>

0800cee8 <_scanf_i>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	460c      	mov	r4, r1
 800ceee:	469a      	mov	sl, r3
 800cef0:	4b74      	ldr	r3, [pc, #464]	; (800d0c4 <_scanf_i+0x1dc>)
 800cef2:	b087      	sub	sp, #28
 800cef4:	4683      	mov	fp, r0
 800cef6:	4616      	mov	r6, r2
 800cef8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cefc:	ab03      	add	r3, sp, #12
 800cefe:	68a7      	ldr	r7, [r4, #8]
 800cf00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf04:	4b70      	ldr	r3, [pc, #448]	; (800d0c8 <_scanf_i+0x1e0>)
 800cf06:	69a1      	ldr	r1, [r4, #24]
 800cf08:	4a70      	ldr	r2, [pc, #448]	; (800d0cc <_scanf_i+0x1e4>)
 800cf0a:	f104 091c 	add.w	r9, r4, #28
 800cf0e:	2903      	cmp	r1, #3
 800cf10:	bf08      	it	eq
 800cf12:	461a      	moveq	r2, r3
 800cf14:	1e7b      	subs	r3, r7, #1
 800cf16:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800cf1a:	bf84      	itt	hi
 800cf1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf20:	60a3      	strhi	r3, [r4, #8]
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	bf88      	it	hi
 800cf26:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf2a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cf2e:	6023      	str	r3, [r4, #0]
 800cf30:	bf98      	it	ls
 800cf32:	2700      	movls	r7, #0
 800cf34:	464b      	mov	r3, r9
 800cf36:	f04f 0800 	mov.w	r8, #0
 800cf3a:	9200      	str	r2, [sp, #0]
 800cf3c:	bf88      	it	hi
 800cf3e:	197f      	addhi	r7, r7, r5
 800cf40:	6831      	ldr	r1, [r6, #0]
 800cf42:	9301      	str	r3, [sp, #4]
 800cf44:	ab03      	add	r3, sp, #12
 800cf46:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	7809      	ldrb	r1, [r1, #0]
 800cf4e:	f7fe fe0b 	bl	800bb68 <memchr>
 800cf52:	9b01      	ldr	r3, [sp, #4]
 800cf54:	b330      	cbz	r0, 800cfa4 <_scanf_i+0xbc>
 800cf56:	f1b8 0f01 	cmp.w	r8, #1
 800cf5a:	d15a      	bne.n	800d012 <_scanf_i+0x12a>
 800cf5c:	6862      	ldr	r2, [r4, #4]
 800cf5e:	b92a      	cbnz	r2, 800cf6c <_scanf_i+0x84>
 800cf60:	2108      	movs	r1, #8
 800cf62:	6822      	ldr	r2, [r4, #0]
 800cf64:	6061      	str	r1, [r4, #4]
 800cf66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf6a:	6022      	str	r2, [r4, #0]
 800cf6c:	6822      	ldr	r2, [r4, #0]
 800cf6e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cf72:	6022      	str	r2, [r4, #0]
 800cf74:	68a2      	ldr	r2, [r4, #8]
 800cf76:	1e51      	subs	r1, r2, #1
 800cf78:	60a1      	str	r1, [r4, #8]
 800cf7a:	b19a      	cbz	r2, 800cfa4 <_scanf_i+0xbc>
 800cf7c:	6832      	ldr	r2, [r6, #0]
 800cf7e:	1c5d      	adds	r5, r3, #1
 800cf80:	1c51      	adds	r1, r2, #1
 800cf82:	6031      	str	r1, [r6, #0]
 800cf84:	7812      	ldrb	r2, [r2, #0]
 800cf86:	701a      	strb	r2, [r3, #0]
 800cf88:	6873      	ldr	r3, [r6, #4]
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	6073      	str	r3, [r6, #4]
 800cf90:	dc07      	bgt.n	800cfa2 <_scanf_i+0xba>
 800cf92:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf96:	4631      	mov	r1, r6
 800cf98:	4658      	mov	r0, fp
 800cf9a:	4798      	blx	r3
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	f040 8087 	bne.w	800d0b0 <_scanf_i+0x1c8>
 800cfa2:	462b      	mov	r3, r5
 800cfa4:	f108 0801 	add.w	r8, r8, #1
 800cfa8:	f1b8 0f03 	cmp.w	r8, #3
 800cfac:	d1c8      	bne.n	800cf40 <_scanf_i+0x58>
 800cfae:	6862      	ldr	r2, [r4, #4]
 800cfb0:	b90a      	cbnz	r2, 800cfb6 <_scanf_i+0xce>
 800cfb2:	220a      	movs	r2, #10
 800cfb4:	6062      	str	r2, [r4, #4]
 800cfb6:	6862      	ldr	r2, [r4, #4]
 800cfb8:	4945      	ldr	r1, [pc, #276]	; (800d0d0 <_scanf_i+0x1e8>)
 800cfba:	6960      	ldr	r0, [r4, #20]
 800cfbc:	1a89      	subs	r1, r1, r2
 800cfbe:	9301      	str	r3, [sp, #4]
 800cfc0:	f000 f89a 	bl	800d0f8 <__sccl>
 800cfc4:	9b01      	ldr	r3, [sp, #4]
 800cfc6:	f04f 0800 	mov.w	r8, #0
 800cfca:	461d      	mov	r5, r3
 800cfcc:	68a3      	ldr	r3, [r4, #8]
 800cfce:	6822      	ldr	r2, [r4, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d03b      	beq.n	800d04c <_scanf_i+0x164>
 800cfd4:	6831      	ldr	r1, [r6, #0]
 800cfd6:	6960      	ldr	r0, [r4, #20]
 800cfd8:	f891 c000 	ldrb.w	ip, [r1]
 800cfdc:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d033      	beq.n	800d04c <_scanf_i+0x164>
 800cfe4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cfe8:	d121      	bne.n	800d02e <_scanf_i+0x146>
 800cfea:	0510      	lsls	r0, r2, #20
 800cfec:	d51f      	bpl.n	800d02e <_scanf_i+0x146>
 800cfee:	f108 0801 	add.w	r8, r8, #1
 800cff2:	b117      	cbz	r7, 800cffa <_scanf_i+0x112>
 800cff4:	3301      	adds	r3, #1
 800cff6:	3f01      	subs	r7, #1
 800cff8:	60a3      	str	r3, [r4, #8]
 800cffa:	6873      	ldr	r3, [r6, #4]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	2b00      	cmp	r3, #0
 800d000:	6073      	str	r3, [r6, #4]
 800d002:	dd1c      	ble.n	800d03e <_scanf_i+0x156>
 800d004:	6833      	ldr	r3, [r6, #0]
 800d006:	3301      	adds	r3, #1
 800d008:	6033      	str	r3, [r6, #0]
 800d00a:	68a3      	ldr	r3, [r4, #8]
 800d00c:	3b01      	subs	r3, #1
 800d00e:	60a3      	str	r3, [r4, #8]
 800d010:	e7dc      	b.n	800cfcc <_scanf_i+0xe4>
 800d012:	f1b8 0f02 	cmp.w	r8, #2
 800d016:	d1ad      	bne.n	800cf74 <_scanf_i+0x8c>
 800d018:	6822      	ldr	r2, [r4, #0]
 800d01a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d01e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d022:	d1bf      	bne.n	800cfa4 <_scanf_i+0xbc>
 800d024:	2110      	movs	r1, #16
 800d026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d02a:	6061      	str	r1, [r4, #4]
 800d02c:	e7a1      	b.n	800cf72 <_scanf_i+0x8a>
 800d02e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d032:	6022      	str	r2, [r4, #0]
 800d034:	780b      	ldrb	r3, [r1, #0]
 800d036:	3501      	adds	r5, #1
 800d038:	f805 3c01 	strb.w	r3, [r5, #-1]
 800d03c:	e7dd      	b.n	800cffa <_scanf_i+0x112>
 800d03e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d042:	4631      	mov	r1, r6
 800d044:	4658      	mov	r0, fp
 800d046:	4798      	blx	r3
 800d048:	2800      	cmp	r0, #0
 800d04a:	d0de      	beq.n	800d00a <_scanf_i+0x122>
 800d04c:	6823      	ldr	r3, [r4, #0]
 800d04e:	05d9      	lsls	r1, r3, #23
 800d050:	d50c      	bpl.n	800d06c <_scanf_i+0x184>
 800d052:	454d      	cmp	r5, r9
 800d054:	d908      	bls.n	800d068 <_scanf_i+0x180>
 800d056:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d05a:	1e6f      	subs	r7, r5, #1
 800d05c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d060:	4632      	mov	r2, r6
 800d062:	4658      	mov	r0, fp
 800d064:	4798      	blx	r3
 800d066:	463d      	mov	r5, r7
 800d068:	454d      	cmp	r5, r9
 800d06a:	d029      	beq.n	800d0c0 <_scanf_i+0x1d8>
 800d06c:	6822      	ldr	r2, [r4, #0]
 800d06e:	f012 0210 	ands.w	r2, r2, #16
 800d072:	d113      	bne.n	800d09c <_scanf_i+0x1b4>
 800d074:	702a      	strb	r2, [r5, #0]
 800d076:	6863      	ldr	r3, [r4, #4]
 800d078:	4649      	mov	r1, r9
 800d07a:	4658      	mov	r0, fp
 800d07c:	9e00      	ldr	r6, [sp, #0]
 800d07e:	47b0      	blx	r6
 800d080:	f8da 3000 	ldr.w	r3, [sl]
 800d084:	6821      	ldr	r1, [r4, #0]
 800d086:	1d1a      	adds	r2, r3, #4
 800d088:	f8ca 2000 	str.w	r2, [sl]
 800d08c:	f011 0f20 	tst.w	r1, #32
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	d010      	beq.n	800d0b6 <_scanf_i+0x1ce>
 800d094:	6018      	str	r0, [r3, #0]
 800d096:	68e3      	ldr	r3, [r4, #12]
 800d098:	3301      	adds	r3, #1
 800d09a:	60e3      	str	r3, [r4, #12]
 800d09c:	2000      	movs	r0, #0
 800d09e:	eba5 0509 	sub.w	r5, r5, r9
 800d0a2:	44a8      	add	r8, r5
 800d0a4:	6925      	ldr	r5, [r4, #16]
 800d0a6:	4445      	add	r5, r8
 800d0a8:	6125      	str	r5, [r4, #16]
 800d0aa:	b007      	add	sp, #28
 800d0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b0:	f04f 0800 	mov.w	r8, #0
 800d0b4:	e7ca      	b.n	800d04c <_scanf_i+0x164>
 800d0b6:	07ca      	lsls	r2, r1, #31
 800d0b8:	bf4c      	ite	mi
 800d0ba:	8018      	strhmi	r0, [r3, #0]
 800d0bc:	6018      	strpl	r0, [r3, #0]
 800d0be:	e7ea      	b.n	800d096 <_scanf_i+0x1ae>
 800d0c0:	2001      	movs	r0, #1
 800d0c2:	e7f2      	b.n	800d0aa <_scanf_i+0x1c2>
 800d0c4:	0800d598 	.word	0x0800d598
 800d0c8:	0800d251 	.word	0x0800d251
 800d0cc:	0800c909 	.word	0x0800c909
 800d0d0:	0800d95f 	.word	0x0800d95f

0800d0d4 <_read_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	4608      	mov	r0, r1
 800d0da:	4611      	mov	r1, r2
 800d0dc:	2200      	movs	r2, #0
 800d0de:	4c05      	ldr	r4, [pc, #20]	; (800d0f4 <_read_r+0x20>)
 800d0e0:	6022      	str	r2, [r4, #0]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	f7f5 ff6c 	bl	8002fc0 <_read>
 800d0e8:	1c43      	adds	r3, r0, #1
 800d0ea:	d102      	bne.n	800d0f2 <_read_r+0x1e>
 800d0ec:	6823      	ldr	r3, [r4, #0]
 800d0ee:	b103      	cbz	r3, 800d0f2 <_read_r+0x1e>
 800d0f0:	602b      	str	r3, [r5, #0]
 800d0f2:	bd38      	pop	{r3, r4, r5, pc}
 800d0f4:	200011a0 	.word	0x200011a0

0800d0f8 <__sccl>:
 800d0f8:	b570      	push	{r4, r5, r6, lr}
 800d0fa:	780b      	ldrb	r3, [r1, #0]
 800d0fc:	1e44      	subs	r4, r0, #1
 800d0fe:	2b5e      	cmp	r3, #94	; 0x5e
 800d100:	bf13      	iteet	ne
 800d102:	1c4a      	addne	r2, r1, #1
 800d104:	1c8a      	addeq	r2, r1, #2
 800d106:	784b      	ldrbeq	r3, [r1, #1]
 800d108:	2100      	movne	r1, #0
 800d10a:	bf08      	it	eq
 800d10c:	2101      	moveq	r1, #1
 800d10e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800d112:	f804 1f01 	strb.w	r1, [r4, #1]!
 800d116:	42ac      	cmp	r4, r5
 800d118:	d1fb      	bne.n	800d112 <__sccl+0x1a>
 800d11a:	b913      	cbnz	r3, 800d122 <__sccl+0x2a>
 800d11c:	3a01      	subs	r2, #1
 800d11e:	4610      	mov	r0, r2
 800d120:	bd70      	pop	{r4, r5, r6, pc}
 800d122:	f081 0401 	eor.w	r4, r1, #1
 800d126:	54c4      	strb	r4, [r0, r3]
 800d128:	1c51      	adds	r1, r2, #1
 800d12a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800d12e:	1e4e      	subs	r6, r1, #1
 800d130:	2d2d      	cmp	r5, #45	; 0x2d
 800d132:	460a      	mov	r2, r1
 800d134:	d006      	beq.n	800d144 <__sccl+0x4c>
 800d136:	2d5d      	cmp	r5, #93	; 0x5d
 800d138:	d0f1      	beq.n	800d11e <__sccl+0x26>
 800d13a:	b90d      	cbnz	r5, 800d140 <__sccl+0x48>
 800d13c:	4632      	mov	r2, r6
 800d13e:	e7ee      	b.n	800d11e <__sccl+0x26>
 800d140:	462b      	mov	r3, r5
 800d142:	e7f0      	b.n	800d126 <__sccl+0x2e>
 800d144:	780e      	ldrb	r6, [r1, #0]
 800d146:	2e5d      	cmp	r6, #93	; 0x5d
 800d148:	d0fa      	beq.n	800d140 <__sccl+0x48>
 800d14a:	42b3      	cmp	r3, r6
 800d14c:	dcf8      	bgt.n	800d140 <__sccl+0x48>
 800d14e:	3301      	adds	r3, #1
 800d150:	429e      	cmp	r6, r3
 800d152:	54c4      	strb	r4, [r0, r3]
 800d154:	dcfb      	bgt.n	800d14e <__sccl+0x56>
 800d156:	3102      	adds	r1, #2
 800d158:	e7e7      	b.n	800d12a <__sccl+0x32>

0800d15a <_strtol_l.isra.0>:
 800d15a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d15e:	4680      	mov	r8, r0
 800d160:	4689      	mov	r9, r1
 800d162:	4692      	mov	sl, r2
 800d164:	461e      	mov	r6, r3
 800d166:	460f      	mov	r7, r1
 800d168:	463d      	mov	r5, r7
 800d16a:	9808      	ldr	r0, [sp, #32]
 800d16c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d170:	f7ff fc38 	bl	800c9e4 <__locale_ctype_ptr_l>
 800d174:	4420      	add	r0, r4
 800d176:	7843      	ldrb	r3, [r0, #1]
 800d178:	f013 0308 	ands.w	r3, r3, #8
 800d17c:	d132      	bne.n	800d1e4 <_strtol_l.isra.0+0x8a>
 800d17e:	2c2d      	cmp	r4, #45	; 0x2d
 800d180:	d132      	bne.n	800d1e8 <_strtol_l.isra.0+0x8e>
 800d182:	2201      	movs	r2, #1
 800d184:	787c      	ldrb	r4, [r7, #1]
 800d186:	1cbd      	adds	r5, r7, #2
 800d188:	2e00      	cmp	r6, #0
 800d18a:	d05d      	beq.n	800d248 <_strtol_l.isra.0+0xee>
 800d18c:	2e10      	cmp	r6, #16
 800d18e:	d109      	bne.n	800d1a4 <_strtol_l.isra.0+0x4a>
 800d190:	2c30      	cmp	r4, #48	; 0x30
 800d192:	d107      	bne.n	800d1a4 <_strtol_l.isra.0+0x4a>
 800d194:	782b      	ldrb	r3, [r5, #0]
 800d196:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d19a:	2b58      	cmp	r3, #88	; 0x58
 800d19c:	d14f      	bne.n	800d23e <_strtol_l.isra.0+0xe4>
 800d19e:	2610      	movs	r6, #16
 800d1a0:	786c      	ldrb	r4, [r5, #1]
 800d1a2:	3502      	adds	r5, #2
 800d1a4:	2a00      	cmp	r2, #0
 800d1a6:	bf14      	ite	ne
 800d1a8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d1ac:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d1b0:	2700      	movs	r7, #0
 800d1b2:	fbb1 fcf6 	udiv	ip, r1, r6
 800d1b6:	4638      	mov	r0, r7
 800d1b8:	fb06 1e1c 	mls	lr, r6, ip, r1
 800d1bc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d1c0:	2b09      	cmp	r3, #9
 800d1c2:	d817      	bhi.n	800d1f4 <_strtol_l.isra.0+0x9a>
 800d1c4:	461c      	mov	r4, r3
 800d1c6:	42a6      	cmp	r6, r4
 800d1c8:	dd23      	ble.n	800d212 <_strtol_l.isra.0+0xb8>
 800d1ca:	1c7b      	adds	r3, r7, #1
 800d1cc:	d007      	beq.n	800d1de <_strtol_l.isra.0+0x84>
 800d1ce:	4584      	cmp	ip, r0
 800d1d0:	d31c      	bcc.n	800d20c <_strtol_l.isra.0+0xb2>
 800d1d2:	d101      	bne.n	800d1d8 <_strtol_l.isra.0+0x7e>
 800d1d4:	45a6      	cmp	lr, r4
 800d1d6:	db19      	blt.n	800d20c <_strtol_l.isra.0+0xb2>
 800d1d8:	2701      	movs	r7, #1
 800d1da:	fb00 4006 	mla	r0, r0, r6, r4
 800d1de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1e2:	e7eb      	b.n	800d1bc <_strtol_l.isra.0+0x62>
 800d1e4:	462f      	mov	r7, r5
 800d1e6:	e7bf      	b.n	800d168 <_strtol_l.isra.0+0xe>
 800d1e8:	2c2b      	cmp	r4, #43	; 0x2b
 800d1ea:	bf04      	itt	eq
 800d1ec:	1cbd      	addeq	r5, r7, #2
 800d1ee:	787c      	ldrbeq	r4, [r7, #1]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	e7c9      	b.n	800d188 <_strtol_l.isra.0+0x2e>
 800d1f4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d1f8:	2b19      	cmp	r3, #25
 800d1fa:	d801      	bhi.n	800d200 <_strtol_l.isra.0+0xa6>
 800d1fc:	3c37      	subs	r4, #55	; 0x37
 800d1fe:	e7e2      	b.n	800d1c6 <_strtol_l.isra.0+0x6c>
 800d200:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d204:	2b19      	cmp	r3, #25
 800d206:	d804      	bhi.n	800d212 <_strtol_l.isra.0+0xb8>
 800d208:	3c57      	subs	r4, #87	; 0x57
 800d20a:	e7dc      	b.n	800d1c6 <_strtol_l.isra.0+0x6c>
 800d20c:	f04f 37ff 	mov.w	r7, #4294967295
 800d210:	e7e5      	b.n	800d1de <_strtol_l.isra.0+0x84>
 800d212:	1c7b      	adds	r3, r7, #1
 800d214:	d108      	bne.n	800d228 <_strtol_l.isra.0+0xce>
 800d216:	2322      	movs	r3, #34	; 0x22
 800d218:	4608      	mov	r0, r1
 800d21a:	f8c8 3000 	str.w	r3, [r8]
 800d21e:	f1ba 0f00 	cmp.w	sl, #0
 800d222:	d107      	bne.n	800d234 <_strtol_l.isra.0+0xda>
 800d224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d228:	b102      	cbz	r2, 800d22c <_strtol_l.isra.0+0xd2>
 800d22a:	4240      	negs	r0, r0
 800d22c:	f1ba 0f00 	cmp.w	sl, #0
 800d230:	d0f8      	beq.n	800d224 <_strtol_l.isra.0+0xca>
 800d232:	b10f      	cbz	r7, 800d238 <_strtol_l.isra.0+0xde>
 800d234:	f105 39ff 	add.w	r9, r5, #4294967295
 800d238:	f8ca 9000 	str.w	r9, [sl]
 800d23c:	e7f2      	b.n	800d224 <_strtol_l.isra.0+0xca>
 800d23e:	2430      	movs	r4, #48	; 0x30
 800d240:	2e00      	cmp	r6, #0
 800d242:	d1af      	bne.n	800d1a4 <_strtol_l.isra.0+0x4a>
 800d244:	2608      	movs	r6, #8
 800d246:	e7ad      	b.n	800d1a4 <_strtol_l.isra.0+0x4a>
 800d248:	2c30      	cmp	r4, #48	; 0x30
 800d24a:	d0a3      	beq.n	800d194 <_strtol_l.isra.0+0x3a>
 800d24c:	260a      	movs	r6, #10
 800d24e:	e7a9      	b.n	800d1a4 <_strtol_l.isra.0+0x4a>

0800d250 <_strtol_r>:
 800d250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d252:	4c06      	ldr	r4, [pc, #24]	; (800d26c <_strtol_r+0x1c>)
 800d254:	4d06      	ldr	r5, [pc, #24]	; (800d270 <_strtol_r+0x20>)
 800d256:	6824      	ldr	r4, [r4, #0]
 800d258:	6a24      	ldr	r4, [r4, #32]
 800d25a:	2c00      	cmp	r4, #0
 800d25c:	bf08      	it	eq
 800d25e:	462c      	moveq	r4, r5
 800d260:	9400      	str	r4, [sp, #0]
 800d262:	f7ff ff7a 	bl	800d15a <_strtol_l.isra.0>
 800d266:	b003      	add	sp, #12
 800d268:	bd30      	pop	{r4, r5, pc}
 800d26a:	bf00      	nop
 800d26c:	20000028 	.word	0x20000028
 800d270:	200000f0 	.word	0x200000f0

0800d274 <__submore>:
 800d274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d278:	460c      	mov	r4, r1
 800d27a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d27c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d280:	4299      	cmp	r1, r3
 800d282:	d11b      	bne.n	800d2bc <__submore+0x48>
 800d284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d288:	f7fc fb7c 	bl	8009984 <_malloc_r>
 800d28c:	b918      	cbnz	r0, 800d296 <__submore+0x22>
 800d28e:	f04f 30ff 	mov.w	r0, #4294967295
 800d292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d29a:	63a3      	str	r3, [r4, #56]	; 0x38
 800d29c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d2a0:	6360      	str	r0, [r4, #52]	; 0x34
 800d2a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d2a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d2aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d2ae:	7043      	strb	r3, [r0, #1]
 800d2b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d2b4:	7003      	strb	r3, [r0, #0]
 800d2b6:	6020      	str	r0, [r4, #0]
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	e7ea      	b.n	800d292 <__submore+0x1e>
 800d2bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d2be:	0077      	lsls	r7, r6, #1
 800d2c0:	463a      	mov	r2, r7
 800d2c2:	f7ff fbde 	bl	800ca82 <_realloc_r>
 800d2c6:	4605      	mov	r5, r0
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d0e0      	beq.n	800d28e <__submore+0x1a>
 800d2cc:	eb00 0806 	add.w	r8, r0, r6
 800d2d0:	4601      	mov	r1, r0
 800d2d2:	4632      	mov	r2, r6
 800d2d4:	4640      	mov	r0, r8
 800d2d6:	f7fe fc55 	bl	800bb84 <memcpy>
 800d2da:	f8c4 8000 	str.w	r8, [r4]
 800d2de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d2e2:	e7e9      	b.n	800d2b8 <__submore+0x44>

0800d2e4 <__ascii_wctomb>:
 800d2e4:	b149      	cbz	r1, 800d2fa <__ascii_wctomb+0x16>
 800d2e6:	2aff      	cmp	r2, #255	; 0xff
 800d2e8:	bf8b      	itete	hi
 800d2ea:	238a      	movhi	r3, #138	; 0x8a
 800d2ec:	700a      	strbls	r2, [r1, #0]
 800d2ee:	6003      	strhi	r3, [r0, #0]
 800d2f0:	2001      	movls	r0, #1
 800d2f2:	bf88      	it	hi
 800d2f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d2f8:	4770      	bx	lr
 800d2fa:	4608      	mov	r0, r1
 800d2fc:	4770      	bx	lr

0800d2fe <_malloc_usable_size_r>:
 800d2fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d302:	1f18      	subs	r0, r3, #4
 800d304:	2b00      	cmp	r3, #0
 800d306:	bfbc      	itt	lt
 800d308:	580b      	ldrlt	r3, [r1, r0]
 800d30a:	18c0      	addlt	r0, r0, r3
 800d30c:	4770      	bx	lr
	...

0800d310 <_init>:
 800d310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d312:	bf00      	nop
 800d314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d316:	bc08      	pop	{r3}
 800d318:	469e      	mov	lr, r3
 800d31a:	4770      	bx	lr

0800d31c <_fini>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	bf00      	nop
 800d320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d322:	bc08      	pop	{r3}
 800d324:	469e      	mov	lr, r3
 800d326:	4770      	bx	lr
