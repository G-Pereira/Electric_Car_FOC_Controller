
fiat_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a54c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800a660  0800a660  0001a660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac20  0800ac20  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac20  0800ac20  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac20  0800ac20  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac20  0800ac20  0001ac20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac24  0800ac24  0001ac24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ac28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f04  200001f4  0800ae1c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010f8  0800ae1c  000210f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147f2  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003138  00000000  00000000  00034a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001260  00000000  00000000  00037b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c8  00000000  00000000  00038da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001766a  00000000  00000000  00039e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa1f  00000000  00000000  000514da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c5f2  00000000  00000000  00060ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd4eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bfc  00000000  00000000  000dd568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a644 	.word	0x0800a644

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800a644 	.word	0x0800a644

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <IMU_acc_read>:
	HAL_Delay(100);
	HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, SET);

}

void IMU_acc_read(SPI_HandleTypeDef *hspi, int *accel_data){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_ACC_DATA_START_REG;
 8000b32:	2382      	movs	r3, #130	; 0x82
 8000b34:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(CS_accel_GPIO_Port, CS_accel_Pin, RESET); //read acceloremeter data
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3c:	4836      	ldr	r0, [pc, #216]	; (8000c18 <IMU_acc_read+0xf0>)
 8000b3e:	f002 fc31 	bl	80033a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8000b42:	f107 0113 	add.w	r1, r7, #19
 8000b46:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f003 f992 	bl	8003e76 <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	e00c      	b.n	8000b72 <IMU_acc_read+0x4a>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	f107 020c 	add.w	r2, r7, #12
 8000b5e:	18d1      	adds	r1, r2, r3
 8000b60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b64:	2201      	movs	r2, #1
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f003 fab9 	bl	80040de <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	2b05      	cmp	r3, #5
 8000b76:	ddef      	ble.n	8000b58 <IMU_acc_read+0x30>
		//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(CS_accel_GPIO_Port, CS_accel_Pin, SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7e:	4826      	ldr	r0, [pc, #152]	; (8000c18 <IMU_acc_read+0xf0>)
 8000b80:	f002 fc10 	bl	80033a4 <HAL_GPIO_WritePin>
	accel_data[0]=((store_data[1]<<4)+(store_data[0]>>4));
 8000b84:	7b7b      	ldrb	r3, [r7, #13]
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	7b3a      	ldrb	r2, [r7, #12]
 8000b8a:	0912      	lsrs	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	441a      	add	r2, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	601a      	str	r2, [r3, #0]
	accel_data[1]=((store_data[3]<<4)+(store_data[2]>>4));
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	011a      	lsls	r2, r3, #4
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	091b      	lsrs	r3, r3, #4
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	440a      	add	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]
	accel_data[2]=((store_data[5]<<4)+(store_data[4]>>4));
 8000ba8:	7c7b      	ldrb	r3, [r7, #17]
 8000baa:	011a      	lsls	r2, r3, #4
 8000bac:	7c3b      	ldrb	r3, [r7, #16]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	440a      	add	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000bbc:	2064      	movs	r0, #100	; 0x64
 8000bbe:	f001 fe8b 	bl	80028d8 <HAL_Delay>

	if (accel_data[0] > 2047)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bca:	db05      	blt.n	8000bd8 <IMU_acc_read+0xb0>
	{
		accel_data[0] -= 4096;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (accel_data[1]> 2047)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	3304      	adds	r3, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000be2:	db07      	blt.n	8000bf4 <IMU_acc_read+0xcc>
	{
		accel_data[1] -= 4096;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	3304      	adds	r3, #4
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	3304      	adds	r3, #4
 8000bee:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8000bf2:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (accel_data[2] > 2047)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bfe:	db07      	blt.n	8000c10 <IMU_acc_read+0xe8>
	{
		accel_data[2] -= 4096;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	3308      	adds	r3, #8
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	3308      	adds	r3, #8
 8000c0a:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8000c0e:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010800 	.word	0x40010800

08000c1c <IMU_gyro_read>:

void IMU_gyro_read(SPI_HandleTypeDef *hspi, int *gyro_data){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_GYRO_DATA_START_REG;
 8000c26:	2382      	movs	r3, #130	; 0x82
 8000c28:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(CS_gyro_GPIO_Port, CS_gyro_Pin, RESET); //read acceloremeter data
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c30:	4833      	ldr	r0, [pc, #204]	; (8000d00 <IMU_gyro_read+0xe4>)
 8000c32:	f002 fbb7 	bl	80033a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8000c36:	f107 0113 	add.w	r1, r7, #19
 8000c3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c3e:	2201      	movs	r2, #1
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f003 f918 	bl	8003e76 <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e00c      	b.n	8000c66 <IMU_gyro_read+0x4a>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f107 020c 	add.w	r2, r7, #12
 8000c52:	18d1      	adds	r1, r2, r3
 8000c54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c58:	2201      	movs	r2, #1
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f003 fa3f 	bl	80040de <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	2b05      	cmp	r3, #5
 8000c6a:	ddef      	ble.n	8000c4c <IMU_gyro_read+0x30>
		//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(CS_gyro_GPIO_Port, CS_gyro_Pin, SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c72:	4823      	ldr	r0, [pc, #140]	; (8000d00 <IMU_gyro_read+0xe4>)
 8000c74:	f002 fb96 	bl	80033a4 <HAL_GPIO_WritePin>
	gyro_data[0]=((store_data[1]<<8)+(store_data[0]));
 8000c78:	7b7b      	ldrb	r3, [r7, #13]
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	7b3a      	ldrb	r2, [r7, #12]
 8000c7e:	441a      	add	r2, r3
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	601a      	str	r2, [r3, #0]
	gyro_data[1]=((store_data[3]<<8)+(store_data[2]));
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	021a      	lsls	r2, r3, #8
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	3304      	adds	r3, #4
 8000c90:	440a      	add	r2, r1
 8000c92:	601a      	str	r2, [r3, #0]
	gyro_data[2]=((store_data[5]<<8)+(store_data[4]));
 8000c94:	7c7b      	ldrb	r3, [r7, #17]
 8000c96:	021a      	lsls	r2, r3, #8
 8000c98:	7c3b      	ldrb	r3, [r7, #16]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	3308      	adds	r3, #8
 8000ca0:	440a      	add	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000ca4:	2064      	movs	r0, #100	; 0x64
 8000ca6:	f001 fe17 	bl	80028d8 <HAL_Delay>

	if (gyro_data[0] > 32767)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cb2:	db05      	blt.n	8000cc0 <IMU_gyro_read+0xa4>
	{
		gyro_data[0] -= 65536;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (gyro_data[1]> 32767)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cca:	db07      	blt.n	8000cdc <IMU_gyro_read+0xc0>
	{
		gyro_data[1] -= 65536;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8000cda:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (gyro_data[2] > 32767)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	3308      	adds	r3, #8
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ce6:	db07      	blt.n	8000cf8 <IMU_gyro_read+0xdc>
	{
		gyro_data[2] -= 65536;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	3308      	adds	r3, #8
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	3308      	adds	r3, #8
 8000cf2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8000cf6:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40010800 	.word	0x40010800

08000d04 <IMU_mag_read>:

void IMU_mag_read(SPI_HandleTypeDef *hspi, int *mag_data){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_MAG_DATA_START_REG;
 8000d0e:	23c2      	movs	r3, #194	; 0xc2
 8000d10:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, RESET); //read acceloremeter data
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d18:	4835      	ldr	r0, [pc, #212]	; (8000df0 <IMU_mag_read+0xec>)
 8000d1a:	f002 fb43 	bl	80033a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8000d1e:	f107 0113 	add.w	r1, r7, #19
 8000d22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d26:	2201      	movs	r2, #1
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f003 f8a4 	bl	8003e76 <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e00c      	b.n	8000d4e <IMU_mag_read+0x4a>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f107 020c 	add.w	r2, r7, #12
 8000d3a:	18d1      	adds	r1, r2, r3
 8000d3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d40:	2201      	movs	r2, #1
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f003 f9cb 	bl	80040de <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2b05      	cmp	r3, #5
 8000d52:	ddef      	ble.n	8000d34 <IMU_mag_read+0x30>
			//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5a:	4825      	ldr	r0, [pc, #148]	; (8000df0 <IMU_mag_read+0xec>)
 8000d5c:	f002 fb22 	bl	80033a4 <HAL_GPIO_WritePin>
	mag_data[0]=((store_data[1]<<5)+(store_data[0]>>3));
 8000d60:	7b7b      	ldrb	r3, [r7, #13]
 8000d62:	015b      	lsls	r3, r3, #5
 8000d64:	7b3a      	ldrb	r2, [r7, #12]
 8000d66:	08d2      	lsrs	r2, r2, #3
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	441a      	add	r2, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	601a      	str	r2, [r3, #0]
	mag_data[1]=((store_data[3]<<5)+(store_data[2]>>3));
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	015a      	lsls	r2, r3, #5
 8000d74:	7bbb      	ldrb	r3, [r7, #14]
 8000d76:	08db      	lsrs	r3, r3, #3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	3304      	adds	r3, #4
 8000d80:	440a      	add	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
	mag_data[2]=((store_data[5]<<5)+(store_data[4]>>4));
 8000d84:	7c7b      	ldrb	r3, [r7, #17]
 8000d86:	015a      	lsls	r2, r3, #5
 8000d88:	7c3b      	ldrb	r3, [r7, #16]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4619      	mov	r1, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	3308      	adds	r3, #8
 8000d94:	440a      	add	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]

	if (mag_data[0] > 4095)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000da0:	db05      	blt.n	8000dae <IMU_mag_read+0xaa>
	{
		mag_data[0] -= 8192;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (mag_data[1]> 4095)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	3304      	adds	r3, #4
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000db8:	db07      	blt.n	8000dca <IMU_mag_read+0xc6>
	{
		mag_data[1] -= 8192;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8000dc8:	601a      	str	r2, [r3, #0]
			//accel_data[1] = accel_data[1]*0.00098;
	}
	if (mag_data[2] > 4095)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3308      	adds	r3, #8
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dd4:	db07      	blt.n	8000de6 <IMU_mag_read+0xe2>
	{
		mag_data[2] -= 8192;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	3308      	adds	r3, #8
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	3308      	adds	r3, #8
 8000de0:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8000de4:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40010800 	.word	0x40010800
 8000df4:	00000000 	.word	0x00000000

08000df8 <motorSpeed>:

#include "main.h"
#include "encoderMode.h"


float motorSpeed (uint32_t *cnt1, uint32_t *tick, TIM_HandleTypeDef htim3){
 8000df8:	b082      	sub	sp, #8
 8000dfa:	b590      	push	{r4, r7, lr}
 8000dfc:	b087      	sub	sp, #28
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
 8000e04:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000e08:	e881 000c 	stmia.w	r1, {r2, r3}

	uint32_t cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 8000e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	613b      	str	r3, [r7, #16]
	int diff = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]

	printf("cnt1 = %lu counter2 = %lu\n",*cnt1,cnt2);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4832      	ldr	r0, [pc, #200]	; (8000ee8 <motorSpeed+0xf0>)
 8000e20:	f007 fad4 	bl	80083cc <iprintf>

	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8000e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0310 	and.w	r3, r3, #16
 8000e2c:	2b10      	cmp	r3, #16
 8000e2e:	d113      	bne.n	8000e58 <motorSpeed+0x60>
		if(cnt2 < *cnt1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d205      	bcs.n	8000e46 <motorSpeed+0x4e>
			diff = *cnt1 - cnt2;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e01b      	b.n	8000e7e <motorSpeed+0x86>
		else
			diff = (65535 - cnt2) + *cnt1;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e52:	33ff      	adds	r3, #255	; 0xff
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	e012      	b.n	8000e7e <motorSpeed+0x86>
	} else {
		if(cnt2 > *cnt1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d905      	bls.n	8000e6e <motorSpeed+0x76>
			diff = cnt2 - *cnt1;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e007      	b.n	8000e7e <motorSpeed+0x86>
		else
			diff = (65535 - *cnt1) + cnt2;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e7a:	33ff      	adds	r3, #255	; 0xff
 8000e7c:	617b      	str	r3, [r7, #20]
	}



	printf("diff = %d\n", diff);
 8000e7e:	6979      	ldr	r1, [r7, #20]
 8000e80:	481a      	ldr	r0, [pc, #104]	; (8000eec <motorSpeed+0xf4>)
 8000e82:	f007 faa3 	bl	80083cc <iprintf>
	float speed = ((diff/8)*60)/0.02;  // change when sysTimer configured
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da00      	bge.n	8000e8e <motorSpeed+0x96>
 8000e8c:	3307      	adds	r3, #7
 8000e8e:	10db      	asrs	r3, r3, #3
 8000e90:	461a      	mov	r2, r3
 8000e92:	4613      	mov	r3, r2
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fab2 	bl	8000404 <__aeabi_i2d>
 8000ea0:	a30f      	add	r3, pc, #60	; (adr r3, 8000ee0 <motorSpeed+0xe8>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fc41 	bl	800072c <__aeabi_ddiv>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460c      	mov	r4, r1
 8000eae:	4618      	mov	r0, r3
 8000eb0:	4621      	mov	r1, r4
 8000eb2:	f7ff fde9 	bl	8000a88 <__aeabi_d2f>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60fb      	str	r3, [r7, #12]

	*tick = HAL_GetTick();
 8000eba:	f001 fd03 	bl	80028c4 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	601a      	str	r2, [r3, #0]
	*cnt1 = cnt2;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]
	//printf("aqui %f\n",speed);
	return speed;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	371c      	adds	r7, #28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ed6:	b002      	add	sp, #8
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w
 8000ee0:	47ae147b 	.word	0x47ae147b
 8000ee4:	3f947ae1 	.word	0x3f947ae1
 8000ee8:	0800a660 	.word	0x0800a660
 8000eec:	0800a67c 	.word	0x0800a67c

08000ef0 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efa:	4802      	ldr	r0, [pc, #8]	; (8000f04 <SELECT+0x14>)
 8000efc:	f002 fa52 	bl	80033a4 <HAL_GPIO_WritePin>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40010c00 	.word	0x40010c00

08000f08 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f12:	4802      	ldr	r0, [pc, #8]	; (8000f1c <DESELECT+0x14>)
 8000f14:	f002 fa46 	bl	80033a4 <HAL_GPIO_WritePin>
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40010c00 	.word	0x40010c00

08000f20 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000f2a:	bf00      	nop
 8000f2c:	4808      	ldr	r0, [pc, #32]	; (8000f50 <SPI_TxByte+0x30>)
 8000f2e:	f003 fb81 	bl	8004634 <HAL_SPI_GetState>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d1f9      	bne.n	8000f2c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000f38:	1df9      	adds	r1, r7, #7
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4803      	ldr	r0, [pc, #12]	; (8000f50 <SPI_TxByte+0x30>)
 8000f42:	f002 ff98 	bl	8003e76 <HAL_SPI_Transmit>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000250 	.word	0x20000250

08000f54 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000f5a:	23ff      	movs	r3, #255	; 0xff
 8000f5c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000f62:	bf00      	nop
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <SPI_RxByte+0x38>)
 8000f66:	f003 fb65 	bl	8004634 <HAL_SPI_GetState>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d1f9      	bne.n	8000f64 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000f70:	1dba      	adds	r2, r7, #6
 8000f72:	1df9      	adds	r1, r7, #7
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <SPI_RxByte+0x38>)
 8000f7e:	f003 f9b7 	bl	80042f0 <HAL_SPI_TransmitReceive>
  
  return data;
 8000f82:	79bb      	ldrb	r3, [r7, #6]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000250 	.word	0x20000250

08000f90 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000f98:	f7ff ffdc 	bl	8000f54 <SPI_RxByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	701a      	strb	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <SD_ReadyWait+0x34>)
 8000fb4:	2232      	movs	r2, #50	; 0x32
 8000fb6:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000fb8:	f7ff ffcc 	bl	8000f54 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000fbc:	f7ff ffca 	bl	8000f54 <SPI_RxByte>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2bff      	cmp	r3, #255	; 0xff
 8000fc8:	d004      	beq.n	8000fd4 <SD_ReadyWait+0x28>
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SD_ReadyWait+0x34>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f3      	bne.n	8000fbc <SD_ReadyWait+0x10>
  
  return res;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000c88 	.word	0x20000c88

08000fe4 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000fea:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000fee:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000ff0:	f7ff ff8a 	bl	8000f08 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	e005      	b.n	8001006 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000ffa:	20ff      	movs	r0, #255	; 0xff
 8000ffc:	f7ff ff90 	bl	8000f20 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	3301      	adds	r3, #1
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	2b09      	cmp	r3, #9
 800100a:	ddf6      	ble.n	8000ffa <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 800100c:	f7ff ff70 	bl	8000ef0 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8001010:	2340      	movs	r3, #64	; 0x40
 8001012:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001024:	2395      	movs	r3, #149	; 0x95
 8001026:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e009      	b.n	8001042 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800102e:	1d3a      	adds	r2, r7, #4
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff72 	bl	8000f20 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3301      	adds	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2b05      	cmp	r3, #5
 8001046:	ddf2      	ble.n	800102e <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8001048:	e002      	b.n	8001050 <SD_PowerOn+0x6c>
  {
    Count--;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3b01      	subs	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001050:	f7ff ff80 	bl	8000f54 <SPI_RxByte>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d002      	beq.n	8001060 <SD_PowerOn+0x7c>
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f4      	bne.n	800104a <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001060:	f7ff ff52 	bl	8000f08 <DESELECT>
  SPI_TxByte(0XFF);
 8001064:	20ff      	movs	r0, #255	; 0xff
 8001066:	f7ff ff5b 	bl	8000f20 <SPI_TxByte>
  
  PowerFlag = 1;
 800106a:	4b03      	ldr	r3, [pc, #12]	; (8001078 <SD_PowerOn+0x94>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000211 	.word	0x20000211

0800107c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <SD_PowerOff+0x14>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000211 	.word	0x20000211

08001094 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <SD_CheckPower+0x10>)
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000211 	.word	0x20000211

080010a8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <SD_RxDataBlock+0x68>)
 80010b4:	220a      	movs	r2, #10
 80010b6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 80010b8:	f7ff ff4c 	bl	8000f54 <SPI_RxByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2bff      	cmp	r3, #255	; 0xff
 80010c4:	d104      	bne.n	80010d0 <SD_RxDataBlock+0x28>
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <SD_RxDataBlock+0x68>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f3      	bne.n	80010b8 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2bfe      	cmp	r3, #254	; 0xfe
 80010d4:	d001      	beq.n	80010da <SD_RxDataBlock+0x32>
    return FALSE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e016      	b.n	8001108 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff55 	bl	8000f90 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff4f 	bl	8000f90 <SPI_RxBytePtr>
  } while(btr -= 2);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3b02      	subs	r3, #2
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1ed      	bne.n	80010da <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80010fe:	f7ff ff29 	bl	8000f54 <SPI_RxByte>
  SPI_RxByte();
 8001102:	f7ff ff27 	bl	8000f54 <SPI_RxByte>
  
  return TRUE;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000c89 	.word	0x20000c89

08001114 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001124:	f7ff ff42 	bl	8000fac <SD_ReadyWait>
 8001128:	4603      	mov	r3, r0
 800112a:	2bff      	cmp	r3, #255	; 0xff
 800112c:	d001      	beq.n	8001132 <SD_TxDataBlock+0x1e>
    return FALSE;
 800112e:	2300      	movs	r3, #0
 8001130:	e040      	b.n	80011b4 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fef3 	bl	8000f20 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	2bfd      	cmp	r3, #253	; 0xfd
 800113e:	d031      	beq.n	80011a4 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fee7 	bl	8000f20 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fee0 	bl	8000f20 <SPI_TxByte>
    } while (--wc);
 8001160:	7bbb      	ldrb	r3, [r7, #14]
 8001162:	3b01      	subs	r3, #1
 8001164:	73bb      	strb	r3, [r7, #14]
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1eb      	bne.n	8001144 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800116c:	f7ff fef2 	bl	8000f54 <SPI_RxByte>
    SPI_RxByte();
 8001170:	f7ff fef0 	bl	8000f54 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001174:	e00b      	b.n	800118e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001176:	f7ff feed 	bl	8000f54 <SPI_RxByte>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	2b05      	cmp	r3, #5
 8001186:	d006      	beq.n	8001196 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001188:	7b7b      	ldrb	r3, [r7, #13]
 800118a:	3301      	adds	r3, #1
 800118c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	2b40      	cmp	r3, #64	; 0x40
 8001192:	d9f0      	bls.n	8001176 <SD_TxDataBlock+0x62>
 8001194:	e000      	b.n	8001198 <SD_TxDataBlock+0x84>
        break;
 8001196:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001198:	bf00      	nop
 800119a:	f7ff fedb 	bl	8000f54 <SPI_RxByte>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0fa      	beq.n	800119a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d101      	bne.n	80011b2 <SD_TxDataBlock+0x9e>
    return TRUE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80011c8:	f7ff fef0 	bl	8000fac <SD_ReadyWait>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2bff      	cmp	r3, #255	; 0xff
 80011d0:	d001      	beq.n	80011d6 <SD_SendCmd+0x1a>
    return 0xFF;
 80011d2:	23ff      	movs	r3, #255	; 0xff
 80011d4:	e040      	b.n	8001258 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fea1 	bl	8000f20 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	0e1b      	lsrs	r3, r3, #24
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fe9b 	bl	8000f20 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	0c1b      	lsrs	r3, r3, #16
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fe95 	bl	8000f20 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fe8f 	bl	8000f20 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe8a 	bl	8000f20 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b40      	cmp	r3, #64	; 0x40
 8001214:	d101      	bne.n	800121a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001216:	2395      	movs	r3, #149	; 0x95
 8001218:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b48      	cmp	r3, #72	; 0x48
 800121e:	d101      	bne.n	8001224 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001220:	2387      	movs	r3, #135	; 0x87
 8001222:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fe7a 	bl	8000f20 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b4c      	cmp	r3, #76	; 0x4c
 8001230:	d101      	bne.n	8001236 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001232:	f7ff fe8f 	bl	8000f54 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001236:	230a      	movs	r3, #10
 8001238:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800123a:	f7ff fe8b 	bl	8000f54 <SPI_RxByte>
 800123e:	4603      	mov	r3, r0
 8001240:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001242:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001246:	2b00      	cmp	r3, #0
 8001248:	da05      	bge.n	8001256 <SD_SendCmd+0x9a>
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	3b01      	subs	r3, #1
 800124e:	73bb      	strb	r3, [r7, #14]
 8001250:	7bbb      	ldrb	r3, [r7, #14]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f1      	bne.n	800123a <SD_SendCmd+0x7e>
  
  return res;
 8001256:	7b7b      	ldrb	r3, [r7, #13]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001270:	2301      	movs	r3, #1
 8001272:	e0d5      	b.n	8001420 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001274:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <SD_disk_initialize+0x1c8>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <SD_disk_initialize+0x2a>
    return Stat;        
 8001282:	4b69      	ldr	r3, [pc, #420]	; (8001428 <SD_disk_initialize+0x1c8>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	e0ca      	b.n	8001420 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800128a:	f7ff feab 	bl	8000fe4 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800128e:	f7ff fe2f 	bl	8000ef0 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001296:	2100      	movs	r1, #0
 8001298:	2040      	movs	r0, #64	; 0x40
 800129a:	f7ff ff8f 	bl	80011bc <SD_SendCmd>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f040 80a5 	bne.w	80013f0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80012a6:	4b61      	ldr	r3, [pc, #388]	; (800142c <SD_disk_initialize+0x1cc>)
 80012a8:	2264      	movs	r2, #100	; 0x64
 80012aa:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80012ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012b0:	2048      	movs	r0, #72	; 0x48
 80012b2:	f7ff ff83 	bl	80011bc <SD_SendCmd>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d158      	bne.n	800136e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e00c      	b.n	80012dc <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80012c2:	7bfc      	ldrb	r4, [r7, #15]
 80012c4:	f7ff fe46 	bl	8000f54 <SPI_RxByte>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4423      	add	r3, r4
 80012d2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	3301      	adds	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d9ef      	bls.n	80012c2 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80012e2:	7abb      	ldrb	r3, [r7, #10]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	f040 8083 	bne.w	80013f0 <SD_disk_initialize+0x190>
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	2baa      	cmp	r3, #170	; 0xaa
 80012ee:	d17f      	bne.n	80013f0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80012f0:	2100      	movs	r1, #0
 80012f2:	2077      	movs	r0, #119	; 0x77
 80012f4:	f7ff ff62 	bl	80011bc <SD_SendCmd>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d807      	bhi.n	800130e <SD_disk_initialize+0xae>
 80012fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001302:	2069      	movs	r0, #105	; 0x69
 8001304:	f7ff ff5a 	bl	80011bc <SD_SendCmd>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <SD_disk_initialize+0x1cc>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1eb      	bne.n	80012f0 <SD_disk_initialize+0x90>
 8001318:	e000      	b.n	800131c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800131a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <SD_disk_initialize+0x1cc>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d064      	beq.n	80013f0 <SD_disk_initialize+0x190>
 8001326:	2100      	movs	r1, #0
 8001328:	207a      	movs	r0, #122	; 0x7a
 800132a:	f7ff ff47 	bl	80011bc <SD_SendCmd>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d15d      	bne.n	80013f0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e00c      	b.n	8001354 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800133a:	7bfc      	ldrb	r4, [r7, #15]
 800133c:	f7ff fe0a 	bl	8000f54 <SPI_RxByte>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4423      	add	r3, r4
 800134a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	3301      	adds	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	2b03      	cmp	r3, #3
 8001358:	d9ef      	bls.n	800133a <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800135a:	7a3b      	ldrb	r3, [r7, #8]
 800135c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SD_disk_initialize+0x108>
 8001364:	2306      	movs	r3, #6
 8001366:	e000      	b.n	800136a <SD_disk_initialize+0x10a>
 8001368:	2302      	movs	r3, #2
 800136a:	73bb      	strb	r3, [r7, #14]
 800136c:	e040      	b.n	80013f0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800136e:	2100      	movs	r1, #0
 8001370:	2077      	movs	r0, #119	; 0x77
 8001372:	f7ff ff23 	bl	80011bc <SD_SendCmd>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d808      	bhi.n	800138e <SD_disk_initialize+0x12e>
 800137c:	2100      	movs	r1, #0
 800137e:	2069      	movs	r0, #105	; 0x69
 8001380:	f7ff ff1c 	bl	80011bc <SD_SendCmd>
 8001384:	4603      	mov	r3, r0
 8001386:	2b01      	cmp	r3, #1
 8001388:	d801      	bhi.n	800138e <SD_disk_initialize+0x12e>
 800138a:	2302      	movs	r3, #2
 800138c:	e000      	b.n	8001390 <SD_disk_initialize+0x130>
 800138e:	2301      	movs	r3, #1
 8001390:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001392:	7bbb      	ldrb	r3, [r7, #14]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d10e      	bne.n	80013b6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001398:	2100      	movs	r1, #0
 800139a:	2077      	movs	r0, #119	; 0x77
 800139c:	f7ff ff0e 	bl	80011bc <SD_SendCmd>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d80e      	bhi.n	80013c4 <SD_disk_initialize+0x164>
 80013a6:	2100      	movs	r1, #0
 80013a8:	2069      	movs	r0, #105	; 0x69
 80013aa:	f7ff ff07 	bl	80011bc <SD_SendCmd>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d107      	bne.n	80013c4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80013b4:	e00d      	b.n	80013d2 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80013b6:	2100      	movs	r1, #0
 80013b8:	2041      	movs	r0, #65	; 0x41
 80013ba:	f7ff feff 	bl	80011bc <SD_SendCmd>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <SD_disk_initialize+0x1cc>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1e1      	bne.n	8001392 <SD_disk_initialize+0x132>
 80013ce:	e000      	b.n	80013d2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80013d0:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <SD_disk_initialize+0x1cc>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <SD_disk_initialize+0x18c>
 80013dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e0:	2050      	movs	r0, #80	; 0x50
 80013e2:	f7ff feeb 	bl	80011bc <SD_SendCmd>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80013f0:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <SD_disk_initialize+0x1d0>)
 80013f2:	7bbb      	ldrb	r3, [r7, #14]
 80013f4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80013f6:	f7ff fd87 	bl	8000f08 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80013fa:	f7ff fdab 	bl	8000f54 <SPI_RxByte>
  
  if (type) 
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <SD_disk_initialize+0x1c8>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SD_disk_initialize+0x1c8>)
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	e001      	b.n	800141a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001416:	f7ff fe31 	bl	800107c <SD_PowerOff>
  }
  
  return Stat;
 800141a:	4b03      	ldr	r3, [pc, #12]	; (8001428 <SD_disk_initialize+0x1c8>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	20000000 	.word	0x20000000
 800142c:	20000c89 	.word	0x20000c89
 8001430:	20000210 	.word	0x20000210

08001434 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001444:	2301      	movs	r3, #1
 8001446:	e002      	b.n	800144e <SD_disk_status+0x1a>
  
  return Stat;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <SD_disk_status+0x24>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000000 	.word	0x20000000

0800145c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	4603      	mov	r3, r0
 800146a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <SD_disk_read+0x1c>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <SD_disk_read+0x20>
    return RES_PARERR;
 8001478:	2304      	movs	r3, #4
 800147a:	e051      	b.n	8001520 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <SD_disk_read+0xcc>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800148a:	2303      	movs	r3, #3
 800148c:	e048      	b.n	8001520 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <SD_disk_read+0xd0>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	025b      	lsls	r3, r3, #9
 800149e:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80014a0:	f7ff fd26 	bl	8000ef0 <SELECT>
  
  if (count == 1) 
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d111      	bne.n	80014ce <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	2051      	movs	r0, #81	; 0x51
 80014ae:	f7ff fe85 	bl	80011bc <SD_SendCmd>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d129      	bne.n	800150c <SD_disk_read+0xb0>
 80014b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014bc:	68b8      	ldr	r0, [r7, #8]
 80014be:	f7ff fdf3 	bl	80010a8 <SD_RxDataBlock>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d021      	beq.n	800150c <SD_disk_read+0xb0>
      count = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	e01e      	b.n	800150c <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	2052      	movs	r0, #82	; 0x52
 80014d2:	f7ff fe73 	bl	80011bc <SD_SendCmd>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d117      	bne.n	800150c <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80014dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e0:	68b8      	ldr	r0, [r7, #8]
 80014e2:	f7ff fde1 	bl	80010a8 <SD_RxDataBlock>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00a      	beq.n	8001502 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014f2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ed      	bne.n	80014dc <SD_disk_read+0x80>
 8001500:	e000      	b.n	8001504 <SD_disk_read+0xa8>
          break;
 8001502:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001504:	2100      	movs	r1, #0
 8001506:	204c      	movs	r0, #76	; 0x4c
 8001508:	f7ff fe58 	bl	80011bc <SD_SendCmd>
    }
  }
  
  DESELECT();
 800150c:	f7ff fcfc 	bl	8000f08 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001510:	f7ff fd20 	bl	8000f54 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	bf14      	ite	ne
 800151a:	2301      	movne	r3, #1
 800151c:	2300      	moveq	r3, #0
 800151e:	b2db      	uxtb	r3, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	20000210 	.word	0x20000210

08001530 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <SD_disk_write+0x1c>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <SD_disk_write+0x20>
    return RES_PARERR;
 800154c:	2304      	movs	r3, #4
 800154e:	e06b      	b.n	8001628 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001550:	4b37      	ldr	r3, [pc, #220]	; (8001630 <SD_disk_write+0x100>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800155e:	2303      	movs	r3, #3
 8001560:	e062      	b.n	8001628 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <SD_disk_write+0x100>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001570:	2302      	movs	r3, #2
 8001572:	e059      	b.n	8001628 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <SD_disk_write+0x104>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	025b      	lsls	r3, r3, #9
 8001584:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001586:	f7ff fcb3 	bl	8000ef0 <SELECT>
  
  if (count == 1) 
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d110      	bne.n	80015b2 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	2058      	movs	r0, #88	; 0x58
 8001594:	f7ff fe12 	bl	80011bc <SD_SendCmd>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d13a      	bne.n	8001614 <SD_disk_write+0xe4>
 800159e:	21fe      	movs	r1, #254	; 0xfe
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f7ff fdb7 	bl	8001114 <SD_TxDataBlock>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d033      	beq.n	8001614 <SD_disk_write+0xe4>
      count = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	e030      	b.n	8001614 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <SD_disk_write+0x104>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80015be:	2100      	movs	r1, #0
 80015c0:	2077      	movs	r0, #119	; 0x77
 80015c2:	f7ff fdfb 	bl	80011bc <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	2057      	movs	r0, #87	; 0x57
 80015ca:	f7ff fdf7 	bl	80011bc <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	2059      	movs	r0, #89	; 0x59
 80015d2:	f7ff fdf3 	bl	80011bc <SD_SendCmd>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d11b      	bne.n	8001614 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80015dc:	21fc      	movs	r1, #252	; 0xfc
 80015de:	68b8      	ldr	r0, [r7, #8]
 80015e0:	f7ff fd98 	bl	8001114 <SD_TxDataBlock>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00a      	beq.n	8001600 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015f0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1ee      	bne.n	80015dc <SD_disk_write+0xac>
 80015fe:	e000      	b.n	8001602 <SD_disk_write+0xd2>
          break;
 8001600:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001602:	21fd      	movs	r1, #253	; 0xfd
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fd85 	bl	8001114 <SD_TxDataBlock>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001614:	f7ff fc78 	bl	8000f08 <DESELECT>
  SPI_RxByte();
 8001618:	f7ff fc9c 	bl	8000f54 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf14      	ite	ne
 8001622:	2301      	movne	r3, #1
 8001624:	2300      	moveq	r3, #0
 8001626:	b2db      	uxtb	r3, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000000 	.word	0x20000000
 8001634:	20000210 	.word	0x20000210

08001638 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b08b      	sub	sp, #44	; 0x2c
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	603a      	str	r2, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	460b      	mov	r3, r1
 8001646:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001652:	2304      	movs	r3, #4
 8001654:	e117      	b.n	8001886 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	2b05      	cmp	r3, #5
 8001660:	d126      	bne.n	80016b0 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d00e      	beq.n	8001688 <SD_disk_ioctl+0x50>
 800166a:	2b02      	cmp	r3, #2
 800166c:	d012      	beq.n	8001694 <SD_disk_ioctl+0x5c>
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11a      	bne.n	80016a8 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8001672:	f7ff fd0f 	bl	8001094 <SD_CheckPower>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 800167c:	f7ff fcfe 	bl	800107c <SD_PowerOff>
      res = RES_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001686:	e0fc      	b.n	8001882 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8001688:	f7ff fcac 	bl	8000fe4 <SD_PowerOn>
      res = RES_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001692:	e0f6      	b.n	8001882 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	1c5c      	adds	r4, r3, #1
 8001698:	f7ff fcfc 	bl	8001094 <SD_CheckPower>
 800169c:	4603      	mov	r3, r0
 800169e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016a6:	e0ec      	b.n	8001882 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 80016a8:	2304      	movs	r3, #4
 80016aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016ae:	e0e8      	b.n	8001882 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80016b0:	4b77      	ldr	r3, [pc, #476]	; (8001890 <SD_disk_ioctl+0x258>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80016be:	2303      	movs	r3, #3
 80016c0:	e0e1      	b.n	8001886 <SD_disk_ioctl+0x24e>
    
    SELECT();
 80016c2:	f7ff fc15 	bl	8000ef0 <SELECT>
    
    switch (ctrl) 
 80016c6:	79bb      	ldrb	r3, [r7, #6]
 80016c8:	2b0d      	cmp	r3, #13
 80016ca:	f200 80cb 	bhi.w	8001864 <SD_disk_ioctl+0x22c>
 80016ce:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <SD_disk_ioctl+0x9c>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	080017cf 	.word	0x080017cf
 80016d8:	0800170d 	.word	0x0800170d
 80016dc:	080017bf 	.word	0x080017bf
 80016e0:	08001865 	.word	0x08001865
 80016e4:	08001865 	.word	0x08001865
 80016e8:	08001865 	.word	0x08001865
 80016ec:	08001865 	.word	0x08001865
 80016f0:	08001865 	.word	0x08001865
 80016f4:	08001865 	.word	0x08001865
 80016f8:	08001865 	.word	0x08001865
 80016fc:	08001865 	.word	0x08001865
 8001700:	080017e1 	.word	0x080017e1
 8001704:	08001805 	.word	0x08001805
 8001708:	08001829 	.word	0x08001829
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 800170c:	2100      	movs	r1, #0
 800170e:	2049      	movs	r0, #73	; 0x49
 8001710:	f7ff fd54 	bl	80011bc <SD_SendCmd>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 80a8 	bne.w	800186c <SD_disk_ioctl+0x234>
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2110      	movs	r1, #16
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fcc0 	bl	80010a8 <SD_RxDataBlock>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 809e 	beq.w	800186c <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8001730:	7b3b      	ldrb	r3, [r7, #12]
 8001732:	099b      	lsrs	r3, r3, #6
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d10e      	bne.n	8001758 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800173a:	7d7b      	ldrb	r3, [r7, #21]
 800173c:	b29a      	uxth	r2, r3
 800173e:	7d3b      	ldrb	r3, [r7, #20]
 8001740:	b29b      	uxth	r3, r3
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b29b      	uxth	r3, r3
 8001746:	4413      	add	r3, r2
 8001748:	b29b      	uxth	r3, r3
 800174a:	3301      	adds	r3, #1
 800174c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800174e:	8bfb      	ldrh	r3, [r7, #30]
 8001750:	029a      	lsls	r2, r3, #10
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e02e      	b.n	80017b6 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001758:	7c7b      	ldrb	r3, [r7, #17]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	b2da      	uxtb	r2, r3
 8001760:	7dbb      	ldrb	r3, [r7, #22]
 8001762:	09db      	lsrs	r3, r3, #7
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4413      	add	r3, r2
 8001768:	b2da      	uxtb	r2, r3
 800176a:	7d7b      	ldrb	r3, [r7, #21]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f003 0306 	and.w	r3, r3, #6
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4413      	add	r3, r2
 8001778:	b2db      	uxtb	r3, r3
 800177a:	3302      	adds	r3, #2
 800177c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001780:	7d3b      	ldrb	r3, [r7, #20]
 8001782:	099b      	lsrs	r3, r3, #6
 8001784:	b2db      	uxtb	r3, r3
 8001786:	b29a      	uxth	r2, r3
 8001788:	7cfb      	ldrb	r3, [r7, #19]
 800178a:	b29b      	uxth	r3, r3
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	b29b      	uxth	r3, r3
 8001790:	4413      	add	r3, r2
 8001792:	b29a      	uxth	r2, r3
 8001794:	7cbb      	ldrb	r3, [r7, #18]
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	b29b      	uxth	r3, r3
 800179a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3301      	adds	r3, #1
 80017a6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80017a8:	8bfa      	ldrh	r2, [r7, #30]
 80017aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017ae:	3b09      	subs	r3, #9
 80017b0:	409a      	lsls	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80017bc:	e056      	b.n	800186c <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017cc:	e055      	b.n	800187a <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80017ce:	f7ff fbed 	bl	8000fac <SD_ReadyWait>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2bff      	cmp	r3, #255	; 0xff
 80017d6:	d14b      	bne.n	8001870 <SD_disk_ioctl+0x238>
        res = RES_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017de:	e047      	b.n	8001870 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80017e0:	2100      	movs	r1, #0
 80017e2:	2049      	movs	r0, #73	; 0x49
 80017e4:	f7ff fcea 	bl	80011bc <SD_SendCmd>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d142      	bne.n	8001874 <SD_disk_ioctl+0x23c>
 80017ee:	2110      	movs	r1, #16
 80017f0:	6a38      	ldr	r0, [r7, #32]
 80017f2:	f7ff fc59 	bl	80010a8 <SD_RxDataBlock>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d03b      	beq.n	8001874 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001802:	e037      	b.n	8001874 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001804:	2100      	movs	r1, #0
 8001806:	204a      	movs	r0, #74	; 0x4a
 8001808:	f7ff fcd8 	bl	80011bc <SD_SendCmd>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d132      	bne.n	8001878 <SD_disk_ioctl+0x240>
 8001812:	2110      	movs	r1, #16
 8001814:	6a38      	ldr	r0, [r7, #32]
 8001816:	f7ff fc47 	bl	80010a8 <SD_RxDataBlock>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d02b      	beq.n	8001878 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001826:	e027      	b.n	8001878 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001828:	2100      	movs	r1, #0
 800182a:	207a      	movs	r0, #122	; 0x7a
 800182c:	f7ff fcc6 	bl	80011bc <SD_SendCmd>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800183c:	e00b      	b.n	8001856 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 800183e:	6a3c      	ldr	r4, [r7, #32]
 8001840:	1c63      	adds	r3, r4, #1
 8001842:	623b      	str	r3, [r7, #32]
 8001844:	f7ff fb86 	bl	8000f54 <SPI_RxByte>
 8001848:	4603      	mov	r3, r0
 800184a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800184c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001850:	3301      	adds	r3, #1
 8001852:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001856:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800185a:	2b03      	cmp	r3, #3
 800185c:	d9ef      	bls.n	800183e <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001864:	2304      	movs	r3, #4
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800186a:	e006      	b.n	800187a <SD_disk_ioctl+0x242>
      break;
 800186c:	bf00      	nop
 800186e:	e004      	b.n	800187a <SD_disk_ioctl+0x242>
      break;
 8001870:	bf00      	nop
 8001872:	e002      	b.n	800187a <SD_disk_ioctl+0x242>
      break;
 8001874:	bf00      	nop
 8001876:	e000      	b.n	800187a <SD_disk_ioctl+0x242>
      break;
 8001878:	bf00      	nop
    }
    
    DESELECT();
 800187a:	f7ff fb45 	bl	8000f08 <DESELECT>
    SPI_RxByte();
 800187e:	f7ff fb69 	bl	8000f54 <SPI_RxByte>
  }
  
  return res;
 8001882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001886:	4618      	mov	r0, r3
 8001888:	372c      	adds	r7, #44	; 0x2c
 800188a:	46bd      	mov	sp, r7
 800188c:	bd90      	pop	{r4, r7, pc}
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000

08001894 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800189c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d013      	beq.n	80018d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80018ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80018b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00b      	beq.n	80018d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80018bc:	e000      	b.n	80018c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80018be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80018c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f9      	beq.n	80018be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80018ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018e4:	b0a7      	sub	sp, #156	; 0x9c
 80018e6:	af0e      	add	r7, sp, #56	; 0x38
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e8:	f000 ff94 	bl	8002814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ec:	f000 fa34 	bl	8001d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f0:	f000 fb9e 	bl	8002030 <MX_GPIO_Init>
  MX_ADC1_Init();
 80018f4:	f000 fa90 	bl	8001e18 <MX_ADC1_Init>
  MX_CAN_Init();
 80018f8:	f000 fadc 	bl	8001eb4 <MX_CAN_Init>
  MX_FATFS_Init();
 80018fc:	f003 f910 	bl	8004b20 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001900:	f000 fb0c 	bl	8001f1c <MX_SPI2_Init>
  MX_TIM3_Init();
 8001904:	f000 fb40 	bl	8001f88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello!\n");
 8001908:	48bb      	ldr	r0, [pc, #748]	; (8001bf8 <main+0x318>)
 800190a:	f006 fde7 	bl	80084dc <puts>
  HAL_GPIO_WritePin(CS_accel_GPIO_Port, CS_accel_Pin, SET);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	48b9      	ldr	r0, [pc, #740]	; (8001bfc <main+0x31c>)
 8001916:	f001 fd45 	bl	80033a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_gyro_GPIO_Port, CS_gyro_Pin, SET);
 800191a:	2201      	movs	r2, #1
 800191c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001920:	48b6      	ldr	r0, [pc, #728]	; (8001bfc <main+0x31c>)
 8001922:	f001 fd3f 	bl	80033a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, SET);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192c:	48b3      	ldr	r0, [pc, #716]	; (8001bfc <main+0x31c>)
 800192e:	f001 fd39 	bl	80033a4 <HAL_GPIO_WritePin>
  fresult=mount_card (&fs);
 8001932:	48b3      	ldr	r0, [pc, #716]	; (8001c00 <main+0x320>)
 8001934:	f000 fc62 	bl	80021fc <mount_card>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	4bb1      	ldr	r3, [pc, #708]	; (8001c04 <main+0x324>)
 800193e:	701a      	strb	r2, [r3, #0]
  card_capacity(&free_space, &total);
 8001940:	49b1      	ldr	r1, [pc, #708]	; (8001c08 <main+0x328>)
 8001942:	48b2      	ldr	r0, [pc, #712]	; (8001c0c <main+0x32c>)
 8001944:	f000 fc6a 	bl	800221c <card_capacity>
  printf("Hello!\nFree Space: %10lu KB", free_space/2);
 8001948:	4bb0      	ldr	r3, [pc, #704]	; (8001c0c <main+0x32c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	085b      	lsrs	r3, r3, #1
 800194e:	4619      	mov	r1, r3
 8001950:	48af      	ldr	r0, [pc, #700]	; (8001c10 <main+0x330>)
 8001952:	f006 fd3b 	bl	80083cc <iprintf>
  fresult=create_file ("enc.txt", "OLE OLE OLE", &fil, &bw);
 8001956:	4baf      	ldr	r3, [pc, #700]	; (8001c14 <main+0x334>)
 8001958:	4aaf      	ldr	r2, [pc, #700]	; (8001c18 <main+0x338>)
 800195a:	49b0      	ldr	r1, [pc, #704]	; (8001c1c <main+0x33c>)
 800195c:	48b0      	ldr	r0, [pc, #704]	; (8001c20 <main+0x340>)
 800195e:	f000 fc85 	bl	800226c <create_file>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4ba7      	ldr	r3, [pc, #668]	; (8001c04 <main+0x324>)
 8001968:	701a      	strb	r2, [r3, #0]
  fresult=create_file("imu_acc.txt", "IMU IMU IMU", &fil2, &bw2);
 800196a:	4bae      	ldr	r3, [pc, #696]	; (8001c24 <main+0x344>)
 800196c:	4aae      	ldr	r2, [pc, #696]	; (8001c28 <main+0x348>)
 800196e:	49af      	ldr	r1, [pc, #700]	; (8001c2c <main+0x34c>)
 8001970:	48af      	ldr	r0, [pc, #700]	; (8001c30 <main+0x350>)
 8001972:	f000 fc7b 	bl	800226c <create_file>
 8001976:	4603      	mov	r3, r0
 8001978:	461a      	mov	r2, r3
 800197a:	4ba2      	ldr	r3, [pc, #648]	; (8001c04 <main+0x324>)
 800197c:	701a      	strb	r2, [r3, #0]

  MX_CAN_Init();
 800197e:	f000 fa99 	bl	8001eb4 <MX_CAN_Init>


  //IMU_config(&hspi2);

  uint32_t counter = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	65bb      	str	r3, [r7, #88]	; 0x58
  char str[20];
  float speed = 0;
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800198c:	213c      	movs	r1, #60	; 0x3c
 800198e:	48a9      	ldr	r0, [pc, #676]	; (8001c34 <main+0x354>)
 8001990:	f002 ffc5 	bl	800491e <HAL_TIM_Encoder_Start>
 // HAL_TIM_Encoder_Init(&htim3, sConfig)
  uint32_t tick = HAL_GetTick();
 8001994:	f000 ff96 	bl	80028c4 <HAL_GetTick>
 8001998:	4603      	mov	r3, r0
 800199a:	643b      	str	r3, [r7, #64]	; 0x40
  counter = __HAL_TIM_GET_COUNTER(&htim3);
 800199c:	4ba5      	ldr	r3, [pc, #660]	; (8001c34 <main+0x354>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	65bb      	str	r3, [r7, #88]	; 0x58
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  printf("counter encoder mode: %lu \n", counter);
 80019a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019a6:	4619      	mov	r1, r3
 80019a8:	48a3      	ldr	r0, [pc, #652]	; (8001c38 <main+0x358>)
 80019aa:	f006 fd0f 	bl	80083cc <iprintf>
	  //HAL_Delay(500);
	  if (HAL_GetTick() - tick > 20L ){
 80019ae:	f000 ff89 	bl	80028c4 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b14      	cmp	r3, #20
 80019ba:	d920      	bls.n	80019fe <main+0x11e>
		  printf("hal = %lu , tick = %lu, Aquii \n", HAL_GetTick(), tick);
 80019bc:	f000 ff82 	bl	80028c4 <HAL_GetTick>
 80019c0:	4601      	mov	r1, r0
 80019c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c4:	461a      	mov	r2, r3
 80019c6:	489d      	ldr	r0, [pc, #628]	; (8001c3c <main+0x35c>)
 80019c8:	f006 fd00 	bl	80083cc <iprintf>
		  speed = motorSpeed(&counter, &tick, htim3);
 80019cc:	4e99      	ldr	r6, [pc, #612]	; (8001c34 <main+0x354>)
 80019ce:	f107 0e40 	add.w	lr, r7, #64	; 0x40
 80019d2:	f107 0c58 	add.w	ip, r7, #88	; 0x58
 80019d6:	466d      	mov	r5, sp
 80019d8:	f106 0408 	add.w	r4, r6, #8
 80019dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80019f4:	4671      	mov	r1, lr
 80019f6:	4660      	mov	r0, ip
 80019f8:	f7ff f9fe 	bl	8000df8 <motorSpeed>
 80019fc:	65f8      	str	r0, [r7, #92]	; 0x5c
	  }


	 // speed = motorSpeed(counter, htim3);
	  printf("rpm = %f\n",speed);
 80019fe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001a00:	f7fe fd12 	bl	8000428 <__aeabi_f2d>
 8001a04:	4603      	mov	r3, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4623      	mov	r3, r4
 8001a0c:	488c      	ldr	r0, [pc, #560]	; (8001c40 <main+0x360>)
 8001a0e:	f006 fcdd 	bl	80083cc <iprintf>

	  sprintf(str , "%f ", speed);
 8001a12:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001a14:	f7fe fd08 	bl	8000428 <__aeabi_f2d>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a20:	461a      	mov	r2, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	4987      	ldr	r1, [pc, #540]	; (8001c44 <main+0x364>)
 8001a26:	f006 fd61 	bl	80084ec <siprintf>

	  printf("speed %s\n", str);
 8001a2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4885      	ldr	r0, [pc, #532]	; (8001c48 <main+0x368>)
 8001a32:	f006 fccb 	bl	80083cc <iprintf>
	  fresult=update_file("enc.txt", str, &fil, &bw);
 8001a36:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001a3a:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <main+0x334>)
 8001a3c:	4a76      	ldr	r2, [pc, #472]	; (8001c18 <main+0x338>)
 8001a3e:	4878      	ldr	r0, [pc, #480]	; (8001c20 <main+0x340>)
 8001a40:	f000 fc36 	bl	80022b0 <update_file>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b6e      	ldr	r3, [pc, #440]	; (8001c04 <main+0x324>)
 8001a4a:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a50:	487e      	ldr	r0, [pc, #504]	; (8001c4c <main+0x36c>)
 8001a52:	f001 fcbf 	bl	80033d4 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001a56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a5a:	f000 ff3d 	bl	80028d8 <HAL_Delay>
	  //printf("hello\n");

	  IMU_acc_read(&hspi2, accel_data);
 8001a5e:	497c      	ldr	r1, [pc, #496]	; (8001c50 <main+0x370>)
 8001a60:	487c      	ldr	r0, [pc, #496]	; (8001c54 <main+0x374>)
 8001a62:	f7ff f861 	bl	8000b28 <IMU_acc_read>

	  printf("\raccel data x: %d accel data y: %d accel data z: %d ", accel_data[0], accel_data[1], accel_data[2]);
 8001a66:	4b7a      	ldr	r3, [pc, #488]	; (8001c50 <main+0x370>)
 8001a68:	6819      	ldr	r1, [r3, #0]
 8001a6a:	4b79      	ldr	r3, [pc, #484]	; (8001c50 <main+0x370>)
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4b78      	ldr	r3, [pc, #480]	; (8001c50 <main+0x370>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	4879      	ldr	r0, [pc, #484]	; (8001c58 <main+0x378>)
 8001a74:	f006 fcaa 	bl	80083cc <iprintf>
	  char acxstr[20];
	  char acystr[20];
	  char aczstr[20];

	  acx = accel_data[0]*0.00098;
 8001a78:	4b75      	ldr	r3, [pc, #468]	; (8001c50 <main+0x370>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fcc1 	bl	8000404 <__aeabi_i2d>
 8001a82:	a359      	add	r3, pc, #356	; (adr r3, 8001be8 <main+0x308>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fd26 	bl	80004d8 <__aeabi_dmul>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	460c      	mov	r4, r1
 8001a90:	4618      	mov	r0, r3
 8001a92:	4621      	mov	r1, r4
 8001a94:	f7fe fff8 	bl	8000a88 <__aeabi_d2f>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b70      	ldr	r3, [pc, #448]	; (8001c5c <main+0x37c>)
 8001a9c:	601a      	str	r2, [r3, #0]
	  acy = accel_data[1]*0.00098;
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <main+0x370>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fcae 	bl	8000404 <__aeabi_i2d>
 8001aa8:	a34f      	add	r3, pc, #316	; (adr r3, 8001be8 <main+0x308>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fd13 	bl	80004d8 <__aeabi_dmul>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	4621      	mov	r1, r4
 8001aba:	f7fe ffe5 	bl	8000a88 <__aeabi_d2f>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <main+0x380>)
 8001ac2:	601a      	str	r2, [r3, #0]
	  acz = accel_data[2]*0.00098;
 8001ac4:	4b62      	ldr	r3, [pc, #392]	; (8001c50 <main+0x370>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fc9b 	bl	8000404 <__aeabi_i2d>
 8001ace:	a346      	add	r3, pc, #280	; (adr r3, 8001be8 <main+0x308>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7fe fd00 	bl	80004d8 <__aeabi_dmul>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	460c      	mov	r4, r1
 8001adc:	4618      	mov	r0, r3
 8001ade:	4621      	mov	r1, r4
 8001ae0:	f7fe ffd2 	bl	8000a88 <__aeabi_d2f>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	; (8001c64 <main+0x384>)
 8001ae8:	601a      	str	r2, [r3, #0]
	  sprintf(acxstr, "acx - %f ", acx);
 8001aea:	4b5c      	ldr	r3, [pc, #368]	; (8001c5c <main+0x37c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fc9a 	bl	8000428 <__aeabi_f2d>
 8001af4:	4603      	mov	r3, r0
 8001af6:	460c      	mov	r4, r1
 8001af8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001afc:	461a      	mov	r2, r3
 8001afe:	4623      	mov	r3, r4
 8001b00:	4959      	ldr	r1, [pc, #356]	; (8001c68 <main+0x388>)
 8001b02:	f006 fcf3 	bl	80084ec <siprintf>
	  sprintf(acystr, "acy - %f ", acy);
 8001b06:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <main+0x380>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fc8c 	bl	8000428 <__aeabi_f2d>
 8001b10:	4603      	mov	r3, r0
 8001b12:	460c      	mov	r4, r1
 8001b14:	f107 0018 	add.w	r0, r7, #24
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	4953      	ldr	r1, [pc, #332]	; (8001c6c <main+0x38c>)
 8001b1e:	f006 fce5 	bl	80084ec <siprintf>
	  sprintf(aczstr, "acz - %f ", acz);
 8001b22:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <main+0x384>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fc7e 	bl	8000428 <__aeabi_f2d>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	460c      	mov	r4, r1
 8001b30:	1d38      	adds	r0, r7, #4
 8001b32:	461a      	mov	r2, r3
 8001b34:	4623      	mov	r3, r4
 8001b36:	494e      	ldr	r1, [pc, #312]	; (8001c70 <main+0x390>)
 8001b38:	f006 fcd8 	bl	80084ec <siprintf>
	  HAL_Delay(100);
 8001b3c:	2064      	movs	r0, #100	; 0x64
 8001b3e:	f000 fecb 	bl	80028d8 <HAL_Delay>
	  update_file("imu_acc.txt", acxstr, &fil2, &bw2);
 8001b42:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b46:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <main+0x344>)
 8001b48:	4a37      	ldr	r2, [pc, #220]	; (8001c28 <main+0x348>)
 8001b4a:	4839      	ldr	r0, [pc, #228]	; (8001c30 <main+0x350>)
 8001b4c:	f000 fbb0 	bl	80022b0 <update_file>

	  update_file("imu_acc.txt", aczstr, &fil2, &bw2);
 8001b50:	1d39      	adds	r1, r7, #4
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <main+0x344>)
 8001b54:	4a34      	ldr	r2, [pc, #208]	; (8001c28 <main+0x348>)
 8001b56:	4836      	ldr	r0, [pc, #216]	; (8001c30 <main+0x350>)
 8001b58:	f000 fbaa 	bl	80022b0 <update_file>

	  update_file("imu_acc.txt", aczstr, &fil2, &bw2);
 8001b5c:	1d39      	adds	r1, r7, #4
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <main+0x344>)
 8001b60:	4a31      	ldr	r2, [pc, #196]	; (8001c28 <main+0x348>)
 8001b62:	4833      	ldr	r0, [pc, #204]	; (8001c30 <main+0x350>)
 8001b64:	f000 fba4 	bl	80022b0 <update_file>


	  printf("\rreal value x: %f G real value y: %f G real value z: %f G ", acx, acy, acz);
 8001b68:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <main+0x37c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fc5b 	bl	8000428 <__aeabi_f2d>
 8001b72:	4680      	mov	r8, r0
 8001b74:	4689      	mov	r9, r1
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <main+0x380>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fc54 	bl	8000428 <__aeabi_f2d>
 8001b80:	4604      	mov	r4, r0
 8001b82:	460d      	mov	r5, r1
 8001b84:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <main+0x384>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fc4d 	bl	8000428 <__aeabi_f2d>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b96:	e9cd 4500 	strd	r4, r5, [sp]
 8001b9a:	4642      	mov	r2, r8
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	4835      	ldr	r0, [pc, #212]	; (8001c74 <main+0x394>)
 8001ba0:	f006 fc14 	bl	80083cc <iprintf>

	  IMU_gyro_read(&hspi2, gyro_data);
 8001ba4:	4934      	ldr	r1, [pc, #208]	; (8001c78 <main+0x398>)
 8001ba6:	482b      	ldr	r0, [pc, #172]	; (8001c54 <main+0x374>)
 8001ba8:	f7ff f838 	bl	8000c1c <IMU_gyro_read>

	  printf("\rgyro data x: %d gyro data y: %d gyro data z: %d ", gyro_data[0], gyro_data[1], gyro_data[2]);
 8001bac:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <main+0x398>)
 8001bae:	6819      	ldr	r1, [r3, #0]
 8001bb0:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <main+0x398>)
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <main+0x398>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4830      	ldr	r0, [pc, #192]	; (8001c7c <main+0x39c>)
 8001bba:	f006 fc07 	bl	80083cc <iprintf>

	  gyx = (262.4/32767)*gyro_data[0];
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <main+0x398>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fc1e 	bl	8000404 <__aeabi_i2d>
 8001bc8:	a309      	add	r3, pc, #36	; (adr r3, 8001bf0 <main+0x310>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe fc83 	bl	80004d8 <__aeabi_dmul>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	4621      	mov	r1, r4
 8001bda:	f7fe ff55 	bl	8000a88 <__aeabi_d2f>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <main+0x3a0>)
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e04e      	b.n	8001c84 <main+0x3a4>
 8001be6:	bf00      	nop
 8001be8:	fcce1c58 	.word	0xfcce1c58
 8001bec:	3f500e6a 	.word	0x3f500e6a
 8001bf0:	3374cd50 	.word	0x3374cd50
 8001bf4:	3f806687 	.word	0x3f806687
 8001bf8:	0800a688 	.word	0x0800a688
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	200002a8 	.word	0x200002a8
 8001c04:	200007d4 	.word	0x200007d4
 8001c08:	200007e4 	.word	0x200007e4
 8001c0c:	200005a0 	.word	0x200005a0
 8001c10:	0800a690 	.word	0x0800a690
 8001c14:	200007cc 	.word	0x200007cc
 8001c18:	2000081c 	.word	0x2000081c
 8001c1c:	0800a6ac 	.word	0x0800a6ac
 8001c20:	0800a6b8 	.word	0x0800a6b8
 8001c24:	200005a4 	.word	0x200005a4
 8001c28:	20000a5c 	.word	0x20000a5c
 8001c2c:	0800a6c0 	.word	0x0800a6c0
 8001c30:	0800a6cc 	.word	0x0800a6cc
 8001c34:	20000530 	.word	0x20000530
 8001c38:	0800a6d8 	.word	0x0800a6d8
 8001c3c:	0800a6f4 	.word	0x0800a6f4
 8001c40:	0800a714 	.word	0x0800a714
 8001c44:	0800a720 	.word	0x0800a720
 8001c48:	0800a724 	.word	0x0800a724
 8001c4c:	40011000 	.word	0x40011000
 8001c50:	200007b4 	.word	0x200007b4
 8001c54:	20000250 	.word	0x20000250
 8001c58:	0800a730 	.word	0x0800a730
 8001c5c:	20000a54 	.word	0x20000a54
 8001c60:	200005a8 	.word	0x200005a8
 8001c64:	200007e0 	.word	0x200007e0
 8001c68:	0800a768 	.word	0x0800a768
 8001c6c:	0800a774 	.word	0x0800a774
 8001c70:	0800a780 	.word	0x0800a780
 8001c74:	0800a78c 	.word	0x0800a78c
 8001c78:	200007c0 	.word	0x200007c0
 8001c7c:	0800a7c8 	.word	0x0800a7c8
 8001c80:	200004d8 	.word	0x200004d8
	  gyy = (262.4/32767)*gyro_data[1];
 8001c84:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <main+0x458>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fbbb 	bl	8000404 <__aeabi_i2d>
 8001c8e:	a328      	add	r3, pc, #160	; (adr r3, 8001d30 <main+0x450>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fc20 	bl	80004d8 <__aeabi_dmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	f7fe fef2 	bl	8000a88 <__aeabi_d2f>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <main+0x45c>)
 8001ca8:	601a      	str	r2, [r3, #0]
	  gyz = (262.4/32767)*gyro_data[2];
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <main+0x458>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fba8 	bl	8000404 <__aeabi_i2d>
 8001cb4:	a31e      	add	r3, pc, #120	; (adr r3, 8001d30 <main+0x450>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fc0d 	bl	80004d8 <__aeabi_dmul>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	f7fe fedf 	bl	8000a88 <__aeabi_d2f>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <main+0x460>)
 8001cce:	601a      	str	r2, [r3, #0]

	  printf("\rgyro real value x: %f gyro real value y: %f gyro real value z: %f  ", gyx, gyy, gyz);
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <main+0x464>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fba7 	bl	8000428 <__aeabi_f2d>
 8001cda:	4680      	mov	r8, r0
 8001cdc:	4689      	mov	r9, r1
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <main+0x45c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fba0 	bl	8000428 <__aeabi_f2d>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	460d      	mov	r5, r1
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <main+0x460>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fb99 	bl	8000428 <__aeabi_f2d>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cfe:	e9cd 4500 	strd	r4, r5, [sp]
 8001d02:	4642      	mov	r2, r8
 8001d04:	464b      	mov	r3, r9
 8001d06:	4810      	ldr	r0, [pc, #64]	; (8001d48 <main+0x468>)
 8001d08:	f006 fb60 	bl	80083cc <iprintf>

	  IMU_mag_read(&hspi2, mag_data);
 8001d0c:	490f      	ldr	r1, [pc, #60]	; (8001d4c <main+0x46c>)
 8001d0e:	4810      	ldr	r0, [pc, #64]	; (8001d50 <main+0x470>)
 8001d10:	f7fe fff8 	bl	8000d04 <IMU_mag_read>

	  printf("\rmag data x: %d mag data y: %d mag data z: %d ", mag_data[0], mag_data[1], mag_data[2]);
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <main+0x46c>)
 8001d16:	6819      	ldr	r1, [r3, #0]
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <main+0x46c>)
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <main+0x46c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <main+0x474>)
 8001d22:	f006 fb53 	bl	80083cc <iprintf>
	  printf("\n");
 8001d26:	200a      	movs	r0, #10
 8001d28:	f006 fb68 	bl	80083fc <putchar>
  {
 8001d2c:	e63a      	b.n	80019a4 <main+0xc4>
 8001d2e:	bf00      	nop
 8001d30:	3374cd50 	.word	0x3374cd50
 8001d34:	3f806687 	.word	0x3f806687
 8001d38:	200007c0 	.word	0x200007c0
 8001d3c:	2000024c 	.word	0x2000024c
 8001d40:	20000a58 	.word	0x20000a58
 8001d44:	200004d8 	.word	0x200004d8
 8001d48:	0800a7fc 	.word	0x0800a7fc
 8001d4c:	20000a48 	.word	0x20000a48
 8001d50:	20000250 	.word	0x20000250
 8001d54:	0800a844 	.word	0x0800a844

08001d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b094      	sub	sp, #80	; 0x50
 8001d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d62:	2228      	movs	r2, #40	; 0x28
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 fed8 	bl	8007b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d92:	2300      	movs	r3, #0
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d96:	2301      	movs	r3, #1
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001da4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 fb28 	bl	8003404 <HAL_RCC_OscConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001dba:	f000 fa02 	bl	80021c2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fd93 	bl	8003904 <HAL_RCC_ClockConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001de4:	f000 f9ed 	bl	80021c2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001de8:	2302      	movs	r3, #2
 8001dea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 ff28 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001dfe:	f000 f9e0 	bl	80021c2 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8001e02:	2200      	movs	r2, #0
 8001e04:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f001 fe65 	bl	8003ad8 <HAL_RCC_MCOConfig>
}
 8001e0e:	bf00      	nop
 8001e10:	3750      	adds	r7, #80	; 0x50
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001e28:	4b20      	ldr	r3, [pc, #128]	; (8001eac <MX_ADC1_Init+0x94>)
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <MX_ADC1_Init+0x98>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <MX_ADC1_Init+0x94>)
 8001e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <MX_ADC1_Init+0x94>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <MX_ADC1_Init+0x94>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <MX_ADC1_Init+0x94>)
 8001e44:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <MX_ADC1_Init+0x94>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001e50:	4b16      	ldr	r3, [pc, #88]	; (8001eac <MX_ADC1_Init+0x94>)
 8001e52:	2202      	movs	r2, #2
 8001e54:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e56:	4815      	ldr	r0, [pc, #84]	; (8001eac <MX_ADC1_Init+0x94>)
 8001e58:	f000 fd60 	bl	800291c <HAL_ADC_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001e62:	f000 f9ae 	bl	80021c2 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	480d      	ldr	r0, [pc, #52]	; (8001eac <MX_ADC1_Init+0x94>)
 8001e78:	f000 fe28 	bl	8002acc <HAL_ADC_ConfigChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e82:	f000 f99e 	bl	80021c2 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	4619      	mov	r1, r3
 8001e92:	4806      	ldr	r0, [pc, #24]	; (8001eac <MX_ADC1_Init+0x94>)
 8001e94:	f000 fe1a 	bl	8002acc <HAL_ADC_ConfigChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001e9e:	f000 f990 	bl	80021c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000570 	.word	0x20000570
 8001eb0:	40012400 	.word	0x40012400

08001eb4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <MX_CAN_Init+0x60>)
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <MX_CAN_Init+0x64>)
 8001ebc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <MX_CAN_Init+0x60>)
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <MX_CAN_Init+0x60>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <MX_CAN_Init+0x60>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <MX_CAN_Init+0x60>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <MX_CAN_Init+0x60>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <MX_CAN_Init+0x60>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <MX_CAN_Init+0x60>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <MX_CAN_Init+0x60>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <MX_CAN_Init+0x60>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <MX_CAN_Init+0x60>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <MX_CAN_Init+0x60>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001f00:	4804      	ldr	r0, [pc, #16]	; (8001f14 <MX_CAN_Init+0x60>)
 8001f02:	f000 ff15 	bl	8002d30 <HAL_CAN_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001f0c:	f000 f959 	bl	80021c2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000504 	.word	0x20000504
 8001f18:	40006400 	.word	0x40006400

08001f1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f22:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <MX_SPI2_Init+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f68:	220a      	movs	r2, #10
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f6c:	4804      	ldr	r0, [pc, #16]	; (8001f80 <MX_SPI2_Init+0x64>)
 8001f6e:	f001 ff21 	bl	8003db4 <HAL_SPI_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f78:	f000 f923 	bl	80021c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000250 	.word	0x20000250
 8001f84:	40003800 	.word	0x40003800

08001f88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	2224      	movs	r2, #36	; 0x24
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f005 fdc0 	bl	8007b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <MX_TIM3_Init+0xa0>)
 8001fa6:	4a21      	ldr	r2, [pc, #132]	; (800202c <MX_TIM3_Init+0xa4>)
 8001fa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <MX_TIM3_Init+0xa0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <MX_TIM3_Init+0xa0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <MX_TIM3_Init+0xa0>)
 8001fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <MX_TIM3_Init+0xa0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <MX_TIM3_Init+0xa0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001fda:	230a      	movs	r3, #10
 8001fdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <MX_TIM3_Init+0xa0>)
 8001ff6:	f002 fc04 	bl	8004802 <HAL_TIM_Encoder_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002000:	f000 f8df 	bl	80021c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	4619      	mov	r1, r3
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_TIM3_Init+0xa0>)
 8002012:	f002 fd41 	bl	8004a98 <HAL_TIMEx_MasterConfigSynchronization>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800201c:	f000 f8d1 	bl	80021c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	3730      	adds	r7, #48	; 0x30
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000530 	.word	0x20000530
 800202c:	40000400 	.word	0x40000400

08002030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002044:	4b46      	ldr	r3, [pc, #280]	; (8002160 <MX_GPIO_Init+0x130>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a45      	ldr	r2, [pc, #276]	; (8002160 <MX_GPIO_Init+0x130>)
 800204a:	f043 0310 	orr.w	r3, r3, #16
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <MX_GPIO_Init+0x130>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800205c:	4b40      	ldr	r3, [pc, #256]	; (8002160 <MX_GPIO_Init+0x130>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a3f      	ldr	r2, [pc, #252]	; (8002160 <MX_GPIO_Init+0x130>)
 8002062:	f043 0320 	orr.w	r3, r3, #32
 8002066:	6193      	str	r3, [r2, #24]
 8002068:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <MX_GPIO_Init+0x130>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002074:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <MX_GPIO_Init+0x130>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a39      	ldr	r2, [pc, #228]	; (8002160 <MX_GPIO_Init+0x130>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b37      	ldr	r3, [pc, #220]	; (8002160 <MX_GPIO_Init+0x130>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208c:	4b34      	ldr	r3, [pc, #208]	; (8002160 <MX_GPIO_Init+0x130>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a33      	ldr	r2, [pc, #204]	; (8002160 <MX_GPIO_Init+0x130>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b31      	ldr	r3, [pc, #196]	; (8002160 <MX_GPIO_Init+0x130>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020aa:	482e      	ldr	r0, [pc, #184]	; (8002164 <MX_GPIO_Init+0x134>)
 80020ac:	f001 f97a 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCard_CS_GPIO_Port, SDCard_CS_Pin, GPIO_PIN_RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b6:	482c      	ldr	r0, [pc, #176]	; (8002168 <MX_GPIO_Init+0x138>)
 80020b8:	f001 f974 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FOC_CS_Pin|CS_magnet_Pin|CS_gyro_Pin|CS_accel_Pin 
 80020bc:	2200      	movs	r2, #0
 80020be:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 80020c2:	482a      	ldr	r0, [pc, #168]	; (800216c <MX_GPIO_Init+0x13c>)
 80020c4:	f001 f96e 	bl	80033a4 <HAL_GPIO_WritePin>
                          |CAN_Stand_By_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80020c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ce:	2301      	movs	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	4619      	mov	r1, r3
 80020e0:	4820      	ldr	r0, [pc, #128]	; (8002164 <MX_GPIO_Init+0x134>)
 80020e2:	f001 f805 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SDCard_CS_Pin;
 80020e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ec:	2301      	movs	r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2302      	movs	r3, #2
 80020f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f107 0310 	add.w	r3, r7, #16
 80020fc:	4619      	mov	r1, r3
 80020fe:	481a      	ldr	r0, [pc, #104]	; (8002168 <MX_GPIO_Init+0x138>)
 8002100:	f000 fff6 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCard_Detect_Pin */
  GPIO_InitStruct.Pin = SDCard_Detect_Pin;
 8002104:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDCard_Detect_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 0310 	add.w	r3, r7, #16
 8002116:	4619      	mov	r1, r3
 8002118:	4813      	ldr	r0, [pc, #76]	; (8002168 <MX_GPIO_Init+0x138>)
 800211a:	f000 ffe9 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Clock_Output_Pin */
  GPIO_InitStruct.Pin = Clock_Output_Pin;
 800211e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2302      	movs	r3, #2
 800212a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Clock_Output_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	4619      	mov	r1, r3
 8002132:	480e      	ldr	r0, [pc, #56]	; (800216c <MX_GPIO_Init+0x13c>)
 8002134:	f000 ffdc 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FOC_CS_Pin CS_magnet_Pin CS_gyro_Pin CS_accel_Pin 
                           CAN_Stand_By_Pin */
  GPIO_InitStruct.Pin = FOC_CS_Pin|CS_magnet_Pin|CS_gyro_Pin|CS_accel_Pin 
 8002138:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 800213c:	613b      	str	r3, [r7, #16]
                          |CAN_Stand_By_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2302      	movs	r3, #2
 8002148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	4619      	mov	r1, r3
 8002150:	4806      	ldr	r0, [pc, #24]	; (800216c <MX_GPIO_Init+0x13c>)
 8002152:	f000 ffcd 	bl	80030f0 <HAL_GPIO_Init>

}
 8002156:	bf00      	nop
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	40011000 	.word	0x40011000
 8002168:	40010c00 	.word	0x40010c00
 800216c:	40010800 	.word	0x40010800

08002170 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fb8a 	bl	8001894 <ITM_SendChar>
	return ch;
 8002180:	687b      	ldr	r3, [r7, #4]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <_write>:

int _write(int file, char *ptr, int len){
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e009      	b.n	80021b0 <_write+0x26>
		__io_putchar(*ptr++);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	60ba      	str	r2, [r7, #8]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ffe3 	bl	8002170 <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	dbf1      	blt.n	800219c <_write+0x12>
	}
	return len;
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <bufsize>:
#include "stdio.h"


/* to find the size of data in the buffer */
int bufsize (char *buf)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
	int i=0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 80021da:	e002      	b.n	80021e2 <bufsize+0x14>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3301      	adds	r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f6      	bne.n	80021dc <bufsize+0xe>
	return i;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
	...

080021fc <mount_card>:
	}
}

/* Mount SD Card */
FRESULT mount_card (FATFS *fs)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
      return f_mount(fs, "", 0);
 8002204:	2200      	movs	r2, #0
 8002206:	4904      	ldr	r1, [pc, #16]	; (8002218 <mount_card+0x1c>)
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f004 fb7f 	bl	800690c <f_mount>
 800220e:	4603      	mov	r3, r0
      //if fresult <>
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	0800a874 	.word	0x0800a874

0800221c <card_capacity>:
}

/*************** Card capacity details ********************/

void card_capacity (DWORD *free_space, DWORD *total_space)//, DWORD *fre_clust)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	FATFS *pfs;
	DWORD fre_clust;

	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 8002226:	f107 020c 	add.w	r2, r7, #12
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	4619      	mov	r1, r3
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <card_capacity+0x4c>)
 8002232:	f005 faab 	bl	800778c <f_getfree>
	*total_space = ((pfs->n_fatent - 2) * (pfs->csize)); //total number of sectors
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800223c:	3b02      	subs	r3, #2
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8002244:	fb02 f203 	mul.w	r2, r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	601a      	str	r2, [r3, #0]
	*free_space = (fre_clust * (pfs->csize)); //number of free sectors
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002252:	461a      	mov	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	fb03 f202 	mul.w	r2, r3, r2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	0800a874 	.word	0x0800a874

0800226c <create_file>:

/**************** The following operation is using f_write and f_read **************************/

FRESULT create_file (char *filename, char *data, FIL *fil, UINT *bw){
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]

	FRESULT fresult;

	/* Create second file with read write access and open it */
	fresult = f_open(fil, filename , FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 800227a:	220b      	movs	r2, #11
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f004 fb8c 	bl	800699c <f_open>
 8002284:	4603      	mov	r3, r0
 8002286:	75fb      	strb	r3, [r7, #23]

	fresult = f_write(fil, data, bufsize(data), bw);
 8002288:	68b8      	ldr	r0, [r7, #8]
 800228a:	f7ff ffa0 	bl	80021ce <bufsize>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f004 fd8b 	bl	8006db2 <f_write>
 800229c:	4603      	mov	r3, r0
 800229e:	75fb      	strb	r3, [r7, #23]

	/* Close file */
	f_close(fil);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f004 ffed 	bl	8007280 <f_close>

	return fresult;
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <update_file>:
	return fresult;
}

/*********************UPDATING an existing file ***************************/
FRESULT update_file(char *filename, char *data, FIL *fil, UINT *bw)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
	FRESULT fresult;

	/* Open the file with write access */
	fresult = f_open(fil, filename, FA_OPEN_ALWAYS | FA_WRITE);
 80022be:	2212      	movs	r2, #18
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f004 fb6a 	bl	800699c <f_open>
 80022c8:	4603      	mov	r3, r0
 80022ca:	75fb      	strb	r3, [r7, #23]

	/* Move to offset to the end of the file */
	fresult = f_lseek(fil, fil->fsize);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80022d2:	4619      	mov	r1, r3
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f004 fffb 	bl	80072d0 <f_lseek>
 80022da:	4603      	mov	r3, r0
 80022dc:	75fb      	strb	r3, [r7, #23]

	/* write the string to the file */
	fresult = f_puts(data, fil); //pode precisar de um "\n"
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	68b8      	ldr	r0, [r7, #8]
 80022e2:	f005 fb5d 	bl	80079a0 <f_puts>
 80022e6:	4603      	mov	r3, r0
 80022e8:	75fb      	strb	r3, [r7, #23]

	f_close (fil);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f004 ffc8 	bl	8007280 <f_close>
	return fresult;
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_MspInit+0x5c>)
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_MspInit+0x5c>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6193      	str	r3, [r2, #24]
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_MspInit+0x5c>)
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_MspInit+0x5c>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_MspInit+0x5c>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002324:	61d3      	str	r3, [r2, #28]
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_MspInit+0x5c>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_MspInit+0x60>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_MspInit+0x60>)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40021000 	.word	0x40021000
 800235c:	40010000 	.word	0x40010000

08002360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a14      	ldr	r2, [pc, #80]	; (80023cc <HAL_ADC_MspInit+0x6c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d121      	bne.n	80023c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_ADC_MspInit+0x70>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <HAL_ADC_MspInit+0x70>)
 8002386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <HAL_ADC_MspInit+0x70>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_ADC_MspInit+0x70>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <HAL_ADC_MspInit+0x70>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6193      	str	r3, [r2, #24]
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_ADC_MspInit+0x70>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023b0:	2303      	movs	r3, #3
 80023b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b4:	2303      	movs	r3, #3
 80023b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	4619      	mov	r1, r3
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <HAL_ADC_MspInit+0x74>)
 80023c0:	f000 fe96 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023c4:	bf00      	nop
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40012400 	.word	0x40012400
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40010800 	.word	0x40010800

080023d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a25      	ldr	r2, [pc, #148]	; (8002488 <HAL_CAN_MspInit+0xb0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d143      	bne.n	8002480 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_CAN_MspInit+0xb4>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	4a23      	ldr	r2, [pc, #140]	; (800248c <HAL_CAN_MspInit+0xb4>)
 80023fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002402:	61d3      	str	r3, [r2, #28]
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_CAN_MspInit+0xb4>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_CAN_MspInit+0xb4>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_CAN_MspInit+0xb4>)
 8002416:	f043 0308 	orr.w	r3, r3, #8
 800241a:	6193      	str	r3, [r2, #24]
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_CAN_MspInit+0xb4>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800242c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	4814      	ldr	r0, [pc, #80]	; (8002490 <HAL_CAN_MspInit+0xb8>)
 800243e:	f000 fe57 	bl	80030f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4619      	mov	r1, r3
 8002456:	480e      	ldr	r0, [pc, #56]	; (8002490 <HAL_CAN_MspInit+0xb8>)
 8002458:	f000 fe4a 	bl	80030f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <HAL_CAN_MspInit+0xbc>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
 800247a:	4a06      	ldr	r2, [pc, #24]	; (8002494 <HAL_CAN_MspInit+0xbc>)
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002480:	bf00      	nop
 8002482:	3728      	adds	r7, #40	; 0x28
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40006400 	.word	0x40006400
 800248c:	40021000 	.word	0x40021000
 8002490:	40010c00 	.word	0x40010c00
 8002494:	40010000 	.word	0x40010000

08002498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <HAL_SPI_MspInit+0x8c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d131      	bne.n	800251c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c2:	61d3      	str	r3, [r2, #28]
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024d6:	f043 0308 	orr.w	r3, r3, #8
 80024da:	6193      	str	r3, [r2, #24]
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80024e8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80024ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	4619      	mov	r1, r3
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <HAL_SPI_MspInit+0x94>)
 80024fe:	f000 fdf7 	bl	80030f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	4619      	mov	r1, r3
 8002516:	4805      	ldr	r0, [pc, #20]	; (800252c <HAL_SPI_MspInit+0x94>)
 8002518:	f000 fdea 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800251c:	bf00      	nop
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40003800 	.word	0x40003800
 8002528:	40021000 	.word	0x40021000
 800252c:	40010c00 	.word	0x40010c00

08002530 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <HAL_TIM_Encoder_MspInit+0x70>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d123      	bne.n	8002598 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	4a13      	ldr	r2, [pc, #76]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	61d3      	str	r3, [r2, #28]
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x74>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x74>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x74>)
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = encoder_va_Pin|encoder_vb_Pin;
 8002580:	23c0      	movs	r3, #192	; 0xc0
 8002582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	4619      	mov	r1, r3
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x78>)
 8002594:	f000 fdac 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40000400 	.word	0x40000400
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010800 	.word	0x40010800

080025ac <SDTimer_handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <SDTimer_handler+0x3c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <SDTimer_handler+0x1c>
		Timer1--;
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <SDTimer_handler+0x3c>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <SDTimer_handler+0x3c>)
 80025c6:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <SDTimer_handler+0x40>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <SDTimer_handler+0x34>
		Timer2--;
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <SDTimer_handler+0x40>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <SDTimer_handler+0x40>)
 80025de:	701a      	strb	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	20000c89 	.word	0x20000c89
 80025ec:	20000c88 	.word	0x20000c88

080025f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <HardFault_Handler+0x4>

08002602 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002606:	e7fe      	b.n	8002606 <MemManage_Handler+0x4>

08002608 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <BusFault_Handler+0x4>

0800260e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <UsageFault_Handler+0x4>

08002614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <SysTick_Handler+0x30>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3301      	adds	r3, #1
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <SysTick_Handler+0x30>)
 8002648:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt > 10){
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <SysTick_Handler+0x30>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b0a      	cmp	r3, #10
 8002652:	d904      	bls.n	800265e <SysTick_Handler+0x26>
		FatFsCnt=0;
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <SysTick_Handler+0x30>)
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
		SDTimer_handler();
 800265a:	f7ff ffa7 	bl	80025ac <SDTimer_handler>
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265e:	f000 f91f 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000212 	.word	0x20000212

0800266c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	e00a      	b.n	8002694 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800267e:	f3af 8000 	nop.w
 8002682:	4601      	mov	r1, r0
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	60ba      	str	r2, [r7, #8]
 800268a:	b2ca      	uxtb	r2, r1
 800268c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	dbf0      	blt.n	800267e <_read+0x12>
	}

return len;
 800269c:	687b      	ldr	r3, [r7, #4]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
	return -1;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026cc:	605a      	str	r2, [r3, #4]
	return 0;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <_isatty>:

int _isatty(int file)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
	return 1;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
	return 0;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
	...

08002708 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <_sbrk+0x50>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <_sbrk+0x16>
		heap_end = &end;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <_sbrk+0x50>)
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <_sbrk+0x54>)
 800271c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <_sbrk+0x50>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <_sbrk+0x50>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	466a      	mov	r2, sp
 800272e:	4293      	cmp	r3, r2
 8002730:	d907      	bls.n	8002742 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002732:	f005 f9c9 	bl	8007ac8 <__errno>
 8002736:	4602      	mov	r2, r0
 8002738:	230c      	movs	r3, #12
 800273a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	e006      	b.n	8002750 <_sbrk+0x48>
	}

	heap_end += incr;
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <_sbrk+0x50>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	4a03      	ldr	r2, [pc, #12]	; (8002758 <_sbrk+0x50>)
 800274c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000214 	.word	0x20000214
 800275c:	200010f8 	.word	0x200010f8

08002760 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002764:	4b15      	ldr	r3, [pc, #84]	; (80027bc <SystemInit+0x5c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a14      	ldr	r2, [pc, #80]	; (80027bc <SystemInit+0x5c>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <SystemInit+0x5c>)
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4911      	ldr	r1, [pc, #68]	; (80027bc <SystemInit+0x5c>)
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <SystemInit+0x60>)
 8002778:	4013      	ands	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <SystemInit+0x5c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <SystemInit+0x5c>)
 8002782:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <SystemInit+0x5c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <SystemInit+0x5c>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002796:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <SystemInit+0x5c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a07      	ldr	r2, [pc, #28]	; (80027bc <SystemInit+0x5c>)
 800279e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80027a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <SystemInit+0x5c>)
 80027a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80027aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <SystemInit+0x64>)
 80027ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40021000 	.word	0x40021000
 80027c0:	f8ff0000 	.word	0xf8ff0000
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027ca:	e003      	b.n	80027d4 <LoopCopyDataInit>

080027cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027d2:	3104      	adds	r1, #4

080027d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027d4:	480a      	ldr	r0, [pc, #40]	; (8002800 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027dc:	d3f6      	bcc.n	80027cc <CopyDataInit>
  ldr r2, =_sbss
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80027e0:	e002      	b.n	80027e8 <LoopFillZerobss>

080027e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80027e4:	f842 3b04 	str.w	r3, [r2], #4

080027e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80027ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80027ec:	d3f9      	bcc.n	80027e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027ee:	f7ff ffb7 	bl	8002760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027f2:	f005 f96f 	bl	8007ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027f6:	f7ff f873 	bl	80018e0 <main>
  bx lr
 80027fa:	4770      	bx	lr
  ldr r3, =_sidata
 80027fc:	0800ac28 	.word	0x0800ac28
  ldr r0, =_sdata
 8002800:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002804:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002808:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 800280c:	200010f8 	.word	0x200010f8

08002810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002810:	e7fe      	b.n	8002810 <ADC1_2_IRQHandler>
	...

08002814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_Init+0x28>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_Init+0x28>)
 800281e:	f043 0310 	orr.w	r3, r3, #16
 8002822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002824:	2003      	movs	r0, #3
 8002826:	f000 fc2f 	bl	8003088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f808 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002830:	f7ff fd64 	bl	80022fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40022000 	.word	0x40022000

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_InitTick+0x54>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_InitTick+0x58>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fc39 	bl	80030d6 <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f000 fc0f 	bl	800309e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <HAL_InitTick+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000004 	.word	0x20000004
 8002898:	2000000c 	.word	0x2000000c
 800289c:	20000008 	.word	0x20000008

080028a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_IncTick+0x1c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_IncTick+0x20>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a03      	ldr	r2, [pc, #12]	; (80028c0 <HAL_IncTick+0x20>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	2000000c 	.word	0x2000000c
 80028c0:	20000c8c 	.word	0x20000c8c

080028c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b02      	ldr	r3, [pc, #8]	; (80028d4 <HAL_GetTick+0x10>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	20000c8c 	.word	0x20000c8c

080028d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff fff0 	bl	80028c4 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d005      	beq.n	80028fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_Delay+0x40>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fe:	bf00      	nop
 8002900:	f7ff ffe0 	bl	80028c4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	429a      	cmp	r2, r3
 800290e:	d8f7      	bhi.n	8002900 <HAL_Delay+0x28>
  {
  }
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2000000c 	.word	0x2000000c

0800291c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0be      	b.n	8002abc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fd00 	bl	8002360 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f9ab 	bl	8002cbc <ADC_ConversionStop_Disable>
 8002966:	4603      	mov	r3, r0
 8002968:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 8099 	bne.w	8002aaa <HAL_ADC_Init+0x18e>
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 8095 	bne.w	8002aaa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002988:	f023 0302 	bic.w	r3, r3, #2
 800298c:	f043 0202 	orr.w	r2, r3, #2
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800299c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7b1b      	ldrb	r3, [r3, #12]
 80029a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b4:	d003      	beq.n	80029be <HAL_ADC_Init+0xa2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_ADC_Init+0xa8>
 80029be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c2:	e000      	b.n	80029c6 <HAL_ADC_Init+0xaa>
 80029c4:	2300      	movs	r3, #0
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7d1b      	ldrb	r3, [r3, #20]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d119      	bne.n	8002a08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7b1b      	ldrb	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	035a      	lsls	r2, r3, #13
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	e00b      	b.n	8002a08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <HAL_ADC_Init+0x1a8>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a38:	d003      	beq.n	8002a42 <HAL_ADC_Init+0x126>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d104      	bne.n	8002a4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	051b      	lsls	r3, r3, #20
 8002a4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_ADC_Init+0x1ac>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d10b      	bne.n	8002a88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a86:	e018      	b.n	8002aba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	f023 0312 	bic.w	r3, r3, #18
 8002a90:	f043 0210 	orr.w	r2, r3, #16
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002aa8:	e007      	b.n	8002aba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	f043 0210 	orr.w	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	ffe1f7fd 	.word	0xffe1f7fd
 8002ac8:	ff1f0efe 	.word	0xff1f0efe

08002acc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x20>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e0dc      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x1da>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b06      	cmp	r3, #6
 8002afa:	d81c      	bhi.n	8002b36 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b05      	subs	r3, #5
 8002b0e:	221f      	movs	r2, #31
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4019      	ands	r1, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	3b05      	subs	r3, #5
 8002b28:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	635a      	str	r2, [r3, #52]	; 0x34
 8002b34:	e03c      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d81c      	bhi.n	8002b78 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3b23      	subs	r3, #35	; 0x23
 8002b50:	221f      	movs	r2, #31
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	4019      	ands	r1, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	3b23      	subs	r3, #35	; 0x23
 8002b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
 8002b76:	e01b      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	3b41      	subs	r3, #65	; 0x41
 8002b8a:	221f      	movs	r2, #31
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	4019      	ands	r1, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3b41      	subs	r3, #65	; 0x41
 8002ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	d91c      	bls.n	8002bf2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68d9      	ldr	r1, [r3, #12]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b1e      	subs	r3, #30
 8002bca:	2207      	movs	r2, #7
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	4019      	ands	r1, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6898      	ldr	r0, [r3, #8]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	3b1e      	subs	r3, #30
 8002be4:	fa00 f203 	lsl.w	r2, r0, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	e019      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6919      	ldr	r1, [r3, #16]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	2207      	movs	r2, #7
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	4019      	ands	r1, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6898      	ldr	r0, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d003      	beq.n	8002c36 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c32:	2b11      	cmp	r3, #17
 8002c34:	d132      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d125      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d126      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c5c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d11a      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	0c9a      	lsrs	r2, r3, #18
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c7c:	e002      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f9      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x1b2>
 8002c8a:	e007      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	40012400 	.word	0x40012400
 8002cb4:	20000004 	.word	0x20000004
 8002cb8:	431bde83 	.word	0x431bde83

08002cbc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d127      	bne.n	8002d26 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ce6:	f7ff fded 	bl	80028c4 <HAL_GetTick>
 8002cea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cec:	e014      	b.n	8002d18 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cee:	f7ff fde9 	bl	80028c4 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d90d      	bls.n	8002d18 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	f043 0210 	orr.w	r2, r3, #16
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f043 0201 	orr.w	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d0e3      	beq.n	8002cee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0ed      	b.n	8002f1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff fb42 	bl	80023d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0202 	bic.w	r2, r2, #2
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d64:	f7ff fdae 	bl	80028c4 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d6a:	e012      	b.n	8002d92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d6c:	f7ff fdaa 	bl	80028c4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b0a      	cmp	r3, #10
 8002d78:	d90b      	bls.n	8002d92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2205      	movs	r2, #5
 8002d8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0c5      	b.n	8002f1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e5      	bne.n	8002d6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db0:	f7ff fd88 	bl	80028c4 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002db6:	e012      	b.n	8002dde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002db8:	f7ff fd84 	bl	80028c4 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b0a      	cmp	r3, #10
 8002dc4:	d90b      	bls.n	8002dde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2205      	movs	r2, #5
 8002dd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e09f      	b.n	8002f1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0e5      	beq.n	8002db8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7e1b      	ldrb	r3, [r3, #24]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d108      	bne.n	8002e06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e007      	b.n	8002e16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	7e5b      	ldrb	r3, [r3, #25]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d108      	bne.n	8002e30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e007      	b.n	8002e40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7e9b      	ldrb	r3, [r3, #26]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d108      	bne.n	8002e5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0220 	orr.w	r2, r2, #32
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	e007      	b.n	8002e6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0220 	bic.w	r2, r2, #32
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	7edb      	ldrb	r3, [r3, #27]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d108      	bne.n	8002e84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0210 	bic.w	r2, r2, #16
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e007      	b.n	8002e94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0210 	orr.w	r2, r2, #16
 8002e92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7f1b      	ldrb	r3, [r3, #28]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d108      	bne.n	8002eae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0208 	orr.w	r2, r2, #8
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e007      	b.n	8002ebe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0208 	bic.w	r2, r2, #8
 8002ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7f5b      	ldrb	r3, [r3, #29]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0204 	orr.w	r2, r2, #4
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e007      	b.n	8002ee8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0204 	bic.w	r2, r2, #4
 8002ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	ea42 0103 	orr.w	r1, r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	1e5a      	subs	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <__NVIC_SetPriorityGrouping>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_GetPriorityGrouping>:
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_SetPriority>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <SysTick_Config>:
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003054:	d301      	bcc.n	800305a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003056:	2301      	movs	r3, #1
 8003058:	e00f      	b.n	800307a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <SysTick_Config+0x40>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003062:	210f      	movs	r1, #15
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	f7ff ff90 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <SysTick_Config+0x40>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <SysTick_Config+0x40>)
 8003074:	2207      	movs	r2, #7
 8003076:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	e000e010 	.word	0xe000e010

08003088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff49 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b0:	f7ff ff5e 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7ff ff90 	bl	8002fe0 <NVIC_EncodePriority>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff5f 	bl	8002f8c <__NVIC_SetPriority>
}
 80030ce:	bf00      	nop
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff ffb0 	bl	8003044 <SysTick_Config>
 80030e4:	4603      	mov	r3, r0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b08b      	sub	sp, #44	; 0x2c
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030fe:	2300      	movs	r3, #0
 8003100:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003102:	e127      	b.n	8003354 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003104:	2201      	movs	r2, #1
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	429a      	cmp	r2, r3
 800311e:	f040 8116 	bne.w	800334e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b12      	cmp	r3, #18
 8003128:	d034      	beq.n	8003194 <HAL_GPIO_Init+0xa4>
 800312a:	2b12      	cmp	r3, #18
 800312c:	d80d      	bhi.n	800314a <HAL_GPIO_Init+0x5a>
 800312e:	2b02      	cmp	r3, #2
 8003130:	d02b      	beq.n	800318a <HAL_GPIO_Init+0x9a>
 8003132:	2b02      	cmp	r3, #2
 8003134:	d804      	bhi.n	8003140 <HAL_GPIO_Init+0x50>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d031      	beq.n	800319e <HAL_GPIO_Init+0xae>
 800313a:	2b01      	cmp	r3, #1
 800313c:	d01c      	beq.n	8003178 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800313e:	e048      	b.n	80031d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003140:	2b03      	cmp	r3, #3
 8003142:	d043      	beq.n	80031cc <HAL_GPIO_Init+0xdc>
 8003144:	2b11      	cmp	r3, #17
 8003146:	d01b      	beq.n	8003180 <HAL_GPIO_Init+0x90>
          break;
 8003148:	e043      	b.n	80031d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800314a:	4a89      	ldr	r2, [pc, #548]	; (8003370 <HAL_GPIO_Init+0x280>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d026      	beq.n	800319e <HAL_GPIO_Init+0xae>
 8003150:	4a87      	ldr	r2, [pc, #540]	; (8003370 <HAL_GPIO_Init+0x280>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d806      	bhi.n	8003164 <HAL_GPIO_Init+0x74>
 8003156:	4a87      	ldr	r2, [pc, #540]	; (8003374 <HAL_GPIO_Init+0x284>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d020      	beq.n	800319e <HAL_GPIO_Init+0xae>
 800315c:	4a86      	ldr	r2, [pc, #536]	; (8003378 <HAL_GPIO_Init+0x288>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01d      	beq.n	800319e <HAL_GPIO_Init+0xae>
          break;
 8003162:	e036      	b.n	80031d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003164:	4a85      	ldr	r2, [pc, #532]	; (800337c <HAL_GPIO_Init+0x28c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d019      	beq.n	800319e <HAL_GPIO_Init+0xae>
 800316a:	4a85      	ldr	r2, [pc, #532]	; (8003380 <HAL_GPIO_Init+0x290>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d016      	beq.n	800319e <HAL_GPIO_Init+0xae>
 8003170:	4a84      	ldr	r2, [pc, #528]	; (8003384 <HAL_GPIO_Init+0x294>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_GPIO_Init+0xae>
          break;
 8003176:	e02c      	b.n	80031d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	623b      	str	r3, [r7, #32]
          break;
 800317e:	e028      	b.n	80031d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	3304      	adds	r3, #4
 8003186:	623b      	str	r3, [r7, #32]
          break;
 8003188:	e023      	b.n	80031d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	3308      	adds	r3, #8
 8003190:	623b      	str	r3, [r7, #32]
          break;
 8003192:	e01e      	b.n	80031d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	330c      	adds	r3, #12
 800319a:	623b      	str	r3, [r7, #32]
          break;
 800319c:	e019      	b.n	80031d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031a6:	2304      	movs	r3, #4
 80031a8:	623b      	str	r3, [r7, #32]
          break;
 80031aa:	e012      	b.n	80031d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031b4:	2308      	movs	r3, #8
 80031b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	611a      	str	r2, [r3, #16]
          break;
 80031be:	e008      	b.n	80031d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031c0:	2308      	movs	r3, #8
 80031c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	615a      	str	r2, [r3, #20]
          break;
 80031ca:	e002      	b.n	80031d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031cc:	2300      	movs	r3, #0
 80031ce:	623b      	str	r3, [r7, #32]
          break;
 80031d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2bff      	cmp	r3, #255	; 0xff
 80031d6:	d801      	bhi.n	80031dc <HAL_GPIO_Init+0xec>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	e001      	b.n	80031e0 <HAL_GPIO_Init+0xf0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3304      	adds	r3, #4
 80031e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2bff      	cmp	r3, #255	; 0xff
 80031e6:	d802      	bhi.n	80031ee <HAL_GPIO_Init+0xfe>
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	e002      	b.n	80031f4 <HAL_GPIO_Init+0x104>
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	3b08      	subs	r3, #8
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	210f      	movs	r1, #15
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	401a      	ands	r2, r3
 8003206:	6a39      	ldr	r1, [r7, #32]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	431a      	orrs	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8096 	beq.w	800334e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003222:	4b59      	ldr	r3, [pc, #356]	; (8003388 <HAL_GPIO_Init+0x298>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	4a58      	ldr	r2, [pc, #352]	; (8003388 <HAL_GPIO_Init+0x298>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6193      	str	r3, [r2, #24]
 800322e:	4b56      	ldr	r3, [pc, #344]	; (8003388 <HAL_GPIO_Init+0x298>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800323a:	4a54      	ldr	r2, [pc, #336]	; (800338c <HAL_GPIO_Init+0x29c>)
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	3302      	adds	r3, #2
 8003242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003246:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	220f      	movs	r2, #15
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4013      	ands	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4b      	ldr	r2, [pc, #300]	; (8003390 <HAL_GPIO_Init+0x2a0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_GPIO_Init+0x19e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4a      	ldr	r2, [pc, #296]	; (8003394 <HAL_GPIO_Init+0x2a4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00d      	beq.n	800328a <HAL_GPIO_Init+0x19a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a49      	ldr	r2, [pc, #292]	; (8003398 <HAL_GPIO_Init+0x2a8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d007      	beq.n	8003286 <HAL_GPIO_Init+0x196>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a48      	ldr	r2, [pc, #288]	; (800339c <HAL_GPIO_Init+0x2ac>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d101      	bne.n	8003282 <HAL_GPIO_Init+0x192>
 800327e:	2303      	movs	r3, #3
 8003280:	e006      	b.n	8003290 <HAL_GPIO_Init+0x1a0>
 8003282:	2304      	movs	r3, #4
 8003284:	e004      	b.n	8003290 <HAL_GPIO_Init+0x1a0>
 8003286:	2302      	movs	r3, #2
 8003288:	e002      	b.n	8003290 <HAL_GPIO_Init+0x1a0>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_GPIO_Init+0x1a0>
 800328e:	2300      	movs	r3, #0
 8003290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003292:	f002 0203 	and.w	r2, r2, #3
 8003296:	0092      	lsls	r2, r2, #2
 8003298:	4093      	lsls	r3, r2
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032a0:	493a      	ldr	r1, [pc, #232]	; (800338c <HAL_GPIO_Init+0x29c>)
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	3302      	adds	r3, #2
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d006      	beq.n	80032c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032ba:	4b39      	ldr	r3, [pc, #228]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4938      	ldr	r1, [pc, #224]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
 80032c6:	e006      	b.n	80032d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032c8:	4b35      	ldr	r3, [pc, #212]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	4933      	ldr	r1, [pc, #204]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d006      	beq.n	80032f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032e2:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	492e      	ldr	r1, [pc, #184]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
 80032ee:	e006      	b.n	80032fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032f0:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	4929      	ldr	r1, [pc, #164]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d006      	beq.n	8003318 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800330a:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	4924      	ldr	r1, [pc, #144]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
 8003316:	e006      	b.n	8003326 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	43db      	mvns	r3, r3
 8003320:	491f      	ldr	r1, [pc, #124]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 8003322:	4013      	ands	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	491a      	ldr	r1, [pc, #104]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	60cb      	str	r3, [r1, #12]
 800333e:	e006      	b.n	800334e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003340:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	43db      	mvns	r3, r3
 8003348:	4915      	ldr	r1, [pc, #84]	; (80033a0 <HAL_GPIO_Init+0x2b0>)
 800334a:	4013      	ands	r3, r2
 800334c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	3301      	adds	r3, #1
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	f47f aed0 	bne.w	8003104 <HAL_GPIO_Init+0x14>
  }
}
 8003364:	bf00      	nop
 8003366:	372c      	adds	r7, #44	; 0x2c
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	10210000 	.word	0x10210000
 8003374:	10110000 	.word	0x10110000
 8003378:	10120000 	.word	0x10120000
 800337c:	10310000 	.word	0x10310000
 8003380:	10320000 	.word	0x10320000
 8003384:	10220000 	.word	0x10220000
 8003388:	40021000 	.word	0x40021000
 800338c:	40010000 	.word	0x40010000
 8003390:	40010800 	.word	0x40010800
 8003394:	40010c00 	.word	0x40010c00
 8003398:	40011000 	.word	0x40011000
 800339c:	40011400 	.word	0x40011400
 80033a0:	40010400 	.word	0x40010400

080033a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
 80033b0:	4613      	mov	r3, r2
 80033b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033c0:	e003      	b.n	80033ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033c2:	887b      	ldrh	r3, [r7, #2]
 80033c4:	041a      	lsls	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ec:	887a      	ldrh	r2, [r7, #2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80033f2:	e002      	b.n	80033fa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033f4:	887a      	ldrh	r2, [r7, #2]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	611a      	str	r2, [r3, #16]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e26c      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8087 	beq.w	8003532 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003424:	4b92      	ldr	r3, [pc, #584]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b04      	cmp	r3, #4
 800342e:	d00c      	beq.n	800344a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003430:	4b8f      	ldr	r3, [pc, #572]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d112      	bne.n	8003462 <HAL_RCC_OscConfig+0x5e>
 800343c:	4b8c      	ldr	r3, [pc, #560]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d10b      	bne.n	8003462 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344a:	4b89      	ldr	r3, [pc, #548]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d06c      	beq.n	8003530 <HAL_RCC_OscConfig+0x12c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d168      	bne.n	8003530 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e246      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x76>
 800346c:	4b80      	ldr	r3, [pc, #512]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a7f      	ldr	r2, [pc, #508]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 8003472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	e02e      	b.n	80034d8 <HAL_RCC_OscConfig+0xd4>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x98>
 8003482:	4b7b      	ldr	r3, [pc, #492]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a7a      	ldr	r2, [pc, #488]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 8003488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b78      	ldr	r3, [pc, #480]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a77      	ldr	r2, [pc, #476]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 8003494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e01d      	b.n	80034d8 <HAL_RCC_OscConfig+0xd4>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0xbc>
 80034a6:	4b72      	ldr	r3, [pc, #456]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a71      	ldr	r2, [pc, #452]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a6e      	ldr	r2, [pc, #440]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0xd4>
 80034c0:	4b6b      	ldr	r3, [pc, #428]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a6a      	ldr	r2, [pc, #424]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b68      	ldr	r3, [pc, #416]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a67      	ldr	r2, [pc, #412]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7ff f9f0 	bl	80028c4 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e8:	f7ff f9ec 	bl	80028c4 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1fa      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b5d      	ldr	r3, [pc, #372]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0xe4>
 8003506:	e014      	b.n	8003532 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7ff f9dc 	bl	80028c4 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003510:	f7ff f9d8 	bl	80028c4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	; 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e1e6      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003522:	4b53      	ldr	r3, [pc, #332]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x10c>
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d063      	beq.n	8003606 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800353e:	4b4c      	ldr	r3, [pc, #304]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800354a:	4b49      	ldr	r3, [pc, #292]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b08      	cmp	r3, #8
 8003554:	d11c      	bne.n	8003590 <HAL_RCC_OscConfig+0x18c>
 8003556:	4b46      	ldr	r3, [pc, #280]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d116      	bne.n	8003590 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003562:	4b43      	ldr	r3, [pc, #268]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_RCC_OscConfig+0x176>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d001      	beq.n	800357a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e1ba      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357a:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4939      	ldr	r1, [pc, #228]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	e03a      	b.n	8003606 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_RCC_OscConfig+0x270>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359e:	f7ff f991 	bl	80028c4 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a6:	f7ff f98d 	bl	80028c4 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e19b      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b8:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c4:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4927      	ldr	r1, [pc, #156]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	600b      	str	r3, [r1, #0]
 80035d8:	e015      	b.n	8003606 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035da:	4b26      	ldr	r3, [pc, #152]	; (8003674 <HAL_RCC_OscConfig+0x270>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7ff f970 	bl	80028c4 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e8:	f7ff f96c 	bl	80028c4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e17a      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d03a      	beq.n	8003688 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d019      	beq.n	800364e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361a:	4b17      	ldr	r3, [pc, #92]	; (8003678 <HAL_RCC_OscConfig+0x274>)
 800361c:	2201      	movs	r2, #1
 800361e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003620:	f7ff f950 	bl	80028c4 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003628:	f7ff f94c 	bl	80028c4 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e15a      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363a:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <HAL_RCC_OscConfig+0x26c>)
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003646:	2001      	movs	r0, #1
 8003648:	f000 fae0 	bl	8003c0c <RCC_Delay>
 800364c:	e01c      	b.n	8003688 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <HAL_RCC_OscConfig+0x274>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003654:	f7ff f936 	bl	80028c4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365a:	e00f      	b.n	800367c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365c:	f7ff f932 	bl	80028c4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d908      	bls.n	800367c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e140      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	42420000 	.word	0x42420000
 8003678:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367c:	4b9e      	ldr	r3, [pc, #632]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e9      	bne.n	800365c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a6 	beq.w	80037e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369a:	4b97      	ldr	r3, [pc, #604]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	4b94      	ldr	r3, [pc, #592]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	4a93      	ldr	r2, [pc, #588]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b0:	61d3      	str	r3, [r2, #28]
 80036b2:	4b91      	ldr	r3, [pc, #580]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036be:	2301      	movs	r3, #1
 80036c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c2:	4b8e      	ldr	r3, [pc, #568]	; (80038fc <HAL_RCC_OscConfig+0x4f8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d118      	bne.n	8003700 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ce:	4b8b      	ldr	r3, [pc, #556]	; (80038fc <HAL_RCC_OscConfig+0x4f8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a8a      	ldr	r2, [pc, #552]	; (80038fc <HAL_RCC_OscConfig+0x4f8>)
 80036d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036da:	f7ff f8f3 	bl	80028c4 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e2:	f7ff f8ef 	bl	80028c4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b64      	cmp	r3, #100	; 0x64
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e0fd      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f4:	4b81      	ldr	r3, [pc, #516]	; (80038fc <HAL_RCC_OscConfig+0x4f8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x312>
 8003708:	4b7b      	ldr	r3, [pc, #492]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	4a7a      	ldr	r2, [pc, #488]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6213      	str	r3, [r2, #32]
 8003714:	e02d      	b.n	8003772 <HAL_RCC_OscConfig+0x36e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x334>
 800371e:	4b76      	ldr	r3, [pc, #472]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	4a75      	ldr	r2, [pc, #468]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	6213      	str	r3, [r2, #32]
 800372a:	4b73      	ldr	r3, [pc, #460]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4a72      	ldr	r2, [pc, #456]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003730:	f023 0304 	bic.w	r3, r3, #4
 8003734:	6213      	str	r3, [r2, #32]
 8003736:	e01c      	b.n	8003772 <HAL_RCC_OscConfig+0x36e>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b05      	cmp	r3, #5
 800373e:	d10c      	bne.n	800375a <HAL_RCC_OscConfig+0x356>
 8003740:	4b6d      	ldr	r3, [pc, #436]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4a6c      	ldr	r2, [pc, #432]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003746:	f043 0304 	orr.w	r3, r3, #4
 800374a:	6213      	str	r3, [r2, #32]
 800374c:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	4a69      	ldr	r2, [pc, #420]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6213      	str	r3, [r2, #32]
 8003758:	e00b      	b.n	8003772 <HAL_RCC_OscConfig+0x36e>
 800375a:	4b67      	ldr	r3, [pc, #412]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	4a66      	ldr	r2, [pc, #408]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	6213      	str	r3, [r2, #32]
 8003766:	4b64      	ldr	r3, [pc, #400]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	4a63      	ldr	r2, [pc, #396]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 800376c:	f023 0304 	bic.w	r3, r3, #4
 8003770:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d015      	beq.n	80037a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377a:	f7ff f8a3 	bl	80028c4 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003780:	e00a      	b.n	8003798 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003782:	f7ff f89f 	bl	80028c4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003790:	4293      	cmp	r3, r2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e0ab      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003798:	4b57      	ldr	r3, [pc, #348]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0ee      	beq.n	8003782 <HAL_RCC_OscConfig+0x37e>
 80037a4:	e014      	b.n	80037d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a6:	f7ff f88d 	bl	80028c4 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7ff f889 	bl	80028c4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e095      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c4:	4b4c      	ldr	r3, [pc, #304]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1ee      	bne.n	80037ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d105      	bne.n	80037e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4b48      	ldr	r3, [pc, #288]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4a47      	ldr	r2, [pc, #284]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 8081 	beq.w	80038ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ec:	4b42      	ldr	r3, [pc, #264]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 030c 	and.w	r3, r3, #12
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d061      	beq.n	80038bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d146      	bne.n	800388e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003800:	4b3f      	ldr	r3, [pc, #252]	; (8003900 <HAL_RCC_OscConfig+0x4fc>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003806:	f7ff f85d 	bl	80028c4 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380e:	f7ff f859 	bl	80028c4 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e067      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003820:	4b35      	ldr	r3, [pc, #212]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f0      	bne.n	800380e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003834:	d108      	bne.n	8003848 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003836:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	492d      	ldr	r1, [pc, #180]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003848:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a19      	ldr	r1, [r3, #32]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	430b      	orrs	r3, r1
 800385a:	4927      	ldr	r1, [pc, #156]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003860:	4b27      	ldr	r3, [pc, #156]	; (8003900 <HAL_RCC_OscConfig+0x4fc>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7ff f82d 	bl	80028c4 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386e:	f7ff f829 	bl	80028c4 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e037      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x46a>
 800388c:	e02f      	b.n	80038ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <HAL_RCC_OscConfig+0x4fc>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7ff f816 	bl	80028c4 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389c:	f7ff f812 	bl	80028c4 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e020      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ae:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x498>
 80038ba:	e018      	b.n	80038ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e013      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCC_OscConfig+0x4f4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40007000 	.word	0x40007000
 8003900:	42420060 	.word	0x42420060

08003904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0d0      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003918:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d910      	bls.n	8003948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 0207 	bic.w	r2, r3, #7
 800392e:	4965      	ldr	r1, [pc, #404]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0b8      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003960:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4a58      	ldr	r2, [pc, #352]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800396a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003978:	4b53      	ldr	r3, [pc, #332]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a52      	ldr	r2, [pc, #328]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003982:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b50      	ldr	r3, [pc, #320]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	494d      	ldr	r1, [pc, #308]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d040      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d115      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e07f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c2:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e073      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d2:	4b3d      	ldr	r3, [pc, #244]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06b      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e2:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f023 0203 	bic.w	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4936      	ldr	r1, [pc, #216]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f4:	f7fe ff66 	bl	80028c4 <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039fc:	f7fe ff62 	bl	80028c4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e053      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 020c 	and.w	r2, r3, #12
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d1eb      	bne.n	80039fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d210      	bcs.n	8003a54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 0207 	bic.w	r2, r3, #7
 8003a3a:	4922      	ldr	r1, [pc, #136]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e032      	b.n	8003aba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4916      	ldr	r1, [pc, #88]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a92:	f000 f859 	bl	8003b48 <HAL_RCC_GetSysClockFreq>
 8003a96:	4601      	mov	r1, r0
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003aa4:	5cd3      	ldrb	r3, [r2, r3]
 8003aa6:	fa21 f303 	lsr.w	r3, r1, r3
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8003aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fec4 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	0800a8d0 	.word	0x0800a8d0
 8003ad0:	20000004 	.word	0x20000004
 8003ad4:	20000008 	.word	0x20000008

08003ad8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003ae4:	f107 0318 	add.w	r3, r7, #24
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003af6:	2303      	movs	r3, #3
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8003afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b02:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003b04:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_RCC_MCOConfig+0x68>)
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <HAL_RCC_MCOConfig+0x68>)
 8003b0a:	f043 0304 	orr.w	r3, r3, #4
 8003b0e:	6193      	str	r3, [r2, #24]
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_MCOConfig+0x68>)
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003b1c:	f107 0318 	add.w	r3, r7, #24
 8003b20:	4619      	mov	r1, r3
 8003b22:	4808      	ldr	r0, [pc, #32]	; (8003b44 <HAL_RCC_MCOConfig+0x6c>)
 8003b24:	f7ff fae4 	bl	80030f0 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_MCOConfig+0x68>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b30:	4903      	ldr	r1, [pc, #12]	; (8003b40 <HAL_RCC_MCOConfig+0x68>)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	604b      	str	r3, [r1, #4]
}
 8003b38:	bf00      	nop
 8003b3a:	3728      	adds	r7, #40	; 0x28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40010800 	.word	0x40010800

08003b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b48:	b490      	push	{r4, r7}
 8003b4a:	b08a      	sub	sp, #40	; 0x28
 8003b4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b50:	1d3c      	adds	r4, r7, #4
 8003b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b58:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b72:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x40>
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x46>
 8003b86:	e02d      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b88:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b8a:	623b      	str	r3, [r7, #32]
      break;
 8003b8c:	e02d      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	0c9b      	lsrs	r3, r3, #18
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ba0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	0c5b      	lsrs	r3, r3, #17
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bba:	4413      	add	r3, r2
 8003bbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	4a0f      	ldr	r2, [pc, #60]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bc6:	fb02 f203 	mul.w	r2, r2, r3
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd2:	e004      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4a0c      	ldr	r2, [pc, #48]	; (8003c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	623b      	str	r3, [r7, #32]
      break;
 8003be2:	e002      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003be6:	623b      	str	r3, [r7, #32]
      break;
 8003be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bea:	6a3b      	ldr	r3, [r7, #32]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3728      	adds	r7, #40	; 0x28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc90      	pop	{r4, r7}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	0800a878 	.word	0x0800a878
 8003bfc:	0800a888 	.word	0x0800a888
 8003c00:	40021000 	.word	0x40021000
 8003c04:	007a1200 	.word	0x007a1200
 8003c08:	003d0900 	.word	0x003d0900

08003c0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <RCC_Delay+0x34>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <RCC_Delay+0x38>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	0a5b      	lsrs	r3, r3, #9
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c28:	bf00      	nop
  }
  while (Delay --);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	60fa      	str	r2, [r7, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f9      	bne.n	8003c28 <RCC_Delay+0x1c>
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000004 	.word	0x20000004
 8003c44:	10624dd3 	.word	0x10624dd3

08003c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d07d      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c68:	4b4f      	ldr	r3, [pc, #316]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10d      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c74:	4b4c      	ldr	r3, [pc, #304]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	4a4b      	ldr	r2, [pc, #300]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	61d3      	str	r3, [r2, #28]
 8003c80:	4b49      	ldr	r3, [pc, #292]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	4b46      	ldr	r3, [pc, #280]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d118      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9c:	4b43      	ldr	r3, [pc, #268]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a42      	ldr	r2, [pc, #264]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca8:	f7fe fe0c 	bl	80028c4 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cae:	e008      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb0:	f7fe fe08 	bl	80028c4 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	; 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e06d      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b3a      	ldr	r3, [pc, #232]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cce:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d02e      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d027      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cec:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf6:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d02:	4a29      	ldr	r2, [pc, #164]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d014      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fe fdd7 	bl	80028c4 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fe fdd3 	bl	80028c4 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e036      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ee      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4917      	ldr	r1, [pc, #92]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	490b      	ldr	r1, [pc, #44]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4904      	ldr	r1, [pc, #16]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40007000 	.word	0x40007000
 8003db0:	42420440 	.word	0x42420440

08003db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e053      	b.n	8003e6e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fe fb59 	bl	8002498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dfc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	ea42 0103 	orr.w	r1, r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	0c1a      	lsrs	r2, r3, #16
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f002 0204 	and.w	r2, r2, #4
 8003e4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b088      	sub	sp, #32
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_SPI_Transmit+0x22>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e11e      	b.n	80040d6 <HAL_SPI_Transmit+0x260>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea0:	f7fe fd10 	bl	80028c4 <HAL_GetTick>
 8003ea4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d002      	beq.n	8003ebc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eba:	e103      	b.n	80040c4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_SPI_Transmit+0x52>
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ecc:	e0fa      	b.n	80040c4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	88fa      	ldrh	r2, [r7, #6]
 8003ee6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f14:	d107      	bne.n	8003f26 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d007      	beq.n	8003f44 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4c:	d14b      	bne.n	8003fe6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_SPI_Transmit+0xe6>
 8003f56:	8afb      	ldrh	r3, [r7, #22]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d13e      	bne.n	8003fda <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	881a      	ldrh	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	1c9a      	adds	r2, r3, #2
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f80:	e02b      	b.n	8003fda <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d112      	bne.n	8003fb6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	881a      	ldrh	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	1c9a      	adds	r2, r3, #2
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fb4:	e011      	b.n	8003fda <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fb6:	f7fe fc85 	bl	80028c4 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d803      	bhi.n	8003fce <HAL_SPI_Transmit+0x158>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d102      	bne.n	8003fd4 <HAL_SPI_Transmit+0x15e>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fd8:	e074      	b.n	80040c4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ce      	bne.n	8003f82 <HAL_SPI_Transmit+0x10c>
 8003fe4:	e04c      	b.n	8004080 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_SPI_Transmit+0x17e>
 8003fee:	8afb      	ldrh	r3, [r7, #22]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d140      	bne.n	8004076 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	7812      	ldrb	r2, [r2, #0]
 8004000:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800401a:	e02c      	b.n	8004076 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d113      	bne.n	8004052 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	7812      	ldrb	r2, [r2, #0]
 8004036:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004050:	e011      	b.n	8004076 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004052:	f7fe fc37 	bl	80028c4 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d803      	bhi.n	800406a <HAL_SPI_Transmit+0x1f4>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d102      	bne.n	8004070 <HAL_SPI_Transmit+0x1fa>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004074:	e026      	b.n	80040c4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1cd      	bne.n	800401c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	6839      	ldr	r1, [r7, #0]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fb9e 	bl	80047c6 <SPI_EndRxTxTransaction>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e000      	b.n	80040c4 <HAL_SPI_Transmit+0x24e>
  }

error:
 80040c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b088      	sub	sp, #32
 80040e2:	af02      	add	r7, sp, #8
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d112      	bne.n	8004122 <HAL_SPI_Receive+0x44>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10e      	bne.n	8004122 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2204      	movs	r2, #4
 8004108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800410c:	88fa      	ldrh	r2, [r7, #6]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4613      	mov	r3, r2
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f8e9 	bl	80042f0 <HAL_SPI_TransmitReceive>
 800411e:	4603      	mov	r3, r0
 8004120:	e0e2      	b.n	80042e8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_SPI_Receive+0x52>
 800412c:	2302      	movs	r3, #2
 800412e:	e0db      	b.n	80042e8 <HAL_SPI_Receive+0x20a>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004138:	f7fe fbc4 	bl	80028c4 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d002      	beq.n	8004150 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800414a:	2302      	movs	r3, #2
 800414c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800414e:	e0c2      	b.n	80042d6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_SPI_Receive+0x7e>
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004160:	e0b9      	b.n	80042d6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2204      	movs	r2, #4
 8004166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a8:	d107      	bne.n	80041ba <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d007      	beq.n	80041d8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d162      	bne.n	80042a6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041e0:	e02e      	b.n	8004240 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d115      	bne.n	800421c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f103 020c 	add.w	r2, r3, #12
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	7812      	ldrb	r2, [r2, #0]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	87da      	strh	r2, [r3, #62]	; 0x3e
 800421a:	e011      	b.n	8004240 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421c:	f7fe fb52 	bl	80028c4 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d803      	bhi.n	8004234 <HAL_SPI_Receive+0x156>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d102      	bne.n	800423a <HAL_SPI_Receive+0x15c>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800423e:	e04a      	b.n	80042d6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1cb      	bne.n	80041e2 <HAL_SPI_Receive+0x104>
 800424a:	e031      	b.n	80042b0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d113      	bne.n	8004282 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	b292      	uxth	r2, r2
 8004266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	1c9a      	adds	r2, r3, #2
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004280:	e011      	b.n	80042a6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004282:	f7fe fb1f 	bl	80028c4 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d803      	bhi.n	800429a <HAL_SPI_Receive+0x1bc>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d102      	bne.n	80042a0 <HAL_SPI_Receive+0x1c2>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042a4:	e017      	b.n	80042d6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1cd      	bne.n	800424c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	6839      	ldr	r1, [r7, #0]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fa34 	bl	8004722 <SPI_EndRxTransaction>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	75fb      	strb	r3, [r7, #23]
 80042d2:	e000      	b.n	80042d6 <HAL_SPI_Receive+0x1f8>
  }

error :
 80042d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08c      	sub	sp, #48	; 0x30
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042fe:	2301      	movs	r3, #1
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_SPI_TransmitReceive+0x26>
 8004312:	2302      	movs	r3, #2
 8004314:	e18a      	b.n	800462c <HAL_SPI_TransmitReceive+0x33c>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800431e:	f7fe fad1 	bl	80028c4 <HAL_GetTick>
 8004322:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004334:	887b      	ldrh	r3, [r7, #2]
 8004336:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800433c:	2b01      	cmp	r3, #1
 800433e:	d00f      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x70>
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004346:	d107      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d103      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x68>
 8004350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004354:	2b04      	cmp	r3, #4
 8004356:	d003      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004358:	2302      	movs	r3, #2
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800435e:	e15b      	b.n	8004618 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_SPI_TransmitReceive+0x82>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_SPI_TransmitReceive+0x82>
 800436c:	887b      	ldrh	r3, [r7, #2]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004378:	e14e      	b.n	8004618 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b04      	cmp	r3, #4
 8004384:	d003      	beq.n	800438e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2205      	movs	r2, #5
 800438a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	887a      	ldrh	r2, [r7, #2]
 800439e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	887a      	ldrh	r2, [r7, #2]
 80043b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	887a      	ldrh	r2, [r7, #2]
 80043b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b40      	cmp	r3, #64	; 0x40
 80043d0:	d007      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ea:	d178      	bne.n	80044de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_SPI_TransmitReceive+0x10a>
 80043f4:	8b7b      	ldrh	r3, [r7, #26]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d166      	bne.n	80044c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	881a      	ldrh	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	1c9a      	adds	r2, r3, #2
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800441e:	e053      	b.n	80044c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b02      	cmp	r3, #2
 800442c:	d11b      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x176>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d016      	beq.n	8004466 <HAL_SPI_TransmitReceive+0x176>
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	2b01      	cmp	r3, #1
 800443c:	d113      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	881a      	ldrh	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	1c9a      	adds	r2, r3, #2
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d119      	bne.n	80044a8 <HAL_SPI_TransmitReceive+0x1b8>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d014      	beq.n	80044a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	b292      	uxth	r2, r2
 800448a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	1c9a      	adds	r2, r3, #2
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044a4:	2301      	movs	r3, #1
 80044a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044a8:	f7fe fa0c 	bl	80028c4 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d807      	bhi.n	80044c8 <HAL_SPI_TransmitReceive+0x1d8>
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d003      	beq.n	80044c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044c6:	e0a7      	b.n	8004618 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1a6      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x130>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1a1      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x130>
 80044dc:	e07c      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_SPI_TransmitReceive+0x1fc>
 80044e6:	8b7b      	ldrh	r3, [r7, #26]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d16b      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004512:	e057      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b02      	cmp	r3, #2
 8004520:	d11c      	bne.n	800455c <HAL_SPI_TransmitReceive+0x26c>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d017      	beq.n	800455c <HAL_SPI_TransmitReceive+0x26c>
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452e:	2b01      	cmp	r3, #1
 8004530:	d114      	bne.n	800455c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	7812      	ldrb	r2, [r2, #0]
 800453e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d119      	bne.n	800459e <HAL_SPI_TransmitReceive+0x2ae>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d014      	beq.n	800459e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800459a:	2301      	movs	r3, #1
 800459c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800459e:	f7fe f991 	bl	80028c4 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d803      	bhi.n	80045b6 <HAL_SPI_TransmitReceive+0x2c6>
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d102      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x2cc>
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d103      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045c2:	e029      	b.n	8004618 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1a2      	bne.n	8004514 <HAL_SPI_TransmitReceive+0x224>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d19d      	bne.n	8004514 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f8f2 	bl	80047c6 <SPI_EndRxTxTransaction>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d006      	beq.n	80045f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045f4:	e010      	b.n	8004618 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	e000      	b.n	8004618 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004616:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004628:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800462c:	4618      	mov	r0, r3
 800462e:	3730      	adds	r7, #48	; 0x30
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004642:	b2db      	uxtb	r3, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	4613      	mov	r3, r2
 800465c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800465e:	e04c      	b.n	80046fa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d048      	beq.n	80046fa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004668:	f7fe f92c 	bl	80028c4 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d902      	bls.n	800467e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d13d      	bne.n	80046fa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800468c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004696:	d111      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a0:	d004      	beq.n	80046ac <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046aa:	d107      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c4:	d10f      	bne.n	80046e6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e00f      	b.n	800471a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	bf0c      	ite	eq
 800470a:	2301      	moveq	r3, #1
 800470c:	2300      	movne	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	429a      	cmp	r2, r3
 8004716:	d1a3      	bne.n	8004660 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b086      	sub	sp, #24
 8004726:	af02      	add	r7, sp, #8
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004736:	d111      	bne.n	800475c <SPI_EndRxTransaction+0x3a>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004740:	d004      	beq.n	800474c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474a:	d107      	bne.n	800475c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475a:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004764:	d117      	bne.n	8004796 <SPI_EndRxTransaction+0x74>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476e:	d112      	bne.n	8004796 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2200      	movs	r2, #0
 8004778:	2101      	movs	r1, #1
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff ff67 	bl	800464e <SPI_WaitFlagStateUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01a      	beq.n	80047bc <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f043 0220 	orr.w	r2, r3, #32
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e013      	b.n	80047be <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2200      	movs	r2, #0
 800479e:	2180      	movs	r1, #128	; 0x80
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f7ff ff54 	bl	800464e <SPI_WaitFlagStateUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f043 0220 	orr.w	r2, r3, #32
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e000      	b.n	80047be <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af02      	add	r7, sp, #8
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2200      	movs	r2, #0
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff ff36 	bl	800464e <SPI_WaitFlagStateUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	f043 0220 	orr.w	r2, r3, #32
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e000      	b.n	80047fa <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e07f      	b.n	8004916 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd fe80 	bl	8002530 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004846:	f023 0307 	bic.w	r3, r3, #7
 800484a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3304      	adds	r3, #4
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f000 f898 	bl	800498c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004884:	f023 0303 	bic.w	r3, r3, #3
 8004888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	4313      	orrs	r3, r2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048a2:	f023 030c 	bic.w	r3, r3, #12
 80048a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	4313      	orrs	r3, r2
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	011a      	lsls	r2, r3, #4
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	031b      	lsls	r3, r3, #12
 80048d2:	4313      	orrs	r3, r2
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80048e0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	4313      	orrs	r3, r2
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_TIM_Encoder_Start+0x16>
 800492e:	2b04      	cmp	r3, #4
 8004930:	d008      	beq.n	8004944 <HAL_TIM_Encoder_Start+0x26>
 8004932:	e00f      	b.n	8004954 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2201      	movs	r2, #1
 800493a:	2100      	movs	r1, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f000 f887 	bl	8004a50 <TIM_CCxChannelCmd>
      break;
 8004942:	e016      	b.n	8004972 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2201      	movs	r2, #1
 800494a:	2104      	movs	r1, #4
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f87f 	bl	8004a50 <TIM_CCxChannelCmd>
      break;
 8004952:	e00e      	b.n	8004972 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2201      	movs	r2, #1
 800495a:	2100      	movs	r1, #0
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f877 	bl	8004a50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2201      	movs	r2, #1
 8004968:	2104      	movs	r1, #4
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f870 	bl	8004a50 <TIM_CCxChannelCmd>
      break;
 8004970:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <TIM_Base_SetConfig+0xb8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00b      	beq.n	80049bc <TIM_Base_SetConfig+0x30>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049aa:	d007      	beq.n	80049bc <TIM_Base_SetConfig+0x30>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a26      	ldr	r2, [pc, #152]	; (8004a48 <TIM_Base_SetConfig+0xbc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_Base_SetConfig+0x30>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a25      	ldr	r2, [pc, #148]	; (8004a4c <TIM_Base_SetConfig+0xc0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d108      	bne.n	80049ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1c      	ldr	r2, [pc, #112]	; (8004a44 <TIM_Base_SetConfig+0xb8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00b      	beq.n	80049ee <TIM_Base_SetConfig+0x62>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049dc:	d007      	beq.n	80049ee <TIM_Base_SetConfig+0x62>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a19      	ldr	r2, [pc, #100]	; (8004a48 <TIM_Base_SetConfig+0xbc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d003      	beq.n	80049ee <TIM_Base_SetConfig+0x62>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <TIM_Base_SetConfig+0xc0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d108      	bne.n	8004a00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a07      	ldr	r2, [pc, #28]	; (8004a44 <TIM_Base_SetConfig+0xb8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d103      	bne.n	8004a34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	615a      	str	r2, [r3, #20]
}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800

08004a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2201      	movs	r2, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1a      	ldr	r2, [r3, #32]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	401a      	ands	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e032      	b.n	8004b16 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004b24:	4904      	ldr	r1, [pc, #16]	; (8004b38 <MX_FATFS_Init+0x18>)
 8004b26:	4805      	ldr	r0, [pc, #20]	; (8004b3c <MX_FATFS_Init+0x1c>)
 8004b28:	f002 ffbe 	bl	8007aa8 <FATFS_LinkDriver>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <MX_FATFS_Init+0x20>)
 8004b32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004b34:	bf00      	nop
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20000c90 	.word	0x20000c90
 8004b3c:	20000010 	.word	0x20000010
 8004b40:	20000c94 	.word	0x20000c94

08004b44 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004b48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fc fb7e 	bl	8001260 <SD_disk_initialize>
 8004b64:	4603      	mov	r3, r0
 8004b66:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fc fc59 	bl	8001434 <SD_disk_status>
 8004b82:	4603      	mov	r3, r0
 8004b84:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004b9e:	7bf8      	ldrb	r0, [r7, #15]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	f7fc fc59 	bl	800145c <SD_disk_read>
 8004baa:	4603      	mov	r3, r0
 8004bac:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004bc6:	7bf8      	ldrb	r0, [r7, #15]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	f7fc fcaf 	bl	8001530 <SD_disk_write>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	4603      	mov	r3, r0
 8004be6:	603a      	str	r2, [r7, #0]
 8004be8:	71fb      	strb	r3, [r7, #7]
 8004bea:	460b      	mov	r3, r1
 8004bec:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	79b9      	ldrb	r1, [r7, #6]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fc fd1f 	bl	8001638 <SD_disk_ioctl>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <disk_status+0x30>)
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	79fa      	ldrb	r2, [r7, #7]
 8004c20:	4905      	ldr	r1, [pc, #20]	; (8004c38 <disk_status+0x30>)
 8004c22:	440a      	add	r2, r1
 8004c24:	7a12      	ldrb	r2, [r2, #8]
 8004c26:	4610      	mov	r0, r2
 8004c28:	4798      	blx	r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000238 	.word	0x20000238

08004c3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	4a0d      	ldr	r2, [pc, #52]	; (8004c84 <disk_initialize+0x48>)
 8004c4e:	5cd3      	ldrb	r3, [r2, r3]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d111      	bne.n	8004c78 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	4a0b      	ldr	r2, [pc, #44]	; (8004c84 <disk_initialize+0x48>)
 8004c58:	2101      	movs	r1, #1
 8004c5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <disk_initialize+0x48>)
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	79fa      	ldrb	r2, [r7, #7]
 8004c6a:	4906      	ldr	r1, [pc, #24]	; (8004c84 <disk_initialize+0x48>)
 8004c6c:	440a      	add	r2, r1
 8004c6e:	7a12      	ldrb	r2, [r2, #8]
 8004c70:	4610      	mov	r0, r2
 8004c72:	4798      	blx	r3
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000238 	.word	0x20000238

08004c88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <disk_read+0x3c>)
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	689c      	ldr	r4, [r3, #8]
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	4a07      	ldr	r2, [pc, #28]	; (8004cc4 <disk_read+0x3c>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	7a18      	ldrb	r0, [r3, #8]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	47a0      	blx	r4
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd90      	pop	{r4, r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000238 	.word	0x20000238

08004cc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <disk_write+0x3c>)
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68dc      	ldr	r4, [r3, #12]
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <disk_write+0x3c>)
 8004ce8:	4413      	add	r3, r2
 8004cea:	7a18      	ldrb	r0, [r3, #8]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	47a0      	blx	r4
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd90      	pop	{r4, r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000238 	.word	0x20000238

08004d08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	603a      	str	r2, [r7, #0]
 8004d12:	71fb      	strb	r3, [r7, #7]
 8004d14:	460b      	mov	r3, r1
 8004d16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <disk_ioctl+0x38>)
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	79fa      	ldrb	r2, [r7, #7]
 8004d26:	4906      	ldr	r1, [pc, #24]	; (8004d40 <disk_ioctl+0x38>)
 8004d28:	440a      	add	r2, r1
 8004d2a:	7a10      	ldrb	r0, [r2, #8]
 8004d2c:	79b9      	ldrb	r1, [r7, #6]
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	4798      	blx	r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	73fb      	strb	r3, [r7, #15]
  return res;
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000238 	.word	0x20000238

08004d44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004d58:	e007      	b.n	8004d6a <mem_cpy+0x26>
		*d++ = *s++;
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	1c53      	adds	r3, r2, #1
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	6179      	str	r1, [r7, #20]
 8004d66:	7812      	ldrb	r2, [r2, #0]
 8004d68:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	1e5a      	subs	r2, r3, #1
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f2      	bne.n	8004d5a <mem_cpy+0x16>
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr

08004d7e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004d7e:	b480      	push	{r7}
 8004d80:	b087      	sub	sp, #28
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004d8e:	e005      	b.n	8004d9c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	617a      	str	r2, [r7, #20]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	1e5a      	subs	r2, r3, #1
 8004da0:	607a      	str	r2, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f4      	bne.n	8004d90 <mem_set+0x12>
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004db0:	b480      	push	{r7}
 8004db2:	b089      	sub	sp, #36	; 0x24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004dc8:	bf00      	nop
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00d      	beq.n	8004df0 <mem_cmp+0x40>
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	61fa      	str	r2, [r7, #28]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	61ba      	str	r2, [r7, #24]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	1acb      	subs	r3, r1, r3
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ec      	beq.n	8004dca <mem_cmp+0x1a>
	return r;
 8004df0:	697b      	ldr	r3, [r7, #20]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3724      	adds	r7, #36	; 0x24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr

08004dfc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004e06:	e002      	b.n	8004e0e <chk_chr+0x12>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <chk_chr+0x26>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d1f2      	bne.n	8004e08 <chk_chr+0xc>
	return *str;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	781b      	ldrb	r3, [r3, #0]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e038      	b.n	8004eb6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8004e44:	492f      	ldr	r1, [pc, #188]	; (8004f04 <chk_lock+0xd4>)
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d029      	beq.n	8004eac <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004e58:	492a      	ldr	r1, [pc, #168]	; (8004f04 <chk_lock+0xd4>)
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d11e      	bne.n	8004eb0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8004e72:	4924      	ldr	r1, [pc, #144]	; (8004f04 <chk_lock+0xd4>)
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4613      	mov	r3, r2
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	3304      	adds	r3, #4
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d110      	bne.n	8004eb0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004e8e:	491d      	ldr	r1, [pc, #116]	; (8004f04 <chk_lock+0xd4>)
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4613      	mov	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	881a      	ldrh	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d102      	bne.n	8004eb0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004eaa:	e007      	b.n	8004ebc <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004eac:	2301      	movs	r3, #1
 8004eae:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d9c3      	bls.n	8004e44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d109      	bne.n	8004ed6 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <chk_lock+0x9e>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d101      	bne.n	8004ed2 <chk_lock+0xa2>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e013      	b.n	8004efa <chk_lock+0xca>
 8004ed2:	2312      	movs	r3, #18
 8004ed4:	e011      	b.n	8004efa <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <chk_lock+0xc4>
 8004edc:	4909      	ldr	r1, [pc, #36]	; (8004f04 <chk_lock+0xd4>)
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	330a      	adds	r3, #10
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef2:	d101      	bne.n	8004ef8 <chk_lock+0xc8>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	e000      	b.n	8004efa <chk_lock+0xca>
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr
 8004f04:	20000220 	.word	0x20000220

08004f08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	e002      	b.n	8004f1a <enq_lock+0x12>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3301      	adds	r3, #1
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d809      	bhi.n	8004f34 <enq_lock+0x2c>
 8004f20:	490a      	ldr	r1, [pc, #40]	; (8004f4c <enq_lock+0x44>)
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4613      	mov	r3, r2
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1ef      	bne.n	8004f14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	bf14      	ite	ne
 8004f3a:	2301      	movne	r3, #1
 8004f3c:	2300      	moveq	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000220 	.word	0x20000220

08004f50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	e02b      	b.n	8004fb8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8004f60:	4955      	ldr	r1, [pc, #340]	; (80050b8 <inc_lock+0x168>)
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4613      	mov	r3, r2
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d11b      	bne.n	8004fb2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8004f7a:	494f      	ldr	r1, [pc, #316]	; (80050b8 <inc_lock+0x168>)
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	3304      	adds	r3, #4
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d10d      	bne.n	8004fb2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8004f96:	4948      	ldr	r1, [pc, #288]	; (80050b8 <inc_lock+0x168>)
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	881a      	ldrh	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d006      	beq.n	8004fc0 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d9d0      	bls.n	8004f60 <inc_lock+0x10>
 8004fbe:	e000      	b.n	8004fc2 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8004fc0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d145      	bne.n	8005054 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	e002      	b.n	8004fd4 <inc_lock+0x84>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d809      	bhi.n	8004fee <inc_lock+0x9e>
 8004fda:	4937      	ldr	r1, [pc, #220]	; (80050b8 <inc_lock+0x168>)
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ef      	bne.n	8004fce <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d101      	bne.n	8004ff8 <inc_lock+0xa8>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e05a      	b.n	80050ae <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8004ffe:	482e      	ldr	r0, [pc, #184]	; (80050b8 <inc_lock+0x168>)
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4613      	mov	r3, r2
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4403      	add	r3, r0
 800500c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005014:	4828      	ldr	r0, [pc, #160]	; (80050b8 <inc_lock+0x168>)
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4613      	mov	r3, r2
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4403      	add	r3, r0
 8005022:	3304      	adds	r3, #4
 8005024:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800502c:	4922      	ldr	r1, [pc, #136]	; (80050b8 <inc_lock+0x168>)
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4613      	mov	r3, r2
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	3308      	adds	r3, #8
 800503c:	4602      	mov	r2, r0
 800503e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005040:	491d      	ldr	r1, [pc, #116]	; (80050b8 <inc_lock+0x168>)
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4613      	mov	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	330a      	adds	r3, #10
 8005050:	2200      	movs	r2, #0
 8005052:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <inc_lock+0x124>
 800505a:	4917      	ldr	r1, [pc, #92]	; (80050b8 <inc_lock+0x168>)
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	330a      	adds	r3, #10
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <inc_lock+0x124>
 8005070:	2300      	movs	r3, #0
 8005072:	e01c      	b.n	80050ae <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <inc_lock+0x142>
 800507a:	490f      	ldr	r1, [pc, #60]	; (80050b8 <inc_lock+0x168>)
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4613      	mov	r3, r2
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	330a      	adds	r3, #10
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	3301      	adds	r3, #1
 800508e:	b299      	uxth	r1, r3
 8005090:	e001      	b.n	8005096 <inc_lock+0x146>
 8005092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005096:	4808      	ldr	r0, [pc, #32]	; (80050b8 <inc_lock+0x168>)
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4613      	mov	r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4403      	add	r3, r0
 80050a4:	330a      	adds	r3, #10
 80050a6:	460a      	mov	r2, r1
 80050a8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3301      	adds	r3, #1
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr
 80050b8:	20000220 	.word	0x20000220

080050bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	607b      	str	r3, [r7, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d82e      	bhi.n	800512e <dec_lock+0x72>
		n = Files[i].ctr;
 80050d0:	491b      	ldr	r1, [pc, #108]	; (8005140 <dec_lock+0x84>)
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	330a      	adds	r3, #10
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80050e4:	89fb      	ldrh	r3, [r7, #14]
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	d101      	bne.n	80050f0 <dec_lock+0x34>
 80050ec:	2300      	movs	r3, #0
 80050ee:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80050f0:	89fb      	ldrh	r3, [r7, #14]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <dec_lock+0x40>
 80050f6:	89fb      	ldrh	r3, [r7, #14]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80050fc:	4910      	ldr	r1, [pc, #64]	; (8005140 <dec_lock+0x84>)
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	330a      	adds	r3, #10
 800510c:	89fa      	ldrh	r2, [r7, #14]
 800510e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005110:	89fb      	ldrh	r3, [r7, #14]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d108      	bne.n	8005128 <dec_lock+0x6c>
 8005116:	490a      	ldr	r1, [pc, #40]	; (8005140 <dec_lock+0x84>)
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	737b      	strb	r3, [r7, #13]
 800512c:	e001      	b.n	8005132 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800512e:	2302      	movs	r3, #2
 8005130:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005132:	7b7b      	ldrb	r3, [r7, #13]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000220 	.word	0x20000220

08005144 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e016      	b.n	8005180 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005152:	490f      	ldr	r1, [pc, #60]	; (8005190 <clear_lock+0x4c>)
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4613      	mov	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d108      	bne.n	800517a <clear_lock+0x36>
 8005168:	4909      	ldr	r1, [pc, #36]	; (8005190 <clear_lock+0x4c>)
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4613      	mov	r3, r2
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3301      	adds	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d9e5      	bls.n	8005152 <clear_lock+0xe>
	}
}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr
 8005190:	20000220 	.word	0x20000220

08005194 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d038      	beq.n	800521c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80051b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	2301      	movs	r3, #1
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	f7ff fd83 	bl	8004cc8 <disk_write>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <sync_window+0x3a>
			res = FR_DISK_ERR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
 80051cc:	e026      	b.n	800521c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d218      	bcs.n	800521c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e010      	b.n	8005216 <sync_window+0x82>
					wsect += fs->fsize;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	2301      	movs	r3, #1
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	f7ff fd5c 	bl	8004cc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	3b01      	subs	r3, #1
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d8eb      	bhi.n	80051f4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800521c:	7bfb      	ldrb	r3, [r7, #15]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d01b      	beq.n	8005278 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff ffa7 	bl	8005194 <sync_window>
 8005246:	4603      	mov	r3, r0
 8005248:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d113      	bne.n	8005278 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	2301      	movs	r3, #1
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	f7ff fd14 	bl	8004c88 <disk_read>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005266:	f04f 33ff 	mov.w	r3, #4294967295
 800526a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff ff82 	bl	8005194 <sync_window>
 8005290:	4603      	mov	r3, r0
 8005292:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f040 809b 	bne.w	80053d2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	f040 8088 	bne.w	80053b8 <sync_fs+0x136>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	f040 8082 	bne.w	80053b8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ba:	2100      	movs	r1, #0
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fd5e 	bl	8004d7e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2255      	movs	r2, #85	; 0x55
 80052c6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	22aa      	movs	r2, #170	; 0xaa
 80052ce:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2252      	movs	r2, #82	; 0x52
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2252      	movs	r2, #82	; 0x52
 80052dc:	705a      	strb	r2, [r3, #1]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2261      	movs	r2, #97	; 0x61
 80052e2:	709a      	strb	r2, [r3, #2]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2241      	movs	r2, #65	; 0x41
 80052e8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2272      	movs	r2, #114	; 0x72
 80052ee:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2272      	movs	r2, #114	; 0x72
 80052f6:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2241      	movs	r2, #65	; 0x41
 80052fe:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2261      	movs	r2, #97	; 0x61
 8005306:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005310:	b2da      	uxtb	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800531e:	b29b      	uxth	r3, r3
 8005320:	0a1b      	lsrs	r3, r3, #8
 8005322:	b29b      	uxth	r3, r3
 8005324:	b2da      	uxtb	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005332:	0c1b      	lsrs	r3, r3, #16
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005342:	0e1b      	lsrs	r3, r3, #24
 8005344:	b2da      	uxtb	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005352:	b2da      	uxtb	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005360:	b29b      	uxth	r3, r3
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	b29b      	uxth	r3, r3
 8005366:	b2da      	uxtb	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	b2da      	uxtb	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005384:	0e1b      	lsrs	r3, r3, #24
 8005386:	b2da      	uxtb	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80053aa:	2301      	movs	r3, #1
 80053ac:	f7ff fc8c 	bl	8004cc8 <disk_write>
			fs->fsi_flag = 0;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80053be:	2200      	movs	r2, #0
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fca0 	bl	8004d08 <disk_ioctl>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	3b02      	subs	r3, #2
 80053ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053f2:	3b02      	subs	r3, #2
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d301      	bcc.n	80053fe <clust2sect+0x22>
 80053fa:	2300      	movs	r3, #0
 80053fc:	e00a      	b.n	8005414 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005404:	461a      	mov	r2, r3
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	fb03 f202 	mul.w	r2, r3, r2
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005412:	4413      	add	r3, r2
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b086      	sub	sp, #24
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d905      	bls.n	800543a <get_fat+0x1c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <get_fat+0x22>
		val = 1;	/* Internal error */
 800543a:	2301      	movs	r3, #1
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e0a0      	b.n	8005582 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005440:	f04f 33ff 	mov.w	r3, #4294967295
 8005444:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800544c:	2b02      	cmp	r3, #2
 800544e:	d044      	beq.n	80054da <get_fat+0xbc>
 8005450:	2b03      	cmp	r3, #3
 8005452:	d063      	beq.n	800551c <get_fat+0xfe>
 8005454:	2b01      	cmp	r3, #1
 8005456:	f040 808a 	bne.w	800556e <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	0a5b      	lsrs	r3, r3, #9
 8005472:	4413      	add	r3, r2
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff fed5 	bl	8005226 <move_window>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d178      	bne.n	8005574 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	5cd3      	ldrb	r3, [r2, r3]
 8005490:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	0a5b      	lsrs	r3, r3, #9
 800549c:	4413      	add	r3, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff fec0 	bl	8005226 <move_window>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d165      	bne.n	8005578 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	5cd3      	ldrb	r3, [r2, r3]
 80054b6:	021b      	lsls	r3, r3, #8
 80054b8:	461a      	mov	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <get_fat+0xb2>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	e002      	b.n	80054d6 <get_fat+0xb8>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d6:	617b      	str	r3, [r7, #20]
			break;
 80054d8:	e053      	b.n	8005582 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	0a1b      	lsrs	r3, r3, #8
 80054e4:	4413      	add	r3, r2
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff fe9c 	bl	8005226 <move_window>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d143      	bne.n	800557c <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3301      	adds	r3, #1
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	b21a      	sxth	r2, r3
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b21b      	sxth	r3, r3
 8005512:	4313      	orrs	r3, r2
 8005514:	b21b      	sxth	r3, r3
 8005516:	b29b      	uxth	r3, r3
 8005518:	617b      	str	r3, [r7, #20]
			break;
 800551a:	e032      	b.n	8005582 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	09db      	lsrs	r3, r3, #7
 8005526:	4413      	add	r3, r2
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff fe7b 	bl	8005226 <move_window>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d124      	bne.n	8005580 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	3303      	adds	r3, #3
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	061a      	lsls	r2, r3, #24
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	3302      	adds	r3, #2
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	041b      	lsls	r3, r3, #16
 8005554:	4313      	orrs	r3, r2
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	3201      	adds	r2, #1
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	0212      	lsls	r2, r2, #8
 800555e:	4313      	orrs	r3, r2
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	4313      	orrs	r3, r2
 8005566:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800556a:	617b      	str	r3, [r7, #20]
			break;
 800556c:	e009      	b.n	8005582 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 800556e:	2301      	movs	r3, #1
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	e006      	b.n	8005582 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005574:	bf00      	nop
 8005576:	e004      	b.n	8005582 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005578:	bf00      	nop
 800557a:	e002      	b.n	8005582 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800557c:	bf00      	nop
 800557e:	e000      	b.n	8005582 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005580:	bf00      	nop
		}
	}

	return val;
 8005582:	697b      	ldr	r3, [r7, #20]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d905      	bls.n	80055aa <put_fat+0x1e>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <put_fat+0x24>
		res = FR_INT_ERR;
 80055aa:	2302      	movs	r3, #2
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e0f3      	b.n	8005798 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d074      	beq.n	80056a4 <put_fat+0x118>
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	f000 8099 	beq.w	80056f2 <put_fat+0x166>
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	f040 80df 	bne.w	8005784 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4413      	add	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	0a5b      	lsrs	r3, r3, #9
 80055de:	4413      	add	r3, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fe1f 	bl	8005226 <move_window>
 80055e8:	4603      	mov	r3, r0
 80055ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055ec:	7ffb      	ldrb	r3, [r7, #31]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 80cb 	bne.w	800578a <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	617a      	str	r2, [r7, #20]
 80055fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <put_fat+0x9e>
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	b25b      	sxtb	r3, r3
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	b25a      	sxtb	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	b25b      	sxtb	r3, r3
 8005622:	4313      	orrs	r3, r2
 8005624:	b25b      	sxtb	r3, r3
 8005626:	b2db      	uxtb	r3, r3
 8005628:	e001      	b.n	800562e <put_fat+0xa2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	0a5b      	lsrs	r3, r3, #9
 8005644:	4413      	add	r3, r2
 8005646:	4619      	mov	r1, r3
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7ff fdec 	bl	8005226 <move_window>
 800564e:	4603      	mov	r3, r0
 8005650:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005652:	7ffb      	ldrb	r3, [r7, #31]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f040 809a 	bne.w	800578e <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <put_fat+0xec>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	b2db      	uxtb	r3, r3
 8005676:	e00e      	b.n	8005696 <put_fat+0x10a>
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	b25b      	sxtb	r3, r3
 800567e:	f023 030f 	bic.w	r3, r3, #15
 8005682:	b25a      	sxtb	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	b25b      	sxtb	r3, r3
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	b25b      	sxtb	r3, r3
 8005690:	4313      	orrs	r3, r2
 8005692:	b25b      	sxtb	r3, r3
 8005694:	b2db      	uxtb	r3, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80056a2:	e079      	b.n	8005798 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	4413      	add	r3, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff fdb7 	bl	8005226 <move_window>
 80056b8:	4603      	mov	r3, r0
 80056ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056bc:	7ffb      	ldrb	r3, [r7, #31]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d167      	bne.n	8005792 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	0a1b      	lsrs	r3, r3, #8
 80056de:	b29a      	uxth	r2, r3
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	3301      	adds	r3, #1
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80056f0:	e052      	b.n	8005798 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	09db      	lsrs	r3, r3, #7
 80056fc:	4413      	add	r3, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff fd90 	bl	8005226 <move_window>
 8005706:	4603      	mov	r3, r0
 8005708:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800570a:	7ffb      	ldrb	r3, [r7, #31]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d142      	bne.n	8005796 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	3303      	adds	r3, #3
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	061a      	lsls	r2, r3, #24
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	3302      	adds	r3, #2
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	041b      	lsls	r3, r3, #16
 800572e:	4313      	orrs	r3, r2
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	3201      	adds	r2, #1
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	0212      	lsls	r2, r2, #8
 8005738:	4313      	orrs	r3, r2
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	7812      	ldrb	r2, [r2, #0]
 800573e:	4313      	orrs	r3, r2
 8005740:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4313      	orrs	r3, r2
 8005748:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	b29b      	uxth	r3, r3
 8005756:	0a1b      	lsrs	r3, r3, #8
 8005758:	b29a      	uxth	r2, r3
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	3301      	adds	r3, #1
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0c1a      	lsrs	r2, r3, #16
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	3302      	adds	r3, #2
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	0e1a      	lsrs	r2, r3, #24
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	3303      	adds	r3, #3
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005782:	e009      	b.n	8005798 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8005784:	2302      	movs	r3, #2
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e006      	b.n	8005798 <put_fat+0x20c>
			if (res != FR_OK) break;
 800578a:	bf00      	nop
 800578c:	e004      	b.n	8005798 <put_fat+0x20c>
			if (res != FR_OK) break;
 800578e:	bf00      	nop
 8005790:	e002      	b.n	8005798 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005792:	bf00      	nop
 8005794:	e000      	b.n	8005798 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005796:	bf00      	nop
		}
	}

	return res;
 8005798:	7ffb      	ldrb	r3, [r7, #31]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d905      	bls.n	80057be <remove_chain+0x1c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d302      	bcc.n	80057c4 <remove_chain+0x22>
		res = FR_INT_ERR;
 80057be:	2302      	movs	r3, #2
 80057c0:	73fb      	strb	r3, [r7, #15]
 80057c2:	e043      	b.n	800584c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80057c8:	e036      	b.n	8005838 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fe26 	bl	800541e <get_fat>
 80057d2:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d035      	beq.n	8005846 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d102      	bne.n	80057e6 <remove_chain+0x44>
 80057e0:	2302      	movs	r3, #2
 80057e2:	73fb      	strb	r3, [r7, #15]
 80057e4:	e032      	b.n	800584c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d102      	bne.n	80057f4 <remove_chain+0x52>
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
 80057f2:	e02b      	b.n	800584c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80057f4:	2200      	movs	r2, #0
 80057f6:	6839      	ldr	r1, [r7, #0]
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff fec7 	bl	800558c <put_fat>
 80057fe:	4603      	mov	r3, r0
 8005800:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d120      	bne.n	800584a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005812:	d00f      	beq.n	8005834 <remove_chain+0x92>
				fs->free_clust++;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	b2da      	uxtb	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d3c2      	bcc.n	80057ca <remove_chain+0x28>
 8005844:	e002      	b.n	800584c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <remove_chain+0xaa>
			if (res != FR_OK) break;
 800584a:	bf00      	nop
		}
	}

	return res;
 800584c:	7bfb      	ldrb	r3, [r7, #15]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b086      	sub	sp, #24
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10f      	bne.n	8005886 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800586c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d005      	beq.n	8005880 <create_chain+0x2a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	429a      	cmp	r2, r3
 800587e:	d31c      	bcc.n	80058ba <create_chain+0x64>
 8005880:	2301      	movs	r3, #1
 8005882:	613b      	str	r3, [r7, #16]
 8005884:	e019      	b.n	80058ba <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fdc8 	bl	800541e <get_fat>
 800588e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d801      	bhi.n	800589a <create_chain+0x44>
 8005896:	2301      	movs	r3, #1
 8005898:	e076      	b.n	8005988 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a0:	d101      	bne.n	80058a6 <create_chain+0x50>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	e070      	b.n	8005988 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d201      	bcs.n	80058b6 <create_chain+0x60>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	e068      	b.n	8005988 <create_chain+0x132>
		scl = clst;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	3301      	adds	r3, #1
 80058c2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d307      	bcc.n	80058e0 <create_chain+0x8a>
			ncl = 2;
 80058d0:	2302      	movs	r3, #2
 80058d2:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d901      	bls.n	80058e0 <create_chain+0x8a>
 80058dc:	2300      	movs	r3, #0
 80058de:	e053      	b.n	8005988 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80058e0:	6979      	ldr	r1, [r7, #20]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fd9b 	bl	800541e <get_fat>
 80058e8:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00e      	beq.n	800590e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d002      	beq.n	80058fe <create_chain+0xa8>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <create_chain+0xac>
			return cs;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	e042      	b.n	8005988 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	429a      	cmp	r2, r3
 8005908:	d1d9      	bne.n	80058be <create_chain+0x68>
 800590a:	2300      	movs	r3, #0
 800590c:	e03c      	b.n	8005988 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800590e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005910:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005914:	6979      	ldr	r1, [r7, #20]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fe38 	bl	800558c <put_fat>
 800591c:	4603      	mov	r3, r0
 800591e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <create_chain+0xe4>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d006      	beq.n	800593a <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff fe2b 	bl	800558c <put_fat>
 8005936:	4603      	mov	r3, r0
 8005938:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11a      	bne.n	8005976 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d018      	beq.n	8005986 <create_chain+0x130>
			fs->free_clust--;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800595a:	1e5a      	subs	r2, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	b2da      	uxtb	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8005974:	e007      	b.n	8005986 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d102      	bne.n	8005982 <create_chain+0x12c>
 800597c:	f04f 33ff 	mov.w	r3, #4294967295
 8005980:	e000      	b.n	8005984 <create_chain+0x12e>
 8005982:	2301      	movs	r3, #1
 8005984:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005986:	697b      	ldr	r3, [r7, #20]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80059a0:	3304      	adds	r3, #4
 80059a2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	0a5b      	lsrs	r3, r3, #9
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80059ae:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80059b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	613a      	str	r2, [r7, #16]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <clmt_clust+0x3c>
 80059c8:	2300      	movs	r3, #0
 80059ca:	e010      	b.n	80059ee <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d307      	bcc.n	80059e4 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	3304      	adds	r3, #4
 80059e0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80059e2:	e7e9      	b.n	80059b8 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80059e4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	4413      	add	r3, r2
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005a12:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d007      	beq.n	8005a2a <dir_sdi+0x32>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d301      	bcc.n	8005a2e <dir_sdi+0x36>
		return FR_INT_ERR;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e074      	b.n	8005b18 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10c      	bne.n	8005a4e <dir_sdi+0x56>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	d105      	bne.n	8005a4e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a48:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005a4c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d111      	bne.n	8005a78 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a5a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005a5e:	461a      	mov	r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d301      	bcc.n	8005a6a <dir_sdi+0x72>
			return FR_INT_ERR;
 8005a66:	2302      	movs	r3, #2
 8005a68:	e056      	b.n	8005b18 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a70:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	e032      	b.n	8005ade <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a7e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005a86:	e01e      	b.n	8005ac6 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a8e:	6979      	ldr	r1, [r7, #20]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fcc4 	bl	800541e <get_fat>
 8005a96:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d101      	bne.n	8005aa4 <dir_sdi+0xac>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e039      	b.n	8005b18 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d907      	bls.n	8005aba <dir_sdi+0xc2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ab0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d301      	bcc.n	8005abe <dir_sdi+0xc6>
				return FR_INT_ERR;
 8005aba:	2302      	movs	r3, #2
 8005abc:	e02c      	b.n	8005b18 <dir_sdi+0x120>
			idx -= ic;
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d2dc      	bcs.n	8005a88 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ad4:	6979      	ldr	r1, [r7, #20]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff fc80 	bl	80053dc <clust2sect>
 8005adc:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <dir_sdi+0xf8>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e013      	b.n	8005b18 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	091a      	lsrs	r2, r3, #4
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	441a      	add	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b04:	461a      	mov	r2, r3
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	015b      	lsls	r3, r3, #5
 8005b0e:	441a      	add	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005b20:	b590      	push	{r4, r7, lr}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8005b30:	3301      	adds	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <dir_next+0x26>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <dir_next+0x2a>
		return FR_NO_FILE;
 8005b46:	2304      	movs	r3, #4
 8005b48:	e0dd      	b.n	8005d06 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 80c6 	bne.w	8005ce2 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b74:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005b78:	461a      	mov	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	f0c0 80b0 	bcc.w	8005ce2 <dir_next+0x1c2>
				return FR_NO_FILE;
 8005b82:	2304      	movs	r3, #4
 8005b84:	e0bf      	b.n	8005d06 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	091b      	lsrs	r3, r3, #4
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005b90:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005b94:	3a01      	subs	r2, #1
 8005b96:	4013      	ands	r3, r2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f040 80a2 	bne.w	8005ce2 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f7ff fc36 	bl	800541e <get_fat>
 8005bb2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d801      	bhi.n	8005bbe <dir_next+0x9e>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e0a3      	b.n	8005d06 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d101      	bne.n	8005bca <dir_next+0xaa>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e09d      	b.n	8005d06 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d374      	bcc.n	8005cc4 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <dir_next+0xc4>
 8005be0:	2304      	movs	r3, #4
 8005be2:	e090      	b.n	8005d06 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f7ff fe2f 	bl	8005856 <create_chain>
 8005bf8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <dir_next+0xe4>
 8005c00:	2307      	movs	r3, #7
 8005c02:	e080      	b.n	8005d06 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <dir_next+0xee>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e07b      	b.n	8005d06 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d101      	bne.n	8005c1a <dir_next+0xfa>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e075      	b.n	8005d06 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fab7 	bl	8005194 <sync_window>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <dir_next+0x110>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e06a      	b.n	8005d06 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff f89e 	bl	8004d7e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8005c4e:	6979      	ldr	r1, [r7, #20]
 8005c50:	4610      	mov	r0, r2
 8005c52:	f7ff fbc3 	bl	80053dc <clust2sect>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	e01b      	b.n	8005c9a <dir_next+0x17a>
						dp->fs->wflag = 1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff fa8d 	bl	8005194 <sync_window>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <dir_next+0x164>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e040      	b.n	8005d06 <dir_next+0x1e6>
						dp->fs->winsect++;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c8a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005c8e:	3201      	adds	r2, #1
 8005c90:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	3301      	adds	r3, #1
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ca0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d3da      	bcc.n	8005c62 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cb2:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	1a8a      	subs	r2, r1, r2
 8005cc0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cd2:	6979      	ldr	r1, [r7, #20]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fb81 	bl	80053dc <clust2sect>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	015b      	lsls	r3, r3, #5
 8005cfc:	441a      	add	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd90      	pop	{r4, r7, pc}

08005d0e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005d18:	2100      	movs	r1, #0
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff fe6c 	bl	80059f8 <dir_sdi>
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d131      	bne.n	8005d8e <dir_alloc+0x80>
		n = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	f7ff fa72 	bl	8005226 <move_window>
 8005d42:	4603      	mov	r3, r0
 8005d44:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d11f      	bne.n	8005d8c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2be5      	cmp	r3, #229	; 0xe5
 8005d56:	d005      	beq.n	8005d64 <dir_alloc+0x56>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d107      	bne.n	8005d74 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60bb      	str	r3, [r7, #8]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d102      	bne.n	8005d78 <dir_alloc+0x6a>
 8005d72:	e00c      	b.n	8005d8e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005d74:	2300      	movs	r3, #0
 8005d76:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005d78:	2101      	movs	r1, #1
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fed0 	bl	8005b20 <dir_next>
 8005d80:	4603      	mov	r3, r0
 8005d82:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0d1      	beq.n	8005d2e <dir_alloc+0x20>
 8005d8a:	e000      	b.n	8005d8e <dir_alloc+0x80>
			if (res != FR_OK) break;
 8005d8c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d101      	bne.n	8005d98 <dir_alloc+0x8a>
 8005d94:	2307      	movs	r3, #7
 8005d96:	73fb      	strb	r3, [r7, #15]
	return res;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	331b      	adds	r3, #27
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	b21a      	sxth	r2, r3
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	331a      	adds	r3, #26
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	b21b      	sxth	r3, r3
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b21b      	sxth	r3, r3
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d10f      	bne.n	8005df0 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	3315      	adds	r3, #21
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	b21a      	sxth	r2, r3
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	3314      	adds	r3, #20
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	b21b      	sxth	r3, r3
 8005de2:	4313      	orrs	r3, r2
 8005de4:	b21b      	sxth	r3, r3
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	041b      	lsls	r3, r3, #16
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

	return cl;
 8005df0:	68fb      	ldr	r3, [r7, #12]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr

08005dfc <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	331a      	adds	r3, #26
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	0a1b      	lsrs	r3, r3, #8
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	331b      	adds	r3, #27
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	0c1a      	lsrs	r2, r3, #16
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3314      	adds	r3, #20
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	0c1b      	lsrs	r3, r3, #16
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	0a1b      	lsrs	r3, r3, #8
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3315      	adds	r3, #21
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005e50:	2100      	movs	r1, #0
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff fdd0 	bl	80059f8 <dir_sdi>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <dir_find+0x1e>
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	e03b      	b.n	8005ede <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7ff f9d6 	bl	8005226 <move_window>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d128      	bne.n	8005ed6 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e8a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <dir_find+0x56>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	75fb      	strb	r3, [r7, #23]
 8005e9c:	e01e      	b.n	8005edc <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	330b      	adds	r3, #11
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <dir_find+0x7a>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005eb2:	220b      	movs	r2, #11
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6938      	ldr	r0, [r7, #16]
 8005eb8:	f7fe ff7a 	bl	8004db0 <mem_cmp>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fe2b 	bl	8005b20 <dir_next>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0c8      	beq.n	8005e66 <dir_find+0x1e>
 8005ed4:	e002      	b.n	8005edc <dir_find+0x94>
		if (res != FR_OK) break;
 8005ed6:	bf00      	nop
 8005ed8:	e000      	b.n	8005edc <dir_find+0x94>
			break;
 8005eda:	bf00      	nop

	return res;
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005eee:	2101      	movs	r1, #1
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff ff0c 	bl	8005d0e <dir_alloc>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d126      	bne.n	8005f4e <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f7ff f989 	bl	8005226 <move_window>
 8005f14:	4603      	mov	r3, r0
 8005f16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d117      	bne.n	8005f4e <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f24:	2220      	movs	r2, #32
 8005f26:	2100      	movs	r1, #0
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe ff28 	bl	8004d7e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f3a:	220b      	movs	r2, #11
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f7fe ff01 	bl	8004d44 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e002      	b.n	8005f70 <create_name+0x18>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b2f      	cmp	r3, #47	; 0x2f
 8005f76:	d0f8      	beq.n	8005f6a <create_name+0x12>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b5c      	cmp	r3, #92	; 0x5c
 8005f7e:	d0f4      	beq.n	8005f6a <create_name+0x12>
	sfn = dp->fn;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f86:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005f88:	220b      	movs	r2, #11
 8005f8a:	2120      	movs	r1, #32
 8005f8c:	68b8      	ldr	r0, [r7, #8]
 8005f8e:	f7fe fef6 	bl	8004d7e <mem_set>
	si = i = b = 0; ni = 8;
 8005f92:	2300      	movs	r3, #0
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	2300      	movs	r3, #0
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	617a      	str	r2, [r7, #20]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4413      	add	r3, r2
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005fb0:	7fbb      	ldrb	r3, [r7, #30]
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d953      	bls.n	800605e <create_name+0x106>
 8005fb6:	7fbb      	ldrb	r3, [r7, #30]
 8005fb8:	2b2f      	cmp	r3, #47	; 0x2f
 8005fba:	d050      	beq.n	800605e <create_name+0x106>
 8005fbc:	7fbb      	ldrb	r3, [r7, #30]
 8005fbe:	2b5c      	cmp	r3, #92	; 0x5c
 8005fc0:	d04d      	beq.n	800605e <create_name+0x106>
		if (c == '.' || i >= ni) {
 8005fc2:	7fbb      	ldrb	r3, [r7, #30]
 8005fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8005fc6:	d003      	beq.n	8005fd0 <create_name+0x78>
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d30f      	bcc.n	8005ff0 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	d102      	bne.n	8005fdc <create_name+0x84>
 8005fd6:	7fbb      	ldrb	r3, [r7, #30]
 8005fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8005fda:	d001      	beq.n	8005fe0 <create_name+0x88>
 8005fdc:	2306      	movs	r3, #6
 8005fde:	e073      	b.n	80060c8 <create_name+0x170>
			i = 8; ni = 11;
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	613b      	str	r3, [r7, #16]
 8005fe4:	230b      	movs	r3, #11
 8005fe6:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005fe8:	7ffb      	ldrb	r3, [r7, #31]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	77fb      	strb	r3, [r7, #31]
 8005fee:	e035      	b.n	800605c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005ff0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	da08      	bge.n	800600a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005ff8:	7ffb      	ldrb	r3, [r7, #31]
 8005ffa:	f043 0303 	orr.w	r3, r3, #3
 8005ffe:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006000:	7fbb      	ldrb	r3, [r7, #30]
 8006002:	3b80      	subs	r3, #128	; 0x80
 8006004:	4a32      	ldr	r2, [pc, #200]	; (80060d0 <create_name+0x178>)
 8006006:	5cd3      	ldrb	r3, [r2, r3]
 8006008:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800600a:	7fbb      	ldrb	r3, [r7, #30]
 800600c:	4619      	mov	r1, r3
 800600e:	4831      	ldr	r0, [pc, #196]	; (80060d4 <create_name+0x17c>)
 8006010:	f7fe fef4 	bl	8004dfc <chk_chr>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <create_name+0xc6>
				return FR_INVALID_NAME;
 800601a:	2306      	movs	r3, #6
 800601c:	e054      	b.n	80060c8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800601e:	7fbb      	ldrb	r3, [r7, #30]
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	d907      	bls.n	8006034 <create_name+0xdc>
 8006024:	7fbb      	ldrb	r3, [r7, #30]
 8006026:	2b5a      	cmp	r3, #90	; 0x5a
 8006028:	d804      	bhi.n	8006034 <create_name+0xdc>
				b |= 2;
 800602a:	7ffb      	ldrb	r3, [r7, #31]
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	77fb      	strb	r3, [r7, #31]
 8006032:	e00c      	b.n	800604e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006034:	7fbb      	ldrb	r3, [r7, #30]
 8006036:	2b60      	cmp	r3, #96	; 0x60
 8006038:	d909      	bls.n	800604e <create_name+0xf6>
 800603a:	7fbb      	ldrb	r3, [r7, #30]
 800603c:	2b7a      	cmp	r3, #122	; 0x7a
 800603e:	d806      	bhi.n	800604e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8006040:	7ffb      	ldrb	r3, [r7, #31]
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	7fbb      	ldrb	r3, [r7, #30]
 800604a:	3b20      	subs	r3, #32
 800604c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	613a      	str	r2, [r7, #16]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	4413      	add	r3, r2
 8006058:	7fba      	ldrb	r2, [r7, #30]
 800605a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800605c:	e7a1      	b.n	8005fa2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	441a      	add	r2, r3
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006068:	7fbb      	ldrb	r3, [r7, #30]
 800606a:	2b20      	cmp	r3, #32
 800606c:	d801      	bhi.n	8006072 <create_name+0x11a>
 800606e:	2304      	movs	r3, #4
 8006070:	e000      	b.n	8006074 <create_name+0x11c>
 8006072:	2300      	movs	r3, #0
 8006074:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <create_name+0x128>
 800607c:	2306      	movs	r3, #6
 800607e:	e023      	b.n	80060c8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2be5      	cmp	r3, #229	; 0xe5
 8006086:	d102      	bne.n	800608e <create_name+0x136>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2205      	movs	r2, #5
 800608c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b08      	cmp	r3, #8
 8006092:	d102      	bne.n	800609a <create_name+0x142>
 8006094:	7ffb      	ldrb	r3, [r7, #31]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800609a:	7ffb      	ldrb	r3, [r7, #31]
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d103      	bne.n	80060ac <create_name+0x154>
 80060a4:	7fbb      	ldrb	r3, [r7, #30]
 80060a6:	f043 0310 	orr.w	r3, r3, #16
 80060aa:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80060ac:	7ffb      	ldrb	r3, [r7, #31]
 80060ae:	f003 030c 	and.w	r3, r3, #12
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d103      	bne.n	80060be <create_name+0x166>
 80060b6:	7fbb      	ldrb	r3, [r7, #30]
 80060b8:	f043 0308 	orr.w	r3, r3, #8
 80060bc:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	330b      	adds	r3, #11
 80060c2:	7fba      	ldrb	r2, [r7, #30]
 80060c4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80060c6:	2300      	movs	r3, #0
#endif
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	0800a8e0 	.word	0x0800a8e0
 80060d4:	0800a88c 	.word	0x0800a88c

080060d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b2f      	cmp	r3, #47	; 0x2f
 80060e8:	d003      	beq.n	80060f2 <follow_path+0x1a>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b5c      	cmp	r3, #92	; 0x5c
 80060f0:	d102      	bne.n	80060f8 <follow_path+0x20>
		path++;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	3301      	adds	r3, #1
 80060f6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b1f      	cmp	r3, #31
 8006106:	d80a      	bhi.n	800611e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006108:	2100      	movs	r1, #0
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fc74 	bl	80059f8 <dir_sdi>
 8006110:	4603      	mov	r3, r0
 8006112:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800611c:	e045      	b.n	80061aa <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800611e:	463b      	mov	r3, r7
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff ff18 	bl	8005f58 <create_name>
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d136      	bne.n	80061a0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fe88 	bl	8005e48 <dir_find>
 8006138:	4603      	mov	r3, r0
 800613a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006142:	7adb      	ldrb	r3, [r3, #11]
 8006144:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b04      	cmp	r3, #4
 8006150:	d128      	bne.n	80061a4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006152:	7bbb      	ldrb	r3, [r7, #14]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d123      	bne.n	80061a4 <follow_path+0xcc>
 800615c:	2305      	movs	r3, #5
 800615e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006160:	e020      	b.n	80061a4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006162:	7bbb      	ldrb	r3, [r7, #14]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d11d      	bne.n	80061a8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006172:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	330b      	adds	r3, #11
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	f003 0310 	and.w	r3, r3, #16
 800617e:	2b00      	cmp	r3, #0
 8006180:	d102      	bne.n	8006188 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006182:	2305      	movs	r3, #5
 8006184:	73fb      	strb	r3, [r7, #15]
 8006186:	e010      	b.n	80061aa <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff fe06 	bl	8005da2 <ld_clust>
 8006196:	4602      	mov	r2, r0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800619e:	e7be      	b.n	800611e <follow_path+0x46>
			if (res != FR_OK) break;
 80061a0:	bf00      	nop
 80061a2:	e002      	b.n	80061aa <follow_path+0xd2>
				break;
 80061a4:	bf00      	nop
 80061a6:	e000      	b.n	80061aa <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80061a8:	bf00      	nop
		}
	}

	return res;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80061bc:	f04f 33ff 	mov.w	r3, #4294967295
 80061c0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d031      	beq.n	800622e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e002      	b.n	80061d8 <get_ldnumber+0x24>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	3301      	adds	r3, #1
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d903      	bls.n	80061e8 <get_ldnumber+0x34>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b3a      	cmp	r3, #58	; 0x3a
 80061e6:	d1f4      	bne.n	80061d2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b3a      	cmp	r3, #58	; 0x3a
 80061ee:	d11c      	bne.n	800622a <get_ldnumber+0x76>
			tp = *path;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	60fa      	str	r2, [r7, #12]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	3b30      	subs	r3, #48	; 0x30
 8006200:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b09      	cmp	r3, #9
 8006206:	d80e      	bhi.n	8006226 <get_ldnumber+0x72>
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	429a      	cmp	r2, r3
 800620e:	d10a      	bne.n	8006226 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d107      	bne.n	8006226 <get_ldnumber+0x72>
					vol = (int)i;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	3301      	adds	r3, #1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	e002      	b.n	8006230 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800622a:	2300      	movs	r3, #0
 800622c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800622e:	693b      	ldr	r3, [r7, #16]
}
 8006230:	4618      	mov	r0, r3
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
	...

0800623c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f04f 32ff 	mov.w	r2, #4294967295
 8006254:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fe ffe3 	bl	8005226 <move_window>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <check_fs+0x2e>
		return 3;
 8006266:	2303      	movs	r3, #3
 8006268:	e04a      	b.n	8006300 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006270:	3301      	adds	r3, #1
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	b21a      	sxth	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800627e:	b21b      	sxth	r3, r3
 8006280:	4313      	orrs	r3, r2
 8006282:	b21b      	sxth	r3, r3
 8006284:	4a20      	ldr	r2, [pc, #128]	; (8006308 <check_fs+0xcc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d001      	beq.n	800628e <check_fs+0x52>
		return 2;
 800628a:	2302      	movs	r3, #2
 800628c:	e038      	b.n	8006300 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3336      	adds	r3, #54	; 0x36
 8006292:	3303      	adds	r3, #3
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	061a      	lsls	r2, r3, #24
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3336      	adds	r3, #54	; 0x36
 800629c:	3302      	adds	r3, #2
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	041b      	lsls	r3, r3, #16
 80062a2:	4313      	orrs	r3, r2
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	3236      	adds	r2, #54	; 0x36
 80062a8:	3201      	adds	r2, #1
 80062aa:	7812      	ldrb	r2, [r2, #0]
 80062ac:	0212      	lsls	r2, r2, #8
 80062ae:	4313      	orrs	r3, r2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062bc:	4a13      	ldr	r2, [pc, #76]	; (800630c <check_fs+0xd0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d101      	bne.n	80062c6 <check_fs+0x8a>
		return 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e01c      	b.n	8006300 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3352      	adds	r3, #82	; 0x52
 80062ca:	3303      	adds	r3, #3
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	061a      	lsls	r2, r3, #24
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3352      	adds	r3, #82	; 0x52
 80062d4:	3302      	adds	r3, #2
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	4313      	orrs	r3, r2
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	3252      	adds	r2, #82	; 0x52
 80062e0:	3201      	adds	r2, #1
 80062e2:	7812      	ldrb	r2, [r2, #0]
 80062e4:	0212      	lsls	r2, r2, #8
 80062e6:	4313      	orrs	r3, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062f4:	4a05      	ldr	r2, [pc, #20]	; (800630c <check_fs+0xd0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d101      	bne.n	80062fe <check_fs+0xc2>
		return 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e000      	b.n	8006300 <check_fs+0xc4>

	return 1;
 80062fe:	2301      	movs	r3, #1
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	ffffaa55 	.word	0xffffaa55
 800630c:	00544146 	.word	0x00544146

08006310 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b096      	sub	sp, #88	; 0x58
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	4613      	mov	r3, r2
 800631c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006324:	68b8      	ldr	r0, [r7, #8]
 8006326:	f7ff ff45 	bl	80061b4 <get_ldnumber>
 800632a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800632c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632e:	2b00      	cmp	r3, #0
 8006330:	da01      	bge.n	8006336 <find_volume+0x26>
 8006332:	230b      	movs	r3, #11
 8006334:	e2aa      	b.n	800688c <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006336:	4a9e      	ldr	r2, [pc, #632]	; (80065b0 <find_volume+0x2a0>)
 8006338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800633e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <find_volume+0x3a>
 8006346:	230c      	movs	r3, #12
 8006348:	e2a0      	b.n	800688c <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800634e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01b      	beq.n	8006392 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006360:	4618      	mov	r0, r3
 8006362:	f7fe fc51 	bl	8004c08 <disk_status>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800636c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10c      	bne.n	8006392 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <find_volume+0x7e>
 800637e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800638a:	230a      	movs	r3, #10
 800638c:	e27e      	b.n	800688c <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800638e:	2300      	movs	r3, #0
 8006390:	e27c      	b.n	800688c <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800639a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639c:	b2da      	uxtb	r2, r3
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fc46 	bl	8004c3c <disk_initialize>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80063b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80063c2:	2303      	movs	r3, #3
 80063c4:	e262      	b.n	800688c <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <find_volume+0xcc>
 80063cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80063d8:	230a      	movs	r3, #10
 80063da:	e257      	b.n	800688c <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80063e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063e4:	f7ff ff2a 	bl	800623c <check_fs>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80063ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d155      	bne.n	80064a2 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80063f6:	2300      	movs	r3, #0
 80063f8:	643b      	str	r3, [r7, #64]	; 0x40
 80063fa:	e029      	b.n	8006450 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80063fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006406:	4413      	add	r3, r2
 8006408:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	3304      	adds	r3, #4
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d012      	beq.n	800643a <find_volume+0x12a>
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	330b      	adds	r3, #11
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	061a      	lsls	r2, r3, #24
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	330a      	adds	r3, #10
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	041b      	lsls	r3, r3, #16
 8006424:	4313      	orrs	r3, r2
 8006426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006428:	3209      	adds	r2, #9
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	0212      	lsls	r2, r2, #8
 800642e:	4313      	orrs	r3, r2
 8006430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006432:	3208      	adds	r2, #8
 8006434:	7812      	ldrb	r2, [r2, #0]
 8006436:	431a      	orrs	r2, r3
 8006438:	e000      	b.n	800643c <find_volume+0x12c>
 800643a:	2200      	movs	r2, #0
 800643c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006444:	440b      	add	r3, r1
 8006446:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800644a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800644c:	3301      	adds	r3, #1
 800644e:	643b      	str	r3, [r7, #64]	; 0x40
 8006450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006452:	2b03      	cmp	r3, #3
 8006454:	d9d2      	bls.n	80063fc <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006456:	2300      	movs	r3, #0
 8006458:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800645a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <find_volume+0x156>
 8006460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006462:	3b01      	subs	r3, #1
 8006464:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800646e:	4413      	add	r3, r2
 8006470:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006474:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <find_volume+0x178>
 800647c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800647e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006480:	f7ff fedc 	bl	800623c <check_fs>
 8006484:	4603      	mov	r3, r0
 8006486:	e000      	b.n	800648a <find_volume+0x17a>
 8006488:	2302      	movs	r3, #2
 800648a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800648e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <find_volume+0x192>
 8006496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006498:	3301      	adds	r3, #1
 800649a:	643b      	str	r3, [r7, #64]	; 0x40
 800649c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d9e1      	bls.n	8006466 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80064a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d101      	bne.n	80064ae <find_volume+0x19e>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e1ee      	b.n	800688c <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80064ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <find_volume+0x1aa>
 80064b6:	230d      	movs	r3, #13
 80064b8:	e1e8      	b.n	800688c <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	7b1b      	ldrb	r3, [r3, #12]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	b21a      	sxth	r2, r3
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	7adb      	ldrb	r3, [r3, #11]
 80064c6:	b21b      	sxth	r3, r3
 80064c8:	4313      	orrs	r3, r2
 80064ca:	b21b      	sxth	r3, r3
 80064cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d0:	d001      	beq.n	80064d6 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 80064d2:	230d      	movs	r3, #13
 80064d4:	e1da      	b.n	800688c <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	7ddb      	ldrb	r3, [r3, #23]
 80064da:	021b      	lsls	r3, r3, #8
 80064dc:	b21a      	sxth	r2, r3
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	7d9b      	ldrb	r3, [r3, #22]
 80064e2:	b21b      	sxth	r3, r3
 80064e4:	4313      	orrs	r3, r2
 80064e6:	b21b      	sxth	r3, r3
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80064ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d112      	bne.n	8006518 <find_volume+0x208>
 80064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80064f8:	061a      	lsls	r2, r3, #24
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006500:	041b      	lsls	r3, r3, #16
 8006502:	4313      	orrs	r3, r2
 8006504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006506:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800650a:	0212      	lsls	r2, r2, #8
 800650c:	4313      	orrs	r3, r2
 800650e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006510:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006514:	4313      	orrs	r3, r2
 8006516:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800651c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	7c1a      	ldrb	r2, [r3, #16]
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006530:	2b01      	cmp	r3, #1
 8006532:	d006      	beq.n	8006542 <find_volume+0x232>
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800653a:	2b02      	cmp	r3, #2
 800653c:	d001      	beq.n	8006542 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800653e:	230d      	movs	r3, #13
 8006540:	e1a4      	b.n	800688c <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006548:	461a      	mov	r2, r3
 800654a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654c:	fb02 f303 	mul.w	r3, r2, r3
 8006550:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	7b5a      	ldrb	r2, [r3, #13]
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <find_volume+0x26c>
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800656c:	461a      	mov	r2, r3
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006574:	3b01      	subs	r3, #1
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800657c:	230d      	movs	r3, #13
 800657e:	e185      	b.n	800688c <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	7c9b      	ldrb	r3, [r3, #18]
 8006584:	021b      	lsls	r3, r3, #8
 8006586:	b21a      	sxth	r2, r3
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	7c5b      	ldrb	r3, [r3, #17]
 800658c:	b21b      	sxth	r3, r3
 800658e:	4313      	orrs	r3, r2
 8006590:	b21b      	sxth	r3, r3
 8006592:	b29a      	uxth	r2, r3
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 80065aa:	230d      	movs	r3, #13
 80065ac:	e16e      	b.n	800688c <find_volume+0x57c>
 80065ae:	bf00      	nop
 80065b0:	20000218 	.word	0x20000218

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	7d1b      	ldrb	r3, [r3, #20]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	b21a      	sxth	r2, r3
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	7cdb      	ldrb	r3, [r3, #19]
 80065c0:	b21b      	sxth	r3, r3
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b21b      	sxth	r3, r3
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80065ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d112      	bne.n	80065f6 <find_volume+0x2e6>
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80065d6:	061a      	lsls	r2, r3, #24
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80065de:	041b      	lsls	r3, r3, #16
 80065e0:	4313      	orrs	r3, r2
 80065e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065e4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80065e8:	0212      	lsls	r2, r2, #8
 80065ea:	4313      	orrs	r3, r2
 80065ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	7bdb      	ldrb	r3, [r3, #15]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	b21a      	sxth	r2, r3
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	7b9b      	ldrb	r3, [r3, #14]
 8006602:	b21b      	sxth	r3, r3
 8006604:	4313      	orrs	r3, r2
 8006606:	b21b      	sxth	r3, r3
 8006608:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800660a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <find_volume+0x304>
 8006610:	230d      	movs	r3, #13
 8006612:	e13b      	b.n	800688c <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006614:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006618:	4413      	add	r3, r2
 800661a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800661c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8006620:	0912      	lsrs	r2, r2, #4
 8006622:	b292      	uxth	r2, r2
 8006624:	4413      	add	r3, r2
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	429a      	cmp	r2, r3
 800662e:	d201      	bcs.n	8006634 <find_volume+0x324>
 8006630:	230d      	movs	r3, #13
 8006632:	e12b      	b.n	800688c <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800663c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006640:	fbb3 f3f2 	udiv	r3, r3, r2
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <find_volume+0x340>
 800664c:	230d      	movs	r3, #13
 800664e:	e11d      	b.n	800688c <find_volume+0x57c>
	fmt = FS_FAT12;
 8006650:	2301      	movs	r3, #1
 8006652:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	f640 72f5 	movw	r2, #4085	; 0xff5
 800665c:	4293      	cmp	r3, r2
 800665e:	d902      	bls.n	8006666 <find_volume+0x356>
 8006660:	2302      	movs	r3, #2
 8006662:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800666c:	4293      	cmp	r3, r2
 800666e:	d902      	bls.n	8006676 <find_volume+0x366>
 8006670:	2303      	movs	r3, #3
 8006672:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	1c9a      	adds	r2, r3, #2
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8006680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006684:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006688:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800668a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800668c:	441a      	add	r2, r3
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8006694:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	441a      	add	r2, r3
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80066a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d121      	bne.n	80066ec <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80066a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066aa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <find_volume+0x3a6>
 80066b2:	230d      	movs	r3, #13
 80066b4:	e0ea      	b.n	800688c <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80066b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80066bc:	061a      	lsls	r2, r3, #24
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80066c4:	041b      	lsls	r3, r3, #16
 80066c6:	4313      	orrs	r3, r2
 80066c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ca:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80066ce:	0212      	lsls	r2, r2, #8
 80066d0:	4313      	orrs	r3, r2
 80066d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d4:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80066d8:	431a      	orrs	r2, r3
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	647b      	str	r3, [r7, #68]	; 0x44
 80066ea:	e025      	b.n	8006738 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <find_volume+0x3ea>
 80066f6:	230d      	movs	r3, #13
 80066f8:	e0c8      	b.n	800688c <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006702:	441a      	add	r2, r3
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800670a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800670e:	2b02      	cmp	r3, #2
 8006710:	d104      	bne.n	800671c <find_volume+0x40c>
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	e00c      	b.n	8006736 <find_volume+0x426>
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006722:	4613      	mov	r3, r2
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	4413      	add	r3, r2
 8006728:	085a      	lsrs	r2, r3, #1
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006736:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800673e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006740:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006744:	0a5b      	lsrs	r3, r3, #9
 8006746:	429a      	cmp	r2, r3
 8006748:	d201      	bcs.n	800674e <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800674a:	230d      	movs	r3, #13
 800674c:	e09e      	b.n	800688c <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	f04f 32ff 	mov.w	r2, #4294967295
 8006754:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	2280      	movs	r2, #128	; 0x80
 8006768:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800676c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006770:	2b03      	cmp	r3, #3
 8006772:	d177      	bne.n	8006864 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	b21a      	sxth	r2, r3
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006784:	b21b      	sxth	r3, r3
 8006786:	4313      	orrs	r3, r2
 8006788:	b21b      	sxth	r3, r3
 800678a:	2b01      	cmp	r3, #1
 800678c:	d16a      	bne.n	8006864 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800678e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006790:	3301      	adds	r3, #1
 8006792:	4619      	mov	r1, r3
 8006794:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006796:	f7fe fd46 	bl	8005226 <move_window>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d161      	bne.n	8006864 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	b21a      	sxth	r2, r3
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80067b8:	b21b      	sxth	r3, r3
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b21b      	sxth	r3, r3
 80067be:	4a35      	ldr	r2, [pc, #212]	; (8006894 <find_volume+0x584>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d14f      	bne.n	8006864 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80067c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c6:	78db      	ldrb	r3, [r3, #3]
 80067c8:	061a      	lsls	r2, r3, #24
 80067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067cc:	789b      	ldrb	r3, [r3, #2]
 80067ce:	041b      	lsls	r3, r3, #16
 80067d0:	4313      	orrs	r3, r2
 80067d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067d4:	7852      	ldrb	r2, [r2, #1]
 80067d6:	0212      	lsls	r2, r2, #8
 80067d8:	4313      	orrs	r3, r2
 80067da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067dc:	7812      	ldrb	r2, [r2, #0]
 80067de:	4313      	orrs	r3, r2
 80067e0:	4a2d      	ldr	r2, [pc, #180]	; (8006898 <find_volume+0x588>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d13e      	bne.n	8006864 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80067ec:	061a      	lsls	r2, r3, #24
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80067f4:	041b      	lsls	r3, r3, #16
 80067f6:	4313      	orrs	r3, r2
 80067f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067fa:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80067fe:	0212      	lsls	r2, r2, #8
 8006800:	4313      	orrs	r3, r2
 8006802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006804:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006808:	4313      	orrs	r3, r2
 800680a:	4a24      	ldr	r2, [pc, #144]	; (800689c <find_volume+0x58c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d129      	bne.n	8006864 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006816:	061a      	lsls	r2, r3, #24
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	4313      	orrs	r3, r2
 8006822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006824:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006828:	0212      	lsls	r2, r2, #8
 800682a:	4313      	orrs	r3, r2
 800682c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800682e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006832:	431a      	orrs	r2, r3
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006840:	061a      	lsls	r2, r3, #24
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006848:	041b      	lsls	r3, r3, #16
 800684a:	4313      	orrs	r3, r2
 800684c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800684e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006852:	0212      	lsls	r2, r2, #8
 8006854:	4313      	orrs	r3, r2
 8006856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006858:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800685c:	431a      	orrs	r2, r3
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800686a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800686e:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <find_volume+0x590>)
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <find_volume+0x590>)
 8006878:	801a      	strh	r2, [r3, #0]
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <find_volume+0x590>)
 800687c:	881a      	ldrh	r2, [r3, #0]
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006884:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006886:	f7fe fc5d 	bl	8005144 <clear_lock>
#endif

	return FR_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3758      	adds	r7, #88	; 0x58
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	ffffaa55 	.word	0xffffaa55
 8006898:	41615252 	.word	0x41615252
 800689c:	61417272 	.word	0x61417272
 80068a0:	2000021c 	.word	0x2000021c

080068a4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d022      	beq.n	80068fc <validate+0x58>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01d      	beq.n	80068fc <validate+0x58>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d016      	beq.n	80068fc <validate+0x58>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068d4:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80068de:	429a      	cmp	r2, r3
 80068e0:	d10c      	bne.n	80068fc <validate+0x58>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068e8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe f98b 	bl	8004c08 <disk_status>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <validate+0x5c>
		return FR_INVALID_OBJECT;
 80068fc:	2309      	movs	r3, #9
 80068fe:	e000      	b.n	8006902 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	4613      	mov	r3, r2
 8006918:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800691e:	f107 0310 	add.w	r3, r7, #16
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff fc46 	bl	80061b4 <get_ldnumber>
 8006928:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	2b00      	cmp	r3, #0
 800692e:	da01      	bge.n	8006934 <f_mount+0x28>
 8006930:	230b      	movs	r3, #11
 8006932:	e02d      	b.n	8006990 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006934:	4a18      	ldr	r2, [pc, #96]	; (8006998 <f_mount+0x8c>)
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800693c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d006      	beq.n	8006952 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8006944:	69b8      	ldr	r0, [r7, #24]
 8006946:	f7fe fbfd 	bl	8005144 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	490d      	ldr	r1, [pc, #52]	; (8006998 <f_mount+0x8c>)
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <f_mount+0x6a>
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d001      	beq.n	800697a <f_mount+0x6e>
 8006976:	2300      	movs	r3, #0
 8006978:	e00a      	b.n	8006990 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800697a:	f107 0108 	add.w	r1, r7, #8
 800697e:	f107 030c 	add.w	r3, r7, #12
 8006982:	2200      	movs	r2, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff fcc3 	bl	8006310 <find_volume>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800698e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000218 	.word	0x20000218

0800699c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	f107 030c 	add.w	r3, r7, #12
 80069a8:	6018      	str	r0, [r3, #0]
 80069aa:	f107 0308 	add.w	r3, r7, #8
 80069ae:	6019      	str	r1, [r3, #0]
 80069b0:	1dfb      	adds	r3, r7, #7
 80069b2:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80069b4:	f107 030c 	add.w	r3, r7, #12
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <f_open+0x26>
 80069be:	2309      	movs	r3, #9
 80069c0:	e1f2      	b.n	8006da8 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 80069c2:	f107 030c 	add.w	r3, r7, #12
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80069ce:	1dfb      	adds	r3, r7, #7
 80069d0:	1dfa      	adds	r2, r7, #7
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	f002 021f 	and.w	r2, r2, #31
 80069d8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80069da:	1dfb      	adds	r3, r7, #7
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	f023 0301 	bic.w	r3, r3, #1
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	f107 0108 	add.w	r1, r7, #8
 80069e8:	f107 0320 	add.w	r3, r7, #32
 80069ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff fc8d 	bl	8006310 <find_volume>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80069fc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f040 81cf 	bne.w	8006da4 <f_open+0x408>
		INIT_BUF(dj);
 8006a06:	f107 0320 	add.w	r3, r7, #32
 8006a0a:	f107 0214 	add.w	r2, r7, #20
 8006a0e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8006a12:	f107 0308 	add.w	r3, r7, #8
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	f107 0320 	add.w	r3, r7, #32
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7ff fb5a 	bl	80060d8 <follow_path>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8006a2a:	f107 0320 	add.w	r3, r7, #32
 8006a2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a32:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006a36:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d11a      	bne.n	8006a74 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8006a3e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d103      	bne.n	8006a4e <f_open+0xb2>
				res = FR_INVALID_NAME;
 8006a46:	2306      	movs	r3, #6
 8006a48:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006a4c:	e012      	b.n	8006a74 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a4e:	1dfb      	adds	r3, r7, #7
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	f023 0301 	bic.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	bf14      	ite	ne
 8006a5a:	2301      	movne	r3, #1
 8006a5c:	2300      	moveq	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	f107 0320 	add.w	r3, r7, #32
 8006a66:	4611      	mov	r1, r2
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe f9e1 	bl	8004e30 <chk_lock>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006a74:	1dfb      	adds	r3, r7, #7
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	f003 031c 	and.w	r3, r3, #28
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80cc 	beq.w	8006c1a <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8006a82:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01f      	beq.n	8006aca <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006a8a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d10e      	bne.n	8006ab0 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006a92:	f7fe fa39 	bl	8004f08 <enq_lock>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <f_open+0x10e>
 8006a9c:	f107 0320 	add.w	r3, r7, #32
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff fa20 	bl	8005ee6 <dir_register>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	e000      	b.n	8006aac <f_open+0x110>
 8006aaa:	2312      	movs	r3, #18
 8006aac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006ab0:	1dfb      	adds	r3, r7, #7
 8006ab2:	1dfa      	adds	r2, r7, #7
 8006ab4:	7812      	ldrb	r2, [r2, #0]
 8006ab6:	f042 0208 	orr.w	r2, r2, #8
 8006aba:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006abc:	f107 0320 	add.w	r3, r7, #32
 8006ac0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ac4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006ac8:	e014      	b.n	8006af4 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006aca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006ace:	330b      	adds	r3, #11
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	f003 0311 	and.w	r3, r3, #17
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <f_open+0x146>
					res = FR_DENIED;
 8006ada:	2307      	movs	r3, #7
 8006adc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006ae0:	e008      	b.n	8006af4 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006ae2:	1dfb      	adds	r3, r7, #7
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <f_open+0x158>
						res = FR_EXIST;
 8006aee:	2308      	movs	r3, #8
 8006af0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006af4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f040 80af 	bne.w	8006c5c <f_open+0x2c0>
 8006afe:	1dfb      	adds	r3, r7, #7
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80a8 	beq.w	8006c5c <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8006b0c:	f7fe f81a 	bl	8004b44 <get_fattime>
 8006b10:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006b14:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b18:	330e      	adds	r3, #14
 8006b1a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	0a1b      	lsrs	r3, r3, #8
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b30:	330f      	adds	r3, #15
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006b3a:	0c1a      	lsrs	r2, r3, #16
 8006b3c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b40:	3310      	adds	r3, #16
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006b4a:	0e1a      	lsrs	r2, r3, #24
 8006b4c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b50:	3311      	adds	r3, #17
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006b56:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b5a:	330b      	adds	r3, #11
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006b60:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b64:	331c      	adds	r3, #28
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b6e:	331d      	adds	r3, #29
 8006b70:	2200      	movs	r2, #0
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b78:	331e      	adds	r3, #30
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b82:	331f      	adds	r3, #31
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006b88:	f107 0320 	add.w	r3, r7, #32
 8006b8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b90:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff f904 	bl	8005da2 <ld_clust>
 8006b9a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8006ba4:	f7ff f92a 	bl	8005dfc <st_clust>
				dj.fs->wflag = 1;
 8006ba8:	f107 0320 	add.w	r3, r7, #32
 8006bac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8006bb6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d04e      	beq.n	8006c5c <f_open+0x2c0>
					dw = dj.fs->winsect;
 8006bbe:	f107 0320 	add.w	r3, r7, #32
 8006bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bc6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006bca:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8006bce:	f107 0320 	add.w	r3, r7, #32
 8006bd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bd6:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fde1 	bl	80057a2 <remove_chain>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8006be6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d136      	bne.n	8006c5c <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006bee:	f107 0320 	add.w	r3, r7, #32
 8006bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bf6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8006bfa:	3a01      	subs	r2, #1
 8006bfc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8006c00:	f107 0320 	add.w	r3, r7, #32
 8006c04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c08:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe fb0a 	bl	8005226 <move_window>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006c18:	e020      	b.n	8006c5c <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006c1a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d11c      	bne.n	8006c5c <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006c22:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006c26:	330b      	adds	r3, #11
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	f003 0310 	and.w	r3, r3, #16
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <f_open+0x29e>
					res = FR_NO_FILE;
 8006c32:	2304      	movs	r3, #4
 8006c34:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006c38:	e010      	b.n	8006c5c <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006c3a:	1dfb      	adds	r3, r7, #7
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <f_open+0x2c0>
 8006c46:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006c4a:	330b      	adds	r3, #11
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <f_open+0x2c0>
						res = FR_DENIED;
 8006c56:	2307      	movs	r3, #7
 8006c58:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8006c5c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d13d      	bne.n	8006ce0 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006c64:	1dfb      	adds	r3, r7, #7
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8006c70:	1dfb      	adds	r3, r7, #7
 8006c72:	1dfa      	adds	r2, r7, #7
 8006c74:	7812      	ldrb	r2, [r2, #0]
 8006c76:	f042 0220 	orr.w	r2, r2, #32
 8006c7a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006c7c:	f107 0320 	add.w	r3, r7, #32
 8006c80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c84:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006c88:	f107 030c 	add.w	r3, r7, #12
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8006c92:	f107 030c 	add.w	r3, r7, #12
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006c9c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ca0:	1dfb      	adds	r3, r7, #7
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f023 0301 	bic.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bf14      	ite	ne
 8006cac:	2301      	movne	r3, #1
 8006cae:	2300      	moveq	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f107 0320 	add.w	r3, r7, #32
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe f948 	bl	8004f50 <inc_lock>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	f107 030c 	add.w	r3, r7, #12
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8006ccc:	f107 030c 	add.w	r3, r7, #12
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d102      	bne.n	8006ce0 <f_open+0x344>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006ce0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d15d      	bne.n	8006da4 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8006ce8:	f107 030c 	add.w	r3, r7, #12
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	1dfa      	adds	r2, r7, #7
 8006cf0:	7812      	ldrb	r2, [r2, #0]
 8006cf2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8006cf6:	f107 030c 	add.w	r3, r7, #12
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006d02:	f107 0320 	add.w	r3, r7, #32
 8006d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d0a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff f847 	bl	8005da2 <ld_clust>
 8006d14:	4602      	mov	r2, r0
 8006d16:	f107 030c 	add.w	r3, r7, #12
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006d20:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006d24:	331f      	adds	r3, #31
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	061a      	lsls	r2, r3, #24
 8006d2a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006d2e:	331e      	adds	r3, #30
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006d3a:	321d      	adds	r2, #29
 8006d3c:	7812      	ldrb	r2, [r2, #0]
 8006d3e:	0212      	lsls	r2, r2, #8
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006d46:	321c      	adds	r2, #28
 8006d48:	7812      	ldrb	r2, [r2, #0]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	f107 030c 	add.w	r3, r7, #12
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8006d56:	f107 030c 	add.w	r3, r7, #12
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8006d62:	f107 030c 	add.w	r3, r7, #12
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006d6e:	f107 030c 	add.w	r3, r7, #12
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006d7a:	f107 0320 	add.w	r3, r7, #32
 8006d7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006d82:	f107 030c 	add.w	r3, r7, #12
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8006d8c:	f107 030c 	add.w	r3, r7, #12
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d96:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006d9a:	f107 030c 	add.w	r3, r7, #12
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8006da4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b08a      	sub	sp, #40	; 0x28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
 8006dbe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff fd6a 	bl	80068a4 <validate>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <f_write+0x2c>
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	e192      	b.n	8007104 <f_write+0x352>
	if (fp->err)							/* Check error */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006dee:	e189      	b.n	8007104 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006dfe:	2307      	movs	r3, #7
 8006e00:	e180      	b.n	8007104 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	441a      	add	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006e12:	429a      	cmp	r2, r3
 8006e14:	f080 8158 	bcs.w	80070c8 <f_write+0x316>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006e1c:	e154      	b.n	80070c8 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f040 8114 	bne.w	8007056 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006e34:	0a5b      	lsrs	r3, r3, #9
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e3e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	4013      	ands	r3, r2
 8006e48:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006e4a:	7dbb      	ldrb	r3, [r7, #22]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d151      	bne.n	8006ef4 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10f      	bne.n	8006e7a <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d121      	bne.n	8006eac <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fcf0 	bl	8005856 <create_chain>
 8006e76:	6278      	str	r0, [r7, #36]	; 0x24
 8006e78:	e018      	b.n	8006eac <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d008      	beq.n	8006e96 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f7fe fd7f 	bl	8005990 <clmt_clust>
 8006e92:	6278      	str	r0, [r7, #36]	; 0x24
 8006e94:	e00a      	b.n	8006eac <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f7fe fcd6 	bl	8005856 <create_chain>
 8006eaa:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 810f 	beq.w	80070d2 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d105      	bne.n	8006ec6 <f_write+0x114>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e11e      	b.n	8007104 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ecc:	d105      	bne.n	8006eda <f_write+0x128>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e114      	b.n	8007104 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ede:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d103      	bne.n	8006ef4 <f_write+0x142>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d01d      	beq.n	8006f3e <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f08:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006f0c:	68f9      	ldr	r1, [r7, #12]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006f14:	2301      	movs	r3, #1
 8006f16:	f7fd fed7 	bl	8004cc8 <disk_write>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e0eb      	b.n	8007104 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	f7fe fa45 	bl	80053dc <clust2sect>
 8006f52:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <f_write+0x1b4>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006f62:	2302      	movs	r3, #2
 8006f64:	e0ce      	b.n	8007104 <f_write+0x352>
			sect += csect;
 8006f66:	7dbb      	ldrb	r3, [r7, #22]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	0a5b      	lsrs	r3, r3, #9
 8006f72:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d048      	beq.n	800700c <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006f7a:	7dba      	ldrb	r2, [r7, #22]
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	4413      	add	r3, r2
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006f86:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d908      	bls.n	8006fa0 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f94:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006f98:	461a      	mov	r2, r3
 8006f9a:	7dbb      	ldrb	r3, [r7, #22]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fa6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	69b9      	ldr	r1, [r7, #24]
 8006fb0:	f7fd fe8a 	bl	8004cc8 <disk_write>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e09e      	b.n	8007104 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	69fa      	ldr	r2, [r7, #28]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d916      	bls.n	8007004 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	025b      	lsls	r3, r3, #9
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fec:	4619      	mov	r1, r3
 8006fee:	f7fd fea9 	bl	8004d44 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	025b      	lsls	r3, r3, #9
 8007008:	623b      	str	r3, [r7, #32]
				continue;
 800700a:	e047      	b.n	800709c <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	429a      	cmp	r2, r3
 8007016:	d01a      	beq.n	800704e <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007024:	429a      	cmp	r2, r3
 8007026:	d212      	bcs.n	800704e <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800702e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007032:	68f9      	ldr	r1, [r7, #12]
 8007034:	2301      	movs	r3, #1
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	f7fd fe26 	bl	8004c88 <disk_read>
 800703c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800703e:	2b00      	cmp	r3, #0
 8007040:	d005      	beq.n	800704e <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800704a:	2301      	movs	r3, #1
 800704c:	e05a      	b.n	8007104 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800705c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007060:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007064:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007066:	6a3a      	ldr	r2, [r7, #32]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	429a      	cmp	r2, r3
 800706c:	d901      	bls.n	8007072 <f_write+0x2c0>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	6a3a      	ldr	r2, [r7, #32]
 8007082:	69b9      	ldr	r1, [r7, #24]
 8007084:	4618      	mov	r0, r3
 8007086:	f7fd fe5d 	bl	8004d44 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007094:	b2da      	uxtb	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	4413      	add	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	441a      	add	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	441a      	add	r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f47f aea7 	bne.w	8006e1e <f_write+0x6c>
 80070d0:	e000      	b.n	80070d4 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80070d2:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d905      	bls.n	80070f0 <f_write+0x33e>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80070f6:	f043 0320 	orr.w	r3, r3, #32
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3728      	adds	r7, #40	; 0x28
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff fbc5 	bl	80068a4 <validate>
 800711a:	4603      	mov	r3, r0
 800711c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800711e:	7dfb      	ldrb	r3, [r7, #23]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f040 80a8 	bne.w	8007276 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 80a0 	beq.w	8007276 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800713c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	d019      	beq.n	8007178 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800714a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007156:	2301      	movs	r3, #1
 8007158:	f7fd fdb6 	bl	8004cc8 <disk_write>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007162:	2301      	movs	r3, #1
 8007164:	e088      	b.n	8007278 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800716c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007170:	b2da      	uxtb	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007184:	4619      	mov	r1, r3
 8007186:	4610      	mov	r0, r2
 8007188:	f7fe f84d 	bl	8005226 <move_window>
 800718c:	4603      	mov	r3, r0
 800718e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d16f      	bne.n	8007276 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800719c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	330b      	adds	r3, #11
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	330b      	adds	r3, #11
 80071a8:	f042 0220 	orr.w	r2, r2, #32
 80071ac:	b2d2      	uxtb	r2, r2
 80071ae:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	331c      	adds	r3, #28
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	0a1b      	lsrs	r3, r3, #8
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	331d      	adds	r3, #29
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80071d8:	0c1a      	lsrs	r2, r3, #16
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	331e      	adds	r3, #30
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80071e8:	0e1a      	lsrs	r2, r3, #24
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	331f      	adds	r3, #31
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071f8:	4619      	mov	r1, r3
 80071fa:	6938      	ldr	r0, [r7, #16]
 80071fc:	f7fe fdfe 	bl	8005dfc <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007200:	f7fd fca0 	bl	8004b44 <get_fattime>
 8007204:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	3316      	adds	r3, #22
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	b29b      	uxth	r3, r3
 8007214:	0a1b      	lsrs	r3, r3, #8
 8007216:	b29a      	uxth	r2, r3
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	3317      	adds	r3, #23
 800721c:	b2d2      	uxtb	r2, r2
 800721e:	701a      	strb	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	0c1a      	lsrs	r2, r3, #16
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	3318      	adds	r3, #24
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	0e1a      	lsrs	r2, r3, #24
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	3319      	adds	r3, #25
 8007234:	b2d2      	uxtb	r2, r2
 8007236:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	3312      	adds	r3, #18
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	3313      	adds	r3, #19
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800724e:	f023 0320 	bic.w	r3, r3, #32
 8007252:	b2da      	uxtb	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800726c:	4618      	mov	r0, r3
 800726e:	f7fe f808 	bl	8005282 <sync_fs>
 8007272:	4603      	mov	r3, r0
 8007274:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007276:	7dfb      	ldrb	r3, [r7, #23]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff ff3f 	bl	800710c <f_sync>
 800728e:	4603      	mov	r3, r0
 8007290:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d116      	bne.n	80072c6 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fb03 	bl	80068a4 <validate>
 800729e:	4603      	mov	r3, r0
 80072a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10e      	bne.n	80072c6 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fd ff04 	bl	80050bc <dec_lock>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b090      	sub	sp, #64	; 0x40
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff fae2 	bl	80068a4 <validate>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80072e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <f_lseek+0x24>
 80072ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072f2:	e247      	b.n	8007784 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007304:	e23e      	b.n	8007784 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 80f2 	beq.w	80074f6 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d164      	bne.n	80073e4 <f_lseek+0x114>
			tbl = fp->cltbl;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	1d1a      	adds	r2, r3, #4
 8007326:	627a      	str	r2, [r7, #36]	; 0x24
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	2302      	movs	r3, #2
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007336:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	2b00      	cmp	r3, #0
 800733c:	d041      	beq.n	80073c2 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	2300      	movs	r3, #0
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	3302      	adds	r3, #2
 800734a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	3301      	adds	r3, #1
 8007354:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800735c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe f85d 	bl	800541e <get_fat>
 8007364:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	2b01      	cmp	r3, #1
 800736a:	d805      	bhi.n	8007378 <f_lseek+0xa8>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007374:	2302      	movs	r3, #2
 8007376:	e205      	b.n	8007784 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737e:	d105      	bne.n	800738c <f_lseek+0xbc>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007388:	2301      	movs	r3, #1
 800738a:	e1fb      	b.n	8007784 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3301      	adds	r3, #1
 8007390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007392:	429a      	cmp	r2, r3
 8007394:	d0da      	beq.n	800734c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	429a      	cmp	r2, r3
 800739c:	d809      	bhi.n	80073b2 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	1d1a      	adds	r2, r3, #4
 80073a2:	627a      	str	r2, [r7, #36]	; 0x24
 80073a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	1d1a      	adds	r2, r3, #4
 80073ac:	627a      	str	r2, [r7, #36]	; 0x24
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80073b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073be:	429a      	cmp	r2, r3
 80073c0:	d3bd      	bcc.n	800733e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80073c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ca:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80073cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d803      	bhi.n	80073dc <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	e1d1      	b.n	8007780 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80073dc:	2311      	movs	r3, #17
 80073de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80073e2:	e1cd      	b.n	8007780 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d903      	bls.n	80073f8 <f_lseek+0x128>
				ofs = fp->fsize;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80073f6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 81bc 	beq.w	8007780 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	3b01      	subs	r3, #1
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fe fabe 	bl	8005990 <clmt_clust>
 8007414:	4602      	mov	r2, r0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f7fd ffd6 	bl	80053dc <clust2sect>
 8007430:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d105      	bne.n	8007444 <f_lseek+0x174>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007440:	2302      	movs	r3, #2
 8007442:	e19f      	b.n	8007784 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	3b01      	subs	r3, #1
 8007448:	0a5b      	lsrs	r3, r3, #9
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007450:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007454:	3a01      	subs	r2, #1
 8007456:	4013      	ands	r3, r2
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	4413      	add	r3, r2
 800745c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 8189 	beq.w	8007780 <f_lseek+0x4b0>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	429a      	cmp	r2, r3
 8007478:	f000 8182 	beq.w	8007780 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	d01d      	beq.n	80074c6 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007490:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800749c:	2301      	movs	r3, #1
 800749e:	f7fd fc13 	bl	8004cc8 <disk_write>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80074b0:	2301      	movs	r3, #1
 80074b2:	e167      	b.n	8007784 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80074ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074cc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	2301      	movs	r3, #1
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	f7fd fbd7 	bl	8004c88 <disk_read>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80074e8:	2301      	movs	r3, #1
 80074ea:	e14b      	b.n	8007784 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80074f4:	e144      	b.n	8007780 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d90a      	bls.n	8007518 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007516:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800751e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007528:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 80c6 	beq.w	80076c0 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800753a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800753e:	025b      	lsls	r3, r3, #9
 8007540:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01e      	beq.n	8007586 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	1e5a      	subs	r2, r3, #1
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	1e59      	subs	r1, r3, #1
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800755c:	429a      	cmp	r2, r3
 800755e:	d312      	bcc.n	8007586 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	1e5a      	subs	r2, r3, #1
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	425b      	negs	r3, r3
 8007568:	401a      	ands	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007582:	63bb      	str	r3, [r7, #56]	; 0x38
 8007584:	e029      	b.n	80075da <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800758c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	2b00      	cmp	r3, #0
 8007592:	d11e      	bne.n	80075d2 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800759a:	2100      	movs	r1, #0
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe f95a 	bl	8005856 <create_chain>
 80075a2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d105      	bne.n	80075b6 <f_lseek+0x2e6>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2202      	movs	r2, #2
 80075ae:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80075b2:	2302      	movs	r3, #2
 80075b4:	e0e6      	b.n	8007784 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075bc:	d105      	bne.n	80075ca <f_lseek+0x2fa>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80075c6:	2301      	movs	r3, #1
 80075c8:	e0dc      	b.n	8007784 <f_lseek+0x4b4>
					fp->sclust = clst;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d06f      	beq.n	80076c0 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 80075e0:	e047      	b.n	8007672 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00d      	beq.n	800760c <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe f92c 	bl	8005856 <create_chain>
 80075fe:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10a      	bne.n	800761c <f_lseek+0x34c>
							ofs = bcs; break;
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	603b      	str	r3, [r7, #0]
 800760a:	e036      	b.n	800767a <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007612:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007614:	4618      	mov	r0, r3
 8007616:	f7fd ff02 	bl	800541e <get_fat>
 800761a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007622:	d105      	bne.n	8007630 <f_lseek+0x360>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800762c:	2301      	movs	r3, #1
 800762e:	e0a9      	b.n	8007784 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	2b01      	cmp	r3, #1
 8007634:	d907      	bls.n	8007646 <f_lseek+0x376>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800763c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007642:	429a      	cmp	r2, r3
 8007644:	d305      	bcc.n	8007652 <f_lseek+0x382>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2202      	movs	r2, #2
 800764a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800764e:	2302      	movs	r3, #2
 8007650:	e098      	b.n	8007784 <f_lseek+0x4b4>
					fp->clust = clst;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007656:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	441a      	add	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	429a      	cmp	r2, r3
 8007678:	d8b3      	bhi.n	80075e2 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	441a      	add	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007690:	2b00      	cmp	r3, #0
 8007692:	d015      	beq.n	80076c0 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800769a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800769c:	4618      	mov	r0, r3
 800769e:	f7fd fe9d 	bl	80053dc <clust2sect>
 80076a2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80076a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d105      	bne.n	80076b6 <f_lseek+0x3e6>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2202      	movs	r2, #2
 80076ae:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80076b2:	2302      	movs	r3, #2
 80076b4:	e066      	b.n	8007784 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	0a5b      	lsrs	r3, r3, #9
 80076ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076bc:	4413      	add	r3, r2
 80076be:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d041      	beq.n	8007752 <f_lseek+0x482>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d03b      	beq.n	8007752 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80076e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01d      	beq.n	8007724 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076ee:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80076fa:	2301      	movs	r3, #1
 80076fc:	f7fd fae4 	bl	8004cc8 <disk_write>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800770e:	2301      	movs	r3, #1
 8007710:	e038      	b.n	8007784 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771c:	b2da      	uxtb	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800772a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	2301      	movs	r3, #1
 8007732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007734:	f7fd faa8 	bl	8004c88 <disk_read>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007746:	2301      	movs	r3, #1
 8007748:	e01c      	b.n	8007784 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800774e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800775e:	429a      	cmp	r2, r3
 8007760:	d90e      	bls.n	8007780 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007774:	f043 0320 	orr.w	r3, r3, #32
 8007778:	b2da      	uxtb	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007780:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007784:	4618      	mov	r0, r3
 8007786:	3740      	adds	r7, #64	; 0x40
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b08e      	sub	sp, #56	; 0x38
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8007798:	f107 030c 	add.w	r3, r7, #12
 800779c:	2200      	movs	r2, #0
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fe fdb5 	bl	8006310 <find_volume>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80077b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f040 80af 	bne.w	800791a <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077c8:	3b02      	subs	r3, #2
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d805      	bhi.n	80077da <f_getfree+0x4e>
			*nclst = fs->free_clust;
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	e09f      	b.n	800791a <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077e0:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80077e6:	7efb      	ldrb	r3, [r7, #27]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d125      	bne.n	8007838 <f_getfree+0xac>
				clst = 2;
 80077ec:	2302      	movs	r3, #2
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80077f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077f2:	69f8      	ldr	r0, [r7, #28]
 80077f4:	f7fd fe13 	bl	800541e <get_fat>
 80077f8:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007800:	d103      	bne.n	800780a <f_getfree+0x7e>
 8007802:	2301      	movs	r3, #1
 8007804:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007808:	e077      	b.n	80078fa <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d103      	bne.n	8007818 <f_getfree+0x8c>
 8007810:	2302      	movs	r3, #2
 8007812:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007816:	e070      	b.n	80078fa <f_getfree+0x16e>
					if (stat == 0) n++;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d102      	bne.n	8007824 <f_getfree+0x98>
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	3301      	adds	r3, #1
 8007822:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	3301      	adds	r3, #1
 8007828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007832:	429a      	cmp	r2, r3
 8007834:	d3dc      	bcc.n	80077f0 <f_getfree+0x64>
 8007836:	e060      	b.n	80078fa <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800783e:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007846:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
 800784c:	2300      	movs	r3, #0
 800784e:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	d112      	bne.n	800787c <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	62ba      	str	r2, [r7, #40]	; 0x28
 800785c:	4619      	mov	r1, r3
 800785e:	69f8      	ldr	r0, [r7, #28]
 8007860:	f7fd fce1 	bl	8005226 <move_window>
 8007864:	4603      	mov	r3, r0
 8007866:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800786a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800786e:	2b00      	cmp	r3, #0
 8007870:	d142      	bne.n	80078f8 <f_getfree+0x16c>
						p = fs->win.d8;
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8007876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800787c:	7efb      	ldrb	r3, [r7, #27]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d115      	bne.n	80078ae <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	3301      	adds	r3, #1
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	b21a      	sxth	r2, r3
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	b21b      	sxth	r3, r3
 8007892:	4313      	orrs	r3, r2
 8007894:	b21b      	sxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d102      	bne.n	80078a0 <f_getfree+0x114>
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	3301      	adds	r3, #1
 800789e:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	3302      	adds	r3, #2
 80078a4:	623b      	str	r3, [r7, #32]
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	3b02      	subs	r3, #2
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
 80078ac:	e01d      	b.n	80078ea <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	3303      	adds	r3, #3
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	061a      	lsls	r2, r3, #24
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	3302      	adds	r3, #2
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	041b      	lsls	r3, r3, #16
 80078be:	4313      	orrs	r3, r2
 80078c0:	6a3a      	ldr	r2, [r7, #32]
 80078c2:	3201      	adds	r2, #1
 80078c4:	7812      	ldrb	r2, [r2, #0]
 80078c6:	0212      	lsls	r2, r2, #8
 80078c8:	4313      	orrs	r3, r2
 80078ca:	6a3a      	ldr	r2, [r7, #32]
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <f_getfree+0x152>
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	3301      	adds	r3, #1
 80078dc:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	3304      	adds	r3, #4
 80078e2:	623b      	str	r3, [r7, #32]
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	3b04      	subs	r3, #4
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	3b01      	subs	r3, #1
 80078ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1ac      	bne.n	8007850 <f_getfree+0xc4>
 80078f6:	e000      	b.n	80078fa <f_getfree+0x16e>
						if (res != FR_OK) break;
 80078f8:	bf00      	nop
			}
			fs->free_clust = n;
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007908:	f043 0301 	orr.w	r3, r3, #1
 800790c:	b2da      	uxtb	r2, r3
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007918:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800791a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800791e:	4618      	mov	r0, r3
 8007920:	3738      	adds	r7, #56	; 0x38
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	2b0a      	cmp	r3, #10
 8007936:	d103      	bne.n	8007940 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007938:	210d      	movs	r1, #13
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff fff3 	bl	8007926 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	db25      	blt.n	8007998 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	60fa      	str	r2, [r7, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	4413      	add	r3, r2
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b3c      	cmp	r3, #60	; 0x3c
 800795e:	dd12      	ble.n	8007986 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6818      	ldr	r0, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f103 010c 	add.w	r1, r3, #12
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	f107 0308 	add.w	r3, r7, #8
 8007970:	f7ff fa1f 	bl	8006db2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	429a      	cmp	r2, r3
 800797a:	d101      	bne.n	8007980 <putc_bfd+0x5a>
 800797c:	2300      	movs	r3, #0
 800797e:	e001      	b.n	8007984 <putc_bfd+0x5e>
 8007980:	f04f 33ff 	mov.w	r3, #4294967295
 8007984:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	609a      	str	r2, [r3, #8]
 8007996:	e000      	b.n	800799a <putc_bfd+0x74>
	if (i < 0) return;
 8007998:	bf00      	nop
}
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b097      	sub	sp, #92	; 0x5c
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80079ae:	2300      	movs	r3, #0
 80079b0:	613b      	str	r3, [r7, #16]
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80079b6:	e009      	b.n	80079cc <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	607a      	str	r2, [r7, #4]
 80079be:	781a      	ldrb	r2, [r3, #0]
 80079c0:	f107 030c 	add.w	r3, r7, #12
 80079c4:	4611      	mov	r1, r2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff ffad 	bl	8007926 <putc_bfd>
	while (*str)			/* Put the string */
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f1      	bne.n	80079b8 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	db16      	blt.n	8007a08 <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	461c      	mov	r4, r3
 80079e0:	f107 0208 	add.w	r2, r7, #8
 80079e4:	f107 030c 	add.w	r3, r7, #12
 80079e8:	f103 010c 	add.w	r1, r3, #12
 80079ec:	4613      	mov	r3, r2
 80079ee:	4622      	mov	r2, r4
 80079f0:	f7ff f9df 	bl	8006db2 <f_write>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	461a      	mov	r2, r3
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d101      	bne.n	8007a08 <f_puts+0x68>
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	e001      	b.n	8007a0c <f_puts+0x6c>
	return EOF;
 8007a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	375c      	adds	r7, #92	; 0x5c
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd90      	pop	{r4, r7, pc}

08007a14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007a22:	2301      	movs	r3, #1
 8007a24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007a2a:	4b1e      	ldr	r3, [pc, #120]	; (8007aa4 <FATFS_LinkDriverEx+0x90>)
 8007a2c:	7a5b      	ldrb	r3, [r3, #9]
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d831      	bhi.n	8007a98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007a34:	4b1b      	ldr	r3, [pc, #108]	; (8007aa4 <FATFS_LinkDriverEx+0x90>)
 8007a36:	7a5b      	ldrb	r3, [r3, #9]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	4b19      	ldr	r3, [pc, #100]	; (8007aa4 <FATFS_LinkDriverEx+0x90>)
 8007a3e:	2100      	movs	r1, #0
 8007a40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007a42:	4b18      	ldr	r3, [pc, #96]	; (8007aa4 <FATFS_LinkDriverEx+0x90>)
 8007a44:	7a5b      	ldrb	r3, [r3, #9]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	4a16      	ldr	r2, [pc, #88]	; (8007aa4 <FATFS_LinkDriverEx+0x90>)
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007a52:	4b14      	ldr	r3, [pc, #80]	; (8007aa4 <FATFS_LinkDriverEx+0x90>)
 8007a54:	7a5b      	ldrb	r3, [r3, #9]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4b12      	ldr	r3, [pc, #72]	; (8007aa4 <FATFS_LinkDriverEx+0x90>)
 8007a5c:	4413      	add	r3, r2
 8007a5e:	79fa      	ldrb	r2, [r7, #7]
 8007a60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007a62:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <FATFS_LinkDriverEx+0x90>)
 8007a64:	7a5b      	ldrb	r3, [r3, #9]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	b2d1      	uxtb	r1, r2
 8007a6c:	4a0d      	ldr	r2, [pc, #52]	; (8007aa4 <FATFS_LinkDriverEx+0x90>)
 8007a6e:	7251      	strb	r1, [r2, #9]
 8007a70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007a72:	7dbb      	ldrb	r3, [r7, #22]
 8007a74:	3330      	adds	r3, #48	; 0x30
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	223a      	movs	r2, #58	; 0x3a
 8007a82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	3302      	adds	r3, #2
 8007a88:	222f      	movs	r2, #47	; 0x2f
 8007a8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	3303      	adds	r3, #3
 8007a90:	2200      	movs	r2, #0
 8007a92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr
 8007aa4:	20000238 	.word	0x20000238

08007aa8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff ffac 	bl	8007a14 <FATFS_LinkDriverEx>
 8007abc:	4603      	mov	r3, r0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <__errno>:
 8007ac8:	4b01      	ldr	r3, [pc, #4]	; (8007ad0 <__errno+0x8>)
 8007aca:	6818      	ldr	r0, [r3, #0]
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	20000024 	.word	0x20000024

08007ad4 <__libc_init_array>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	2500      	movs	r5, #0
 8007ad8:	4e0c      	ldr	r6, [pc, #48]	; (8007b0c <__libc_init_array+0x38>)
 8007ada:	4c0d      	ldr	r4, [pc, #52]	; (8007b10 <__libc_init_array+0x3c>)
 8007adc:	1ba4      	subs	r4, r4, r6
 8007ade:	10a4      	asrs	r4, r4, #2
 8007ae0:	42a5      	cmp	r5, r4
 8007ae2:	d109      	bne.n	8007af8 <__libc_init_array+0x24>
 8007ae4:	f002 fdae 	bl	800a644 <_init>
 8007ae8:	2500      	movs	r5, #0
 8007aea:	4e0a      	ldr	r6, [pc, #40]	; (8007b14 <__libc_init_array+0x40>)
 8007aec:	4c0a      	ldr	r4, [pc, #40]	; (8007b18 <__libc_init_array+0x44>)
 8007aee:	1ba4      	subs	r4, r4, r6
 8007af0:	10a4      	asrs	r4, r4, #2
 8007af2:	42a5      	cmp	r5, r4
 8007af4:	d105      	bne.n	8007b02 <__libc_init_array+0x2e>
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007afc:	4798      	blx	r3
 8007afe:	3501      	adds	r5, #1
 8007b00:	e7ee      	b.n	8007ae0 <__libc_init_array+0xc>
 8007b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b06:	4798      	blx	r3
 8007b08:	3501      	adds	r5, #1
 8007b0a:	e7f2      	b.n	8007af2 <__libc_init_array+0x1e>
 8007b0c:	0800ac20 	.word	0x0800ac20
 8007b10:	0800ac20 	.word	0x0800ac20
 8007b14:	0800ac20 	.word	0x0800ac20
 8007b18:	0800ac24 	.word	0x0800ac24

08007b1c <memset>:
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	4402      	add	r2, r0
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d100      	bne.n	8007b26 <memset+0xa>
 8007b24:	4770      	bx	lr
 8007b26:	f803 1b01 	strb.w	r1, [r3], #1
 8007b2a:	e7f9      	b.n	8007b20 <memset+0x4>

08007b2c <__cvt>:
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b32:	461e      	mov	r6, r3
 8007b34:	bfbb      	ittet	lt
 8007b36:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007b3a:	461e      	movlt	r6, r3
 8007b3c:	2300      	movge	r3, #0
 8007b3e:	232d      	movlt	r3, #45	; 0x2d
 8007b40:	b088      	sub	sp, #32
 8007b42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007b44:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007b48:	f027 0720 	bic.w	r7, r7, #32
 8007b4c:	2f46      	cmp	r7, #70	; 0x46
 8007b4e:	4614      	mov	r4, r2
 8007b50:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007b52:	700b      	strb	r3, [r1, #0]
 8007b54:	d004      	beq.n	8007b60 <__cvt+0x34>
 8007b56:	2f45      	cmp	r7, #69	; 0x45
 8007b58:	d100      	bne.n	8007b5c <__cvt+0x30>
 8007b5a:	3501      	adds	r5, #1
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e000      	b.n	8007b62 <__cvt+0x36>
 8007b60:	2303      	movs	r3, #3
 8007b62:	aa07      	add	r2, sp, #28
 8007b64:	9204      	str	r2, [sp, #16]
 8007b66:	aa06      	add	r2, sp, #24
 8007b68:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007b6c:	e9cd 3500 	strd	r3, r5, [sp]
 8007b70:	4622      	mov	r2, r4
 8007b72:	4633      	mov	r3, r6
 8007b74:	f000 fe28 	bl	80087c8 <_dtoa_r>
 8007b78:	2f47      	cmp	r7, #71	; 0x47
 8007b7a:	4680      	mov	r8, r0
 8007b7c:	d102      	bne.n	8007b84 <__cvt+0x58>
 8007b7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b80:	07db      	lsls	r3, r3, #31
 8007b82:	d526      	bpl.n	8007bd2 <__cvt+0xa6>
 8007b84:	2f46      	cmp	r7, #70	; 0x46
 8007b86:	eb08 0905 	add.w	r9, r8, r5
 8007b8a:	d111      	bne.n	8007bb0 <__cvt+0x84>
 8007b8c:	f898 3000 	ldrb.w	r3, [r8]
 8007b90:	2b30      	cmp	r3, #48	; 0x30
 8007b92:	d10a      	bne.n	8007baa <__cvt+0x7e>
 8007b94:	2200      	movs	r2, #0
 8007b96:	2300      	movs	r3, #0
 8007b98:	4620      	mov	r0, r4
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	f7f8 ff04 	bl	80009a8 <__aeabi_dcmpeq>
 8007ba0:	b918      	cbnz	r0, 8007baa <__cvt+0x7e>
 8007ba2:	f1c5 0501 	rsb	r5, r5, #1
 8007ba6:	f8ca 5000 	str.w	r5, [sl]
 8007baa:	f8da 3000 	ldr.w	r3, [sl]
 8007bae:	4499      	add	r9, r3
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	f7f8 fef6 	bl	80009a8 <__aeabi_dcmpeq>
 8007bbc:	b938      	cbnz	r0, 8007bce <__cvt+0xa2>
 8007bbe:	2230      	movs	r2, #48	; 0x30
 8007bc0:	9b07      	ldr	r3, [sp, #28]
 8007bc2:	454b      	cmp	r3, r9
 8007bc4:	d205      	bcs.n	8007bd2 <__cvt+0xa6>
 8007bc6:	1c59      	adds	r1, r3, #1
 8007bc8:	9107      	str	r1, [sp, #28]
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	e7f8      	b.n	8007bc0 <__cvt+0x94>
 8007bce:	f8cd 901c 	str.w	r9, [sp, #28]
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	9b07      	ldr	r3, [sp, #28]
 8007bd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007bd8:	eba3 0308 	sub.w	r3, r3, r8
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	b008      	add	sp, #32
 8007be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007be4 <__exponent>:
 8007be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007be6:	2900      	cmp	r1, #0
 8007be8:	bfb4      	ite	lt
 8007bea:	232d      	movlt	r3, #45	; 0x2d
 8007bec:	232b      	movge	r3, #43	; 0x2b
 8007bee:	4604      	mov	r4, r0
 8007bf0:	bfb8      	it	lt
 8007bf2:	4249      	neglt	r1, r1
 8007bf4:	2909      	cmp	r1, #9
 8007bf6:	f804 2b02 	strb.w	r2, [r4], #2
 8007bfa:	7043      	strb	r3, [r0, #1]
 8007bfc:	dd21      	ble.n	8007c42 <__exponent+0x5e>
 8007bfe:	f10d 0307 	add.w	r3, sp, #7
 8007c02:	461f      	mov	r7, r3
 8007c04:	260a      	movs	r6, #10
 8007c06:	fb91 f5f6 	sdiv	r5, r1, r6
 8007c0a:	fb06 1115 	mls	r1, r6, r5, r1
 8007c0e:	2d09      	cmp	r5, #9
 8007c10:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007c14:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007c18:	f103 32ff 	add.w	r2, r3, #4294967295
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	dc09      	bgt.n	8007c34 <__exponent+0x50>
 8007c20:	3130      	adds	r1, #48	; 0x30
 8007c22:	3b02      	subs	r3, #2
 8007c24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007c28:	42bb      	cmp	r3, r7
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	d304      	bcc.n	8007c38 <__exponent+0x54>
 8007c2e:	1a10      	subs	r0, r2, r0
 8007c30:	b003      	add	sp, #12
 8007c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c34:	4613      	mov	r3, r2
 8007c36:	e7e6      	b.n	8007c06 <__exponent+0x22>
 8007c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c3c:	f804 2b01 	strb.w	r2, [r4], #1
 8007c40:	e7f2      	b.n	8007c28 <__exponent+0x44>
 8007c42:	2330      	movs	r3, #48	; 0x30
 8007c44:	4419      	add	r1, r3
 8007c46:	7083      	strb	r3, [r0, #2]
 8007c48:	1d02      	adds	r2, r0, #4
 8007c4a:	70c1      	strb	r1, [r0, #3]
 8007c4c:	e7ef      	b.n	8007c2e <__exponent+0x4a>
	...

08007c50 <_printf_float>:
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	b091      	sub	sp, #68	; 0x44
 8007c56:	460c      	mov	r4, r1
 8007c58:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007c5a:	4693      	mov	fp, r2
 8007c5c:	461e      	mov	r6, r3
 8007c5e:	4605      	mov	r5, r0
 8007c60:	f001 fce0 	bl	8009624 <_localeconv_r>
 8007c64:	6803      	ldr	r3, [r0, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	9309      	str	r3, [sp, #36]	; 0x24
 8007c6a:	f7f8 fa71 	bl	8000150 <strlen>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	930e      	str	r3, [sp, #56]	; 0x38
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	900a      	str	r0, [sp, #40]	; 0x28
 8007c76:	3307      	adds	r3, #7
 8007c78:	f023 0307 	bic.w	r3, r3, #7
 8007c7c:	f103 0208 	add.w	r2, r3, #8
 8007c80:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007c84:	f8d4 a000 	ldr.w	sl, [r4]
 8007c88:	603a      	str	r2, [r7, #0]
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c92:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8007c96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca0:	4ba6      	ldr	r3, [pc, #664]	; (8007f3c <_printf_float+0x2ec>)
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ca6:	f7f8 feb1 	bl	8000a0c <__aeabi_dcmpun>
 8007caa:	bb68      	cbnz	r0, 8007d08 <_printf_float+0xb8>
 8007cac:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb0:	4ba2      	ldr	r3, [pc, #648]	; (8007f3c <_printf_float+0x2ec>)
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cb6:	f7f8 fe8b 	bl	80009d0 <__aeabi_dcmple>
 8007cba:	bb28      	cbnz	r0, 8007d08 <_printf_float+0xb8>
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	4649      	mov	r1, r9
 8007cc4:	f7f8 fe7a 	bl	80009bc <__aeabi_dcmplt>
 8007cc8:	b110      	cbz	r0, 8007cd0 <_printf_float+0x80>
 8007cca:	232d      	movs	r3, #45	; 0x2d
 8007ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cd0:	4f9b      	ldr	r7, [pc, #620]	; (8007f40 <_printf_float+0x2f0>)
 8007cd2:	4b9c      	ldr	r3, [pc, #624]	; (8007f44 <_printf_float+0x2f4>)
 8007cd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007cd8:	bf98      	it	ls
 8007cda:	461f      	movls	r7, r3
 8007cdc:	2303      	movs	r3, #3
 8007cde:	f04f 0900 	mov.w	r9, #0
 8007ce2:	6123      	str	r3, [r4, #16]
 8007ce4:	f02a 0304 	bic.w	r3, sl, #4
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	9600      	str	r6, [sp, #0]
 8007cec:	465b      	mov	r3, fp
 8007cee:	aa0f      	add	r2, sp, #60	; 0x3c
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f000 f9e2 	bl	80080bc <_printf_common>
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	f040 8090 	bne.w	8007e1e <_printf_float+0x1ce>
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007d02:	b011      	add	sp, #68	; 0x44
 8007d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d08:	463a      	mov	r2, r7
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	4649      	mov	r1, r9
 8007d10:	f7f8 fe7c 	bl	8000a0c <__aeabi_dcmpun>
 8007d14:	b110      	cbz	r0, 8007d1c <_printf_float+0xcc>
 8007d16:	4f8c      	ldr	r7, [pc, #560]	; (8007f48 <_printf_float+0x2f8>)
 8007d18:	4b8c      	ldr	r3, [pc, #560]	; (8007f4c <_printf_float+0x2fc>)
 8007d1a:	e7db      	b.n	8007cd4 <_printf_float+0x84>
 8007d1c:	6863      	ldr	r3, [r4, #4]
 8007d1e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007d22:	1c59      	adds	r1, r3, #1
 8007d24:	a80d      	add	r0, sp, #52	; 0x34
 8007d26:	a90e      	add	r1, sp, #56	; 0x38
 8007d28:	d140      	bne.n	8007dac <_printf_float+0x15c>
 8007d2a:	2306      	movs	r3, #6
 8007d2c:	6063      	str	r3, [r4, #4]
 8007d2e:	f04f 0c00 	mov.w	ip, #0
 8007d32:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007d36:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	6022      	str	r2, [r4, #0]
 8007d3e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	463a      	mov	r2, r7
 8007d46:	464b      	mov	r3, r9
 8007d48:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f7ff feed 	bl	8007b2c <__cvt>
 8007d52:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007d56:	2b47      	cmp	r3, #71	; 0x47
 8007d58:	4607      	mov	r7, r0
 8007d5a:	d109      	bne.n	8007d70 <_printf_float+0x120>
 8007d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d5e:	1cd8      	adds	r0, r3, #3
 8007d60:	db02      	blt.n	8007d68 <_printf_float+0x118>
 8007d62:	6862      	ldr	r2, [r4, #4]
 8007d64:	4293      	cmp	r3, r2
 8007d66:	dd47      	ble.n	8007df8 <_printf_float+0x1a8>
 8007d68:	f1a8 0802 	sub.w	r8, r8, #2
 8007d6c:	fa5f f888 	uxtb.w	r8, r8
 8007d70:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007d74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d76:	d824      	bhi.n	8007dc2 <_printf_float+0x172>
 8007d78:	3901      	subs	r1, #1
 8007d7a:	4642      	mov	r2, r8
 8007d7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d80:	910d      	str	r1, [sp, #52]	; 0x34
 8007d82:	f7ff ff2f 	bl	8007be4 <__exponent>
 8007d86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d88:	4681      	mov	r9, r0
 8007d8a:	1813      	adds	r3, r2, r0
 8007d8c:	2a01      	cmp	r2, #1
 8007d8e:	6123      	str	r3, [r4, #16]
 8007d90:	dc02      	bgt.n	8007d98 <_printf_float+0x148>
 8007d92:	6822      	ldr	r2, [r4, #0]
 8007d94:	07d1      	lsls	r1, r2, #31
 8007d96:	d501      	bpl.n	8007d9c <_printf_float+0x14c>
 8007d98:	3301      	adds	r3, #1
 8007d9a:	6123      	str	r3, [r4, #16]
 8007d9c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0a2      	beq.n	8007cea <_printf_float+0x9a>
 8007da4:	232d      	movs	r3, #45	; 0x2d
 8007da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007daa:	e79e      	b.n	8007cea <_printf_float+0x9a>
 8007dac:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007db0:	f000 816e 	beq.w	8008090 <_printf_float+0x440>
 8007db4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007db8:	d1b9      	bne.n	8007d2e <_printf_float+0xde>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1b7      	bne.n	8007d2e <_printf_float+0xde>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e7b4      	b.n	8007d2c <_printf_float+0xdc>
 8007dc2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8007dc6:	d119      	bne.n	8007dfc <_printf_float+0x1ac>
 8007dc8:	2900      	cmp	r1, #0
 8007dca:	6863      	ldr	r3, [r4, #4]
 8007dcc:	dd0c      	ble.n	8007de8 <_printf_float+0x198>
 8007dce:	6121      	str	r1, [r4, #16]
 8007dd0:	b913      	cbnz	r3, 8007dd8 <_printf_float+0x188>
 8007dd2:	6822      	ldr	r2, [r4, #0]
 8007dd4:	07d2      	lsls	r2, r2, #31
 8007dd6:	d502      	bpl.n	8007dde <_printf_float+0x18e>
 8007dd8:	3301      	adds	r3, #1
 8007dda:	440b      	add	r3, r1
 8007ddc:	6123      	str	r3, [r4, #16]
 8007dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007de0:	f04f 0900 	mov.w	r9, #0
 8007de4:	65a3      	str	r3, [r4, #88]	; 0x58
 8007de6:	e7d9      	b.n	8007d9c <_printf_float+0x14c>
 8007de8:	b913      	cbnz	r3, 8007df0 <_printf_float+0x1a0>
 8007dea:	6822      	ldr	r2, [r4, #0]
 8007dec:	07d0      	lsls	r0, r2, #31
 8007dee:	d501      	bpl.n	8007df4 <_printf_float+0x1a4>
 8007df0:	3302      	adds	r3, #2
 8007df2:	e7f3      	b.n	8007ddc <_printf_float+0x18c>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e7f1      	b.n	8007ddc <_printf_float+0x18c>
 8007df8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007dfc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007e00:	4293      	cmp	r3, r2
 8007e02:	db05      	blt.n	8007e10 <_printf_float+0x1c0>
 8007e04:	6822      	ldr	r2, [r4, #0]
 8007e06:	6123      	str	r3, [r4, #16]
 8007e08:	07d1      	lsls	r1, r2, #31
 8007e0a:	d5e8      	bpl.n	8007dde <_printf_float+0x18e>
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	e7e5      	b.n	8007ddc <_printf_float+0x18c>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bfcc      	ite	gt
 8007e14:	2301      	movgt	r3, #1
 8007e16:	f1c3 0302 	rsble	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	e7de      	b.n	8007ddc <_printf_float+0x18c>
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	055a      	lsls	r2, r3, #21
 8007e22:	d407      	bmi.n	8007e34 <_printf_float+0x1e4>
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	463a      	mov	r2, r7
 8007e28:	4659      	mov	r1, fp
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b0      	blx	r6
 8007e2e:	3001      	adds	r0, #1
 8007e30:	d129      	bne.n	8007e86 <_printf_float+0x236>
 8007e32:	e764      	b.n	8007cfe <_printf_float+0xae>
 8007e34:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007e38:	f240 80d7 	bls.w	8007fea <_printf_float+0x39a>
 8007e3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e40:	2200      	movs	r2, #0
 8007e42:	2300      	movs	r3, #0
 8007e44:	f7f8 fdb0 	bl	80009a8 <__aeabi_dcmpeq>
 8007e48:	b388      	cbz	r0, 8007eae <_printf_float+0x25e>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4a40      	ldr	r2, [pc, #256]	; (8007f50 <_printf_float+0x300>)
 8007e4e:	4659      	mov	r1, fp
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b0      	blx	r6
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f af52 	beq.w	8007cfe <_printf_float+0xae>
 8007e5a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	db02      	blt.n	8007e68 <_printf_float+0x218>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	07d8      	lsls	r0, r3, #31
 8007e66:	d50e      	bpl.n	8007e86 <_printf_float+0x236>
 8007e68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b0      	blx	r6
 8007e72:	3001      	adds	r0, #1
 8007e74:	f43f af43 	beq.w	8007cfe <_printf_float+0xae>
 8007e78:	2700      	movs	r7, #0
 8007e7a:	f104 081a 	add.w	r8, r4, #26
 8007e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e80:	3b01      	subs	r3, #1
 8007e82:	42bb      	cmp	r3, r7
 8007e84:	dc09      	bgt.n	8007e9a <_printf_float+0x24a>
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	079f      	lsls	r7, r3, #30
 8007e8a:	f100 80fd 	bmi.w	8008088 <_printf_float+0x438>
 8007e8e:	68e0      	ldr	r0, [r4, #12]
 8007e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e92:	4298      	cmp	r0, r3
 8007e94:	bfb8      	it	lt
 8007e96:	4618      	movlt	r0, r3
 8007e98:	e733      	b.n	8007d02 <_printf_float+0xb2>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	4659      	mov	r1, fp
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	47b0      	blx	r6
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	f43f af2a 	beq.w	8007cfe <_printf_float+0xae>
 8007eaa:	3701      	adds	r7, #1
 8007eac:	e7e7      	b.n	8007e7e <_printf_float+0x22e>
 8007eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dc2b      	bgt.n	8007f0c <_printf_float+0x2bc>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	4a26      	ldr	r2, [pc, #152]	; (8007f50 <_printf_float+0x300>)
 8007eb8:	4659      	mov	r1, fp
 8007eba:	4628      	mov	r0, r5
 8007ebc:	47b0      	blx	r6
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	f43f af1d 	beq.w	8007cfe <_printf_float+0xae>
 8007ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec6:	b923      	cbnz	r3, 8007ed2 <_printf_float+0x282>
 8007ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eca:	b913      	cbnz	r3, 8007ed2 <_printf_float+0x282>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	07d9      	lsls	r1, r3, #31
 8007ed0:	d5d9      	bpl.n	8007e86 <_printf_float+0x236>
 8007ed2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ed6:	4659      	mov	r1, fp
 8007ed8:	4628      	mov	r0, r5
 8007eda:	47b0      	blx	r6
 8007edc:	3001      	adds	r0, #1
 8007ede:	f43f af0e 	beq.w	8007cfe <_printf_float+0xae>
 8007ee2:	f04f 0800 	mov.w	r8, #0
 8007ee6:	f104 091a 	add.w	r9, r4, #26
 8007eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eec:	425b      	negs	r3, r3
 8007eee:	4543      	cmp	r3, r8
 8007ef0:	dc01      	bgt.n	8007ef6 <_printf_float+0x2a6>
 8007ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ef4:	e797      	b.n	8007e26 <_printf_float+0x1d6>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	464a      	mov	r2, r9
 8007efa:	4659      	mov	r1, fp
 8007efc:	4628      	mov	r0, r5
 8007efe:	47b0      	blx	r6
 8007f00:	3001      	adds	r0, #1
 8007f02:	f43f aefc 	beq.w	8007cfe <_printf_float+0xae>
 8007f06:	f108 0801 	add.w	r8, r8, #1
 8007f0a:	e7ee      	b.n	8007eea <_printf_float+0x29a>
 8007f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f10:	429a      	cmp	r2, r3
 8007f12:	bfa8      	it	ge
 8007f14:	461a      	movge	r2, r3
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	4690      	mov	r8, r2
 8007f1a:	dd07      	ble.n	8007f2c <_printf_float+0x2dc>
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	4659      	mov	r1, fp
 8007f20:	463a      	mov	r2, r7
 8007f22:	4628      	mov	r0, r5
 8007f24:	47b0      	blx	r6
 8007f26:	3001      	adds	r0, #1
 8007f28:	f43f aee9 	beq.w	8007cfe <_printf_float+0xae>
 8007f2c:	f104 031a 	add.w	r3, r4, #26
 8007f30:	f04f 0a00 	mov.w	sl, #0
 8007f34:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f3a:	e015      	b.n	8007f68 <_printf_float+0x318>
 8007f3c:	7fefffff 	.word	0x7fefffff
 8007f40:	0800a968 	.word	0x0800a968
 8007f44:	0800a964 	.word	0x0800a964
 8007f48:	0800a970 	.word	0x0800a970
 8007f4c:	0800a96c 	.word	0x0800a96c
 8007f50:	0800a974 	.word	0x0800a974
 8007f54:	2301      	movs	r3, #1
 8007f56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f58:	4659      	mov	r1, fp
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b0      	blx	r6
 8007f5e:	3001      	adds	r0, #1
 8007f60:	f43f aecd 	beq.w	8007cfe <_printf_float+0xae>
 8007f64:	f10a 0a01 	add.w	sl, sl, #1
 8007f68:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007f6c:	eba9 0308 	sub.w	r3, r9, r8
 8007f70:	4553      	cmp	r3, sl
 8007f72:	dcef      	bgt.n	8007f54 <_printf_float+0x304>
 8007f74:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	444f      	add	r7, r9
 8007f7c:	db14      	blt.n	8007fa8 <_printf_float+0x358>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	07da      	lsls	r2, r3, #31
 8007f82:	d411      	bmi.n	8007fa8 <_printf_float+0x358>
 8007f84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f88:	eba3 0209 	sub.w	r2, r3, r9
 8007f8c:	eba3 0901 	sub.w	r9, r3, r1
 8007f90:	4591      	cmp	r9, r2
 8007f92:	bfa8      	it	ge
 8007f94:	4691      	movge	r9, r2
 8007f96:	f1b9 0f00 	cmp.w	r9, #0
 8007f9a:	dc0d      	bgt.n	8007fb8 <_printf_float+0x368>
 8007f9c:	2700      	movs	r7, #0
 8007f9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fa2:	f104 081a 	add.w	r8, r4, #26
 8007fa6:	e018      	b.n	8007fda <_printf_float+0x38a>
 8007fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fac:	4659      	mov	r1, fp
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b0      	blx	r6
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	d1e6      	bne.n	8007f84 <_printf_float+0x334>
 8007fb6:	e6a2      	b.n	8007cfe <_printf_float+0xae>
 8007fb8:	464b      	mov	r3, r9
 8007fba:	463a      	mov	r2, r7
 8007fbc:	4659      	mov	r1, fp
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b0      	blx	r6
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d1ea      	bne.n	8007f9c <_printf_float+0x34c>
 8007fc6:	e69a      	b.n	8007cfe <_printf_float+0xae>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	4642      	mov	r2, r8
 8007fcc:	4659      	mov	r1, fp
 8007fce:	4628      	mov	r0, r5
 8007fd0:	47b0      	blx	r6
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	f43f ae93 	beq.w	8007cfe <_printf_float+0xae>
 8007fd8:	3701      	adds	r7, #1
 8007fda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007fde:	1a9b      	subs	r3, r3, r2
 8007fe0:	eba3 0309 	sub.w	r3, r3, r9
 8007fe4:	42bb      	cmp	r3, r7
 8007fe6:	dcef      	bgt.n	8007fc8 <_printf_float+0x378>
 8007fe8:	e74d      	b.n	8007e86 <_printf_float+0x236>
 8007fea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fec:	2a01      	cmp	r2, #1
 8007fee:	dc01      	bgt.n	8007ff4 <_printf_float+0x3a4>
 8007ff0:	07db      	lsls	r3, r3, #31
 8007ff2:	d538      	bpl.n	8008066 <_printf_float+0x416>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	463a      	mov	r2, r7
 8007ff8:	4659      	mov	r1, fp
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b0      	blx	r6
 8007ffe:	3001      	adds	r0, #1
 8008000:	f43f ae7d 	beq.w	8007cfe <_printf_float+0xae>
 8008004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008008:	4659      	mov	r1, fp
 800800a:	4628      	mov	r0, r5
 800800c:	47b0      	blx	r6
 800800e:	3001      	adds	r0, #1
 8008010:	f107 0701 	add.w	r7, r7, #1
 8008014:	f43f ae73 	beq.w	8007cfe <_printf_float+0xae>
 8008018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800801c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800801e:	2200      	movs	r2, #0
 8008020:	f103 38ff 	add.w	r8, r3, #4294967295
 8008024:	2300      	movs	r3, #0
 8008026:	f7f8 fcbf 	bl	80009a8 <__aeabi_dcmpeq>
 800802a:	b9c0      	cbnz	r0, 800805e <_printf_float+0x40e>
 800802c:	4643      	mov	r3, r8
 800802e:	463a      	mov	r2, r7
 8008030:	4659      	mov	r1, fp
 8008032:	4628      	mov	r0, r5
 8008034:	47b0      	blx	r6
 8008036:	3001      	adds	r0, #1
 8008038:	d10d      	bne.n	8008056 <_printf_float+0x406>
 800803a:	e660      	b.n	8007cfe <_printf_float+0xae>
 800803c:	2301      	movs	r3, #1
 800803e:	4642      	mov	r2, r8
 8008040:	4659      	mov	r1, fp
 8008042:	4628      	mov	r0, r5
 8008044:	47b0      	blx	r6
 8008046:	3001      	adds	r0, #1
 8008048:	f43f ae59 	beq.w	8007cfe <_printf_float+0xae>
 800804c:	3701      	adds	r7, #1
 800804e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008050:	3b01      	subs	r3, #1
 8008052:	42bb      	cmp	r3, r7
 8008054:	dcf2      	bgt.n	800803c <_printf_float+0x3ec>
 8008056:	464b      	mov	r3, r9
 8008058:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800805c:	e6e4      	b.n	8007e28 <_printf_float+0x1d8>
 800805e:	2700      	movs	r7, #0
 8008060:	f104 081a 	add.w	r8, r4, #26
 8008064:	e7f3      	b.n	800804e <_printf_float+0x3fe>
 8008066:	2301      	movs	r3, #1
 8008068:	e7e1      	b.n	800802e <_printf_float+0x3de>
 800806a:	2301      	movs	r3, #1
 800806c:	4642      	mov	r2, r8
 800806e:	4659      	mov	r1, fp
 8008070:	4628      	mov	r0, r5
 8008072:	47b0      	blx	r6
 8008074:	3001      	adds	r0, #1
 8008076:	f43f ae42 	beq.w	8007cfe <_printf_float+0xae>
 800807a:	3701      	adds	r7, #1
 800807c:	68e3      	ldr	r3, [r4, #12]
 800807e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008080:	1a9b      	subs	r3, r3, r2
 8008082:	42bb      	cmp	r3, r7
 8008084:	dcf1      	bgt.n	800806a <_printf_float+0x41a>
 8008086:	e702      	b.n	8007e8e <_printf_float+0x23e>
 8008088:	2700      	movs	r7, #0
 800808a:	f104 0819 	add.w	r8, r4, #25
 800808e:	e7f5      	b.n	800807c <_printf_float+0x42c>
 8008090:	2b00      	cmp	r3, #0
 8008092:	f43f ae94 	beq.w	8007dbe <_printf_float+0x16e>
 8008096:	f04f 0c00 	mov.w	ip, #0
 800809a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800809e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80080a2:	6022      	str	r2, [r4, #0]
 80080a4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80080a8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	463a      	mov	r2, r7
 80080b0:	464b      	mov	r3, r9
 80080b2:	4628      	mov	r0, r5
 80080b4:	f7ff fd3a 	bl	8007b2c <__cvt>
 80080b8:	4607      	mov	r7, r0
 80080ba:	e64f      	b.n	8007d5c <_printf_float+0x10c>

080080bc <_printf_common>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	4691      	mov	r9, r2
 80080c2:	461f      	mov	r7, r3
 80080c4:	688a      	ldr	r2, [r1, #8]
 80080c6:	690b      	ldr	r3, [r1, #16]
 80080c8:	4606      	mov	r6, r0
 80080ca:	4293      	cmp	r3, r2
 80080cc:	bfb8      	it	lt
 80080ce:	4613      	movlt	r3, r2
 80080d0:	f8c9 3000 	str.w	r3, [r9]
 80080d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080d8:	460c      	mov	r4, r1
 80080da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080de:	b112      	cbz	r2, 80080e6 <_printf_common+0x2a>
 80080e0:	3301      	adds	r3, #1
 80080e2:	f8c9 3000 	str.w	r3, [r9]
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	0699      	lsls	r1, r3, #26
 80080ea:	bf42      	ittt	mi
 80080ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80080f0:	3302      	addmi	r3, #2
 80080f2:	f8c9 3000 	strmi.w	r3, [r9]
 80080f6:	6825      	ldr	r5, [r4, #0]
 80080f8:	f015 0506 	ands.w	r5, r5, #6
 80080fc:	d107      	bne.n	800810e <_printf_common+0x52>
 80080fe:	f104 0a19 	add.w	sl, r4, #25
 8008102:	68e3      	ldr	r3, [r4, #12]
 8008104:	f8d9 2000 	ldr.w	r2, [r9]
 8008108:	1a9b      	subs	r3, r3, r2
 800810a:	42ab      	cmp	r3, r5
 800810c:	dc29      	bgt.n	8008162 <_printf_common+0xa6>
 800810e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008112:	6822      	ldr	r2, [r4, #0]
 8008114:	3300      	adds	r3, #0
 8008116:	bf18      	it	ne
 8008118:	2301      	movne	r3, #1
 800811a:	0692      	lsls	r2, r2, #26
 800811c:	d42e      	bmi.n	800817c <_printf_common+0xc0>
 800811e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008122:	4639      	mov	r1, r7
 8008124:	4630      	mov	r0, r6
 8008126:	47c0      	blx	r8
 8008128:	3001      	adds	r0, #1
 800812a:	d021      	beq.n	8008170 <_printf_common+0xb4>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	68e5      	ldr	r5, [r4, #12]
 8008130:	f003 0306 	and.w	r3, r3, #6
 8008134:	2b04      	cmp	r3, #4
 8008136:	bf18      	it	ne
 8008138:	2500      	movne	r5, #0
 800813a:	f8d9 2000 	ldr.w	r2, [r9]
 800813e:	f04f 0900 	mov.w	r9, #0
 8008142:	bf08      	it	eq
 8008144:	1aad      	subeq	r5, r5, r2
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	6922      	ldr	r2, [r4, #16]
 800814a:	bf08      	it	eq
 800814c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008150:	4293      	cmp	r3, r2
 8008152:	bfc4      	itt	gt
 8008154:	1a9b      	subgt	r3, r3, r2
 8008156:	18ed      	addgt	r5, r5, r3
 8008158:	341a      	adds	r4, #26
 800815a:	454d      	cmp	r5, r9
 800815c:	d11a      	bne.n	8008194 <_printf_common+0xd8>
 800815e:	2000      	movs	r0, #0
 8008160:	e008      	b.n	8008174 <_printf_common+0xb8>
 8008162:	2301      	movs	r3, #1
 8008164:	4652      	mov	r2, sl
 8008166:	4639      	mov	r1, r7
 8008168:	4630      	mov	r0, r6
 800816a:	47c0      	blx	r8
 800816c:	3001      	adds	r0, #1
 800816e:	d103      	bne.n	8008178 <_printf_common+0xbc>
 8008170:	f04f 30ff 	mov.w	r0, #4294967295
 8008174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008178:	3501      	adds	r5, #1
 800817a:	e7c2      	b.n	8008102 <_printf_common+0x46>
 800817c:	2030      	movs	r0, #48	; 0x30
 800817e:	18e1      	adds	r1, r4, r3
 8008180:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008184:	1c5a      	adds	r2, r3, #1
 8008186:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800818a:	4422      	add	r2, r4
 800818c:	3302      	adds	r3, #2
 800818e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008192:	e7c4      	b.n	800811e <_printf_common+0x62>
 8008194:	2301      	movs	r3, #1
 8008196:	4622      	mov	r2, r4
 8008198:	4639      	mov	r1, r7
 800819a:	4630      	mov	r0, r6
 800819c:	47c0      	blx	r8
 800819e:	3001      	adds	r0, #1
 80081a0:	d0e6      	beq.n	8008170 <_printf_common+0xb4>
 80081a2:	f109 0901 	add.w	r9, r9, #1
 80081a6:	e7d8      	b.n	800815a <_printf_common+0x9e>

080081a8 <_printf_i>:
 80081a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80081b0:	460c      	mov	r4, r1
 80081b2:	7e09      	ldrb	r1, [r1, #24]
 80081b4:	b085      	sub	sp, #20
 80081b6:	296e      	cmp	r1, #110	; 0x6e
 80081b8:	4617      	mov	r7, r2
 80081ba:	4606      	mov	r6, r0
 80081bc:	4698      	mov	r8, r3
 80081be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081c0:	f000 80b3 	beq.w	800832a <_printf_i+0x182>
 80081c4:	d822      	bhi.n	800820c <_printf_i+0x64>
 80081c6:	2963      	cmp	r1, #99	; 0x63
 80081c8:	d036      	beq.n	8008238 <_printf_i+0x90>
 80081ca:	d80a      	bhi.n	80081e2 <_printf_i+0x3a>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	f000 80b9 	beq.w	8008344 <_printf_i+0x19c>
 80081d2:	2958      	cmp	r1, #88	; 0x58
 80081d4:	f000 8083 	beq.w	80082de <_printf_i+0x136>
 80081d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80081e0:	e032      	b.n	8008248 <_printf_i+0xa0>
 80081e2:	2964      	cmp	r1, #100	; 0x64
 80081e4:	d001      	beq.n	80081ea <_printf_i+0x42>
 80081e6:	2969      	cmp	r1, #105	; 0x69
 80081e8:	d1f6      	bne.n	80081d8 <_printf_i+0x30>
 80081ea:	6820      	ldr	r0, [r4, #0]
 80081ec:	6813      	ldr	r3, [r2, #0]
 80081ee:	0605      	lsls	r5, r0, #24
 80081f0:	f103 0104 	add.w	r1, r3, #4
 80081f4:	d52a      	bpl.n	800824c <_printf_i+0xa4>
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6011      	str	r1, [r2, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da03      	bge.n	8008206 <_printf_i+0x5e>
 80081fe:	222d      	movs	r2, #45	; 0x2d
 8008200:	425b      	negs	r3, r3
 8008202:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008206:	486f      	ldr	r0, [pc, #444]	; (80083c4 <_printf_i+0x21c>)
 8008208:	220a      	movs	r2, #10
 800820a:	e039      	b.n	8008280 <_printf_i+0xd8>
 800820c:	2973      	cmp	r1, #115	; 0x73
 800820e:	f000 809d 	beq.w	800834c <_printf_i+0x1a4>
 8008212:	d808      	bhi.n	8008226 <_printf_i+0x7e>
 8008214:	296f      	cmp	r1, #111	; 0x6f
 8008216:	d020      	beq.n	800825a <_printf_i+0xb2>
 8008218:	2970      	cmp	r1, #112	; 0x70
 800821a:	d1dd      	bne.n	80081d8 <_printf_i+0x30>
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	f043 0320 	orr.w	r3, r3, #32
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	e003      	b.n	800822e <_printf_i+0x86>
 8008226:	2975      	cmp	r1, #117	; 0x75
 8008228:	d017      	beq.n	800825a <_printf_i+0xb2>
 800822a:	2978      	cmp	r1, #120	; 0x78
 800822c:	d1d4      	bne.n	80081d8 <_printf_i+0x30>
 800822e:	2378      	movs	r3, #120	; 0x78
 8008230:	4865      	ldr	r0, [pc, #404]	; (80083c8 <_printf_i+0x220>)
 8008232:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008236:	e055      	b.n	80082e4 <_printf_i+0x13c>
 8008238:	6813      	ldr	r3, [r2, #0]
 800823a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800823e:	1d19      	adds	r1, r3, #4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6011      	str	r1, [r2, #0]
 8008244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008248:	2301      	movs	r3, #1
 800824a:	e08c      	b.n	8008366 <_printf_i+0x1be>
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008252:	6011      	str	r1, [r2, #0]
 8008254:	bf18      	it	ne
 8008256:	b21b      	sxthne	r3, r3
 8008258:	e7cf      	b.n	80081fa <_printf_i+0x52>
 800825a:	6813      	ldr	r3, [r2, #0]
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	1d18      	adds	r0, r3, #4
 8008260:	6010      	str	r0, [r2, #0]
 8008262:	0628      	lsls	r0, r5, #24
 8008264:	d501      	bpl.n	800826a <_printf_i+0xc2>
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	e002      	b.n	8008270 <_printf_i+0xc8>
 800826a:	0668      	lsls	r0, r5, #25
 800826c:	d5fb      	bpl.n	8008266 <_printf_i+0xbe>
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	296f      	cmp	r1, #111	; 0x6f
 8008272:	bf14      	ite	ne
 8008274:	220a      	movne	r2, #10
 8008276:	2208      	moveq	r2, #8
 8008278:	4852      	ldr	r0, [pc, #328]	; (80083c4 <_printf_i+0x21c>)
 800827a:	2100      	movs	r1, #0
 800827c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008280:	6865      	ldr	r5, [r4, #4]
 8008282:	2d00      	cmp	r5, #0
 8008284:	60a5      	str	r5, [r4, #8]
 8008286:	f2c0 8095 	blt.w	80083b4 <_printf_i+0x20c>
 800828a:	6821      	ldr	r1, [r4, #0]
 800828c:	f021 0104 	bic.w	r1, r1, #4
 8008290:	6021      	str	r1, [r4, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d13d      	bne.n	8008312 <_printf_i+0x16a>
 8008296:	2d00      	cmp	r5, #0
 8008298:	f040 808e 	bne.w	80083b8 <_printf_i+0x210>
 800829c:	4665      	mov	r5, ip
 800829e:	2a08      	cmp	r2, #8
 80082a0:	d10b      	bne.n	80082ba <_printf_i+0x112>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	07db      	lsls	r3, r3, #31
 80082a6:	d508      	bpl.n	80082ba <_printf_i+0x112>
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	6862      	ldr	r2, [r4, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	bfde      	ittt	le
 80082b0:	2330      	movle	r3, #48	; 0x30
 80082b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082ba:	ebac 0305 	sub.w	r3, ip, r5
 80082be:	6123      	str	r3, [r4, #16]
 80082c0:	f8cd 8000 	str.w	r8, [sp]
 80082c4:	463b      	mov	r3, r7
 80082c6:	aa03      	add	r2, sp, #12
 80082c8:	4621      	mov	r1, r4
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7ff fef6 	bl	80080bc <_printf_common>
 80082d0:	3001      	adds	r0, #1
 80082d2:	d14d      	bne.n	8008370 <_printf_i+0x1c8>
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	b005      	add	sp, #20
 80082da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082de:	4839      	ldr	r0, [pc, #228]	; (80083c4 <_printf_i+0x21c>)
 80082e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80082e4:	6813      	ldr	r3, [r2, #0]
 80082e6:	6821      	ldr	r1, [r4, #0]
 80082e8:	1d1d      	adds	r5, r3, #4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6015      	str	r5, [r2, #0]
 80082ee:	060a      	lsls	r2, r1, #24
 80082f0:	d50b      	bpl.n	800830a <_printf_i+0x162>
 80082f2:	07ca      	lsls	r2, r1, #31
 80082f4:	bf44      	itt	mi
 80082f6:	f041 0120 	orrmi.w	r1, r1, #32
 80082fa:	6021      	strmi	r1, [r4, #0]
 80082fc:	b91b      	cbnz	r3, 8008306 <_printf_i+0x15e>
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	f022 0220 	bic.w	r2, r2, #32
 8008304:	6022      	str	r2, [r4, #0]
 8008306:	2210      	movs	r2, #16
 8008308:	e7b7      	b.n	800827a <_printf_i+0xd2>
 800830a:	064d      	lsls	r5, r1, #25
 800830c:	bf48      	it	mi
 800830e:	b29b      	uxthmi	r3, r3
 8008310:	e7ef      	b.n	80082f2 <_printf_i+0x14a>
 8008312:	4665      	mov	r5, ip
 8008314:	fbb3 f1f2 	udiv	r1, r3, r2
 8008318:	fb02 3311 	mls	r3, r2, r1, r3
 800831c:	5cc3      	ldrb	r3, [r0, r3]
 800831e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008322:	460b      	mov	r3, r1
 8008324:	2900      	cmp	r1, #0
 8008326:	d1f5      	bne.n	8008314 <_printf_i+0x16c>
 8008328:	e7b9      	b.n	800829e <_printf_i+0xf6>
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	6825      	ldr	r5, [r4, #0]
 800832e:	1d18      	adds	r0, r3, #4
 8008330:	6961      	ldr	r1, [r4, #20]
 8008332:	6010      	str	r0, [r2, #0]
 8008334:	0628      	lsls	r0, r5, #24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	d501      	bpl.n	800833e <_printf_i+0x196>
 800833a:	6019      	str	r1, [r3, #0]
 800833c:	e002      	b.n	8008344 <_printf_i+0x19c>
 800833e:	066a      	lsls	r2, r5, #25
 8008340:	d5fb      	bpl.n	800833a <_printf_i+0x192>
 8008342:	8019      	strh	r1, [r3, #0]
 8008344:	2300      	movs	r3, #0
 8008346:	4665      	mov	r5, ip
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	e7b9      	b.n	80082c0 <_printf_i+0x118>
 800834c:	6813      	ldr	r3, [r2, #0]
 800834e:	1d19      	adds	r1, r3, #4
 8008350:	6011      	str	r1, [r2, #0]
 8008352:	681d      	ldr	r5, [r3, #0]
 8008354:	6862      	ldr	r2, [r4, #4]
 8008356:	2100      	movs	r1, #0
 8008358:	4628      	mov	r0, r5
 800835a:	f001 f9dd 	bl	8009718 <memchr>
 800835e:	b108      	cbz	r0, 8008364 <_printf_i+0x1bc>
 8008360:	1b40      	subs	r0, r0, r5
 8008362:	6060      	str	r0, [r4, #4]
 8008364:	6863      	ldr	r3, [r4, #4]
 8008366:	6123      	str	r3, [r4, #16]
 8008368:	2300      	movs	r3, #0
 800836a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836e:	e7a7      	b.n	80082c0 <_printf_i+0x118>
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	462a      	mov	r2, r5
 8008374:	4639      	mov	r1, r7
 8008376:	4630      	mov	r0, r6
 8008378:	47c0      	blx	r8
 800837a:	3001      	adds	r0, #1
 800837c:	d0aa      	beq.n	80082d4 <_printf_i+0x12c>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	079b      	lsls	r3, r3, #30
 8008382:	d413      	bmi.n	80083ac <_printf_i+0x204>
 8008384:	68e0      	ldr	r0, [r4, #12]
 8008386:	9b03      	ldr	r3, [sp, #12]
 8008388:	4298      	cmp	r0, r3
 800838a:	bfb8      	it	lt
 800838c:	4618      	movlt	r0, r3
 800838e:	e7a3      	b.n	80082d8 <_printf_i+0x130>
 8008390:	2301      	movs	r3, #1
 8008392:	464a      	mov	r2, r9
 8008394:	4639      	mov	r1, r7
 8008396:	4630      	mov	r0, r6
 8008398:	47c0      	blx	r8
 800839a:	3001      	adds	r0, #1
 800839c:	d09a      	beq.n	80082d4 <_printf_i+0x12c>
 800839e:	3501      	adds	r5, #1
 80083a0:	68e3      	ldr	r3, [r4, #12]
 80083a2:	9a03      	ldr	r2, [sp, #12]
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	42ab      	cmp	r3, r5
 80083a8:	dcf2      	bgt.n	8008390 <_printf_i+0x1e8>
 80083aa:	e7eb      	b.n	8008384 <_printf_i+0x1dc>
 80083ac:	2500      	movs	r5, #0
 80083ae:	f104 0919 	add.w	r9, r4, #25
 80083b2:	e7f5      	b.n	80083a0 <_printf_i+0x1f8>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1ac      	bne.n	8008312 <_printf_i+0x16a>
 80083b8:	7803      	ldrb	r3, [r0, #0]
 80083ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083c2:	e76c      	b.n	800829e <_printf_i+0xf6>
 80083c4:	0800a976 	.word	0x0800a976
 80083c8:	0800a987 	.word	0x0800a987

080083cc <iprintf>:
 80083cc:	b40f      	push	{r0, r1, r2, r3}
 80083ce:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <iprintf+0x2c>)
 80083d0:	b513      	push	{r0, r1, r4, lr}
 80083d2:	681c      	ldr	r4, [r3, #0]
 80083d4:	b124      	cbz	r4, 80083e0 <iprintf+0x14>
 80083d6:	69a3      	ldr	r3, [r4, #24]
 80083d8:	b913      	cbnz	r3, 80083e0 <iprintf+0x14>
 80083da:	4620      	mov	r0, r4
 80083dc:	f001 f898 	bl	8009510 <__sinit>
 80083e0:	ab05      	add	r3, sp, #20
 80083e2:	9a04      	ldr	r2, [sp, #16]
 80083e4:	68a1      	ldr	r1, [r4, #8]
 80083e6:	4620      	mov	r0, r4
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	f001 feb9 	bl	800a160 <_vfiprintf_r>
 80083ee:	b002      	add	sp, #8
 80083f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f4:	b004      	add	sp, #16
 80083f6:	4770      	bx	lr
 80083f8:	20000024 	.word	0x20000024

080083fc <putchar>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4b08      	ldr	r3, [pc, #32]	; (8008420 <putchar+0x24>)
 8008400:	4605      	mov	r5, r0
 8008402:	681c      	ldr	r4, [r3, #0]
 8008404:	b124      	cbz	r4, 8008410 <putchar+0x14>
 8008406:	69a3      	ldr	r3, [r4, #24]
 8008408:	b913      	cbnz	r3, 8008410 <putchar+0x14>
 800840a:	4620      	mov	r0, r4
 800840c:	f001 f880 	bl	8009510 <__sinit>
 8008410:	68a2      	ldr	r2, [r4, #8]
 8008412:	4629      	mov	r1, r5
 8008414:	4620      	mov	r0, r4
 8008416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800841a:	f001 bfb7 	b.w	800a38c <_putc_r>
 800841e:	bf00      	nop
 8008420:	20000024 	.word	0x20000024

08008424 <_puts_r>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	460e      	mov	r6, r1
 8008428:	4605      	mov	r5, r0
 800842a:	b118      	cbz	r0, 8008434 <_puts_r+0x10>
 800842c:	6983      	ldr	r3, [r0, #24]
 800842e:	b90b      	cbnz	r3, 8008434 <_puts_r+0x10>
 8008430:	f001 f86e 	bl	8009510 <__sinit>
 8008434:	69ab      	ldr	r3, [r5, #24]
 8008436:	68ac      	ldr	r4, [r5, #8]
 8008438:	b913      	cbnz	r3, 8008440 <_puts_r+0x1c>
 800843a:	4628      	mov	r0, r5
 800843c:	f001 f868 	bl	8009510 <__sinit>
 8008440:	4b23      	ldr	r3, [pc, #140]	; (80084d0 <_puts_r+0xac>)
 8008442:	429c      	cmp	r4, r3
 8008444:	d117      	bne.n	8008476 <_puts_r+0x52>
 8008446:	686c      	ldr	r4, [r5, #4]
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	071b      	lsls	r3, r3, #28
 800844c:	d51d      	bpl.n	800848a <_puts_r+0x66>
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	b1db      	cbz	r3, 800848a <_puts_r+0x66>
 8008452:	3e01      	subs	r6, #1
 8008454:	68a3      	ldr	r3, [r4, #8]
 8008456:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800845a:	3b01      	subs	r3, #1
 800845c:	60a3      	str	r3, [r4, #8]
 800845e:	b9e9      	cbnz	r1, 800849c <_puts_r+0x78>
 8008460:	2b00      	cmp	r3, #0
 8008462:	da2e      	bge.n	80084c2 <_puts_r+0x9e>
 8008464:	4622      	mov	r2, r4
 8008466:	210a      	movs	r1, #10
 8008468:	4628      	mov	r0, r5
 800846a:	f000 f85f 	bl	800852c <__swbuf_r>
 800846e:	3001      	adds	r0, #1
 8008470:	d011      	beq.n	8008496 <_puts_r+0x72>
 8008472:	200a      	movs	r0, #10
 8008474:	e011      	b.n	800849a <_puts_r+0x76>
 8008476:	4b17      	ldr	r3, [pc, #92]	; (80084d4 <_puts_r+0xb0>)
 8008478:	429c      	cmp	r4, r3
 800847a:	d101      	bne.n	8008480 <_puts_r+0x5c>
 800847c:	68ac      	ldr	r4, [r5, #8]
 800847e:	e7e3      	b.n	8008448 <_puts_r+0x24>
 8008480:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <_puts_r+0xb4>)
 8008482:	429c      	cmp	r4, r3
 8008484:	bf08      	it	eq
 8008486:	68ec      	ldreq	r4, [r5, #12]
 8008488:	e7de      	b.n	8008448 <_puts_r+0x24>
 800848a:	4621      	mov	r1, r4
 800848c:	4628      	mov	r0, r5
 800848e:	f000 f89f 	bl	80085d0 <__swsetup_r>
 8008492:	2800      	cmp	r0, #0
 8008494:	d0dd      	beq.n	8008452 <_puts_r+0x2e>
 8008496:	f04f 30ff 	mov.w	r0, #4294967295
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	2b00      	cmp	r3, #0
 800849e:	da04      	bge.n	80084aa <_puts_r+0x86>
 80084a0:	69a2      	ldr	r2, [r4, #24]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	dc06      	bgt.n	80084b4 <_puts_r+0x90>
 80084a6:	290a      	cmp	r1, #10
 80084a8:	d004      	beq.n	80084b4 <_puts_r+0x90>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	6022      	str	r2, [r4, #0]
 80084b0:	7019      	strb	r1, [r3, #0]
 80084b2:	e7cf      	b.n	8008454 <_puts_r+0x30>
 80084b4:	4622      	mov	r2, r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	f000 f838 	bl	800852c <__swbuf_r>
 80084bc:	3001      	adds	r0, #1
 80084be:	d1c9      	bne.n	8008454 <_puts_r+0x30>
 80084c0:	e7e9      	b.n	8008496 <_puts_r+0x72>
 80084c2:	200a      	movs	r0, #10
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	6022      	str	r2, [r4, #0]
 80084ca:	7018      	strb	r0, [r3, #0]
 80084cc:	e7e5      	b.n	800849a <_puts_r+0x76>
 80084ce:	bf00      	nop
 80084d0:	0800a9c8 	.word	0x0800a9c8
 80084d4:	0800a9e8 	.word	0x0800a9e8
 80084d8:	0800a9a8 	.word	0x0800a9a8

080084dc <puts>:
 80084dc:	4b02      	ldr	r3, [pc, #8]	; (80084e8 <puts+0xc>)
 80084de:	4601      	mov	r1, r0
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	f7ff bf9f 	b.w	8008424 <_puts_r>
 80084e6:	bf00      	nop
 80084e8:	20000024 	.word	0x20000024

080084ec <siprintf>:
 80084ec:	b40e      	push	{r1, r2, r3}
 80084ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084f2:	b500      	push	{lr}
 80084f4:	b09c      	sub	sp, #112	; 0x70
 80084f6:	ab1d      	add	r3, sp, #116	; 0x74
 80084f8:	9002      	str	r0, [sp, #8]
 80084fa:	9006      	str	r0, [sp, #24]
 80084fc:	9107      	str	r1, [sp, #28]
 80084fe:	9104      	str	r1, [sp, #16]
 8008500:	4808      	ldr	r0, [pc, #32]	; (8008524 <siprintf+0x38>)
 8008502:	4909      	ldr	r1, [pc, #36]	; (8008528 <siprintf+0x3c>)
 8008504:	f853 2b04 	ldr.w	r2, [r3], #4
 8008508:	9105      	str	r1, [sp, #20]
 800850a:	6800      	ldr	r0, [r0, #0]
 800850c:	a902      	add	r1, sp, #8
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	f001 fd06 	bl	8009f20 <_svfiprintf_r>
 8008514:	2200      	movs	r2, #0
 8008516:	9b02      	ldr	r3, [sp, #8]
 8008518:	701a      	strb	r2, [r3, #0]
 800851a:	b01c      	add	sp, #112	; 0x70
 800851c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008520:	b003      	add	sp, #12
 8008522:	4770      	bx	lr
 8008524:	20000024 	.word	0x20000024
 8008528:	ffff0208 	.word	0xffff0208

0800852c <__swbuf_r>:
 800852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852e:	460e      	mov	r6, r1
 8008530:	4614      	mov	r4, r2
 8008532:	4605      	mov	r5, r0
 8008534:	b118      	cbz	r0, 800853e <__swbuf_r+0x12>
 8008536:	6983      	ldr	r3, [r0, #24]
 8008538:	b90b      	cbnz	r3, 800853e <__swbuf_r+0x12>
 800853a:	f000 ffe9 	bl	8009510 <__sinit>
 800853e:	4b21      	ldr	r3, [pc, #132]	; (80085c4 <__swbuf_r+0x98>)
 8008540:	429c      	cmp	r4, r3
 8008542:	d12a      	bne.n	800859a <__swbuf_r+0x6e>
 8008544:	686c      	ldr	r4, [r5, #4]
 8008546:	69a3      	ldr	r3, [r4, #24]
 8008548:	60a3      	str	r3, [r4, #8]
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	071a      	lsls	r2, r3, #28
 800854e:	d52e      	bpl.n	80085ae <__swbuf_r+0x82>
 8008550:	6923      	ldr	r3, [r4, #16]
 8008552:	b363      	cbz	r3, 80085ae <__swbuf_r+0x82>
 8008554:	6923      	ldr	r3, [r4, #16]
 8008556:	6820      	ldr	r0, [r4, #0]
 8008558:	b2f6      	uxtb	r6, r6
 800855a:	1ac0      	subs	r0, r0, r3
 800855c:	6963      	ldr	r3, [r4, #20]
 800855e:	4637      	mov	r7, r6
 8008560:	4283      	cmp	r3, r0
 8008562:	dc04      	bgt.n	800856e <__swbuf_r+0x42>
 8008564:	4621      	mov	r1, r4
 8008566:	4628      	mov	r0, r5
 8008568:	f000 ff68 	bl	800943c <_fflush_r>
 800856c:	bb28      	cbnz	r0, 80085ba <__swbuf_r+0x8e>
 800856e:	68a3      	ldr	r3, [r4, #8]
 8008570:	3001      	adds	r0, #1
 8008572:	3b01      	subs	r3, #1
 8008574:	60a3      	str	r3, [r4, #8]
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	6022      	str	r2, [r4, #0]
 800857c:	701e      	strb	r6, [r3, #0]
 800857e:	6963      	ldr	r3, [r4, #20]
 8008580:	4283      	cmp	r3, r0
 8008582:	d004      	beq.n	800858e <__swbuf_r+0x62>
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	07db      	lsls	r3, r3, #31
 8008588:	d519      	bpl.n	80085be <__swbuf_r+0x92>
 800858a:	2e0a      	cmp	r6, #10
 800858c:	d117      	bne.n	80085be <__swbuf_r+0x92>
 800858e:	4621      	mov	r1, r4
 8008590:	4628      	mov	r0, r5
 8008592:	f000 ff53 	bl	800943c <_fflush_r>
 8008596:	b190      	cbz	r0, 80085be <__swbuf_r+0x92>
 8008598:	e00f      	b.n	80085ba <__swbuf_r+0x8e>
 800859a:	4b0b      	ldr	r3, [pc, #44]	; (80085c8 <__swbuf_r+0x9c>)
 800859c:	429c      	cmp	r4, r3
 800859e:	d101      	bne.n	80085a4 <__swbuf_r+0x78>
 80085a0:	68ac      	ldr	r4, [r5, #8]
 80085a2:	e7d0      	b.n	8008546 <__swbuf_r+0x1a>
 80085a4:	4b09      	ldr	r3, [pc, #36]	; (80085cc <__swbuf_r+0xa0>)
 80085a6:	429c      	cmp	r4, r3
 80085a8:	bf08      	it	eq
 80085aa:	68ec      	ldreq	r4, [r5, #12]
 80085ac:	e7cb      	b.n	8008546 <__swbuf_r+0x1a>
 80085ae:	4621      	mov	r1, r4
 80085b0:	4628      	mov	r0, r5
 80085b2:	f000 f80d 	bl	80085d0 <__swsetup_r>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d0cc      	beq.n	8008554 <__swbuf_r+0x28>
 80085ba:	f04f 37ff 	mov.w	r7, #4294967295
 80085be:	4638      	mov	r0, r7
 80085c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085c2:	bf00      	nop
 80085c4:	0800a9c8 	.word	0x0800a9c8
 80085c8:	0800a9e8 	.word	0x0800a9e8
 80085cc:	0800a9a8 	.word	0x0800a9a8

080085d0 <__swsetup_r>:
 80085d0:	4b32      	ldr	r3, [pc, #200]	; (800869c <__swsetup_r+0xcc>)
 80085d2:	b570      	push	{r4, r5, r6, lr}
 80085d4:	681d      	ldr	r5, [r3, #0]
 80085d6:	4606      	mov	r6, r0
 80085d8:	460c      	mov	r4, r1
 80085da:	b125      	cbz	r5, 80085e6 <__swsetup_r+0x16>
 80085dc:	69ab      	ldr	r3, [r5, #24]
 80085de:	b913      	cbnz	r3, 80085e6 <__swsetup_r+0x16>
 80085e0:	4628      	mov	r0, r5
 80085e2:	f000 ff95 	bl	8009510 <__sinit>
 80085e6:	4b2e      	ldr	r3, [pc, #184]	; (80086a0 <__swsetup_r+0xd0>)
 80085e8:	429c      	cmp	r4, r3
 80085ea:	d10f      	bne.n	800860c <__swsetup_r+0x3c>
 80085ec:	686c      	ldr	r4, [r5, #4]
 80085ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	0715      	lsls	r5, r2, #28
 80085f6:	d42c      	bmi.n	8008652 <__swsetup_r+0x82>
 80085f8:	06d0      	lsls	r0, r2, #27
 80085fa:	d411      	bmi.n	8008620 <__swsetup_r+0x50>
 80085fc:	2209      	movs	r2, #9
 80085fe:	6032      	str	r2, [r6, #0]
 8008600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008604:	81a3      	strh	r3, [r4, #12]
 8008606:	f04f 30ff 	mov.w	r0, #4294967295
 800860a:	e03e      	b.n	800868a <__swsetup_r+0xba>
 800860c:	4b25      	ldr	r3, [pc, #148]	; (80086a4 <__swsetup_r+0xd4>)
 800860e:	429c      	cmp	r4, r3
 8008610:	d101      	bne.n	8008616 <__swsetup_r+0x46>
 8008612:	68ac      	ldr	r4, [r5, #8]
 8008614:	e7eb      	b.n	80085ee <__swsetup_r+0x1e>
 8008616:	4b24      	ldr	r3, [pc, #144]	; (80086a8 <__swsetup_r+0xd8>)
 8008618:	429c      	cmp	r4, r3
 800861a:	bf08      	it	eq
 800861c:	68ec      	ldreq	r4, [r5, #12]
 800861e:	e7e6      	b.n	80085ee <__swsetup_r+0x1e>
 8008620:	0751      	lsls	r1, r2, #29
 8008622:	d512      	bpl.n	800864a <__swsetup_r+0x7a>
 8008624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008626:	b141      	cbz	r1, 800863a <__swsetup_r+0x6a>
 8008628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800862c:	4299      	cmp	r1, r3
 800862e:	d002      	beq.n	8008636 <__swsetup_r+0x66>
 8008630:	4630      	mov	r0, r6
 8008632:	f001 fb75 	bl	8009d20 <_free_r>
 8008636:	2300      	movs	r3, #0
 8008638:	6363      	str	r3, [r4, #52]	; 0x34
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008640:	81a3      	strh	r3, [r4, #12]
 8008642:	2300      	movs	r3, #0
 8008644:	6063      	str	r3, [r4, #4]
 8008646:	6923      	ldr	r3, [r4, #16]
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	f043 0308 	orr.w	r3, r3, #8
 8008650:	81a3      	strh	r3, [r4, #12]
 8008652:	6923      	ldr	r3, [r4, #16]
 8008654:	b94b      	cbnz	r3, 800866a <__swsetup_r+0x9a>
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800865c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008660:	d003      	beq.n	800866a <__swsetup_r+0x9a>
 8008662:	4621      	mov	r1, r4
 8008664:	4630      	mov	r0, r6
 8008666:	f001 f80f 	bl	8009688 <__smakebuf_r>
 800866a:	89a2      	ldrh	r2, [r4, #12]
 800866c:	f012 0301 	ands.w	r3, r2, #1
 8008670:	d00c      	beq.n	800868c <__swsetup_r+0xbc>
 8008672:	2300      	movs	r3, #0
 8008674:	60a3      	str	r3, [r4, #8]
 8008676:	6963      	ldr	r3, [r4, #20]
 8008678:	425b      	negs	r3, r3
 800867a:	61a3      	str	r3, [r4, #24]
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	b953      	cbnz	r3, 8008696 <__swsetup_r+0xc6>
 8008680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008684:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008688:	d1ba      	bne.n	8008600 <__swsetup_r+0x30>
 800868a:	bd70      	pop	{r4, r5, r6, pc}
 800868c:	0792      	lsls	r2, r2, #30
 800868e:	bf58      	it	pl
 8008690:	6963      	ldrpl	r3, [r4, #20]
 8008692:	60a3      	str	r3, [r4, #8]
 8008694:	e7f2      	b.n	800867c <__swsetup_r+0xac>
 8008696:	2000      	movs	r0, #0
 8008698:	e7f7      	b.n	800868a <__swsetup_r+0xba>
 800869a:	bf00      	nop
 800869c:	20000024 	.word	0x20000024
 80086a0:	0800a9c8 	.word	0x0800a9c8
 80086a4:	0800a9e8 	.word	0x0800a9e8
 80086a8:	0800a9a8 	.word	0x0800a9a8

080086ac <quorem>:
 80086ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b0:	6903      	ldr	r3, [r0, #16]
 80086b2:	690c      	ldr	r4, [r1, #16]
 80086b4:	4680      	mov	r8, r0
 80086b6:	42a3      	cmp	r3, r4
 80086b8:	f2c0 8084 	blt.w	80087c4 <quorem+0x118>
 80086bc:	3c01      	subs	r4, #1
 80086be:	f101 0714 	add.w	r7, r1, #20
 80086c2:	f100 0614 	add.w	r6, r0, #20
 80086c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80086ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80086ce:	3501      	adds	r5, #1
 80086d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80086d4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80086d8:	eb06 030c 	add.w	r3, r6, ip
 80086dc:	eb07 090c 	add.w	r9, r7, ip
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	b39d      	cbz	r5, 800874c <quorem+0xa0>
 80086e4:	f04f 0a00 	mov.w	sl, #0
 80086e8:	4638      	mov	r0, r7
 80086ea:	46b6      	mov	lr, r6
 80086ec:	46d3      	mov	fp, sl
 80086ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80086f2:	b293      	uxth	r3, r2
 80086f4:	fb05 a303 	mla	r3, r5, r3, sl
 80086f8:	0c12      	lsrs	r2, r2, #16
 80086fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086fe:	fb05 a202 	mla	r2, r5, r2, sl
 8008702:	b29b      	uxth	r3, r3
 8008704:	ebab 0303 	sub.w	r3, fp, r3
 8008708:	f8de b000 	ldr.w	fp, [lr]
 800870c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008710:	fa1f fb8b 	uxth.w	fp, fp
 8008714:	445b      	add	r3, fp
 8008716:	fa1f fb82 	uxth.w	fp, r2
 800871a:	f8de 2000 	ldr.w	r2, [lr]
 800871e:	4581      	cmp	r9, r0
 8008720:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008728:	b29b      	uxth	r3, r3
 800872a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800872e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008732:	f84e 3b04 	str.w	r3, [lr], #4
 8008736:	d2da      	bcs.n	80086ee <quorem+0x42>
 8008738:	f856 300c 	ldr.w	r3, [r6, ip]
 800873c:	b933      	cbnz	r3, 800874c <quorem+0xa0>
 800873e:	9b01      	ldr	r3, [sp, #4]
 8008740:	3b04      	subs	r3, #4
 8008742:	429e      	cmp	r6, r3
 8008744:	461a      	mov	r2, r3
 8008746:	d331      	bcc.n	80087ac <quorem+0x100>
 8008748:	f8c8 4010 	str.w	r4, [r8, #16]
 800874c:	4640      	mov	r0, r8
 800874e:	f001 fa11 	bl	8009b74 <__mcmp>
 8008752:	2800      	cmp	r0, #0
 8008754:	db26      	blt.n	80087a4 <quorem+0xf8>
 8008756:	4630      	mov	r0, r6
 8008758:	f04f 0c00 	mov.w	ip, #0
 800875c:	3501      	adds	r5, #1
 800875e:	f857 1b04 	ldr.w	r1, [r7], #4
 8008762:	f8d0 e000 	ldr.w	lr, [r0]
 8008766:	b28b      	uxth	r3, r1
 8008768:	ebac 0303 	sub.w	r3, ip, r3
 800876c:	fa1f f28e 	uxth.w	r2, lr
 8008770:	4413      	add	r3, r2
 8008772:	0c0a      	lsrs	r2, r1, #16
 8008774:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008778:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800877c:	b29b      	uxth	r3, r3
 800877e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008782:	45b9      	cmp	r9, r7
 8008784:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008788:	f840 3b04 	str.w	r3, [r0], #4
 800878c:	d2e7      	bcs.n	800875e <quorem+0xb2>
 800878e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008792:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008796:	b92a      	cbnz	r2, 80087a4 <quorem+0xf8>
 8008798:	3b04      	subs	r3, #4
 800879a:	429e      	cmp	r6, r3
 800879c:	461a      	mov	r2, r3
 800879e:	d30b      	bcc.n	80087b8 <quorem+0x10c>
 80087a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80087a4:	4628      	mov	r0, r5
 80087a6:	b003      	add	sp, #12
 80087a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ac:	6812      	ldr	r2, [r2, #0]
 80087ae:	3b04      	subs	r3, #4
 80087b0:	2a00      	cmp	r2, #0
 80087b2:	d1c9      	bne.n	8008748 <quorem+0x9c>
 80087b4:	3c01      	subs	r4, #1
 80087b6:	e7c4      	b.n	8008742 <quorem+0x96>
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	3b04      	subs	r3, #4
 80087bc:	2a00      	cmp	r2, #0
 80087be:	d1ef      	bne.n	80087a0 <quorem+0xf4>
 80087c0:	3c01      	subs	r4, #1
 80087c2:	e7ea      	b.n	800879a <quorem+0xee>
 80087c4:	2000      	movs	r0, #0
 80087c6:	e7ee      	b.n	80087a6 <quorem+0xfa>

080087c8 <_dtoa_r>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	4616      	mov	r6, r2
 80087ce:	461f      	mov	r7, r3
 80087d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80087d2:	b095      	sub	sp, #84	; 0x54
 80087d4:	4604      	mov	r4, r0
 80087d6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80087da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80087de:	b93d      	cbnz	r5, 80087f0 <_dtoa_r+0x28>
 80087e0:	2010      	movs	r0, #16
 80087e2:	f000 ff91 	bl	8009708 <malloc>
 80087e6:	6260      	str	r0, [r4, #36]	; 0x24
 80087e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80087ec:	6005      	str	r5, [r0, #0]
 80087ee:	60c5      	str	r5, [r0, #12]
 80087f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087f2:	6819      	ldr	r1, [r3, #0]
 80087f4:	b151      	cbz	r1, 800880c <_dtoa_r+0x44>
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	2301      	movs	r3, #1
 80087fa:	4093      	lsls	r3, r2
 80087fc:	604a      	str	r2, [r1, #4]
 80087fe:	608b      	str	r3, [r1, #8]
 8008800:	4620      	mov	r0, r4
 8008802:	f000 ffd6 	bl	80097b2 <_Bfree>
 8008806:	2200      	movs	r2, #0
 8008808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	1e3b      	subs	r3, r7, #0
 800880e:	bfaf      	iteee	ge
 8008810:	2300      	movge	r3, #0
 8008812:	2201      	movlt	r2, #1
 8008814:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008818:	9303      	strlt	r3, [sp, #12]
 800881a:	bfac      	ite	ge
 800881c:	f8c8 3000 	strge.w	r3, [r8]
 8008820:	f8c8 2000 	strlt.w	r2, [r8]
 8008824:	4bae      	ldr	r3, [pc, #696]	; (8008ae0 <_dtoa_r+0x318>)
 8008826:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800882a:	ea33 0308 	bics.w	r3, r3, r8
 800882e:	d11b      	bne.n	8008868 <_dtoa_r+0xa0>
 8008830:	f242 730f 	movw	r3, #9999	; 0x270f
 8008834:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008836:	6013      	str	r3, [r2, #0]
 8008838:	9b02      	ldr	r3, [sp, #8]
 800883a:	b923      	cbnz	r3, 8008846 <_dtoa_r+0x7e>
 800883c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008840:	2800      	cmp	r0, #0
 8008842:	f000 8545 	beq.w	80092d0 <_dtoa_r+0xb08>
 8008846:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008848:	b953      	cbnz	r3, 8008860 <_dtoa_r+0x98>
 800884a:	4ba6      	ldr	r3, [pc, #664]	; (8008ae4 <_dtoa_r+0x31c>)
 800884c:	e021      	b.n	8008892 <_dtoa_r+0xca>
 800884e:	4ba6      	ldr	r3, [pc, #664]	; (8008ae8 <_dtoa_r+0x320>)
 8008850:	9306      	str	r3, [sp, #24]
 8008852:	3308      	adds	r3, #8
 8008854:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	9806      	ldr	r0, [sp, #24]
 800885a:	b015      	add	sp, #84	; 0x54
 800885c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008860:	4ba0      	ldr	r3, [pc, #640]	; (8008ae4 <_dtoa_r+0x31c>)
 8008862:	9306      	str	r3, [sp, #24]
 8008864:	3303      	adds	r3, #3
 8008866:	e7f5      	b.n	8008854 <_dtoa_r+0x8c>
 8008868:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800886c:	2200      	movs	r2, #0
 800886e:	2300      	movs	r3, #0
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	f7f8 f898 	bl	80009a8 <__aeabi_dcmpeq>
 8008878:	4682      	mov	sl, r0
 800887a:	b160      	cbz	r0, 8008896 <_dtoa_r+0xce>
 800887c:	2301      	movs	r3, #1
 800887e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 8520 	beq.w	80092ca <_dtoa_r+0xb02>
 800888a:	4b98      	ldr	r3, [pc, #608]	; (8008aec <_dtoa_r+0x324>)
 800888c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	3b01      	subs	r3, #1
 8008892:	9306      	str	r3, [sp, #24]
 8008894:	e7e0      	b.n	8008858 <_dtoa_r+0x90>
 8008896:	ab12      	add	r3, sp, #72	; 0x48
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	ab13      	add	r3, sp, #76	; 0x4c
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	4632      	mov	r2, r6
 80088a0:	463b      	mov	r3, r7
 80088a2:	4620      	mov	r0, r4
 80088a4:	f001 f9de 	bl	8009c64 <__d2b>
 80088a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80088ac:	4683      	mov	fp, r0
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	d07d      	beq.n	80089ae <_dtoa_r+0x1e6>
 80088b2:	46b0      	mov	r8, r6
 80088b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80088bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80088c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80088c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80088c8:	2200      	movs	r2, #0
 80088ca:	4b89      	ldr	r3, [pc, #548]	; (8008af0 <_dtoa_r+0x328>)
 80088cc:	4640      	mov	r0, r8
 80088ce:	4649      	mov	r1, r9
 80088d0:	f7f7 fc4a 	bl	8000168 <__aeabi_dsub>
 80088d4:	a37c      	add	r3, pc, #496	; (adr r3, 8008ac8 <_dtoa_r+0x300>)
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	f7f7 fdfd 	bl	80004d8 <__aeabi_dmul>
 80088de:	a37c      	add	r3, pc, #496	; (adr r3, 8008ad0 <_dtoa_r+0x308>)
 80088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e4:	f7f7 fc42 	bl	800016c <__adddf3>
 80088e8:	4606      	mov	r6, r0
 80088ea:	4628      	mov	r0, r5
 80088ec:	460f      	mov	r7, r1
 80088ee:	f7f7 fd89 	bl	8000404 <__aeabi_i2d>
 80088f2:	a379      	add	r3, pc, #484	; (adr r3, 8008ad8 <_dtoa_r+0x310>)
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f7f7 fdee 	bl	80004d8 <__aeabi_dmul>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4630      	mov	r0, r6
 8008902:	4639      	mov	r1, r7
 8008904:	f7f7 fc32 	bl	800016c <__adddf3>
 8008908:	4606      	mov	r6, r0
 800890a:	460f      	mov	r7, r1
 800890c:	f7f8 f894 	bl	8000a38 <__aeabi_d2iz>
 8008910:	2200      	movs	r2, #0
 8008912:	4682      	mov	sl, r0
 8008914:	2300      	movs	r3, #0
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f8 f84f 	bl	80009bc <__aeabi_dcmplt>
 800891e:	b148      	cbz	r0, 8008934 <_dtoa_r+0x16c>
 8008920:	4650      	mov	r0, sl
 8008922:	f7f7 fd6f 	bl	8000404 <__aeabi_i2d>
 8008926:	4632      	mov	r2, r6
 8008928:	463b      	mov	r3, r7
 800892a:	f7f8 f83d 	bl	80009a8 <__aeabi_dcmpeq>
 800892e:	b908      	cbnz	r0, 8008934 <_dtoa_r+0x16c>
 8008930:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008934:	f1ba 0f16 	cmp.w	sl, #22
 8008938:	d85a      	bhi.n	80089f0 <_dtoa_r+0x228>
 800893a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800893e:	496d      	ldr	r1, [pc, #436]	; (8008af4 <_dtoa_r+0x32c>)
 8008940:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008948:	f7f8 f856 	bl	80009f8 <__aeabi_dcmpgt>
 800894c:	2800      	cmp	r0, #0
 800894e:	d051      	beq.n	80089f4 <_dtoa_r+0x22c>
 8008950:	2300      	movs	r3, #0
 8008952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008956:	930d      	str	r3, [sp, #52]	; 0x34
 8008958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800895a:	1b5d      	subs	r5, r3, r5
 800895c:	1e6b      	subs	r3, r5, #1
 800895e:	9307      	str	r3, [sp, #28]
 8008960:	bf43      	ittte	mi
 8008962:	2300      	movmi	r3, #0
 8008964:	f1c5 0901 	rsbmi	r9, r5, #1
 8008968:	9307      	strmi	r3, [sp, #28]
 800896a:	f04f 0900 	movpl.w	r9, #0
 800896e:	f1ba 0f00 	cmp.w	sl, #0
 8008972:	db41      	blt.n	80089f8 <_dtoa_r+0x230>
 8008974:	9b07      	ldr	r3, [sp, #28]
 8008976:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800897a:	4453      	add	r3, sl
 800897c:	9307      	str	r3, [sp, #28]
 800897e:	2300      	movs	r3, #0
 8008980:	9308      	str	r3, [sp, #32]
 8008982:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008984:	2b09      	cmp	r3, #9
 8008986:	f200 808f 	bhi.w	8008aa8 <_dtoa_r+0x2e0>
 800898a:	2b05      	cmp	r3, #5
 800898c:	bfc4      	itt	gt
 800898e:	3b04      	subgt	r3, #4
 8008990:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008992:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008994:	bfc8      	it	gt
 8008996:	2500      	movgt	r5, #0
 8008998:	f1a3 0302 	sub.w	r3, r3, #2
 800899c:	bfd8      	it	le
 800899e:	2501      	movle	r5, #1
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	f200 808d 	bhi.w	8008ac0 <_dtoa_r+0x2f8>
 80089a6:	e8df f003 	tbb	[pc, r3]
 80089aa:	7d7b      	.short	0x7d7b
 80089ac:	6f2f      	.short	0x6f2f
 80089ae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80089b2:	441d      	add	r5, r3
 80089b4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80089b8:	2820      	cmp	r0, #32
 80089ba:	dd13      	ble.n	80089e4 <_dtoa_r+0x21c>
 80089bc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80089c0:	9b02      	ldr	r3, [sp, #8]
 80089c2:	fa08 f800 	lsl.w	r8, r8, r0
 80089c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80089ca:	fa23 f000 	lsr.w	r0, r3, r0
 80089ce:	ea48 0000 	orr.w	r0, r8, r0
 80089d2:	f7f7 fd07 	bl	80003e4 <__aeabi_ui2d>
 80089d6:	2301      	movs	r3, #1
 80089d8:	4680      	mov	r8, r0
 80089da:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80089de:	3d01      	subs	r5, #1
 80089e0:	9310      	str	r3, [sp, #64]	; 0x40
 80089e2:	e771      	b.n	80088c8 <_dtoa_r+0x100>
 80089e4:	9b02      	ldr	r3, [sp, #8]
 80089e6:	f1c0 0020 	rsb	r0, r0, #32
 80089ea:	fa03 f000 	lsl.w	r0, r3, r0
 80089ee:	e7f0      	b.n	80089d2 <_dtoa_r+0x20a>
 80089f0:	2301      	movs	r3, #1
 80089f2:	e7b0      	b.n	8008956 <_dtoa_r+0x18e>
 80089f4:	900d      	str	r0, [sp, #52]	; 0x34
 80089f6:	e7af      	b.n	8008958 <_dtoa_r+0x190>
 80089f8:	f1ca 0300 	rsb	r3, sl, #0
 80089fc:	9308      	str	r3, [sp, #32]
 80089fe:	2300      	movs	r3, #0
 8008a00:	eba9 090a 	sub.w	r9, r9, sl
 8008a04:	930c      	str	r3, [sp, #48]	; 0x30
 8008a06:	e7bc      	b.n	8008982 <_dtoa_r+0x1ba>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dd74      	ble.n	8008afc <_dtoa_r+0x334>
 8008a12:	4698      	mov	r8, r3
 8008a14:	9304      	str	r3, [sp, #16]
 8008a16:	2200      	movs	r2, #0
 8008a18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a1a:	6072      	str	r2, [r6, #4]
 8008a1c:	2204      	movs	r2, #4
 8008a1e:	f102 0014 	add.w	r0, r2, #20
 8008a22:	4298      	cmp	r0, r3
 8008a24:	6871      	ldr	r1, [r6, #4]
 8008a26:	d96e      	bls.n	8008b06 <_dtoa_r+0x33e>
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 fe8e 	bl	800974a <_Balloc>
 8008a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a30:	6030      	str	r0, [r6, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f1b8 0f0e 	cmp.w	r8, #14
 8008a38:	9306      	str	r3, [sp, #24]
 8008a3a:	f200 80ed 	bhi.w	8008c18 <_dtoa_r+0x450>
 8008a3e:	2d00      	cmp	r5, #0
 8008a40:	f000 80ea 	beq.w	8008c18 <_dtoa_r+0x450>
 8008a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a48:	f1ba 0f00 	cmp.w	sl, #0
 8008a4c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008a50:	dd77      	ble.n	8008b42 <_dtoa_r+0x37a>
 8008a52:	4a28      	ldr	r2, [pc, #160]	; (8008af4 <_dtoa_r+0x32c>)
 8008a54:	f00a 030f 	and.w	r3, sl, #15
 8008a58:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008a5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a60:	06f0      	lsls	r0, r6, #27
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a6a:	d568      	bpl.n	8008b3e <_dtoa_r+0x376>
 8008a6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008a70:	4b21      	ldr	r3, [pc, #132]	; (8008af8 <_dtoa_r+0x330>)
 8008a72:	2503      	movs	r5, #3
 8008a74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a78:	f7f7 fe58 	bl	800072c <__aeabi_ddiv>
 8008a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a80:	f006 060f 	and.w	r6, r6, #15
 8008a84:	4f1c      	ldr	r7, [pc, #112]	; (8008af8 <_dtoa_r+0x330>)
 8008a86:	e04f      	b.n	8008b28 <_dtoa_r+0x360>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a8e:	4453      	add	r3, sl
 8008a90:	f103 0801 	add.w	r8, r3, #1
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	4643      	mov	r3, r8
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	bfb8      	it	lt
 8008a9c:	2301      	movlt	r3, #1
 8008a9e:	e7ba      	b.n	8008a16 <_dtoa_r+0x24e>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e7b2      	b.n	8008a0a <_dtoa_r+0x242>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e7f0      	b.n	8008a8a <_dtoa_r+0x2c2>
 8008aa8:	2501      	movs	r5, #1
 8008aaa:	2300      	movs	r3, #0
 8008aac:	9509      	str	r5, [sp, #36]	; 0x24
 8008aae:	931e      	str	r3, [sp, #120]	; 0x78
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	4698      	mov	r8, r3
 8008aba:	2312      	movs	r3, #18
 8008abc:	921f      	str	r2, [sp, #124]	; 0x7c
 8008abe:	e7aa      	b.n	8008a16 <_dtoa_r+0x24e>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac4:	e7f4      	b.n	8008ab0 <_dtoa_r+0x2e8>
 8008ac6:	bf00      	nop
 8008ac8:	636f4361 	.word	0x636f4361
 8008acc:	3fd287a7 	.word	0x3fd287a7
 8008ad0:	8b60c8b3 	.word	0x8b60c8b3
 8008ad4:	3fc68a28 	.word	0x3fc68a28
 8008ad8:	509f79fb 	.word	0x509f79fb
 8008adc:	3fd34413 	.word	0x3fd34413
 8008ae0:	7ff00000 	.word	0x7ff00000
 8008ae4:	0800a9a1 	.word	0x0800a9a1
 8008ae8:	0800a998 	.word	0x0800a998
 8008aec:	0800a975 	.word	0x0800a975
 8008af0:	3ff80000 	.word	0x3ff80000
 8008af4:	0800aa30 	.word	0x0800aa30
 8008af8:	0800aa08 	.word	0x0800aa08
 8008afc:	2301      	movs	r3, #1
 8008afe:	9304      	str	r3, [sp, #16]
 8008b00:	4698      	mov	r8, r3
 8008b02:	461a      	mov	r2, r3
 8008b04:	e7da      	b.n	8008abc <_dtoa_r+0x2f4>
 8008b06:	3101      	adds	r1, #1
 8008b08:	6071      	str	r1, [r6, #4]
 8008b0a:	0052      	lsls	r2, r2, #1
 8008b0c:	e787      	b.n	8008a1e <_dtoa_r+0x256>
 8008b0e:	07f1      	lsls	r1, r6, #31
 8008b10:	d508      	bpl.n	8008b24 <_dtoa_r+0x35c>
 8008b12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b1a:	f7f7 fcdd 	bl	80004d8 <__aeabi_dmul>
 8008b1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008b22:	3501      	adds	r5, #1
 8008b24:	1076      	asrs	r6, r6, #1
 8008b26:	3708      	adds	r7, #8
 8008b28:	2e00      	cmp	r6, #0
 8008b2a:	d1f0      	bne.n	8008b0e <_dtoa_r+0x346>
 8008b2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008b30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b34:	f7f7 fdfa 	bl	800072c <__aeabi_ddiv>
 8008b38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b3c:	e01b      	b.n	8008b76 <_dtoa_r+0x3ae>
 8008b3e:	2502      	movs	r5, #2
 8008b40:	e7a0      	b.n	8008a84 <_dtoa_r+0x2bc>
 8008b42:	f000 80a4 	beq.w	8008c8e <_dtoa_r+0x4c6>
 8008b46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008b4a:	f1ca 0600 	rsb	r6, sl, #0
 8008b4e:	4ba0      	ldr	r3, [pc, #640]	; (8008dd0 <_dtoa_r+0x608>)
 8008b50:	f006 020f 	and.w	r2, r6, #15
 8008b54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f7f7 fcbc 	bl	80004d8 <__aeabi_dmul>
 8008b60:	2502      	movs	r5, #2
 8008b62:	2300      	movs	r3, #0
 8008b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b68:	4f9a      	ldr	r7, [pc, #616]	; (8008dd4 <_dtoa_r+0x60c>)
 8008b6a:	1136      	asrs	r6, r6, #4
 8008b6c:	2e00      	cmp	r6, #0
 8008b6e:	f040 8083 	bne.w	8008c78 <_dtoa_r+0x4b0>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e0      	bne.n	8008b38 <_dtoa_r+0x370>
 8008b76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 808a 	beq.w	8008c92 <_dtoa_r+0x4ca>
 8008b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	4b92      	ldr	r3, [pc, #584]	; (8008dd8 <_dtoa_r+0x610>)
 8008b8e:	f7f7 ff15 	bl	80009bc <__aeabi_dcmplt>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d07d      	beq.n	8008c92 <_dtoa_r+0x4ca>
 8008b96:	f1b8 0f00 	cmp.w	r8, #0
 8008b9a:	d07a      	beq.n	8008c92 <_dtoa_r+0x4ca>
 8008b9c:	9b04      	ldr	r3, [sp, #16]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dd36      	ble.n	8008c10 <_dtoa_r+0x448>
 8008ba2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	4b8c      	ldr	r3, [pc, #560]	; (8008ddc <_dtoa_r+0x614>)
 8008baa:	f7f7 fc95 	bl	80004d8 <__aeabi_dmul>
 8008bae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bb2:	9e04      	ldr	r6, [sp, #16]
 8008bb4:	f10a 37ff 	add.w	r7, sl, #4294967295
 8008bb8:	3501      	adds	r5, #1
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f7f7 fc22 	bl	8000404 <__aeabi_i2d>
 8008bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bc4:	f7f7 fc88 	bl	80004d8 <__aeabi_dmul>
 8008bc8:	2200      	movs	r2, #0
 8008bca:	4b85      	ldr	r3, [pc, #532]	; (8008de0 <_dtoa_r+0x618>)
 8008bcc:	f7f7 face 	bl	800016c <__adddf3>
 8008bd0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008bd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008bd8:	950b      	str	r5, [sp, #44]	; 0x2c
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	d15c      	bne.n	8008c98 <_dtoa_r+0x4d0>
 8008bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008be2:	2200      	movs	r2, #0
 8008be4:	4b7f      	ldr	r3, [pc, #508]	; (8008de4 <_dtoa_r+0x61c>)
 8008be6:	f7f7 fabf 	bl	8000168 <__aeabi_dsub>
 8008bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bec:	462b      	mov	r3, r5
 8008bee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bf2:	f7f7 ff01 	bl	80009f8 <__aeabi_dcmpgt>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	f040 8281 	bne.w	80090fe <_dtoa_r+0x936>
 8008bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c02:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008c06:	f7f7 fed9 	bl	80009bc <__aeabi_dcmplt>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f040 8275 	bne.w	80090fa <_dtoa_r+0x932>
 8008c10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008c14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f2c0 814b 	blt.w	8008eb6 <_dtoa_r+0x6ee>
 8008c20:	f1ba 0f0e 	cmp.w	sl, #14
 8008c24:	f300 8147 	bgt.w	8008eb6 <_dtoa_r+0x6ee>
 8008c28:	4b69      	ldr	r3, [pc, #420]	; (8008dd0 <_dtoa_r+0x608>)
 8008c2a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f280 80d7 	bge.w	8008dec <_dtoa_r+0x624>
 8008c3e:	f1b8 0f00 	cmp.w	r8, #0
 8008c42:	f300 80d3 	bgt.w	8008dec <_dtoa_r+0x624>
 8008c46:	f040 8257 	bne.w	80090f8 <_dtoa_r+0x930>
 8008c4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	4b64      	ldr	r3, [pc, #400]	; (8008de4 <_dtoa_r+0x61c>)
 8008c52:	f7f7 fc41 	bl	80004d8 <__aeabi_dmul>
 8008c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c5a:	f7f7 fec3 	bl	80009e4 <__aeabi_dcmpge>
 8008c5e:	4646      	mov	r6, r8
 8008c60:	4647      	mov	r7, r8
 8008c62:	2800      	cmp	r0, #0
 8008c64:	f040 822d 	bne.w	80090c2 <_dtoa_r+0x8fa>
 8008c68:	9b06      	ldr	r3, [sp, #24]
 8008c6a:	9a06      	ldr	r2, [sp, #24]
 8008c6c:	1c5d      	adds	r5, r3, #1
 8008c6e:	2331      	movs	r3, #49	; 0x31
 8008c70:	f10a 0a01 	add.w	sl, sl, #1
 8008c74:	7013      	strb	r3, [r2, #0]
 8008c76:	e228      	b.n	80090ca <_dtoa_r+0x902>
 8008c78:	07f2      	lsls	r2, r6, #31
 8008c7a:	d505      	bpl.n	8008c88 <_dtoa_r+0x4c0>
 8008c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c80:	f7f7 fc2a 	bl	80004d8 <__aeabi_dmul>
 8008c84:	2301      	movs	r3, #1
 8008c86:	3501      	adds	r5, #1
 8008c88:	1076      	asrs	r6, r6, #1
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	e76e      	b.n	8008b6c <_dtoa_r+0x3a4>
 8008c8e:	2502      	movs	r5, #2
 8008c90:	e771      	b.n	8008b76 <_dtoa_r+0x3ae>
 8008c92:	4657      	mov	r7, sl
 8008c94:	4646      	mov	r6, r8
 8008c96:	e790      	b.n	8008bba <_dtoa_r+0x3f2>
 8008c98:	4b4d      	ldr	r3, [pc, #308]	; (8008dd0 <_dtoa_r+0x608>)
 8008c9a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c9e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d048      	beq.n	8008d3a <_dtoa_r+0x572>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	2000      	movs	r0, #0
 8008cae:	494e      	ldr	r1, [pc, #312]	; (8008de8 <_dtoa_r+0x620>)
 8008cb0:	f7f7 fd3c 	bl	800072c <__aeabi_ddiv>
 8008cb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008cb8:	f7f7 fa56 	bl	8000168 <__aeabi_dsub>
 8008cbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008cc0:	9d06      	ldr	r5, [sp, #24]
 8008cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cc6:	f7f7 feb7 	bl	8000a38 <__aeabi_d2iz>
 8008cca:	9011      	str	r0, [sp, #68]	; 0x44
 8008ccc:	f7f7 fb9a 	bl	8000404 <__aeabi_i2d>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cd8:	f7f7 fa46 	bl	8000168 <__aeabi_dsub>
 8008cdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce2:	3330      	adds	r3, #48	; 0x30
 8008ce4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ce8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008cec:	f7f7 fe66 	bl	80009bc <__aeabi_dcmplt>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d163      	bne.n	8008dbc <_dtoa_r+0x5f4>
 8008cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	4937      	ldr	r1, [pc, #220]	; (8008dd8 <_dtoa_r+0x610>)
 8008cfc:	f7f7 fa34 	bl	8000168 <__aeabi_dsub>
 8008d00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d04:	f7f7 fe5a 	bl	80009bc <__aeabi_dcmplt>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	f040 80b5 	bne.w	8008e78 <_dtoa_r+0x6b0>
 8008d0e:	9b06      	ldr	r3, [sp, #24]
 8008d10:	1aeb      	subs	r3, r5, r3
 8008d12:	429e      	cmp	r6, r3
 8008d14:	f77f af7c 	ble.w	8008c10 <_dtoa_r+0x448>
 8008d18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4b2f      	ldr	r3, [pc, #188]	; (8008ddc <_dtoa_r+0x614>)
 8008d20:	f7f7 fbda 	bl	80004d8 <__aeabi_dmul>
 8008d24:	2200      	movs	r2, #0
 8008d26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d2e:	4b2b      	ldr	r3, [pc, #172]	; (8008ddc <_dtoa_r+0x614>)
 8008d30:	f7f7 fbd2 	bl	80004d8 <__aeabi_dmul>
 8008d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d38:	e7c3      	b.n	8008cc2 <_dtoa_r+0x4fa>
 8008d3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d3e:	f7f7 fbcb 	bl	80004d8 <__aeabi_dmul>
 8008d42:	9b06      	ldr	r3, [sp, #24]
 8008d44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d48:	199d      	adds	r5, r3, r6
 8008d4a:	461e      	mov	r6, r3
 8008d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d50:	f7f7 fe72 	bl	8000a38 <__aeabi_d2iz>
 8008d54:	9011      	str	r0, [sp, #68]	; 0x44
 8008d56:	f7f7 fb55 	bl	8000404 <__aeabi_i2d>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d62:	f7f7 fa01 	bl	8000168 <__aeabi_dsub>
 8008d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d6c:	3330      	adds	r3, #48	; 0x30
 8008d6e:	f806 3b01 	strb.w	r3, [r6], #1
 8008d72:	42ae      	cmp	r6, r5
 8008d74:	f04f 0200 	mov.w	r2, #0
 8008d78:	d124      	bne.n	8008dc4 <_dtoa_r+0x5fc>
 8008d7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d7e:	4b1a      	ldr	r3, [pc, #104]	; (8008de8 <_dtoa_r+0x620>)
 8008d80:	f7f7 f9f4 	bl	800016c <__adddf3>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d8c:	f7f7 fe34 	bl	80009f8 <__aeabi_dcmpgt>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d171      	bne.n	8008e78 <_dtoa_r+0x6b0>
 8008d94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d98:	2000      	movs	r0, #0
 8008d9a:	4913      	ldr	r1, [pc, #76]	; (8008de8 <_dtoa_r+0x620>)
 8008d9c:	f7f7 f9e4 	bl	8000168 <__aeabi_dsub>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008da8:	f7f7 fe08 	bl	80009bc <__aeabi_dcmplt>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	f43f af2f 	beq.w	8008c10 <_dtoa_r+0x448>
 8008db2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008db6:	1e6a      	subs	r2, r5, #1
 8008db8:	2b30      	cmp	r3, #48	; 0x30
 8008dba:	d001      	beq.n	8008dc0 <_dtoa_r+0x5f8>
 8008dbc:	46ba      	mov	sl, r7
 8008dbe:	e04a      	b.n	8008e56 <_dtoa_r+0x68e>
 8008dc0:	4615      	mov	r5, r2
 8008dc2:	e7f6      	b.n	8008db2 <_dtoa_r+0x5ea>
 8008dc4:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <_dtoa_r+0x614>)
 8008dc6:	f7f7 fb87 	bl	80004d8 <__aeabi_dmul>
 8008dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dce:	e7bd      	b.n	8008d4c <_dtoa_r+0x584>
 8008dd0:	0800aa30 	.word	0x0800aa30
 8008dd4:	0800aa08 	.word	0x0800aa08
 8008dd8:	3ff00000 	.word	0x3ff00000
 8008ddc:	40240000 	.word	0x40240000
 8008de0:	401c0000 	.word	0x401c0000
 8008de4:	40140000 	.word	0x40140000
 8008de8:	3fe00000 	.word	0x3fe00000
 8008dec:	9d06      	ldr	r5, [sp, #24]
 8008dee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008df6:	4630      	mov	r0, r6
 8008df8:	4639      	mov	r1, r7
 8008dfa:	f7f7 fc97 	bl	800072c <__aeabi_ddiv>
 8008dfe:	f7f7 fe1b 	bl	8000a38 <__aeabi_d2iz>
 8008e02:	4681      	mov	r9, r0
 8008e04:	f7f7 fafe 	bl	8000404 <__aeabi_i2d>
 8008e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e0c:	f7f7 fb64 	bl	80004d8 <__aeabi_dmul>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4630      	mov	r0, r6
 8008e16:	4639      	mov	r1, r7
 8008e18:	f7f7 f9a6 	bl	8000168 <__aeabi_dsub>
 8008e1c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008e20:	f805 6b01 	strb.w	r6, [r5], #1
 8008e24:	9e06      	ldr	r6, [sp, #24]
 8008e26:	4602      	mov	r2, r0
 8008e28:	1bae      	subs	r6, r5, r6
 8008e2a:	45b0      	cmp	r8, r6
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	d135      	bne.n	8008e9c <_dtoa_r+0x6d4>
 8008e30:	f7f7 f99c 	bl	800016c <__adddf3>
 8008e34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e38:	4606      	mov	r6, r0
 8008e3a:	460f      	mov	r7, r1
 8008e3c:	f7f7 fddc 	bl	80009f8 <__aeabi_dcmpgt>
 8008e40:	b9c8      	cbnz	r0, 8008e76 <_dtoa_r+0x6ae>
 8008e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e46:	4630      	mov	r0, r6
 8008e48:	4639      	mov	r1, r7
 8008e4a:	f7f7 fdad 	bl	80009a8 <__aeabi_dcmpeq>
 8008e4e:	b110      	cbz	r0, 8008e56 <_dtoa_r+0x68e>
 8008e50:	f019 0f01 	tst.w	r9, #1
 8008e54:	d10f      	bne.n	8008e76 <_dtoa_r+0x6ae>
 8008e56:	4659      	mov	r1, fp
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f000 fcaa 	bl	80097b2 <_Bfree>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e62:	702b      	strb	r3, [r5, #0]
 8008e64:	f10a 0301 	add.w	r3, sl, #1
 8008e68:	6013      	str	r3, [r2, #0]
 8008e6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f43f acf3 	beq.w	8008858 <_dtoa_r+0x90>
 8008e72:	601d      	str	r5, [r3, #0]
 8008e74:	e4f0      	b.n	8008858 <_dtoa_r+0x90>
 8008e76:	4657      	mov	r7, sl
 8008e78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e7c:	1e6b      	subs	r3, r5, #1
 8008e7e:	2a39      	cmp	r2, #57	; 0x39
 8008e80:	d106      	bne.n	8008e90 <_dtoa_r+0x6c8>
 8008e82:	9a06      	ldr	r2, [sp, #24]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d107      	bne.n	8008e98 <_dtoa_r+0x6d0>
 8008e88:	2330      	movs	r3, #48	; 0x30
 8008e8a:	7013      	strb	r3, [r2, #0]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	3701      	adds	r7, #1
 8008e90:	781a      	ldrb	r2, [r3, #0]
 8008e92:	3201      	adds	r2, #1
 8008e94:	701a      	strb	r2, [r3, #0]
 8008e96:	e791      	b.n	8008dbc <_dtoa_r+0x5f4>
 8008e98:	461d      	mov	r5, r3
 8008e9a:	e7ed      	b.n	8008e78 <_dtoa_r+0x6b0>
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	4b99      	ldr	r3, [pc, #612]	; (8009104 <_dtoa_r+0x93c>)
 8008ea0:	f7f7 fb1a 	bl	80004d8 <__aeabi_dmul>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	460f      	mov	r7, r1
 8008eac:	f7f7 fd7c 	bl	80009a8 <__aeabi_dcmpeq>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d09e      	beq.n	8008df2 <_dtoa_r+0x62a>
 8008eb4:	e7cf      	b.n	8008e56 <_dtoa_r+0x68e>
 8008eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eb8:	2a00      	cmp	r2, #0
 8008eba:	f000 8088 	beq.w	8008fce <_dtoa_r+0x806>
 8008ebe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008ec0:	2a01      	cmp	r2, #1
 8008ec2:	dc6d      	bgt.n	8008fa0 <_dtoa_r+0x7d8>
 8008ec4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	d066      	beq.n	8008f98 <_dtoa_r+0x7d0>
 8008eca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ece:	464d      	mov	r5, r9
 8008ed0:	9e08      	ldr	r6, [sp, #32]
 8008ed2:	9a07      	ldr	r2, [sp, #28]
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	441a      	add	r2, r3
 8008ed8:	4620      	mov	r0, r4
 8008eda:	4499      	add	r9, r3
 8008edc:	9207      	str	r2, [sp, #28]
 8008ede:	f000 fd08 	bl	80098f2 <__i2b>
 8008ee2:	4607      	mov	r7, r0
 8008ee4:	2d00      	cmp	r5, #0
 8008ee6:	dd0b      	ble.n	8008f00 <_dtoa_r+0x738>
 8008ee8:	9b07      	ldr	r3, [sp, #28]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dd08      	ble.n	8008f00 <_dtoa_r+0x738>
 8008eee:	42ab      	cmp	r3, r5
 8008ef0:	bfa8      	it	ge
 8008ef2:	462b      	movge	r3, r5
 8008ef4:	9a07      	ldr	r2, [sp, #28]
 8008ef6:	eba9 0903 	sub.w	r9, r9, r3
 8008efa:	1aed      	subs	r5, r5, r3
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	9307      	str	r3, [sp, #28]
 8008f00:	9b08      	ldr	r3, [sp, #32]
 8008f02:	b1eb      	cbz	r3, 8008f40 <_dtoa_r+0x778>
 8008f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d065      	beq.n	8008fd6 <_dtoa_r+0x80e>
 8008f0a:	b18e      	cbz	r6, 8008f30 <_dtoa_r+0x768>
 8008f0c:	4639      	mov	r1, r7
 8008f0e:	4632      	mov	r2, r6
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fd8d 	bl	8009a30 <__pow5mult>
 8008f16:	465a      	mov	r2, fp
 8008f18:	4601      	mov	r1, r0
 8008f1a:	4607      	mov	r7, r0
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f000 fcf1 	bl	8009904 <__multiply>
 8008f22:	4659      	mov	r1, fp
 8008f24:	900a      	str	r0, [sp, #40]	; 0x28
 8008f26:	4620      	mov	r0, r4
 8008f28:	f000 fc43 	bl	80097b2 <_Bfree>
 8008f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2e:	469b      	mov	fp, r3
 8008f30:	9b08      	ldr	r3, [sp, #32]
 8008f32:	1b9a      	subs	r2, r3, r6
 8008f34:	d004      	beq.n	8008f40 <_dtoa_r+0x778>
 8008f36:	4659      	mov	r1, fp
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 fd79 	bl	8009a30 <__pow5mult>
 8008f3e:	4683      	mov	fp, r0
 8008f40:	2101      	movs	r1, #1
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 fcd5 	bl	80098f2 <__i2b>
 8008f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 81c6 	beq.w	80092de <_dtoa_r+0xb16>
 8008f52:	461a      	mov	r2, r3
 8008f54:	4601      	mov	r1, r0
 8008f56:	4620      	mov	r0, r4
 8008f58:	f000 fd6a 	bl	8009a30 <__pow5mult>
 8008f5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f5e:	4606      	mov	r6, r0
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	dc3e      	bgt.n	8008fe2 <_dtoa_r+0x81a>
 8008f64:	9b02      	ldr	r3, [sp, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d137      	bne.n	8008fda <_dtoa_r+0x812>
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d134      	bne.n	8008fde <_dtoa_r+0x816>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f7a:	0d1b      	lsrs	r3, r3, #20
 8008f7c:	051b      	lsls	r3, r3, #20
 8008f7e:	b12b      	cbz	r3, 8008f8c <_dtoa_r+0x7c4>
 8008f80:	9b07      	ldr	r3, [sp, #28]
 8008f82:	f109 0901 	add.w	r9, r9, #1
 8008f86:	3301      	adds	r3, #1
 8008f88:	9307      	str	r3, [sp, #28]
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	9308      	str	r3, [sp, #32]
 8008f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d128      	bne.n	8008fe6 <_dtoa_r+0x81e>
 8008f94:	2001      	movs	r0, #1
 8008f96:	e02e      	b.n	8008ff6 <_dtoa_r+0x82e>
 8008f98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f9e:	e796      	b.n	8008ece <_dtoa_r+0x706>
 8008fa0:	9b08      	ldr	r3, [sp, #32]
 8008fa2:	f108 36ff 	add.w	r6, r8, #4294967295
 8008fa6:	42b3      	cmp	r3, r6
 8008fa8:	bfb7      	itett	lt
 8008faa:	9b08      	ldrlt	r3, [sp, #32]
 8008fac:	1b9e      	subge	r6, r3, r6
 8008fae:	1af2      	sublt	r2, r6, r3
 8008fb0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008fb2:	bfbf      	itttt	lt
 8008fb4:	9608      	strlt	r6, [sp, #32]
 8008fb6:	189b      	addlt	r3, r3, r2
 8008fb8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008fba:	2600      	movlt	r6, #0
 8008fbc:	f1b8 0f00 	cmp.w	r8, #0
 8008fc0:	bfb9      	ittee	lt
 8008fc2:	eba9 0508 	sublt.w	r5, r9, r8
 8008fc6:	2300      	movlt	r3, #0
 8008fc8:	464d      	movge	r5, r9
 8008fca:	4643      	movge	r3, r8
 8008fcc:	e781      	b.n	8008ed2 <_dtoa_r+0x70a>
 8008fce:	9e08      	ldr	r6, [sp, #32]
 8008fd0:	464d      	mov	r5, r9
 8008fd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008fd4:	e786      	b.n	8008ee4 <_dtoa_r+0x71c>
 8008fd6:	9a08      	ldr	r2, [sp, #32]
 8008fd8:	e7ad      	b.n	8008f36 <_dtoa_r+0x76e>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e7d6      	b.n	8008f8c <_dtoa_r+0x7c4>
 8008fde:	9b02      	ldr	r3, [sp, #8]
 8008fe0:	e7d4      	b.n	8008f8c <_dtoa_r+0x7c4>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9308      	str	r3, [sp, #32]
 8008fe6:	6933      	ldr	r3, [r6, #16]
 8008fe8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008fec:	6918      	ldr	r0, [r3, #16]
 8008fee:	f000 fc32 	bl	8009856 <__hi0bits>
 8008ff2:	f1c0 0020 	rsb	r0, r0, #32
 8008ff6:	9b07      	ldr	r3, [sp, #28]
 8008ff8:	4418      	add	r0, r3
 8008ffa:	f010 001f 	ands.w	r0, r0, #31
 8008ffe:	d047      	beq.n	8009090 <_dtoa_r+0x8c8>
 8009000:	f1c0 0320 	rsb	r3, r0, #32
 8009004:	2b04      	cmp	r3, #4
 8009006:	dd3b      	ble.n	8009080 <_dtoa_r+0x8b8>
 8009008:	9b07      	ldr	r3, [sp, #28]
 800900a:	f1c0 001c 	rsb	r0, r0, #28
 800900e:	4481      	add	r9, r0
 8009010:	4405      	add	r5, r0
 8009012:	4403      	add	r3, r0
 8009014:	9307      	str	r3, [sp, #28]
 8009016:	f1b9 0f00 	cmp.w	r9, #0
 800901a:	dd05      	ble.n	8009028 <_dtoa_r+0x860>
 800901c:	4659      	mov	r1, fp
 800901e:	464a      	mov	r2, r9
 8009020:	4620      	mov	r0, r4
 8009022:	f000 fd53 	bl	8009acc <__lshift>
 8009026:	4683      	mov	fp, r0
 8009028:	9b07      	ldr	r3, [sp, #28]
 800902a:	2b00      	cmp	r3, #0
 800902c:	dd05      	ble.n	800903a <_dtoa_r+0x872>
 800902e:	4631      	mov	r1, r6
 8009030:	461a      	mov	r2, r3
 8009032:	4620      	mov	r0, r4
 8009034:	f000 fd4a 	bl	8009acc <__lshift>
 8009038:	4606      	mov	r6, r0
 800903a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800903c:	b353      	cbz	r3, 8009094 <_dtoa_r+0x8cc>
 800903e:	4631      	mov	r1, r6
 8009040:	4658      	mov	r0, fp
 8009042:	f000 fd97 	bl	8009b74 <__mcmp>
 8009046:	2800      	cmp	r0, #0
 8009048:	da24      	bge.n	8009094 <_dtoa_r+0x8cc>
 800904a:	2300      	movs	r3, #0
 800904c:	4659      	mov	r1, fp
 800904e:	220a      	movs	r2, #10
 8009050:	4620      	mov	r0, r4
 8009052:	f000 fbc5 	bl	80097e0 <__multadd>
 8009056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009058:	f10a 3aff 	add.w	sl, sl, #4294967295
 800905c:	4683      	mov	fp, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	f000 8144 	beq.w	80092ec <_dtoa_r+0xb24>
 8009064:	2300      	movs	r3, #0
 8009066:	4639      	mov	r1, r7
 8009068:	220a      	movs	r2, #10
 800906a:	4620      	mov	r0, r4
 800906c:	f000 fbb8 	bl	80097e0 <__multadd>
 8009070:	9b04      	ldr	r3, [sp, #16]
 8009072:	4607      	mov	r7, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	dc4d      	bgt.n	8009114 <_dtoa_r+0x94c>
 8009078:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800907a:	2b02      	cmp	r3, #2
 800907c:	dd4a      	ble.n	8009114 <_dtoa_r+0x94c>
 800907e:	e011      	b.n	80090a4 <_dtoa_r+0x8dc>
 8009080:	d0c9      	beq.n	8009016 <_dtoa_r+0x84e>
 8009082:	9a07      	ldr	r2, [sp, #28]
 8009084:	331c      	adds	r3, #28
 8009086:	441a      	add	r2, r3
 8009088:	4499      	add	r9, r3
 800908a:	441d      	add	r5, r3
 800908c:	4613      	mov	r3, r2
 800908e:	e7c1      	b.n	8009014 <_dtoa_r+0x84c>
 8009090:	4603      	mov	r3, r0
 8009092:	e7f6      	b.n	8009082 <_dtoa_r+0x8ba>
 8009094:	f1b8 0f00 	cmp.w	r8, #0
 8009098:	dc36      	bgt.n	8009108 <_dtoa_r+0x940>
 800909a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800909c:	2b02      	cmp	r3, #2
 800909e:	dd33      	ble.n	8009108 <_dtoa_r+0x940>
 80090a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80090a4:	9b04      	ldr	r3, [sp, #16]
 80090a6:	b963      	cbnz	r3, 80090c2 <_dtoa_r+0x8fa>
 80090a8:	4631      	mov	r1, r6
 80090aa:	2205      	movs	r2, #5
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 fb97 	bl	80097e0 <__multadd>
 80090b2:	4601      	mov	r1, r0
 80090b4:	4606      	mov	r6, r0
 80090b6:	4658      	mov	r0, fp
 80090b8:	f000 fd5c 	bl	8009b74 <__mcmp>
 80090bc:	2800      	cmp	r0, #0
 80090be:	f73f add3 	bgt.w	8008c68 <_dtoa_r+0x4a0>
 80090c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80090c4:	9d06      	ldr	r5, [sp, #24]
 80090c6:	ea6f 0a03 	mvn.w	sl, r3
 80090ca:	f04f 0900 	mov.w	r9, #0
 80090ce:	4631      	mov	r1, r6
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 fb6e 	bl	80097b2 <_Bfree>
 80090d6:	2f00      	cmp	r7, #0
 80090d8:	f43f aebd 	beq.w	8008e56 <_dtoa_r+0x68e>
 80090dc:	f1b9 0f00 	cmp.w	r9, #0
 80090e0:	d005      	beq.n	80090ee <_dtoa_r+0x926>
 80090e2:	45b9      	cmp	r9, r7
 80090e4:	d003      	beq.n	80090ee <_dtoa_r+0x926>
 80090e6:	4649      	mov	r1, r9
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fb62 	bl	80097b2 <_Bfree>
 80090ee:	4639      	mov	r1, r7
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 fb5e 	bl	80097b2 <_Bfree>
 80090f6:	e6ae      	b.n	8008e56 <_dtoa_r+0x68e>
 80090f8:	2600      	movs	r6, #0
 80090fa:	4637      	mov	r7, r6
 80090fc:	e7e1      	b.n	80090c2 <_dtoa_r+0x8fa>
 80090fe:	46ba      	mov	sl, r7
 8009100:	4637      	mov	r7, r6
 8009102:	e5b1      	b.n	8008c68 <_dtoa_r+0x4a0>
 8009104:	40240000 	.word	0x40240000
 8009108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910a:	f8cd 8010 	str.w	r8, [sp, #16]
 800910e:	2b00      	cmp	r3, #0
 8009110:	f000 80f3 	beq.w	80092fa <_dtoa_r+0xb32>
 8009114:	2d00      	cmp	r5, #0
 8009116:	dd05      	ble.n	8009124 <_dtoa_r+0x95c>
 8009118:	4639      	mov	r1, r7
 800911a:	462a      	mov	r2, r5
 800911c:	4620      	mov	r0, r4
 800911e:	f000 fcd5 	bl	8009acc <__lshift>
 8009122:	4607      	mov	r7, r0
 8009124:	9b08      	ldr	r3, [sp, #32]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d04c      	beq.n	80091c4 <_dtoa_r+0x9fc>
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4620      	mov	r0, r4
 800912e:	f000 fb0c 	bl	800974a <_Balloc>
 8009132:	4605      	mov	r5, r0
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	f107 010c 	add.w	r1, r7, #12
 800913a:	3202      	adds	r2, #2
 800913c:	0092      	lsls	r2, r2, #2
 800913e:	300c      	adds	r0, #12
 8009140:	f000 faf8 	bl	8009734 <memcpy>
 8009144:	2201      	movs	r2, #1
 8009146:	4629      	mov	r1, r5
 8009148:	4620      	mov	r0, r4
 800914a:	f000 fcbf 	bl	8009acc <__lshift>
 800914e:	46b9      	mov	r9, r7
 8009150:	4607      	mov	r7, r0
 8009152:	9b06      	ldr	r3, [sp, #24]
 8009154:	9307      	str	r3, [sp, #28]
 8009156:	9b02      	ldr	r3, [sp, #8]
 8009158:	f003 0301 	and.w	r3, r3, #1
 800915c:	9308      	str	r3, [sp, #32]
 800915e:	4631      	mov	r1, r6
 8009160:	4658      	mov	r0, fp
 8009162:	f7ff faa3 	bl	80086ac <quorem>
 8009166:	4649      	mov	r1, r9
 8009168:	4605      	mov	r5, r0
 800916a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800916e:	4658      	mov	r0, fp
 8009170:	f000 fd00 	bl	8009b74 <__mcmp>
 8009174:	463a      	mov	r2, r7
 8009176:	9002      	str	r0, [sp, #8]
 8009178:	4631      	mov	r1, r6
 800917a:	4620      	mov	r0, r4
 800917c:	f000 fd14 	bl	8009ba8 <__mdiff>
 8009180:	68c3      	ldr	r3, [r0, #12]
 8009182:	4602      	mov	r2, r0
 8009184:	bb03      	cbnz	r3, 80091c8 <_dtoa_r+0xa00>
 8009186:	4601      	mov	r1, r0
 8009188:	9009      	str	r0, [sp, #36]	; 0x24
 800918a:	4658      	mov	r0, fp
 800918c:	f000 fcf2 	bl	8009b74 <__mcmp>
 8009190:	4603      	mov	r3, r0
 8009192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009194:	4611      	mov	r1, r2
 8009196:	4620      	mov	r0, r4
 8009198:	9309      	str	r3, [sp, #36]	; 0x24
 800919a:	f000 fb0a 	bl	80097b2 <_Bfree>
 800919e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a0:	b9a3      	cbnz	r3, 80091cc <_dtoa_r+0xa04>
 80091a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80091a4:	b992      	cbnz	r2, 80091cc <_dtoa_r+0xa04>
 80091a6:	9a08      	ldr	r2, [sp, #32]
 80091a8:	b982      	cbnz	r2, 80091cc <_dtoa_r+0xa04>
 80091aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80091ae:	d029      	beq.n	8009204 <_dtoa_r+0xa3c>
 80091b0:	9b02      	ldr	r3, [sp, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	dd01      	ble.n	80091ba <_dtoa_r+0x9f2>
 80091b6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80091ba:	9b07      	ldr	r3, [sp, #28]
 80091bc:	1c5d      	adds	r5, r3, #1
 80091be:	f883 8000 	strb.w	r8, [r3]
 80091c2:	e784      	b.n	80090ce <_dtoa_r+0x906>
 80091c4:	4638      	mov	r0, r7
 80091c6:	e7c2      	b.n	800914e <_dtoa_r+0x986>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e7e3      	b.n	8009194 <_dtoa_r+0x9cc>
 80091cc:	9a02      	ldr	r2, [sp, #8]
 80091ce:	2a00      	cmp	r2, #0
 80091d0:	db04      	blt.n	80091dc <_dtoa_r+0xa14>
 80091d2:	d123      	bne.n	800921c <_dtoa_r+0xa54>
 80091d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80091d6:	bb0a      	cbnz	r2, 800921c <_dtoa_r+0xa54>
 80091d8:	9a08      	ldr	r2, [sp, #32]
 80091da:	b9fa      	cbnz	r2, 800921c <_dtoa_r+0xa54>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	ddec      	ble.n	80091ba <_dtoa_r+0x9f2>
 80091e0:	4659      	mov	r1, fp
 80091e2:	2201      	movs	r2, #1
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 fc71 	bl	8009acc <__lshift>
 80091ea:	4631      	mov	r1, r6
 80091ec:	4683      	mov	fp, r0
 80091ee:	f000 fcc1 	bl	8009b74 <__mcmp>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	dc03      	bgt.n	80091fe <_dtoa_r+0xa36>
 80091f6:	d1e0      	bne.n	80091ba <_dtoa_r+0x9f2>
 80091f8:	f018 0f01 	tst.w	r8, #1
 80091fc:	d0dd      	beq.n	80091ba <_dtoa_r+0x9f2>
 80091fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009202:	d1d8      	bne.n	80091b6 <_dtoa_r+0x9ee>
 8009204:	9b07      	ldr	r3, [sp, #28]
 8009206:	9a07      	ldr	r2, [sp, #28]
 8009208:	1c5d      	adds	r5, r3, #1
 800920a:	2339      	movs	r3, #57	; 0x39
 800920c:	7013      	strb	r3, [r2, #0]
 800920e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009212:	1e6a      	subs	r2, r5, #1
 8009214:	2b39      	cmp	r3, #57	; 0x39
 8009216:	d04d      	beq.n	80092b4 <_dtoa_r+0xaec>
 8009218:	3301      	adds	r3, #1
 800921a:	e052      	b.n	80092c2 <_dtoa_r+0xafa>
 800921c:	9a07      	ldr	r2, [sp, #28]
 800921e:	2b00      	cmp	r3, #0
 8009220:	f102 0501 	add.w	r5, r2, #1
 8009224:	dd06      	ble.n	8009234 <_dtoa_r+0xa6c>
 8009226:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800922a:	d0eb      	beq.n	8009204 <_dtoa_r+0xa3c>
 800922c:	f108 0801 	add.w	r8, r8, #1
 8009230:	9b07      	ldr	r3, [sp, #28]
 8009232:	e7c4      	b.n	80091be <_dtoa_r+0x9f6>
 8009234:	9b06      	ldr	r3, [sp, #24]
 8009236:	9a04      	ldr	r2, [sp, #16]
 8009238:	1aeb      	subs	r3, r5, r3
 800923a:	4293      	cmp	r3, r2
 800923c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009240:	d021      	beq.n	8009286 <_dtoa_r+0xabe>
 8009242:	4659      	mov	r1, fp
 8009244:	2300      	movs	r3, #0
 8009246:	220a      	movs	r2, #10
 8009248:	4620      	mov	r0, r4
 800924a:	f000 fac9 	bl	80097e0 <__multadd>
 800924e:	45b9      	cmp	r9, r7
 8009250:	4683      	mov	fp, r0
 8009252:	f04f 0300 	mov.w	r3, #0
 8009256:	f04f 020a 	mov.w	r2, #10
 800925a:	4649      	mov	r1, r9
 800925c:	4620      	mov	r0, r4
 800925e:	d105      	bne.n	800926c <_dtoa_r+0xaa4>
 8009260:	f000 fabe 	bl	80097e0 <__multadd>
 8009264:	4681      	mov	r9, r0
 8009266:	4607      	mov	r7, r0
 8009268:	9507      	str	r5, [sp, #28]
 800926a:	e778      	b.n	800915e <_dtoa_r+0x996>
 800926c:	f000 fab8 	bl	80097e0 <__multadd>
 8009270:	4639      	mov	r1, r7
 8009272:	4681      	mov	r9, r0
 8009274:	2300      	movs	r3, #0
 8009276:	220a      	movs	r2, #10
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fab1 	bl	80097e0 <__multadd>
 800927e:	4607      	mov	r7, r0
 8009280:	e7f2      	b.n	8009268 <_dtoa_r+0xaa0>
 8009282:	f04f 0900 	mov.w	r9, #0
 8009286:	4659      	mov	r1, fp
 8009288:	2201      	movs	r2, #1
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fc1e 	bl	8009acc <__lshift>
 8009290:	4631      	mov	r1, r6
 8009292:	4683      	mov	fp, r0
 8009294:	f000 fc6e 	bl	8009b74 <__mcmp>
 8009298:	2800      	cmp	r0, #0
 800929a:	dcb8      	bgt.n	800920e <_dtoa_r+0xa46>
 800929c:	d102      	bne.n	80092a4 <_dtoa_r+0xadc>
 800929e:	f018 0f01 	tst.w	r8, #1
 80092a2:	d1b4      	bne.n	800920e <_dtoa_r+0xa46>
 80092a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092a8:	1e6a      	subs	r2, r5, #1
 80092aa:	2b30      	cmp	r3, #48	; 0x30
 80092ac:	f47f af0f 	bne.w	80090ce <_dtoa_r+0x906>
 80092b0:	4615      	mov	r5, r2
 80092b2:	e7f7      	b.n	80092a4 <_dtoa_r+0xadc>
 80092b4:	9b06      	ldr	r3, [sp, #24]
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d105      	bne.n	80092c6 <_dtoa_r+0xafe>
 80092ba:	2331      	movs	r3, #49	; 0x31
 80092bc:	9a06      	ldr	r2, [sp, #24]
 80092be:	f10a 0a01 	add.w	sl, sl, #1
 80092c2:	7013      	strb	r3, [r2, #0]
 80092c4:	e703      	b.n	80090ce <_dtoa_r+0x906>
 80092c6:	4615      	mov	r5, r2
 80092c8:	e7a1      	b.n	800920e <_dtoa_r+0xa46>
 80092ca:	4b17      	ldr	r3, [pc, #92]	; (8009328 <_dtoa_r+0xb60>)
 80092cc:	f7ff bae1 	b.w	8008892 <_dtoa_r+0xca>
 80092d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f47f aabb 	bne.w	800884e <_dtoa_r+0x86>
 80092d8:	4b14      	ldr	r3, [pc, #80]	; (800932c <_dtoa_r+0xb64>)
 80092da:	f7ff bada 	b.w	8008892 <_dtoa_r+0xca>
 80092de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	f77f ae3f 	ble.w	8008f64 <_dtoa_r+0x79c>
 80092e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092e8:	9308      	str	r3, [sp, #32]
 80092ea:	e653      	b.n	8008f94 <_dtoa_r+0x7cc>
 80092ec:	9b04      	ldr	r3, [sp, #16]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dc03      	bgt.n	80092fa <_dtoa_r+0xb32>
 80092f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	f73f aed5 	bgt.w	80090a4 <_dtoa_r+0x8dc>
 80092fa:	9d06      	ldr	r5, [sp, #24]
 80092fc:	4631      	mov	r1, r6
 80092fe:	4658      	mov	r0, fp
 8009300:	f7ff f9d4 	bl	80086ac <quorem>
 8009304:	9b06      	ldr	r3, [sp, #24]
 8009306:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800930a:	f805 8b01 	strb.w	r8, [r5], #1
 800930e:	9a04      	ldr	r2, [sp, #16]
 8009310:	1aeb      	subs	r3, r5, r3
 8009312:	429a      	cmp	r2, r3
 8009314:	ddb5      	ble.n	8009282 <_dtoa_r+0xaba>
 8009316:	4659      	mov	r1, fp
 8009318:	2300      	movs	r3, #0
 800931a:	220a      	movs	r2, #10
 800931c:	4620      	mov	r0, r4
 800931e:	f000 fa5f 	bl	80097e0 <__multadd>
 8009322:	4683      	mov	fp, r0
 8009324:	e7ea      	b.n	80092fc <_dtoa_r+0xb34>
 8009326:	bf00      	nop
 8009328:	0800a974 	.word	0x0800a974
 800932c:	0800a998 	.word	0x0800a998

08009330 <__sflush_r>:
 8009330:	898a      	ldrh	r2, [r1, #12]
 8009332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009336:	4605      	mov	r5, r0
 8009338:	0710      	lsls	r0, r2, #28
 800933a:	460c      	mov	r4, r1
 800933c:	d458      	bmi.n	80093f0 <__sflush_r+0xc0>
 800933e:	684b      	ldr	r3, [r1, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	dc05      	bgt.n	8009350 <__sflush_r+0x20>
 8009344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009346:	2b00      	cmp	r3, #0
 8009348:	dc02      	bgt.n	8009350 <__sflush_r+0x20>
 800934a:	2000      	movs	r0, #0
 800934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009352:	2e00      	cmp	r6, #0
 8009354:	d0f9      	beq.n	800934a <__sflush_r+0x1a>
 8009356:	2300      	movs	r3, #0
 8009358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800935c:	682f      	ldr	r7, [r5, #0]
 800935e:	6a21      	ldr	r1, [r4, #32]
 8009360:	602b      	str	r3, [r5, #0]
 8009362:	d032      	beq.n	80093ca <__sflush_r+0x9a>
 8009364:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	075a      	lsls	r2, r3, #29
 800936a:	d505      	bpl.n	8009378 <__sflush_r+0x48>
 800936c:	6863      	ldr	r3, [r4, #4]
 800936e:	1ac0      	subs	r0, r0, r3
 8009370:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009372:	b10b      	cbz	r3, 8009378 <__sflush_r+0x48>
 8009374:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009376:	1ac0      	subs	r0, r0, r3
 8009378:	2300      	movs	r3, #0
 800937a:	4602      	mov	r2, r0
 800937c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800937e:	6a21      	ldr	r1, [r4, #32]
 8009380:	4628      	mov	r0, r5
 8009382:	47b0      	blx	r6
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	d106      	bne.n	8009398 <__sflush_r+0x68>
 800938a:	6829      	ldr	r1, [r5, #0]
 800938c:	291d      	cmp	r1, #29
 800938e:	d848      	bhi.n	8009422 <__sflush_r+0xf2>
 8009390:	4a29      	ldr	r2, [pc, #164]	; (8009438 <__sflush_r+0x108>)
 8009392:	40ca      	lsrs	r2, r1
 8009394:	07d6      	lsls	r6, r2, #31
 8009396:	d544      	bpl.n	8009422 <__sflush_r+0xf2>
 8009398:	2200      	movs	r2, #0
 800939a:	6062      	str	r2, [r4, #4]
 800939c:	6922      	ldr	r2, [r4, #16]
 800939e:	04d9      	lsls	r1, r3, #19
 80093a0:	6022      	str	r2, [r4, #0]
 80093a2:	d504      	bpl.n	80093ae <__sflush_r+0x7e>
 80093a4:	1c42      	adds	r2, r0, #1
 80093a6:	d101      	bne.n	80093ac <__sflush_r+0x7c>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	b903      	cbnz	r3, 80093ae <__sflush_r+0x7e>
 80093ac:	6560      	str	r0, [r4, #84]	; 0x54
 80093ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093b0:	602f      	str	r7, [r5, #0]
 80093b2:	2900      	cmp	r1, #0
 80093b4:	d0c9      	beq.n	800934a <__sflush_r+0x1a>
 80093b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ba:	4299      	cmp	r1, r3
 80093bc:	d002      	beq.n	80093c4 <__sflush_r+0x94>
 80093be:	4628      	mov	r0, r5
 80093c0:	f000 fcae 	bl	8009d20 <_free_r>
 80093c4:	2000      	movs	r0, #0
 80093c6:	6360      	str	r0, [r4, #52]	; 0x34
 80093c8:	e7c0      	b.n	800934c <__sflush_r+0x1c>
 80093ca:	2301      	movs	r3, #1
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b0      	blx	r6
 80093d0:	1c41      	adds	r1, r0, #1
 80093d2:	d1c8      	bne.n	8009366 <__sflush_r+0x36>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0c5      	beq.n	8009366 <__sflush_r+0x36>
 80093da:	2b1d      	cmp	r3, #29
 80093dc:	d001      	beq.n	80093e2 <__sflush_r+0xb2>
 80093de:	2b16      	cmp	r3, #22
 80093e0:	d101      	bne.n	80093e6 <__sflush_r+0xb6>
 80093e2:	602f      	str	r7, [r5, #0]
 80093e4:	e7b1      	b.n	800934a <__sflush_r+0x1a>
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	e7ad      	b.n	800934c <__sflush_r+0x1c>
 80093f0:	690f      	ldr	r7, [r1, #16]
 80093f2:	2f00      	cmp	r7, #0
 80093f4:	d0a9      	beq.n	800934a <__sflush_r+0x1a>
 80093f6:	0793      	lsls	r3, r2, #30
 80093f8:	bf18      	it	ne
 80093fa:	2300      	movne	r3, #0
 80093fc:	680e      	ldr	r6, [r1, #0]
 80093fe:	bf08      	it	eq
 8009400:	694b      	ldreq	r3, [r1, #20]
 8009402:	eba6 0807 	sub.w	r8, r6, r7
 8009406:	600f      	str	r7, [r1, #0]
 8009408:	608b      	str	r3, [r1, #8]
 800940a:	f1b8 0f00 	cmp.w	r8, #0
 800940e:	dd9c      	ble.n	800934a <__sflush_r+0x1a>
 8009410:	4643      	mov	r3, r8
 8009412:	463a      	mov	r2, r7
 8009414:	6a21      	ldr	r1, [r4, #32]
 8009416:	4628      	mov	r0, r5
 8009418:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800941a:	47b0      	blx	r6
 800941c:	2800      	cmp	r0, #0
 800941e:	dc06      	bgt.n	800942e <__sflush_r+0xfe>
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009426:	81a3      	strh	r3, [r4, #12]
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	e78e      	b.n	800934c <__sflush_r+0x1c>
 800942e:	4407      	add	r7, r0
 8009430:	eba8 0800 	sub.w	r8, r8, r0
 8009434:	e7e9      	b.n	800940a <__sflush_r+0xda>
 8009436:	bf00      	nop
 8009438:	20400001 	.word	0x20400001

0800943c <_fflush_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	690b      	ldr	r3, [r1, #16]
 8009440:	4605      	mov	r5, r0
 8009442:	460c      	mov	r4, r1
 8009444:	b1db      	cbz	r3, 800947e <_fflush_r+0x42>
 8009446:	b118      	cbz	r0, 8009450 <_fflush_r+0x14>
 8009448:	6983      	ldr	r3, [r0, #24]
 800944a:	b90b      	cbnz	r3, 8009450 <_fflush_r+0x14>
 800944c:	f000 f860 	bl	8009510 <__sinit>
 8009450:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <_fflush_r+0x48>)
 8009452:	429c      	cmp	r4, r3
 8009454:	d109      	bne.n	800946a <_fflush_r+0x2e>
 8009456:	686c      	ldr	r4, [r5, #4]
 8009458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945c:	b17b      	cbz	r3, 800947e <_fflush_r+0x42>
 800945e:	4621      	mov	r1, r4
 8009460:	4628      	mov	r0, r5
 8009462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009466:	f7ff bf63 	b.w	8009330 <__sflush_r>
 800946a:	4b07      	ldr	r3, [pc, #28]	; (8009488 <_fflush_r+0x4c>)
 800946c:	429c      	cmp	r4, r3
 800946e:	d101      	bne.n	8009474 <_fflush_r+0x38>
 8009470:	68ac      	ldr	r4, [r5, #8]
 8009472:	e7f1      	b.n	8009458 <_fflush_r+0x1c>
 8009474:	4b05      	ldr	r3, [pc, #20]	; (800948c <_fflush_r+0x50>)
 8009476:	429c      	cmp	r4, r3
 8009478:	bf08      	it	eq
 800947a:	68ec      	ldreq	r4, [r5, #12]
 800947c:	e7ec      	b.n	8009458 <_fflush_r+0x1c>
 800947e:	2000      	movs	r0, #0
 8009480:	bd38      	pop	{r3, r4, r5, pc}
 8009482:	bf00      	nop
 8009484:	0800a9c8 	.word	0x0800a9c8
 8009488:	0800a9e8 	.word	0x0800a9e8
 800948c:	0800a9a8 	.word	0x0800a9a8

08009490 <std>:
 8009490:	2300      	movs	r3, #0
 8009492:	b510      	push	{r4, lr}
 8009494:	4604      	mov	r4, r0
 8009496:	e9c0 3300 	strd	r3, r3, [r0]
 800949a:	6083      	str	r3, [r0, #8]
 800949c:	8181      	strh	r1, [r0, #12]
 800949e:	6643      	str	r3, [r0, #100]	; 0x64
 80094a0:	81c2      	strh	r2, [r0, #14]
 80094a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094a6:	6183      	str	r3, [r0, #24]
 80094a8:	4619      	mov	r1, r3
 80094aa:	2208      	movs	r2, #8
 80094ac:	305c      	adds	r0, #92	; 0x5c
 80094ae:	f7fe fb35 	bl	8007b1c <memset>
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <std+0x38>)
 80094b4:	6224      	str	r4, [r4, #32]
 80094b6:	6263      	str	r3, [r4, #36]	; 0x24
 80094b8:	4b04      	ldr	r3, [pc, #16]	; (80094cc <std+0x3c>)
 80094ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80094bc:	4b04      	ldr	r3, [pc, #16]	; (80094d0 <std+0x40>)
 80094be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094c0:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <std+0x44>)
 80094c2:	6323      	str	r3, [r4, #48]	; 0x30
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	bf00      	nop
 80094c8:	0800a419 	.word	0x0800a419
 80094cc:	0800a43b 	.word	0x0800a43b
 80094d0:	0800a473 	.word	0x0800a473
 80094d4:	0800a497 	.word	0x0800a497

080094d8 <_cleanup_r>:
 80094d8:	4901      	ldr	r1, [pc, #4]	; (80094e0 <_cleanup_r+0x8>)
 80094da:	f000 b885 	b.w	80095e8 <_fwalk_reent>
 80094de:	bf00      	nop
 80094e0:	0800943d 	.word	0x0800943d

080094e4 <__sfmoreglue>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	2568      	movs	r5, #104	; 0x68
 80094e8:	1e4a      	subs	r2, r1, #1
 80094ea:	4355      	muls	r5, r2
 80094ec:	460e      	mov	r6, r1
 80094ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094f2:	f000 fc61 	bl	8009db8 <_malloc_r>
 80094f6:	4604      	mov	r4, r0
 80094f8:	b140      	cbz	r0, 800950c <__sfmoreglue+0x28>
 80094fa:	2100      	movs	r1, #0
 80094fc:	e9c0 1600 	strd	r1, r6, [r0]
 8009500:	300c      	adds	r0, #12
 8009502:	60a0      	str	r0, [r4, #8]
 8009504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009508:	f7fe fb08 	bl	8007b1c <memset>
 800950c:	4620      	mov	r0, r4
 800950e:	bd70      	pop	{r4, r5, r6, pc}

08009510 <__sinit>:
 8009510:	6983      	ldr	r3, [r0, #24]
 8009512:	b510      	push	{r4, lr}
 8009514:	4604      	mov	r4, r0
 8009516:	bb33      	cbnz	r3, 8009566 <__sinit+0x56>
 8009518:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800951c:	6503      	str	r3, [r0, #80]	; 0x50
 800951e:	4b12      	ldr	r3, [pc, #72]	; (8009568 <__sinit+0x58>)
 8009520:	4a12      	ldr	r2, [pc, #72]	; (800956c <__sinit+0x5c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6282      	str	r2, [r0, #40]	; 0x28
 8009526:	4298      	cmp	r0, r3
 8009528:	bf04      	itt	eq
 800952a:	2301      	moveq	r3, #1
 800952c:	6183      	streq	r3, [r0, #24]
 800952e:	f000 f81f 	bl	8009570 <__sfp>
 8009532:	6060      	str	r0, [r4, #4]
 8009534:	4620      	mov	r0, r4
 8009536:	f000 f81b 	bl	8009570 <__sfp>
 800953a:	60a0      	str	r0, [r4, #8]
 800953c:	4620      	mov	r0, r4
 800953e:	f000 f817 	bl	8009570 <__sfp>
 8009542:	2200      	movs	r2, #0
 8009544:	60e0      	str	r0, [r4, #12]
 8009546:	2104      	movs	r1, #4
 8009548:	6860      	ldr	r0, [r4, #4]
 800954a:	f7ff ffa1 	bl	8009490 <std>
 800954e:	2201      	movs	r2, #1
 8009550:	2109      	movs	r1, #9
 8009552:	68a0      	ldr	r0, [r4, #8]
 8009554:	f7ff ff9c 	bl	8009490 <std>
 8009558:	2202      	movs	r2, #2
 800955a:	2112      	movs	r1, #18
 800955c:	68e0      	ldr	r0, [r4, #12]
 800955e:	f7ff ff97 	bl	8009490 <std>
 8009562:	2301      	movs	r3, #1
 8009564:	61a3      	str	r3, [r4, #24]
 8009566:	bd10      	pop	{r4, pc}
 8009568:	0800a960 	.word	0x0800a960
 800956c:	080094d9 	.word	0x080094d9

08009570 <__sfp>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	4b1b      	ldr	r3, [pc, #108]	; (80095e0 <__sfp+0x70>)
 8009574:	4607      	mov	r7, r0
 8009576:	681e      	ldr	r6, [r3, #0]
 8009578:	69b3      	ldr	r3, [r6, #24]
 800957a:	b913      	cbnz	r3, 8009582 <__sfp+0x12>
 800957c:	4630      	mov	r0, r6
 800957e:	f7ff ffc7 	bl	8009510 <__sinit>
 8009582:	3648      	adds	r6, #72	; 0x48
 8009584:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009588:	3b01      	subs	r3, #1
 800958a:	d503      	bpl.n	8009594 <__sfp+0x24>
 800958c:	6833      	ldr	r3, [r6, #0]
 800958e:	b133      	cbz	r3, 800959e <__sfp+0x2e>
 8009590:	6836      	ldr	r6, [r6, #0]
 8009592:	e7f7      	b.n	8009584 <__sfp+0x14>
 8009594:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009598:	b16d      	cbz	r5, 80095b6 <__sfp+0x46>
 800959a:	3468      	adds	r4, #104	; 0x68
 800959c:	e7f4      	b.n	8009588 <__sfp+0x18>
 800959e:	2104      	movs	r1, #4
 80095a0:	4638      	mov	r0, r7
 80095a2:	f7ff ff9f 	bl	80094e4 <__sfmoreglue>
 80095a6:	6030      	str	r0, [r6, #0]
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d1f1      	bne.n	8009590 <__sfp+0x20>
 80095ac:	230c      	movs	r3, #12
 80095ae:	4604      	mov	r4, r0
 80095b0:	603b      	str	r3, [r7, #0]
 80095b2:	4620      	mov	r0, r4
 80095b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b6:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <__sfp+0x74>)
 80095b8:	6665      	str	r5, [r4, #100]	; 0x64
 80095ba:	e9c4 5500 	strd	r5, r5, [r4]
 80095be:	60a5      	str	r5, [r4, #8]
 80095c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80095c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80095c8:	2208      	movs	r2, #8
 80095ca:	4629      	mov	r1, r5
 80095cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095d0:	f7fe faa4 	bl	8007b1c <memset>
 80095d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095dc:	e7e9      	b.n	80095b2 <__sfp+0x42>
 80095de:	bf00      	nop
 80095e0:	0800a960 	.word	0x0800a960
 80095e4:	ffff0001 	.word	0xffff0001

080095e8 <_fwalk_reent>:
 80095e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095ec:	4680      	mov	r8, r0
 80095ee:	4689      	mov	r9, r1
 80095f0:	2600      	movs	r6, #0
 80095f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095f6:	b914      	cbnz	r4, 80095fe <_fwalk_reent+0x16>
 80095f8:	4630      	mov	r0, r6
 80095fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009602:	3f01      	subs	r7, #1
 8009604:	d501      	bpl.n	800960a <_fwalk_reent+0x22>
 8009606:	6824      	ldr	r4, [r4, #0]
 8009608:	e7f5      	b.n	80095f6 <_fwalk_reent+0xe>
 800960a:	89ab      	ldrh	r3, [r5, #12]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d907      	bls.n	8009620 <_fwalk_reent+0x38>
 8009610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009614:	3301      	adds	r3, #1
 8009616:	d003      	beq.n	8009620 <_fwalk_reent+0x38>
 8009618:	4629      	mov	r1, r5
 800961a:	4640      	mov	r0, r8
 800961c:	47c8      	blx	r9
 800961e:	4306      	orrs	r6, r0
 8009620:	3568      	adds	r5, #104	; 0x68
 8009622:	e7ee      	b.n	8009602 <_fwalk_reent+0x1a>

08009624 <_localeconv_r>:
 8009624:	4b04      	ldr	r3, [pc, #16]	; (8009638 <_localeconv_r+0x14>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6a18      	ldr	r0, [r3, #32]
 800962a:	4b04      	ldr	r3, [pc, #16]	; (800963c <_localeconv_r+0x18>)
 800962c:	2800      	cmp	r0, #0
 800962e:	bf08      	it	eq
 8009630:	4618      	moveq	r0, r3
 8009632:	30f0      	adds	r0, #240	; 0xf0
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000024 	.word	0x20000024
 800963c:	20000088 	.word	0x20000088

08009640 <__swhatbuf_r>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	460e      	mov	r6, r1
 8009644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009648:	b096      	sub	sp, #88	; 0x58
 800964a:	2900      	cmp	r1, #0
 800964c:	4614      	mov	r4, r2
 800964e:	461d      	mov	r5, r3
 8009650:	da07      	bge.n	8009662 <__swhatbuf_r+0x22>
 8009652:	2300      	movs	r3, #0
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	89b3      	ldrh	r3, [r6, #12]
 8009658:	061a      	lsls	r2, r3, #24
 800965a:	d410      	bmi.n	800967e <__swhatbuf_r+0x3e>
 800965c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009660:	e00e      	b.n	8009680 <__swhatbuf_r+0x40>
 8009662:	466a      	mov	r2, sp
 8009664:	f000 ff3e 	bl	800a4e4 <_fstat_r>
 8009668:	2800      	cmp	r0, #0
 800966a:	dbf2      	blt.n	8009652 <__swhatbuf_r+0x12>
 800966c:	9a01      	ldr	r2, [sp, #4]
 800966e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009672:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009676:	425a      	negs	r2, r3
 8009678:	415a      	adcs	r2, r3
 800967a:	602a      	str	r2, [r5, #0]
 800967c:	e7ee      	b.n	800965c <__swhatbuf_r+0x1c>
 800967e:	2340      	movs	r3, #64	; 0x40
 8009680:	2000      	movs	r0, #0
 8009682:	6023      	str	r3, [r4, #0]
 8009684:	b016      	add	sp, #88	; 0x58
 8009686:	bd70      	pop	{r4, r5, r6, pc}

08009688 <__smakebuf_r>:
 8009688:	898b      	ldrh	r3, [r1, #12]
 800968a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800968c:	079d      	lsls	r5, r3, #30
 800968e:	4606      	mov	r6, r0
 8009690:	460c      	mov	r4, r1
 8009692:	d507      	bpl.n	80096a4 <__smakebuf_r+0x1c>
 8009694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	6123      	str	r3, [r4, #16]
 800969c:	2301      	movs	r3, #1
 800969e:	6163      	str	r3, [r4, #20]
 80096a0:	b002      	add	sp, #8
 80096a2:	bd70      	pop	{r4, r5, r6, pc}
 80096a4:	ab01      	add	r3, sp, #4
 80096a6:	466a      	mov	r2, sp
 80096a8:	f7ff ffca 	bl	8009640 <__swhatbuf_r>
 80096ac:	9900      	ldr	r1, [sp, #0]
 80096ae:	4605      	mov	r5, r0
 80096b0:	4630      	mov	r0, r6
 80096b2:	f000 fb81 	bl	8009db8 <_malloc_r>
 80096b6:	b948      	cbnz	r0, 80096cc <__smakebuf_r+0x44>
 80096b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096bc:	059a      	lsls	r2, r3, #22
 80096be:	d4ef      	bmi.n	80096a0 <__smakebuf_r+0x18>
 80096c0:	f023 0303 	bic.w	r3, r3, #3
 80096c4:	f043 0302 	orr.w	r3, r3, #2
 80096c8:	81a3      	strh	r3, [r4, #12]
 80096ca:	e7e3      	b.n	8009694 <__smakebuf_r+0xc>
 80096cc:	4b0d      	ldr	r3, [pc, #52]	; (8009704 <__smakebuf_r+0x7c>)
 80096ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	6020      	str	r0, [r4, #0]
 80096d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d8:	81a3      	strh	r3, [r4, #12]
 80096da:	9b00      	ldr	r3, [sp, #0]
 80096dc:	6120      	str	r0, [r4, #16]
 80096de:	6163      	str	r3, [r4, #20]
 80096e0:	9b01      	ldr	r3, [sp, #4]
 80096e2:	b15b      	cbz	r3, 80096fc <__smakebuf_r+0x74>
 80096e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096e8:	4630      	mov	r0, r6
 80096ea:	f000 ff0d 	bl	800a508 <_isatty_r>
 80096ee:	b128      	cbz	r0, 80096fc <__smakebuf_r+0x74>
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	f023 0303 	bic.w	r3, r3, #3
 80096f6:	f043 0301 	orr.w	r3, r3, #1
 80096fa:	81a3      	strh	r3, [r4, #12]
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	431d      	orrs	r5, r3
 8009700:	81a5      	strh	r5, [r4, #12]
 8009702:	e7cd      	b.n	80096a0 <__smakebuf_r+0x18>
 8009704:	080094d9 	.word	0x080094d9

08009708 <malloc>:
 8009708:	4b02      	ldr	r3, [pc, #8]	; (8009714 <malloc+0xc>)
 800970a:	4601      	mov	r1, r0
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	f000 bb53 	b.w	8009db8 <_malloc_r>
 8009712:	bf00      	nop
 8009714:	20000024 	.word	0x20000024

08009718 <memchr>:
 8009718:	b510      	push	{r4, lr}
 800971a:	b2c9      	uxtb	r1, r1
 800971c:	4402      	add	r2, r0
 800971e:	4290      	cmp	r0, r2
 8009720:	4603      	mov	r3, r0
 8009722:	d101      	bne.n	8009728 <memchr+0x10>
 8009724:	2300      	movs	r3, #0
 8009726:	e003      	b.n	8009730 <memchr+0x18>
 8009728:	781c      	ldrb	r4, [r3, #0]
 800972a:	3001      	adds	r0, #1
 800972c:	428c      	cmp	r4, r1
 800972e:	d1f6      	bne.n	800971e <memchr+0x6>
 8009730:	4618      	mov	r0, r3
 8009732:	bd10      	pop	{r4, pc}

08009734 <memcpy>:
 8009734:	b510      	push	{r4, lr}
 8009736:	1e43      	subs	r3, r0, #1
 8009738:	440a      	add	r2, r1
 800973a:	4291      	cmp	r1, r2
 800973c:	d100      	bne.n	8009740 <memcpy+0xc>
 800973e:	bd10      	pop	{r4, pc}
 8009740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009748:	e7f7      	b.n	800973a <memcpy+0x6>

0800974a <_Balloc>:
 800974a:	b570      	push	{r4, r5, r6, lr}
 800974c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800974e:	4604      	mov	r4, r0
 8009750:	460e      	mov	r6, r1
 8009752:	b93d      	cbnz	r5, 8009764 <_Balloc+0x1a>
 8009754:	2010      	movs	r0, #16
 8009756:	f7ff ffd7 	bl	8009708 <malloc>
 800975a:	6260      	str	r0, [r4, #36]	; 0x24
 800975c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009760:	6005      	str	r5, [r0, #0]
 8009762:	60c5      	str	r5, [r0, #12]
 8009764:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009766:	68eb      	ldr	r3, [r5, #12]
 8009768:	b183      	cbz	r3, 800978c <_Balloc+0x42>
 800976a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009772:	b9b8      	cbnz	r0, 80097a4 <_Balloc+0x5a>
 8009774:	2101      	movs	r1, #1
 8009776:	fa01 f506 	lsl.w	r5, r1, r6
 800977a:	1d6a      	adds	r2, r5, #5
 800977c:	0092      	lsls	r2, r2, #2
 800977e:	4620      	mov	r0, r4
 8009780:	f000 fabf 	bl	8009d02 <_calloc_r>
 8009784:	b160      	cbz	r0, 80097a0 <_Balloc+0x56>
 8009786:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800978a:	e00e      	b.n	80097aa <_Balloc+0x60>
 800978c:	2221      	movs	r2, #33	; 0x21
 800978e:	2104      	movs	r1, #4
 8009790:	4620      	mov	r0, r4
 8009792:	f000 fab6 	bl	8009d02 <_calloc_r>
 8009796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009798:	60e8      	str	r0, [r5, #12]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1e4      	bne.n	800976a <_Balloc+0x20>
 80097a0:	2000      	movs	r0, #0
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	6802      	ldr	r2, [r0, #0]
 80097a6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80097aa:	2300      	movs	r3, #0
 80097ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097b0:	e7f7      	b.n	80097a2 <_Balloc+0x58>

080097b2 <_Bfree>:
 80097b2:	b570      	push	{r4, r5, r6, lr}
 80097b4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097b6:	4606      	mov	r6, r0
 80097b8:	460d      	mov	r5, r1
 80097ba:	b93c      	cbnz	r4, 80097cc <_Bfree+0x1a>
 80097bc:	2010      	movs	r0, #16
 80097be:	f7ff ffa3 	bl	8009708 <malloc>
 80097c2:	6270      	str	r0, [r6, #36]	; 0x24
 80097c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097c8:	6004      	str	r4, [r0, #0]
 80097ca:	60c4      	str	r4, [r0, #12]
 80097cc:	b13d      	cbz	r5, 80097de <_Bfree+0x2c>
 80097ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80097d0:	686a      	ldr	r2, [r5, #4]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097d8:	6029      	str	r1, [r5, #0]
 80097da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80097de:	bd70      	pop	{r4, r5, r6, pc}

080097e0 <__multadd>:
 80097e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e4:	461f      	mov	r7, r3
 80097e6:	4606      	mov	r6, r0
 80097e8:	460c      	mov	r4, r1
 80097ea:	2300      	movs	r3, #0
 80097ec:	690d      	ldr	r5, [r1, #16]
 80097ee:	f101 0c14 	add.w	ip, r1, #20
 80097f2:	f8dc 0000 	ldr.w	r0, [ip]
 80097f6:	3301      	adds	r3, #1
 80097f8:	b281      	uxth	r1, r0
 80097fa:	fb02 7101 	mla	r1, r2, r1, r7
 80097fe:	0c00      	lsrs	r0, r0, #16
 8009800:	0c0f      	lsrs	r7, r1, #16
 8009802:	fb02 7000 	mla	r0, r2, r0, r7
 8009806:	b289      	uxth	r1, r1
 8009808:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800980c:	429d      	cmp	r5, r3
 800980e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009812:	f84c 1b04 	str.w	r1, [ip], #4
 8009816:	dcec      	bgt.n	80097f2 <__multadd+0x12>
 8009818:	b1d7      	cbz	r7, 8009850 <__multadd+0x70>
 800981a:	68a3      	ldr	r3, [r4, #8]
 800981c:	42ab      	cmp	r3, r5
 800981e:	dc12      	bgt.n	8009846 <__multadd+0x66>
 8009820:	6861      	ldr	r1, [r4, #4]
 8009822:	4630      	mov	r0, r6
 8009824:	3101      	adds	r1, #1
 8009826:	f7ff ff90 	bl	800974a <_Balloc>
 800982a:	4680      	mov	r8, r0
 800982c:	6922      	ldr	r2, [r4, #16]
 800982e:	f104 010c 	add.w	r1, r4, #12
 8009832:	3202      	adds	r2, #2
 8009834:	0092      	lsls	r2, r2, #2
 8009836:	300c      	adds	r0, #12
 8009838:	f7ff ff7c 	bl	8009734 <memcpy>
 800983c:	4621      	mov	r1, r4
 800983e:	4630      	mov	r0, r6
 8009840:	f7ff ffb7 	bl	80097b2 <_Bfree>
 8009844:	4644      	mov	r4, r8
 8009846:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800984a:	3501      	adds	r5, #1
 800984c:	615f      	str	r7, [r3, #20]
 800984e:	6125      	str	r5, [r4, #16]
 8009850:	4620      	mov	r0, r4
 8009852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009856 <__hi0bits>:
 8009856:	0c02      	lsrs	r2, r0, #16
 8009858:	0412      	lsls	r2, r2, #16
 800985a:	4603      	mov	r3, r0
 800985c:	b9b2      	cbnz	r2, 800988c <__hi0bits+0x36>
 800985e:	0403      	lsls	r3, r0, #16
 8009860:	2010      	movs	r0, #16
 8009862:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009866:	bf04      	itt	eq
 8009868:	021b      	lsleq	r3, r3, #8
 800986a:	3008      	addeq	r0, #8
 800986c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009870:	bf04      	itt	eq
 8009872:	011b      	lsleq	r3, r3, #4
 8009874:	3004      	addeq	r0, #4
 8009876:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800987a:	bf04      	itt	eq
 800987c:	009b      	lsleq	r3, r3, #2
 800987e:	3002      	addeq	r0, #2
 8009880:	2b00      	cmp	r3, #0
 8009882:	db06      	blt.n	8009892 <__hi0bits+0x3c>
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	d503      	bpl.n	8009890 <__hi0bits+0x3a>
 8009888:	3001      	adds	r0, #1
 800988a:	4770      	bx	lr
 800988c:	2000      	movs	r0, #0
 800988e:	e7e8      	b.n	8009862 <__hi0bits+0xc>
 8009890:	2020      	movs	r0, #32
 8009892:	4770      	bx	lr

08009894 <__lo0bits>:
 8009894:	6803      	ldr	r3, [r0, #0]
 8009896:	4601      	mov	r1, r0
 8009898:	f013 0207 	ands.w	r2, r3, #7
 800989c:	d00b      	beq.n	80098b6 <__lo0bits+0x22>
 800989e:	07da      	lsls	r2, r3, #31
 80098a0:	d423      	bmi.n	80098ea <__lo0bits+0x56>
 80098a2:	0798      	lsls	r0, r3, #30
 80098a4:	bf49      	itett	mi
 80098a6:	085b      	lsrmi	r3, r3, #1
 80098a8:	089b      	lsrpl	r3, r3, #2
 80098aa:	2001      	movmi	r0, #1
 80098ac:	600b      	strmi	r3, [r1, #0]
 80098ae:	bf5c      	itt	pl
 80098b0:	600b      	strpl	r3, [r1, #0]
 80098b2:	2002      	movpl	r0, #2
 80098b4:	4770      	bx	lr
 80098b6:	b298      	uxth	r0, r3
 80098b8:	b9a8      	cbnz	r0, 80098e6 <__lo0bits+0x52>
 80098ba:	2010      	movs	r0, #16
 80098bc:	0c1b      	lsrs	r3, r3, #16
 80098be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098c2:	bf04      	itt	eq
 80098c4:	0a1b      	lsreq	r3, r3, #8
 80098c6:	3008      	addeq	r0, #8
 80098c8:	071a      	lsls	r2, r3, #28
 80098ca:	bf04      	itt	eq
 80098cc:	091b      	lsreq	r3, r3, #4
 80098ce:	3004      	addeq	r0, #4
 80098d0:	079a      	lsls	r2, r3, #30
 80098d2:	bf04      	itt	eq
 80098d4:	089b      	lsreq	r3, r3, #2
 80098d6:	3002      	addeq	r0, #2
 80098d8:	07da      	lsls	r2, r3, #31
 80098da:	d402      	bmi.n	80098e2 <__lo0bits+0x4e>
 80098dc:	085b      	lsrs	r3, r3, #1
 80098de:	d006      	beq.n	80098ee <__lo0bits+0x5a>
 80098e0:	3001      	adds	r0, #1
 80098e2:	600b      	str	r3, [r1, #0]
 80098e4:	4770      	bx	lr
 80098e6:	4610      	mov	r0, r2
 80098e8:	e7e9      	b.n	80098be <__lo0bits+0x2a>
 80098ea:	2000      	movs	r0, #0
 80098ec:	4770      	bx	lr
 80098ee:	2020      	movs	r0, #32
 80098f0:	4770      	bx	lr

080098f2 <__i2b>:
 80098f2:	b510      	push	{r4, lr}
 80098f4:	460c      	mov	r4, r1
 80098f6:	2101      	movs	r1, #1
 80098f8:	f7ff ff27 	bl	800974a <_Balloc>
 80098fc:	2201      	movs	r2, #1
 80098fe:	6144      	str	r4, [r0, #20]
 8009900:	6102      	str	r2, [r0, #16]
 8009902:	bd10      	pop	{r4, pc}

08009904 <__multiply>:
 8009904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	4614      	mov	r4, r2
 800990a:	690a      	ldr	r2, [r1, #16]
 800990c:	6923      	ldr	r3, [r4, #16]
 800990e:	4688      	mov	r8, r1
 8009910:	429a      	cmp	r2, r3
 8009912:	bfbe      	ittt	lt
 8009914:	460b      	movlt	r3, r1
 8009916:	46a0      	movlt	r8, r4
 8009918:	461c      	movlt	r4, r3
 800991a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800991e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009922:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009926:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800992a:	eb07 0609 	add.w	r6, r7, r9
 800992e:	42b3      	cmp	r3, r6
 8009930:	bfb8      	it	lt
 8009932:	3101      	addlt	r1, #1
 8009934:	f7ff ff09 	bl	800974a <_Balloc>
 8009938:	f100 0514 	add.w	r5, r0, #20
 800993c:	462b      	mov	r3, r5
 800993e:	2200      	movs	r2, #0
 8009940:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009944:	4573      	cmp	r3, lr
 8009946:	d316      	bcc.n	8009976 <__multiply+0x72>
 8009948:	f104 0214 	add.w	r2, r4, #20
 800994c:	f108 0114 	add.w	r1, r8, #20
 8009950:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009954:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	9b00      	ldr	r3, [sp, #0]
 800995c:	9201      	str	r2, [sp, #4]
 800995e:	4293      	cmp	r3, r2
 8009960:	d80c      	bhi.n	800997c <__multiply+0x78>
 8009962:	2e00      	cmp	r6, #0
 8009964:	dd03      	ble.n	800996e <__multiply+0x6a>
 8009966:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800996a:	2b00      	cmp	r3, #0
 800996c:	d05d      	beq.n	8009a2a <__multiply+0x126>
 800996e:	6106      	str	r6, [r0, #16]
 8009970:	b003      	add	sp, #12
 8009972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009976:	f843 2b04 	str.w	r2, [r3], #4
 800997a:	e7e3      	b.n	8009944 <__multiply+0x40>
 800997c:	f8b2 b000 	ldrh.w	fp, [r2]
 8009980:	f1bb 0f00 	cmp.w	fp, #0
 8009984:	d023      	beq.n	80099ce <__multiply+0xca>
 8009986:	4689      	mov	r9, r1
 8009988:	46ac      	mov	ip, r5
 800998a:	f04f 0800 	mov.w	r8, #0
 800998e:	f859 4b04 	ldr.w	r4, [r9], #4
 8009992:	f8dc a000 	ldr.w	sl, [ip]
 8009996:	b2a3      	uxth	r3, r4
 8009998:	fa1f fa8a 	uxth.w	sl, sl
 800999c:	fb0b a303 	mla	r3, fp, r3, sl
 80099a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80099a4:	f8dc 4000 	ldr.w	r4, [ip]
 80099a8:	4443      	add	r3, r8
 80099aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80099ae:	fb0b 840a 	mla	r4, fp, sl, r8
 80099b2:	46e2      	mov	sl, ip
 80099b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80099be:	454f      	cmp	r7, r9
 80099c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80099c4:	f84a 3b04 	str.w	r3, [sl], #4
 80099c8:	d82b      	bhi.n	8009a22 <__multiply+0x11e>
 80099ca:	f8cc 8004 	str.w	r8, [ip, #4]
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	3204      	adds	r2, #4
 80099d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80099d6:	f1ba 0f00 	cmp.w	sl, #0
 80099da:	d020      	beq.n	8009a1e <__multiply+0x11a>
 80099dc:	4689      	mov	r9, r1
 80099de:	46a8      	mov	r8, r5
 80099e0:	f04f 0b00 	mov.w	fp, #0
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	f8b9 c000 	ldrh.w	ip, [r9]
 80099ea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	fb0a 440c 	mla	r4, sl, ip, r4
 80099f4:	46c4      	mov	ip, r8
 80099f6:	445c      	add	r4, fp
 80099f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80099fc:	f84c 3b04 	str.w	r3, [ip], #4
 8009a00:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a04:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009a08:	0c1b      	lsrs	r3, r3, #16
 8009a0a:	fb0a b303 	mla	r3, sl, r3, fp
 8009a0e:	454f      	cmp	r7, r9
 8009a10:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009a14:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009a18:	d805      	bhi.n	8009a26 <__multiply+0x122>
 8009a1a:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a1e:	3504      	adds	r5, #4
 8009a20:	e79b      	b.n	800995a <__multiply+0x56>
 8009a22:	46d4      	mov	ip, sl
 8009a24:	e7b3      	b.n	800998e <__multiply+0x8a>
 8009a26:	46e0      	mov	r8, ip
 8009a28:	e7dd      	b.n	80099e6 <__multiply+0xe2>
 8009a2a:	3e01      	subs	r6, #1
 8009a2c:	e799      	b.n	8009962 <__multiply+0x5e>
	...

08009a30 <__pow5mult>:
 8009a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	4615      	mov	r5, r2
 8009a36:	f012 0203 	ands.w	r2, r2, #3
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460f      	mov	r7, r1
 8009a3e:	d007      	beq.n	8009a50 <__pow5mult+0x20>
 8009a40:	4c21      	ldr	r4, [pc, #132]	; (8009ac8 <__pow5mult+0x98>)
 8009a42:	3a01      	subs	r2, #1
 8009a44:	2300      	movs	r3, #0
 8009a46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a4a:	f7ff fec9 	bl	80097e0 <__multadd>
 8009a4e:	4607      	mov	r7, r0
 8009a50:	10ad      	asrs	r5, r5, #2
 8009a52:	d035      	beq.n	8009ac0 <__pow5mult+0x90>
 8009a54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a56:	b93c      	cbnz	r4, 8009a68 <__pow5mult+0x38>
 8009a58:	2010      	movs	r0, #16
 8009a5a:	f7ff fe55 	bl	8009708 <malloc>
 8009a5e:	6270      	str	r0, [r6, #36]	; 0x24
 8009a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a64:	6004      	str	r4, [r0, #0]
 8009a66:	60c4      	str	r4, [r0, #12]
 8009a68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a70:	b94c      	cbnz	r4, 8009a86 <__pow5mult+0x56>
 8009a72:	f240 2171 	movw	r1, #625	; 0x271
 8009a76:	4630      	mov	r0, r6
 8009a78:	f7ff ff3b 	bl	80098f2 <__i2b>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	4604      	mov	r4, r0
 8009a80:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a84:	6003      	str	r3, [r0, #0]
 8009a86:	f04f 0800 	mov.w	r8, #0
 8009a8a:	07eb      	lsls	r3, r5, #31
 8009a8c:	d50a      	bpl.n	8009aa4 <__pow5mult+0x74>
 8009a8e:	4639      	mov	r1, r7
 8009a90:	4622      	mov	r2, r4
 8009a92:	4630      	mov	r0, r6
 8009a94:	f7ff ff36 	bl	8009904 <__multiply>
 8009a98:	4681      	mov	r9, r0
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f7ff fe88 	bl	80097b2 <_Bfree>
 8009aa2:	464f      	mov	r7, r9
 8009aa4:	106d      	asrs	r5, r5, #1
 8009aa6:	d00b      	beq.n	8009ac0 <__pow5mult+0x90>
 8009aa8:	6820      	ldr	r0, [r4, #0]
 8009aaa:	b938      	cbnz	r0, 8009abc <__pow5mult+0x8c>
 8009aac:	4622      	mov	r2, r4
 8009aae:	4621      	mov	r1, r4
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f7ff ff27 	bl	8009904 <__multiply>
 8009ab6:	6020      	str	r0, [r4, #0]
 8009ab8:	f8c0 8000 	str.w	r8, [r0]
 8009abc:	4604      	mov	r4, r0
 8009abe:	e7e4      	b.n	8009a8a <__pow5mult+0x5a>
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ac6:	bf00      	nop
 8009ac8:	0800aaf8 	.word	0x0800aaf8

08009acc <__lshift>:
 8009acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	4607      	mov	r7, r0
 8009ad4:	4616      	mov	r6, r2
 8009ad6:	6923      	ldr	r3, [r4, #16]
 8009ad8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009adc:	eb0a 0903 	add.w	r9, sl, r3
 8009ae0:	6849      	ldr	r1, [r1, #4]
 8009ae2:	68a3      	ldr	r3, [r4, #8]
 8009ae4:	f109 0501 	add.w	r5, r9, #1
 8009ae8:	42ab      	cmp	r3, r5
 8009aea:	db32      	blt.n	8009b52 <__lshift+0x86>
 8009aec:	4638      	mov	r0, r7
 8009aee:	f7ff fe2c 	bl	800974a <_Balloc>
 8009af2:	2300      	movs	r3, #0
 8009af4:	4680      	mov	r8, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	f100 0114 	add.w	r1, r0, #20
 8009afc:	4553      	cmp	r3, sl
 8009afe:	db2b      	blt.n	8009b58 <__lshift+0x8c>
 8009b00:	6920      	ldr	r0, [r4, #16]
 8009b02:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b06:	f104 0314 	add.w	r3, r4, #20
 8009b0a:	f016 021f 	ands.w	r2, r6, #31
 8009b0e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b12:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b16:	d025      	beq.n	8009b64 <__lshift+0x98>
 8009b18:	2000      	movs	r0, #0
 8009b1a:	f1c2 0e20 	rsb	lr, r2, #32
 8009b1e:	468a      	mov	sl, r1
 8009b20:	681e      	ldr	r6, [r3, #0]
 8009b22:	4096      	lsls	r6, r2
 8009b24:	4330      	orrs	r0, r6
 8009b26:	f84a 0b04 	str.w	r0, [sl], #4
 8009b2a:	f853 0b04 	ldr.w	r0, [r3], #4
 8009b2e:	459c      	cmp	ip, r3
 8009b30:	fa20 f00e 	lsr.w	r0, r0, lr
 8009b34:	d814      	bhi.n	8009b60 <__lshift+0x94>
 8009b36:	6048      	str	r0, [r1, #4]
 8009b38:	b108      	cbz	r0, 8009b3e <__lshift+0x72>
 8009b3a:	f109 0502 	add.w	r5, r9, #2
 8009b3e:	3d01      	subs	r5, #1
 8009b40:	4638      	mov	r0, r7
 8009b42:	f8c8 5010 	str.w	r5, [r8, #16]
 8009b46:	4621      	mov	r1, r4
 8009b48:	f7ff fe33 	bl	80097b2 <_Bfree>
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b52:	3101      	adds	r1, #1
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	e7c7      	b.n	8009ae8 <__lshift+0x1c>
 8009b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	e7cd      	b.n	8009afc <__lshift+0x30>
 8009b60:	4651      	mov	r1, sl
 8009b62:	e7dc      	b.n	8009b1e <__lshift+0x52>
 8009b64:	3904      	subs	r1, #4
 8009b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6a:	459c      	cmp	ip, r3
 8009b6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b70:	d8f9      	bhi.n	8009b66 <__lshift+0x9a>
 8009b72:	e7e4      	b.n	8009b3e <__lshift+0x72>

08009b74 <__mcmp>:
 8009b74:	6903      	ldr	r3, [r0, #16]
 8009b76:	690a      	ldr	r2, [r1, #16]
 8009b78:	b530      	push	{r4, r5, lr}
 8009b7a:	1a9b      	subs	r3, r3, r2
 8009b7c:	d10c      	bne.n	8009b98 <__mcmp+0x24>
 8009b7e:	0092      	lsls	r2, r2, #2
 8009b80:	3014      	adds	r0, #20
 8009b82:	3114      	adds	r1, #20
 8009b84:	1884      	adds	r4, r0, r2
 8009b86:	4411      	add	r1, r2
 8009b88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b90:	4295      	cmp	r5, r2
 8009b92:	d003      	beq.n	8009b9c <__mcmp+0x28>
 8009b94:	d305      	bcc.n	8009ba2 <__mcmp+0x2e>
 8009b96:	2301      	movs	r3, #1
 8009b98:	4618      	mov	r0, r3
 8009b9a:	bd30      	pop	{r4, r5, pc}
 8009b9c:	42a0      	cmp	r0, r4
 8009b9e:	d3f3      	bcc.n	8009b88 <__mcmp+0x14>
 8009ba0:	e7fa      	b.n	8009b98 <__mcmp+0x24>
 8009ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba6:	e7f7      	b.n	8009b98 <__mcmp+0x24>

08009ba8 <__mdiff>:
 8009ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bac:	460d      	mov	r5, r1
 8009bae:	4607      	mov	r7, r0
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	4614      	mov	r4, r2
 8009bb6:	f7ff ffdd 	bl	8009b74 <__mcmp>
 8009bba:	1e06      	subs	r6, r0, #0
 8009bbc:	d108      	bne.n	8009bd0 <__mdiff+0x28>
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	f7ff fdc2 	bl	800974a <_Balloc>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd0:	bfa4      	itt	ge
 8009bd2:	4623      	movge	r3, r4
 8009bd4:	462c      	movge	r4, r5
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	6861      	ldr	r1, [r4, #4]
 8009bda:	bfa6      	itte	ge
 8009bdc:	461d      	movge	r5, r3
 8009bde:	2600      	movge	r6, #0
 8009be0:	2601      	movlt	r6, #1
 8009be2:	f7ff fdb2 	bl	800974a <_Balloc>
 8009be6:	f04f 0e00 	mov.w	lr, #0
 8009bea:	60c6      	str	r6, [r0, #12]
 8009bec:	692b      	ldr	r3, [r5, #16]
 8009bee:	6926      	ldr	r6, [r4, #16]
 8009bf0:	f104 0214 	add.w	r2, r4, #20
 8009bf4:	f105 0914 	add.w	r9, r5, #20
 8009bf8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009bfc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009c00:	f100 0114 	add.w	r1, r0, #20
 8009c04:	f852 ab04 	ldr.w	sl, [r2], #4
 8009c08:	f859 5b04 	ldr.w	r5, [r9], #4
 8009c0c:	fa1f f38a 	uxth.w	r3, sl
 8009c10:	4473      	add	r3, lr
 8009c12:	b2ac      	uxth	r4, r5
 8009c14:	1b1b      	subs	r3, r3, r4
 8009c16:	0c2c      	lsrs	r4, r5, #16
 8009c18:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009c1c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009c26:	45c8      	cmp	r8, r9
 8009c28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009c2c:	4694      	mov	ip, r2
 8009c2e:	f841 4b04 	str.w	r4, [r1], #4
 8009c32:	d8e7      	bhi.n	8009c04 <__mdiff+0x5c>
 8009c34:	45bc      	cmp	ip, r7
 8009c36:	d304      	bcc.n	8009c42 <__mdiff+0x9a>
 8009c38:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009c3c:	b183      	cbz	r3, 8009c60 <__mdiff+0xb8>
 8009c3e:	6106      	str	r6, [r0, #16]
 8009c40:	e7c4      	b.n	8009bcc <__mdiff+0x24>
 8009c42:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009c46:	b2a2      	uxth	r2, r4
 8009c48:	4472      	add	r2, lr
 8009c4a:	1413      	asrs	r3, r2, #16
 8009c4c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009c50:	b292      	uxth	r2, r2
 8009c52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c56:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009c5a:	f841 2b04 	str.w	r2, [r1], #4
 8009c5e:	e7e9      	b.n	8009c34 <__mdiff+0x8c>
 8009c60:	3e01      	subs	r6, #1
 8009c62:	e7e9      	b.n	8009c38 <__mdiff+0x90>

08009c64 <__d2b>:
 8009c64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c68:	461c      	mov	r4, r3
 8009c6a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009c6e:	2101      	movs	r1, #1
 8009c70:	4690      	mov	r8, r2
 8009c72:	f7ff fd6a 	bl	800974a <_Balloc>
 8009c76:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009c7a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009c7e:	4607      	mov	r7, r0
 8009c80:	bb34      	cbnz	r4, 8009cd0 <__d2b+0x6c>
 8009c82:	9201      	str	r2, [sp, #4]
 8009c84:	f1b8 0200 	subs.w	r2, r8, #0
 8009c88:	d027      	beq.n	8009cda <__d2b+0x76>
 8009c8a:	a802      	add	r0, sp, #8
 8009c8c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009c90:	f7ff fe00 	bl	8009894 <__lo0bits>
 8009c94:	9900      	ldr	r1, [sp, #0]
 8009c96:	b1f0      	cbz	r0, 8009cd6 <__d2b+0x72>
 8009c98:	9a01      	ldr	r2, [sp, #4]
 8009c9a:	f1c0 0320 	rsb	r3, r0, #32
 8009c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca2:	430b      	orrs	r3, r1
 8009ca4:	40c2      	lsrs	r2, r0
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	9201      	str	r2, [sp, #4]
 8009caa:	9b01      	ldr	r3, [sp, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	bf14      	ite	ne
 8009cb0:	2102      	movne	r1, #2
 8009cb2:	2101      	moveq	r1, #1
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	6139      	str	r1, [r7, #16]
 8009cb8:	b1c4      	cbz	r4, 8009cec <__d2b+0x88>
 8009cba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009cbe:	4404      	add	r4, r0
 8009cc0:	6034      	str	r4, [r6, #0]
 8009cc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cc6:	6028      	str	r0, [r5, #0]
 8009cc8:	4638      	mov	r0, r7
 8009cca:	b002      	add	sp, #8
 8009ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009cd4:	e7d5      	b.n	8009c82 <__d2b+0x1e>
 8009cd6:	6179      	str	r1, [r7, #20]
 8009cd8:	e7e7      	b.n	8009caa <__d2b+0x46>
 8009cda:	a801      	add	r0, sp, #4
 8009cdc:	f7ff fdda 	bl	8009894 <__lo0bits>
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	9b01      	ldr	r3, [sp, #4]
 8009ce4:	6139      	str	r1, [r7, #16]
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	3020      	adds	r0, #32
 8009cea:	e7e5      	b.n	8009cb8 <__d2b+0x54>
 8009cec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cf0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009cf4:	6030      	str	r0, [r6, #0]
 8009cf6:	6918      	ldr	r0, [r3, #16]
 8009cf8:	f7ff fdad 	bl	8009856 <__hi0bits>
 8009cfc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009d00:	e7e1      	b.n	8009cc6 <__d2b+0x62>

08009d02 <_calloc_r>:
 8009d02:	b538      	push	{r3, r4, r5, lr}
 8009d04:	fb02 f401 	mul.w	r4, r2, r1
 8009d08:	4621      	mov	r1, r4
 8009d0a:	f000 f855 	bl	8009db8 <_malloc_r>
 8009d0e:	4605      	mov	r5, r0
 8009d10:	b118      	cbz	r0, 8009d1a <_calloc_r+0x18>
 8009d12:	4622      	mov	r2, r4
 8009d14:	2100      	movs	r1, #0
 8009d16:	f7fd ff01 	bl	8007b1c <memset>
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009d20 <_free_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4605      	mov	r5, r0
 8009d24:	2900      	cmp	r1, #0
 8009d26:	d043      	beq.n	8009db0 <_free_r+0x90>
 8009d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d2c:	1f0c      	subs	r4, r1, #4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bfb8      	it	lt
 8009d32:	18e4      	addlt	r4, r4, r3
 8009d34:	f000 fc35 	bl	800a5a2 <__malloc_lock>
 8009d38:	4a1e      	ldr	r2, [pc, #120]	; (8009db4 <_free_r+0x94>)
 8009d3a:	6813      	ldr	r3, [r2, #0]
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	b933      	cbnz	r3, 8009d4e <_free_r+0x2e>
 8009d40:	6063      	str	r3, [r4, #4]
 8009d42:	6014      	str	r4, [r2, #0]
 8009d44:	4628      	mov	r0, r5
 8009d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d4a:	f000 bc2b 	b.w	800a5a4 <__malloc_unlock>
 8009d4e:	42a3      	cmp	r3, r4
 8009d50:	d90b      	bls.n	8009d6a <_free_r+0x4a>
 8009d52:	6821      	ldr	r1, [r4, #0]
 8009d54:	1862      	adds	r2, r4, r1
 8009d56:	4293      	cmp	r3, r2
 8009d58:	bf01      	itttt	eq
 8009d5a:	681a      	ldreq	r2, [r3, #0]
 8009d5c:	685b      	ldreq	r3, [r3, #4]
 8009d5e:	1852      	addeq	r2, r2, r1
 8009d60:	6022      	streq	r2, [r4, #0]
 8009d62:	6063      	str	r3, [r4, #4]
 8009d64:	6004      	str	r4, [r0, #0]
 8009d66:	e7ed      	b.n	8009d44 <_free_r+0x24>
 8009d68:	4613      	mov	r3, r2
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	b10a      	cbz	r2, 8009d72 <_free_r+0x52>
 8009d6e:	42a2      	cmp	r2, r4
 8009d70:	d9fa      	bls.n	8009d68 <_free_r+0x48>
 8009d72:	6819      	ldr	r1, [r3, #0]
 8009d74:	1858      	adds	r0, r3, r1
 8009d76:	42a0      	cmp	r0, r4
 8009d78:	d10b      	bne.n	8009d92 <_free_r+0x72>
 8009d7a:	6820      	ldr	r0, [r4, #0]
 8009d7c:	4401      	add	r1, r0
 8009d7e:	1858      	adds	r0, r3, r1
 8009d80:	4282      	cmp	r2, r0
 8009d82:	6019      	str	r1, [r3, #0]
 8009d84:	d1de      	bne.n	8009d44 <_free_r+0x24>
 8009d86:	6810      	ldr	r0, [r2, #0]
 8009d88:	6852      	ldr	r2, [r2, #4]
 8009d8a:	4401      	add	r1, r0
 8009d8c:	6019      	str	r1, [r3, #0]
 8009d8e:	605a      	str	r2, [r3, #4]
 8009d90:	e7d8      	b.n	8009d44 <_free_r+0x24>
 8009d92:	d902      	bls.n	8009d9a <_free_r+0x7a>
 8009d94:	230c      	movs	r3, #12
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	e7d4      	b.n	8009d44 <_free_r+0x24>
 8009d9a:	6820      	ldr	r0, [r4, #0]
 8009d9c:	1821      	adds	r1, r4, r0
 8009d9e:	428a      	cmp	r2, r1
 8009da0:	bf01      	itttt	eq
 8009da2:	6811      	ldreq	r1, [r2, #0]
 8009da4:	6852      	ldreq	r2, [r2, #4]
 8009da6:	1809      	addeq	r1, r1, r0
 8009da8:	6021      	streq	r1, [r4, #0]
 8009daa:	6062      	str	r2, [r4, #4]
 8009dac:	605c      	str	r4, [r3, #4]
 8009dae:	e7c9      	b.n	8009d44 <_free_r+0x24>
 8009db0:	bd38      	pop	{r3, r4, r5, pc}
 8009db2:	bf00      	nop
 8009db4:	20000244 	.word	0x20000244

08009db8 <_malloc_r>:
 8009db8:	b570      	push	{r4, r5, r6, lr}
 8009dba:	1ccd      	adds	r5, r1, #3
 8009dbc:	f025 0503 	bic.w	r5, r5, #3
 8009dc0:	3508      	adds	r5, #8
 8009dc2:	2d0c      	cmp	r5, #12
 8009dc4:	bf38      	it	cc
 8009dc6:	250c      	movcc	r5, #12
 8009dc8:	2d00      	cmp	r5, #0
 8009dca:	4606      	mov	r6, r0
 8009dcc:	db01      	blt.n	8009dd2 <_malloc_r+0x1a>
 8009dce:	42a9      	cmp	r1, r5
 8009dd0:	d903      	bls.n	8009dda <_malloc_r+0x22>
 8009dd2:	230c      	movs	r3, #12
 8009dd4:	6033      	str	r3, [r6, #0]
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	bd70      	pop	{r4, r5, r6, pc}
 8009dda:	f000 fbe2 	bl	800a5a2 <__malloc_lock>
 8009dde:	4a21      	ldr	r2, [pc, #132]	; (8009e64 <_malloc_r+0xac>)
 8009de0:	6814      	ldr	r4, [r2, #0]
 8009de2:	4621      	mov	r1, r4
 8009de4:	b991      	cbnz	r1, 8009e0c <_malloc_r+0x54>
 8009de6:	4c20      	ldr	r4, [pc, #128]	; (8009e68 <_malloc_r+0xb0>)
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	b91b      	cbnz	r3, 8009df4 <_malloc_r+0x3c>
 8009dec:	4630      	mov	r0, r6
 8009dee:	f000 fb03 	bl	800a3f8 <_sbrk_r>
 8009df2:	6020      	str	r0, [r4, #0]
 8009df4:	4629      	mov	r1, r5
 8009df6:	4630      	mov	r0, r6
 8009df8:	f000 fafe 	bl	800a3f8 <_sbrk_r>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d124      	bne.n	8009e4a <_malloc_r+0x92>
 8009e00:	230c      	movs	r3, #12
 8009e02:	4630      	mov	r0, r6
 8009e04:	6033      	str	r3, [r6, #0]
 8009e06:	f000 fbcd 	bl	800a5a4 <__malloc_unlock>
 8009e0a:	e7e4      	b.n	8009dd6 <_malloc_r+0x1e>
 8009e0c:	680b      	ldr	r3, [r1, #0]
 8009e0e:	1b5b      	subs	r3, r3, r5
 8009e10:	d418      	bmi.n	8009e44 <_malloc_r+0x8c>
 8009e12:	2b0b      	cmp	r3, #11
 8009e14:	d90f      	bls.n	8009e36 <_malloc_r+0x7e>
 8009e16:	600b      	str	r3, [r1, #0]
 8009e18:	18cc      	adds	r4, r1, r3
 8009e1a:	50cd      	str	r5, [r1, r3]
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f000 fbc1 	bl	800a5a4 <__malloc_unlock>
 8009e22:	f104 000b 	add.w	r0, r4, #11
 8009e26:	1d23      	adds	r3, r4, #4
 8009e28:	f020 0007 	bic.w	r0, r0, #7
 8009e2c:	1ac3      	subs	r3, r0, r3
 8009e2e:	d0d3      	beq.n	8009dd8 <_malloc_r+0x20>
 8009e30:	425a      	negs	r2, r3
 8009e32:	50e2      	str	r2, [r4, r3]
 8009e34:	e7d0      	b.n	8009dd8 <_malloc_r+0x20>
 8009e36:	684b      	ldr	r3, [r1, #4]
 8009e38:	428c      	cmp	r4, r1
 8009e3a:	bf16      	itet	ne
 8009e3c:	6063      	strne	r3, [r4, #4]
 8009e3e:	6013      	streq	r3, [r2, #0]
 8009e40:	460c      	movne	r4, r1
 8009e42:	e7eb      	b.n	8009e1c <_malloc_r+0x64>
 8009e44:	460c      	mov	r4, r1
 8009e46:	6849      	ldr	r1, [r1, #4]
 8009e48:	e7cc      	b.n	8009de4 <_malloc_r+0x2c>
 8009e4a:	1cc4      	adds	r4, r0, #3
 8009e4c:	f024 0403 	bic.w	r4, r4, #3
 8009e50:	42a0      	cmp	r0, r4
 8009e52:	d005      	beq.n	8009e60 <_malloc_r+0xa8>
 8009e54:	1a21      	subs	r1, r4, r0
 8009e56:	4630      	mov	r0, r6
 8009e58:	f000 face 	bl	800a3f8 <_sbrk_r>
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	d0cf      	beq.n	8009e00 <_malloc_r+0x48>
 8009e60:	6025      	str	r5, [r4, #0]
 8009e62:	e7db      	b.n	8009e1c <_malloc_r+0x64>
 8009e64:	20000244 	.word	0x20000244
 8009e68:	20000248 	.word	0x20000248

08009e6c <__ssputs_r>:
 8009e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e70:	688e      	ldr	r6, [r1, #8]
 8009e72:	4682      	mov	sl, r0
 8009e74:	429e      	cmp	r6, r3
 8009e76:	460c      	mov	r4, r1
 8009e78:	4690      	mov	r8, r2
 8009e7a:	4699      	mov	r9, r3
 8009e7c:	d837      	bhi.n	8009eee <__ssputs_r+0x82>
 8009e7e:	898a      	ldrh	r2, [r1, #12]
 8009e80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e84:	d031      	beq.n	8009eea <__ssputs_r+0x7e>
 8009e86:	2302      	movs	r3, #2
 8009e88:	6825      	ldr	r5, [r4, #0]
 8009e8a:	6909      	ldr	r1, [r1, #16]
 8009e8c:	1a6f      	subs	r7, r5, r1
 8009e8e:	6965      	ldr	r5, [r4, #20]
 8009e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e94:	fb95 f5f3 	sdiv	r5, r5, r3
 8009e98:	f109 0301 	add.w	r3, r9, #1
 8009e9c:	443b      	add	r3, r7
 8009e9e:	429d      	cmp	r5, r3
 8009ea0:	bf38      	it	cc
 8009ea2:	461d      	movcc	r5, r3
 8009ea4:	0553      	lsls	r3, r2, #21
 8009ea6:	d530      	bpl.n	8009f0a <__ssputs_r+0x9e>
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	f7ff ff85 	bl	8009db8 <_malloc_r>
 8009eae:	4606      	mov	r6, r0
 8009eb0:	b950      	cbnz	r0, 8009ec8 <__ssputs_r+0x5c>
 8009eb2:	230c      	movs	r3, #12
 8009eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb8:	f8ca 3000 	str.w	r3, [sl]
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec8:	463a      	mov	r2, r7
 8009eca:	6921      	ldr	r1, [r4, #16]
 8009ecc:	f7ff fc32 	bl	8009734 <memcpy>
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	6126      	str	r6, [r4, #16]
 8009ede:	443e      	add	r6, r7
 8009ee0:	6026      	str	r6, [r4, #0]
 8009ee2:	464e      	mov	r6, r9
 8009ee4:	6165      	str	r5, [r4, #20]
 8009ee6:	1bed      	subs	r5, r5, r7
 8009ee8:	60a5      	str	r5, [r4, #8]
 8009eea:	454e      	cmp	r6, r9
 8009eec:	d900      	bls.n	8009ef0 <__ssputs_r+0x84>
 8009eee:	464e      	mov	r6, r9
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	4641      	mov	r1, r8
 8009ef4:	6820      	ldr	r0, [r4, #0]
 8009ef6:	f000 fb3b 	bl	800a570 <memmove>
 8009efa:	68a3      	ldr	r3, [r4, #8]
 8009efc:	2000      	movs	r0, #0
 8009efe:	1b9b      	subs	r3, r3, r6
 8009f00:	60a3      	str	r3, [r4, #8]
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	441e      	add	r6, r3
 8009f06:	6026      	str	r6, [r4, #0]
 8009f08:	e7dc      	b.n	8009ec4 <__ssputs_r+0x58>
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	f000 fb4b 	bl	800a5a6 <_realloc_r>
 8009f10:	4606      	mov	r6, r0
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d1e2      	bne.n	8009edc <__ssputs_r+0x70>
 8009f16:	6921      	ldr	r1, [r4, #16]
 8009f18:	4650      	mov	r0, sl
 8009f1a:	f7ff ff01 	bl	8009d20 <_free_r>
 8009f1e:	e7c8      	b.n	8009eb2 <__ssputs_r+0x46>

08009f20 <_svfiprintf_r>:
 8009f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f24:	461d      	mov	r5, r3
 8009f26:	898b      	ldrh	r3, [r1, #12]
 8009f28:	b09d      	sub	sp, #116	; 0x74
 8009f2a:	061f      	lsls	r7, r3, #24
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	4616      	mov	r6, r2
 8009f32:	d50f      	bpl.n	8009f54 <_svfiprintf_r+0x34>
 8009f34:	690b      	ldr	r3, [r1, #16]
 8009f36:	b96b      	cbnz	r3, 8009f54 <_svfiprintf_r+0x34>
 8009f38:	2140      	movs	r1, #64	; 0x40
 8009f3a:	f7ff ff3d 	bl	8009db8 <_malloc_r>
 8009f3e:	6020      	str	r0, [r4, #0]
 8009f40:	6120      	str	r0, [r4, #16]
 8009f42:	b928      	cbnz	r0, 8009f50 <_svfiprintf_r+0x30>
 8009f44:	230c      	movs	r3, #12
 8009f46:	f8c8 3000 	str.w	r3, [r8]
 8009f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4e:	e0c8      	b.n	800a0e2 <_svfiprintf_r+0x1c2>
 8009f50:	2340      	movs	r3, #64	; 0x40
 8009f52:	6163      	str	r3, [r4, #20]
 8009f54:	2300      	movs	r3, #0
 8009f56:	9309      	str	r3, [sp, #36]	; 0x24
 8009f58:	2320      	movs	r3, #32
 8009f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f5e:	2330      	movs	r3, #48	; 0x30
 8009f60:	f04f 0b01 	mov.w	fp, #1
 8009f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f68:	9503      	str	r5, [sp, #12]
 8009f6a:	4637      	mov	r7, r6
 8009f6c:	463d      	mov	r5, r7
 8009f6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f72:	b10b      	cbz	r3, 8009f78 <_svfiprintf_r+0x58>
 8009f74:	2b25      	cmp	r3, #37	; 0x25
 8009f76:	d13e      	bne.n	8009ff6 <_svfiprintf_r+0xd6>
 8009f78:	ebb7 0a06 	subs.w	sl, r7, r6
 8009f7c:	d00b      	beq.n	8009f96 <_svfiprintf_r+0x76>
 8009f7e:	4653      	mov	r3, sl
 8009f80:	4632      	mov	r2, r6
 8009f82:	4621      	mov	r1, r4
 8009f84:	4640      	mov	r0, r8
 8009f86:	f7ff ff71 	bl	8009e6c <__ssputs_r>
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f000 80a4 	beq.w	800a0d8 <_svfiprintf_r+0x1b8>
 8009f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f92:	4453      	add	r3, sl
 8009f94:	9309      	str	r3, [sp, #36]	; 0x24
 8009f96:	783b      	ldrb	r3, [r7, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 809d 	beq.w	800a0d8 <_svfiprintf_r+0x1b8>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	9307      	str	r3, [sp, #28]
 8009fac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fb0:	931a      	str	r3, [sp, #104]	; 0x68
 8009fb2:	462f      	mov	r7, r5
 8009fb4:	2205      	movs	r2, #5
 8009fb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009fba:	4850      	ldr	r0, [pc, #320]	; (800a0fc <_svfiprintf_r+0x1dc>)
 8009fbc:	f7ff fbac 	bl	8009718 <memchr>
 8009fc0:	9b04      	ldr	r3, [sp, #16]
 8009fc2:	b9d0      	cbnz	r0, 8009ffa <_svfiprintf_r+0xda>
 8009fc4:	06d9      	lsls	r1, r3, #27
 8009fc6:	bf44      	itt	mi
 8009fc8:	2220      	movmi	r2, #32
 8009fca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fce:	071a      	lsls	r2, r3, #28
 8009fd0:	bf44      	itt	mi
 8009fd2:	222b      	movmi	r2, #43	; 0x2b
 8009fd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fd8:	782a      	ldrb	r2, [r5, #0]
 8009fda:	2a2a      	cmp	r2, #42	; 0x2a
 8009fdc:	d015      	beq.n	800a00a <_svfiprintf_r+0xea>
 8009fde:	462f      	mov	r7, r5
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	250a      	movs	r5, #10
 8009fe4:	9a07      	ldr	r2, [sp, #28]
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fec:	3b30      	subs	r3, #48	; 0x30
 8009fee:	2b09      	cmp	r3, #9
 8009ff0:	d94d      	bls.n	800a08e <_svfiprintf_r+0x16e>
 8009ff2:	b1b8      	cbz	r0, 800a024 <_svfiprintf_r+0x104>
 8009ff4:	e00f      	b.n	800a016 <_svfiprintf_r+0xf6>
 8009ff6:	462f      	mov	r7, r5
 8009ff8:	e7b8      	b.n	8009f6c <_svfiprintf_r+0x4c>
 8009ffa:	4a40      	ldr	r2, [pc, #256]	; (800a0fc <_svfiprintf_r+0x1dc>)
 8009ffc:	463d      	mov	r5, r7
 8009ffe:	1a80      	subs	r0, r0, r2
 800a000:	fa0b f000 	lsl.w	r0, fp, r0
 800a004:	4318      	orrs	r0, r3
 800a006:	9004      	str	r0, [sp, #16]
 800a008:	e7d3      	b.n	8009fb2 <_svfiprintf_r+0x92>
 800a00a:	9a03      	ldr	r2, [sp, #12]
 800a00c:	1d11      	adds	r1, r2, #4
 800a00e:	6812      	ldr	r2, [r2, #0]
 800a010:	9103      	str	r1, [sp, #12]
 800a012:	2a00      	cmp	r2, #0
 800a014:	db01      	blt.n	800a01a <_svfiprintf_r+0xfa>
 800a016:	9207      	str	r2, [sp, #28]
 800a018:	e004      	b.n	800a024 <_svfiprintf_r+0x104>
 800a01a:	4252      	negs	r2, r2
 800a01c:	f043 0302 	orr.w	r3, r3, #2
 800a020:	9207      	str	r2, [sp, #28]
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	783b      	ldrb	r3, [r7, #0]
 800a026:	2b2e      	cmp	r3, #46	; 0x2e
 800a028:	d10c      	bne.n	800a044 <_svfiprintf_r+0x124>
 800a02a:	787b      	ldrb	r3, [r7, #1]
 800a02c:	2b2a      	cmp	r3, #42	; 0x2a
 800a02e:	d133      	bne.n	800a098 <_svfiprintf_r+0x178>
 800a030:	9b03      	ldr	r3, [sp, #12]
 800a032:	3702      	adds	r7, #2
 800a034:	1d1a      	adds	r2, r3, #4
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	9203      	str	r2, [sp, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	bfb8      	it	lt
 800a03e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a042:	9305      	str	r3, [sp, #20]
 800a044:	4d2e      	ldr	r5, [pc, #184]	; (800a100 <_svfiprintf_r+0x1e0>)
 800a046:	2203      	movs	r2, #3
 800a048:	7839      	ldrb	r1, [r7, #0]
 800a04a:	4628      	mov	r0, r5
 800a04c:	f7ff fb64 	bl	8009718 <memchr>
 800a050:	b138      	cbz	r0, 800a062 <_svfiprintf_r+0x142>
 800a052:	2340      	movs	r3, #64	; 0x40
 800a054:	1b40      	subs	r0, r0, r5
 800a056:	fa03 f000 	lsl.w	r0, r3, r0
 800a05a:	9b04      	ldr	r3, [sp, #16]
 800a05c:	3701      	adds	r7, #1
 800a05e:	4303      	orrs	r3, r0
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	7839      	ldrb	r1, [r7, #0]
 800a064:	2206      	movs	r2, #6
 800a066:	4827      	ldr	r0, [pc, #156]	; (800a104 <_svfiprintf_r+0x1e4>)
 800a068:	1c7e      	adds	r6, r7, #1
 800a06a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a06e:	f7ff fb53 	bl	8009718 <memchr>
 800a072:	2800      	cmp	r0, #0
 800a074:	d038      	beq.n	800a0e8 <_svfiprintf_r+0x1c8>
 800a076:	4b24      	ldr	r3, [pc, #144]	; (800a108 <_svfiprintf_r+0x1e8>)
 800a078:	bb13      	cbnz	r3, 800a0c0 <_svfiprintf_r+0x1a0>
 800a07a:	9b03      	ldr	r3, [sp, #12]
 800a07c:	3307      	adds	r3, #7
 800a07e:	f023 0307 	bic.w	r3, r3, #7
 800a082:	3308      	adds	r3, #8
 800a084:	9303      	str	r3, [sp, #12]
 800a086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a088:	444b      	add	r3, r9
 800a08a:	9309      	str	r3, [sp, #36]	; 0x24
 800a08c:	e76d      	b.n	8009f6a <_svfiprintf_r+0x4a>
 800a08e:	fb05 3202 	mla	r2, r5, r2, r3
 800a092:	2001      	movs	r0, #1
 800a094:	460f      	mov	r7, r1
 800a096:	e7a6      	b.n	8009fe6 <_svfiprintf_r+0xc6>
 800a098:	2300      	movs	r3, #0
 800a09a:	250a      	movs	r5, #10
 800a09c:	4619      	mov	r1, r3
 800a09e:	3701      	adds	r7, #1
 800a0a0:	9305      	str	r3, [sp, #20]
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0a8:	3a30      	subs	r2, #48	; 0x30
 800a0aa:	2a09      	cmp	r2, #9
 800a0ac:	d903      	bls.n	800a0b6 <_svfiprintf_r+0x196>
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0c8      	beq.n	800a044 <_svfiprintf_r+0x124>
 800a0b2:	9105      	str	r1, [sp, #20]
 800a0b4:	e7c6      	b.n	800a044 <_svfiprintf_r+0x124>
 800a0b6:	fb05 2101 	mla	r1, r5, r1, r2
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4607      	mov	r7, r0
 800a0be:	e7f0      	b.n	800a0a2 <_svfiprintf_r+0x182>
 800a0c0:	ab03      	add	r3, sp, #12
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	4b11      	ldr	r3, [pc, #68]	; (800a10c <_svfiprintf_r+0x1ec>)
 800a0c8:	a904      	add	r1, sp, #16
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	f7fd fdc0 	bl	8007c50 <_printf_float>
 800a0d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a0d4:	4681      	mov	r9, r0
 800a0d6:	d1d6      	bne.n	800a086 <_svfiprintf_r+0x166>
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	065b      	lsls	r3, r3, #25
 800a0dc:	f53f af35 	bmi.w	8009f4a <_svfiprintf_r+0x2a>
 800a0e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0e2:	b01d      	add	sp, #116	; 0x74
 800a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e8:	ab03      	add	r3, sp, #12
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	4b07      	ldr	r3, [pc, #28]	; (800a10c <_svfiprintf_r+0x1ec>)
 800a0f0:	a904      	add	r1, sp, #16
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	f7fe f858 	bl	80081a8 <_printf_i>
 800a0f8:	e7ea      	b.n	800a0d0 <_svfiprintf_r+0x1b0>
 800a0fa:	bf00      	nop
 800a0fc:	0800ab04 	.word	0x0800ab04
 800a100:	0800ab0a 	.word	0x0800ab0a
 800a104:	0800ab0e 	.word	0x0800ab0e
 800a108:	08007c51 	.word	0x08007c51
 800a10c:	08009e6d 	.word	0x08009e6d

0800a110 <__sfputc_r>:
 800a110:	6893      	ldr	r3, [r2, #8]
 800a112:	b410      	push	{r4}
 800a114:	3b01      	subs	r3, #1
 800a116:	2b00      	cmp	r3, #0
 800a118:	6093      	str	r3, [r2, #8]
 800a11a:	da07      	bge.n	800a12c <__sfputc_r+0x1c>
 800a11c:	6994      	ldr	r4, [r2, #24]
 800a11e:	42a3      	cmp	r3, r4
 800a120:	db01      	blt.n	800a126 <__sfputc_r+0x16>
 800a122:	290a      	cmp	r1, #10
 800a124:	d102      	bne.n	800a12c <__sfputc_r+0x1c>
 800a126:	bc10      	pop	{r4}
 800a128:	f7fe ba00 	b.w	800852c <__swbuf_r>
 800a12c:	6813      	ldr	r3, [r2, #0]
 800a12e:	1c58      	adds	r0, r3, #1
 800a130:	6010      	str	r0, [r2, #0]
 800a132:	7019      	strb	r1, [r3, #0]
 800a134:	4608      	mov	r0, r1
 800a136:	bc10      	pop	{r4}
 800a138:	4770      	bx	lr

0800a13a <__sfputs_r>:
 800a13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13c:	4606      	mov	r6, r0
 800a13e:	460f      	mov	r7, r1
 800a140:	4614      	mov	r4, r2
 800a142:	18d5      	adds	r5, r2, r3
 800a144:	42ac      	cmp	r4, r5
 800a146:	d101      	bne.n	800a14c <__sfputs_r+0x12>
 800a148:	2000      	movs	r0, #0
 800a14a:	e007      	b.n	800a15c <__sfputs_r+0x22>
 800a14c:	463a      	mov	r2, r7
 800a14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a152:	4630      	mov	r0, r6
 800a154:	f7ff ffdc 	bl	800a110 <__sfputc_r>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	d1f3      	bne.n	800a144 <__sfputs_r+0xa>
 800a15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a160 <_vfiprintf_r>:
 800a160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a164:	460c      	mov	r4, r1
 800a166:	b09d      	sub	sp, #116	; 0x74
 800a168:	4617      	mov	r7, r2
 800a16a:	461d      	mov	r5, r3
 800a16c:	4606      	mov	r6, r0
 800a16e:	b118      	cbz	r0, 800a178 <_vfiprintf_r+0x18>
 800a170:	6983      	ldr	r3, [r0, #24]
 800a172:	b90b      	cbnz	r3, 800a178 <_vfiprintf_r+0x18>
 800a174:	f7ff f9cc 	bl	8009510 <__sinit>
 800a178:	4b7c      	ldr	r3, [pc, #496]	; (800a36c <_vfiprintf_r+0x20c>)
 800a17a:	429c      	cmp	r4, r3
 800a17c:	d158      	bne.n	800a230 <_vfiprintf_r+0xd0>
 800a17e:	6874      	ldr	r4, [r6, #4]
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	0718      	lsls	r0, r3, #28
 800a184:	d55e      	bpl.n	800a244 <_vfiprintf_r+0xe4>
 800a186:	6923      	ldr	r3, [r4, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d05b      	beq.n	800a244 <_vfiprintf_r+0xe4>
 800a18c:	2300      	movs	r3, #0
 800a18e:	9309      	str	r3, [sp, #36]	; 0x24
 800a190:	2320      	movs	r3, #32
 800a192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a196:	2330      	movs	r3, #48	; 0x30
 800a198:	f04f 0b01 	mov.w	fp, #1
 800a19c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1a0:	9503      	str	r5, [sp, #12]
 800a1a2:	46b8      	mov	r8, r7
 800a1a4:	4645      	mov	r5, r8
 800a1a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a1aa:	b10b      	cbz	r3, 800a1b0 <_vfiprintf_r+0x50>
 800a1ac:	2b25      	cmp	r3, #37	; 0x25
 800a1ae:	d154      	bne.n	800a25a <_vfiprintf_r+0xfa>
 800a1b0:	ebb8 0a07 	subs.w	sl, r8, r7
 800a1b4:	d00b      	beq.n	800a1ce <_vfiprintf_r+0x6e>
 800a1b6:	4653      	mov	r3, sl
 800a1b8:	463a      	mov	r2, r7
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7ff ffbc 	bl	800a13a <__sfputs_r>
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	f000 80c2 	beq.w	800a34c <_vfiprintf_r+0x1ec>
 800a1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ca:	4453      	add	r3, sl
 800a1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ce:	f898 3000 	ldrb.w	r3, [r8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f000 80ba 	beq.w	800a34c <_vfiprintf_r+0x1ec>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f04f 32ff 	mov.w	r2, #4294967295
 800a1de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1e2:	9304      	str	r3, [sp, #16]
 800a1e4:	9307      	str	r3, [sp, #28]
 800a1e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a1ec:	46a8      	mov	r8, r5
 800a1ee:	2205      	movs	r2, #5
 800a1f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a1f4:	485e      	ldr	r0, [pc, #376]	; (800a370 <_vfiprintf_r+0x210>)
 800a1f6:	f7ff fa8f 	bl	8009718 <memchr>
 800a1fa:	9b04      	ldr	r3, [sp, #16]
 800a1fc:	bb78      	cbnz	r0, 800a25e <_vfiprintf_r+0xfe>
 800a1fe:	06d9      	lsls	r1, r3, #27
 800a200:	bf44      	itt	mi
 800a202:	2220      	movmi	r2, #32
 800a204:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a208:	071a      	lsls	r2, r3, #28
 800a20a:	bf44      	itt	mi
 800a20c:	222b      	movmi	r2, #43	; 0x2b
 800a20e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a212:	782a      	ldrb	r2, [r5, #0]
 800a214:	2a2a      	cmp	r2, #42	; 0x2a
 800a216:	d02a      	beq.n	800a26e <_vfiprintf_r+0x10e>
 800a218:	46a8      	mov	r8, r5
 800a21a:	2000      	movs	r0, #0
 800a21c:	250a      	movs	r5, #10
 800a21e:	9a07      	ldr	r2, [sp, #28]
 800a220:	4641      	mov	r1, r8
 800a222:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a226:	3b30      	subs	r3, #48	; 0x30
 800a228:	2b09      	cmp	r3, #9
 800a22a:	d969      	bls.n	800a300 <_vfiprintf_r+0x1a0>
 800a22c:	b360      	cbz	r0, 800a288 <_vfiprintf_r+0x128>
 800a22e:	e024      	b.n	800a27a <_vfiprintf_r+0x11a>
 800a230:	4b50      	ldr	r3, [pc, #320]	; (800a374 <_vfiprintf_r+0x214>)
 800a232:	429c      	cmp	r4, r3
 800a234:	d101      	bne.n	800a23a <_vfiprintf_r+0xda>
 800a236:	68b4      	ldr	r4, [r6, #8]
 800a238:	e7a2      	b.n	800a180 <_vfiprintf_r+0x20>
 800a23a:	4b4f      	ldr	r3, [pc, #316]	; (800a378 <_vfiprintf_r+0x218>)
 800a23c:	429c      	cmp	r4, r3
 800a23e:	bf08      	it	eq
 800a240:	68f4      	ldreq	r4, [r6, #12]
 800a242:	e79d      	b.n	800a180 <_vfiprintf_r+0x20>
 800a244:	4621      	mov	r1, r4
 800a246:	4630      	mov	r0, r6
 800a248:	f7fe f9c2 	bl	80085d0 <__swsetup_r>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d09d      	beq.n	800a18c <_vfiprintf_r+0x2c>
 800a250:	f04f 30ff 	mov.w	r0, #4294967295
 800a254:	b01d      	add	sp, #116	; 0x74
 800a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25a:	46a8      	mov	r8, r5
 800a25c:	e7a2      	b.n	800a1a4 <_vfiprintf_r+0x44>
 800a25e:	4a44      	ldr	r2, [pc, #272]	; (800a370 <_vfiprintf_r+0x210>)
 800a260:	4645      	mov	r5, r8
 800a262:	1a80      	subs	r0, r0, r2
 800a264:	fa0b f000 	lsl.w	r0, fp, r0
 800a268:	4318      	orrs	r0, r3
 800a26a:	9004      	str	r0, [sp, #16]
 800a26c:	e7be      	b.n	800a1ec <_vfiprintf_r+0x8c>
 800a26e:	9a03      	ldr	r2, [sp, #12]
 800a270:	1d11      	adds	r1, r2, #4
 800a272:	6812      	ldr	r2, [r2, #0]
 800a274:	9103      	str	r1, [sp, #12]
 800a276:	2a00      	cmp	r2, #0
 800a278:	db01      	blt.n	800a27e <_vfiprintf_r+0x11e>
 800a27a:	9207      	str	r2, [sp, #28]
 800a27c:	e004      	b.n	800a288 <_vfiprintf_r+0x128>
 800a27e:	4252      	negs	r2, r2
 800a280:	f043 0302 	orr.w	r3, r3, #2
 800a284:	9207      	str	r2, [sp, #28]
 800a286:	9304      	str	r3, [sp, #16]
 800a288:	f898 3000 	ldrb.w	r3, [r8]
 800a28c:	2b2e      	cmp	r3, #46	; 0x2e
 800a28e:	d10e      	bne.n	800a2ae <_vfiprintf_r+0x14e>
 800a290:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a294:	2b2a      	cmp	r3, #42	; 0x2a
 800a296:	d138      	bne.n	800a30a <_vfiprintf_r+0x1aa>
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	f108 0802 	add.w	r8, r8, #2
 800a29e:	1d1a      	adds	r2, r3, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	9203      	str	r2, [sp, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bfb8      	it	lt
 800a2a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2ac:	9305      	str	r3, [sp, #20]
 800a2ae:	4d33      	ldr	r5, [pc, #204]	; (800a37c <_vfiprintf_r+0x21c>)
 800a2b0:	2203      	movs	r2, #3
 800a2b2:	f898 1000 	ldrb.w	r1, [r8]
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f7ff fa2e 	bl	8009718 <memchr>
 800a2bc:	b140      	cbz	r0, 800a2d0 <_vfiprintf_r+0x170>
 800a2be:	2340      	movs	r3, #64	; 0x40
 800a2c0:	1b40      	subs	r0, r0, r5
 800a2c2:	fa03 f000 	lsl.w	r0, r3, r0
 800a2c6:	9b04      	ldr	r3, [sp, #16]
 800a2c8:	f108 0801 	add.w	r8, r8, #1
 800a2cc:	4303      	orrs	r3, r0
 800a2ce:	9304      	str	r3, [sp, #16]
 800a2d0:	f898 1000 	ldrb.w	r1, [r8]
 800a2d4:	2206      	movs	r2, #6
 800a2d6:	482a      	ldr	r0, [pc, #168]	; (800a380 <_vfiprintf_r+0x220>)
 800a2d8:	f108 0701 	add.w	r7, r8, #1
 800a2dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2e0:	f7ff fa1a 	bl	8009718 <memchr>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d037      	beq.n	800a358 <_vfiprintf_r+0x1f8>
 800a2e8:	4b26      	ldr	r3, [pc, #152]	; (800a384 <_vfiprintf_r+0x224>)
 800a2ea:	bb1b      	cbnz	r3, 800a334 <_vfiprintf_r+0x1d4>
 800a2ec:	9b03      	ldr	r3, [sp, #12]
 800a2ee:	3307      	adds	r3, #7
 800a2f0:	f023 0307 	bic.w	r3, r3, #7
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	9303      	str	r3, [sp, #12]
 800a2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fa:	444b      	add	r3, r9
 800a2fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2fe:	e750      	b.n	800a1a2 <_vfiprintf_r+0x42>
 800a300:	fb05 3202 	mla	r2, r5, r2, r3
 800a304:	2001      	movs	r0, #1
 800a306:	4688      	mov	r8, r1
 800a308:	e78a      	b.n	800a220 <_vfiprintf_r+0xc0>
 800a30a:	2300      	movs	r3, #0
 800a30c:	250a      	movs	r5, #10
 800a30e:	4619      	mov	r1, r3
 800a310:	f108 0801 	add.w	r8, r8, #1
 800a314:	9305      	str	r3, [sp, #20]
 800a316:	4640      	mov	r0, r8
 800a318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a31c:	3a30      	subs	r2, #48	; 0x30
 800a31e:	2a09      	cmp	r2, #9
 800a320:	d903      	bls.n	800a32a <_vfiprintf_r+0x1ca>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0c3      	beq.n	800a2ae <_vfiprintf_r+0x14e>
 800a326:	9105      	str	r1, [sp, #20]
 800a328:	e7c1      	b.n	800a2ae <_vfiprintf_r+0x14e>
 800a32a:	fb05 2101 	mla	r1, r5, r1, r2
 800a32e:	2301      	movs	r3, #1
 800a330:	4680      	mov	r8, r0
 800a332:	e7f0      	b.n	800a316 <_vfiprintf_r+0x1b6>
 800a334:	ab03      	add	r3, sp, #12
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	4622      	mov	r2, r4
 800a33a:	4b13      	ldr	r3, [pc, #76]	; (800a388 <_vfiprintf_r+0x228>)
 800a33c:	a904      	add	r1, sp, #16
 800a33e:	4630      	mov	r0, r6
 800a340:	f7fd fc86 	bl	8007c50 <_printf_float>
 800a344:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a348:	4681      	mov	r9, r0
 800a34a:	d1d5      	bne.n	800a2f8 <_vfiprintf_r+0x198>
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	065b      	lsls	r3, r3, #25
 800a350:	f53f af7e 	bmi.w	800a250 <_vfiprintf_r+0xf0>
 800a354:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a356:	e77d      	b.n	800a254 <_vfiprintf_r+0xf4>
 800a358:	ab03      	add	r3, sp, #12
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	4622      	mov	r2, r4
 800a35e:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <_vfiprintf_r+0x228>)
 800a360:	a904      	add	r1, sp, #16
 800a362:	4630      	mov	r0, r6
 800a364:	f7fd ff20 	bl	80081a8 <_printf_i>
 800a368:	e7ec      	b.n	800a344 <_vfiprintf_r+0x1e4>
 800a36a:	bf00      	nop
 800a36c:	0800a9c8 	.word	0x0800a9c8
 800a370:	0800ab04 	.word	0x0800ab04
 800a374:	0800a9e8 	.word	0x0800a9e8
 800a378:	0800a9a8 	.word	0x0800a9a8
 800a37c:	0800ab0a 	.word	0x0800ab0a
 800a380:	0800ab0e 	.word	0x0800ab0e
 800a384:	08007c51 	.word	0x08007c51
 800a388:	0800a13b 	.word	0x0800a13b

0800a38c <_putc_r>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	460d      	mov	r5, r1
 800a390:	4614      	mov	r4, r2
 800a392:	4606      	mov	r6, r0
 800a394:	b118      	cbz	r0, 800a39e <_putc_r+0x12>
 800a396:	6983      	ldr	r3, [r0, #24]
 800a398:	b90b      	cbnz	r3, 800a39e <_putc_r+0x12>
 800a39a:	f7ff f8b9 	bl	8009510 <__sinit>
 800a39e:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <_putc_r+0x60>)
 800a3a0:	429c      	cmp	r4, r3
 800a3a2:	d112      	bne.n	800a3ca <_putc_r+0x3e>
 800a3a4:	6874      	ldr	r4, [r6, #4]
 800a3a6:	68a3      	ldr	r3, [r4, #8]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	60a3      	str	r3, [r4, #8]
 800a3ae:	da16      	bge.n	800a3de <_putc_r+0x52>
 800a3b0:	69a2      	ldr	r2, [r4, #24]
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	db02      	blt.n	800a3bc <_putc_r+0x30>
 800a3b6:	b2eb      	uxtb	r3, r5
 800a3b8:	2b0a      	cmp	r3, #10
 800a3ba:	d110      	bne.n	800a3de <_putc_r+0x52>
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4629      	mov	r1, r5
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3c6:	f7fe b8b1 	b.w	800852c <__swbuf_r>
 800a3ca:	4b09      	ldr	r3, [pc, #36]	; (800a3f0 <_putc_r+0x64>)
 800a3cc:	429c      	cmp	r4, r3
 800a3ce:	d101      	bne.n	800a3d4 <_putc_r+0x48>
 800a3d0:	68b4      	ldr	r4, [r6, #8]
 800a3d2:	e7e8      	b.n	800a3a6 <_putc_r+0x1a>
 800a3d4:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <_putc_r+0x68>)
 800a3d6:	429c      	cmp	r4, r3
 800a3d8:	bf08      	it	eq
 800a3da:	68f4      	ldreq	r4, [r6, #12]
 800a3dc:	e7e3      	b.n	800a3a6 <_putc_r+0x1a>
 800a3de:	6823      	ldr	r3, [r4, #0]
 800a3e0:	b2e8      	uxtb	r0, r5
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	6022      	str	r2, [r4, #0]
 800a3e6:	701d      	strb	r5, [r3, #0]
 800a3e8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ea:	bf00      	nop
 800a3ec:	0800a9c8 	.word	0x0800a9c8
 800a3f0:	0800a9e8 	.word	0x0800a9e8
 800a3f4:	0800a9a8 	.word	0x0800a9a8

0800a3f8 <_sbrk_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4c05      	ldr	r4, [pc, #20]	; (800a414 <_sbrk_r+0x1c>)
 800a3fe:	4605      	mov	r5, r0
 800a400:	4608      	mov	r0, r1
 800a402:	6023      	str	r3, [r4, #0]
 800a404:	f7f8 f980 	bl	8002708 <_sbrk>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_sbrk_r+0x1a>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_sbrk_r+0x1a>
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	200010f4 	.word	0x200010f4

0800a418 <__sread>:
 800a418:	b510      	push	{r4, lr}
 800a41a:	460c      	mov	r4, r1
 800a41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a420:	f000 f8e8 	bl	800a5f4 <_read_r>
 800a424:	2800      	cmp	r0, #0
 800a426:	bfab      	itete	ge
 800a428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a42a:	89a3      	ldrhlt	r3, [r4, #12]
 800a42c:	181b      	addge	r3, r3, r0
 800a42e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a432:	bfac      	ite	ge
 800a434:	6563      	strge	r3, [r4, #84]	; 0x54
 800a436:	81a3      	strhlt	r3, [r4, #12]
 800a438:	bd10      	pop	{r4, pc}

0800a43a <__swrite>:
 800a43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a43e:	461f      	mov	r7, r3
 800a440:	898b      	ldrh	r3, [r1, #12]
 800a442:	4605      	mov	r5, r0
 800a444:	05db      	lsls	r3, r3, #23
 800a446:	460c      	mov	r4, r1
 800a448:	4616      	mov	r6, r2
 800a44a:	d505      	bpl.n	800a458 <__swrite+0x1e>
 800a44c:	2302      	movs	r3, #2
 800a44e:	2200      	movs	r2, #0
 800a450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a454:	f000 f868 	bl	800a528 <_lseek_r>
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	4632      	mov	r2, r6
 800a45c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a460:	81a3      	strh	r3, [r4, #12]
 800a462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a466:	463b      	mov	r3, r7
 800a468:	4628      	mov	r0, r5
 800a46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a46e:	f000 b817 	b.w	800a4a0 <_write_r>

0800a472 <__sseek>:
 800a472:	b510      	push	{r4, lr}
 800a474:	460c      	mov	r4, r1
 800a476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47a:	f000 f855 	bl	800a528 <_lseek_r>
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	bf15      	itete	ne
 800a484:	6560      	strne	r0, [r4, #84]	; 0x54
 800a486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a48a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a48e:	81a3      	strheq	r3, [r4, #12]
 800a490:	bf18      	it	ne
 800a492:	81a3      	strhne	r3, [r4, #12]
 800a494:	bd10      	pop	{r4, pc}

0800a496 <__sclose>:
 800a496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a49a:	f000 b813 	b.w	800a4c4 <_close_r>
	...

0800a4a0 <_write_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	4c05      	ldr	r4, [pc, #20]	; (800a4c0 <_write_r+0x20>)
 800a4ac:	6022      	str	r2, [r4, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f7f7 fe6b 	bl	800218a <_write>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_write_r+0x1e>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_write_r+0x1e>
 800a4bc:	602b      	str	r3, [r5, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	200010f4 	.word	0x200010f4

0800a4c4 <_close_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	4c05      	ldr	r4, [pc, #20]	; (800a4e0 <_close_r+0x1c>)
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	6023      	str	r3, [r4, #0]
 800a4d0:	f7f8 f8e9 	bl	80026a6 <_close>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_close_r+0x1a>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_close_r+0x1a>
 800a4dc:	602b      	str	r3, [r5, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	200010f4 	.word	0x200010f4

0800a4e4 <_fstat_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	4c06      	ldr	r4, [pc, #24]	; (800a504 <_fstat_r+0x20>)
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	4608      	mov	r0, r1
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	f7f8 f8e3 	bl	80026bc <_fstat>
 800a4f6:	1c43      	adds	r3, r0, #1
 800a4f8:	d102      	bne.n	800a500 <_fstat_r+0x1c>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	b103      	cbz	r3, 800a500 <_fstat_r+0x1c>
 800a4fe:	602b      	str	r3, [r5, #0]
 800a500:	bd38      	pop	{r3, r4, r5, pc}
 800a502:	bf00      	nop
 800a504:	200010f4 	.word	0x200010f4

0800a508 <_isatty_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	2300      	movs	r3, #0
 800a50c:	4c05      	ldr	r4, [pc, #20]	; (800a524 <_isatty_r+0x1c>)
 800a50e:	4605      	mov	r5, r0
 800a510:	4608      	mov	r0, r1
 800a512:	6023      	str	r3, [r4, #0]
 800a514:	f7f8 f8e1 	bl	80026da <_isatty>
 800a518:	1c43      	adds	r3, r0, #1
 800a51a:	d102      	bne.n	800a522 <_isatty_r+0x1a>
 800a51c:	6823      	ldr	r3, [r4, #0]
 800a51e:	b103      	cbz	r3, 800a522 <_isatty_r+0x1a>
 800a520:	602b      	str	r3, [r5, #0]
 800a522:	bd38      	pop	{r3, r4, r5, pc}
 800a524:	200010f4 	.word	0x200010f4

0800a528 <_lseek_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4605      	mov	r5, r0
 800a52c:	4608      	mov	r0, r1
 800a52e:	4611      	mov	r1, r2
 800a530:	2200      	movs	r2, #0
 800a532:	4c05      	ldr	r4, [pc, #20]	; (800a548 <_lseek_r+0x20>)
 800a534:	6022      	str	r2, [r4, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	f7f8 f8d9 	bl	80026ee <_lseek>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	d102      	bne.n	800a546 <_lseek_r+0x1e>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	b103      	cbz	r3, 800a546 <_lseek_r+0x1e>
 800a544:	602b      	str	r3, [r5, #0]
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	200010f4 	.word	0x200010f4

0800a54c <__ascii_mbtowc>:
 800a54c:	b082      	sub	sp, #8
 800a54e:	b901      	cbnz	r1, 800a552 <__ascii_mbtowc+0x6>
 800a550:	a901      	add	r1, sp, #4
 800a552:	b142      	cbz	r2, 800a566 <__ascii_mbtowc+0x1a>
 800a554:	b14b      	cbz	r3, 800a56a <__ascii_mbtowc+0x1e>
 800a556:	7813      	ldrb	r3, [r2, #0]
 800a558:	600b      	str	r3, [r1, #0]
 800a55a:	7812      	ldrb	r2, [r2, #0]
 800a55c:	1c10      	adds	r0, r2, #0
 800a55e:	bf18      	it	ne
 800a560:	2001      	movne	r0, #1
 800a562:	b002      	add	sp, #8
 800a564:	4770      	bx	lr
 800a566:	4610      	mov	r0, r2
 800a568:	e7fb      	b.n	800a562 <__ascii_mbtowc+0x16>
 800a56a:	f06f 0001 	mvn.w	r0, #1
 800a56e:	e7f8      	b.n	800a562 <__ascii_mbtowc+0x16>

0800a570 <memmove>:
 800a570:	4288      	cmp	r0, r1
 800a572:	b510      	push	{r4, lr}
 800a574:	eb01 0302 	add.w	r3, r1, r2
 800a578:	d807      	bhi.n	800a58a <memmove+0x1a>
 800a57a:	1e42      	subs	r2, r0, #1
 800a57c:	4299      	cmp	r1, r3
 800a57e:	d00a      	beq.n	800a596 <memmove+0x26>
 800a580:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a584:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a588:	e7f8      	b.n	800a57c <memmove+0xc>
 800a58a:	4283      	cmp	r3, r0
 800a58c:	d9f5      	bls.n	800a57a <memmove+0xa>
 800a58e:	1881      	adds	r1, r0, r2
 800a590:	1ad2      	subs	r2, r2, r3
 800a592:	42d3      	cmn	r3, r2
 800a594:	d100      	bne.n	800a598 <memmove+0x28>
 800a596:	bd10      	pop	{r4, pc}
 800a598:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a59c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5a0:	e7f7      	b.n	800a592 <memmove+0x22>

0800a5a2 <__malloc_lock>:
 800a5a2:	4770      	bx	lr

0800a5a4 <__malloc_unlock>:
 800a5a4:	4770      	bx	lr

0800a5a6 <_realloc_r>:
 800a5a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a8:	4607      	mov	r7, r0
 800a5aa:	4614      	mov	r4, r2
 800a5ac:	460e      	mov	r6, r1
 800a5ae:	b921      	cbnz	r1, 800a5ba <_realloc_r+0x14>
 800a5b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	f7ff bbff 	b.w	8009db8 <_malloc_r>
 800a5ba:	b922      	cbnz	r2, 800a5c6 <_realloc_r+0x20>
 800a5bc:	f7ff fbb0 	bl	8009d20 <_free_r>
 800a5c0:	4625      	mov	r5, r4
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c6:	f000 f834 	bl	800a632 <_malloc_usable_size_r>
 800a5ca:	42a0      	cmp	r0, r4
 800a5cc:	d20f      	bcs.n	800a5ee <_realloc_r+0x48>
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4638      	mov	r0, r7
 800a5d2:	f7ff fbf1 	bl	8009db8 <_malloc_r>
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d0f2      	beq.n	800a5c2 <_realloc_r+0x1c>
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4622      	mov	r2, r4
 800a5e0:	f7ff f8a8 	bl	8009734 <memcpy>
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f7ff fb9a 	bl	8009d20 <_free_r>
 800a5ec:	e7e9      	b.n	800a5c2 <_realloc_r+0x1c>
 800a5ee:	4635      	mov	r5, r6
 800a5f0:	e7e7      	b.n	800a5c2 <_realloc_r+0x1c>
	...

0800a5f4 <_read_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4c05      	ldr	r4, [pc, #20]	; (800a614 <_read_r+0x20>)
 800a600:	6022      	str	r2, [r4, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	f7f8 f832 	bl	800266c <_read>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_read_r+0x1e>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_read_r+0x1e>
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	200010f4 	.word	0x200010f4

0800a618 <__ascii_wctomb>:
 800a618:	b149      	cbz	r1, 800a62e <__ascii_wctomb+0x16>
 800a61a:	2aff      	cmp	r2, #255	; 0xff
 800a61c:	bf8b      	itete	hi
 800a61e:	238a      	movhi	r3, #138	; 0x8a
 800a620:	700a      	strbls	r2, [r1, #0]
 800a622:	6003      	strhi	r3, [r0, #0]
 800a624:	2001      	movls	r0, #1
 800a626:	bf88      	it	hi
 800a628:	f04f 30ff 	movhi.w	r0, #4294967295
 800a62c:	4770      	bx	lr
 800a62e:	4608      	mov	r0, r1
 800a630:	4770      	bx	lr

0800a632 <_malloc_usable_size_r>:
 800a632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a636:	1f18      	subs	r0, r3, #4
 800a638:	2b00      	cmp	r3, #0
 800a63a:	bfbc      	itt	lt
 800a63c:	580b      	ldrlt	r3, [r1, r0]
 800a63e:	18c0      	addlt	r0, r0, r3
 800a640:	4770      	bx	lr
	...

0800a644 <_init>:
 800a644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a646:	bf00      	nop
 800a648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a64a:	bc08      	pop	{r3}
 800a64c:	469e      	mov	lr, r3
 800a64e:	4770      	bx	lr

0800a650 <_fini>:
 800a650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a652:	bf00      	nop
 800a654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a656:	bc08      	pop	{r3}
 800a658:	469e      	mov	lr, r3
 800a65a:	4770      	bx	lr
